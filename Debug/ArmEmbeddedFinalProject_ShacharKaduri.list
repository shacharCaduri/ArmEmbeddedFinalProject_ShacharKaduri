
ArmEmbeddedFinalProject_ShacharKaduri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001706c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c5c  0801723c  0801723c  0002723c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019e98  08019e98  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08019e98  08019e98  00029e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019ea0  08019ea0  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019ea0  08019ea0  00029ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019ea4  08019ea4  00029ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08019ea8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08019f38  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  08019fd8  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000091d0  200001d0  0801a078  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200093a0  0801a078  000393a0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003188e  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007199  00000000  00000000  00061a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000024a0  00000000  00000000  00068c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002310  00000000  00000000  0006b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037b49  00000000  00000000  0006d3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003bd48  00000000  00000000  000a4f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010fa0c  00000000  00000000  000e0c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f0675  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a280  00000000  00000000  001f06c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017224 	.word	0x08017224

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08017224 	.word	0x08017224

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db4:	f001 fc76 	bl	80026a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db8:	f000 f81e 	bl	8000df8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8000dbc:	f000 fa70 	bl	80012a0 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc0:	f000 faf0 	bl	80013a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000dc4:	f000 f9de 	bl	8001184 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dc8:	f000 fa3c 	bl	8001244 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000dcc:	f000 f972 	bl	80010b4 <MX_TIM7_Init>
  MX_LWIP_Init();
 8000dd0:	f009 ffd2 	bl	800ad78 <MX_LWIP_Init>
  MX_UART4_Init();
 8000dd4:	f000 f9a6 	bl	8001124 <MX_UART4_Init>
  MX_DMA_Init();
 8000dd8:	f000 fa62 	bl	80012a0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ddc:	f000 f874 	bl	8000ec8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000de0:	f000 f8b2 	bl	8000f48 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8000de4:	f000 f9fe 	bl	80011e4 <MX_USART6_UART_Init>
  MX_SPI4_Init();
 8000de8:	f000 f92c 	bl	8001044 <MX_SPI4_Init>
  MX_SPI1_Init();
 8000dec:	f000 f8ec 	bl	8000fc8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  UUT_main();
 8000df0:	f014 ff28 	bl	8015c44 <UUT_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <main+0x44>
	...

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	; 0x50
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	2230      	movs	r2, #48	; 0x30
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f015 f9b4 	bl	8016174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e1c:	f005 fdde 	bl	80069dc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <SystemClock_Config+0xc8>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <SystemClock_Config+0xc8>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <SystemClock_Config+0xc8>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e40:	4a20      	ldr	r2, [pc, #128]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e54:	2301      	movs	r3, #1
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e58:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000e6c:	2348      	movs	r3, #72	; 0x48
 8000e6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e74:	2303      	movs	r3, #3
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f005 fdbd 	bl	80069fc <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e88:	f000 fb4a 	bl	8001520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	2302      	movs	r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 f84b 	bl	8006f44 <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eb4:	f000 fb34 	bl	8001520 <Error_Handler>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3750      	adds	r7, #80	; 0x50
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <MX_I2C1_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <MX_I2C1_Init+0x7c>)
 8000ed6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 15;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000eda:	220f      	movs	r2, #15
 8000edc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f02:	480e      	ldr	r0, [pc, #56]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000f04:	f003 fc3e 	bl	8004784 <HAL_I2C_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f0e:	f000 fb07 	bl	8001520 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000f16:	f005 fb81 	bl	800661c <HAL_I2CEx_ConfigAnalogFilter>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f20:	f000 fafe 	bl	8001520 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f24:	2100      	movs	r1, #0
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000f28:	f005 fbc3 	bl	80066b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f000 faf5 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001ec 	.word	0x200001ec
 8000f40:	40005400 	.word	0x40005400
 8000f44:	00808cd2 	.word	0x00808cd2

08000f48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <MX_I2C2_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <MX_I2C2_Init+0x7c>)
 8000f56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f84:	f003 fbfe 	bl	8004784 <HAL_I2C_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f8e:	f000 fac7 	bl	8001520 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f96:	f005 fb41 	bl	800661c <HAL_I2CEx_ConfigAnalogFilter>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fa0:	f000 fabe 	bl	8001520 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000fa8:	f005 fb83 	bl	80066b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 fab5 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000240 	.word	0x20000240
 8000fc0:	40005800 	.word	0x40005800
 8000fc4:	00808cd2 	.word	0x00808cd2

08000fc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_SPI1_Init+0x74>)
 8000fce:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <MX_SPI1_Init+0x78>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_SPI1_Init+0x74>)
 8000fd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_SPI1_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_SPI1_Init+0x74>)
 8000fe2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fe6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_SPI1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_SPI1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_SPI1_Init+0x74>)
 8000ff6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ffa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_SPI1_Init+0x74>)
 8000ffe:	2218      	movs	r2, #24
 8001000:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_SPI1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_SPI1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_SPI1_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_SPI1_Init+0x74>)
 8001016:	2207      	movs	r2, #7
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_SPI1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_SPI1_Init+0x74>)
 8001022:	2208      	movs	r2, #8
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_SPI1_Init+0x74>)
 8001028:	f006 fda2 	bl	8007b70 <HAL_SPI_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001032:	f000 fa75 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000414 	.word	0x20000414
 8001040:	40013000 	.word	0x40013000

08001044 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_SPI4_Init+0x68>)
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <MX_SPI4_Init+0x6c>)
 800104c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_SPI4_Init+0x68>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_SPI4_Init+0x68>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_SPI4_Init+0x68>)
 800105c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001060:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_SPI4_Init+0x68>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_SPI4_Init+0x68>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_SPI4_Init+0x68>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <MX_SPI4_Init+0x68>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_SPI4_Init+0x68>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <MX_SPI4_Init+0x68>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_SPI4_Init+0x68>)
 8001088:	2207      	movs	r2, #7
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <MX_SPI4_Init+0x68>)
 800108e:	2200      	movs	r2, #0
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_SPI4_Init+0x68>)
 8001094:	2200      	movs	r2, #0
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_SPI4_Init+0x68>)
 800109a:	f006 fd69 	bl	8007b70 <HAL_SPI_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 80010a4:	f000 fa3c 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000478 	.word	0x20000478
 80010b0:	40013400 	.word	0x40013400

080010b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_TIM7_Init+0x68>)
 80010c6:	4a16      	ldr	r2, [pc, #88]	; (8001120 <MX_TIM7_Init+0x6c>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_TIM7_Init+0x68>)
 80010cc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80010d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_TIM7_Init+0x68>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_TIM7_Init+0x68>)
 80010da:	f242 720f 	movw	r2, #9999	; 0x270f
 80010de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_TIM7_Init+0x68>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010e6:	480d      	ldr	r0, [pc, #52]	; (800111c <MX_TIM7_Init+0x68>)
 80010e8:	f007 fba0 	bl	800882c <HAL_TIM_Base_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80010f2:	f000 fa15 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <MX_TIM7_Init+0x68>)
 8001104:	f007 fe78 	bl	8008df8 <HAL_TIMEx_MasterConfigSynchronization>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800110e:	f000 fa07 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000065c 	.word	0x2000065c
 8001120:	40001400 	.word	0x40001400

08001124 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_UART4_Init+0x58>)
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <MX_UART4_Init+0x5c>)
 800112c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_UART4_Init+0x58>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_UART4_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_UART4_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_UART4_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_UART4_Init+0x58>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_UART4_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_UART4_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_UART4_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_UART4_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_UART4_Init+0x58>)
 8001168:	f007 fef2 	bl	8008f50 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001172:	f000 f9d5 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200006a8 	.word	0x200006a8
 8001180:	40004c00 	.word	0x40004c00

08001184 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_USART3_UART_Init+0x58>)
 800118a:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <MX_USART3_UART_Init+0x5c>)
 800118c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_USART3_UART_Init+0x58>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_USART3_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_USART3_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011c8:	f007 fec2 	bl	8008f50 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011d2:	f000 f9a5 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000730 	.word	0x20000730
 80011e0:	40004800 	.word	0x40004800

080011e4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART6_UART_Init+0x58>)
 80011ea:	4a15      	ldr	r2, [pc, #84]	; (8001240 <MX_USART6_UART_Init+0x5c>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART6_UART_Init+0x58>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_USART6_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_USART6_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_USART6_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_USART6_UART_Init+0x58>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_USART6_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_USART6_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_USART6_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_USART6_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_USART6_UART_Init+0x58>)
 8001228:	f007 fe92 	bl	8008f50 <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001232:	f000 f975 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200007b8 	.word	0x200007b8
 8001240:	40011400 	.word	0x40011400

08001244 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800124e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001252:	2206      	movs	r2, #6
 8001254:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001258:	2202      	movs	r2, #2
 800125a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001264:	2202      	movs	r2, #2
 8001266:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800126a:	2201      	movs	r2, #1
 800126c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800127c:	2201      	movs	r2, #1
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001288:	f005 fa5f 	bl	800674a <HAL_PCD_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001292:	f000 f945 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200009c0 	.word	0x200009c0

080012a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <MX_DMA_Init+0x100>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a3d      	ldr	r2, [pc, #244]	; (80013a0 <MX_DMA_Init+0x100>)
 80012ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <MX_DMA_Init+0x100>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <MX_DMA_Init+0x100>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a37      	ldr	r2, [pc, #220]	; (80013a0 <MX_DMA_Init+0x100>)
 80012c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <MX_DMA_Init+0x100>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	200b      	movs	r0, #11
 80012dc:	f001 fb3f 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012e0:	200b      	movs	r0, #11
 80012e2:	f001 fb58 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	200d      	movs	r0, #13
 80012ec:	f001 fb37 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012f0:	200d      	movs	r0, #13
 80012f2:	f001 fb50 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	200e      	movs	r0, #14
 80012fc:	f001 fb2f 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001300:	200e      	movs	r0, #14
 8001302:	f001 fb48 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	200f      	movs	r0, #15
 800130c:	f001 fb27 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001310:	200f      	movs	r0, #15
 8001312:	f001 fb40 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2011      	movs	r0, #17
 800131c:	f001 fb1f 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001320:	2011      	movs	r0, #17
 8001322:	f001 fb38 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	202f      	movs	r0, #47	; 0x2f
 800132c:	f001 fb17 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001330:	202f      	movs	r0, #47	; 0x2f
 8001332:	f001 fb30 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2038      	movs	r0, #56	; 0x38
 800133c:	f001 fb0f 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001340:	2038      	movs	r0, #56	; 0x38
 8001342:	f001 fb28 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2039      	movs	r0, #57	; 0x39
 800134c:	f001 fb07 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001350:	2039      	movs	r0, #57	; 0x39
 8001352:	f001 fb20 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	203a      	movs	r0, #58	; 0x3a
 800135c:	f001 faff 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001360:	203a      	movs	r0, #58	; 0x3a
 8001362:	f001 fb18 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	203b      	movs	r0, #59	; 0x3b
 800136c:	f001 faf7 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001370:	203b      	movs	r0, #59	; 0x3b
 8001372:	f001 fb10 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	203c      	movs	r0, #60	; 0x3c
 800137c:	f001 faef 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001380:	203c      	movs	r0, #60	; 0x3c
 8001382:	f001 fb08 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2045      	movs	r0, #69	; 0x45
 800138c:	f001 fae7 	bl	800295e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001390:	2045      	movs	r0, #69	; 0x45
 8001392:	f001 fb00 	bl	8002996 <HAL_NVIC_EnableIRQ>

}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	4b55      	ldr	r3, [pc, #340]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a54      	ldr	r2, [pc, #336]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b52      	ldr	r3, [pc, #328]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d2:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a4e      	ldr	r2, [pc, #312]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b49      	ldr	r3, [pc, #292]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a48      	ldr	r2, [pc, #288]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b46      	ldr	r3, [pc, #280]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4b43      	ldr	r3, [pc, #268]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a42      	ldr	r2, [pc, #264]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b40      	ldr	r3, [pc, #256]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141a:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <MX_GPIO_Init+0x16c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a3c      	ldr	r2, [pc, #240]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001432:	4b37      	ldr	r3, [pc, #220]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a36      	ldr	r2, [pc, #216]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <MX_GPIO_Init+0x16c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a30      	ldr	r2, [pc, #192]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f244 0181 	movw	r1, #16513	; 0x4081
 8001468:	482a      	ldr	r0, [pc, #168]	; (8001514 <MX_GPIO_Init+0x170>)
 800146a:	f003 f971 	bl	8004750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2140      	movs	r1, #64	; 0x40
 8001472:	4829      	ldr	r0, [pc, #164]	; (8001518 <MX_GPIO_Init+0x174>)
 8001474:	f003 f96c 	bl	8004750 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4823      	ldr	r0, [pc, #140]	; (800151c <MX_GPIO_Init+0x178>)
 8001490:	f002 ffb2 	bl	80043f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001494:	f244 0381 	movw	r3, #16513	; 0x4081
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	4819      	ldr	r0, [pc, #100]	; (8001514 <MX_GPIO_Init+0x170>)
 80014ae:	f002 ffa3 	bl	80043f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014c4:	2305      	movs	r3, #5
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4811      	ldr	r0, [pc, #68]	; (8001514 <MX_GPIO_Init+0x170>)
 80014d0:	f002 ff92 	bl	80043f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014d4:	2340      	movs	r3, #64	; 0x40
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	480b      	ldr	r0, [pc, #44]	; (8001518 <MX_GPIO_Init+0x174>)
 80014ec:	f002 ff84 	bl	80043f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_GPIO_Init+0x174>)
 8001504:	f002 ff78 	bl	80043f8 <HAL_GPIO_Init>

}
 8001508:	bf00      	nop
 800150a:	3730      	adds	r7, #48	; 0x30
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	40020400 	.word	0x40020400
 8001518:	40021800 	.word	0x40021800
 800151c:	40020800 	.word	0x40020800

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>
	...

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_MspInit+0x44>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_MspInit+0x44>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_MspInit+0x44>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x44>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x44>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x44>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0ac      	sub	sp, #176	; 0xb0
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800158c:	f107 0318 	add.w	r3, r7, #24
 8001590:	2284      	movs	r2, #132	; 0x84
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f014 fded 	bl	8016174 <memset>
  if(hi2c->Instance==I2C1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a57      	ldr	r2, [pc, #348]	; (80016fc <HAL_I2C_MspInit+0x188>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	f040 80b9 	bne.w	8001718 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	4618      	mov	r0, r3
 80015b6:	f005 feeb 	bl	8007390 <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80015c0:	f7ff ffae 	bl	8001520 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	4b4e      	ldr	r3, [pc, #312]	; (8001700 <HAL_I2C_MspInit+0x18c>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	4a4d      	ldr	r2, [pc, #308]	; (8001700 <HAL_I2C_MspInit+0x18c>)
 80015ca:	f043 0302 	orr.w	r3, r3, #2
 80015ce:	6313      	str	r3, [r2, #48]	; 0x30
 80015d0:	4b4b      	ldr	r3, [pc, #300]	; (8001700 <HAL_I2C_MspInit+0x18c>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_1_CLK_Slave_DMA_Pin|I2C_1_SDA_Slave_DMA_Pin;
 80015dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e4:	2312      	movs	r3, #18
 80015e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f6:	2304      	movs	r3, #4
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001600:	4619      	mov	r1, r3
 8001602:	4840      	ldr	r0, [pc, #256]	; (8001704 <HAL_I2C_MspInit+0x190>)
 8001604:	f002 fef8 	bl	80043f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001608:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <HAL_I2C_MspInit+0x18c>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a3c      	ldr	r2, [pc, #240]	; (8001700 <HAL_I2C_MspInit+0x18c>)
 800160e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
 8001614:	4b3a      	ldr	r3, [pc, #232]	; (8001700 <HAL_I2C_MspInit+0x18c>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001620:	4b39      	ldr	r3, [pc, #228]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001622:	4a3a      	ldr	r2, [pc, #232]	; (800170c <HAL_I2C_MspInit+0x198>)
 8001624:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800162c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162e:	4b36      	ldr	r3, [pc, #216]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_I2C_MspInit+0x194>)
 800163c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001640:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_I2C_MspInit+0x194>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800165a:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_I2C_MspInit+0x194>)
 800165c:	2200      	movs	r2, #0
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001660:	4829      	ldr	r0, [pc, #164]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001662:	f001 f9b3 	bl	80029cc <HAL_DMA_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 800166c:	f7ff ff58 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a25      	ldr	r2, [pc, #148]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c
 8001676:	4a24      	ldr	r2, [pc, #144]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 800167e:	4a25      	ldr	r2, [pc, #148]	; (8001714 <HAL_I2C_MspInit+0x1a0>)
 8001680:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 8001684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001688:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 800168c:	2240      	movs	r2, #64	; 0x40
 800168e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001696:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 8001698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800169c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80016bc:	4814      	ldr	r0, [pc, #80]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016be:	f001 f985 	bl	80029cc <HAL_DMA_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 80016c8:	f7ff ff2a 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016d0:	639a      	str	r2, [r3, #56]	; 0x38
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	201f      	movs	r0, #31
 80016de:	f001 f93e 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016e2:	201f      	movs	r0, #31
 80016e4:	f001 f957 	bl	8002996 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2020      	movs	r0, #32
 80016ee:	f001 f936 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016f2:	2020      	movs	r0, #32
 80016f4:	f001 f94f 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016f8:	e0be      	b.n	8001878 <HAL_I2C_MspInit+0x304>
 80016fa:	bf00      	nop
 80016fc:	40005400 	.word	0x40005400
 8001700:	40023800 	.word	0x40023800
 8001704:	40020400 	.word	0x40020400
 8001708:	20000294 	.word	0x20000294
 800170c:	40026010 	.word	0x40026010
 8001710:	200002f4 	.word	0x200002f4
 8001714:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a58      	ldr	r2, [pc, #352]	; (8001880 <HAL_I2C_MspInit+0x30c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	f040 80aa 	bne.w	8001878 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001728:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001730:	f107 0318 	add.w	r3, r7, #24
 8001734:	4618      	mov	r0, r3
 8001736:	f005 fe2b 	bl	8007390 <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8001740:	f7ff feee 	bl	8001520 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	4b4f      	ldr	r3, [pc, #316]	; (8001884 <HAL_I2C_MspInit+0x310>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	4a4e      	ldr	r2, [pc, #312]	; (8001884 <HAL_I2C_MspInit+0x310>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	6313      	str	r3, [r2, #48]	; 0x30
 8001750:	4b4c      	ldr	r3, [pc, #304]	; (8001884 <HAL_I2C_MspInit+0x310>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_2_CLK_Master_DMA_Pin|I2C_2_DATA_Master_DMA_Pin;
 800175c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001764:	2312      	movs	r3, #18
 8001766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176a:	2301      	movs	r3, #1
 800176c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001776:	2304      	movs	r3, #4
 8001778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001780:	4619      	mov	r1, r3
 8001782:	4841      	ldr	r0, [pc, #260]	; (8001888 <HAL_I2C_MspInit+0x314>)
 8001784:	f002 fe38 	bl	80043f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001788:	4b3e      	ldr	r3, [pc, #248]	; (8001884 <HAL_I2C_MspInit+0x310>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a3d      	ldr	r2, [pc, #244]	; (8001884 <HAL_I2C_MspInit+0x310>)
 800178e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_I2C_MspInit+0x310>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80017a0:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017a2:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <HAL_I2C_MspInit+0x31c>)
 80017a4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017a8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80017ac:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ae:	4b37      	ldr	r3, [pc, #220]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b4:	4b35      	ldr	r3, [pc, #212]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80017ce:	4b2f      	ldr	r3, [pc, #188]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017da:	4b2c      	ldr	r3, [pc, #176]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017dc:	2200      	movs	r2, #0
 80017de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80017e0:	482a      	ldr	r0, [pc, #168]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017e2:	f001 f8f3 	bl	80029cc <HAL_DMA_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 80017ec:	f7ff fe98 	bl	8001520 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a26      	ldr	r2, [pc, #152]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80017f6:	4a25      	ldr	r2, [pc, #148]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <HAL_I2C_MspInit+0x320>)
 80017fe:	4a26      	ldr	r2, [pc, #152]	; (8001898 <HAL_I2C_MspInit+0x324>)
 8001800:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001804:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001808:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_I2C_MspInit+0x320>)
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800181c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_I2C_MspInit+0x320>)
 800182c:	2200      	movs	r2, #0
 800182e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001832:	2200      	movs	r2, #0
 8001834:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001838:	2200      	movs	r2, #0
 800183a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800183c:	4815      	ldr	r0, [pc, #84]	; (8001894 <HAL_I2C_MspInit+0x320>)
 800183e:	f001 f8c5 	bl	80029cc <HAL_DMA_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001848:	f7ff fe6a 	bl	8001520 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a11      	ldr	r2, [pc, #68]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	2021      	movs	r0, #33	; 0x21
 800185e:	f001 f87e 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001862:	2021      	movs	r0, #33	; 0x21
 8001864:	f001 f897 	bl	8002996 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	2022      	movs	r0, #34	; 0x22
 800186e:	f001 f876 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001872:	2022      	movs	r0, #34	; 0x22
 8001874:	f001 f88f 	bl	8002996 <HAL_NVIC_EnableIRQ>
}
 8001878:	bf00      	nop
 800187a:	37b0      	adds	r7, #176	; 0xb0
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40005800 	.word	0x40005800
 8001884:	40023800 	.word	0x40023800
 8001888:	40020400 	.word	0x40020400
 800188c:	20000354 	.word	0x20000354
 8001890:	40026058 	.word	0x40026058
 8001894:	200003b4 	.word	0x200003b4
 8001898:	400260b8 	.word	0x400260b8

0800189c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a56      	ldr	r2, [pc, #344]	; (8001a14 <HAL_SPI_MspInit+0x178>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	f040 80ba 	bne.w	8001a34 <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c0:	4b55      	ldr	r3, [pc, #340]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	4a54      	ldr	r2, [pc, #336]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ca:	6453      	str	r3, [r2, #68]	; 0x44
 80018cc:	4b52      	ldr	r3, [pc, #328]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b4f      	ldr	r3, [pc, #316]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	4a4e      	ldr	r2, [pc, #312]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30
 80018e4:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b49      	ldr	r3, [pc, #292]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a48      	ldr	r2, [pc, #288]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6313      	str	r3, [r2, #48]	; 0x30
 80018fc:	4b46      	ldr	r3, [pc, #280]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693b      	ldr	r3, [r7, #16]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA15     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8001908:	f248 0360 	movw	r3, #32864	; 0x8060
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800191a:	2305      	movs	r3, #5
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	483d      	ldr	r0, [pc, #244]	; (8001a1c <HAL_SPI_MspInit+0x180>)
 8001926:	f002 fd67 	bl	80043f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800192a:	2320      	movs	r3, #32
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193a:	2305      	movs	r3, #5
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	4619      	mov	r1, r3
 8001944:	4836      	ldr	r0, [pc, #216]	; (8001a20 <HAL_SPI_MspInit+0x184>)
 8001946:	f002 fd57 	bl	80043f8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 800194c:	4a36      	ldr	r2, [pc, #216]	; (8001a28 <HAL_SPI_MspInit+0x18c>)
 800194e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 8001952:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001956:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001958:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001964:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 8001966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001978:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800197e:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800198a:	4826      	ldr	r0, [pc, #152]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 800198c:	f001 f81e 	bl	80029cc <HAL_DMA_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_SPI_MspInit+0xfe>
    {
      Error_Handler();
 8001996:	f7ff fdc3 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 800199e:	659a      	str	r2, [r3, #88]	; 0x58
 80019a0:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019a8:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <HAL_SPI_MspInit+0x194>)
 80019aa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019ae:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80019b2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019b6:	2240      	movs	r2, #64	; 0x40
 80019b8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019c8:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019e6:	4811      	ldr	r0, [pc, #68]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019e8:	f000 fff0 	bl	80029cc <HAL_DMA_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_SPI_MspInit+0x15a>
    {
      Error_Handler();
 80019f2:	f7ff fd95 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019fa:	655a      	str	r2, [r3, #84]	; 0x54
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2023      	movs	r0, #35	; 0x23
 8001a08:	f000 ffa9 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a0c:	2023      	movs	r0, #35	; 0x23
 8001a0e:	f000 ffc2 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001a12:	e0a2      	b.n	8001b5a <HAL_SPI_MspInit+0x2be>
 8001a14:	40013000 	.word	0x40013000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40020400 	.word	0x40020400
 8001a24:	200004dc 	.word	0x200004dc
 8001a28:	40026440 	.word	0x40026440
 8001a2c:	2000053c 	.word	0x2000053c
 8001a30:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI4)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a4a      	ldr	r2, [pc, #296]	; (8001b64 <HAL_SPI_MspInit+0x2c8>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	f040 808d 	bne.w	8001b5a <HAL_SPI_MspInit+0x2be>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a40:	4b49      	ldr	r3, [pc, #292]	; (8001b68 <HAL_SPI_MspInit+0x2cc>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	4a48      	ldr	r2, [pc, #288]	; (8001b68 <HAL_SPI_MspInit+0x2cc>)
 8001a46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4c:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <HAL_SPI_MspInit+0x2cc>)
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a58:	4b43      	ldr	r3, [pc, #268]	; (8001b68 <HAL_SPI_MspInit+0x2cc>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	4a42      	ldr	r2, [pc, #264]	; (8001b68 <HAL_SPI_MspInit+0x2cc>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	6313      	str	r3, [r2, #48]	; 0x30
 8001a64:	4b40      	ldr	r3, [pc, #256]	; (8001b68 <HAL_SPI_MspInit+0x2cc>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001a70:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a82:	2305      	movs	r3, #5
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4837      	ldr	r0, [pc, #220]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001a8e:	f002 fcb3 	bl	80043f8 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001a92:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001a94:	4a37      	ldr	r2, [pc, #220]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001a96:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001a98:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001a9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a9e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa0:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa6:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ab2:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001ad2:	4827      	ldr	r0, [pc, #156]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001ad4:	f000 ff7a 	bl	80029cc <HAL_DMA_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <HAL_SPI_MspInit+0x246>
      Error_Handler();
 8001ade:	f7ff fd1f 	bl	8001520 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001ae6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ae8:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream4;
 8001aee:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001af0:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <HAL_SPI_MspInit+0x2e0>)
 8001af2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_5;
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001af6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001afa:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001afe:	2240      	movs	r2, #64	; 0x40
 8001b00:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b02:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0e:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b16:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b28:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001b2e:	4812      	ldr	r0, [pc, #72]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001b30:	f000 ff4c 	bl	80029cc <HAL_DMA_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_SPI_MspInit+0x2a2>
      Error_Handler();
 8001b3a:	f7ff fcf1 	bl	8001520 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a0d      	ldr	r2, [pc, #52]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001b42:	655a      	str	r2, [r3, #84]	; 0x54
 8001b44:	4a0c      	ldr	r2, [pc, #48]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2054      	movs	r0, #84	; 0x54
 8001b50:	f000 ff05 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001b54:	2054      	movs	r0, #84	; 0x54
 8001b56:	f000 ff1e 	bl	8002996 <HAL_NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3730      	adds	r7, #48	; 0x30
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40013400 	.word	0x40013400
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	2000059c 	.word	0x2000059c
 8001b74:	40026410 	.word	0x40026410
 8001b78:	200005fc 	.word	0x200005fc
 8001b7c:	40026470 	.word	0x40026470

08001b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <HAL_TIM_Base_MspInit+0x44>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d113      	bne.n	8001bba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <HAL_TIM_Base_MspInit+0x48>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a0c      	ldr	r2, [pc, #48]	; (8001bc8 <HAL_TIM_Base_MspInit+0x48>)
 8001b98:	f043 0320 	orr.w	r3, r3, #32
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <HAL_TIM_Base_MspInit+0x48>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f003 0320 	and.w	r3, r3, #32
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	2037      	movs	r0, #55	; 0x37
 8001bb0:	f000 fed5 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001bb4:	2037      	movs	r0, #55	; 0x37
 8001bb6:	f000 feee 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40001400 	.word	0x40001400
 8001bc8:	40023800 	.word	0x40023800

08001bcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b0ae      	sub	sp, #184	; 0xb8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be4:	f107 0320 	add.w	r3, r7, #32
 8001be8:	2284      	movs	r2, #132	; 0x84
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f014 fac1 	bl	8016174 <memset>
  if(huart->Instance==UART4)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a74      	ldr	r2, [pc, #464]	; (8001dc8 <HAL_UART_MspInit+0x1fc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	f040 80a2 	bne.w	8001d42 <HAL_UART_MspInit+0x176>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c02:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c04:	2300      	movs	r3, #0
 8001c06:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c08:	f107 0320 	add.w	r3, r7, #32
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f005 fbbf 	bl	8007390 <HAL_RCCEx_PeriphCLKConfig>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001c18:	f7ff fc82 	bl	8001520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c1c:	4b6b      	ldr	r3, [pc, #428]	; (8001dcc <HAL_UART_MspInit+0x200>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a6a      	ldr	r2, [pc, #424]	; (8001dcc <HAL_UART_MspInit+0x200>)
 8001c22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
 8001c28:	4b68      	ldr	r3, [pc, #416]	; (8001dcc <HAL_UART_MspInit+0x200>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c34:	4b65      	ldr	r3, [pc, #404]	; (8001dcc <HAL_UART_MspInit+0x200>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4a64      	ldr	r2, [pc, #400]	; (8001dcc <HAL_UART_MspInit+0x200>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c40:	4b62      	ldr	r3, [pc, #392]	; (8001dcc <HAL_UART_MspInit+0x200>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
 8001c4a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_DMA_Pin|UART4_RX_DMA_Pin;
 8001c4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c60:	2303      	movs	r3, #3
 8001c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c66:	2308      	movs	r3, #8
 8001c68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4857      	ldr	r0, [pc, #348]	; (8001dd0 <HAL_UART_MspInit+0x204>)
 8001c74:	f002 fbc0 	bl	80043f8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001c78:	4b56      	ldr	r3, [pc, #344]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001c7a:	4a57      	ldr	r2, [pc, #348]	; (8001dd8 <HAL_UART_MspInit+0x20c>)
 8001c7c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001c7e:	4b55      	ldr	r3, [pc, #340]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001c80:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c84:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c86:	4b53      	ldr	r3, [pc, #332]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c8c:	4b51      	ldr	r3, [pc, #324]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c92:	4b50      	ldr	r3, [pc, #320]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001c94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c98:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c9a:	4b4e      	ldr	r3, [pc, #312]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ca0:	4b4c      	ldr	r3, [pc, #304]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001ca6:	4b4b      	ldr	r3, [pc, #300]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cac:	4b49      	ldr	r3, [pc, #292]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cb2:	4b48      	ldr	r3, [pc, #288]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001cb8:	4846      	ldr	r0, [pc, #280]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001cba:	f000 fe87 	bl	80029cc <HAL_DMA_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8001cc4:	f7ff fc2c 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a42      	ldr	r2, [pc, #264]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001ccc:	675a      	str	r2, [r3, #116]	; 0x74
 8001cce:	4a41      	ldr	r2, [pc, #260]	; (8001dd4 <HAL_UART_MspInit+0x208>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001cd4:	4b41      	ldr	r3, [pc, #260]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001cd6:	4a42      	ldr	r2, [pc, #264]	; (8001de0 <HAL_UART_MspInit+0x214>)
 8001cd8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001cda:	4b40      	ldr	r3, [pc, #256]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001cdc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ce2:	4b3e      	ldr	r3, [pc, #248]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001ce4:	2240      	movs	r2, #64	; 0x40
 8001ce6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce8:	4b3c      	ldr	r3, [pc, #240]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cee:	4b3b      	ldr	r3, [pc, #236]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001cf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cf6:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cfc:	4b37      	ldr	r3, [pc, #220]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001d02:	4b36      	ldr	r3, [pc, #216]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d08:	4b34      	ldr	r3, [pc, #208]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d0e:	4b33      	ldr	r3, [pc, #204]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001d14:	4831      	ldr	r0, [pc, #196]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001d16:	f000 fe59 	bl	80029cc <HAL_DMA_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8001d20:	f7ff fbfe 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a2d      	ldr	r2, [pc, #180]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001d28:	671a      	str	r2, [r3, #112]	; 0x70
 8001d2a:	4a2c      	ldr	r2, [pc, #176]	; (8001ddc <HAL_UART_MspInit+0x210>)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2100      	movs	r1, #0
 8001d34:	2034      	movs	r0, #52	; 0x34
 8001d36:	f000 fe12 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001d3a:	2034      	movs	r0, #52	; 0x34
 8001d3c:	f000 fe2b 	bl	8002996 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d40:	e0fb      	b.n	8001f3a <HAL_UART_MspInit+0x36e>
  else if(huart->Instance==USART3)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a27      	ldr	r2, [pc, #156]	; (8001de4 <HAL_UART_MspInit+0x218>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d14f      	bne.n	8001dec <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d50:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d56:	f107 0320 	add.w	r3, r7, #32
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f005 fb18 	bl	8007390 <HAL_RCCEx_PeriphCLKConfig>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001d66:	f7ff fbdb 	bl	8001520 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_UART_MspInit+0x200>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_UART_MspInit+0x200>)
 8001d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_UART_MspInit+0x200>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_UART_MspInit+0x200>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	4a11      	ldr	r2, [pc, #68]	; (8001dcc <HAL_UART_MspInit+0x200>)
 8001d88:	f043 0308 	orr.w	r3, r3, #8
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <HAL_UART_MspInit+0x200>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001db4:	2307      	movs	r3, #7
 8001db6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4809      	ldr	r0, [pc, #36]	; (8001de8 <HAL_UART_MspInit+0x21c>)
 8001dc2:	f002 fb19 	bl	80043f8 <HAL_GPIO_Init>
}
 8001dc6:	e0b8      	b.n	8001f3a <HAL_UART_MspInit+0x36e>
 8001dc8:	40004c00 	.word	0x40004c00
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020800 	.word	0x40020800
 8001dd4:	20000840 	.word	0x20000840
 8001dd8:	40026040 	.word	0x40026040
 8001ddc:	200008a0 	.word	0x200008a0
 8001de0:	40026070 	.word	0x40026070
 8001de4:	40004800 	.word	0x40004800
 8001de8:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART6)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a54      	ldr	r2, [pc, #336]	; (8001f44 <HAL_UART_MspInit+0x378>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	f040 80a1 	bne.w	8001f3a <HAL_UART_MspInit+0x36e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001df8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dfc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	4618      	mov	r0, r3
 8001e08:	f005 fac2 	bl	8007390 <HAL_RCCEx_PeriphCLKConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8001e12:	f7ff fb85 	bl	8001520 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e16:	4b4c      	ldr	r3, [pc, #304]	; (8001f48 <HAL_UART_MspInit+0x37c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a4b      	ldr	r2, [pc, #300]	; (8001f48 <HAL_UART_MspInit+0x37c>)
 8001e1c:	f043 0320 	orr.w	r3, r3, #32
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_UART_MspInit+0x37c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f003 0320 	and.w	r3, r3, #32
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e2e:	4b46      	ldr	r3, [pc, #280]	; (8001f48 <HAL_UART_MspInit+0x37c>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a45      	ldr	r2, [pc, #276]	; (8001f48 <HAL_UART_MspInit+0x37c>)
 8001e34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <HAL_UART_MspInit+0x37c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e42:	60bb      	str	r3, [r7, #8]
 8001e44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART6_RX_DMA_Pin|USART6_TX_DMA_Pin;
 8001e46:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e60:	2308      	movs	r3, #8
 8001e62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e66:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4837      	ldr	r0, [pc, #220]	; (8001f4c <HAL_UART_MspInit+0x380>)
 8001e6e:	f002 fac3 	bl	80043f8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001e72:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001e74:	4a37      	ldr	r2, [pc, #220]	; (8001f54 <HAL_UART_MspInit+0x388>)
 8001e76:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001e7a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001e7e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e80:	4b33      	ldr	r3, [pc, #204]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e86:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e92:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e9a:	4b2d      	ldr	r3, [pc, #180]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eac:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001eb2:	4827      	ldr	r0, [pc, #156]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001eb4:	f000 fd8a 	bl	80029cc <HAL_DMA_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8001ebe:	f7ff fb2f 	bl	8001520 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001ec6:	675a      	str	r2, [r3, #116]	; 0x74
 8001ec8:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <HAL_UART_MspInit+0x384>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001ece:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001ed0:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <HAL_UART_MspInit+0x390>)
 8001ed2:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001ed4:	4b20      	ldr	r3, [pc, #128]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001ed6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001eda:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001edc:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001ede:	2240      	movs	r2, #64	; 0x40
 8001ee0:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee8:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eee:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001f0e:	4812      	ldr	r0, [pc, #72]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001f10:	f000 fd5c 	bl	80029cc <HAL_DMA_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_UART_MspInit+0x352>
      Error_Handler();
 8001f1a:	f7ff fb01 	bl	8001520 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001f22:	671a      	str	r2, [r3, #112]	; 0x70
 8001f24:	4a0c      	ldr	r2, [pc, #48]	; (8001f58 <HAL_UART_MspInit+0x38c>)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	2047      	movs	r0, #71	; 0x47
 8001f30:	f000 fd15 	bl	800295e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f34:	2047      	movs	r0, #71	; 0x47
 8001f36:	f000 fd2e 	bl	8002996 <HAL_NVIC_EnableIRQ>
}
 8001f3a:	bf00      	nop
 8001f3c:	37b8      	adds	r7, #184	; 0xb8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40011400 	.word	0x40011400
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40021800 	.word	0x40021800
 8001f50:	20000900 	.word	0x20000900
 8001f54:	40026428 	.word	0x40026428
 8001f58:	20000960 	.word	0x20000960
 8001f5c:	400264a0 	.word	0x400264a0

08001f60 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b0ac      	sub	sp, #176	; 0xb0
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f78:	f107 0318 	add.w	r3, r7, #24
 8001f7c:	2284      	movs	r2, #132	; 0x84
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f014 f8f7 	bl	8016174 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f8e:	d159      	bne.n	8002044 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001f90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9c:	f107 0318 	add.w	r3, r7, #24
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f005 f9f5 	bl	8007390 <HAL_RCCEx_PeriphCLKConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fac:	f7ff fab8 	bl	8001520 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_PCD_MspInit+0xec>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	4a25      	ldr	r2, [pc, #148]	; (800204c <HAL_PCD_MspInit+0xec>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_PCD_MspInit+0xec>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fc8:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001fcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fe2:	230a      	movs	r3, #10
 8001fe4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fec:	4619      	mov	r1, r3
 8001fee:	4818      	ldr	r0, [pc, #96]	; (8002050 <HAL_PCD_MspInit+0xf0>)
 8001ff0:	f002 fa02 	bl	80043f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002008:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800200c:	4619      	mov	r1, r3
 800200e:	4810      	ldr	r0, [pc, #64]	; (8002050 <HAL_PCD_MspInit+0xf0>)
 8002010:	f002 f9f2 	bl	80043f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_PCD_MspInit+0xec>)
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	4a0c      	ldr	r2, [pc, #48]	; (800204c <HAL_PCD_MspInit+0xec>)
 800201a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201e:	6353      	str	r3, [r2, #52]	; 0x34
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_PCD_MspInit+0xec>)
 8002022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <HAL_PCD_MspInit+0xec>)
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <HAL_PCD_MspInit+0xec>)
 8002032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002036:	6453      	str	r3, [r2, #68]	; 0x44
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_PCD_MspInit+0xec>)
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002044:	bf00      	nop
 8002046:	37b0      	adds	r7, #176	; 0xb0
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000

08002054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002058:	e7fe      	b.n	8002058 <NMI_Handler+0x4>

0800205a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205e:	e7fe      	b.n	800205e <HardFault_Handler+0x4>

08002060 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <MemManage_Handler+0x4>

08002066 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <BusFault_Handler+0x4>

0800206c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <UsageFault_Handler+0x4>

08002072 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020a0:	f000 fb3e 	bl	8002720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80020ac:	4802      	ldr	r0, [pc, #8]	; (80020b8 <DMA1_Stream0_IRQHandler+0x10>)
 80020ae:	f000 fe2d 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20000294 	.word	0x20000294

080020bc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80020c0:	4802      	ldr	r0, [pc, #8]	; (80020cc <DMA1_Stream2_IRQHandler+0x10>)
 80020c2:	f000 fe23 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000840 	.word	0x20000840

080020d0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80020d4:	4802      	ldr	r0, [pc, #8]	; (80020e0 <DMA1_Stream3_IRQHandler+0x10>)
 80020d6:	f000 fe19 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80020da:	bf00      	nop
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000354 	.word	0x20000354

080020e4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80020e8:	4802      	ldr	r0, [pc, #8]	; (80020f4 <DMA1_Stream4_IRQHandler+0x10>)
 80020ea:	f000 fe0f 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	200008a0 	.word	0x200008a0

080020f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <DMA1_Stream6_IRQHandler+0x10>)
 80020fe:	f000 fe05 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200002f4 	.word	0x200002f4

0800210c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <I2C1_EV_IRQHandler+0x10>)
 8002112:	f002 ff13 	bl	8004f3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	200001ec 	.word	0x200001ec

08002120 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002124:	4802      	ldr	r0, [pc, #8]	; (8002130 <I2C1_ER_IRQHandler+0x10>)
 8002126:	f002 ff23 	bl	8004f70 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200001ec 	.word	0x200001ec

08002134 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002138:	4802      	ldr	r0, [pc, #8]	; (8002144 <I2C2_EV_IRQHandler+0x10>)
 800213a:	f002 feff 	bl	8004f3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000240 	.word	0x20000240

08002148 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800214c:	4802      	ldr	r0, [pc, #8]	; (8002158 <I2C2_ER_IRQHandler+0x10>)
 800214e:	f002 ff0f 	bl	8004f70 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000240 	.word	0x20000240

0800215c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <SPI1_IRQHandler+0x10>)
 8002162:	f005 ff3d 	bl	8007fe0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000414 	.word	0x20000414

08002170 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <DMA1_Stream7_IRQHandler+0x10>)
 8002176:	f000 fdc9 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	200003b4 	.word	0x200003b4

08002184 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002188:	4802      	ldr	r0, [pc, #8]	; (8002194 <UART4_IRQHandler+0x10>)
 800218a:	f007 f937 	bl	80093fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	200006a8 	.word	0x200006a8

08002198 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800219c:	4802      	ldr	r0, [pc, #8]	; (80021a8 <TIM7_IRQHandler+0x10>)
 800219e:	f006 fc44 	bl	8008a2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	2000065c 	.word	0x2000065c

080021ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80021b0:	4802      	ldr	r0, [pc, #8]	; (80021bc <DMA2_Stream0_IRQHandler+0x10>)
 80021b2:	f000 fdab 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	2000059c 	.word	0x2000059c

080021c0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80021c4:	4802      	ldr	r0, [pc, #8]	; (80021d0 <DMA2_Stream1_IRQHandler+0x10>)
 80021c6:	f000 fda1 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20000900 	.word	0x20000900

080021d4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <DMA2_Stream2_IRQHandler+0x10>)
 80021da:	f000 fd97 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	200004dc 	.word	0x200004dc

080021e8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <DMA2_Stream3_IRQHandler+0x10>)
 80021ee:	f000 fd8d 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	2000053c 	.word	0x2000053c

080021fc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <DMA2_Stream4_IRQHandler+0x10>)
 8002202:	f000 fd83 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200005fc 	.word	0x200005fc

08002210 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <DMA2_Stream6_IRQHandler+0x10>)
 8002216:	f000 fd79 	bl	8002d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000960 	.word	0x20000960

08002224 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <USART6_IRQHandler+0x10>)
 800222a:	f007 f8e7 	bl	80093fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200007b8 	.word	0x200007b8

08002238 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800223c:	4802      	ldr	r0, [pc, #8]	; (8002248 <SPI4_IRQHandler+0x10>)
 800223e:	f005 fecf 	bl	8007fe0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000478 	.word	0x20000478

0800224c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
	return 1;
 8002250:	2301      	movs	r3, #1
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <_kill>:

int _kill(int pid, int sig)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002266:	4b05      	ldr	r3, [pc, #20]	; (800227c <_kill+0x20>)
 8002268:	2216      	movs	r2, #22
 800226a:	601a      	str	r2, [r3, #0]
	return -1;
 800226c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	20009390 	.word	0x20009390

08002280 <_exit>:

void _exit (int status)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f7ff ffe5 	bl	800225c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002292:	e7fe      	b.n	8002292 <_exit+0x12>

08002294 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	return -1;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022bc:	605a      	str	r2, [r3, #4]
	return 0;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_isatty>:

int _isatty(int file)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	return 1;
 80022d4:	2301      	movs	r3, #1
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	60f8      	str	r0, [r7, #12]
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
	return 0;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <_sbrk+0x5c>)
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <_sbrk+0x60>)
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <_sbrk+0x64>)
 800231a:	4a12      	ldr	r2, [pc, #72]	; (8002364 <_sbrk+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	d205      	bcs.n	8002338 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800232c:	4b0e      	ldr	r3, [pc, #56]	; (8002368 <_sbrk+0x6c>)
 800232e:	220c      	movs	r2, #12
 8002330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002336:	e009      	b.n	800234c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002338:	4b09      	ldr	r3, [pc, #36]	; (8002360 <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233e:	4b08      	ldr	r3, [pc, #32]	; (8002360 <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	4a06      	ldr	r2, [pc, #24]	; (8002360 <_sbrk+0x64>)
 8002348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	4618      	mov	r0, r3
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	20050000 	.word	0x20050000
 800235c:	00000400 	.word	0x00000400
 8002360:	20000ec8 	.word	0x20000ec8
 8002364:	200093a0 	.word	0x200093a0
 8002368:	20009390 	.word	0x20009390

0800236c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <SystemInit+0x20>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <SystemInit+0x20>)
 8002378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800237c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002394:	480d      	ldr	r0, [pc, #52]	; (80023cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002396:	490e      	ldr	r1, [pc, #56]	; (80023d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002398:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800239c:	e002      	b.n	80023a4 <LoopCopyDataInit>

0800239e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a2:	3304      	adds	r3, #4

080023a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a8:	d3f9      	bcc.n	800239e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023ac:	4c0b      	ldr	r4, [pc, #44]	; (80023dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b0:	e001      	b.n	80023b6 <LoopFillZerobss>

080023b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b4:	3204      	adds	r2, #4

080023b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b8:	d3fb      	bcc.n	80023b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ba:	f7ff ffd7 	bl	800236c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023be:	f013 fe97 	bl	80160f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c2:	f7fe fcf5 	bl	8000db0 <main>
  bx  lr    
 80023c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80023cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80023d4:	08019ea8 	.word	0x08019ea8
  ldr r2, =_sbss
 80023d8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80023dc:	200093a0 	.word	0x200093a0

080023e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e0:	e7fe      	b.n	80023e0 <ADC_IRQHandler>

080023e2 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
 80023ea:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00b      	beq.n	800240a <LAN8742_RegisterBusIO+0x28>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <LAN8742_RegisterBusIO+0x28>
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <LAN8742_RegisterBusIO+0x28>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800240a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800240e:	e014      	b.n	800243a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685a      	ldr	r2, [r3, #4]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d17c      	bne.n	8002560 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800247a:	2300      	movs	r3, #0
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	e01c      	b.n	80024ba <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	f107 0208 	add.w	r2, r7, #8
 8002488:	2112      	movs	r1, #18
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	4798      	blx	r3
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	da03      	bge.n	800249c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002494:	f06f 0304 	mvn.w	r3, #4
 8002498:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800249a:	e00b      	b.n	80024b4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f003 031f 	and.w	r3, r3, #31
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d105      	bne.n	80024b4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80024ae:	2300      	movs	r3, #0
 80024b0:	613b      	str	r3, [r7, #16]
         break;
 80024b2:	e005      	b.n	80024c0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	3301      	adds	r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b1f      	cmp	r3, #31
 80024be:	d9df      	bls.n	8002480 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b1f      	cmp	r3, #31
 80024c6:	d902      	bls.n	80024ce <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80024c8:	f06f 0302 	mvn.w	r3, #2
 80024cc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d145      	bne.n	8002560 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6810      	ldr	r0, [r2, #0]
 80024dc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024e0:	2100      	movs	r1, #0
 80024e2:	4798      	blx	r3
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db37      	blt.n	800255a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6810      	ldr	r0, [r2, #0]
 80024f2:	f107 0208 	add.w	r2, r7, #8
 80024f6:	2100      	movs	r1, #0
 80024f8:	4798      	blx	r3
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	db28      	blt.n	8002552 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4798      	blx	r3
 8002506:	4603      	mov	r3, r0
 8002508:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800250a:	e01c      	b.n	8002546 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	4798      	blx	r3
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800251e:	d80e      	bhi.n	800253e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6810      	ldr	r0, [r2, #0]
 8002528:	f107 0208 	add.w	r2, r7, #8
 800252c:	2100      	movs	r1, #0
 800252e:	4798      	blx	r3
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	da07      	bge.n	8002546 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002536:	f06f 0304 	mvn.w	r3, #4
 800253a:	613b      	str	r3, [r7, #16]
                 break;
 800253c:	e010      	b.n	8002560 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800253e:	f06f 0301 	mvn.w	r3, #1
 8002542:	613b      	str	r3, [r7, #16]
               break;
 8002544:	e00c      	b.n	8002560 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1dd      	bne.n	800250c <LAN8742_Init+0xc6>
 8002550:	e006      	b.n	8002560 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002552:	f06f 0304 	mvn.w	r3, #4
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	e002      	b.n	8002560 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800255a:	f06f 0303 	mvn.w	r3, #3
 800255e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d112      	bne.n	800258c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	4798      	blx	r3
 800256c:	4603      	mov	r3, r0
 800256e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002570:	bf00      	nop
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	4798      	blx	r3
 8002578:	4603      	mov	r3, r0
 800257a:	461a      	mov	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002584:	d9f5      	bls.n	8002572 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800258c:	693b      	ldr	r3, [r7, #16]
 }
 800258e:	4618      	mov	r0, r3
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6810      	ldr	r0, [r2, #0]
 80025aa:	f107 020c 	add.w	r2, r7, #12
 80025ae:	2101      	movs	r1, #1
 80025b0:	4798      	blx	r3
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	da02      	bge.n	80025be <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025b8:	f06f 0304 	mvn.w	r3, #4
 80025bc:	e06e      	b.n	800269c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	6810      	ldr	r0, [r2, #0]
 80025c6:	f107 020c 	add.w	r2, r7, #12
 80025ca:	2101      	movs	r1, #1
 80025cc:	4798      	blx	r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	da02      	bge.n	80025da <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025d4:	f06f 0304 	mvn.w	r3, #4
 80025d8:	e060      	b.n	800269c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80025e4:	2301      	movs	r3, #1
 80025e6:	e059      	b.n	800269c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6810      	ldr	r0, [r2, #0]
 80025f0:	f107 020c 	add.w	r2, r7, #12
 80025f4:	2100      	movs	r1, #0
 80025f6:	4798      	blx	r3
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	da02      	bge.n	8002604 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025fe:	f06f 0304 	mvn.w	r3, #4
 8002602:	e04b      	b.n	800269c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d11b      	bne.n	8002646 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <LAN8742_GetLinkState+0x90>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002622:	2302      	movs	r3, #2
 8002624:	e03a      	b.n	800269c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002630:	2303      	movs	r3, #3
 8002632:	e033      	b.n	800269c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800263e:	2304      	movs	r3, #4
 8002640:	e02c      	b.n	800269c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002642:	2305      	movs	r3, #5
 8002644:	e02a      	b.n	800269c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6810      	ldr	r0, [r2, #0]
 800264e:	f107 020c 	add.w	r2, r7, #12
 8002652:	211f      	movs	r1, #31
 8002654:	4798      	blx	r3
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	da02      	bge.n	8002662 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800265c:	f06f 0304 	mvn.w	r3, #4
 8002660:	e01c      	b.n	800269c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d101      	bne.n	8002670 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800266c:	2306      	movs	r3, #6
 800266e:	e015      	b.n	800269c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 031c 	and.w	r3, r3, #28
 8002676:	2b18      	cmp	r3, #24
 8002678:	d101      	bne.n	800267e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800267a:	2302      	movs	r3, #2
 800267c:	e00e      	b.n	800269c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f003 031c 	and.w	r3, r3, #28
 8002684:	2b08      	cmp	r3, #8
 8002686:	d101      	bne.n	800268c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002688:	2303      	movs	r3, #3
 800268a:	e007      	b.n	800269c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 031c 	and.w	r3, r3, #28
 8002692:	2b14      	cmp	r3, #20
 8002694:	d101      	bne.n	800269a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002696:	2304      	movs	r3, #4
 8002698:	e000      	b.n	800269c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800269a:	2305      	movs	r3, #5
    }				
  }
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a8:	2003      	movs	r0, #3
 80026aa:	f000 f94d 	bl	8002948 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026ae:	2000      	movs	r0, #0
 80026b0:	f000 f806 	bl	80026c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b4:	f7fe ff3a 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_InitTick+0x54>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <HAL_InitTick+0x58>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f967 	bl	80029b2 <HAL_SYSTICK_Config>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e00e      	b.n	800270c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b0f      	cmp	r3, #15
 80026f2:	d80a      	bhi.n	800270a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f4:	2200      	movs	r2, #0
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026fc:	f000 f92f 	bl	800295e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002700:	4a06      	ldr	r2, [pc, #24]	; (800271c <HAL_InitTick+0x5c>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000000 	.word	0x20000000
 8002718:	20000008 	.word	0x20000008
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x20>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_IncTick+0x24>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4413      	add	r3, r2
 8002730:	4a04      	ldr	r2, [pc, #16]	; (8002744 <HAL_IncTick+0x24>)
 8002732:	6013      	str	r3, [r2, #0]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000008 	.word	0x20000008
 8002744:	20000ecc 	.word	0x20000ecc

08002748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  return uwTick;
 800274c:	4b03      	ldr	r3, [pc, #12]	; (800275c <HAL_GetTick+0x14>)
 800274e:	681b      	ldr	r3, [r3, #0]
}
 8002750:	4618      	mov	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000ecc 	.word	0x20000ecc

08002760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002768:	f7ff ffee 	bl	8002748 <HAL_GetTick>
 800276c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002778:	d005      	beq.n	8002786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_Delay+0x44>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4413      	add	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002786:	bf00      	nop
 8002788:	f7ff ffde 	bl	8002748 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	429a      	cmp	r2, r3
 8002796:	d8f7      	bhi.n	8002788 <HAL_Delay+0x28>
  {
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20000008 	.word	0x20000008

080027a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <__NVIC_SetPriorityGrouping+0x40>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c4:	4013      	ands	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <__NVIC_SetPriorityGrouping+0x44>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d6:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <__NVIC_SetPriorityGrouping+0x40>)
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	60d3      	str	r3, [r2, #12]
}
 80027dc:	bf00      	nop
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00
 80027ec:	05fa0000 	.word	0x05fa0000

080027f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <__NVIC_GetPriorityGrouping+0x18>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	0a1b      	lsrs	r3, r3, #8
 80027fa:	f003 0307 	and.w	r3, r3, #7
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	2b00      	cmp	r3, #0
 800281c:	db0b      	blt.n	8002836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	f003 021f 	and.w	r2, r3, #31
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <__NVIC_EnableIRQ+0x38>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	095b      	lsrs	r3, r3, #5
 800282c:	2001      	movs	r0, #1
 800282e:	fa00 f202 	lsl.w	r2, r0, r2
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000e100 	.word	0xe000e100

08002848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	6039      	str	r1, [r7, #0]
 8002852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	2b00      	cmp	r3, #0
 800285a:	db0a      	blt.n	8002872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	b2da      	uxtb	r2, r3
 8002860:	490c      	ldr	r1, [pc, #48]	; (8002894 <__NVIC_SetPriority+0x4c>)
 8002862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002866:	0112      	lsls	r2, r2, #4
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	440b      	add	r3, r1
 800286c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002870:	e00a      	b.n	8002888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4908      	ldr	r1, [pc, #32]	; (8002898 <__NVIC_SetPriority+0x50>)
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	3b04      	subs	r3, #4
 8002880:	0112      	lsls	r2, r2, #4
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	440b      	add	r3, r1
 8002886:	761a      	strb	r2, [r3, #24]
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000e100 	.word	0xe000e100
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0307 	and.w	r3, r3, #7
 80028ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f1c3 0307 	rsb	r3, r3, #7
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	bf28      	it	cs
 80028ba:	2304      	movcs	r3, #4
 80028bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3304      	adds	r3, #4
 80028c2:	2b06      	cmp	r3, #6
 80028c4:	d902      	bls.n	80028cc <NVIC_EncodePriority+0x30>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3b03      	subs	r3, #3
 80028ca:	e000      	b.n	80028ce <NVIC_EncodePriority+0x32>
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43da      	mvns	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	401a      	ands	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	fa01 f303 	lsl.w	r3, r1, r3
 80028ee:	43d9      	mvns	r1, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	4313      	orrs	r3, r2
         );
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3724      	adds	r7, #36	; 0x24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
	...

08002904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3b01      	subs	r3, #1
 8002910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002914:	d301      	bcc.n	800291a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002916:	2301      	movs	r3, #1
 8002918:	e00f      	b.n	800293a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <SysTick_Config+0x40>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002922:	210f      	movs	r1, #15
 8002924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002928:	f7ff ff8e 	bl	8002848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <SysTick_Config+0x40>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002932:	4b04      	ldr	r3, [pc, #16]	; (8002944 <SysTick_Config+0x40>)
 8002934:	2207      	movs	r2, #7
 8002936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	e000e010 	.word	0xe000e010

08002948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f7ff ff29 	bl	80027a8 <__NVIC_SetPriorityGrouping>
}
 8002956:	bf00      	nop
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295e:	b580      	push	{r7, lr}
 8002960:	b086      	sub	sp, #24
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800296c:	2300      	movs	r3, #0
 800296e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002970:	f7ff ff3e 	bl	80027f0 <__NVIC_GetPriorityGrouping>
 8002974:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff8e 	bl	800289c <NVIC_EncodePriority>
 8002980:	4602      	mov	r2, r0
 8002982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff5d 	bl	8002848 <__NVIC_SetPriority>
}
 800298e:	bf00      	nop
 8002990:	3718      	adds	r7, #24
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b082      	sub	sp, #8
 800299a:	af00      	add	r7, sp, #0
 800299c:	4603      	mov	r3, r0
 800299e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff31 	bl	800280c <__NVIC_EnableIRQ>
}
 80029aa:	bf00      	nop
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ffa2 	bl	8002904 <SysTick_Config>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d8:	f7ff feb6 	bl	8002748 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e099      	b.n	8002b1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0201 	bic.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a08:	e00f      	b.n	8002a2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a0a:	f7ff fe9d 	bl	8002748 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d908      	bls.n	8002a2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2203      	movs	r2, #3
 8002a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e078      	b.n	8002b1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1e8      	bne.n	8002a0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <HAL_DMA_Init+0x158>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d107      	bne.n	8002a94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0307 	bic.w	r3, r3, #7
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d117      	bne.n	8002aee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00e      	beq.n	8002aee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 fb23 	bl	800311c <DMA_CheckFifoParam>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2240      	movs	r2, #64	; 0x40
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002aea:	2301      	movs	r3, #1
 8002aec:	e016      	b.n	8002b1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fada 	bl	80030b0 <DMA_CalcBaseAndBitshift>
 8002afc:	4603      	mov	r3, r0
 8002afe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b04:	223f      	movs	r2, #63	; 0x3f
 8002b06:	409a      	lsls	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	f010803f 	.word	0xf010803f

08002b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
 8002b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d101      	bne.n	8002b4e <HAL_DMA_Start_IT+0x26>
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	e048      	b.n	8002be0 <HAL_DMA_Start_IT+0xb8>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d137      	bne.n	8002bd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2202      	movs	r2, #2
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fa6c 	bl	8003054 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	223f      	movs	r2, #63	; 0x3f
 8002b82:	409a      	lsls	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0216 	orr.w	r2, r2, #22
 8002b96:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ba6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0208 	orr.w	r2, r2, #8
 8002bbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f042 0201 	orr.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e005      	b.n	8002bde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bf6:	f7ff fda7 	bl	8002748 <HAL_GetTick>
 8002bfa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d008      	beq.n	8002c1a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e052      	b.n	8002cc0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0216 	bic.w	r2, r2, #22
 8002c28:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c38:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d103      	bne.n	8002c4a <HAL_DMA_Abort+0x62>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0208 	bic.w	r2, r2, #8
 8002c58:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c6a:	e013      	b.n	8002c94 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c6c:	f7ff fd6c 	bl	8002748 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	d90c      	bls.n	8002c94 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2203      	movs	r2, #3
 8002c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e015      	b.n	8002cc0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1e4      	bne.n	8002c6c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca6:	223f      	movs	r2, #63	; 0x3f
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d004      	beq.n	8002ce6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2280      	movs	r2, #128	; 0x80
 8002ce0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e00c      	b.n	8002d00 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2205      	movs	r2, #5
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d18:	4b8e      	ldr	r3, [pc, #568]	; (8002f54 <HAL_DMA_IRQHandler+0x248>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a8e      	ldr	r2, [pc, #568]	; (8002f58 <HAL_DMA_IRQHandler+0x24c>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0a9b      	lsrs	r3, r3, #10
 8002d24:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d36:	2208      	movs	r2, #8
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d01a      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0204 	bic.w	r2, r2, #4
 8002d5e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	2208      	movs	r2, #8
 8002d66:	409a      	lsls	r2, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d70:	f043 0201 	orr.w	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4013      	ands	r3, r2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d012      	beq.n	8002dae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00b      	beq.n	8002dae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da6:	f043 0202 	orr.w	r2, r3, #2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db2:	2204      	movs	r2, #4
 8002db4:	409a      	lsls	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d012      	beq.n	8002de4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00b      	beq.n	8002de4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	409a      	lsls	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	f043 0204 	orr.w	r2, r3, #4
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	2210      	movs	r2, #16
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d043      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d03c      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e06:	2210      	movs	r2, #16
 8002e08:	409a      	lsls	r2, r3
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d018      	beq.n	8002e4e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d024      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4798      	blx	r3
 8002e3a:	e01f      	b.n	8002e7c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01b      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	4798      	blx	r3
 8002e4c:	e016      	b.n	8002e7c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d107      	bne.n	8002e6c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0208 	bic.w	r2, r2, #8
 8002e6a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	2220      	movs	r2, #32
 8002e82:	409a      	lsls	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 808f 	beq.w	8002fac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8087 	beq.w	8002fac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d136      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0216 	bic.w	r2, r2, #22
 8002ec4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d103      	bne.n	8002ee6 <HAL_DMA_IRQHandler+0x1da>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0208 	bic.w	r2, r2, #8
 8002ef4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efa:	223f      	movs	r2, #63	; 0x3f
 8002efc:	409a      	lsls	r2, r3
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d07e      	beq.n	8003018 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4798      	blx	r3
        }
        return;
 8002f22:	e079      	b.n	8003018 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d01d      	beq.n	8002f6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10d      	bne.n	8002f5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d031      	beq.n	8002fac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
 8002f50:	e02c      	b.n	8002fac <HAL_DMA_IRQHandler+0x2a0>
 8002f52:	bf00      	nop
 8002f54:	20000000 	.word	0x20000000
 8002f58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d023      	beq.n	8002fac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	4798      	blx	r3
 8002f6c:	e01e      	b.n	8002fac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10f      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0210 	bic.w	r2, r2, #16
 8002f8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d032      	beq.n	800301a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d022      	beq.n	8003006 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2205      	movs	r2, #5
 8002fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0201 	bic.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d307      	bcc.n	8002ff4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f2      	bne.n	8002fd8 <HAL_DMA_IRQHandler+0x2cc>
 8002ff2:	e000      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ff4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	4798      	blx	r3
 8003016:	e000      	b.n	800301a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003018:	bf00      	nop
    }
  }
}
 800301a:	3718      	adds	r7, #24
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800302e:	b2db      	uxtb	r3, r3
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003048:	4618      	mov	r0, r3
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003070:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b40      	cmp	r3, #64	; 0x40
 8003080:	d108      	bne.n	8003094 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003092:	e007      	b.n	80030a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	60da      	str	r2, [r3, #12]
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	3b10      	subs	r3, #16
 80030c0:	4a13      	ldr	r2, [pc, #76]	; (8003110 <DMA_CalcBaseAndBitshift+0x60>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	091b      	lsrs	r3, r3, #4
 80030c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030ca:	4a12      	ldr	r2, [pc, #72]	; (8003114 <DMA_CalcBaseAndBitshift+0x64>)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4413      	add	r3, r2
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	461a      	mov	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d908      	bls.n	80030f0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <DMA_CalcBaseAndBitshift+0x68>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	1d1a      	adds	r2, r3, #4
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	659a      	str	r2, [r3, #88]	; 0x58
 80030ee:	e006      	b.n	80030fe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b08      	ldr	r3, [pc, #32]	; (8003118 <DMA_CalcBaseAndBitshift+0x68>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003102:	4618      	mov	r0, r3
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	aaaaaaab 	.word	0xaaaaaaab
 8003114:	08019c58 	.word	0x08019c58
 8003118:	fffffc00 	.word	0xfffffc00

0800311c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d11f      	bne.n	8003176 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b03      	cmp	r3, #3
 800313a:	d856      	bhi.n	80031ea <DMA_CheckFifoParam+0xce>
 800313c:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <DMA_CheckFifoParam+0x28>)
 800313e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003142:	bf00      	nop
 8003144:	08003155 	.word	0x08003155
 8003148:	08003167 	.word	0x08003167
 800314c:	08003155 	.word	0x08003155
 8003150:	080031eb 	.word	0x080031eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d046      	beq.n	80031ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003164:	e043      	b.n	80031ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800316e:	d140      	bne.n	80031f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003174:	e03d      	b.n	80031f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317e:	d121      	bne.n	80031c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2b03      	cmp	r3, #3
 8003184:	d837      	bhi.n	80031f6 <DMA_CheckFifoParam+0xda>
 8003186:	a201      	add	r2, pc, #4	; (adr r2, 800318c <DMA_CheckFifoParam+0x70>)
 8003188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318c:	0800319d 	.word	0x0800319d
 8003190:	080031a3 	.word	0x080031a3
 8003194:	0800319d 	.word	0x0800319d
 8003198:	080031b5 	.word	0x080031b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      break;
 80031a0:	e030      	b.n	8003204 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d025      	beq.n	80031fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031b2:	e022      	b.n	80031fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031bc:	d11f      	bne.n	80031fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031c2:	e01c      	b.n	80031fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d903      	bls.n	80031d2 <DMA_CheckFifoParam+0xb6>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d003      	beq.n	80031d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031d0:	e018      	b.n	8003204 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	73fb      	strb	r3, [r7, #15]
      break;
 80031d6:	e015      	b.n	8003204 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00e      	beq.n	8003202 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      break;
 80031e8:	e00b      	b.n	8003202 <DMA_CheckFifoParam+0xe6>
      break;
 80031ea:	bf00      	nop
 80031ec:	e00a      	b.n	8003204 <DMA_CheckFifoParam+0xe8>
      break;
 80031ee:	bf00      	nop
 80031f0:	e008      	b.n	8003204 <DMA_CheckFifoParam+0xe8>
      break;
 80031f2:	bf00      	nop
 80031f4:	e006      	b.n	8003204 <DMA_CheckFifoParam+0xe8>
      break;
 80031f6:	bf00      	nop
 80031f8:	e004      	b.n	8003204 <DMA_CheckFifoParam+0xe8>
      break;
 80031fa:	bf00      	nop
 80031fc:	e002      	b.n	8003204 <DMA_CheckFifoParam+0xe8>
      break;   
 80031fe:	bf00      	nop
 8003200:	e000      	b.n	8003204 <DMA_CheckFifoParam+0xe8>
      break;
 8003202:	bf00      	nop
    }
  } 
  
  return status; 
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3714      	adds	r7, #20
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop

08003214 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e06a      	b.n	80032fc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322c:	2b00      	cmp	r3, #0
 800322e:	d106      	bne.n	800323e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2223      	movs	r2, #35	; 0x23
 8003234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f008 f8a9 	bl	800b390 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323e:	4b31      	ldr	r3, [pc, #196]	; (8003304 <HAL_ETH_Init+0xf0>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	4a30      	ldr	r2, [pc, #192]	; (8003304 <HAL_ETH_Init+0xf0>)
 8003244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003248:	6453      	str	r3, [r2, #68]	; 0x44
 800324a:	4b2e      	ldr	r3, [pc, #184]	; (8003304 <HAL_ETH_Init+0xf0>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003252:	60bb      	str	r3, [r7, #8]
 8003254:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003256:	4b2c      	ldr	r3, [pc, #176]	; (8003308 <HAL_ETH_Init+0xf4>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4a2b      	ldr	r2, [pc, #172]	; (8003308 <HAL_ETH_Init+0xf4>)
 800325c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003260:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003262:	4b29      	ldr	r3, [pc, #164]	; (8003308 <HAL_ETH_Init+0xf4>)
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	4927      	ldr	r1, [pc, #156]	; (8003308 <HAL_ETH_Init+0xf4>)
 800326c:	4313      	orrs	r3, r2
 800326e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003270:	4b25      	ldr	r3, [pc, #148]	; (8003308 <HAL_ETH_Init+0xf4>)
 8003272:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	f043 0301 	orr.w	r3, r3, #1
 8003286:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800328a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800328c:	f7ff fa5c 	bl	8002748 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003292:	e011      	b.n	80032b8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003294:	f7ff fa58 	bl	8002748 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032a2:	d909      	bls.n	80032b8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2204      	movs	r2, #4
 80032a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	22e0      	movs	r2, #224	; 0xe0
 80032b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e021      	b.n	80032fc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1e4      	bne.n	8003294 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fdf0 	bl	8003eb0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 fe97 	bl	8004004 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 feed 	bl	80040b6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	461a      	mov	r2, r3
 80032e2:	2100      	movs	r1, #0
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 fe55 	bl	8003f94 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2210      	movs	r2, #16
 80032f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	40013800 	.word	0x40013800

0800330c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800331a:	2b10      	cmp	r3, #16
 800331c:	d150      	bne.n	80033c0 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2223      	movs	r2, #35	; 0x23
 8003322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2204      	movs	r2, #4
 800332a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f9fd 	bl	800372c <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 0208 	orr.w	r2, r2, #8
 8003340:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800334a:	2001      	movs	r0, #1
 800334c:	f7ff fa08 	bl	8002760 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f042 0204 	orr.w	r2, r2, #4
 8003366:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003370:	2001      	movs	r0, #1
 8003372:	f7ff f9f5 	bl	8002760 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fc36 	bl	8003bf0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6812      	ldr	r2, [r2, #0]
 8003392:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003396:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800339a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6812      	ldr	r2, [r2, #0]
 80033aa:	f043 0302 	orr.w	r3, r3, #2
 80033ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033b2:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2223      	movs	r2, #35	; 0x23
 80033b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d8:	2b23      	cmp	r3, #35	; 0x23
 80033da:	d14a      	bne.n	8003472 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2223      	movs	r2, #35	; 0x23
 80033e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033fa:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6812      	ldr	r2, [r2, #0]
 800340a:	f023 0302 	bic.w	r3, r3, #2
 800340e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003412:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0204 	bic.w	r2, r2, #4
 8003422:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800342c:	2001      	movs	r0, #1
 800342e:	f7ff f997 	bl	8002760 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fbd8 	bl	8003bf0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0208 	bic.w	r2, r2, #8
 800344e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003458:	2001      	movs	r0, #1
 800345a:	f7ff f981 	bl	8002760 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2210      	movs	r2, #16
 800346a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800346e:	2300      	movs	r3, #0
 8003470:	e000      	b.n	8003474 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
  }
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003494:	f043 0201 	orr.w	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e07c      	b.n	800359c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a8:	2b23      	cmp	r3, #35	; 0x23
 80034aa:	d176      	bne.n	800359a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80034ac:	2200      	movs	r2, #0
 80034ae:	68b9      	ldr	r1, [r7, #8]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fe6d 	bl	8004190 <ETH_Prepare_Tx_Descriptors>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d009      	beq.n	80034d0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f043 0202 	orr.w	r2, r3, #2
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e065      	b.n	800359c <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034d0:	f3bf 8f4f 	dsb	sy
}
 80034d4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3206      	adds	r2, #6
 80034de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	629a      	str	r2, [r3, #40]	; 0x28
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d904      	bls.n	8003500 <HAL_ETH_Transmit+0x84>
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fa:	1f1a      	subs	r2, r3, #4
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	3106      	adds	r1, #6
 800350c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003510:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003514:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003516:	f7ff f917 	bl	8002748 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800351c:	e037      	b.n	800358e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d011      	beq.n	8003554 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f043 0208 	orr.w	r2, r3, #8
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003548:	695a      	ldr	r2, [r3, #20]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e023      	b.n	800359c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800355a:	d018      	beq.n	800358e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800355c:	f7ff f8f4 	bl	8002748 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	d302      	bcc.n	8003572 <HAL_ETH_Transmit+0xf6>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f043 0204 	orr.w	r2, r3, #4
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003588:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e006      	b.n	800359c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	dbc3      	blt.n	800351e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
  }
}
 800359c:	4618      	mov	r0, r3
 800359e:	3718      	adds	r7, #24
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d109      	bne.n	80035d0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f043 0201 	orr.w	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0a8      	b.n	8003722 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d6:	2b23      	cmp	r3, #35	; 0x23
 80035d8:	d001      	beq.n	80035de <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0a1      	b.n	8003722 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69fa      	ldr	r2, [r7, #28]
 80035e8:	3212      	adds	r2, #18
 80035ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ee:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f4:	f1c3 0304 	rsb	r3, r3, #4
 80035f8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80035fa:	e06a      	b.n	80036d2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d007      	beq.n	8003618 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	699a      	ldr	r2, [r3, #24]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	69da      	ldr	r2, [r3, #28]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003620:	2b00      	cmp	r3, #0
 8003622:	d103      	bne.n	800362c <HAL_ETH_ReadData+0x88>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d040      	beq.n	80036ae <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003634:	2b00      	cmp	r3, #0
 8003636:	d005      	beq.n	8003644 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00c      	beq.n	8003670 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	0c1b      	lsrs	r3, r3, #16
 800365c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003660:	3b04      	subs	r3, #4
 8003662:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003688:	461a      	mov	r2, r3
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	b29b      	uxth	r3, r3
 800368e:	f008 f841 	bl	800b714 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	441a      	add	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2200      	movs	r2, #0
 80036ac:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3301      	adds	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d902      	bls.n	80036c0 <HAL_ETH_ReadData+0x11c>
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3b04      	subs	r3, #4
 80036be:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69fa      	ldr	r2, [r7, #28]
 80036c4:	3212      	adds	r2, #18
 80036c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036ca:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	3301      	adds	r3, #1
 80036d0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	db06      	blt.n	80036e8 <HAL_ETH_ReadData+0x144>
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d202      	bcs.n	80036e8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d089      	beq.n	80035fc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	441a      	add	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f815 	bl	800372c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69fa      	ldr	r2, [r7, #28]
 8003706:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003708:	7bfb      	ldrb	r3, [r7, #15]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d108      	bne.n	8003720 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	e000      	b.n	8003722 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
}
 8003722:	4618      	mov	r0, r3
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003734:	2300      	movs	r3, #0
 8003736:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003738:	2301      	movs	r3, #1
 800373a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003740:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	3212      	adds	r2, #18
 8003748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800374c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003752:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003754:	e040      	b.n	80037d8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d112      	bne.n	8003784 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800375e:	f107 030c 	add.w	r3, r7, #12
 8003762:	4618      	mov	r0, r3
 8003764:	f007 ffa6 	bl	800b6b4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d102      	bne.n	8003774 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	74fb      	strb	r3, [r7, #19]
 8003772:	e007      	b.n	8003784 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	461a      	mov	r2, r3
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	461a      	mov	r2, r3
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003784:	7cfb      	ldrb	r3, [r7, #19]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d026      	beq.n	80037d8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <ETH_UpdateDescriptor+0xe4>)
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	e003      	b.n	80037a2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80037a0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80037a2:	f3bf 8f5f 	dmb	sy
}
 80037a6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	3301      	adds	r3, #1
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d902      	bls.n	80037c6 <ETH_UpdateDescriptor+0x9a>
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	3b04      	subs	r3, #4
 80037c4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	3212      	adds	r2, #18
 80037cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d0:	617b      	str	r3, [r7, #20]
      desccount--;
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <ETH_UpdateDescriptor+0xb8>
 80037de:	7cfb      	ldrb	r3, [r7, #19]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1b8      	bne.n	8003756 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d00c      	beq.n	8003808 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f6:	461a      	mov	r2, r3
 80037f8:	2300      	movs	r3, #0
 80037fa:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69fa      	ldr	r2, [r7, #28]
 8003800:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003808:	bf00      	nop
 800380a:	3720      	adds	r7, #32
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	800045f8 	.word	0x800045f8

08003814 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 031c 	and.w	r3, r3, #28
 8003830:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	02db      	lsls	r3, r3, #11
 8003836:	b29b      	uxth	r3, r3
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	019b      	lsls	r3, r3, #6
 8003842:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	f023 0302 	bic.w	r3, r3, #2
 8003852:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003864:	f7fe ff70 	bl	8002748 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800386a:	e00d      	b.n	8003888 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800386c:	f7fe ff6c 	bl	8002748 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387a:	d301      	bcc.n	8003880 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e010      	b.n	80038a2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ec      	bne.n	800386c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	b29b      	uxth	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 031c 	and.w	r3, r3, #28
 80038c6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	02db      	lsls	r3, r3, #11
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	019b      	lsls	r3, r3, #6
 80038d8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003904:	f7fe ff20 	bl	8002748 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800390a:	e00d      	b.n	8003928 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800390c:	f7fe ff1c 	bl	8002748 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391a:	d301      	bcc.n	8003920 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e009      	b.n	8003934 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1ec      	bne.n	800390c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0d9      	b.n	8003b04 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0310 	and.w	r3, r3, #16
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf14      	ite	ne
 800395e:	2301      	movne	r3, #1
 8003960:	2300      	moveq	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	461a      	mov	r2, r3
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf0c      	ite	eq
 8003988:	2301      	moveq	r3, #1
 800398a:	2300      	movne	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	461a      	mov	r2, r3
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf14      	ite	ne
 80039a4:	2301      	movne	r3, #1
 80039a6:	2300      	moveq	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bf0c      	ite	eq
 80039be:	2301      	moveq	r3, #1
 80039c0:	2300      	movne	r3, #0
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	461a      	mov	r2, r3
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	461a      	mov	r2, r3
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bf0c      	ite	eq
 8003a0e:	2301      	moveq	r3, #1
 8003a10:	2300      	movne	r3, #0
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bf0c      	ite	eq
 8003a28:	2301      	moveq	r3, #1
 8003a2a:	2300      	movne	r3, #0
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	bf14      	ite	ne
 8003a42:	2301      	movne	r3, #1
 8003a44:	2300      	moveq	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	461a      	mov	r2, r3
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2300      	moveq	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf14      	ite	ne
 8003a84:	2301      	movne	r3, #1
 8003a86:	2300      	moveq	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	0c1b      	lsrs	r3, r3, #16
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	bf14      	ite	ne
 8003ad8:	2301      	movne	r3, #1
 8003ada:	2300      	moveq	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e00b      	b.n	8003b3c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d105      	bne.n	8003b3a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003b2e:	6839      	ldr	r1, [r7, #0]
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f883 	bl	8003c3c <ETH_SetMACConfig>

    return HAL_OK;
 8003b36:	2300      	movs	r3, #0
 8003b38:	e000      	b.n	8003b3c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
  }
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 031c 	bic.w	r3, r3, #28
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003b5c:	f003 fbe4 	bl	8007328 <HAL_RCC_GetHCLKFreq>
 8003b60:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <HAL_ETH_SetMDIOClockRange+0x98>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d908      	bls.n	8003b7c <HAL_ETH_SetMDIOClockRange+0x38>
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4a1c      	ldr	r2, [pc, #112]	; (8003be0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d804      	bhi.n	8003b7c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f043 0308 	orr.w	r3, r3, #8
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	e027      	b.n	8003bcc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d908      	bls.n	8003b96 <HAL_ETH_SetMDIOClockRange+0x52>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4a17      	ldr	r2, [pc, #92]	; (8003be4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d204      	bcs.n	8003b96 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f043 030c 	orr.w	r3, r3, #12
 8003b92:	60fb      	str	r3, [r7, #12]
 8003b94:	e01a      	b.n	8003bcc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d303      	bcc.n	8003ba6 <HAL_ETH_SetMDIOClockRange+0x62>
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	4a11      	ldr	r2, [pc, #68]	; (8003be8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d911      	bls.n	8003bca <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4a0f      	ldr	r2, [pc, #60]	; (8003be8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d908      	bls.n	8003bc0 <HAL_ETH_SetMDIOClockRange+0x7c>
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	4a0e      	ldr	r2, [pc, #56]	; (8003bec <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d804      	bhi.n	8003bc0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f043 0304 	orr.w	r3, r3, #4
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	e005      	b.n	8003bcc <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f043 0310 	orr.w	r3, r3, #16
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	e000      	b.n	8003bcc <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003bca:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	611a      	str	r2, [r3, #16]
}
 8003bd4:	bf00      	nop
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	01312cff 	.word	0x01312cff
 8003be0:	02160ebf 	.word	0x02160ebf
 8003be4:	03938700 	.word	0x03938700
 8003be8:	05f5e0ff 	.word	0x05f5e0ff
 8003bec:	08f0d17f 	.word	0x08f0d17f

08003bf0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c12:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c20:	2001      	movs	r0, #1
 8003c22:	f7fe fd9d 	bl	8002760 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c30:	6193      	str	r3, [r2, #24]
}
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4b51      	ldr	r3, [pc, #324]	; (8003d98 <ETH_SetMACConfig+0x15c>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	7c1b      	ldrb	r3, [r3, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <ETH_SetMACConfig+0x28>
 8003c5e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c62:	e000      	b.n	8003c66 <ETH_SetMACConfig+0x2a>
 8003c64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	7c5b      	ldrb	r3, [r3, #17]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d102      	bne.n	8003c74 <ETH_SetMACConfig+0x38>
 8003c6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c72:	e000      	b.n	8003c76 <ETH_SetMACConfig+0x3a>
 8003c74:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c76:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c7c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	7fdb      	ldrb	r3, [r3, #31]
 8003c82:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003c84:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	7f92      	ldrb	r2, [r2, #30]
 8003c90:	2a00      	cmp	r2, #0
 8003c92:	d102      	bne.n	8003c9a <ETH_SetMACConfig+0x5e>
 8003c94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c98:	e000      	b.n	8003c9c <ETH_SetMACConfig+0x60>
 8003c9a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003c9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	7f1b      	ldrb	r3, [r3, #28]
 8003ca2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ca4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003caa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	791b      	ldrb	r3, [r3, #4]
 8003cb0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003cb2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003cba:	2a00      	cmp	r2, #0
 8003cbc:	d102      	bne.n	8003cc4 <ETH_SetMACConfig+0x88>
 8003cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc2:	e000      	b.n	8003cc6 <ETH_SetMACConfig+0x8a>
 8003cc4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003cc6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	7bdb      	ldrb	r3, [r3, #15]
 8003ccc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003cce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003cd4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cdc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cf6:	2001      	movs	r0, #1
 8003cf8:	f7fe fd32 	bl	8002760 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003d12:	4013      	ands	r3, r2
 8003d14:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003d22:	2a00      	cmp	r2, #0
 8003d24:	d101      	bne.n	8003d2a <ETH_SetMACConfig+0xee>
 8003d26:	2280      	movs	r2, #128	; 0x80
 8003d28:	e000      	b.n	8003d2c <ETH_SetMACConfig+0xf0>
 8003d2a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d2c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d32:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003d3a:	2a01      	cmp	r2, #1
 8003d3c:	d101      	bne.n	8003d42 <ETH_SetMACConfig+0x106>
 8003d3e:	2208      	movs	r2, #8
 8003d40:	e000      	b.n	8003d44 <ETH_SetMACConfig+0x108>
 8003d42:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003d44:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003d4c:	2a01      	cmp	r2, #1
 8003d4e:	d101      	bne.n	8003d54 <ETH_SetMACConfig+0x118>
 8003d50:	2204      	movs	r2, #4
 8003d52:	e000      	b.n	8003d56 <ETH_SetMACConfig+0x11a>
 8003d54:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003d5e:	2a01      	cmp	r2, #1
 8003d60:	d101      	bne.n	8003d66 <ETH_SetMACConfig+0x12a>
 8003d62:	2202      	movs	r2, #2
 8003d64:	e000      	b.n	8003d68 <ETH_SetMACConfig+0x12c>
 8003d66:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d80:	2001      	movs	r0, #1
 8003d82:	f7fe fced 	bl	8002760 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	619a      	str	r2, [r3, #24]
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	ff20810f 	.word	0xff20810f

08003d9c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4b3d      	ldr	r3, [pc, #244]	; (8003eac <ETH_SetDMAConfig+0x110>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	7b1b      	ldrb	r3, [r3, #12]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d102      	bne.n	8003dc8 <ETH_SetDMAConfig+0x2c>
 8003dc2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003dc6:	e000      	b.n	8003dca <ETH_SetDMAConfig+0x2e>
 8003dc8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	7b5b      	ldrb	r3, [r3, #13]
 8003dce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003dd0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	7f52      	ldrb	r2, [r2, #29]
 8003dd6:	2a00      	cmp	r2, #0
 8003dd8:	d102      	bne.n	8003de0 <ETH_SetDMAConfig+0x44>
 8003dda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dde:	e000      	b.n	8003de2 <ETH_SetDMAConfig+0x46>
 8003de0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003de2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	7b9b      	ldrb	r3, [r3, #14]
 8003de8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003dea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003df0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	7f1b      	ldrb	r3, [r3, #28]
 8003df6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003df8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	7f9b      	ldrb	r3, [r3, #30]
 8003dfe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e00:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e0e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e10:	4313      	orrs	r3, r2
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e20:	461a      	mov	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e32:	2001      	movs	r0, #1
 8003e34:	f7fe fc94 	bl	8002760 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e40:	461a      	mov	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	791b      	ldrb	r3, [r3, #4]
 8003e4a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e50:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003e56:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e5c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e64:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003e66:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e6e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e74:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e82:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e90:	2001      	movs	r0, #1
 8003e92:	f7fe fc65 	bl	8002760 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6013      	str	r3, [r2, #0]
}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	f8de3f23 	.word	0xf8de3f23

08003eb0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b0a6      	sub	sp, #152	; 0x98
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003eec:	2300      	movs	r3, #0
 8003eee:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003f00:	2300      	movs	r3, #0
 8003f02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003f12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f16:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003f24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff fe86 	bl	8003c3c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003f46:	2300      	movs	r3, #0
 8003f48:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f52:	2300      	movs	r3, #0
 8003f54:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f64:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f6a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f70:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003f72:	2301      	movs	r3, #1
 8003f74:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003f80:	f107 0308 	add.w	r3, r7, #8
 8003f84:	4619      	mov	r1, r3
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff ff08 	bl	8003d9c <ETH_SetDMAConfig>
}
 8003f8c:	bf00      	nop
 8003f8e:	3798      	adds	r7, #152	; 0x98
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3305      	adds	r3, #5
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	3204      	adds	r2, #4
 8003fac:	7812      	ldrb	r2, [r2, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	4b11      	ldr	r3, [pc, #68]	; (8003ffc <ETH_MACAddressConfig+0x68>)
 8003fb6:	4413      	add	r3, r2
 8003fb8:	461a      	mov	r2, r3
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3303      	adds	r3, #3
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	061a      	lsls	r2, r3, #24
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	3302      	adds	r3, #2
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	041b      	lsls	r3, r3, #16
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	7812      	ldrb	r2, [r2, #0]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <ETH_MACAddressConfig+0x6c>)
 8003fe6:	4413      	add	r3, r2
 8003fe8:	461a      	mov	r2, r3
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	6013      	str	r3, [r2, #0]
}
 8003fee:	bf00      	nop
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	40028040 	.word	0x40028040
 8004000:	40028044 	.word	0x40028044

08004004 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e03e      	b.n	8004090 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68d9      	ldr	r1, [r3, #12]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	440b      	add	r3, r1
 8004022:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2200      	movs	r2, #0
 800402e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2200      	movs	r2, #0
 800403a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	3206      	adds	r2, #6
 8004044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d80c      	bhi.n	8004074 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68d9      	ldr	r1, [r3, #12]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	440b      	add	r3, r1
 800406c:	461a      	mov	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	e004      	b.n	800407e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	461a      	mov	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3301      	adds	r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b03      	cmp	r3, #3
 8004094:	d9bd      	bls.n	8004012 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a8:	611a      	str	r2, [r3, #16]
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	e046      	b.n	8004152 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6919      	ldr	r1, [r3, #16]
 80040c8:	68fa      	ldr	r2, [r7, #12]
 80040ca:	4613      	mov	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	440b      	add	r3, r1
 80040d4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2200      	movs	r2, #0
 80040e0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2200      	movs	r2, #0
 80040e6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2200      	movs	r2, #0
 80040ec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2200      	movs	r2, #0
 80040f2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2200      	movs	r2, #0
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004100:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004108:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	3212      	adds	r2, #18
 800411e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d80c      	bhi.n	8004142 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6919      	ldr	r1, [r3, #16]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	440b      	add	r3, r1
 800413a:	461a      	mov	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	60da      	str	r2, [r3, #12]
 8004140:	e004      	b.n	800414c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	461a      	mov	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3301      	adds	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b03      	cmp	r3, #3
 8004156:	d9b5      	bls.n	80040c4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004182:	60da      	str	r2, [r3, #12]
}
 8004184:	bf00      	nop
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004190:	b480      	push	{r7}
 8004192:	b08d      	sub	sp, #52	; 0x34
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	3318      	adds	r3, #24
 80041a0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ba:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041d2:	d007      	beq.n	80041e4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d8:	3304      	adds	r3, #4
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4413      	add	r3, r2
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80041e4:	2302      	movs	r3, #2
 80041e6:	e0ff      	b.n	80043e8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	3301      	adds	r3, #1
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	4b7d      	ldr	r3, [pc, #500]	; (80043f4 <ETH_Prepare_Tx_Descriptors+0x264>)
 80041fe:	4013      	ands	r3, r2
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	6852      	ldr	r2, [r2, #4]
 8004204:	431a      	orrs	r2, r3
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	431a      	orrs	r2, r3
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d008      	beq.n	8004246 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	431a      	orrs	r2, r3
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800426a:	f3bf 8f5f 	dmb	sy
}
 800426e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800427c:	e082      	b.n	8004384 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d006      	beq.n	800429e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	e005      	b.n	80042aa <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80042aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ac:	3301      	adds	r3, #1
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	2b03      	cmp	r3, #3
 80042b4:	d902      	bls.n	80042bc <ETH_Prepare_Tx_Descriptors+0x12c>
 80042b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b8:	3b04      	subs	r3, #4
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042de:	d007      	beq.n	80042f0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	3304      	adds	r3, #4
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d029      	beq.n	8004344 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042fc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80042fe:	2300      	movs	r3, #0
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
 8004302:	e019      	b.n	8004338 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004304:	f3bf 8f5f 	dmb	sy
}
 8004308:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004318:	3301      	adds	r3, #1
 800431a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431e:	2b03      	cmp	r3, #3
 8004320:	d902      	bls.n	8004328 <ETH_Prepare_Tx_Descriptors+0x198>
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	3b04      	subs	r3, #4
 8004326:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800432c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004330:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	3301      	adds	r3, #1
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
 8004338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	429a      	cmp	r2, r3
 800433e:	d3e1      	bcc.n	8004304 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8004340:	2302      	movs	r3, #2
 8004342:	e051      	b.n	80043e8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	3301      	adds	r3, #1
 8004348:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <ETH_Prepare_Tx_Descriptors+0x264>)
 8004360:	4013      	ands	r3, r2
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	6852      	ldr	r2, [r2, #4]
 8004366:	431a      	orrs	r2, r3
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	3301      	adds	r3, #1
 8004370:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8004372:	f3bf 8f5f 	dmb	sy
}
 8004376:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004380:	6a3b      	ldr	r3, [r7, #32]
 8004382:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	f47f af78 	bne.w	800427e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d006      	beq.n	80043a2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e005      	b.n	80043ae <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043be:	6979      	ldr	r1, [r7, #20]
 80043c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c2:	3304      	adds	r3, #4
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ce:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80043d0:	b672      	cpsid	i
}
 80043d2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	4413      	add	r3, r2
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80043e2:	b662      	cpsie	i
}
 80043e4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3734      	adds	r7, #52	; 0x34
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr
 80043f4:	ffffe000 	.word	0xffffe000

080043f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b089      	sub	sp, #36	; 0x24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004402:	2300      	movs	r3, #0
 8004404:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800440a:	2300      	movs	r3, #0
 800440c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
 8004416:	e175      	b.n	8004704 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004418:	2201      	movs	r2, #1
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4013      	ands	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	429a      	cmp	r2, r3
 8004432:	f040 8164 	bne.w	80046fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f003 0303 	and.w	r3, r3, #3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d005      	beq.n	800444e <HAL_GPIO_Init+0x56>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d130      	bne.n	80044b0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	2203      	movs	r2, #3
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	43db      	mvns	r3, r3
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	4013      	ands	r3, r2
 8004464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	68da      	ldr	r2, [r3, #12]
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4313      	orrs	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004484:	2201      	movs	r2, #1
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	69ba      	ldr	r2, [r7, #24]
 8004490:	4013      	ands	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 0201 	and.w	r2, r3, #1
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d017      	beq.n	80044ec <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	2203      	movs	r2, #3
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	689a      	ldr	r2, [r3, #8]
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	fa02 f303 	lsl.w	r3, r2, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f003 0303 	and.w	r3, r3, #3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d123      	bne.n	8004540 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	08da      	lsrs	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3208      	adds	r2, #8
 8004500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	220f      	movs	r2, #15
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	43db      	mvns	r3, r3
 8004516:	69ba      	ldr	r2, [r7, #24]
 8004518:	4013      	ands	r3, r2
 800451a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691a      	ldr	r2, [r3, #16]
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	08da      	lsrs	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3208      	adds	r2, #8
 800453a:	69b9      	ldr	r1, [r7, #24]
 800453c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	2203      	movs	r2, #3
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0203 	and.w	r2, r3, #3
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4313      	orrs	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80be 	beq.w	80046fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004582:	4b66      	ldr	r3, [pc, #408]	; (800471c <HAL_GPIO_Init+0x324>)
 8004584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004586:	4a65      	ldr	r2, [pc, #404]	; (800471c <HAL_GPIO_Init+0x324>)
 8004588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800458c:	6453      	str	r3, [r2, #68]	; 0x44
 800458e:	4b63      	ldr	r3, [pc, #396]	; (800471c <HAL_GPIO_Init+0x324>)
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800459a:	4a61      	ldr	r2, [pc, #388]	; (8004720 <HAL_GPIO_Init+0x328>)
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	3302      	adds	r3, #2
 80045a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	f003 0303 	and.w	r3, r3, #3
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	220f      	movs	r2, #15
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4013      	ands	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a58      	ldr	r2, [pc, #352]	; (8004724 <HAL_GPIO_Init+0x32c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d037      	beq.n	8004636 <HAL_GPIO_Init+0x23e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a57      	ldr	r2, [pc, #348]	; (8004728 <HAL_GPIO_Init+0x330>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d031      	beq.n	8004632 <HAL_GPIO_Init+0x23a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a56      	ldr	r2, [pc, #344]	; (800472c <HAL_GPIO_Init+0x334>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d02b      	beq.n	800462e <HAL_GPIO_Init+0x236>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a55      	ldr	r2, [pc, #340]	; (8004730 <HAL_GPIO_Init+0x338>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d025      	beq.n	800462a <HAL_GPIO_Init+0x232>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a54      	ldr	r2, [pc, #336]	; (8004734 <HAL_GPIO_Init+0x33c>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01f      	beq.n	8004626 <HAL_GPIO_Init+0x22e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a53      	ldr	r2, [pc, #332]	; (8004738 <HAL_GPIO_Init+0x340>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d019      	beq.n	8004622 <HAL_GPIO_Init+0x22a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a52      	ldr	r2, [pc, #328]	; (800473c <HAL_GPIO_Init+0x344>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_GPIO_Init+0x226>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a51      	ldr	r2, [pc, #324]	; (8004740 <HAL_GPIO_Init+0x348>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00d      	beq.n	800461a <HAL_GPIO_Init+0x222>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a50      	ldr	r2, [pc, #320]	; (8004744 <HAL_GPIO_Init+0x34c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d007      	beq.n	8004616 <HAL_GPIO_Init+0x21e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a4f      	ldr	r2, [pc, #316]	; (8004748 <HAL_GPIO_Init+0x350>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d101      	bne.n	8004612 <HAL_GPIO_Init+0x21a>
 800460e:	2309      	movs	r3, #9
 8004610:	e012      	b.n	8004638 <HAL_GPIO_Init+0x240>
 8004612:	230a      	movs	r3, #10
 8004614:	e010      	b.n	8004638 <HAL_GPIO_Init+0x240>
 8004616:	2308      	movs	r3, #8
 8004618:	e00e      	b.n	8004638 <HAL_GPIO_Init+0x240>
 800461a:	2307      	movs	r3, #7
 800461c:	e00c      	b.n	8004638 <HAL_GPIO_Init+0x240>
 800461e:	2306      	movs	r3, #6
 8004620:	e00a      	b.n	8004638 <HAL_GPIO_Init+0x240>
 8004622:	2305      	movs	r3, #5
 8004624:	e008      	b.n	8004638 <HAL_GPIO_Init+0x240>
 8004626:	2304      	movs	r3, #4
 8004628:	e006      	b.n	8004638 <HAL_GPIO_Init+0x240>
 800462a:	2303      	movs	r3, #3
 800462c:	e004      	b.n	8004638 <HAL_GPIO_Init+0x240>
 800462e:	2302      	movs	r3, #2
 8004630:	e002      	b.n	8004638 <HAL_GPIO_Init+0x240>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <HAL_GPIO_Init+0x240>
 8004636:	2300      	movs	r3, #0
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	f002 0203 	and.w	r2, r2, #3
 800463e:	0092      	lsls	r2, r2, #2
 8004640:	4093      	lsls	r3, r2
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4313      	orrs	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004648:	4935      	ldr	r1, [pc, #212]	; (8004720 <HAL_GPIO_Init+0x328>)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	089b      	lsrs	r3, r3, #2
 800464e:	3302      	adds	r3, #2
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004656:	4b3d      	ldr	r3, [pc, #244]	; (800474c <HAL_GPIO_Init+0x354>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	43db      	mvns	r3, r3
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	4013      	ands	r3, r2
 8004664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800467a:	4a34      	ldr	r2, [pc, #208]	; (800474c <HAL_GPIO_Init+0x354>)
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004680:	4b32      	ldr	r3, [pc, #200]	; (800474c <HAL_GPIO_Init+0x354>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	43db      	mvns	r3, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4013      	ands	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046a4:	4a29      	ldr	r2, [pc, #164]	; (800474c <HAL_GPIO_Init+0x354>)
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046aa:	4b28      	ldr	r3, [pc, #160]	; (800474c <HAL_GPIO_Init+0x354>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ce:	4a1f      	ldr	r2, [pc, #124]	; (800474c <HAL_GPIO_Init+0x354>)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <HAL_GPIO_Init+0x354>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046f8:	4a14      	ldr	r2, [pc, #80]	; (800474c <HAL_GPIO_Init+0x354>)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3301      	adds	r3, #1
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	2b0f      	cmp	r3, #15
 8004708:	f67f ae86 	bls.w	8004418 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	3724      	adds	r7, #36	; 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40023800 	.word	0x40023800
 8004720:	40013800 	.word	0x40013800
 8004724:	40020000 	.word	0x40020000
 8004728:	40020400 	.word	0x40020400
 800472c:	40020800 	.word	0x40020800
 8004730:	40020c00 	.word	0x40020c00
 8004734:	40021000 	.word	0x40021000
 8004738:	40021400 	.word	0x40021400
 800473c:	40021800 	.word	0x40021800
 8004740:	40021c00 	.word	0x40021c00
 8004744:	40022000 	.word	0x40022000
 8004748:	40022400 	.word	0x40022400
 800474c:	40013c00 	.word	0x40013c00

08004750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	807b      	strh	r3, [r7, #2]
 800475c:	4613      	mov	r3, r2
 800475e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004760:	787b      	ldrb	r3, [r7, #1]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004766:	887a      	ldrh	r2, [r7, #2]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800476c:	e003      	b.n	8004776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800476e:	887b      	ldrh	r3, [r7, #2]
 8004770:	041a      	lsls	r2, r3, #16
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	619a      	str	r2, [r3, #24]
}
 8004776:	bf00      	nop
 8004778:	370c      	adds	r7, #12
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e07f      	b.n	8004896 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fc fee2 	bl	8001574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2224      	movs	r2, #36	; 0x24
 80047b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d107      	bne.n	80047fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047fa:	609a      	str	r2, [r3, #8]
 80047fc:	e006      	b.n	800480c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800480a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d104      	bne.n	800481e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800481c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4b1d      	ldr	r3, [pc, #116]	; (80048a0 <HAL_I2C_Init+0x11c>)
 800482a:	430b      	orrs	r3, r1
 800482c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800483c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691a      	ldr	r2, [r3, #16]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	69d9      	ldr	r1, [r3, #28]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1a      	ldr	r2, [r3, #32]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2220      	movs	r2, #32
 8004882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	02008000 	.word	0x02008000

080048a4 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af02      	add	r7, sp, #8
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	607a      	str	r2, [r7, #4]
 80048ae:	461a      	mov	r2, r3
 80048b0:	460b      	mov	r3, r1
 80048b2:	817b      	strh	r3, [r7, #10]
 80048b4:	4613      	mov	r3, r2
 80048b6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b20      	cmp	r3, #32
 80048c2:	f040 80cd 	bne.w	8004a60 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d4:	d101      	bne.n	80048da <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 80048d6:	2302      	movs	r3, #2
 80048d8:	e0c3      	b.n	8004a62 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_I2C_Master_Transmit_DMA+0x44>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e0bc      	b.n	8004a62 <HAL_I2C_Master_Transmit_DMA+0x1be>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2221      	movs	r2, #33	; 0x21
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2210      	movs	r2, #16
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	893a      	ldrh	r2, [r7, #8]
 8004910:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4a55      	ldr	r2, [pc, #340]	; (8004a6c <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4a55      	ldr	r2, [pc, #340]	; (8004a70 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 800491c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004922:	b29b      	uxth	r3, r3
 8004924:	2bff      	cmp	r3, #255	; 0xff
 8004926:	d906      	bls.n	8004936 <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	22ff      	movs	r2, #255	; 0xff
 800492c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800492e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004932:	617b      	str	r3, [r7, #20]
 8004934:	e007      	b.n	8004946 <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004944:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494a:	2b00      	cmp	r3, #0
 800494c:	d070      	beq.n	8004a30 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	2b00      	cmp	r3, #0
 8004954:	d020      	beq.n	8004998 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	4a46      	ldr	r2, [pc, #280]	; (8004a74 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 800495c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	4a45      	ldr	r2, [pc, #276]	; (8004a78 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8004964:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	2200      	movs	r2, #0
 800496c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	2200      	movs	r2, #0
 8004974:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3328      	adds	r3, #40	; 0x28
 8004982:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004988:	f7fe f8ce 	bl	8002b28 <HAL_DMA_Start_IT>
 800498c:	4603      	mov	r3, r0
 800498e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004990:	7cfb      	ldrb	r3, [r7, #19]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d138      	bne.n	8004a08 <HAL_I2C_Master_Transmit_DMA+0x164>
 8004996:	e013      	b.n	80049c0 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e050      	b.n	8004a62 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c4:	b2da      	uxtb	r2, r3
 80049c6:	8979      	ldrh	r1, [r7, #10]
 80049c8:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f001 fd2a 	bl	8006428 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80049ee:	2110      	movs	r1, #16
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f001 fd4b 	bl	800648c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e029      	b.n	8004a5c <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1c:	f043 0210 	orr.w	r2, r3, #16
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e018      	b.n	8004a62 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4a13      	ldr	r2, [pc, #76]	; (8004a80 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8004a34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	8979      	ldrh	r1, [r7, #10]
 8004a3e:	4b0f      	ldr	r3, [pc, #60]	; (8004a7c <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f001 fcee 	bl	8006428 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a54:	2101      	movs	r1, #1
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f001 fd18 	bl	800648c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e000      	b.n	8004a62 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8004a60:	2302      	movs	r3, #2
  }
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	ffff0000 	.word	0xffff0000
 8004a70:	08005559 	.word	0x08005559
 8004a74:	080061c7 	.word	0x080061c7
 8004a78:	08006379 	.word	0x08006379
 8004a7c:	80002000 	.word	0x80002000
 8004a80:	08005103 	.word	0x08005103

08004a84 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	460b      	mov	r3, r1
 8004a92:	817b      	strh	r3, [r7, #10]
 8004a94:	4613      	mov	r3, r2
 8004a96:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b20      	cmp	r3, #32
 8004aa2:	f040 80cd 	bne.w	8004c40 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab4:	d101      	bne.n	8004aba <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e0c3      	b.n	8004c42 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <HAL_I2C_Master_Receive_DMA+0x44>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e0bc      	b.n	8004c42 <HAL_I2C_Master_Receive_DMA+0x1be>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2222      	movs	r2, #34	; 0x22
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2210      	movs	r2, #16
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	893a      	ldrh	r2, [r7, #8]
 8004af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4a55      	ldr	r2, [pc, #340]	; (8004c4c <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a55      	ldr	r2, [pc, #340]	; (8004c50 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8004afc:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2bff      	cmp	r3, #255	; 0xff
 8004b06:	d906      	bls.n	8004b16 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	22ff      	movs	r2, #255	; 0xff
 8004b0c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004b0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	e007      	b.n	8004b26 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004b20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b24:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d070      	beq.n	8004c10 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d020      	beq.n	8004b78 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3a:	4a46      	ldr	r2, [pc, #280]	; (8004c54 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8004b3c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	4a45      	ldr	r2, [pc, #276]	; (8004c58 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8004b44:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b52:	2200      	movs	r2, #0
 8004b54:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3324      	adds	r3, #36	; 0x24
 8004b60:	4619      	mov	r1, r3
 8004b62:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004b68:	f7fd ffde 	bl	8002b28 <HAL_DMA_Start_IT>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d138      	bne.n	8004be8 <HAL_I2C_Master_Receive_DMA+0x164>
 8004b76:	e013      	b.n	8004ba0 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e050      	b.n	8004c42 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	8979      	ldrh	r1, [r7, #10]
 8004ba8:	4b2c      	ldr	r3, [pc, #176]	; (8004c5c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f001 fc3a 	bl	8006428 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004bce:	2110      	movs	r1, #16
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f001 fc5b 	bl	800648c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	e029      	b.n	8004c3c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfc:	f043 0210 	orr.w	r2, r3, #16
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e018      	b.n	8004c42 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	4a13      	ldr	r2, [pc, #76]	; (8004c60 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8004c14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	8979      	ldrh	r1, [r7, #10]
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c26:	68f8      	ldr	r0, [r7, #12]
 8004c28:	f001 fbfe 	bl	8006428 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c34:	2101      	movs	r1, #1
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f001 fc28 	bl	800648c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	e000      	b.n	8004c42 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8004c40:	2302      	movs	r3, #2
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	ffff0000 	.word	0xffff0000
 8004c50:	08005559 	.word	0x08005559
 8004c54:	0800629d 	.word	0x0800629d
 8004c58:	08006379 	.word	0x08006379
 8004c5c:	80002400 	.word	0x80002400
 8004c60:	08005103 	.word	0x08005103

08004c64 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	f040 809b 	bne.w	8004db6 <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d002      	beq.n	8004c8c <HAL_I2C_Slave_Transmit_DMA+0x28>
 8004c86:	88fb      	ldrh	r3, [r7, #6]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d105      	bne.n	8004c98 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c92:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e08f      	b.n	8004db8 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_I2C_Slave_Transmit_DMA+0x42>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e088      	b.n	8004db8 <HAL_I2C_Slave_Transmit_DMA+0x154>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2221      	movs	r2, #33	; 0x21
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	88fa      	ldrh	r2, [r7, #6]
 8004cce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4a38      	ldr	r2, [pc, #224]	; (8004dc0 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 8004cde:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4a38      	ldr	r2, [pc, #224]	; (8004dc4 <HAL_I2C_Slave_Transmit_DMA+0x160>)
 8004ce4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d020      	beq.n	8004d30 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	4a35      	ldr	r2, [pc, #212]	; (8004dc8 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 8004cf4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	4a34      	ldr	r2, [pc, #208]	; (8004dcc <HAL_I2C_Slave_Transmit_DMA+0x168>)
 8004cfc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	2200      	movs	r2, #0
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3328      	adds	r3, #40	; 0x28
 8004d1a:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004d20:	f7fd ff02 	bl	8002b28 <HAL_DMA_Start_IT>
 8004d24:	4603      	mov	r3, r0
 8004d26:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004d28:	7dfb      	ldrb	r3, [r7, #23]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d12f      	bne.n	8004d8e <HAL_I2C_Slave_Transmit_DMA+0x12a>
 8004d2e:	e013      	b.n	8004d58 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2228      	movs	r2, #40	; 0x28
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e02f      	b.n	8004db8 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d66:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f001 fb89 	bl	800648c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d88:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	e014      	b.n	8004db8 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2228      	movs	r2, #40	; 0x28
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	f043 0210 	orr.w	r2, r3, #16
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
  }
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	ffff0000 	.word	0xffff0000
 8004dc4:	0800573f 	.word	0x0800573f
 8004dc8:	0800625d 	.word	0x0800625d
 8004dcc:	08006379 	.word	0x08006379

08004dd0 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	4613      	mov	r3, r2
 8004ddc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	f040 809b 	bne.w	8004f22 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_I2C_Slave_Receive_DMA+0x28>
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d105      	bne.n	8004e04 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dfe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e08f      	b.n	8004f24 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d101      	bne.n	8004e12 <HAL_I2C_Slave_Receive_DMA+0x42>
 8004e0e:	2302      	movs	r3, #2
 8004e10:	e088      	b.n	8004f24 <HAL_I2C_Slave_Receive_DMA+0x154>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2201      	movs	r2, #1
 8004e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2222      	movs	r2, #34	; 0x22
 8004e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2220      	movs	r2, #32
 8004e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	88fa      	ldrh	r2, [r7, #6]
 8004e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4a38      	ldr	r2, [pc, #224]	; (8004f2c <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8004e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4a38      	ldr	r2, [pc, #224]	; (8004f30 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8004e50:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d020      	beq.n	8004e9c <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5e:	4a35      	ldr	r2, [pc, #212]	; (8004f34 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8004e60:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e66:	4a34      	ldr	r2, [pc, #208]	; (8004f38 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8004e68:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6e:	2200      	movs	r2, #0
 8004e70:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	2200      	movs	r2, #0
 8004e78:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3324      	adds	r3, #36	; 0x24
 8004e84:	4619      	mov	r1, r3
 8004e86:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004e8c:	f7fd fe4c 	bl	8002b28 <HAL_DMA_Start_IT>
 8004e90:	4603      	mov	r3, r0
 8004e92:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d12f      	bne.n	8004efa <HAL_I2C_Slave_Receive_DMA+0x12a>
 8004e9a:	e013      	b.n	8004ec4 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2228      	movs	r2, #40	; 0x28
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e02f      	b.n	8004f24 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ed2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004edc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f001 fad3 	bl	800648c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ef4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	e014      	b.n	8004f24 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2228      	movs	r2, #40	; 0x28
 8004efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0e:	f043 0210 	orr.w	r2, r3, #16
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8004f22:	2302      	movs	r3, #2
  }
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	ffff0000 	.word	0xffff0000
 8004f30:	0800573f 	.word	0x0800573f
 8004f34:	08006333 	.word	0x08006333
 8004f38:	08006379 	.word	0x08006379

08004f3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	68f9      	ldr	r1, [r7, #12]
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	4798      	blx	r3
  }
}
 8004f68:	bf00      	nop
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d010      	beq.n	8004fb6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	09db      	lsrs	r3, r3, #7
 8004f98:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa4:	f043 0201 	orr.w	r2, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fb4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	0a9b      	lsrs	r3, r3, #10
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d010      	beq.n	8004fe4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	09db      	lsrs	r3, r3, #7
 8004fc6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd2:	f043 0208 	orr.w	r2, r3, #8
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fe2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	0a5b      	lsrs	r3, r3, #9
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d010      	beq.n	8005012 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	09db      	lsrs	r3, r3, #7
 8004ff4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005000:	f043 0202 	orr.w	r2, r3, #2
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005010:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005016:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f003 030b 	and.w	r3, r3, #11
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005022:	68f9      	ldr	r1, [r7, #12]
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 ffb3 	bl	8005f90 <I2C_ITError>
  }
}
 800502a:	bf00      	nop
 800502c:	3718      	adds	r7, #24
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800504e:	bf00      	nop
 8005050:	370c      	adds	r7, #12
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005076:	bf00      	nop
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
 800508e:	4613      	mov	r3, r2
 8005090:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b088      	sub	sp, #32
 8005106:	af02      	add	r7, sp, #8
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	60b9      	str	r1, [r7, #8]
 800510c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <I2C_Master_ISR_IT+0x1e>
 800511c:	2302      	movs	r3, #2
 800511e:	e114      	b.n	800534a <I2C_Master_ISR_IT+0x248>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d013      	beq.n	800515c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	091b      	lsrs	r3, r3, #4
 8005138:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00d      	beq.n	800515c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2210      	movs	r2, #16
 8005146:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514c:	f043 0204 	orr.w	r2, r3, #4
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005154:	68f8      	ldr	r0, [r7, #12]
 8005156:	f001 f812 	bl	800617e <I2C_Flush_TXDR>
 800515a:	e0e1      	b.n	8005320 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	089b      	lsrs	r3, r3, #2
 8005160:	f003 0301 	and.w	r3, r3, #1
 8005164:	2b00      	cmp	r3, #0
 8005166:	d023      	beq.n	80051b0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	089b      	lsrs	r3, r3, #2
 800516c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01d      	beq.n	80051b0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0304 	bic.w	r3, r3, #4
 800517a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	3b01      	subs	r3, #1
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051ae:	e0b7      	b.n	8005320 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	085b      	lsrs	r3, r3, #1
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01e      	beq.n	80051fa <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	085b      	lsrs	r3, r3, #1
 80051c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d018      	beq.n	80051fa <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051cc:	781a      	ldrb	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f8:	e092      	b.n	8005320 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	09db      	lsrs	r3, r3, #7
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d05d      	beq.n	80052c2 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	099b      	lsrs	r3, r3, #6
 800520a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800520e:	2b00      	cmp	r3, #0
 8005210:	d057      	beq.n	80052c2 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d040      	beq.n	800529e <I2C_Master_ISR_IT+0x19c>
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005220:	2b00      	cmp	r3, #0
 8005222:	d13c      	bne.n	800529e <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005230:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005236:	b29b      	uxth	r3, r3
 8005238:	2bff      	cmp	r3, #255	; 0xff
 800523a:	d90e      	bls.n	800525a <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	22ff      	movs	r2, #255	; 0xff
 8005240:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005246:	b2da      	uxtb	r2, r3
 8005248:	8a79      	ldrh	r1, [r7, #18]
 800524a:	2300      	movs	r3, #0
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f001 f8e8 	bl	8006428 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005258:	e032      	b.n	80052c0 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800526c:	d00b      	beq.n	8005286 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005272:	b2da      	uxtb	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005278:	8a79      	ldrh	r1, [r7, #18]
 800527a:	2000      	movs	r0, #0
 800527c:	9000      	str	r0, [sp, #0]
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f001 f8d2 	bl	8006428 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005284:	e01c      	b.n	80052c0 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528a:	b2da      	uxtb	r2, r3
 800528c:	8a79      	ldrh	r1, [r7, #18]
 800528e:	2300      	movs	r3, #0
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f001 f8c6 	bl	8006428 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800529c:	e010      	b.n	80052c0 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ac:	d003      	beq.n	80052b6 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fba9 	bl	8005a06 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052b4:	e034      	b.n	8005320 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80052b6:	2140      	movs	r1, #64	; 0x40
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fe69 	bl	8005f90 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052be:	e02f      	b.n	8005320 <I2C_Master_ISR_IT+0x21e>
 80052c0:	e02e      	b.n	8005320 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	099b      	lsrs	r3, r3, #6
 80052c6:	f003 0301 	and.w	r3, r3, #1
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d028      	beq.n	8005320 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	099b      	lsrs	r3, r3, #6
 80052d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d022      	beq.n	8005320 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d119      	bne.n	8005318 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052f2:	d015      	beq.n	8005320 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052fc:	d108      	bne.n	8005310 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685a      	ldr	r2, [r3, #4]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	e007      	b.n	8005320 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fb78 	bl	8005a06 <I2C_ITMasterSeqCplt>
 8005316:	e003      	b.n	8005320 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005318:	2140      	movs	r1, #64	; 0x40
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fe38 	bl	8005f90 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	095b      	lsrs	r3, r3, #5
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d009      	beq.n	8005340 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005338:	6979      	ldr	r1, [r7, #20]
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 fbfe 	bl	8005b3c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b086      	sub	sp, #24
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <I2C_Slave_ISR_IT+0x24>
 8005372:	2302      	movs	r3, #2
 8005374:	e0ec      	b.n	8005550 <I2C_Slave_ISR_IT+0x1fe>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	095b      	lsrs	r3, r3, #5
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	095b      	lsrs	r3, r3, #5
 800538e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005396:	6939      	ldr	r1, [r7, #16]
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f000 fc99 	bl	8005cd0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	091b      	lsrs	r3, r3, #4
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d04d      	beq.n	8005446 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d047      	beq.n	8005446 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d128      	bne.n	8005412 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b28      	cmp	r3, #40	; 0x28
 80053ca:	d108      	bne.n	80053de <I2C_Slave_ISR_IT+0x8c>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053d2:	d104      	bne.n	80053de <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80053d4:	6939      	ldr	r1, [r7, #16]
 80053d6:	68f8      	ldr	r0, [r7, #12]
 80053d8:	f000 fd84 	bl	8005ee4 <I2C_ITListenCplt>
 80053dc:	e032      	b.n	8005444 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b29      	cmp	r3, #41	; 0x29
 80053e8:	d10e      	bne.n	8005408 <I2C_Slave_ISR_IT+0xb6>
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053f0:	d00a      	beq.n	8005408 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2210      	movs	r2, #16
 80053f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f000 febf 	bl	800617e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fb3d 	bl	8005a80 <I2C_ITSlaveSeqCplt>
 8005406:	e01d      	b.n	8005444 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2210      	movs	r2, #16
 800540e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005410:	e096      	b.n	8005540 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2210      	movs	r2, #16
 8005418:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	f043 0204 	orr.w	r2, r3, #4
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d004      	beq.n	8005436 <I2C_Slave_ISR_IT+0xe4>
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005432:	f040 8085 	bne.w	8005540 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543a:	4619      	mov	r1, r3
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fda7 	bl	8005f90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005442:	e07d      	b.n	8005540 <I2C_Slave_ISR_IT+0x1ee>
 8005444:	e07c      	b.n	8005540 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	089b      	lsrs	r3, r3, #2
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d030      	beq.n	80054b4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	089b      	lsrs	r3, r3, #2
 8005456:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800545a:	2b00      	cmp	r3, #0
 800545c:	d02a      	beq.n	80054b4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d018      	beq.n	800549a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005484:	3b01      	subs	r3, #1
 8005486:	b29a      	uxth	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005490:	b29b      	uxth	r3, r3
 8005492:	3b01      	subs	r3, #1
 8005494:	b29a      	uxth	r2, r3
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d14f      	bne.n	8005544 <I2C_Slave_ISR_IT+0x1f2>
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054aa:	d04b      	beq.n	8005544 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f000 fae7 	bl	8005a80 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80054b2:	e047      	b.n	8005544 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	08db      	lsrs	r3, r3, #3
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	08db      	lsrs	r3, r3, #3
 80054c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80054cc:	6939      	ldr	r1, [r7, #16]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 fa15 	bl	80058fe <I2C_ITAddrCplt>
 80054d4:	e037      	b.n	8005546 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	085b      	lsrs	r3, r3, #1
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d031      	beq.n	8005546 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	085b      	lsrs	r3, r3, #1
 80054e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d02b      	beq.n	8005546 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d018      	beq.n	800552a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b01      	subs	r3, #1
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	851a      	strh	r2, [r3, #40]	; 0x28
 8005528:	e00d      	b.n	8005546 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005530:	d002      	beq.n	8005538 <I2C_Slave_ISR_IT+0x1e6>
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d106      	bne.n	8005546 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 faa1 	bl	8005a80 <I2C_ITSlaveSeqCplt>
 800553e:	e002      	b.n	8005546 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005540:	bf00      	nop
 8005542:	e000      	b.n	8005546 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005544:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af02      	add	r7, sp, #8
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800556a:	2b01      	cmp	r3, #1
 800556c:	d101      	bne.n	8005572 <I2C_Master_ISR_DMA+0x1a>
 800556e:	2302      	movs	r3, #2
 8005570:	e0e1      	b.n	8005736 <I2C_Master_ISR_DMA+0x1de>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d017      	beq.n	80055b6 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	091b      	lsrs	r3, r3, #4
 800558a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800558e:	2b00      	cmp	r3, #0
 8005590:	d011      	beq.n	80055b6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2210      	movs	r2, #16
 8005598:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559e:	f043 0204 	orr.w	r2, r3, #4
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80055a6:	2120      	movs	r1, #32
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 ff6f 	bl	800648c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fde5 	bl	800617e <I2C_Flush_TXDR>
 80055b4:	e0ba      	b.n	800572c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	09db      	lsrs	r3, r3, #7
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d072      	beq.n	80056a8 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	099b      	lsrs	r3, r3, #6
 80055c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d06c      	beq.n	80056a8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055dc:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d04e      	beq.n	8005686 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2bff      	cmp	r3, #255	; 0xff
 80055fe:	d906      	bls.n	800560e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	22ff      	movs	r2, #255	; 0xff
 8005604:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005606:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e010      	b.n	8005630 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005612:	b29a      	uxth	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005620:	d003      	beq.n	800562a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	e002      	b.n	8005630 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800562a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800562e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005634:	b2da      	uxtb	r2, r3
 8005636:	8a79      	ldrh	r1, [r7, #18]
 8005638:	2300      	movs	r3, #0
 800563a:	9300      	str	r3, [sp, #0]
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 fef2 	bl	8006428 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b22      	cmp	r3, #34	; 0x22
 8005660:	d108      	bne.n	8005674 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005670:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005672:	e05b      	b.n	800572c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005682:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005684:	e052      	b.n	800572c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005690:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005694:	d003      	beq.n	800569e <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f9b5 	bl	8005a06 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800569c:	e046      	b.n	800572c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800569e:	2140      	movs	r1, #64	; 0x40
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 fc75 	bl	8005f90 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80056a6:	e041      	b.n	800572c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	099b      	lsrs	r3, r3, #6
 80056ac:	f003 0301 	and.w	r3, r3, #1
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d029      	beq.n	8005708 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	099b      	lsrs	r3, r3, #6
 80056b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d023      	beq.n	8005708 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d119      	bne.n	80056fe <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056d8:	d027      	beq.n	800572a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056e2:	d108      	bne.n	80056f6 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685a      	ldr	r2, [r3, #4]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056f2:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80056f4:	e019      	b.n	800572a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f985 	bl	8005a06 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80056fc:	e015      	b.n	800572a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80056fe:	2140      	movs	r1, #64	; 0x40
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 fc45 	bl	8005f90 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005706:	e010      	b.n	800572a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	095b      	lsrs	r3, r3, #5
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00b      	beq.n	800572c <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800571c:	2b00      	cmp	r3, #0
 800571e:	d005      	beq.n	800572c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005720:	68b9      	ldr	r1, [r7, #8]
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 fa0a 	bl	8005b3c <I2C_ITMasterCplt>
 8005728:	e000      	b.n	800572c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800572a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b088      	sub	sp, #32
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <I2C_Slave_ISR_DMA+0x24>
 800575e:	2302      	movs	r3, #2
 8005760:	e0c9      	b.n	80058f6 <I2C_Slave_ISR_DMA+0x1b8>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	095b      	lsrs	r3, r3, #5
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	095b      	lsrs	r3, r3, #5
 800577a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005782:	68b9      	ldr	r1, [r7, #8]
 8005784:	68f8      	ldr	r0, [r7, #12]
 8005786:	f000 faa3 	bl	8005cd0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	091b      	lsrs	r3, r3, #4
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	f000 809a 	beq.w	80058cc <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	091b      	lsrs	r3, r3, #4
 800579c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8093 	beq.w	80058cc <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	0b9b      	lsrs	r3, r3, #14
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d105      	bne.n	80057be <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	0bdb      	lsrs	r3, r3, #15
 80057b6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d07f      	beq.n	80058be <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00d      	beq.n	80057e2 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	0bdb      	lsrs	r3, r3, #15
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d007      	beq.n	80057e2 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80057de:	2301      	movs	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00d      	beq.n	8005806 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	0b9b      	lsrs	r3, r3, #14
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8005802:	2301      	movs	r3, #1
 8005804:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d128      	bne.n	800585e <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b28      	cmp	r3, #40	; 0x28
 8005816:	d108      	bne.n	800582a <I2C_Slave_ISR_DMA+0xec>
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800581e:	d104      	bne.n	800582a <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fb5e 	bl	8005ee4 <I2C_ITListenCplt>
 8005828:	e048      	b.n	80058bc <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b29      	cmp	r3, #41	; 0x29
 8005834:	d10e      	bne.n	8005854 <I2C_Slave_ISR_DMA+0x116>
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800583c:	d00a      	beq.n	8005854 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2210      	movs	r2, #16
 8005844:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 fc99 	bl	800617e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 f917 	bl	8005a80 <I2C_ITSlaveSeqCplt>
 8005852:	e033      	b.n	80058bc <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2210      	movs	r2, #16
 800585a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800585c:	e034      	b.n	80058c8 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2210      	movs	r2, #16
 8005864:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	f043 0204 	orr.w	r2, r3, #4
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005878:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <I2C_Slave_ISR_DMA+0x14a>
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005886:	d11f      	bne.n	80058c8 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	2b21      	cmp	r3, #33	; 0x21
 800588c:	d002      	beq.n	8005894 <I2C_Slave_ISR_DMA+0x156>
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	2b29      	cmp	r3, #41	; 0x29
 8005892:	d103      	bne.n	800589c <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2221      	movs	r2, #33	; 0x21
 8005898:	631a      	str	r2, [r3, #48]	; 0x30
 800589a:	e008      	b.n	80058ae <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800589c:	7dfb      	ldrb	r3, [r7, #23]
 800589e:	2b22      	cmp	r3, #34	; 0x22
 80058a0:	d002      	beq.n	80058a8 <I2C_Slave_ISR_DMA+0x16a>
 80058a2:	7dfb      	ldrb	r3, [r7, #23]
 80058a4:	2b2a      	cmp	r3, #42	; 0x2a
 80058a6:	d102      	bne.n	80058ae <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2222      	movs	r2, #34	; 0x22
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b2:	4619      	mov	r1, r3
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fb6b 	bl	8005f90 <I2C_ITError>
      if (treatdmanack == 1U)
 80058ba:	e005      	b.n	80058c8 <I2C_Slave_ISR_DMA+0x18a>
 80058bc:	e004      	b.n	80058c8 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2210      	movs	r2, #16
 80058c4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80058c6:	e011      	b.n	80058ec <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80058c8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80058ca:	e00f      	b.n	80058ec <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	08db      	lsrs	r3, r3, #3
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d009      	beq.n	80058ec <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	08db      	lsrs	r3, r3, #3
 80058dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f809 	bl	80058fe <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3720      	adds	r7, #32
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005914:	2b28      	cmp	r3, #40	; 0x28
 8005916:	d16a      	bne.n	80059ee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	0c1b      	lsrs	r3, r3, #16
 8005920:	b2db      	uxtb	r3, r3
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	0c1b      	lsrs	r3, r3, #16
 8005930:	b29b      	uxth	r3, r3
 8005932:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005936:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	b29b      	uxth	r3, r3
 8005940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005944:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	b29b      	uxth	r3, r3
 800594e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005952:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	2b02      	cmp	r3, #2
 800595a:	d138      	bne.n	80059ce <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800595c:	897b      	ldrh	r3, [r7, #10]
 800595e:	09db      	lsrs	r3, r3, #7
 8005960:	b29a      	uxth	r2, r3
 8005962:	89bb      	ldrh	r3, [r7, #12]
 8005964:	4053      	eors	r3, r2
 8005966:	b29b      	uxth	r3, r3
 8005968:	f003 0306 	and.w	r3, r3, #6
 800596c:	2b00      	cmp	r3, #0
 800596e:	d11c      	bne.n	80059aa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005970:	897b      	ldrh	r3, [r7, #10]
 8005972:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005982:	2b02      	cmp	r3, #2
 8005984:	d13b      	bne.n	80059fe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2208      	movs	r2, #8
 8005992:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800599c:	89ba      	ldrh	r2, [r7, #12]
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	4619      	mov	r1, r3
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7ff fb6d 	bl	8005082 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80059a8:	e029      	b.n	80059fe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80059aa:	893b      	ldrh	r3, [r7, #8]
 80059ac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80059ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 fdd4 	bl	8006560 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80059c0:	89ba      	ldrh	r2, [r7, #12]
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	4619      	mov	r1, r3
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7ff fb5b 	bl	8005082 <HAL_I2C_AddrCallback>
}
 80059cc:	e017      	b.n	80059fe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80059ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fdc4 	bl	8006560 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80059e0:	89ba      	ldrh	r2, [r7, #12]
 80059e2:	7bfb      	ldrb	r3, [r7, #15]
 80059e4:	4619      	mov	r1, r3
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7ff fb4b 	bl	8005082 <HAL_I2C_AddrCallback>
}
 80059ec:	e007      	b.n	80059fe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2208      	movs	r2, #8
 80059f4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80059fe:	bf00      	nop
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	2b21      	cmp	r3, #33	; 0x21
 8005a20:	d115      	bne.n	8005a4e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2211      	movs	r2, #17
 8005a2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a36:	2101      	movs	r1, #1
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fd91 	bl	8006560 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff faf3 	bl	8005032 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a4c:	e014      	b.n	8005a78 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2212      	movs	r2, #18
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a62:	2102      	movs	r1, #2
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fd7b 	bl	8006560 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff fae7 	bl	8005046 <HAL_I2C_MasterRxCpltCallback>
}
 8005a78:	bf00      	nop
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	0b9b      	lsrs	r3, r3, #14
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ab2:	601a      	str	r2, [r3, #0]
 8005ab4:	e00d      	b.n	8005ad2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	0bdb      	lsrs	r3, r3, #15
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d007      	beq.n	8005ad2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ad0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b29      	cmp	r3, #41	; 0x29
 8005adc:	d112      	bne.n	8005b04 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2228      	movs	r2, #40	; 0x28
 8005ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2221      	movs	r2, #33	; 0x21
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005aec:	2101      	movs	r1, #1
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fd36 	bl	8006560 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff faac 	bl	800505a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b02:	e017      	b.n	8005b34 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0e:	d111      	bne.n	8005b34 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2228      	movs	r2, #40	; 0x28
 8005b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2222      	movs	r2, #34	; 0x22
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005b1e:	2102      	movs	r1, #2
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fd1d 	bl	8006560 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f7ff fa9d 	bl	800506e <HAL_I2C_SlaveRxCpltCallback>
}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b21      	cmp	r3, #33	; 0x21
 8005b5c:	d107      	bne.n	8005b6e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b5e:	2101      	movs	r1, #1
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fcfd 	bl	8006560 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2211      	movs	r2, #17
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005b6c:	e00c      	b.n	8005b88 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b22      	cmp	r3, #34	; 0x22
 8005b78:	d106      	bne.n	8005b88 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005b7a:	2102      	movs	r1, #2
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fcef 	bl	8006560 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2212      	movs	r2, #18
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6859      	ldr	r1, [r3, #4]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b4d      	ldr	r3, [pc, #308]	; (8005cc8 <I2C_ITMasterCplt+0x18c>)
 8005b94:	400b      	ands	r3, r1
 8005b96:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a4a      	ldr	r2, [pc, #296]	; (8005ccc <I2C_ITMasterCplt+0x190>)
 8005ba2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	091b      	lsrs	r3, r3, #4
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d009      	beq.n	8005bc4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2210      	movs	r2, #16
 8005bb6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbc:	f043 0204 	orr.w	r2, r3, #4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b60      	cmp	r3, #96	; 0x60
 8005bce:	d10b      	bne.n	8005be8 <I2C_ITMasterCplt+0xac>
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	089b      	lsrs	r3, r3, #2
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005be6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 fac8 	bl	800617e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf2:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b60      	cmp	r3, #96	; 0x60
 8005bfe:	d002      	beq.n	8005c06 <I2C_ITMasterCplt+0xca>
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d006      	beq.n	8005c14 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f9bf 	bl	8005f90 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c12:	e054      	b.n	8005cbe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b21      	cmp	r3, #33	; 0x21
 8005c1e:	d124      	bne.n	8005c6a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b40      	cmp	r3, #64	; 0x40
 8005c38:	d10b      	bne.n	8005c52 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7ff fa31 	bl	80050b2 <HAL_I2C_MemTxCpltCallback>
}
 8005c50:	e035      	b.n	8005cbe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7ff f9e5 	bl	8005032 <HAL_I2C_MasterTxCpltCallback>
}
 8005c68:	e029      	b.n	8005cbe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b22      	cmp	r3, #34	; 0x22
 8005c74:	d123      	bne.n	8005cbe <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d10b      	bne.n	8005ca8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff fa10 	bl	80050c6 <HAL_I2C_MemRxCpltCallback>
}
 8005ca6:	e00a      	b.n	8005cbe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff f9c4 	bl	8005046 <HAL_I2C_MasterRxCpltCallback>
}
 8005cbe:	bf00      	nop
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	fe00e800 	.word	0xfe00e800
 8005ccc:	ffff0000 	.word	0xffff0000

08005cd0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	2b21      	cmp	r3, #33	; 0x21
 8005cfa:	d002      	beq.n	8005d02 <I2C_ITSlaveCplt+0x32>
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	2b29      	cmp	r3, #41	; 0x29
 8005d00:	d108      	bne.n	8005d14 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005d02:	f248 0101 	movw	r1, #32769	; 0x8001
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fc2a 	bl	8006560 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2221      	movs	r2, #33	; 0x21
 8005d10:	631a      	str	r2, [r3, #48]	; 0x30
 8005d12:	e00d      	b.n	8005d30 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	2b22      	cmp	r3, #34	; 0x22
 8005d18:	d002      	beq.n	8005d20 <I2C_ITSlaveCplt+0x50>
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d1e:	d107      	bne.n	8005d30 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005d20:	f248 0102 	movw	r1, #32770	; 0x8002
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 fc1b 	bl	8006560 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2222      	movs	r2, #34	; 0x22
 8005d2e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6859      	ldr	r1, [r3, #4]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4b64      	ldr	r3, [pc, #400]	; (8005edc <I2C_ITSlaveCplt+0x20c>)
 8005d4c:	400b      	ands	r3, r1
 8005d4e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fa14 	bl	800617e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	0b9b      	lsrs	r3, r3, #14
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d013      	beq.n	8005d8a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d020      	beq.n	8005dbc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d88:	e018      	b.n	8005dbc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	0bdb      	lsrs	r3, r3, #15
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d012      	beq.n	8005dbc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005da4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d006      	beq.n	8005dbc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	089b      	lsrs	r3, r3, #2
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d020      	beq.n	8005e0a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	f023 0304 	bic.w	r3, r3, #4
 8005dce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dda:	b2d2      	uxtb	r2, r2
 8005ddc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00c      	beq.n	8005e0a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d005      	beq.n	8005e20 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e18:	f043 0204 	orr.w	r2, r3, #4
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d010      	beq.n	8005e58 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f8a7 	bl	8005f90 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b28      	cmp	r3, #40	; 0x28
 8005e4c:	d141      	bne.n	8005ed2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e4e:	6979      	ldr	r1, [r7, #20]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f847 	bl	8005ee4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e56:	e03c      	b.n	8005ed2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e60:	d014      	beq.n	8005e8c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff fe0c 	bl	8005a80 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <I2C_ITSlaveCplt+0x210>)
 8005e6c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7ff f90a 	bl	800509e <HAL_I2C_ListenCpltCallback>
}
 8005e8a:	e022      	b.n	8005ed2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b22      	cmp	r3, #34	; 0x22
 8005e96:	d10e      	bne.n	8005eb6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff f8dd 	bl	800506e <HAL_I2C_SlaveRxCpltCallback>
}
 8005eb4:	e00d      	b.n	8005ed2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f7ff f8c4 	bl	800505a <HAL_I2C_SlaveTxCpltCallback>
}
 8005ed2:	bf00      	nop
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	fe00e800 	.word	0xfe00e800
 8005ee0:	ffff0000 	.word	0xffff0000

08005ee4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a26      	ldr	r2, [pc, #152]	; (8005f8c <I2C_ITListenCplt+0xa8>)
 8005ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	089b      	lsrs	r3, r3, #2
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d022      	beq.n	8005f62 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d012      	beq.n	8005f62 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	b29a      	uxth	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5a:	f043 0204 	orr.w	r2, r3, #4
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f62:	f248 0103 	movw	r1, #32771	; 0x8003
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fafa 	bl	8006560 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2210      	movs	r2, #16
 8005f72:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff f88e 	bl	800509e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	ffff0000 	.word	0xffff0000

08005f90 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a5d      	ldr	r2, [pc, #372]	; (8006124 <I2C_ITError+0x194>)
 8005fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2b28      	cmp	r3, #40	; 0x28
 8005fc6:	d005      	beq.n	8005fd4 <I2C_ITError+0x44>
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	2b29      	cmp	r3, #41	; 0x29
 8005fcc:	d002      	beq.n	8005fd4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005fce:	7bfb      	ldrb	r3, [r7, #15]
 8005fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8005fd2:	d10b      	bne.n	8005fec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fd4:	2103      	movs	r1, #3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fac2 	bl	8006560 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2228      	movs	r2, #40	; 0x28
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a50      	ldr	r2, [pc, #320]	; (8006128 <I2C_ITError+0x198>)
 8005fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8005fea:	e011      	b.n	8006010 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fec:	f248 0103 	movw	r1, #32771	; 0x8003
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fab5 	bl	8006560 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b60      	cmp	r3, #96	; 0x60
 8006000:	d003      	beq.n	800600a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	2b00      	cmp	r3, #0
 800601c:	d039      	beq.n	8006092 <I2C_ITError+0x102>
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2b11      	cmp	r3, #17
 8006022:	d002      	beq.n	800602a <I2C_ITError+0x9a>
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b21      	cmp	r3, #33	; 0x21
 8006028:	d133      	bne.n	8006092 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006034:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006038:	d107      	bne.n	800604a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006048:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	4618      	mov	r0, r3
 8006050:	f7fc ffe6 	bl	8003020 <HAL_DMA_GetState>
 8006054:	4603      	mov	r3, r0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d017      	beq.n	800608a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	4a33      	ldr	r2, [pc, #204]	; (800612c <I2C_ITError+0x19c>)
 8006060:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606e:	4618      	mov	r0, r3
 8006070:	f7fc fe2a 	bl	8002cc8 <HAL_DMA_Abort_IT>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d04d      	beq.n	8006116 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006084:	4610      	mov	r0, r2
 8006086:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006088:	e045      	b.n	8006116 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f850 	bl	8006130 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006090:	e041      	b.n	8006116 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d039      	beq.n	800610e <I2C_ITError+0x17e>
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b12      	cmp	r3, #18
 800609e:	d002      	beq.n	80060a6 <I2C_ITError+0x116>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b22      	cmp	r3, #34	; 0x22
 80060a4:	d133      	bne.n	800610e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b4:	d107      	bne.n	80060c6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fc ffa8 	bl	8003020 <HAL_DMA_GetState>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d017      	beq.n	8006106 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060da:	4a14      	ldr	r2, [pc, #80]	; (800612c <I2C_ITError+0x19c>)
 80060dc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fc fdec 	bl	8002cc8 <HAL_DMA_Abort_IT>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d011      	beq.n	800611a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006100:	4610      	mov	r0, r2
 8006102:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006104:	e009      	b.n	800611a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f812 	bl	8006130 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800610c:	e005      	b.n	800611a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f80e 	bl	8006130 <I2C_TreatErrorCallback>
  }
}
 8006114:	e002      	b.n	800611c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006116:	bf00      	nop
 8006118:	e000      	b.n	800611c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800611a:	bf00      	nop
}
 800611c:	bf00      	nop
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	ffff0000 	.word	0xffff0000
 8006128:	08005353 	.word	0x08005353
 800612c:	080063ed 	.word	0x080063ed

08006130 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b60      	cmp	r3, #96	; 0x60
 8006142:	d10e      	bne.n	8006162 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fe ffc7 	bl	80050ee <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006160:	e009      	b.n	8006176 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7fe ffb2 	bl	80050da <HAL_I2C_ErrorCallback>
}
 8006176:	bf00      	nop
 8006178:	3708      	adds	r7, #8
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b02      	cmp	r3, #2
 8006192:	d103      	bne.n	800619c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2200      	movs	r2, #0
 800619a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d007      	beq.n	80061ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699a      	ldr	r2, [r3, #24]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f042 0201 	orr.w	r2, r2, #1
 80061b8:	619a      	str	r2, [r3, #24]
  }
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061e2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d104      	bne.n	80061f8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80061ee:	2120      	movs	r1, #32
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f94b 	bl	800648c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80061f6:	e02d      	b.n	8006254 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006200:	441a      	add	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620a:	b29b      	uxth	r3, r3
 800620c:	2bff      	cmp	r3, #255	; 0xff
 800620e:	d903      	bls.n	8006218 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	22ff      	movs	r2, #255	; 0xff
 8006214:	851a      	strh	r2, [r3, #40]	; 0x28
 8006216:	e004      	b.n	8006222 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621c:	b29a      	uxth	r2, r3
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	4619      	mov	r1, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3328      	adds	r3, #40	; 0x28
 8006232:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006238:	f7fc fc76 	bl	8002b28 <HAL_DMA_Start_IT>
 800623c:	4603      	mov	r3, r0
 800623e:	2b00      	cmp	r3, #0
 8006240:	d004      	beq.n	800624c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006242:	2110      	movs	r1, #16
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f7ff fea3 	bl	8005f90 <I2C_ITError>
}
 800624a:	e003      	b.n	8006254 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800624c:	2140      	movs	r1, #64	; 0x40
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 f91c 	bl	800648c <I2C_Enable_IRQ>
}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006268:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626e:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006276:	d002      	beq.n	800627e <I2C_DMASlaveTransmitCplt+0x22>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800628c:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fbf6 	bl	8005a80 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006294:	bf00      	nop
 8006296:	3710      	adds	r7, #16
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062b8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80062c4:	2120      	movs	r1, #32
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f8e0 	bl	800648c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80062cc:	e02d      	b.n	800632a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80062d6:	441a      	add	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2bff      	cmp	r3, #255	; 0xff
 80062e4:	d903      	bls.n	80062ee <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	22ff      	movs	r2, #255	; 0xff
 80062ea:	851a      	strh	r2, [r3, #40]	; 0x28
 80062ec:	e004      	b.n	80062f8 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3324      	adds	r3, #36	; 0x24
 8006302:	4619      	mov	r1, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800630e:	f7fc fc0b 	bl	8002b28 <HAL_DMA_Start_IT>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006318:	2110      	movs	r1, #16
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff fe38 	bl	8005f90 <I2C_ITError>
}
 8006320:	e003      	b.n	800632a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006322:	2140      	movs	r1, #64	; 0x40
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f8b1 	bl	800648c <I2C_Enable_IRQ>
}
 800632a:	bf00      	nop
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b084      	sub	sp, #16
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10e      	bne.n	8006370 <I2C_DMASlaveReceiveCplt+0x3e>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006358:	d00a      	beq.n	8006370 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006368:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7ff fb88 	bl	8005a80 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006370:	bf00      	nop
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638e:	2b00      	cmp	r3, #0
 8006390:	d007      	beq.n	80063a2 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800639e:	2301      	movs	r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d007      	beq.n	80063ba <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80063b6:	2301      	movs	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fc fe3e 	bl	800303c <HAL_DMA_GetError>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d00e      	beq.n	80063e4 <I2C_DMAError+0x6c>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00b      	beq.n	80063e4 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063da:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80063dc:	2110      	movs	r1, #16
 80063de:	68b8      	ldr	r0, [r7, #8]
 80063e0:	f7ff fdd6 	bl	8005f90 <I2C_ITError>
  }
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	2200      	movs	r2, #0
 8006408:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	2200      	movs	r2, #0
 8006418:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f7ff fe88 	bl	8006130 <I2C_TreatErrorCallback>
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	607b      	str	r3, [r7, #4]
 8006432:	460b      	mov	r3, r1
 8006434:	817b      	strh	r3, [r7, #10]
 8006436:	4613      	mov	r3, r2
 8006438:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800643a:	897b      	ldrh	r3, [r7, #10]
 800643c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006440:	7a7b      	ldrb	r3, [r7, #9]
 8006442:	041b      	lsls	r3, r3, #16
 8006444:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006448:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	4313      	orrs	r3, r2
 8006452:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006456:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	0d5b      	lsrs	r3, r3, #21
 8006462:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006466:	4b08      	ldr	r3, [pc, #32]	; (8006488 <I2C_TransferConfig+0x60>)
 8006468:	430b      	orrs	r3, r1
 800646a:	43db      	mvns	r3, r3
 800646c:	ea02 0103 	and.w	r1, r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	430a      	orrs	r2, r1
 8006478:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800647a:	bf00      	nop
 800647c:	371c      	adds	r7, #28
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	03ff63ff 	.word	0x03ff63ff

0800648c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	460b      	mov	r3, r1
 8006496:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064a0:	4a2d      	ldr	r2, [pc, #180]	; (8006558 <I2C_Enable_IRQ+0xcc>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d004      	beq.n	80064b0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80064aa:	4a2c      	ldr	r2, [pc, #176]	; (800655c <I2C_Enable_IRQ+0xd0>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d11d      	bne.n	80064ec <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80064b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	da03      	bge.n	80064c0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80064be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80064c0:	887b      	ldrh	r3, [r7, #2]
 80064c2:	2b10      	cmp	r3, #16
 80064c4:	d103      	bne.n	80064ce <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80064cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80064ce:	887b      	ldrh	r3, [r7, #2]
 80064d0:	2b20      	cmp	r3, #32
 80064d2:	d103      	bne.n	80064dc <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80064dc:	887b      	ldrh	r3, [r7, #2]
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d12c      	bne.n	800653c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80064ea:	e027      	b.n	800653c <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80064ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	da03      	bge.n	80064fc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80064fa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80064fc:	887b      	ldrh	r3, [r7, #2]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800650c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800650e:	887b      	ldrh	r3, [r7, #2]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800651e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006520:	887b      	ldrh	r3, [r7, #2]
 8006522:	2b10      	cmp	r3, #16
 8006524:	d103      	bne.n	800652e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800652c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800652e:	887b      	ldrh	r3, [r7, #2]
 8006530:	2b20      	cmp	r3, #32
 8006532:	d103      	bne.n	800653c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f043 0320 	orr.w	r3, r3, #32
 800653a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6819      	ldr	r1, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	430a      	orrs	r2, r1
 800654a:	601a      	str	r2, [r3, #0]
}
 800654c:	bf00      	nop
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	08005559 	.word	0x08005559
 800655c:	0800573f 	.word	0x0800573f

08006560 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006570:	887b      	ldrh	r3, [r7, #2]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00f      	beq.n	800659a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006580:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006588:	b2db      	uxtb	r3, r3
 800658a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800658e:	2b28      	cmp	r3, #40	; 0x28
 8006590:	d003      	beq.n	800659a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006598:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800659a:	887b      	ldrh	r3, [r7, #2]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00f      	beq.n	80065c4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80065aa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065b8:	2b28      	cmp	r3, #40	; 0x28
 80065ba:	d003      	beq.n	80065c4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80065c2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	da03      	bge.n	80065d4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80065d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80065d4:	887b      	ldrh	r3, [r7, #2]
 80065d6:	2b10      	cmp	r3, #16
 80065d8:	d103      	bne.n	80065e2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80065e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80065e2:	887b      	ldrh	r3, [r7, #2]
 80065e4:	2b20      	cmp	r3, #32
 80065e6:	d103      	bne.n	80065f0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f043 0320 	orr.w	r3, r3, #32
 80065ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80065f0:	887b      	ldrh	r3, [r7, #2]
 80065f2:	2b40      	cmp	r3, #64	; 0x40
 80065f4:	d103      	bne.n	80065fe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065fc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6819      	ldr	r1, [r3, #0]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	43da      	mvns	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	400a      	ands	r2, r1
 800660e:	601a      	str	r2, [r3, #0]
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b20      	cmp	r3, #32
 8006630:	d138      	bne.n	80066a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800663c:	2302      	movs	r3, #2
 800663e:	e032      	b.n	80066a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2224      	movs	r2, #36	; 0x24
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0201 	bic.w	r2, r2, #1
 800665e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800666e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6819      	ldr	r1, [r3, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f042 0201 	orr.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	e000      	b.n	80066a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066a4:	2302      	movs	r3, #2
  }
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	d139      	bne.n	800673c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d101      	bne.n	80066d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066d2:	2302      	movs	r3, #2
 80066d4:	e033      	b.n	800673e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2224      	movs	r2, #36	; 0x24
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0201 	bic.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006704:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	021b      	lsls	r3, r3, #8
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	4313      	orrs	r3, r2
 800670e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f042 0201 	orr.w	r2, r2, #1
 8006726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006738:	2300      	movs	r3, #0
 800673a:	e000      	b.n	800673e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800673c:	2302      	movs	r3, #2
  }
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800674a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800674c:	b08f      	sub	sp, #60	; 0x3c
 800674e:	af0a      	add	r7, sp, #40	; 0x28
 8006750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e116      	b.n	800698a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d106      	bne.n	800677c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fb fbf2 	bl	8001f60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2203      	movs	r2, #3
 8006780:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800678c:	2b00      	cmp	r3, #0
 800678e:	d102      	bne.n	8006796 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4618      	mov	r0, r3
 800679c:	f004 f850 	bl	800a840 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	603b      	str	r3, [r7, #0]
 80067a6:	687e      	ldr	r6, [r7, #4]
 80067a8:	466d      	mov	r5, sp
 80067aa:	f106 0410 	add.w	r4, r6, #16
 80067ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80067be:	1d33      	adds	r3, r6, #4
 80067c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067c2:	6838      	ldr	r0, [r7, #0]
 80067c4:	f003 ffe4 	bl	800a790 <USB_CoreInit>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2202      	movs	r2, #2
 80067d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e0d7      	b.n	800698a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2100      	movs	r1, #0
 80067e0:	4618      	mov	r0, r3
 80067e2:	f004 f83e 	bl	800a862 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067e6:	2300      	movs	r3, #0
 80067e8:	73fb      	strb	r3, [r7, #15]
 80067ea:	e04a      	b.n	8006882 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80067ec:	7bfa      	ldrb	r2, [r7, #15]
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	4613      	mov	r3, r2
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	440b      	add	r3, r1
 80067fa:	333d      	adds	r3, #61	; 0x3d
 80067fc:	2201      	movs	r2, #1
 80067fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006800:	7bfa      	ldrb	r2, [r7, #15]
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	4613      	mov	r3, r2
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	440b      	add	r3, r1
 800680e:	333c      	adds	r3, #60	; 0x3c
 8006810:	7bfa      	ldrb	r2, [r7, #15]
 8006812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006814:	7bfa      	ldrb	r2, [r7, #15]
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	b298      	uxth	r0, r3
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	4613      	mov	r3, r2
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	3344      	adds	r3, #68	; 0x44
 8006828:	4602      	mov	r2, r0
 800682a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800682c:	7bfa      	ldrb	r2, [r7, #15]
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	4613      	mov	r3, r2
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	3340      	adds	r3, #64	; 0x40
 800683c:	2200      	movs	r2, #0
 800683e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006840:	7bfa      	ldrb	r2, [r7, #15]
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	4613      	mov	r3, r2
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	3348      	adds	r3, #72	; 0x48
 8006850:	2200      	movs	r2, #0
 8006852:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006854:	7bfa      	ldrb	r2, [r7, #15]
 8006856:	6879      	ldr	r1, [r7, #4]
 8006858:	4613      	mov	r3, r2
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	4413      	add	r3, r2
 800685e:	009b      	lsls	r3, r3, #2
 8006860:	440b      	add	r3, r1
 8006862:	334c      	adds	r3, #76	; 0x4c
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006868:	7bfa      	ldrb	r2, [r7, #15]
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	4613      	mov	r3, r2
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	440b      	add	r3, r1
 8006876:	3354      	adds	r3, #84	; 0x54
 8006878:	2200      	movs	r2, #0
 800687a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	3301      	adds	r3, #1
 8006880:	73fb      	strb	r3, [r7, #15]
 8006882:	7bfa      	ldrb	r2, [r7, #15]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	429a      	cmp	r2, r3
 800688a:	d3af      	bcc.n	80067ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800688c:	2300      	movs	r3, #0
 800688e:	73fb      	strb	r3, [r7, #15]
 8006890:	e044      	b.n	800691c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006892:	7bfa      	ldrb	r2, [r7, #15]
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	4613      	mov	r3, r2
 8006898:	00db      	lsls	r3, r3, #3
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	440b      	add	r3, r1
 80068a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80068a4:	2200      	movs	r2, #0
 80068a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80068a8:	7bfa      	ldrb	r2, [r7, #15]
 80068aa:	6879      	ldr	r1, [r7, #4]
 80068ac:	4613      	mov	r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	4413      	add	r3, r2
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	440b      	add	r3, r1
 80068b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80068ba:	7bfa      	ldrb	r2, [r7, #15]
 80068bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80068be:	7bfa      	ldrb	r2, [r7, #15]
 80068c0:	6879      	ldr	r1, [r7, #4]
 80068c2:	4613      	mov	r3, r2
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	440b      	add	r3, r1
 80068cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80068d4:	7bfa      	ldrb	r2, [r7, #15]
 80068d6:	6879      	ldr	r1, [r7, #4]
 80068d8:	4613      	mov	r3, r2
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	4413      	add	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	440b      	add	r3, r1
 80068e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80068e6:	2200      	movs	r2, #0
 80068e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80068ea:	7bfa      	ldrb	r2, [r7, #15]
 80068ec:	6879      	ldr	r1, [r7, #4]
 80068ee:	4613      	mov	r3, r2
 80068f0:	00db      	lsls	r3, r3, #3
 80068f2:	4413      	add	r3, r2
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	440b      	add	r3, r1
 80068f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006900:	7bfa      	ldrb	r2, [r7, #15]
 8006902:	6879      	ldr	r1, [r7, #4]
 8006904:	4613      	mov	r3, r2
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	3301      	adds	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]
 800691c:	7bfa      	ldrb	r2, [r7, #15]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	429a      	cmp	r2, r3
 8006924:	d3b5      	bcc.n	8006892 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	687e      	ldr	r6, [r7, #4]
 800692e:	466d      	mov	r5, sp
 8006930:	f106 0410 	add.w	r4, r6, #16
 8006934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800693a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800693c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006940:	e885 0003 	stmia.w	r5, {r0, r1}
 8006944:	1d33      	adds	r3, r6, #4
 8006946:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006948:	6838      	ldr	r0, [r7, #0]
 800694a:	f003 ffd7 	bl	800a8fc <USB_DevInit>
 800694e:	4603      	mov	r3, r0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d005      	beq.n	8006960 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2202      	movs	r2, #2
 8006958:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e014      	b.n	800698a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	2b01      	cmp	r3, #1
 8006976:	d102      	bne.n	800697e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f80b 	bl	8006994 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4618      	mov	r0, r3
 8006984:	f004 f995 	bl	800acb2 <USB_DevDisconnect>

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006994 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80069c4:	4313      	orrs	r3, r2
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3714      	adds	r7, #20
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	10000003 	.word	0x10000003

080069dc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80069dc:	b480      	push	{r7}
 80069de:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069e0:	4b05      	ldr	r3, [pc, #20]	; (80069f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a04      	ldr	r2, [pc, #16]	; (80069f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ea:	6013      	str	r3, [r2, #0]
}
 80069ec:	bf00      	nop
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40007000 	.word	0x40007000

080069fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006a04:	2300      	movs	r3, #0
 8006a06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e291      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 8087 	beq.w	8006b2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a20:	4b96      	ldr	r3, [pc, #600]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f003 030c 	and.w	r3, r3, #12
 8006a28:	2b04      	cmp	r3, #4
 8006a2a:	d00c      	beq.n	8006a46 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a2c:	4b93      	ldr	r3, [pc, #588]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 030c 	and.w	r3, r3, #12
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d112      	bne.n	8006a5e <HAL_RCC_OscConfig+0x62>
 8006a38:	4b90      	ldr	r3, [pc, #576]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a44:	d10b      	bne.n	8006a5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a46:	4b8d      	ldr	r3, [pc, #564]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d06c      	beq.n	8006b2c <HAL_RCC_OscConfig+0x130>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d168      	bne.n	8006b2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e26b      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a66:	d106      	bne.n	8006a76 <HAL_RCC_OscConfig+0x7a>
 8006a68:	4b84      	ldr	r3, [pc, #528]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a83      	ldr	r2, [pc, #524]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	e02e      	b.n	8006ad4 <HAL_RCC_OscConfig+0xd8>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10c      	bne.n	8006a98 <HAL_RCC_OscConfig+0x9c>
 8006a7e:	4b7f      	ldr	r3, [pc, #508]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a7e      	ldr	r2, [pc, #504]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	4b7c      	ldr	r3, [pc, #496]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a7b      	ldr	r2, [pc, #492]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006a90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	e01d      	b.n	8006ad4 <HAL_RCC_OscConfig+0xd8>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006aa0:	d10c      	bne.n	8006abc <HAL_RCC_OscConfig+0xc0>
 8006aa2:	4b76      	ldr	r3, [pc, #472]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a75      	ldr	r2, [pc, #468]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	4b73      	ldr	r3, [pc, #460]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a72      	ldr	r2, [pc, #456]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	e00b      	b.n	8006ad4 <HAL_RCC_OscConfig+0xd8>
 8006abc:	4b6f      	ldr	r3, [pc, #444]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a6e      	ldr	r2, [pc, #440]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006ac2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	4b6c      	ldr	r3, [pc, #432]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a6b      	ldr	r2, [pc, #428]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006ace:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d013      	beq.n	8006b04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006adc:	f7fb fe34 	bl	8002748 <HAL_GetTick>
 8006ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae4:	f7fb fe30 	bl	8002748 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b64      	cmp	r3, #100	; 0x64
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e21f      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006af6:	4b61      	ldr	r3, [pc, #388]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f0      	beq.n	8006ae4 <HAL_RCC_OscConfig+0xe8>
 8006b02:	e014      	b.n	8006b2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b04:	f7fb fe20 	bl	8002748 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b0a:	e008      	b.n	8006b1e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b0c:	f7fb fe1c 	bl	8002748 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	2b64      	cmp	r3, #100	; 0x64
 8006b18:	d901      	bls.n	8006b1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e20b      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b1e:	4b57      	ldr	r3, [pc, #348]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f0      	bne.n	8006b0c <HAL_RCC_OscConfig+0x110>
 8006b2a:	e000      	b.n	8006b2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d069      	beq.n	8006c0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b3a:	4b50      	ldr	r3, [pc, #320]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 030c 	and.w	r3, r3, #12
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b46:	4b4d      	ldr	r3, [pc, #308]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d11c      	bne.n	8006b8c <HAL_RCC_OscConfig+0x190>
 8006b52:	4b4a      	ldr	r3, [pc, #296]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d116      	bne.n	8006b8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b5e:	4b47      	ldr	r3, [pc, #284]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <HAL_RCC_OscConfig+0x17a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d001      	beq.n	8006b76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e1df      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b76:	4b41      	ldr	r3, [pc, #260]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	493d      	ldr	r1, [pc, #244]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b8a:	e040      	b.n	8006c0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d023      	beq.n	8006bdc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b94:	4b39      	ldr	r3, [pc, #228]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a38      	ldr	r2, [pc, #224]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ba0:	f7fb fdd2 	bl	8002748 <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba8:	f7fb fdce 	bl	8002748 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e1bd      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bba:	4b30      	ldr	r3, [pc, #192]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0f0      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc6:	4b2d      	ldr	r3, [pc, #180]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	4929      	ldr	r1, [pc, #164]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	600b      	str	r3, [r1, #0]
 8006bda:	e018      	b.n	8006c0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bdc:	4b27      	ldr	r3, [pc, #156]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a26      	ldr	r2, [pc, #152]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006be2:	f023 0301 	bic.w	r3, r3, #1
 8006be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be8:	f7fb fdae 	bl	8002748 <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bf0:	f7fb fdaa 	bl	8002748 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e199      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c02:	4b1e      	ldr	r3, [pc, #120]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1f0      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d038      	beq.n	8006c8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d019      	beq.n	8006c56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c22:	4b16      	ldr	r3, [pc, #88]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c26:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006c28:	f043 0301 	orr.w	r3, r3, #1
 8006c2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2e:	f7fb fd8b 	bl	8002748 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c36:	f7fb fd87 	bl	8002748 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e176      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c48:	4b0c      	ldr	r3, [pc, #48]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0f0      	beq.n	8006c36 <HAL_RCC_OscConfig+0x23a>
 8006c54:	e01a      	b.n	8006c8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c56:	4b09      	ldr	r3, [pc, #36]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c5a:	4a08      	ldr	r2, [pc, #32]	; (8006c7c <HAL_RCC_OscConfig+0x280>)
 8006c5c:	f023 0301 	bic.w	r3, r3, #1
 8006c60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c62:	f7fb fd71 	bl	8002748 <HAL_GetTick>
 8006c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c68:	e00a      	b.n	8006c80 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c6a:	f7fb fd6d 	bl	8002748 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d903      	bls.n	8006c80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e15c      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
 8006c7c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c80:	4b91      	ldr	r3, [pc, #580]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1ee      	bne.n	8006c6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f003 0304 	and.w	r3, r3, #4
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 80a4 	beq.w	8006de2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c9a:	4b8b      	ldr	r3, [pc, #556]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10d      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ca6:	4b88      	ldr	r3, [pc, #544]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	4a87      	ldr	r2, [pc, #540]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8006cb2:	4b85      	ldr	r3, [pc, #532]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cba:	60bb      	str	r3, [r7, #8]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cc2:	4b82      	ldr	r3, [pc, #520]	; (8006ecc <HAL_RCC_OscConfig+0x4d0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d118      	bne.n	8006d00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006cce:	4b7f      	ldr	r3, [pc, #508]	; (8006ecc <HAL_RCC_OscConfig+0x4d0>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a7e      	ldr	r2, [pc, #504]	; (8006ecc <HAL_RCC_OscConfig+0x4d0>)
 8006cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cda:	f7fb fd35 	bl	8002748 <HAL_GetTick>
 8006cde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ce2:	f7fb fd31 	bl	8002748 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b64      	cmp	r3, #100	; 0x64
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e120      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cf4:	4b75      	ldr	r3, [pc, #468]	; (8006ecc <HAL_RCC_OscConfig+0x4d0>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d0f0      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d106      	bne.n	8006d16 <HAL_RCC_OscConfig+0x31a>
 8006d08:	4b6f      	ldr	r3, [pc, #444]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d0c:	4a6e      	ldr	r2, [pc, #440]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d0e:	f043 0301 	orr.w	r3, r3, #1
 8006d12:	6713      	str	r3, [r2, #112]	; 0x70
 8006d14:	e02d      	b.n	8006d72 <HAL_RCC_OscConfig+0x376>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10c      	bne.n	8006d38 <HAL_RCC_OscConfig+0x33c>
 8006d1e:	4b6a      	ldr	r3, [pc, #424]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d22:	4a69      	ldr	r2, [pc, #420]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d24:	f023 0301 	bic.w	r3, r3, #1
 8006d28:	6713      	str	r3, [r2, #112]	; 0x70
 8006d2a:	4b67      	ldr	r3, [pc, #412]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2e:	4a66      	ldr	r2, [pc, #408]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d30:	f023 0304 	bic.w	r3, r3, #4
 8006d34:	6713      	str	r3, [r2, #112]	; 0x70
 8006d36:	e01c      	b.n	8006d72 <HAL_RCC_OscConfig+0x376>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	2b05      	cmp	r3, #5
 8006d3e:	d10c      	bne.n	8006d5a <HAL_RCC_OscConfig+0x35e>
 8006d40:	4b61      	ldr	r3, [pc, #388]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d44:	4a60      	ldr	r2, [pc, #384]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d46:	f043 0304 	orr.w	r3, r3, #4
 8006d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d4c:	4b5e      	ldr	r3, [pc, #376]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d50:	4a5d      	ldr	r2, [pc, #372]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d52:	f043 0301 	orr.w	r3, r3, #1
 8006d56:	6713      	str	r3, [r2, #112]	; 0x70
 8006d58:	e00b      	b.n	8006d72 <HAL_RCC_OscConfig+0x376>
 8006d5a:	4b5b      	ldr	r3, [pc, #364]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5e:	4a5a      	ldr	r2, [pc, #360]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d60:	f023 0301 	bic.w	r3, r3, #1
 8006d64:	6713      	str	r3, [r2, #112]	; 0x70
 8006d66:	4b58      	ldr	r3, [pc, #352]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6a:	4a57      	ldr	r2, [pc, #348]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d6c:	f023 0304 	bic.w	r3, r3, #4
 8006d70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d015      	beq.n	8006da6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7a:	f7fb fce5 	bl	8002748 <HAL_GetTick>
 8006d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d80:	e00a      	b.n	8006d98 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d82:	f7fb fce1 	bl	8002748 <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e0ce      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d98:	4b4b      	ldr	r3, [pc, #300]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9c:	f003 0302 	and.w	r3, r3, #2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0ee      	beq.n	8006d82 <HAL_RCC_OscConfig+0x386>
 8006da4:	e014      	b.n	8006dd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da6:	f7fb fccf 	bl	8002748 <HAL_GetTick>
 8006daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dac:	e00a      	b.n	8006dc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dae:	f7fb fccb 	bl	8002748 <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d901      	bls.n	8006dc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006dc0:	2303      	movs	r3, #3
 8006dc2:	e0b8      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dc4:	4b40      	ldr	r3, [pc, #256]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1ee      	bne.n	8006dae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dd0:	7dfb      	ldrb	r3, [r7, #23]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d105      	bne.n	8006de2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dd6:	4b3c      	ldr	r3, [pc, #240]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	4a3b      	ldr	r2, [pc, #236]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	f000 80a4 	beq.w	8006f34 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006dec:	4b36      	ldr	r3, [pc, #216]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f003 030c 	and.w	r3, r3, #12
 8006df4:	2b08      	cmp	r3, #8
 8006df6:	d06b      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d149      	bne.n	8006e94 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e00:	4b31      	ldr	r3, [pc, #196]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a30      	ldr	r2, [pc, #192]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fb fc9c 	bl	8002748 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fb fc98 	bl	8002748 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e087      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e26:	4b28      	ldr	r3, [pc, #160]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69da      	ldr	r2, [r3, #28]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	019b      	lsls	r3, r3, #6
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	061b      	lsls	r3, r3, #24
 8006e56:	4313      	orrs	r3, r2
 8006e58:	4a1b      	ldr	r2, [pc, #108]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e5e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e60:	4b19      	ldr	r3, [pc, #100]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a18      	ldr	r2, [pc, #96]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6c:	f7fb fc6c 	bl	8002748 <HAL_GetTick>
 8006e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e72:	e008      	b.n	8006e86 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e74:	f7fb fc68 	bl	8002748 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e057      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e86:	4b10      	ldr	r3, [pc, #64]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0f0      	beq.n	8006e74 <HAL_RCC_OscConfig+0x478>
 8006e92:	e04f      	b.n	8006f34 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e94:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a0b      	ldr	r2, [pc, #44]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea0:	f7fb fc52 	bl	8002748 <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea6:	e008      	b.n	8006eba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea8:	f7fb fc4e 	bl	8002748 <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e03d      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eba:	4b03      	ldr	r3, [pc, #12]	; (8006ec8 <HAL_RCC_OscConfig+0x4cc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1f0      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x4ac>
 8006ec6:	e035      	b.n	8006f34 <HAL_RCC_OscConfig+0x538>
 8006ec8:	40023800 	.word	0x40023800
 8006ecc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <HAL_RCC_OscConfig+0x544>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d028      	beq.n	8006f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d121      	bne.n	8006f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d11a      	bne.n	8006f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f00:	4013      	ands	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d111      	bne.n	8006f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d107      	bne.n	8006f30 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d001      	beq.n	8006f34 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	40023800 	.word	0x40023800

08006f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e0d0      	b.n	80070fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f5c:	4b6a      	ldr	r3, [pc, #424]	; (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 030f 	and.w	r3, r3, #15
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d910      	bls.n	8006f8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6a:	4b67      	ldr	r3, [pc, #412]	; (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f023 020f 	bic.w	r2, r3, #15
 8006f72:	4965      	ldr	r1, [pc, #404]	; (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7a:	4b63      	ldr	r3, [pc, #396]	; (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d001      	beq.n	8006f8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e0b8      	b.n	80070fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d020      	beq.n	8006fda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0304 	and.w	r3, r3, #4
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fa4:	4b59      	ldr	r3, [pc, #356]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	4a58      	ldr	r2, [pc, #352]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 8006faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0308 	and.w	r3, r3, #8
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fbc:	4b53      	ldr	r3, [pc, #332]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	4a52      	ldr	r2, [pc, #328]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 8006fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fc8:	4b50      	ldr	r3, [pc, #320]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	494d      	ldr	r1, [pc, #308]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d040      	beq.n	8007068 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d107      	bne.n	8006ffe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fee:	4b47      	ldr	r3, [pc, #284]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d115      	bne.n	8007026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e07f      	b.n	80070fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b02      	cmp	r3, #2
 8007004:	d107      	bne.n	8007016 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007006:	4b41      	ldr	r3, [pc, #260]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d109      	bne.n	8007026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e073      	b.n	80070fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007016:	4b3d      	ldr	r3, [pc, #244]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d101      	bne.n	8007026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e06b      	b.n	80070fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007026:	4b39      	ldr	r3, [pc, #228]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f023 0203 	bic.w	r2, r3, #3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	4936      	ldr	r1, [pc, #216]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 8007034:	4313      	orrs	r3, r2
 8007036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007038:	f7fb fb86 	bl	8002748 <HAL_GetTick>
 800703c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703e:	e00a      	b.n	8007056 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007040:	f7fb fb82 	bl	8002748 <HAL_GetTick>
 8007044:	4602      	mov	r2, r0
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	f241 3288 	movw	r2, #5000	; 0x1388
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e053      	b.n	80070fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007056:	4b2d      	ldr	r3, [pc, #180]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	f003 020c 	and.w	r2, r3, #12
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	009b      	lsls	r3, r3, #2
 8007064:	429a      	cmp	r2, r3
 8007066:	d1eb      	bne.n	8007040 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007068:	4b27      	ldr	r3, [pc, #156]	; (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d210      	bcs.n	8007098 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007076:	4b24      	ldr	r3, [pc, #144]	; (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f023 020f 	bic.w	r2, r3, #15
 800707e:	4922      	ldr	r1, [pc, #136]	; (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	4313      	orrs	r3, r2
 8007084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007086:	4b20      	ldr	r3, [pc, #128]	; (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d001      	beq.n	8007098 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e032      	b.n	80070fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d008      	beq.n	80070b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070a4:	4b19      	ldr	r3, [pc, #100]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	4916      	ldr	r1, [pc, #88]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 0308 	and.w	r3, r3, #8
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d009      	beq.n	80070d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070c2:	4b12      	ldr	r3, [pc, #72]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	490e      	ldr	r1, [pc, #56]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070d6:	f000 f821 	bl	800711c <HAL_RCC_GetSysClockFreq>
 80070da:	4602      	mov	r2, r0
 80070dc:	4b0b      	ldr	r3, [pc, #44]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	091b      	lsrs	r3, r3, #4
 80070e2:	f003 030f 	and.w	r3, r3, #15
 80070e6:	490a      	ldr	r1, [pc, #40]	; (8007110 <HAL_RCC_ClockConfig+0x1cc>)
 80070e8:	5ccb      	ldrb	r3, [r1, r3]
 80070ea:	fa22 f303 	lsr.w	r3, r2, r3
 80070ee:	4a09      	ldr	r2, [pc, #36]	; (8007114 <HAL_RCC_ClockConfig+0x1d0>)
 80070f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070f2:	4b09      	ldr	r3, [pc, #36]	; (8007118 <HAL_RCC_ClockConfig+0x1d4>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7fb fae2 	bl	80026c0 <HAL_InitTick>

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	40023c00 	.word	0x40023c00
 800710c:	40023800 	.word	0x40023800
 8007110:	08019c40 	.word	0x08019c40
 8007114:	20000000 	.word	0x20000000
 8007118:	20000004 	.word	0x20000004

0800711c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800711c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007120:	b094      	sub	sp, #80	; 0x50
 8007122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	647b      	str	r3, [r7, #68]	; 0x44
 8007128:	2300      	movs	r3, #0
 800712a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800712c:	2300      	movs	r3, #0
 800712e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007130:	2300      	movs	r3, #0
 8007132:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007134:	4b79      	ldr	r3, [pc, #484]	; (800731c <HAL_RCC_GetSysClockFreq+0x200>)
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f003 030c 	and.w	r3, r3, #12
 800713c:	2b08      	cmp	r3, #8
 800713e:	d00d      	beq.n	800715c <HAL_RCC_GetSysClockFreq+0x40>
 8007140:	2b08      	cmp	r3, #8
 8007142:	f200 80e1 	bhi.w	8007308 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <HAL_RCC_GetSysClockFreq+0x34>
 800714a:	2b04      	cmp	r3, #4
 800714c:	d003      	beq.n	8007156 <HAL_RCC_GetSysClockFreq+0x3a>
 800714e:	e0db      	b.n	8007308 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007150:	4b73      	ldr	r3, [pc, #460]	; (8007320 <HAL_RCC_GetSysClockFreq+0x204>)
 8007152:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007154:	e0db      	b.n	800730e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007156:	4b73      	ldr	r3, [pc, #460]	; (8007324 <HAL_RCC_GetSysClockFreq+0x208>)
 8007158:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800715a:	e0d8      	b.n	800730e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800715c:	4b6f      	ldr	r3, [pc, #444]	; (800731c <HAL_RCC_GetSysClockFreq+0x200>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007164:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007166:	4b6d      	ldr	r3, [pc, #436]	; (800731c <HAL_RCC_GetSysClockFreq+0x200>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800716e:	2b00      	cmp	r3, #0
 8007170:	d063      	beq.n	800723a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007172:	4b6a      	ldr	r3, [pc, #424]	; (800731c <HAL_RCC_GetSysClockFreq+0x200>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	099b      	lsrs	r3, r3, #6
 8007178:	2200      	movs	r2, #0
 800717a:	63bb      	str	r3, [r7, #56]	; 0x38
 800717c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800717e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007184:	633b      	str	r3, [r7, #48]	; 0x30
 8007186:	2300      	movs	r3, #0
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
 800718a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800718e:	4622      	mov	r2, r4
 8007190:	462b      	mov	r3, r5
 8007192:	f04f 0000 	mov.w	r0, #0
 8007196:	f04f 0100 	mov.w	r1, #0
 800719a:	0159      	lsls	r1, r3, #5
 800719c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071a0:	0150      	lsls	r0, r2, #5
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	4621      	mov	r1, r4
 80071a8:	1a51      	subs	r1, r2, r1
 80071aa:	6139      	str	r1, [r7, #16]
 80071ac:	4629      	mov	r1, r5
 80071ae:	eb63 0301 	sbc.w	r3, r3, r1
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	f04f 0200 	mov.w	r2, #0
 80071b8:	f04f 0300 	mov.w	r3, #0
 80071bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071c0:	4659      	mov	r1, fp
 80071c2:	018b      	lsls	r3, r1, #6
 80071c4:	4651      	mov	r1, sl
 80071c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071ca:	4651      	mov	r1, sl
 80071cc:	018a      	lsls	r2, r1, #6
 80071ce:	4651      	mov	r1, sl
 80071d0:	ebb2 0801 	subs.w	r8, r2, r1
 80071d4:	4659      	mov	r1, fp
 80071d6:	eb63 0901 	sbc.w	r9, r3, r1
 80071da:	f04f 0200 	mov.w	r2, #0
 80071de:	f04f 0300 	mov.w	r3, #0
 80071e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071ee:	4690      	mov	r8, r2
 80071f0:	4699      	mov	r9, r3
 80071f2:	4623      	mov	r3, r4
 80071f4:	eb18 0303 	adds.w	r3, r8, r3
 80071f8:	60bb      	str	r3, [r7, #8]
 80071fa:	462b      	mov	r3, r5
 80071fc:	eb49 0303 	adc.w	r3, r9, r3
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	f04f 0200 	mov.w	r2, #0
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800720e:	4629      	mov	r1, r5
 8007210:	024b      	lsls	r3, r1, #9
 8007212:	4621      	mov	r1, r4
 8007214:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007218:	4621      	mov	r1, r4
 800721a:	024a      	lsls	r2, r1, #9
 800721c:	4610      	mov	r0, r2
 800721e:	4619      	mov	r1, r3
 8007220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007222:	2200      	movs	r2, #0
 8007224:	62bb      	str	r3, [r7, #40]	; 0x28
 8007226:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007228:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800722c:	f7f9 fc3e 	bl	8000aac <__aeabi_uldivmod>
 8007230:	4602      	mov	r2, r0
 8007232:	460b      	mov	r3, r1
 8007234:	4613      	mov	r3, r2
 8007236:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007238:	e058      	b.n	80072ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800723a:	4b38      	ldr	r3, [pc, #224]	; (800731c <HAL_RCC_GetSysClockFreq+0x200>)
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	099b      	lsrs	r3, r3, #6
 8007240:	2200      	movs	r2, #0
 8007242:	4618      	mov	r0, r3
 8007244:	4611      	mov	r1, r2
 8007246:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800724a:	623b      	str	r3, [r7, #32]
 800724c:	2300      	movs	r3, #0
 800724e:	627b      	str	r3, [r7, #36]	; 0x24
 8007250:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007254:	4642      	mov	r2, r8
 8007256:	464b      	mov	r3, r9
 8007258:	f04f 0000 	mov.w	r0, #0
 800725c:	f04f 0100 	mov.w	r1, #0
 8007260:	0159      	lsls	r1, r3, #5
 8007262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007266:	0150      	lsls	r0, r2, #5
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	4641      	mov	r1, r8
 800726e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007272:	4649      	mov	r1, r9
 8007274:	eb63 0b01 	sbc.w	fp, r3, r1
 8007278:	f04f 0200 	mov.w	r2, #0
 800727c:	f04f 0300 	mov.w	r3, #0
 8007280:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007284:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007288:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800728c:	ebb2 040a 	subs.w	r4, r2, sl
 8007290:	eb63 050b 	sbc.w	r5, r3, fp
 8007294:	f04f 0200 	mov.w	r2, #0
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	00eb      	lsls	r3, r5, #3
 800729e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072a2:	00e2      	lsls	r2, r4, #3
 80072a4:	4614      	mov	r4, r2
 80072a6:	461d      	mov	r5, r3
 80072a8:	4643      	mov	r3, r8
 80072aa:	18e3      	adds	r3, r4, r3
 80072ac:	603b      	str	r3, [r7, #0]
 80072ae:	464b      	mov	r3, r9
 80072b0:	eb45 0303 	adc.w	r3, r5, r3
 80072b4:	607b      	str	r3, [r7, #4]
 80072b6:	f04f 0200 	mov.w	r2, #0
 80072ba:	f04f 0300 	mov.w	r3, #0
 80072be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072c2:	4629      	mov	r1, r5
 80072c4:	028b      	lsls	r3, r1, #10
 80072c6:	4621      	mov	r1, r4
 80072c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072cc:	4621      	mov	r1, r4
 80072ce:	028a      	lsls	r2, r1, #10
 80072d0:	4610      	mov	r0, r2
 80072d2:	4619      	mov	r1, r3
 80072d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d6:	2200      	movs	r2, #0
 80072d8:	61bb      	str	r3, [r7, #24]
 80072da:	61fa      	str	r2, [r7, #28]
 80072dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072e0:	f7f9 fbe4 	bl	8000aac <__aeabi_uldivmod>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	4613      	mov	r3, r2
 80072ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80072ec:	4b0b      	ldr	r3, [pc, #44]	; (800731c <HAL_RCC_GetSysClockFreq+0x200>)
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	0c1b      	lsrs	r3, r3, #16
 80072f2:	f003 0303 	and.w	r3, r3, #3
 80072f6:	3301      	adds	r3, #1
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80072fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007300:	fbb2 f3f3 	udiv	r3, r2, r3
 8007304:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007306:	e002      	b.n	800730e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <HAL_RCC_GetSysClockFreq+0x204>)
 800730a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800730c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800730e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007310:	4618      	mov	r0, r3
 8007312:	3750      	adds	r7, #80	; 0x50
 8007314:	46bd      	mov	sp, r7
 8007316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800731a:	bf00      	nop
 800731c:	40023800 	.word	0x40023800
 8007320:	00f42400 	.word	0x00f42400
 8007324:	007a1200 	.word	0x007a1200

08007328 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007328:	b480      	push	{r7}
 800732a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800732c:	4b03      	ldr	r3, [pc, #12]	; (800733c <HAL_RCC_GetHCLKFreq+0x14>)
 800732e:	681b      	ldr	r3, [r3, #0]
}
 8007330:	4618      	mov	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
 800733a:	bf00      	nop
 800733c:	20000000 	.word	0x20000000

08007340 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007344:	f7ff fff0 	bl	8007328 <HAL_RCC_GetHCLKFreq>
 8007348:	4602      	mov	r2, r0
 800734a:	4b05      	ldr	r3, [pc, #20]	; (8007360 <HAL_RCC_GetPCLK1Freq+0x20>)
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	0a9b      	lsrs	r3, r3, #10
 8007350:	f003 0307 	and.w	r3, r3, #7
 8007354:	4903      	ldr	r1, [pc, #12]	; (8007364 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007356:	5ccb      	ldrb	r3, [r1, r3]
 8007358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800735c:	4618      	mov	r0, r3
 800735e:	bd80      	pop	{r7, pc}
 8007360:	40023800 	.word	0x40023800
 8007364:	08019c50 	.word	0x08019c50

08007368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800736c:	f7ff ffdc 	bl	8007328 <HAL_RCC_GetHCLKFreq>
 8007370:	4602      	mov	r2, r0
 8007372:	4b05      	ldr	r3, [pc, #20]	; (8007388 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	0b5b      	lsrs	r3, r3, #13
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	4903      	ldr	r1, [pc, #12]	; (800738c <HAL_RCC_GetPCLK2Freq+0x24>)
 800737e:	5ccb      	ldrb	r3, [r1, r3]
 8007380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007384:	4618      	mov	r0, r3
 8007386:	bd80      	pop	{r7, pc}
 8007388:	40023800 	.word	0x40023800
 800738c:	08019c50 	.word	0x08019c50

08007390 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0301 	and.w	r3, r3, #1
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d012      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073b8:	4b69      	ldr	r3, [pc, #420]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	4a68      	ldr	r2, [pc, #416]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073be:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80073c2:	6093      	str	r3, [r2, #8]
 80073c4:	4b66      	ldr	r3, [pc, #408]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073cc:	4964      	ldr	r1, [pc, #400]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ce:	4313      	orrs	r3, r2
 80073d0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80073da:	2301      	movs	r3, #1
 80073dc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d017      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073ea:	4b5d      	ldr	r3, [pc, #372]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f8:	4959      	ldr	r1, [pc, #356]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007408:	d101      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800740a:	2301      	movs	r3, #1
 800740c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007416:	2301      	movs	r3, #1
 8007418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d017      	beq.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007426:	4b4e      	ldr	r3, [pc, #312]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007428:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800742c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007434:	494a      	ldr	r1, [pc, #296]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007440:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007444:	d101      	bne.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007446:	2301      	movs	r3, #1
 8007448:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007452:	2301      	movs	r3, #1
 8007454:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007462:	2301      	movs	r3, #1
 8007464:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	f000 808b 	beq.w	800758a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007474:	4b3a      	ldr	r3, [pc, #232]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007478:	4a39      	ldr	r2, [pc, #228]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800747a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800747e:	6413      	str	r3, [r2, #64]	; 0x40
 8007480:	4b37      	ldr	r3, [pc, #220]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007488:	60bb      	str	r3, [r7, #8]
 800748a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800748c:	4b35      	ldr	r3, [pc, #212]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a34      	ldr	r2, [pc, #208]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007498:	f7fb f956 	bl	8002748 <HAL_GetTick>
 800749c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800749e:	e008      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074a0:	f7fb f952 	bl	8002748 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b64      	cmp	r3, #100	; 0x64
 80074ac:	d901      	bls.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e357      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80074b2:	4b2c      	ldr	r3, [pc, #176]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074be:	4b28      	ldr	r3, [pc, #160]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d035      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d02e      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074dc:	4b20      	ldr	r3, [pc, #128]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074e6:	4b1e      	ldr	r3, [pc, #120]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ea:	4a1d      	ldr	r2, [pc, #116]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074f2:	4b1b      	ldr	r3, [pc, #108]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f6:	4a1a      	ldr	r2, [pc, #104]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80074fe:	4a18      	ldr	r2, [pc, #96]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007504:	4b16      	ldr	r3, [pc, #88]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b01      	cmp	r3, #1
 800750e:	d114      	bne.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007510:	f7fb f91a 	bl	8002748 <HAL_GetTick>
 8007514:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007516:	e00a      	b.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007518:	f7fb f916 	bl	8002748 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	f241 3288 	movw	r2, #5000	; 0x1388
 8007526:	4293      	cmp	r3, r2
 8007528:	d901      	bls.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800752a:	2303      	movs	r3, #3
 800752c:	e319      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800752e:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007532:	f003 0302 	and.w	r3, r3, #2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d0ee      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007546:	d111      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007548:	4b05      	ldr	r3, [pc, #20]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007554:	4b04      	ldr	r3, [pc, #16]	; (8007568 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007556:	400b      	ands	r3, r1
 8007558:	4901      	ldr	r1, [pc, #4]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800755a:	4313      	orrs	r3, r2
 800755c:	608b      	str	r3, [r1, #8]
 800755e:	e00b      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007560:	40023800 	.word	0x40023800
 8007564:	40007000 	.word	0x40007000
 8007568:	0ffffcff 	.word	0x0ffffcff
 800756c:	4baa      	ldr	r3, [pc, #680]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	4aa9      	ldr	r2, [pc, #676]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007572:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007576:	6093      	str	r3, [r2, #8]
 8007578:	4ba7      	ldr	r3, [pc, #668]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800757a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007584:	49a4      	ldr	r1, [pc, #656]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007586:	4313      	orrs	r3, r2
 8007588:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0310 	and.w	r3, r3, #16
 8007592:	2b00      	cmp	r3, #0
 8007594:	d010      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007596:	4ba0      	ldr	r3, [pc, #640]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800759c:	4a9e      	ldr	r2, [pc, #632]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800759e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80075a6:	4b9c      	ldr	r3, [pc, #624]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	4999      	ldr	r1, [pc, #612]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00a      	beq.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075c4:	4b94      	ldr	r3, [pc, #592]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d2:	4991      	ldr	r1, [pc, #580]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00a      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075e6:	4b8c      	ldr	r3, [pc, #560]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075f4:	4988      	ldr	r1, [pc, #544]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007608:	4b83      	ldr	r3, [pc, #524]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800760a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007616:	4980      	ldr	r1, [pc, #512]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007618:	4313      	orrs	r3, r2
 800761a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800762a:	4b7b      	ldr	r3, [pc, #492]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800762c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007630:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007638:	4977      	ldr	r1, [pc, #476]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800763a:	4313      	orrs	r3, r2
 800763c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00a      	beq.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800764c:	4b72      	ldr	r3, [pc, #456]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007652:	f023 0203 	bic.w	r2, r3, #3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800765a:	496f      	ldr	r1, [pc, #444]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800765c:	4313      	orrs	r3, r2
 800765e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800766e:	4b6a      	ldr	r3, [pc, #424]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007674:	f023 020c 	bic.w	r2, r3, #12
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800767c:	4966      	ldr	r1, [pc, #408]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800767e:	4313      	orrs	r3, r2
 8007680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00a      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007690:	4b61      	ldr	r3, [pc, #388]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007696:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769e:	495e      	ldr	r1, [pc, #376]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076a0:	4313      	orrs	r3, r2
 80076a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076b2:	4b59      	ldr	r3, [pc, #356]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c0:	4955      	ldr	r1, [pc, #340]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00a      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076d4:	4b50      	ldr	r3, [pc, #320]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e2:	494d      	ldr	r1, [pc, #308]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80076f6:	4b48      	ldr	r3, [pc, #288]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007704:	4944      	ldr	r1, [pc, #272]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007706:	4313      	orrs	r3, r2
 8007708:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007718:	4b3f      	ldr	r3, [pc, #252]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800771a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007726:	493c      	ldr	r1, [pc, #240]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007728:	4313      	orrs	r3, r2
 800772a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00a      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800773a:	4b37      	ldr	r3, [pc, #220]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800773c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007740:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007748:	4933      	ldr	r1, [pc, #204]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800774a:	4313      	orrs	r3, r2
 800774c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00a      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800775c:	4b2e      	ldr	r3, [pc, #184]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007762:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800776a:	492b      	ldr	r1, [pc, #172]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800776c:	4313      	orrs	r3, r2
 800776e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d011      	beq.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800777e:	4b26      	ldr	r3, [pc, #152]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007784:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800778c:	4922      	ldr	r1, [pc, #136]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800778e:	4313      	orrs	r3, r2
 8007790:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800779c:	d101      	bne.n	80077a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800779e:	2301      	movs	r3, #1
 80077a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0308 	and.w	r3, r3, #8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80077ae:	2301      	movs	r3, #1
 80077b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077be:	4b16      	ldr	r3, [pc, #88]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077cc:	4912      	ldr	r1, [pc, #72]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00b      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80077e0:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077f0:	4909      	ldr	r1, [pc, #36]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077f2:	4313      	orrs	r3, r2
 80077f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d006      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007806:	2b00      	cmp	r3, #0
 8007808:	f000 80d9 	beq.w	80079be <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800780c:	4b02      	ldr	r3, [pc, #8]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a01      	ldr	r2, [pc, #4]	; (8007818 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007812:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007816:	e001      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007818:	40023800 	.word	0x40023800
 800781c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800781e:	f7fa ff93 	bl	8002748 <HAL_GetTick>
 8007822:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007824:	e008      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007826:	f7fa ff8f 	bl	8002748 <HAL_GetTick>
 800782a:	4602      	mov	r2, r0
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	2b64      	cmp	r3, #100	; 0x64
 8007832:	d901      	bls.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007834:	2303      	movs	r3, #3
 8007836:	e194      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007838:	4b6c      	ldr	r3, [pc, #432]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1f0      	bne.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d021      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007854:	2b00      	cmp	r3, #0
 8007856:	d11d      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007858:	4b64      	ldr	r3, [pc, #400]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800785a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800785e:	0c1b      	lsrs	r3, r3, #16
 8007860:	f003 0303 	and.w	r3, r3, #3
 8007864:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007866:	4b61      	ldr	r3, [pc, #388]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800786c:	0e1b      	lsrs	r3, r3, #24
 800786e:	f003 030f 	and.w	r3, r3, #15
 8007872:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	019a      	lsls	r2, r3, #6
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	041b      	lsls	r3, r3, #16
 800787e:	431a      	orrs	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	061b      	lsls	r3, r3, #24
 8007884:	431a      	orrs	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	071b      	lsls	r3, r3, #28
 800788c:	4957      	ldr	r1, [pc, #348]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800788e:	4313      	orrs	r3, r2
 8007890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d004      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a8:	d00a      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d02e      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078be:	d129      	bne.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80078c0:	4b4a      	ldr	r3, [pc, #296]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c6:	0c1b      	lsrs	r3, r3, #16
 80078c8:	f003 0303 	and.w	r3, r3, #3
 80078cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078ce:	4b47      	ldr	r3, [pc, #284]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d4:	0f1b      	lsrs	r3, r3, #28
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	019a      	lsls	r2, r3, #6
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	041b      	lsls	r3, r3, #16
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	061b      	lsls	r3, r3, #24
 80078ee:	431a      	orrs	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	071b      	lsls	r3, r3, #28
 80078f4:	493d      	ldr	r1, [pc, #244]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078f6:	4313      	orrs	r3, r2
 80078f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80078fc:	4b3b      	ldr	r3, [pc, #236]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007902:	f023 021f 	bic.w	r2, r3, #31
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790a:	3b01      	subs	r3, #1
 800790c:	4937      	ldr	r1, [pc, #220]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800790e:	4313      	orrs	r3, r2
 8007910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d01d      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007920:	4b32      	ldr	r3, [pc, #200]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007926:	0e1b      	lsrs	r3, r3, #24
 8007928:	f003 030f 	and.w	r3, r3, #15
 800792c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800792e:	4b2f      	ldr	r3, [pc, #188]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007934:	0f1b      	lsrs	r3, r3, #28
 8007936:	f003 0307 	and.w	r3, r3, #7
 800793a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	019a      	lsls	r2, r3, #6
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	041b      	lsls	r3, r3, #16
 8007948:	431a      	orrs	r2, r3
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	061b      	lsls	r3, r3, #24
 800794e:	431a      	orrs	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	071b      	lsls	r3, r3, #28
 8007954:	4925      	ldr	r1, [pc, #148]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007956:	4313      	orrs	r3, r2
 8007958:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007964:	2b00      	cmp	r3, #0
 8007966:	d011      	beq.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	019a      	lsls	r2, r3, #6
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	041b      	lsls	r3, r3, #16
 8007974:	431a      	orrs	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	061b      	lsls	r3, r3, #24
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	071b      	lsls	r3, r3, #28
 8007984:	4919      	ldr	r1, [pc, #100]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007986:	4313      	orrs	r3, r2
 8007988:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800798c:	4b17      	ldr	r3, [pc, #92]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a16      	ldr	r2, [pc, #88]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007992:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007996:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007998:	f7fa fed6 	bl	8002748 <HAL_GetTick>
 800799c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800799e:	e008      	b.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80079a0:	f7fa fed2 	bl	8002748 <HAL_GetTick>
 80079a4:	4602      	mov	r2, r0
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	2b64      	cmp	r3, #100	; 0x64
 80079ac:	d901      	bls.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079ae:	2303      	movs	r3, #3
 80079b0:	e0d7      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079b2:	4b0e      	ldr	r3, [pc, #56]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d0f0      	beq.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	f040 80cd 	bne.w	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80079c6:	4b09      	ldr	r3, [pc, #36]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a08      	ldr	r2, [pc, #32]	; (80079ec <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d2:	f7fa feb9 	bl	8002748 <HAL_GetTick>
 80079d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079d8:	e00a      	b.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80079da:	f7fa feb5 	bl	8002748 <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	2b64      	cmp	r3, #100	; 0x64
 80079e6:	d903      	bls.n	80079f0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e0ba      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80079ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079f0:	4b5e      	ldr	r3, [pc, #376]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079fc:	d0ed      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d003      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d009      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d02e      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d12a      	bne.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a26:	4b51      	ldr	r3, [pc, #324]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2c:	0c1b      	lsrs	r3, r3, #16
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a34:	4b4d      	ldr	r3, [pc, #308]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3a:	0f1b      	lsrs	r3, r3, #28
 8007a3c:	f003 0307 	and.w	r3, r3, #7
 8007a40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	019a      	lsls	r2, r3, #6
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	041b      	lsls	r3, r3, #16
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	061b      	lsls	r3, r3, #24
 8007a54:	431a      	orrs	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	071b      	lsls	r3, r3, #28
 8007a5a:	4944      	ldr	r1, [pc, #272]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a62:	4b42      	ldr	r3, [pc, #264]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	3b01      	subs	r3, #1
 8007a72:	021b      	lsls	r3, r3, #8
 8007a74:	493d      	ldr	r1, [pc, #244]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d022      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a90:	d11d      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a92:	4b36      	ldr	r3, [pc, #216]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a98:	0e1b      	lsrs	r3, r3, #24
 8007a9a:	f003 030f 	and.w	r3, r3, #15
 8007a9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007aa0:	4b32      	ldr	r3, [pc, #200]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa6:	0f1b      	lsrs	r3, r3, #28
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	019a      	lsls	r2, r3, #6
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	041b      	lsls	r3, r3, #16
 8007aba:	431a      	orrs	r2, r3
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	061b      	lsls	r3, r3, #24
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	071b      	lsls	r3, r3, #28
 8007ac6:	4929      	ldr	r1, [pc, #164]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d028      	beq.n	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ada:	4b24      	ldr	r3, [pc, #144]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ae0:	0e1b      	lsrs	r3, r3, #24
 8007ae2:	f003 030f 	and.w	r3, r3, #15
 8007ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ae8:	4b20      	ldr	r3, [pc, #128]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aee:	0c1b      	lsrs	r3, r3, #16
 8007af0:	f003 0303 	and.w	r3, r3, #3
 8007af4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	695b      	ldr	r3, [r3, #20]
 8007afa:	019a      	lsls	r2, r3, #6
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	431a      	orrs	r2, r3
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	061b      	lsls	r3, r3, #24
 8007b06:	431a      	orrs	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	071b      	lsls	r3, r3, #28
 8007b0e:	4917      	ldr	r1, [pc, #92]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007b16:	4b15      	ldr	r3, [pc, #84]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	4911      	ldr	r1, [pc, #68]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b26:	4313      	orrs	r3, r2
 8007b28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007b2c:	4b0f      	ldr	r3, [pc, #60]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a0e      	ldr	r2, [pc, #56]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b38:	f7fa fe06 	bl	8002748 <HAL_GetTick>
 8007b3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b3e:	e008      	b.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b40:	f7fa fe02 	bl	8002748 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b64      	cmp	r3, #100	; 0x64
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e007      	b.n	8007b62 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b52:	4b06      	ldr	r3, [pc, #24]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b5e:	d1ef      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3720      	adds	r7, #32
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	40023800 	.word	0x40023800

08007b70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e09d      	b.n	8007cbe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d108      	bne.n	8007b9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b92:	d009      	beq.n	8007ba8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	61da      	str	r2, [r3, #28]
 8007b9a:	e005      	b.n	8007ba8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d106      	bne.n	8007bc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7f9 fe6a 	bl	800189c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2202      	movs	r2, #2
 8007bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bde:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007be8:	d902      	bls.n	8007bf0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	e002      	b.n	8007bf6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bf4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007bfe:	d007      	beq.n	8007c10 <HAL_SPI_Init+0xa0>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c08:	d002      	beq.n	8007c10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c20:	431a      	orrs	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c52:	ea42 0103 	orr.w	r1, r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	0c1b      	lsrs	r3, r3, #16
 8007c6c:	f003 0204 	and.w	r2, r3, #4
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	f003 0310 	and.w	r3, r3, #16
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7e:	f003 0308 	and.w	r3, r3, #8
 8007c82:	431a      	orrs	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c8c:	ea42 0103 	orr.w	r1, r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	430a      	orrs	r2, r1
 8007c9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
 8007cd4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e16c      	b.n	8007fc2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cf6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007cfe:	7dbb      	ldrb	r3, [r7, #22]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d00d      	beq.n	8007d20 <HAL_SPI_TransmitReceive_DMA+0x58>
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d0a:	d106      	bne.n	8007d1a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d102      	bne.n	8007d1a <HAL_SPI_TransmitReceive_DMA+0x52>
 8007d14:	7dbb      	ldrb	r3, [r7, #22]
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d002      	beq.n	8007d20 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d1e:	e14b      	b.n	8007fb8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d005      	beq.n	8007d32 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007d2c:	887b      	ldrh	r3, [r7, #2]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d102      	bne.n	8007d38 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d36:	e13f      	b.n	8007fb8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b04      	cmp	r3, #4
 8007d42:	d003      	beq.n	8007d4c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2205      	movs	r2, #5
 8007d48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	887a      	ldrh	r2, [r7, #2]
 8007d5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	887a      	ldrh	r2, [r7, #2]
 8007d62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	887a      	ldrh	r2, [r7, #2]
 8007d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	887a      	ldrh	r2, [r7, #2]
 8007d76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007d94:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d9e:	d908      	bls.n	8007db2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007dae:	605a      	str	r2, [r3, #4]
 8007db0:	e06f      	b.n	8007e92 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dc0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dcc:	d126      	bne.n	8007e1c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d10f      	bne.n	8007dfa <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	685a      	ldr	r2, [r3, #4]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007de8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	085b      	lsrs	r3, r3, #1
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007df8:	e010      	b.n	8007e1c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e08:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	085b      	lsrs	r3, r3, #1
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	3301      	adds	r3, #1
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e26:	d134      	bne.n	8007e92 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	685a      	ldr	r2, [r3, #4]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e36:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f003 0301 	and.w	r3, r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d111      	bne.n	8007e6c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e56:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	085b      	lsrs	r3, r3, #1
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007e6a:	e012      	b.n	8007e92 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e7a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	085b      	lsrs	r3, r3, #1
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	3301      	adds	r3, #1
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d108      	bne.n	8007eb0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea2:	4a4a      	ldr	r2, [pc, #296]	; (8007fcc <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007ea4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eaa:	4a49      	ldr	r2, [pc, #292]	; (8007fd0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8007eac:	63da      	str	r2, [r3, #60]	; 0x3c
 8007eae:	e007      	b.n	8007ec0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb4:	4a47      	ldr	r2, [pc, #284]	; (8007fd4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8007eb6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebc:	4a46      	ldr	r2, [pc, #280]	; (8007fd8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8007ebe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec4:	4a45      	ldr	r2, [pc, #276]	; (8007fdc <HAL_SPI_TransmitReceive_DMA+0x314>)
 8007ec6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ecc:	2200      	movs	r2, #0
 8007ece:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	330c      	adds	r3, #12
 8007eda:	4619      	mov	r1, r3
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ee8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007eea:	f7fa fe1d 	bl	8002b28 <HAL_DMA_Start_IT>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00c      	beq.n	8007f0e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef8:	f043 0210 	orr.w	r2, r3, #16
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007f0c:	e054      	b.n	8007fb8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	685a      	ldr	r2, [r3, #4]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f042 0201 	orr.w	r2, r2, #1
 8007f1c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f22:	2200      	movs	r2, #0
 8007f24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f32:	2200      	movs	r2, #0
 8007f34:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f46:	4619      	mov	r1, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	330c      	adds	r3, #12
 8007f4e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f54:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007f56:	f7fa fde7 	bl	8002b28 <HAL_DMA_Start_IT>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00c      	beq.n	8007f7a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f64:	f043 0210 	orr.w	r2, r3, #16
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007f78:	e01e      	b.n	8007fb8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f84:	2b40      	cmp	r3, #64	; 0x40
 8007f86:	d007      	beq.n	8007f98 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f96:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0220 	orr.w	r2, r2, #32
 8007fa6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0202 	orr.w	r2, r2, #2
 8007fb6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	08008381 	.word	0x08008381
 8007fd0:	08008245 	.word	0x08008245
 8007fd4:	0800839d 	.word	0x0800839d
 8007fd8:	080082ef 	.word	0x080082ef
 8007fdc:	080083b9 	.word	0x080083b9

08007fe0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b088      	sub	sp, #32
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	099b      	lsrs	r3, r3, #6
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10f      	bne.n	8008024 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	099b      	lsrs	r3, r3, #6
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d004      	beq.n	8008024 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	4798      	blx	r3
    return;
 8008022:	e0d7      	b.n	80081d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	085b      	lsrs	r3, r3, #1
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00a      	beq.n	8008046 <HAL_SPI_IRQHandler+0x66>
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	09db      	lsrs	r3, r3, #7
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	4798      	blx	r3
    return;
 8008044:	e0c6      	b.n	80081d4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	095b      	lsrs	r3, r3, #5
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10c      	bne.n	800806c <HAL_SPI_IRQHandler+0x8c>
 8008052:	69bb      	ldr	r3, [r7, #24]
 8008054:	099b      	lsrs	r3, r3, #6
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d106      	bne.n	800806c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	0a1b      	lsrs	r3, r3, #8
 8008062:	f003 0301 	and.w	r3, r3, #1
 8008066:	2b00      	cmp	r3, #0
 8008068:	f000 80b4 	beq.w	80081d4 <HAL_SPI_IRQHandler+0x1f4>
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	095b      	lsrs	r3, r3, #5
 8008070:	f003 0301 	and.w	r3, r3, #1
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 80ad 	beq.w	80081d4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	099b      	lsrs	r3, r3, #6
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d023      	beq.n	80080ce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800808c:	b2db      	uxtb	r3, r3
 800808e:	2b03      	cmp	r3, #3
 8008090:	d011      	beq.n	80080b6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008096:	f043 0204 	orr.w	r2, r3, #4
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800809e:	2300      	movs	r3, #0
 80080a0:	617b      	str	r3, [r7, #20]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	617b      	str	r3, [r7, #20]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	e00b      	b.n	80080ce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080b6:	2300      	movs	r3, #0
 80080b8:	613b      	str	r3, [r7, #16]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	613b      	str	r3, [r7, #16]
 80080ca:	693b      	ldr	r3, [r7, #16]
        return;
 80080cc:	e082      	b.n	80081d4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	095b      	lsrs	r3, r3, #5
 80080d2:	f003 0301 	and.w	r3, r3, #1
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d014      	beq.n	8008104 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080de:	f043 0201 	orr.w	r2, r3, #1
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	60fb      	str	r3, [r7, #12]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	0a1b      	lsrs	r3, r3, #8
 8008108:	f003 0301 	and.w	r3, r3, #1
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00c      	beq.n	800812a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008114:	f043 0208 	orr.w	r2, r3, #8
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800811c:	2300      	movs	r3, #0
 800811e:	60bb      	str	r3, [r7, #8]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	60bb      	str	r3, [r7, #8]
 8008128:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800812e:	2b00      	cmp	r3, #0
 8008130:	d04f      	beq.n	80081d2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008140:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	f003 0302 	and.w	r3, r3, #2
 8008150:	2b00      	cmp	r3, #0
 8008152:	d104      	bne.n	800815e <HAL_SPI_IRQHandler+0x17e>
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d034      	beq.n	80081c8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0203 	bic.w	r2, r2, #3
 800816c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008172:	2b00      	cmp	r3, #0
 8008174:	d011      	beq.n	800819a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817a:	4a18      	ldr	r2, [pc, #96]	; (80081dc <HAL_SPI_IRQHandler+0x1fc>)
 800817c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008182:	4618      	mov	r0, r3
 8008184:	f7fa fda0 	bl	8002cc8 <HAL_DMA_Abort_IT>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d005      	beq.n	800819a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008192:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d016      	beq.n	80081d0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a6:	4a0d      	ldr	r2, [pc, #52]	; (80081dc <HAL_SPI_IRQHandler+0x1fc>)
 80081a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fa fd8a 	bl	8002cc8 <HAL_DMA_Abort_IT>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d00a      	beq.n	80081d0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80081c6:	e003      	b.n	80081d0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f831 	bl	8008230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80081ce:	e000      	b.n	80081d2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80081d0:	bf00      	nop
    return;
 80081d2:	bf00      	nop
  }
}
 80081d4:	3720      	adds	r7, #32
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	080083f9 	.word	0x080083f9

080081e0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008252:	f7fa fa79 	bl	8002748 <HAL_GetTick>
 8008256:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008266:	d03c      	beq.n	80082e2 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0220 	bic.w	r2, r2, #32
 8008276:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10d      	bne.n	800829c <SPI_DMAReceiveCplt+0x58>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008288:	d108      	bne.n	800829c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0203 	bic.w	r2, r2, #3
 8008298:	605a      	str	r2, [r3, #4]
 800829a:	e007      	b.n	80082ac <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0201 	bic.w	r2, r2, #1
 80082aa:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80082ac:	68ba      	ldr	r2, [r7, #8]
 80082ae:	2164      	movs	r1, #100	; 0x64
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 f9d5 	bl	8008660 <SPI_EndRxTransaction>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2220      	movs	r2, #32
 80082c0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7ff ffa8 	bl	8008230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80082e0:	e002      	b.n	80082e8 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f7ff ff7c 	bl	80081e0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fa:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082fc:	f7fa fa24 	bl	8002748 <HAL_GetTick>
 8008300:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008310:	d030      	beq.n	8008374 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	685a      	ldr	r2, [r3, #4]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f022 0220 	bic.w	r2, r2, #32
 8008320:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	2164      	movs	r1, #100	; 0x64
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fa16 	bl	8008758 <SPI_EndRxTxTransaction>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008336:	f043 0220 	orr.w	r2, r3, #32
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685a      	ldr	r2, [r3, #4]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0203 	bic.w	r2, r2, #3
 800834c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2200      	movs	r2, #0
 8008352:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008368:	2b00      	cmp	r3, #0
 800836a:	d003      	beq.n	8008374 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f7ff ff5f 	bl	8008230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008372:	e002      	b.n	800837a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff ff3d 	bl	80081f4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f7ff ff3a 	bl	8008208 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008394:	bf00      	nop
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff ff36 	bl	800821c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083b0:	bf00      	nop
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	685a      	ldr	r2, [r3, #4]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f022 0203 	bic.w	r2, r2, #3
 80083d4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083da:	f043 0210 	orr.w	r2, r3, #16
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff ff20 	bl	8008230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f7ff ff0b 	bl	8008230 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	4613      	mov	r3, r2
 8008432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008434:	f7fa f988 	bl	8002748 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	1a9b      	subs	r3, r3, r2
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	4413      	add	r3, r2
 8008442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008444:	f7fa f980 	bl	8002748 <HAL_GetTick>
 8008448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800844a:	4b39      	ldr	r3, [pc, #228]	; (8008530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	015b      	lsls	r3, r3, #5
 8008450:	0d1b      	lsrs	r3, r3, #20
 8008452:	69fa      	ldr	r2, [r7, #28]
 8008454:	fb02 f303 	mul.w	r3, r2, r3
 8008458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800845a:	e054      	b.n	8008506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008462:	d050      	beq.n	8008506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008464:	f7fa f970 	bl	8002748 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	429a      	cmp	r2, r3
 8008472:	d902      	bls.n	800847a <SPI_WaitFlagStateUntilTimeout+0x56>
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d13d      	bne.n	80084f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008492:	d111      	bne.n	80084b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800849c:	d004      	beq.n	80084a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a6:	d107      	bne.n	80084b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084c0:	d10f      	bne.n	80084e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084f2:	2303      	movs	r3, #3
 80084f4:	e017      	b.n	8008526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	3b01      	subs	r3, #1
 8008504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	4013      	ands	r3, r2
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	429a      	cmp	r2, r3
 8008514:	bf0c      	ite	eq
 8008516:	2301      	moveq	r3, #1
 8008518:	2300      	movne	r3, #0
 800851a:	b2db      	uxtb	r3, r3
 800851c:	461a      	mov	r2, r3
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	429a      	cmp	r2, r3
 8008522:	d19b      	bne.n	800845c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3720      	adds	r7, #32
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	20000000 	.word	0x20000000

08008534 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08a      	sub	sp, #40	; 0x28
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
 8008540:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008542:	2300      	movs	r3, #0
 8008544:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008546:	f7fa f8ff 	bl	8002748 <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	1a9b      	subs	r3, r3, r2
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	4413      	add	r3, r2
 8008554:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008556:	f7fa f8f7 	bl	8002748 <HAL_GetTick>
 800855a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	330c      	adds	r3, #12
 8008562:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008564:	4b3d      	ldr	r3, [pc, #244]	; (800865c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	4613      	mov	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	4413      	add	r3, r2
 800856e:	00da      	lsls	r2, r3, #3
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	0d1b      	lsrs	r3, r3, #20
 8008574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008576:	fb02 f303 	mul.w	r3, r2, r3
 800857a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800857c:	e060      	b.n	8008640 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008584:	d107      	bne.n	8008596 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d104      	bne.n	8008596 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	b2db      	uxtb	r3, r3
 8008592:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008594:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800859c:	d050      	beq.n	8008640 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800859e:	f7fa f8d3 	bl	8002748 <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d902      	bls.n	80085b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80085ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d13d      	bne.n	8008630 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	685a      	ldr	r2, [r3, #4]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085cc:	d111      	bne.n	80085f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d6:	d004      	beq.n	80085e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085e0:	d107      	bne.n	80085f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085fa:	d10f      	bne.n	800861c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800861a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2201      	movs	r2, #1
 8008620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800862c:	2303      	movs	r3, #3
 800862e:	e010      	b.n	8008652 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008630:	69bb      	ldr	r3, [r7, #24]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008636:	2300      	movs	r3, #0
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800863a:	69bb      	ldr	r3, [r7, #24]
 800863c:	3b01      	subs	r3, #1
 800863e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	4013      	ands	r3, r2
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	429a      	cmp	r2, r3
 800864e:	d196      	bne.n	800857e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3728      	adds	r7, #40	; 0x28
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20000000 	.word	0x20000000

08008660 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b088      	sub	sp, #32
 8008664:	af02      	add	r7, sp, #8
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008674:	d111      	bne.n	800869a <SPI_EndRxTransaction+0x3a>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800867e:	d004      	beq.n	800868a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008688:	d107      	bne.n	800869a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008698:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086a2:	d112      	bne.n	80086ca <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	2200      	movs	r2, #0
 80086ac:	2180      	movs	r1, #128	; 0x80
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f7ff feb8 	bl	8008424 <SPI_WaitFlagStateUntilTimeout>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d021      	beq.n	80086fe <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086be:	f043 0220 	orr.w	r2, r3, #32
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e03d      	b.n	8008746 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80086ca:	4b21      	ldr	r3, [pc, #132]	; (8008750 <SPI_EndRxTransaction+0xf0>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a21      	ldr	r2, [pc, #132]	; (8008754 <SPI_EndRxTransaction+0xf4>)
 80086d0:	fba2 2303 	umull	r2, r3, r2, r3
 80086d4:	0d5b      	lsrs	r3, r3, #21
 80086d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086da:	fb02 f303 	mul.w	r3, r2, r3
 80086de:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00a      	beq.n	80086fc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f6:	2b80      	cmp	r3, #128	; 0x80
 80086f8:	d0f2      	beq.n	80086e0 <SPI_EndRxTransaction+0x80>
 80086fa:	e000      	b.n	80086fe <SPI_EndRxTransaction+0x9e>
        break;
 80086fc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008706:	d11d      	bne.n	8008744 <SPI_EndRxTransaction+0xe4>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008710:	d004      	beq.n	800871c <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800871a:	d113      	bne.n	8008744 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	2200      	movs	r2, #0
 8008724:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f7ff ff03 	bl	8008534 <SPI_WaitFifoStateUntilTimeout>
 800872e:	4603      	mov	r3, r0
 8008730:	2b00      	cmp	r3, #0
 8008732:	d007      	beq.n	8008744 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008738:	f043 0220 	orr.w	r2, r3, #32
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e000      	b.n	8008746 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8008744:	2300      	movs	r3, #0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3718      	adds	r7, #24
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20000000 	.word	0x20000000
 8008754:	165e9f81 	.word	0x165e9f81

08008758 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b088      	sub	sp, #32
 800875c:	af02      	add	r7, sp, #8
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	2200      	movs	r2, #0
 800876c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f7ff fedf 	bl	8008534 <SPI_WaitFifoStateUntilTimeout>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d007      	beq.n	800878c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008780:	f043 0220 	orr.w	r2, r3, #32
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e046      	b.n	800881a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800878c:	4b25      	ldr	r3, [pc, #148]	; (8008824 <SPI_EndRxTxTransaction+0xcc>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a25      	ldr	r2, [pc, #148]	; (8008828 <SPI_EndRxTxTransaction+0xd0>)
 8008792:	fba2 2303 	umull	r2, r3, r2, r3
 8008796:	0d5b      	lsrs	r3, r3, #21
 8008798:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800879c:	fb02 f303 	mul.w	r3, r2, r3
 80087a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087aa:	d112      	bne.n	80087d2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	2200      	movs	r2, #0
 80087b4:	2180      	movs	r1, #128	; 0x80
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f7ff fe34 	bl	8008424 <SPI_WaitFlagStateUntilTimeout>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d016      	beq.n	80087f0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c6:	f043 0220 	orr.w	r2, r3, #32
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e023      	b.n	800881a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00a      	beq.n	80087ee <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	3b01      	subs	r3, #1
 80087dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e8:	2b80      	cmp	r3, #128	; 0x80
 80087ea:	d0f2      	beq.n	80087d2 <SPI_EndRxTxTransaction+0x7a>
 80087ec:	e000      	b.n	80087f0 <SPI_EndRxTxTransaction+0x98>
        break;
 80087ee:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	9300      	str	r3, [sp, #0]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff fe99 	bl	8008534 <SPI_WaitFifoStateUntilTimeout>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d007      	beq.n	8008818 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800880c:	f043 0220 	orr.w	r2, r3, #32
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e000      	b.n	800881a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3718      	adds	r7, #24
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	20000000 	.word	0x20000000
 8008828:	165e9f81 	.word	0x165e9f81

0800882c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d101      	bne.n	800883e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e049      	b.n	80088d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008844:	b2db      	uxtb	r3, r3
 8008846:	2b00      	cmp	r3, #0
 8008848:	d106      	bne.n	8008858 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7f9 f994 	bl	8001b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3304      	adds	r3, #4
 8008868:	4619      	mov	r1, r3
 800886a:	4610      	mov	r0, r2
 800886c:	f000 fa24 	bl	8008cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d001      	beq.n	80088f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e054      	b.n	800899e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68da      	ldr	r2, [r3, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f042 0201 	orr.w	r2, r2, #1
 800890a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a26      	ldr	r2, [pc, #152]	; (80089ac <HAL_TIM_Base_Start_IT+0xd0>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d022      	beq.n	800895c <HAL_TIM_Base_Start_IT+0x80>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800891e:	d01d      	beq.n	800895c <HAL_TIM_Base_Start_IT+0x80>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a22      	ldr	r2, [pc, #136]	; (80089b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d018      	beq.n	800895c <HAL_TIM_Base_Start_IT+0x80>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a21      	ldr	r2, [pc, #132]	; (80089b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d013      	beq.n	800895c <HAL_TIM_Base_Start_IT+0x80>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a1f      	ldr	r2, [pc, #124]	; (80089b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d00e      	beq.n	800895c <HAL_TIM_Base_Start_IT+0x80>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1e      	ldr	r2, [pc, #120]	; (80089bc <HAL_TIM_Base_Start_IT+0xe0>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d009      	beq.n	800895c <HAL_TIM_Base_Start_IT+0x80>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a1c      	ldr	r2, [pc, #112]	; (80089c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d004      	beq.n	800895c <HAL_TIM_Base_Start_IT+0x80>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a1b      	ldr	r2, [pc, #108]	; (80089c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d115      	bne.n	8008988 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689a      	ldr	r2, [r3, #8]
 8008962:	4b19      	ldr	r3, [pc, #100]	; (80089c8 <HAL_TIM_Base_Start_IT+0xec>)
 8008964:	4013      	ands	r3, r2
 8008966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2b06      	cmp	r3, #6
 800896c:	d015      	beq.n	800899a <HAL_TIM_Base_Start_IT+0xbe>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008974:	d011      	beq.n	800899a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f042 0201 	orr.w	r2, r2, #1
 8008984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008986:	e008      	b.n	800899a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f042 0201 	orr.w	r2, r2, #1
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	e000      	b.n	800899c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800899a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	40010000 	.word	0x40010000
 80089b0:	40000400 	.word	0x40000400
 80089b4:	40000800 	.word	0x40000800
 80089b8:	40000c00 	.word	0x40000c00
 80089bc:	40010400 	.word	0x40010400
 80089c0:	40014000 	.word	0x40014000
 80089c4:	40001800 	.word	0x40001800
 80089c8:	00010007 	.word	0x00010007

080089cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68da      	ldr	r2, [r3, #12]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0201 	bic.w	r2, r2, #1
 80089e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6a1a      	ldr	r2, [r3, #32]
 80089ea:	f241 1311 	movw	r3, #4369	; 0x1111
 80089ee:	4013      	ands	r3, r2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d10f      	bne.n	8008a14 <HAL_TIM_Base_Stop_IT+0x48>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	6a1a      	ldr	r2, [r3, #32]
 80089fa:	f240 4344 	movw	r3, #1092	; 0x444
 80089fe:	4013      	ands	r3, r2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d107      	bne.n	8008a14 <HAL_TIM_Base_Stop_IT+0x48>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f022 0201 	bic.w	r2, r2, #1
 8008a12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b082      	sub	sp, #8
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	f003 0302 	and.w	r3, r3, #2
 8008a3c:	2b02      	cmp	r3, #2
 8008a3e:	d122      	bne.n	8008a86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f003 0302 	and.w	r3, r3, #2
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d11b      	bne.n	8008a86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f06f 0202 	mvn.w	r2, #2
 8008a56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	f003 0303 	and.w	r3, r3, #3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d003      	beq.n	8008a74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f905 	bl	8008c7c <HAL_TIM_IC_CaptureCallback>
 8008a72:	e005      	b.n	8008a80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 f8f7 	bl	8008c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 f908 	bl	8008c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	f003 0304 	and.w	r3, r3, #4
 8008a90:	2b04      	cmp	r3, #4
 8008a92:	d122      	bne.n	8008ada <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	f003 0304 	and.w	r3, r3, #4
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d11b      	bne.n	8008ada <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f06f 0204 	mvn.w	r2, #4
 8008aaa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d003      	beq.n	8008ac8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f8db 	bl	8008c7c <HAL_TIM_IC_CaptureCallback>
 8008ac6:	e005      	b.n	8008ad4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	f000 f8cd 	bl	8008c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f8de 	bl	8008c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	691b      	ldr	r3, [r3, #16]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	d122      	bne.n	8008b2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	f003 0308 	and.w	r3, r3, #8
 8008af2:	2b08      	cmp	r3, #8
 8008af4:	d11b      	bne.n	8008b2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f06f 0208 	mvn.w	r2, #8
 8008afe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2204      	movs	r2, #4
 8008b04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	69db      	ldr	r3, [r3, #28]
 8008b0c:	f003 0303 	and.w	r3, r3, #3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d003      	beq.n	8008b1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f8b1 	bl	8008c7c <HAL_TIM_IC_CaptureCallback>
 8008b1a:	e005      	b.n	8008b28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f8a3 	bl	8008c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f8b4 	bl	8008c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	f003 0310 	and.w	r3, r3, #16
 8008b38:	2b10      	cmp	r3, #16
 8008b3a:	d122      	bne.n	8008b82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	f003 0310 	and.w	r3, r3, #16
 8008b46:	2b10      	cmp	r3, #16
 8008b48:	d11b      	bne.n	8008b82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f06f 0210 	mvn.w	r2, #16
 8008b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2208      	movs	r2, #8
 8008b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f887 	bl	8008c7c <HAL_TIM_IC_CaptureCallback>
 8008b6e:	e005      	b.n	8008b7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f879 	bl	8008c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f88a 	bl	8008c90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2200      	movs	r2, #0
 8008b80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	f003 0301 	and.w	r3, r3, #1
 8008b8c:	2b01      	cmp	r3, #1
 8008b8e:	d10e      	bne.n	8008bae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b01      	cmp	r3, #1
 8008b9c:	d107      	bne.n	8008bae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f06f 0201 	mvn.w	r2, #1
 8008ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f00d f8df 	bl	8015d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb8:	2b80      	cmp	r3, #128	; 0x80
 8008bba:	d10e      	bne.n	8008bda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc6:	2b80      	cmp	r3, #128	; 0x80
 8008bc8:	d107      	bne.n	8008bda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 f9a7 	bl	8008f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be8:	d10e      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf4:	2b80      	cmp	r3, #128	; 0x80
 8008bf6:	d107      	bne.n	8008c08 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f99a 	bl	8008f3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c12:	2b40      	cmp	r3, #64	; 0x40
 8008c14:	d10e      	bne.n	8008c34 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c20:	2b40      	cmp	r3, #64	; 0x40
 8008c22:	d107      	bne.n	8008c34 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f838 	bl	8008ca4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	f003 0320 	and.w	r3, r3, #32
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	d10e      	bne.n	8008c60 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	f003 0320 	and.w	r3, r3, #32
 8008c4c:	2b20      	cmp	r3, #32
 8008c4e:	d107      	bne.n	8008c60 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f06f 0220 	mvn.w	r2, #32
 8008c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f95a 	bl	8008f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c84:	bf00      	nop
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a40      	ldr	r2, [pc, #256]	; (8008dcc <TIM_Base_SetConfig+0x114>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d013      	beq.n	8008cf8 <TIM_Base_SetConfig+0x40>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd6:	d00f      	beq.n	8008cf8 <TIM_Base_SetConfig+0x40>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a3d      	ldr	r2, [pc, #244]	; (8008dd0 <TIM_Base_SetConfig+0x118>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d00b      	beq.n	8008cf8 <TIM_Base_SetConfig+0x40>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a3c      	ldr	r2, [pc, #240]	; (8008dd4 <TIM_Base_SetConfig+0x11c>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d007      	beq.n	8008cf8 <TIM_Base_SetConfig+0x40>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a3b      	ldr	r2, [pc, #236]	; (8008dd8 <TIM_Base_SetConfig+0x120>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_Base_SetConfig+0x40>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a3a      	ldr	r2, [pc, #232]	; (8008ddc <TIM_Base_SetConfig+0x124>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d108      	bne.n	8008d0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a2f      	ldr	r2, [pc, #188]	; (8008dcc <TIM_Base_SetConfig+0x114>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d02b      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d18:	d027      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a2c      	ldr	r2, [pc, #176]	; (8008dd0 <TIM_Base_SetConfig+0x118>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d023      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a2b      	ldr	r2, [pc, #172]	; (8008dd4 <TIM_Base_SetConfig+0x11c>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d01f      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a2a      	ldr	r2, [pc, #168]	; (8008dd8 <TIM_Base_SetConfig+0x120>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d01b      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a29      	ldr	r2, [pc, #164]	; (8008ddc <TIM_Base_SetConfig+0x124>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d017      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a28      	ldr	r2, [pc, #160]	; (8008de0 <TIM_Base_SetConfig+0x128>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d013      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a27      	ldr	r2, [pc, #156]	; (8008de4 <TIM_Base_SetConfig+0x12c>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d00f      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a26      	ldr	r2, [pc, #152]	; (8008de8 <TIM_Base_SetConfig+0x130>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00b      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a25      	ldr	r2, [pc, #148]	; (8008dec <TIM_Base_SetConfig+0x134>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d007      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a24      	ldr	r2, [pc, #144]	; (8008df0 <TIM_Base_SetConfig+0x138>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d003      	beq.n	8008d6a <TIM_Base_SetConfig+0xb2>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a23      	ldr	r2, [pc, #140]	; (8008df4 <TIM_Base_SetConfig+0x13c>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d108      	bne.n	8008d7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a0a      	ldr	r2, [pc, #40]	; (8008dcc <TIM_Base_SetConfig+0x114>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d003      	beq.n	8008db0 <TIM_Base_SetConfig+0xf8>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a0c      	ldr	r2, [pc, #48]	; (8008ddc <TIM_Base_SetConfig+0x124>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d103      	bne.n	8008db8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	691a      	ldr	r2, [r3, #16]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	615a      	str	r2, [r3, #20]
}
 8008dbe:	bf00      	nop
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	40010000 	.word	0x40010000
 8008dd0:	40000400 	.word	0x40000400
 8008dd4:	40000800 	.word	0x40000800
 8008dd8:	40000c00 	.word	0x40000c00
 8008ddc:	40010400 	.word	0x40010400
 8008de0:	40014000 	.word	0x40014000
 8008de4:	40014400 	.word	0x40014400
 8008de8:	40014800 	.word	0x40014800
 8008dec:	40001800 	.word	0x40001800
 8008df0:	40001c00 	.word	0x40001c00
 8008df4:	40002000 	.word	0x40002000

08008df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
 8008e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d101      	bne.n	8008e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e0c:	2302      	movs	r3, #2
 8008e0e:	e06d      	b.n	8008eec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2201      	movs	r2, #1
 8008e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	685b      	ldr	r3, [r3, #4]
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a30      	ldr	r2, [pc, #192]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d004      	beq.n	8008e44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a2f      	ldr	r2, [pc, #188]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d108      	bne.n	8008e56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	68fa      	ldr	r2, [r7, #12]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a20      	ldr	r2, [pc, #128]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d022      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e82:	d01d      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a1d      	ldr	r2, [pc, #116]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d018      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a1c      	ldr	r2, [pc, #112]	; (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d013      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a1a      	ldr	r2, [pc, #104]	; (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d00e      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a15      	ldr	r2, [pc, #84]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d009      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a16      	ldr	r2, [pc, #88]	; (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d004      	beq.n	8008ec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a15      	ldr	r2, [pc, #84]	; (8008f10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d10c      	bne.n	8008eda <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ec6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	40010000 	.word	0x40010000
 8008efc:	40010400 	.word	0x40010400
 8008f00:	40000400 	.word	0x40000400
 8008f04:	40000800 	.word	0x40000800
 8008f08:	40000c00 	.word	0x40000c00
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40001800 	.word	0x40001800

08008f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f1c:	bf00      	nop
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr

08008f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f30:	bf00      	nop
 8008f32:	370c      	adds	r7, #12
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr

08008f3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f44:	bf00      	nop
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e040      	b.n	8008fe4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d106      	bne.n	8008f78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7f8 fe2a 	bl	8001bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2224      	movs	r2, #36	; 0x24
 8008f7c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0201 	bic.w	r2, r2, #1
 8008f8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fd44 	bl	8009a1c <UART_SetConfig>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d101      	bne.n	8008f9e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e022      	b.n	8008fe4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d002      	beq.n	8008fac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 ff9c 	bl	8009ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	689a      	ldr	r2, [r3, #8]
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f042 0201 	orr.w	r2, r2, #1
 8008fda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f001 f823 	bl	800a028 <UART_CheckIdleState>
 8008fe2:	4603      	mov	r3, r0
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08a      	sub	sp, #40	; 0x28
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	60f8      	str	r0, [r7, #12]
 8008ff4:	60b9      	str	r1, [r7, #8]
 8008ff6:	603b      	str	r3, [r7, #0]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009000:	2b20      	cmp	r3, #32
 8009002:	d171      	bne.n	80090e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <HAL_UART_Transmit+0x24>
 800900a:	88fb      	ldrh	r3, [r7, #6]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d101      	bne.n	8009014 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	e06a      	b.n	80090ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2200      	movs	r2, #0
 8009018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2221      	movs	r2, #33	; 0x21
 8009020:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009022:	f7f9 fb91 	bl	8002748 <HAL_GetTick>
 8009026:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	88fa      	ldrh	r2, [r7, #6]
 800902c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	88fa      	ldrh	r2, [r7, #6]
 8009034:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	689b      	ldr	r3, [r3, #8]
 800903c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009040:	d108      	bne.n	8009054 <HAL_UART_Transmit+0x68>
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800904a:	2300      	movs	r3, #0
 800904c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	e003      	b.n	800905c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009058:	2300      	movs	r3, #0
 800905a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800905c:	e02c      	b.n	80090b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	2200      	movs	r2, #0
 8009066:	2180      	movs	r1, #128	; 0x80
 8009068:	68f8      	ldr	r0, [r7, #12]
 800906a:	f001 f814 	bl	800a096 <UART_WaitOnFlagUntilTimeout>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009074:	2303      	movs	r3, #3
 8009076:	e038      	b.n	80090ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10b      	bne.n	8009096 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	461a      	mov	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800908c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800908e:	69bb      	ldr	r3, [r7, #24]
 8009090:	3302      	adds	r3, #2
 8009092:	61bb      	str	r3, [r7, #24]
 8009094:	e007      	b.n	80090a6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009096:	69fb      	ldr	r3, [r7, #28]
 8009098:	781a      	ldrb	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80090a0:	69fb      	ldr	r3, [r7, #28]
 80090a2:	3301      	adds	r3, #1
 80090a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090be:	b29b      	uxth	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1cc      	bne.n	800905e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	2200      	movs	r2, #0
 80090cc:	2140      	movs	r1, #64	; 0x40
 80090ce:	68f8      	ldr	r0, [r7, #12]
 80090d0:	f000 ffe1 	bl	800a096 <UART_WaitOnFlagUntilTimeout>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e005      	b.n	80090ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2220      	movs	r2, #32
 80090e2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	e000      	b.n	80090ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80090e8:	2302      	movs	r3, #2
  }
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3720      	adds	r7, #32
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b08a      	sub	sp, #40	; 0x28
 80090f6:	af02      	add	r7, sp, #8
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	4613      	mov	r3, r2
 8009100:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009108:	2b20      	cmp	r3, #32
 800910a:	f040 80b1 	bne.w	8009270 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d002      	beq.n	800911a <HAL_UART_Receive+0x28>
 8009114:	88fb      	ldrh	r3, [r7, #6]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e0a9      	b.n	8009272 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2222      	movs	r2, #34	; 0x22
 800912a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009134:	f7f9 fb08 	bl	8002748 <HAL_GetTick>
 8009138:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	88fa      	ldrh	r2, [r7, #6]
 800913e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	88fa      	ldrh	r2, [r7, #6]
 8009146:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009152:	d10e      	bne.n	8009172 <HAL_UART_Receive+0x80>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	691b      	ldr	r3, [r3, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d105      	bne.n	8009168 <HAL_UART_Receive+0x76>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009162:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009166:	e02d      	b.n	80091c4 <HAL_UART_Receive+0xd2>
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	22ff      	movs	r2, #255	; 0xff
 800916c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009170:	e028      	b.n	80091c4 <HAL_UART_Receive+0xd2>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	689b      	ldr	r3, [r3, #8]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10d      	bne.n	8009196 <HAL_UART_Receive+0xa4>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <HAL_UART_Receive+0x9a>
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	22ff      	movs	r2, #255	; 0xff
 8009186:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800918a:	e01b      	b.n	80091c4 <HAL_UART_Receive+0xd2>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	227f      	movs	r2, #127	; 0x7f
 8009190:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009194:	e016      	b.n	80091c4 <HAL_UART_Receive+0xd2>
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800919e:	d10d      	bne.n	80091bc <HAL_UART_Receive+0xca>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d104      	bne.n	80091b2 <HAL_UART_Receive+0xc0>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	227f      	movs	r2, #127	; 0x7f
 80091ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091b0:	e008      	b.n	80091c4 <HAL_UART_Receive+0xd2>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	223f      	movs	r2, #63	; 0x3f
 80091b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091ba:	e003      	b.n	80091c4 <HAL_UART_Receive+0xd2>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2200      	movs	r2, #0
 80091c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091ca:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d4:	d108      	bne.n	80091e8 <HAL_UART_Receive+0xf6>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d104      	bne.n	80091e8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	61bb      	str	r3, [r7, #24]
 80091e6:	e003      	b.n	80091f0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091ec:	2300      	movs	r3, #0
 80091ee:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80091f0:	e032      	b.n	8009258 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	9300      	str	r3, [sp, #0]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	2200      	movs	r2, #0
 80091fa:	2120      	movs	r1, #32
 80091fc:	68f8      	ldr	r0, [r7, #12]
 80091fe:	f000 ff4a 	bl	800a096 <UART_WaitOnFlagUntilTimeout>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	e032      	b.n	8009272 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10c      	bne.n	800922c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	b29a      	uxth	r2, r3
 800921a:	8a7b      	ldrh	r3, [r7, #18]
 800921c:	4013      	ands	r3, r2
 800921e:	b29a      	uxth	r2, r3
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	3302      	adds	r3, #2
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	e00c      	b.n	8009246 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009232:	b2da      	uxtb	r2, r3
 8009234:	8a7b      	ldrh	r3, [r7, #18]
 8009236:	b2db      	uxtb	r3, r3
 8009238:	4013      	ands	r3, r2
 800923a:	b2da      	uxtb	r2, r3
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	3301      	adds	r3, #1
 8009244:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	b29a      	uxth	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800925e:	b29b      	uxth	r3, r3
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1c6      	bne.n	80091f2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2220      	movs	r2, #32
 8009268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800926c:	2300      	movs	r3, #0
 800926e:	e000      	b.n	8009272 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8009270:	2302      	movs	r3, #2
  }
}
 8009272:	4618      	mov	r0, r3
 8009274:	3720      	adds	r7, #32
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08a      	sub	sp, #40	; 0x28
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800928e:	2b20      	cmp	r3, #32
 8009290:	d165      	bne.n	800935e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <HAL_UART_Transmit_DMA+0x22>
 8009298:	88fb      	ldrh	r3, [r7, #6]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d101      	bne.n	80092a2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800929e:	2301      	movs	r3, #1
 80092a0:	e05e      	b.n	8009360 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	88fa      	ldrh	r2, [r7, #6]
 80092ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	88fa      	ldrh	r2, [r7, #6]
 80092b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2221      	movs	r2, #33	; 0x21
 80092c4:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d027      	beq.n	800931e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d2:	4a25      	ldr	r2, [pc, #148]	; (8009368 <HAL_UART_Transmit_DMA+0xec>)
 80092d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092da:	4a24      	ldr	r2, [pc, #144]	; (800936c <HAL_UART_Transmit_DMA+0xf0>)
 80092dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e2:	4a23      	ldr	r2, [pc, #140]	; (8009370 <HAL_UART_Transmit_DMA+0xf4>)
 80092e4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ea:	2200      	movs	r2, #0
 80092ec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f6:	4619      	mov	r1, r3
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3328      	adds	r3, #40	; 0x28
 80092fe:	461a      	mov	r2, r3
 8009300:	88fb      	ldrh	r3, [r7, #6]
 8009302:	f7f9 fc11 	bl	8002b28 <HAL_DMA_Start_IT>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d008      	beq.n	800931e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2210      	movs	r2, #16
 8009310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2220      	movs	r2, #32
 8009318:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	e020      	b.n	8009360 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2240      	movs	r2, #64	; 0x40
 8009324:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	3308      	adds	r3, #8
 800932c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	e853 3f00 	ldrex	r3, [r3]
 8009334:	613b      	str	r3, [r7, #16]
   return(result);
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800933c:	627b      	str	r3, [r7, #36]	; 0x24
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3308      	adds	r3, #8
 8009344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009346:	623a      	str	r2, [r7, #32]
 8009348:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800934a:	69f9      	ldr	r1, [r7, #28]
 800934c:	6a3a      	ldr	r2, [r7, #32]
 800934e:	e841 2300 	strex	r3, r2, [r1]
 8009352:	61bb      	str	r3, [r7, #24]
   return(result);
 8009354:	69bb      	ldr	r3, [r7, #24]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d1e5      	bne.n	8009326 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800935a:	2300      	movs	r3, #0
 800935c:	e000      	b.n	8009360 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800935e:	2302      	movs	r3, #2
  }
}
 8009360:	4618      	mov	r0, r3
 8009362:	3728      	adds	r7, #40	; 0x28
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	0800a479 	.word	0x0800a479
 800936c:	0800a50f 	.word	0x0800a50f
 8009370:	0800a691 	.word	0x0800a691

08009374 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b08a      	sub	sp, #40	; 0x28
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	4613      	mov	r3, r2
 8009380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009388:	2b20      	cmp	r3, #32
 800938a:	d132      	bne.n	80093f2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <HAL_UART_Receive_DMA+0x24>
 8009392:	88fb      	ldrh	r3, [r7, #6]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d101      	bne.n	800939c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009398:	2301      	movs	r3, #1
 800939a:	e02b      	b.n	80093f4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2200      	movs	r2, #0
 80093a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d018      	beq.n	80093e2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	e853 3f00 	ldrex	r3, [r3]
 80093bc:	613b      	str	r3, [r7, #16]
   return(result);
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093c4:	627b      	str	r3, [r7, #36]	; 0x24
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	461a      	mov	r2, r3
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	623b      	str	r3, [r7, #32]
 80093d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	69f9      	ldr	r1, [r7, #28]
 80093d4:	6a3a      	ldr	r2, [r7, #32]
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	61bb      	str	r3, [r7, #24]
   return(result);
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e6      	bne.n	80093b0 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80093e2:	88fb      	ldrh	r3, [r7, #6]
 80093e4:	461a      	mov	r2, r3
 80093e6:	68b9      	ldr	r1, [r7, #8]
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 ff1b 	bl	800a224 <UART_Start_Receive_DMA>
 80093ee:	4603      	mov	r3, r0
 80093f0:	e000      	b.n	80093f4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80093f2:	2302      	movs	r3, #2
  }
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3728      	adds	r7, #40	; 0x28
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b0ba      	sub	sp, #232	; 0xe8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	69db      	ldr	r3, [r3, #28]
 800940a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009422:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009426:	f640 030f 	movw	r3, #2063	; 0x80f
 800942a:	4013      	ands	r3, r2
 800942c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009430:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009434:	2b00      	cmp	r3, #0
 8009436:	d115      	bne.n	8009464 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800943c:	f003 0320 	and.w	r3, r3, #32
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00f      	beq.n	8009464 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b00      	cmp	r3, #0
 800944e:	d009      	beq.n	8009464 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009454:	2b00      	cmp	r3, #0
 8009456:	f000 8297 	beq.w	8009988 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	4798      	blx	r3
      }
      return;
 8009462:	e291      	b.n	8009988 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009464:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009468:	2b00      	cmp	r3, #0
 800946a:	f000 8117 	beq.w	800969c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800946e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d106      	bne.n	8009488 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800947a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800947e:	4b85      	ldr	r3, [pc, #532]	; (8009694 <HAL_UART_IRQHandler+0x298>)
 8009480:	4013      	ands	r3, r2
 8009482:	2b00      	cmp	r3, #0
 8009484:	f000 810a 	beq.w	800969c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b00      	cmp	r3, #0
 8009492:	d011      	beq.n	80094b8 <HAL_UART_IRQHandler+0xbc>
 8009494:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00b      	beq.n	80094b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2201      	movs	r2, #1
 80094a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ae:	f043 0201 	orr.w	r2, r3, #1
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094bc:	f003 0302 	and.w	r3, r3, #2
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d011      	beq.n	80094e8 <HAL_UART_IRQHandler+0xec>
 80094c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094c8:	f003 0301 	and.w	r3, r3, #1
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00b      	beq.n	80094e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2202      	movs	r2, #2
 80094d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094de:	f043 0204 	orr.w	r2, r3, #4
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ec:	f003 0304 	and.w	r3, r3, #4
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d011      	beq.n	8009518 <HAL_UART_IRQHandler+0x11c>
 80094f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094f8:	f003 0301 	and.w	r3, r3, #1
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d00b      	beq.n	8009518 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2204      	movs	r2, #4
 8009506:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800950e:	f043 0202 	orr.w	r2, r3, #2
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800951c:	f003 0308 	and.w	r3, r3, #8
 8009520:	2b00      	cmp	r3, #0
 8009522:	d017      	beq.n	8009554 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009528:	f003 0320 	and.w	r3, r3, #32
 800952c:	2b00      	cmp	r3, #0
 800952e:	d105      	bne.n	800953c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009534:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009538:	2b00      	cmp	r3, #0
 800953a:	d00b      	beq.n	8009554 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2208      	movs	r2, #8
 8009542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800954a:	f043 0208 	orr.w	r2, r3, #8
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800955c:	2b00      	cmp	r3, #0
 800955e:	d012      	beq.n	8009586 <HAL_UART_IRQHandler+0x18a>
 8009560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00c      	beq.n	8009586 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800957c:	f043 0220 	orr.w	r2, r3, #32
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 81fd 	beq.w	800998c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009596:	f003 0320 	and.w	r3, r3, #32
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00d      	beq.n	80095ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800959e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095a2:	f003 0320 	and.w	r3, r3, #32
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d007      	beq.n	80095ba <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d003      	beq.n	80095ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ce:	2b40      	cmp	r3, #64	; 0x40
 80095d0:	d005      	beq.n	80095de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d04f      	beq.n	800967e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fee6 	bl	800a3b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ee:	2b40      	cmp	r3, #64	; 0x40
 80095f0:	d141      	bne.n	8009676 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3308      	adds	r3, #8
 80095f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009600:	e853 3f00 	ldrex	r3, [r3]
 8009604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800960c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	3308      	adds	r3, #8
 800961a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800961e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800962a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800962e:	e841 2300 	strex	r3, r2, [r1]
 8009632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1d9      	bne.n	80095f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009642:	2b00      	cmp	r3, #0
 8009644:	d013      	beq.n	800966e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800964a:	4a13      	ldr	r2, [pc, #76]	; (8009698 <HAL_UART_IRQHandler+0x29c>)
 800964c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009652:	4618      	mov	r0, r3
 8009654:	f7f9 fb38 	bl	8002cc8 <HAL_DMA_Abort_IT>
 8009658:	4603      	mov	r3, r0
 800965a:	2b00      	cmp	r3, #0
 800965c:	d017      	beq.n	800968e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009668:	4610      	mov	r0, r2
 800966a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800966c:	e00f      	b.n	800968e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f9be 	bl	80099f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009674:	e00b      	b.n	800968e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f9ba 	bl	80099f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800967c:	e007      	b.n	800968e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f9b6 	bl	80099f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800968c:	e17e      	b.n	800998c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800968e:	bf00      	nop
    return;
 8009690:	e17c      	b.n	800998c <HAL_UART_IRQHandler+0x590>
 8009692:	bf00      	nop
 8009694:	04000120 	.word	0x04000120
 8009698:	0800a70f 	.word	0x0800a70f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	f040 814c 	bne.w	800993e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80096a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096aa:	f003 0310 	and.w	r3, r3, #16
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f000 8145 	beq.w	800993e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80096b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096b8:	f003 0310 	and.w	r3, r3, #16
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 813e 	beq.w	800993e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2210      	movs	r2, #16
 80096c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d4:	2b40      	cmp	r3, #64	; 0x40
 80096d6:	f040 80b6 	bne.w	8009846 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685b      	ldr	r3, [r3, #4]
 80096e2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f000 8150 	beq.w	8009990 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80096f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096fa:	429a      	cmp	r2, r3
 80096fc:	f080 8148 	bcs.w	8009990 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009706:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800970e:	69db      	ldr	r3, [r3, #28]
 8009710:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009714:	f000 8086 	beq.w	8009824 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800972c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009746:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800974e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009752:	e841 2300 	strex	r3, r2, [r1]
 8009756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800975a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1da      	bne.n	8009718 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	3308      	adds	r3, #8
 8009768:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009774:	f023 0301 	bic.w	r3, r3, #1
 8009778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009786:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800978a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800978e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009792:	e841 2300 	strex	r3, r2, [r1]
 8009796:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1e1      	bne.n	8009762 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3308      	adds	r3, #8
 80097a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097a8:	e853 3f00 	ldrex	r3, [r3]
 80097ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3308      	adds	r3, #8
 80097be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80097c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80097c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e3      	bne.n	800979e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2220      	movs	r2, #32
 80097da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2200      	movs	r2, #0
 80097e2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097ec:	e853 3f00 	ldrex	r3, [r3]
 80097f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097f4:	f023 0310 	bic.w	r3, r3, #16
 80097f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	461a      	mov	r2, r3
 8009802:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009806:	65bb      	str	r3, [r7, #88]	; 0x58
 8009808:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800980c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800980e:	e841 2300 	strex	r3, r2, [r1]
 8009812:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1e4      	bne.n	80097e4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800981e:	4618      	mov	r0, r3
 8009820:	f7f9 f9e2 	bl	8002be8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2202      	movs	r2, #2
 8009828:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009836:	b29b      	uxth	r3, r3
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	b29b      	uxth	r3, r3
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f8e0 	bl	8009a04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009844:	e0a4      	b.n	8009990 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009852:	b29b      	uxth	r3, r3
 8009854:	1ad3      	subs	r3, r2, r3
 8009856:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009860:	b29b      	uxth	r3, r3
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 8096 	beq.w	8009994 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009868:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 8091 	beq.w	8009994 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987a:	e853 3f00 	ldrex	r3, [r3]
 800987e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009882:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009886:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	461a      	mov	r2, r3
 8009890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009894:	647b      	str	r3, [r7, #68]	; 0x44
 8009896:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009898:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800989a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800989c:	e841 2300 	strex	r3, r2, [r1]
 80098a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e4      	bne.n	8009872 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	3308      	adds	r3, #8
 80098ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b2:	e853 3f00 	ldrex	r3, [r3]
 80098b6:	623b      	str	r3, [r7, #32]
   return(result);
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	f023 0301 	bic.w	r3, r3, #1
 80098be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	3308      	adds	r3, #8
 80098c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80098cc:	633a      	str	r2, [r7, #48]	; 0x30
 80098ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098d4:	e841 2300 	strex	r3, r2, [r1]
 80098d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1e3      	bne.n	80098a8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2220      	movs	r2, #32
 80098e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	e853 3f00 	ldrex	r3, [r3]
 8009900:	60fb      	str	r3, [r7, #12]
   return(result);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f023 0310 	bic.w	r3, r3, #16
 8009908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	461a      	mov	r2, r3
 8009912:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009916:	61fb      	str	r3, [r7, #28]
 8009918:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	69b9      	ldr	r1, [r7, #24]
 800991c:	69fa      	ldr	r2, [r7, #28]
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	617b      	str	r3, [r7, #20]
   return(result);
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e4      	bne.n	80098f4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2202      	movs	r2, #2
 800992e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009930:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009934:	4619      	mov	r1, r3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f864 	bl	8009a04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800993c:	e02a      	b.n	8009994 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800993e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009946:	2b00      	cmp	r3, #0
 8009948:	d00e      	beq.n	8009968 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800994a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800994e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009952:	2b00      	cmp	r3, #0
 8009954:	d008      	beq.n	8009968 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800995a:	2b00      	cmp	r3, #0
 800995c:	d01c      	beq.n	8009998 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	4798      	blx	r3
    }
    return;
 8009966:	e017      	b.n	8009998 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800996c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009970:	2b00      	cmp	r3, #0
 8009972:	d012      	beq.n	800999a <HAL_UART_IRQHandler+0x59e>
 8009974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00c      	beq.n	800999a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 feda 	bl	800a73a <UART_EndTransmit_IT>
    return;
 8009986:	e008      	b.n	800999a <HAL_UART_IRQHandler+0x59e>
      return;
 8009988:	bf00      	nop
 800998a:	e006      	b.n	800999a <HAL_UART_IRQHandler+0x59e>
    return;
 800998c:	bf00      	nop
 800998e:	e004      	b.n	800999a <HAL_UART_IRQHandler+0x59e>
      return;
 8009990:	bf00      	nop
 8009992:	e002      	b.n	800999a <HAL_UART_IRQHandler+0x59e>
      return;
 8009994:	bf00      	nop
 8009996:	e000      	b.n	800999a <HAL_UART_IRQHandler+0x59e>
    return;
 8009998:	bf00      	nop
  }

}
 800999a:	37e8      	adds	r7, #232	; 0xe8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099a8:	bf00      	nop
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80099d0:	bf00      	nop
 80099d2:	370c      	adds	r7, #12
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099f8:	bf00      	nop
 80099fa:	370c      	adds	r7, #12
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr

08009a04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b088      	sub	sp, #32
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	689a      	ldr	r2, [r3, #8]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	431a      	orrs	r2, r3
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	431a      	orrs	r2, r3
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	69db      	ldr	r3, [r3, #28]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	4ba6      	ldr	r3, [pc, #664]	; (8009ce0 <UART_SetConfig+0x2c4>)
 8009a48:	4013      	ands	r3, r2
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	6812      	ldr	r2, [r2, #0]
 8009a4e:	6979      	ldr	r1, [r7, #20]
 8009a50:	430b      	orrs	r3, r1
 8009a52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	430a      	orrs	r2, r1
 8009a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	699b      	ldr	r3, [r3, #24]
 8009a6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a1b      	ldr	r3, [r3, #32]
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a94      	ldr	r2, [pc, #592]	; (8009ce4 <UART_SetConfig+0x2c8>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d120      	bne.n	8009ada <UART_SetConfig+0xbe>
 8009a98:	4b93      	ldr	r3, [pc, #588]	; (8009ce8 <UART_SetConfig+0x2cc>)
 8009a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a9e:	f003 0303 	and.w	r3, r3, #3
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d816      	bhi.n	8009ad4 <UART_SetConfig+0xb8>
 8009aa6:	a201      	add	r2, pc, #4	; (adr r2, 8009aac <UART_SetConfig+0x90>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009abd 	.word	0x08009abd
 8009ab0:	08009ac9 	.word	0x08009ac9
 8009ab4:	08009ac3 	.word	0x08009ac3
 8009ab8:	08009acf 	.word	0x08009acf
 8009abc:	2301      	movs	r3, #1
 8009abe:	77fb      	strb	r3, [r7, #31]
 8009ac0:	e150      	b.n	8009d64 <UART_SetConfig+0x348>
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	77fb      	strb	r3, [r7, #31]
 8009ac6:	e14d      	b.n	8009d64 <UART_SetConfig+0x348>
 8009ac8:	2304      	movs	r3, #4
 8009aca:	77fb      	strb	r3, [r7, #31]
 8009acc:	e14a      	b.n	8009d64 <UART_SetConfig+0x348>
 8009ace:	2308      	movs	r3, #8
 8009ad0:	77fb      	strb	r3, [r7, #31]
 8009ad2:	e147      	b.n	8009d64 <UART_SetConfig+0x348>
 8009ad4:	2310      	movs	r3, #16
 8009ad6:	77fb      	strb	r3, [r7, #31]
 8009ad8:	e144      	b.n	8009d64 <UART_SetConfig+0x348>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	4a83      	ldr	r2, [pc, #524]	; (8009cec <UART_SetConfig+0x2d0>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d132      	bne.n	8009b4a <UART_SetConfig+0x12e>
 8009ae4:	4b80      	ldr	r3, [pc, #512]	; (8009ce8 <UART_SetConfig+0x2cc>)
 8009ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aea:	f003 030c 	and.w	r3, r3, #12
 8009aee:	2b0c      	cmp	r3, #12
 8009af0:	d828      	bhi.n	8009b44 <UART_SetConfig+0x128>
 8009af2:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <UART_SetConfig+0xdc>)
 8009af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af8:	08009b2d 	.word	0x08009b2d
 8009afc:	08009b45 	.word	0x08009b45
 8009b00:	08009b45 	.word	0x08009b45
 8009b04:	08009b45 	.word	0x08009b45
 8009b08:	08009b39 	.word	0x08009b39
 8009b0c:	08009b45 	.word	0x08009b45
 8009b10:	08009b45 	.word	0x08009b45
 8009b14:	08009b45 	.word	0x08009b45
 8009b18:	08009b33 	.word	0x08009b33
 8009b1c:	08009b45 	.word	0x08009b45
 8009b20:	08009b45 	.word	0x08009b45
 8009b24:	08009b45 	.word	0x08009b45
 8009b28:	08009b3f 	.word	0x08009b3f
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	77fb      	strb	r3, [r7, #31]
 8009b30:	e118      	b.n	8009d64 <UART_SetConfig+0x348>
 8009b32:	2302      	movs	r3, #2
 8009b34:	77fb      	strb	r3, [r7, #31]
 8009b36:	e115      	b.n	8009d64 <UART_SetConfig+0x348>
 8009b38:	2304      	movs	r3, #4
 8009b3a:	77fb      	strb	r3, [r7, #31]
 8009b3c:	e112      	b.n	8009d64 <UART_SetConfig+0x348>
 8009b3e:	2308      	movs	r3, #8
 8009b40:	77fb      	strb	r3, [r7, #31]
 8009b42:	e10f      	b.n	8009d64 <UART_SetConfig+0x348>
 8009b44:	2310      	movs	r3, #16
 8009b46:	77fb      	strb	r3, [r7, #31]
 8009b48:	e10c      	b.n	8009d64 <UART_SetConfig+0x348>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a68      	ldr	r2, [pc, #416]	; (8009cf0 <UART_SetConfig+0x2d4>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d120      	bne.n	8009b96 <UART_SetConfig+0x17a>
 8009b54:	4b64      	ldr	r3, [pc, #400]	; (8009ce8 <UART_SetConfig+0x2cc>)
 8009b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b5e:	2b30      	cmp	r3, #48	; 0x30
 8009b60:	d013      	beq.n	8009b8a <UART_SetConfig+0x16e>
 8009b62:	2b30      	cmp	r3, #48	; 0x30
 8009b64:	d814      	bhi.n	8009b90 <UART_SetConfig+0x174>
 8009b66:	2b20      	cmp	r3, #32
 8009b68:	d009      	beq.n	8009b7e <UART_SetConfig+0x162>
 8009b6a:	2b20      	cmp	r3, #32
 8009b6c:	d810      	bhi.n	8009b90 <UART_SetConfig+0x174>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d002      	beq.n	8009b78 <UART_SetConfig+0x15c>
 8009b72:	2b10      	cmp	r3, #16
 8009b74:	d006      	beq.n	8009b84 <UART_SetConfig+0x168>
 8009b76:	e00b      	b.n	8009b90 <UART_SetConfig+0x174>
 8009b78:	2300      	movs	r3, #0
 8009b7a:	77fb      	strb	r3, [r7, #31]
 8009b7c:	e0f2      	b.n	8009d64 <UART_SetConfig+0x348>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	77fb      	strb	r3, [r7, #31]
 8009b82:	e0ef      	b.n	8009d64 <UART_SetConfig+0x348>
 8009b84:	2304      	movs	r3, #4
 8009b86:	77fb      	strb	r3, [r7, #31]
 8009b88:	e0ec      	b.n	8009d64 <UART_SetConfig+0x348>
 8009b8a:	2308      	movs	r3, #8
 8009b8c:	77fb      	strb	r3, [r7, #31]
 8009b8e:	e0e9      	b.n	8009d64 <UART_SetConfig+0x348>
 8009b90:	2310      	movs	r3, #16
 8009b92:	77fb      	strb	r3, [r7, #31]
 8009b94:	e0e6      	b.n	8009d64 <UART_SetConfig+0x348>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a56      	ldr	r2, [pc, #344]	; (8009cf4 <UART_SetConfig+0x2d8>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d120      	bne.n	8009be2 <UART_SetConfig+0x1c6>
 8009ba0:	4b51      	ldr	r3, [pc, #324]	; (8009ce8 <UART_SetConfig+0x2cc>)
 8009ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009baa:	2bc0      	cmp	r3, #192	; 0xc0
 8009bac:	d013      	beq.n	8009bd6 <UART_SetConfig+0x1ba>
 8009bae:	2bc0      	cmp	r3, #192	; 0xc0
 8009bb0:	d814      	bhi.n	8009bdc <UART_SetConfig+0x1c0>
 8009bb2:	2b80      	cmp	r3, #128	; 0x80
 8009bb4:	d009      	beq.n	8009bca <UART_SetConfig+0x1ae>
 8009bb6:	2b80      	cmp	r3, #128	; 0x80
 8009bb8:	d810      	bhi.n	8009bdc <UART_SetConfig+0x1c0>
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <UART_SetConfig+0x1a8>
 8009bbe:	2b40      	cmp	r3, #64	; 0x40
 8009bc0:	d006      	beq.n	8009bd0 <UART_SetConfig+0x1b4>
 8009bc2:	e00b      	b.n	8009bdc <UART_SetConfig+0x1c0>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	77fb      	strb	r3, [r7, #31]
 8009bc8:	e0cc      	b.n	8009d64 <UART_SetConfig+0x348>
 8009bca:	2302      	movs	r3, #2
 8009bcc:	77fb      	strb	r3, [r7, #31]
 8009bce:	e0c9      	b.n	8009d64 <UART_SetConfig+0x348>
 8009bd0:	2304      	movs	r3, #4
 8009bd2:	77fb      	strb	r3, [r7, #31]
 8009bd4:	e0c6      	b.n	8009d64 <UART_SetConfig+0x348>
 8009bd6:	2308      	movs	r3, #8
 8009bd8:	77fb      	strb	r3, [r7, #31]
 8009bda:	e0c3      	b.n	8009d64 <UART_SetConfig+0x348>
 8009bdc:	2310      	movs	r3, #16
 8009bde:	77fb      	strb	r3, [r7, #31]
 8009be0:	e0c0      	b.n	8009d64 <UART_SetConfig+0x348>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a44      	ldr	r2, [pc, #272]	; (8009cf8 <UART_SetConfig+0x2dc>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d125      	bne.n	8009c38 <UART_SetConfig+0x21c>
 8009bec:	4b3e      	ldr	r3, [pc, #248]	; (8009ce8 <UART_SetConfig+0x2cc>)
 8009bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bfa:	d017      	beq.n	8009c2c <UART_SetConfig+0x210>
 8009bfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c00:	d817      	bhi.n	8009c32 <UART_SetConfig+0x216>
 8009c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c06:	d00b      	beq.n	8009c20 <UART_SetConfig+0x204>
 8009c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c0c:	d811      	bhi.n	8009c32 <UART_SetConfig+0x216>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <UART_SetConfig+0x1fe>
 8009c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c16:	d006      	beq.n	8009c26 <UART_SetConfig+0x20a>
 8009c18:	e00b      	b.n	8009c32 <UART_SetConfig+0x216>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	77fb      	strb	r3, [r7, #31]
 8009c1e:	e0a1      	b.n	8009d64 <UART_SetConfig+0x348>
 8009c20:	2302      	movs	r3, #2
 8009c22:	77fb      	strb	r3, [r7, #31]
 8009c24:	e09e      	b.n	8009d64 <UART_SetConfig+0x348>
 8009c26:	2304      	movs	r3, #4
 8009c28:	77fb      	strb	r3, [r7, #31]
 8009c2a:	e09b      	b.n	8009d64 <UART_SetConfig+0x348>
 8009c2c:	2308      	movs	r3, #8
 8009c2e:	77fb      	strb	r3, [r7, #31]
 8009c30:	e098      	b.n	8009d64 <UART_SetConfig+0x348>
 8009c32:	2310      	movs	r3, #16
 8009c34:	77fb      	strb	r3, [r7, #31]
 8009c36:	e095      	b.n	8009d64 <UART_SetConfig+0x348>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4a2f      	ldr	r2, [pc, #188]	; (8009cfc <UART_SetConfig+0x2e0>)
 8009c3e:	4293      	cmp	r3, r2
 8009c40:	d125      	bne.n	8009c8e <UART_SetConfig+0x272>
 8009c42:	4b29      	ldr	r3, [pc, #164]	; (8009ce8 <UART_SetConfig+0x2cc>)
 8009c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009c4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c50:	d017      	beq.n	8009c82 <UART_SetConfig+0x266>
 8009c52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c56:	d817      	bhi.n	8009c88 <UART_SetConfig+0x26c>
 8009c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c5c:	d00b      	beq.n	8009c76 <UART_SetConfig+0x25a>
 8009c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c62:	d811      	bhi.n	8009c88 <UART_SetConfig+0x26c>
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d003      	beq.n	8009c70 <UART_SetConfig+0x254>
 8009c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c6c:	d006      	beq.n	8009c7c <UART_SetConfig+0x260>
 8009c6e:	e00b      	b.n	8009c88 <UART_SetConfig+0x26c>
 8009c70:	2301      	movs	r3, #1
 8009c72:	77fb      	strb	r3, [r7, #31]
 8009c74:	e076      	b.n	8009d64 <UART_SetConfig+0x348>
 8009c76:	2302      	movs	r3, #2
 8009c78:	77fb      	strb	r3, [r7, #31]
 8009c7a:	e073      	b.n	8009d64 <UART_SetConfig+0x348>
 8009c7c:	2304      	movs	r3, #4
 8009c7e:	77fb      	strb	r3, [r7, #31]
 8009c80:	e070      	b.n	8009d64 <UART_SetConfig+0x348>
 8009c82:	2308      	movs	r3, #8
 8009c84:	77fb      	strb	r3, [r7, #31]
 8009c86:	e06d      	b.n	8009d64 <UART_SetConfig+0x348>
 8009c88:	2310      	movs	r3, #16
 8009c8a:	77fb      	strb	r3, [r7, #31]
 8009c8c:	e06a      	b.n	8009d64 <UART_SetConfig+0x348>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a1b      	ldr	r2, [pc, #108]	; (8009d00 <UART_SetConfig+0x2e4>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d138      	bne.n	8009d0a <UART_SetConfig+0x2ee>
 8009c98:	4b13      	ldr	r3, [pc, #76]	; (8009ce8 <UART_SetConfig+0x2cc>)
 8009c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ca2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ca6:	d017      	beq.n	8009cd8 <UART_SetConfig+0x2bc>
 8009ca8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cac:	d82a      	bhi.n	8009d04 <UART_SetConfig+0x2e8>
 8009cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb2:	d00b      	beq.n	8009ccc <UART_SetConfig+0x2b0>
 8009cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb8:	d824      	bhi.n	8009d04 <UART_SetConfig+0x2e8>
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d003      	beq.n	8009cc6 <UART_SetConfig+0x2aa>
 8009cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cc2:	d006      	beq.n	8009cd2 <UART_SetConfig+0x2b6>
 8009cc4:	e01e      	b.n	8009d04 <UART_SetConfig+0x2e8>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	77fb      	strb	r3, [r7, #31]
 8009cca:	e04b      	b.n	8009d64 <UART_SetConfig+0x348>
 8009ccc:	2302      	movs	r3, #2
 8009cce:	77fb      	strb	r3, [r7, #31]
 8009cd0:	e048      	b.n	8009d64 <UART_SetConfig+0x348>
 8009cd2:	2304      	movs	r3, #4
 8009cd4:	77fb      	strb	r3, [r7, #31]
 8009cd6:	e045      	b.n	8009d64 <UART_SetConfig+0x348>
 8009cd8:	2308      	movs	r3, #8
 8009cda:	77fb      	strb	r3, [r7, #31]
 8009cdc:	e042      	b.n	8009d64 <UART_SetConfig+0x348>
 8009cde:	bf00      	nop
 8009ce0:	efff69f3 	.word	0xefff69f3
 8009ce4:	40011000 	.word	0x40011000
 8009ce8:	40023800 	.word	0x40023800
 8009cec:	40004400 	.word	0x40004400
 8009cf0:	40004800 	.word	0x40004800
 8009cf4:	40004c00 	.word	0x40004c00
 8009cf8:	40005000 	.word	0x40005000
 8009cfc:	40011400 	.word	0x40011400
 8009d00:	40007800 	.word	0x40007800
 8009d04:	2310      	movs	r3, #16
 8009d06:	77fb      	strb	r3, [r7, #31]
 8009d08:	e02c      	b.n	8009d64 <UART_SetConfig+0x348>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a72      	ldr	r2, [pc, #456]	; (8009ed8 <UART_SetConfig+0x4bc>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d125      	bne.n	8009d60 <UART_SetConfig+0x344>
 8009d14:	4b71      	ldr	r3, [pc, #452]	; (8009edc <UART_SetConfig+0x4c0>)
 8009d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009d1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d22:	d017      	beq.n	8009d54 <UART_SetConfig+0x338>
 8009d24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d28:	d817      	bhi.n	8009d5a <UART_SetConfig+0x33e>
 8009d2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d2e:	d00b      	beq.n	8009d48 <UART_SetConfig+0x32c>
 8009d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d34:	d811      	bhi.n	8009d5a <UART_SetConfig+0x33e>
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <UART_SetConfig+0x326>
 8009d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d3e:	d006      	beq.n	8009d4e <UART_SetConfig+0x332>
 8009d40:	e00b      	b.n	8009d5a <UART_SetConfig+0x33e>
 8009d42:	2300      	movs	r3, #0
 8009d44:	77fb      	strb	r3, [r7, #31]
 8009d46:	e00d      	b.n	8009d64 <UART_SetConfig+0x348>
 8009d48:	2302      	movs	r3, #2
 8009d4a:	77fb      	strb	r3, [r7, #31]
 8009d4c:	e00a      	b.n	8009d64 <UART_SetConfig+0x348>
 8009d4e:	2304      	movs	r3, #4
 8009d50:	77fb      	strb	r3, [r7, #31]
 8009d52:	e007      	b.n	8009d64 <UART_SetConfig+0x348>
 8009d54:	2308      	movs	r3, #8
 8009d56:	77fb      	strb	r3, [r7, #31]
 8009d58:	e004      	b.n	8009d64 <UART_SetConfig+0x348>
 8009d5a:	2310      	movs	r3, #16
 8009d5c:	77fb      	strb	r3, [r7, #31]
 8009d5e:	e001      	b.n	8009d64 <UART_SetConfig+0x348>
 8009d60:	2310      	movs	r3, #16
 8009d62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d6c:	d15b      	bne.n	8009e26 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009d6e:	7ffb      	ldrb	r3, [r7, #31]
 8009d70:	2b08      	cmp	r3, #8
 8009d72:	d828      	bhi.n	8009dc6 <UART_SetConfig+0x3aa>
 8009d74:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <UART_SetConfig+0x360>)
 8009d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7a:	bf00      	nop
 8009d7c:	08009da1 	.word	0x08009da1
 8009d80:	08009da9 	.word	0x08009da9
 8009d84:	08009db1 	.word	0x08009db1
 8009d88:	08009dc7 	.word	0x08009dc7
 8009d8c:	08009db7 	.word	0x08009db7
 8009d90:	08009dc7 	.word	0x08009dc7
 8009d94:	08009dc7 	.word	0x08009dc7
 8009d98:	08009dc7 	.word	0x08009dc7
 8009d9c:	08009dbf 	.word	0x08009dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009da0:	f7fd face 	bl	8007340 <HAL_RCC_GetPCLK1Freq>
 8009da4:	61b8      	str	r0, [r7, #24]
        break;
 8009da6:	e013      	b.n	8009dd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009da8:	f7fd fade 	bl	8007368 <HAL_RCC_GetPCLK2Freq>
 8009dac:	61b8      	str	r0, [r7, #24]
        break;
 8009dae:	e00f      	b.n	8009dd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009db0:	4b4b      	ldr	r3, [pc, #300]	; (8009ee0 <UART_SetConfig+0x4c4>)
 8009db2:	61bb      	str	r3, [r7, #24]
        break;
 8009db4:	e00c      	b.n	8009dd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009db6:	f7fd f9b1 	bl	800711c <HAL_RCC_GetSysClockFreq>
 8009dba:	61b8      	str	r0, [r7, #24]
        break;
 8009dbc:	e008      	b.n	8009dd0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dc2:	61bb      	str	r3, [r7, #24]
        break;
 8009dc4:	e004      	b.n	8009dd0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	77bb      	strb	r3, [r7, #30]
        break;
 8009dce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d074      	beq.n	8009ec0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	005a      	lsls	r2, r3, #1
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	085b      	lsrs	r3, r3, #1
 8009de0:	441a      	add	r2, r3
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	2b0f      	cmp	r3, #15
 8009df0:	d916      	bls.n	8009e20 <UART_SetConfig+0x404>
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df8:	d212      	bcs.n	8009e20 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	f023 030f 	bic.w	r3, r3, #15
 8009e02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	085b      	lsrs	r3, r3, #1
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	f003 0307 	and.w	r3, r3, #7
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	89fb      	ldrh	r3, [r7, #14]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	89fa      	ldrh	r2, [r7, #14]
 8009e1c:	60da      	str	r2, [r3, #12]
 8009e1e:	e04f      	b.n	8009ec0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	77bb      	strb	r3, [r7, #30]
 8009e24:	e04c      	b.n	8009ec0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e26:	7ffb      	ldrb	r3, [r7, #31]
 8009e28:	2b08      	cmp	r3, #8
 8009e2a:	d828      	bhi.n	8009e7e <UART_SetConfig+0x462>
 8009e2c:	a201      	add	r2, pc, #4	; (adr r2, 8009e34 <UART_SetConfig+0x418>)
 8009e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e32:	bf00      	nop
 8009e34:	08009e59 	.word	0x08009e59
 8009e38:	08009e61 	.word	0x08009e61
 8009e3c:	08009e69 	.word	0x08009e69
 8009e40:	08009e7f 	.word	0x08009e7f
 8009e44:	08009e6f 	.word	0x08009e6f
 8009e48:	08009e7f 	.word	0x08009e7f
 8009e4c:	08009e7f 	.word	0x08009e7f
 8009e50:	08009e7f 	.word	0x08009e7f
 8009e54:	08009e77 	.word	0x08009e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e58:	f7fd fa72 	bl	8007340 <HAL_RCC_GetPCLK1Freq>
 8009e5c:	61b8      	str	r0, [r7, #24]
        break;
 8009e5e:	e013      	b.n	8009e88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e60:	f7fd fa82 	bl	8007368 <HAL_RCC_GetPCLK2Freq>
 8009e64:	61b8      	str	r0, [r7, #24]
        break;
 8009e66:	e00f      	b.n	8009e88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e68:	4b1d      	ldr	r3, [pc, #116]	; (8009ee0 <UART_SetConfig+0x4c4>)
 8009e6a:	61bb      	str	r3, [r7, #24]
        break;
 8009e6c:	e00c      	b.n	8009e88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e6e:	f7fd f955 	bl	800711c <HAL_RCC_GetSysClockFreq>
 8009e72:	61b8      	str	r0, [r7, #24]
        break;
 8009e74:	e008      	b.n	8009e88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e7a:	61bb      	str	r3, [r7, #24]
        break;
 8009e7c:	e004      	b.n	8009e88 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	77bb      	strb	r3, [r7, #30]
        break;
 8009e86:	bf00      	nop
    }

    if (pclk != 0U)
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d018      	beq.n	8009ec0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	085a      	lsrs	r2, r3, #1
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	441a      	add	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	2b0f      	cmp	r3, #15
 8009ea6:	d909      	bls.n	8009ebc <UART_SetConfig+0x4a0>
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eae:	d205      	bcs.n	8009ebc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	60da      	str	r2, [r3, #12]
 8009eba:	e001      	b.n	8009ec0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009ecc:	7fbb      	ldrb	r3, [r7, #30]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3720      	adds	r7, #32
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	40007c00 	.word	0x40007c00
 8009edc:	40023800 	.word	0x40023800
 8009ee0:	00f42400 	.word	0x00f42400

08009ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef0:	f003 0301 	and.w	r3, r3, #1
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00a      	beq.n	8009f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	430a      	orrs	r2, r1
 8009f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00a      	beq.n	8009f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	430a      	orrs	r2, r1
 8009f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f34:	f003 0304 	and.w	r3, r3, #4
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00a      	beq.n	8009f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f56:	f003 0308 	and.w	r3, r3, #8
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00a      	beq.n	8009f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f78:	f003 0310 	and.w	r3, r3, #16
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00a      	beq.n	8009f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	430a      	orrs	r2, r1
 8009f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00a      	beq.n	8009fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	430a      	orrs	r2, r1
 8009fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d01a      	beq.n	8009ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fe2:	d10a      	bne.n	8009ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a002:	2b00      	cmp	r3, #0
 800a004:	d00a      	beq.n	800a01c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	430a      	orrs	r2, r1
 800a01a:	605a      	str	r2, [r3, #4]
  }
}
 800a01c:	bf00      	nop
 800a01e:	370c      	adds	r7, #12
 800a020:	46bd      	mov	sp, r7
 800a022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a026:	4770      	bx	lr

0800a028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b086      	sub	sp, #24
 800a02c:	af02      	add	r7, sp, #8
 800a02e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2200      	movs	r2, #0
 800a034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a038:	f7f8 fb86 	bl	8002748 <HAL_GetTick>
 800a03c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f003 0308 	and.w	r3, r3, #8
 800a048:	2b08      	cmp	r3, #8
 800a04a:	d10e      	bne.n	800a06a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a04c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a050:	9300      	str	r3, [sp, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f81b 	bl	800a096 <UART_WaitOnFlagUntilTimeout>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d001      	beq.n	800a06a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e011      	b.n	800a08e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2220      	movs	r2, #32
 800a06e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2220      	movs	r2, #32
 800a074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a096:	b580      	push	{r7, lr}
 800a098:	b09c      	sub	sp, #112	; 0x70
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	60f8      	str	r0, [r7, #12]
 800a09e:	60b9      	str	r1, [r7, #8]
 800a0a0:	603b      	str	r3, [r7, #0]
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0a6:	e0a7      	b.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0ae:	f000 80a3 	beq.w	800a1f8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0b2:	f7f8 fb49 	bl	8002748 <HAL_GetTick>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	1ad3      	subs	r3, r2, r3
 800a0bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d302      	bcc.n	800a0c8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a0c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d13f      	bne.n	800a148 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0d0:	e853 3f00 	ldrex	r3, [r3]
 800a0d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a0d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0dc:	667b      	str	r3, [r7, #100]	; 0x64
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a0ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0ee:	e841 2300 	strex	r3, r2, [r1]
 800a0f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a0f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1e6      	bne.n	800a0c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	3308      	adds	r3, #8
 800a100:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a104:	e853 3f00 	ldrex	r3, [r3]
 800a108:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a10c:	f023 0301 	bic.w	r3, r3, #1
 800a110:	663b      	str	r3, [r7, #96]	; 0x60
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	3308      	adds	r3, #8
 800a118:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a11a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a11c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a120:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a122:	e841 2300 	strex	r3, r2, [r1]
 800a126:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d1e5      	bne.n	800a0fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2220      	movs	r2, #32
 800a132:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2220      	movs	r2, #32
 800a138:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e068      	b.n	800a21a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 0304 	and.w	r3, r3, #4
 800a152:	2b00      	cmp	r3, #0
 800a154:	d050      	beq.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	69db      	ldr	r3, [r3, #28]
 800a15c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a160:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a164:	d148      	bne.n	800a1f8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a16e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a178:	e853 3f00 	ldrex	r3, [r3]
 800a17c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a184:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a18e:	637b      	str	r3, [r7, #52]	; 0x34
 800a190:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a196:	e841 2300 	strex	r3, r2, [r1]
 800a19a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1e6      	bne.n	800a170 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	3308      	adds	r3, #8
 800a1a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	e853 3f00 	ldrex	r3, [r3]
 800a1b0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	f023 0301 	bic.w	r3, r3, #1
 800a1b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	3308      	adds	r3, #8
 800a1c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a1c2:	623a      	str	r2, [r7, #32]
 800a1c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c6:	69f9      	ldr	r1, [r7, #28]
 800a1c8:	6a3a      	ldr	r2, [r7, #32]
 800a1ca:	e841 2300 	strex	r3, r2, [r1]
 800a1ce:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d1e5      	bne.n	800a1a2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2220      	movs	r2, #32
 800a1da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e010      	b.n	800a21a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	69da      	ldr	r2, [r3, #28]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	4013      	ands	r3, r2
 800a202:	68ba      	ldr	r2, [r7, #8]
 800a204:	429a      	cmp	r2, r3
 800a206:	bf0c      	ite	eq
 800a208:	2301      	moveq	r3, #1
 800a20a:	2300      	movne	r3, #0
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	461a      	mov	r2, r3
 800a210:	79fb      	ldrb	r3, [r7, #7]
 800a212:	429a      	cmp	r2, r3
 800a214:	f43f af48 	beq.w	800a0a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3770      	adds	r7, #112	; 0x70
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
	...

0800a224 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b096      	sub	sp, #88	; 0x58
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	88fa      	ldrh	r2, [r7, #6]
 800a23c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2200      	movs	r2, #0
 800a244:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2222      	movs	r2, #34	; 0x22
 800a24c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a254:	2b00      	cmp	r3, #0
 800a256:	d028      	beq.n	800a2aa <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a25c:	4a3e      	ldr	r2, [pc, #248]	; (800a358 <UART_Start_Receive_DMA+0x134>)
 800a25e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a264:	4a3d      	ldr	r2, [pc, #244]	; (800a35c <UART_Start_Receive_DMA+0x138>)
 800a266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a26c:	4a3c      	ldr	r2, [pc, #240]	; (800a360 <UART_Start_Receive_DMA+0x13c>)
 800a26e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a274:	2200      	movs	r2, #0
 800a276:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3324      	adds	r3, #36	; 0x24
 800a282:	4619      	mov	r1, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a288:	461a      	mov	r2, r3
 800a28a:	88fb      	ldrh	r3, [r7, #6]
 800a28c:	f7f8 fc4c 	bl	8002b28 <HAL_DMA_Start_IT>
 800a290:	4603      	mov	r3, r0
 800a292:	2b00      	cmp	r3, #0
 800a294:	d009      	beq.n	800a2aa <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2210      	movs	r2, #16
 800a29a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	2220      	movs	r2, #32
 800a2a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e051      	b.n	800a34e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d018      	beq.n	800a2e4 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ba:	e853 3f00 	ldrex	r3, [r3]
 800a2be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2c6:	657b      	str	r3, [r7, #84]	; 0x54
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2d0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2d2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a2de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e6      	bne.n	800a2b2 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	3308      	adds	r3, #8
 800a2ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ee:	e853 3f00 	ldrex	r3, [r3]
 800a2f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f6:	f043 0301 	orr.w	r3, r3, #1
 800a2fa:	653b      	str	r3, [r7, #80]	; 0x50
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3308      	adds	r3, #8
 800a302:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a304:	637a      	str	r2, [r7, #52]	; 0x34
 800a306:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a308:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a30a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a30c:	e841 2300 	strex	r3, r2, [r1]
 800a310:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1e5      	bne.n	800a2e4 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	3308      	adds	r3, #8
 800a31e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	e853 3f00 	ldrex	r3, [r3]
 800a326:	613b      	str	r3, [r7, #16]
   return(result);
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a32e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	3308      	adds	r3, #8
 800a336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a338:	623a      	str	r2, [r7, #32]
 800a33a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a33c:	69f9      	ldr	r1, [r7, #28]
 800a33e:	6a3a      	ldr	r2, [r7, #32]
 800a340:	e841 2300 	strex	r3, r2, [r1]
 800a344:	61bb      	str	r3, [r7, #24]
   return(result);
 800a346:	69bb      	ldr	r3, [r7, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d1e5      	bne.n	800a318 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3758      	adds	r7, #88	; 0x58
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	0800a52b 	.word	0x0800a52b
 800a35c:	0800a653 	.word	0x0800a653
 800a360:	0800a691 	.word	0x0800a691

0800a364 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a364:	b480      	push	{r7}
 800a366:	b089      	sub	sp, #36	; 0x24
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	e853 3f00 	ldrex	r3, [r3]
 800a378:	60bb      	str	r3, [r7, #8]
   return(result);
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a380:	61fb      	str	r3, [r7, #28]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	61bb      	str	r3, [r7, #24]
 800a38c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38e:	6979      	ldr	r1, [r7, #20]
 800a390:	69ba      	ldr	r2, [r7, #24]
 800a392:	e841 2300 	strex	r3, r2, [r1]
 800a396:	613b      	str	r3, [r7, #16]
   return(result);
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d1e6      	bne.n	800a36c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2220      	movs	r2, #32
 800a3a2:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a3a4:	bf00      	nop
 800a3a6:	3724      	adds	r7, #36	; 0x24
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b095      	sub	sp, #84	; 0x54
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3c0:	e853 3f00 	ldrex	r3, [r3]
 800a3c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d6:	643b      	str	r3, [r7, #64]	; 0x40
 800a3d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3de:	e841 2300 	strex	r3, r2, [r1]
 800a3e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d1e6      	bne.n	800a3b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	3308      	adds	r3, #8
 800a3f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	e853 3f00 	ldrex	r3, [r3]
 800a3f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	f023 0301 	bic.w	r3, r3, #1
 800a400:	64bb      	str	r3, [r7, #72]	; 0x48
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	3308      	adds	r3, #8
 800a408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a40a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a40c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a412:	e841 2300 	strex	r3, r2, [r1]
 800a416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1e5      	bne.n	800a3ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a422:	2b01      	cmp	r3, #1
 800a424:	d118      	bne.n	800a458 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	e853 3f00 	ldrex	r3, [r3]
 800a432:	60bb      	str	r3, [r7, #8]
   return(result);
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	f023 0310 	bic.w	r3, r3, #16
 800a43a:	647b      	str	r3, [r7, #68]	; 0x44
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	461a      	mov	r2, r3
 800a442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a444:	61bb      	str	r3, [r7, #24]
 800a446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a448:	6979      	ldr	r1, [r7, #20]
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	e841 2300 	strex	r3, r2, [r1]
 800a450:	613b      	str	r3, [r7, #16]
   return(result);
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1e6      	bne.n	800a426 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2220      	movs	r2, #32
 800a45c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2200      	movs	r2, #0
 800a464:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a46c:	bf00      	nop
 800a46e:	3754      	adds	r7, #84	; 0x54
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b090      	sub	sp, #64	; 0x40
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a484:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	69db      	ldr	r3, [r3, #28]
 800a48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a48e:	d037      	beq.n	800a500 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a492:	2200      	movs	r2, #0
 800a494:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3308      	adds	r3, #8
 800a49e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	e853 3f00 	ldrex	r3, [r3]
 800a4a6:	623b      	str	r3, [r7, #32]
   return(result);
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	3308      	adds	r3, #8
 800a4b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4b8:	633a      	str	r2, [r7, #48]	; 0x30
 800a4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4c0:	e841 2300 	strex	r3, r2, [r1]
 800a4c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1e5      	bne.n	800a498 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	e853 3f00 	ldrex	r3, [r3]
 800a4d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e0:	637b      	str	r3, [r7, #52]	; 0x34
 800a4e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ea:	61fb      	str	r3, [r7, #28]
 800a4ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ee:	69b9      	ldr	r1, [r7, #24]
 800a4f0:	69fa      	ldr	r2, [r7, #28]
 800a4f2:	e841 2300 	strex	r3, r2, [r1]
 800a4f6:	617b      	str	r3, [r7, #20]
   return(result);
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1e6      	bne.n	800a4cc <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4fe:	e002      	b.n	800a506 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a500:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a502:	f7ff fa4d 	bl	80099a0 <HAL_UART_TxCpltCallback>
}
 800a506:	bf00      	nop
 800a508:	3740      	adds	r7, #64	; 0x40
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a51a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f7ff fa49 	bl	80099b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a522:	bf00      	nop
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b09c      	sub	sp, #112	; 0x70
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a536:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a540:	d071      	beq.n	800a626 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a544:	2200      	movs	r2, #0
 800a546:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a552:	e853 3f00 	ldrex	r3, [r3]
 800a556:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a55a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a55e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	461a      	mov	r2, r3
 800a566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a568:	65bb      	str	r3, [r7, #88]	; 0x58
 800a56a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a56e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a570:	e841 2300 	strex	r3, r2, [r1]
 800a574:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1e6      	bne.n	800a54a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3308      	adds	r3, #8
 800a582:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a586:	e853 3f00 	ldrex	r3, [r3]
 800a58a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a58e:	f023 0301 	bic.w	r3, r3, #1
 800a592:	667b      	str	r3, [r7, #100]	; 0x64
 800a594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	3308      	adds	r3, #8
 800a59a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a59c:	647a      	str	r2, [r7, #68]	; 0x44
 800a59e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a5a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5a4:	e841 2300 	strex	r3, r2, [r1]
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d1e5      	bne.n	800a57c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ba:	e853 3f00 	ldrex	r3, [r3]
 800a5be:	623b      	str	r3, [r7, #32]
   return(result);
 800a5c0:	6a3b      	ldr	r3, [r7, #32]
 800a5c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5c6:	663b      	str	r3, [r7, #96]	; 0x60
 800a5c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5d0:	633a      	str	r2, [r7, #48]	; 0x30
 800a5d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d8:	e841 2300 	strex	r3, r2, [r1]
 800a5dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d1e5      	bne.n	800a5b0 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a5e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5e6:	2220      	movs	r2, #32
 800a5e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d118      	bne.n	800a626 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	e853 3f00 	ldrex	r3, [r3]
 800a600:	60fb      	str	r3, [r7, #12]
   return(result);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f023 0310 	bic.w	r3, r3, #16
 800a608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a60a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a612:	61fb      	str	r3, [r7, #28]
 800a614:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a616:	69b9      	ldr	r1, [r7, #24]
 800a618:	69fa      	ldr	r2, [r7, #28]
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	617b      	str	r3, [r7, #20]
   return(result);
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1e6      	bne.n	800a5f4 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a628:	2200      	movs	r2, #0
 800a62a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a62c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a62e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a630:	2b01      	cmp	r3, #1
 800a632:	d107      	bne.n	800a644 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a636:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a63a:	4619      	mov	r1, r3
 800a63c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a63e:	f7ff f9e1 	bl	8009a04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a642:	e002      	b.n	800a64a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a644:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a646:	f7ff f9bf 	bl	80099c8 <HAL_UART_RxCpltCallback>
}
 800a64a:	bf00      	nop
 800a64c:	3770      	adds	r7, #112	; 0x70
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b084      	sub	sp, #16
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2201      	movs	r2, #1
 800a664:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d109      	bne.n	800a682 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a674:	085b      	lsrs	r3, r3, #1
 800a676:	b29b      	uxth	r3, r3
 800a678:	4619      	mov	r1, r3
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f7ff f9c2 	bl	8009a04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a680:	e002      	b.n	800a688 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f7ff f9aa 	bl	80099dc <HAL_UART_RxHalfCpltCallback>
}
 800a688:	bf00      	nop
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b086      	sub	sp, #24
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a69c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	689b      	ldr	r3, [r3, #8]
 800a6b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b6:	2b80      	cmp	r3, #128	; 0x80
 800a6b8:	d109      	bne.n	800a6ce <UART_DMAError+0x3e>
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	2b21      	cmp	r3, #33	; 0x21
 800a6be:	d106      	bne.n	800a6ce <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a6c8:	6978      	ldr	r0, [r7, #20]
 800a6ca:	f7ff fe4b 	bl	800a364 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d8:	2b40      	cmp	r3, #64	; 0x40
 800a6da:	d109      	bne.n	800a6f0 <UART_DMAError+0x60>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2b22      	cmp	r3, #34	; 0x22
 800a6e0:	d106      	bne.n	800a6f0 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a6ea:	6978      	ldr	r0, [r7, #20]
 800a6ec:	f7ff fe60 	bl	800a3b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6f6:	f043 0210 	orr.w	r2, r3, #16
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a700:	6978      	ldr	r0, [r7, #20]
 800a702:	f7ff f975 	bl	80099f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a706:	bf00      	nop
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b084      	sub	sp, #16
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a71a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2200      	movs	r2, #0
 800a720:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff f95f 	bl	80099f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a732:	bf00      	nop
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b088      	sub	sp, #32
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	e853 3f00 	ldrex	r3, [r3]
 800a74e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a756:	61fb      	str	r3, [r7, #28]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	461a      	mov	r2, r3
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	61bb      	str	r3, [r7, #24]
 800a762:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a764:	6979      	ldr	r1, [r7, #20]
 800a766:	69ba      	ldr	r2, [r7, #24]
 800a768:	e841 2300 	strex	r3, r2, [r1]
 800a76c:	613b      	str	r3, [r7, #16]
   return(result);
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e6      	bne.n	800a742 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2220      	movs	r2, #32
 800a778:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7ff f90d 	bl	80099a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a786:	bf00      	nop
 800a788:	3720      	adds	r7, #32
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
	...

0800a790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a790:	b084      	sub	sp, #16
 800a792:	b580      	push	{r7, lr}
 800a794:	b084      	sub	sp, #16
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
 800a79a:	f107 001c 	add.w	r0, r7, #28
 800a79e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d120      	bne.n	800a7ea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	4b20      	ldr	r3, [pc, #128]	; (800a83c <USB_CoreInit+0xac>)
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	687a      	ldr	r2, [r7, #4]
 800a7be:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d105      	bne.n	800a7de <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fa96 	bl	800ad10 <USB_CoreReset>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	73fb      	strb	r3, [r7, #15]
 800a7e8:	e010      	b.n	800a80c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 fa8a 	bl	800ad10 <USB_CoreReset>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a804:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d10b      	bne.n	800a82a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	f043 0206 	orr.w	r2, r3, #6
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	f043 0220 	orr.w	r2, r3, #32
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a82a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a836:	b004      	add	sp, #16
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	ffbdffbf 	.word	0xffbdffbf

0800a840 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a840:	b480      	push	{r7}
 800a842:	b083      	sub	sp, #12
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	f023 0201 	bic.w	r2, r3, #1
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a854:	2300      	movs	r3, #0
}
 800a856:	4618      	mov	r0, r3
 800a858:	370c      	adds	r7, #12
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b084      	sub	sp, #16
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
 800a86a:	460b      	mov	r3, r1
 800a86c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a87e:	78fb      	ldrb	r3, [r7, #3]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d115      	bne.n	800a8b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a890:	2001      	movs	r0, #1
 800a892:	f7f7 ff65 	bl	8002760 <HAL_Delay>
      ms++;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	3301      	adds	r3, #1
 800a89a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fa29 	bl	800acf4 <USB_GetMode>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d01e      	beq.n	800a8e6 <USB_SetCurrentMode+0x84>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2b31      	cmp	r3, #49	; 0x31
 800a8ac:	d9f0      	bls.n	800a890 <USB_SetCurrentMode+0x2e>
 800a8ae:	e01a      	b.n	800a8e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8b0:	78fb      	ldrb	r3, [r7, #3]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d115      	bne.n	800a8e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a8c2:	2001      	movs	r0, #1
 800a8c4:	f7f7 ff4c 	bl	8002760 <HAL_Delay>
      ms++;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	3301      	adds	r3, #1
 800a8cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fa10 	bl	800acf4 <USB_GetMode>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d005      	beq.n	800a8e6 <USB_SetCurrentMode+0x84>
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2b31      	cmp	r3, #49	; 0x31
 800a8de:	d9f0      	bls.n	800a8c2 <USB_SetCurrentMode+0x60>
 800a8e0:	e001      	b.n	800a8e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e005      	b.n	800a8f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	2b32      	cmp	r3, #50	; 0x32
 800a8ea:	d101      	bne.n	800a8f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e000      	b.n	800a8f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
	...

0800a8fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	b580      	push	{r7, lr}
 800a900:	b086      	sub	sp, #24
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a90a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a916:	2300      	movs	r3, #0
 800a918:	613b      	str	r3, [r7, #16]
 800a91a:	e009      	b.n	800a930 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a91c:	687a      	ldr	r2, [r7, #4]
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	3340      	adds	r3, #64	; 0x40
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	2200      	movs	r2, #0
 800a928:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	3301      	adds	r3, #1
 800a92e:	613b      	str	r3, [r7, #16]
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	2b0e      	cmp	r3, #14
 800a934:	d9f2      	bls.n	800a91c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d11c      	bne.n	800a976 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a94a:	f043 0302 	orr.w	r3, r3, #2
 800a94e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a954:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	e005      	b.n	800a982 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a988:	461a      	mov	r2, r3
 800a98a:	2300      	movs	r3, #0
 800a98c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a994:	4619      	mov	r1, r3
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a99c:	461a      	mov	r2, r3
 800a99e:	680b      	ldr	r3, [r1, #0]
 800a9a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a4:	2b01      	cmp	r3, #1
 800a9a6:	d10c      	bne.n	800a9c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d104      	bne.n	800a9b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a9ae:	2100      	movs	r1, #0
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 f965 	bl	800ac80 <USB_SetDevSpeed>
 800a9b6:	e008      	b.n	800a9ca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a9b8:	2101      	movs	r1, #1
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	f000 f960 	bl	800ac80 <USB_SetDevSpeed>
 800a9c0:	e003      	b.n	800a9ca <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a9c2:	2103      	movs	r1, #3
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f000 f95b 	bl	800ac80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a9ca:	2110      	movs	r1, #16
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 f8f3 	bl	800abb8 <USB_FlushTxFifo>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f91f 	bl	800ac20 <USB_FlushRxFifo>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9fe:	461a      	mov	r2, r3
 800aa00:	2300      	movs	r3, #0
 800aa02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa10:	2300      	movs	r3, #0
 800aa12:	613b      	str	r3, [r7, #16]
 800aa14:	e043      	b.n	800aa9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	015a      	lsls	r2, r3, #5
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa2c:	d118      	bne.n	800aa60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10a      	bne.n	800aa4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	015a      	lsls	r2, r3, #5
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa40:	461a      	mov	r2, r3
 800aa42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa46:	6013      	str	r3, [r2, #0]
 800aa48:	e013      	b.n	800aa72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	015a      	lsls	r2, r3, #5
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	4413      	add	r3, r2
 800aa52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa56:	461a      	mov	r2, r3
 800aa58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa5c:	6013      	str	r3, [r2, #0]
 800aa5e:	e008      	b.n	800aa72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	015a      	lsls	r2, r3, #5
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	4413      	add	r3, r2
 800aa68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa6c:	461a      	mov	r2, r3
 800aa6e:	2300      	movs	r3, #0
 800aa70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	015a      	lsls	r2, r3, #5
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	4413      	add	r3, r2
 800aa7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa7e:	461a      	mov	r2, r3
 800aa80:	2300      	movs	r3, #0
 800aa82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa90:	461a      	mov	r2, r3
 800aa92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	3301      	adds	r3, #1
 800aa9c:	613b      	str	r3, [r7, #16]
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa0:	693a      	ldr	r2, [r7, #16]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d3b7      	bcc.n	800aa16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	613b      	str	r3, [r7, #16]
 800aaaa:	e043      	b.n	800ab34 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	015a      	lsls	r2, r3, #5
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4413      	add	r3, r2
 800aab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aabe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aac2:	d118      	bne.n	800aaf6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d10a      	bne.n	800aae0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	015a      	lsls	r2, r3, #5
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	4413      	add	r3, r2
 800aad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad6:	461a      	mov	r2, r3
 800aad8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aadc:	6013      	str	r3, [r2, #0]
 800aade:	e013      	b.n	800ab08 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	015a      	lsls	r2, r3, #5
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	4413      	add	r3, r2
 800aae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaec:	461a      	mov	r2, r3
 800aaee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aaf2:	6013      	str	r3, [r2, #0]
 800aaf4:	e008      	b.n	800ab08 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	015a      	lsls	r2, r3, #5
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	4413      	add	r3, r2
 800aafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab02:	461a      	mov	r2, r3
 800ab04:	2300      	movs	r3, #0
 800ab06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ab08:	693b      	ldr	r3, [r7, #16]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab14:	461a      	mov	r2, r3
 800ab16:	2300      	movs	r3, #0
 800ab18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	015a      	lsls	r2, r3, #5
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	4413      	add	r3, r2
 800ab22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab26:	461a      	mov	r2, r3
 800ab28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	3301      	adds	r3, #1
 800ab32:	613b      	str	r3, [r7, #16]
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	693a      	ldr	r2, [r7, #16]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d3b7      	bcc.n	800aaac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab42:	691b      	ldr	r3, [r3, #16]
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	2200      	movs	r2, #0
 800ab54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d105      	bne.n	800ab70 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	699b      	ldr	r3, [r3, #24]
 800ab68:	f043 0210 	orr.w	r2, r3, #16
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	699a      	ldr	r2, [r3, #24]
 800ab74:	4b0e      	ldr	r3, [pc, #56]	; (800abb0 <USB_DevInit+0x2b4>)
 800ab76:	4313      	orrs	r3, r2
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d005      	beq.n	800ab8e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	f043 0208 	orr.w	r2, r3, #8
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d105      	bne.n	800aba0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	699a      	ldr	r2, [r3, #24]
 800ab98:	4b06      	ldr	r3, [pc, #24]	; (800abb4 <USB_DevInit+0x2b8>)
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3718      	adds	r7, #24
 800aba6:	46bd      	mov	sp, r7
 800aba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abac:	b004      	add	sp, #16
 800abae:	4770      	bx	lr
 800abb0:	803c3800 	.word	0x803c3800
 800abb4:	40000004 	.word	0x40000004

0800abb8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800abc2:	2300      	movs	r3, #0
 800abc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	3301      	adds	r3, #1
 800abca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	4a13      	ldr	r2, [pc, #76]	; (800ac1c <USB_FlushTxFifo+0x64>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d901      	bls.n	800abd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800abd4:	2303      	movs	r3, #3
 800abd6:	e01b      	b.n	800ac10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	daf2      	bge.n	800abc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	019b      	lsls	r3, r3, #6
 800abe8:	f043 0220 	orr.w	r2, r3, #32
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	3301      	adds	r3, #1
 800abf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	4a08      	ldr	r2, [pc, #32]	; (800ac1c <USB_FlushTxFifo+0x64>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d901      	bls.n	800ac02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800abfe:	2303      	movs	r3, #3
 800ac00:	e006      	b.n	800ac10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	f003 0320 	and.w	r3, r3, #32
 800ac0a:	2b20      	cmp	r3, #32
 800ac0c:	d0f0      	beq.n	800abf0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	00030d40 	.word	0x00030d40

0800ac20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b085      	sub	sp, #20
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	4a11      	ldr	r2, [pc, #68]	; (800ac7c <USB_FlushRxFifo+0x5c>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d901      	bls.n	800ac3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac3a:	2303      	movs	r3, #3
 800ac3c:	e018      	b.n	800ac70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	daf2      	bge.n	800ac2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac46:	2300      	movs	r3, #0
 800ac48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2210      	movs	r2, #16
 800ac4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	3301      	adds	r3, #1
 800ac54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	4a08      	ldr	r2, [pc, #32]	; (800ac7c <USB_FlushRxFifo+0x5c>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d901      	bls.n	800ac62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac5e:	2303      	movs	r3, #3
 800ac60:	e006      	b.n	800ac70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	f003 0310 	and.w	r3, r3, #16
 800ac6a:	2b10      	cmp	r3, #16
 800ac6c:	d0f0      	beq.n	800ac50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7a:	4770      	bx	lr
 800ac7c:	00030d40 	.word	0x00030d40

0800ac80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b085      	sub	sp, #20
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	78fb      	ldrb	r3, [r7, #3]
 800ac9a:	68f9      	ldr	r1, [r7, #12]
 800ac9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aca0:	4313      	orrs	r3, r2
 800aca2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b085      	sub	sp, #20
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800accc:	f023 0303 	bic.w	r3, r3, #3
 800acd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd8:	685b      	ldr	r3, [r3, #4]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ace0:	f043 0302 	orr.w	r3, r3, #2
 800ace4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	f003 0301 	and.w	r3, r3, #1
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4a13      	ldr	r2, [pc, #76]	; (800ad74 <USB_CoreReset+0x64>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d901      	bls.n	800ad2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e01b      	b.n	800ad66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	daf2      	bge.n	800ad1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad36:	2300      	movs	r3, #0
 800ad38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	691b      	ldr	r3, [r3, #16]
 800ad3e:	f043 0201 	orr.w	r2, r3, #1
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	4a09      	ldr	r2, [pc, #36]	; (800ad74 <USB_CoreReset+0x64>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d901      	bls.n	800ad58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e006      	b.n	800ad66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	f003 0301 	and.w	r3, r3, #1
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d0f0      	beq.n	800ad46 <USB_CoreReset+0x36>

  return HAL_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3714      	adds	r7, #20
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	00030d40 	.word	0x00030d40

0800ad78 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b084      	sub	sp, #16
 800ad7c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ad7e:	4b8d      	ldr	r3, [pc, #564]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ad80:	22c0      	movs	r2, #192	; 0xc0
 800ad82:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ad84:	4b8b      	ldr	r3, [pc, #556]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ad86:	22a8      	movs	r2, #168	; 0xa8
 800ad88:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ad8a:	4b8a      	ldr	r3, [pc, #552]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800ad90:	4b88      	ldr	r3, [pc, #544]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ad92:	2202      	movs	r2, #2
 800ad94:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ad96:	4b88      	ldr	r3, [pc, #544]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ad98:	22ff      	movs	r2, #255	; 0xff
 800ad9a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ad9c:	4b86      	ldr	r3, [pc, #536]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ad9e:	22ff      	movs	r2, #255	; 0xff
 800ada0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ada2:	4b85      	ldr	r3, [pc, #532]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ada4:	22ff      	movs	r2, #255	; 0xff
 800ada6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ada8:	4b83      	ldr	r3, [pc, #524]	; (800afb8 <MX_LWIP_Init+0x240>)
 800adaa:	2200      	movs	r2, #0
 800adac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800adae:	4b83      	ldr	r3, [pc, #524]	; (800afbc <MX_LWIP_Init+0x244>)
 800adb0:	2200      	movs	r2, #0
 800adb2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800adb4:	4b81      	ldr	r3, [pc, #516]	; (800afbc <MX_LWIP_Init+0x244>)
 800adb6:	2200      	movs	r2, #0
 800adb8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800adba:	4b80      	ldr	r3, [pc, #512]	; (800afbc <MX_LWIP_Init+0x244>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800adc0:	4b7e      	ldr	r3, [pc, #504]	; (800afbc <MX_LWIP_Init+0x244>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800adc6:	f000 fd15 	bl	800b7f4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800adca:	4b7a      	ldr	r3, [pc, #488]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	061a      	lsls	r2, r3, #24
 800add0:	4b78      	ldr	r3, [pc, #480]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800add2:	785b      	ldrb	r3, [r3, #1]
 800add4:	041b      	lsls	r3, r3, #16
 800add6:	431a      	orrs	r2, r3
 800add8:	4b76      	ldr	r3, [pc, #472]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800adda:	789b      	ldrb	r3, [r3, #2]
 800addc:	021b      	lsls	r3, r3, #8
 800adde:	4313      	orrs	r3, r2
 800ade0:	4a74      	ldr	r2, [pc, #464]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ade2:	78d2      	ldrb	r2, [r2, #3]
 800ade4:	4313      	orrs	r3, r2
 800ade6:	061a      	lsls	r2, r3, #24
 800ade8:	4b72      	ldr	r3, [pc, #456]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800adea:	781b      	ldrb	r3, [r3, #0]
 800adec:	0619      	lsls	r1, r3, #24
 800adee:	4b71      	ldr	r3, [pc, #452]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800adf0:	785b      	ldrb	r3, [r3, #1]
 800adf2:	041b      	lsls	r3, r3, #16
 800adf4:	4319      	orrs	r1, r3
 800adf6:	4b6f      	ldr	r3, [pc, #444]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800adf8:	789b      	ldrb	r3, [r3, #2]
 800adfa:	021b      	lsls	r3, r3, #8
 800adfc:	430b      	orrs	r3, r1
 800adfe:	496d      	ldr	r1, [pc, #436]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ae00:	78c9      	ldrb	r1, [r1, #3]
 800ae02:	430b      	orrs	r3, r1
 800ae04:	021b      	lsls	r3, r3, #8
 800ae06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae0a:	431a      	orrs	r2, r3
 800ae0c:	4b69      	ldr	r3, [pc, #420]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	0619      	lsls	r1, r3, #24
 800ae12:	4b68      	ldr	r3, [pc, #416]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ae14:	785b      	ldrb	r3, [r3, #1]
 800ae16:	041b      	lsls	r3, r3, #16
 800ae18:	4319      	orrs	r1, r3
 800ae1a:	4b66      	ldr	r3, [pc, #408]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ae1c:	789b      	ldrb	r3, [r3, #2]
 800ae1e:	021b      	lsls	r3, r3, #8
 800ae20:	430b      	orrs	r3, r1
 800ae22:	4964      	ldr	r1, [pc, #400]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ae24:	78c9      	ldrb	r1, [r1, #3]
 800ae26:	430b      	orrs	r3, r1
 800ae28:	0a1b      	lsrs	r3, r3, #8
 800ae2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	4b60      	ldr	r3, [pc, #384]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	0619      	lsls	r1, r3, #24
 800ae36:	4b5f      	ldr	r3, [pc, #380]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ae38:	785b      	ldrb	r3, [r3, #1]
 800ae3a:	041b      	lsls	r3, r3, #16
 800ae3c:	4319      	orrs	r1, r3
 800ae3e:	4b5d      	ldr	r3, [pc, #372]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ae40:	789b      	ldrb	r3, [r3, #2]
 800ae42:	021b      	lsls	r3, r3, #8
 800ae44:	430b      	orrs	r3, r1
 800ae46:	495b      	ldr	r1, [pc, #364]	; (800afb4 <MX_LWIP_Init+0x23c>)
 800ae48:	78c9      	ldrb	r1, [r1, #3]
 800ae4a:	430b      	orrs	r3, r1
 800ae4c:	0e1b      	lsrs	r3, r3, #24
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	4a5b      	ldr	r2, [pc, #364]	; (800afc0 <MX_LWIP_Init+0x248>)
 800ae52:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ae54:	4b58      	ldr	r3, [pc, #352]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	061a      	lsls	r2, r3, #24
 800ae5a:	4b57      	ldr	r3, [pc, #348]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ae5c:	785b      	ldrb	r3, [r3, #1]
 800ae5e:	041b      	lsls	r3, r3, #16
 800ae60:	431a      	orrs	r2, r3
 800ae62:	4b55      	ldr	r3, [pc, #340]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ae64:	789b      	ldrb	r3, [r3, #2]
 800ae66:	021b      	lsls	r3, r3, #8
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	4a53      	ldr	r2, [pc, #332]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ae6c:	78d2      	ldrb	r2, [r2, #3]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	061a      	lsls	r2, r3, #24
 800ae72:	4b51      	ldr	r3, [pc, #324]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	0619      	lsls	r1, r3, #24
 800ae78:	4b4f      	ldr	r3, [pc, #316]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ae7a:	785b      	ldrb	r3, [r3, #1]
 800ae7c:	041b      	lsls	r3, r3, #16
 800ae7e:	4319      	orrs	r1, r3
 800ae80:	4b4d      	ldr	r3, [pc, #308]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ae82:	789b      	ldrb	r3, [r3, #2]
 800ae84:	021b      	lsls	r3, r3, #8
 800ae86:	430b      	orrs	r3, r1
 800ae88:	494b      	ldr	r1, [pc, #300]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ae8a:	78c9      	ldrb	r1, [r1, #3]
 800ae8c:	430b      	orrs	r3, r1
 800ae8e:	021b      	lsls	r3, r3, #8
 800ae90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae94:	431a      	orrs	r2, r3
 800ae96:	4b48      	ldr	r3, [pc, #288]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	0619      	lsls	r1, r3, #24
 800ae9c:	4b46      	ldr	r3, [pc, #280]	; (800afb8 <MX_LWIP_Init+0x240>)
 800ae9e:	785b      	ldrb	r3, [r3, #1]
 800aea0:	041b      	lsls	r3, r3, #16
 800aea2:	4319      	orrs	r1, r3
 800aea4:	4b44      	ldr	r3, [pc, #272]	; (800afb8 <MX_LWIP_Init+0x240>)
 800aea6:	789b      	ldrb	r3, [r3, #2]
 800aea8:	021b      	lsls	r3, r3, #8
 800aeaa:	430b      	orrs	r3, r1
 800aeac:	4942      	ldr	r1, [pc, #264]	; (800afb8 <MX_LWIP_Init+0x240>)
 800aeae:	78c9      	ldrb	r1, [r1, #3]
 800aeb0:	430b      	orrs	r3, r1
 800aeb2:	0a1b      	lsrs	r3, r3, #8
 800aeb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aeb8:	431a      	orrs	r2, r3
 800aeba:	4b3f      	ldr	r3, [pc, #252]	; (800afb8 <MX_LWIP_Init+0x240>)
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	0619      	lsls	r1, r3, #24
 800aec0:	4b3d      	ldr	r3, [pc, #244]	; (800afb8 <MX_LWIP_Init+0x240>)
 800aec2:	785b      	ldrb	r3, [r3, #1]
 800aec4:	041b      	lsls	r3, r3, #16
 800aec6:	4319      	orrs	r1, r3
 800aec8:	4b3b      	ldr	r3, [pc, #236]	; (800afb8 <MX_LWIP_Init+0x240>)
 800aeca:	789b      	ldrb	r3, [r3, #2]
 800aecc:	021b      	lsls	r3, r3, #8
 800aece:	430b      	orrs	r3, r1
 800aed0:	4939      	ldr	r1, [pc, #228]	; (800afb8 <MX_LWIP_Init+0x240>)
 800aed2:	78c9      	ldrb	r1, [r1, #3]
 800aed4:	430b      	orrs	r3, r1
 800aed6:	0e1b      	lsrs	r3, r3, #24
 800aed8:	4313      	orrs	r3, r2
 800aeda:	4a3a      	ldr	r2, [pc, #232]	; (800afc4 <MX_LWIP_Init+0x24c>)
 800aedc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800aede:	4b37      	ldr	r3, [pc, #220]	; (800afbc <MX_LWIP_Init+0x244>)
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	061a      	lsls	r2, r3, #24
 800aee4:	4b35      	ldr	r3, [pc, #212]	; (800afbc <MX_LWIP_Init+0x244>)
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	041b      	lsls	r3, r3, #16
 800aeea:	431a      	orrs	r2, r3
 800aeec:	4b33      	ldr	r3, [pc, #204]	; (800afbc <MX_LWIP_Init+0x244>)
 800aeee:	789b      	ldrb	r3, [r3, #2]
 800aef0:	021b      	lsls	r3, r3, #8
 800aef2:	4313      	orrs	r3, r2
 800aef4:	4a31      	ldr	r2, [pc, #196]	; (800afbc <MX_LWIP_Init+0x244>)
 800aef6:	78d2      	ldrb	r2, [r2, #3]
 800aef8:	4313      	orrs	r3, r2
 800aefa:	061a      	lsls	r2, r3, #24
 800aefc:	4b2f      	ldr	r3, [pc, #188]	; (800afbc <MX_LWIP_Init+0x244>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	0619      	lsls	r1, r3, #24
 800af02:	4b2e      	ldr	r3, [pc, #184]	; (800afbc <MX_LWIP_Init+0x244>)
 800af04:	785b      	ldrb	r3, [r3, #1]
 800af06:	041b      	lsls	r3, r3, #16
 800af08:	4319      	orrs	r1, r3
 800af0a:	4b2c      	ldr	r3, [pc, #176]	; (800afbc <MX_LWIP_Init+0x244>)
 800af0c:	789b      	ldrb	r3, [r3, #2]
 800af0e:	021b      	lsls	r3, r3, #8
 800af10:	430b      	orrs	r3, r1
 800af12:	492a      	ldr	r1, [pc, #168]	; (800afbc <MX_LWIP_Init+0x244>)
 800af14:	78c9      	ldrb	r1, [r1, #3]
 800af16:	430b      	orrs	r3, r1
 800af18:	021b      	lsls	r3, r3, #8
 800af1a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af1e:	431a      	orrs	r2, r3
 800af20:	4b26      	ldr	r3, [pc, #152]	; (800afbc <MX_LWIP_Init+0x244>)
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	0619      	lsls	r1, r3, #24
 800af26:	4b25      	ldr	r3, [pc, #148]	; (800afbc <MX_LWIP_Init+0x244>)
 800af28:	785b      	ldrb	r3, [r3, #1]
 800af2a:	041b      	lsls	r3, r3, #16
 800af2c:	4319      	orrs	r1, r3
 800af2e:	4b23      	ldr	r3, [pc, #140]	; (800afbc <MX_LWIP_Init+0x244>)
 800af30:	789b      	ldrb	r3, [r3, #2]
 800af32:	021b      	lsls	r3, r3, #8
 800af34:	430b      	orrs	r3, r1
 800af36:	4921      	ldr	r1, [pc, #132]	; (800afbc <MX_LWIP_Init+0x244>)
 800af38:	78c9      	ldrb	r1, [r1, #3]
 800af3a:	430b      	orrs	r3, r1
 800af3c:	0a1b      	lsrs	r3, r3, #8
 800af3e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800af42:	431a      	orrs	r2, r3
 800af44:	4b1d      	ldr	r3, [pc, #116]	; (800afbc <MX_LWIP_Init+0x244>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	0619      	lsls	r1, r3, #24
 800af4a:	4b1c      	ldr	r3, [pc, #112]	; (800afbc <MX_LWIP_Init+0x244>)
 800af4c:	785b      	ldrb	r3, [r3, #1]
 800af4e:	041b      	lsls	r3, r3, #16
 800af50:	4319      	orrs	r1, r3
 800af52:	4b1a      	ldr	r3, [pc, #104]	; (800afbc <MX_LWIP_Init+0x244>)
 800af54:	789b      	ldrb	r3, [r3, #2]
 800af56:	021b      	lsls	r3, r3, #8
 800af58:	430b      	orrs	r3, r1
 800af5a:	4918      	ldr	r1, [pc, #96]	; (800afbc <MX_LWIP_Init+0x244>)
 800af5c:	78c9      	ldrb	r1, [r1, #3]
 800af5e:	430b      	orrs	r3, r1
 800af60:	0e1b      	lsrs	r3, r3, #24
 800af62:	4313      	orrs	r3, r2
 800af64:	4a18      	ldr	r2, [pc, #96]	; (800afc8 <MX_LWIP_Init+0x250>)
 800af66:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800af68:	4b18      	ldr	r3, [pc, #96]	; (800afcc <MX_LWIP_Init+0x254>)
 800af6a:	9302      	str	r3, [sp, #8]
 800af6c:	4b18      	ldr	r3, [pc, #96]	; (800afd0 <MX_LWIP_Init+0x258>)
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	2300      	movs	r3, #0
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	4b14      	ldr	r3, [pc, #80]	; (800afc8 <MX_LWIP_Init+0x250>)
 800af76:	4a13      	ldr	r2, [pc, #76]	; (800afc4 <MX_LWIP_Init+0x24c>)
 800af78:	4911      	ldr	r1, [pc, #68]	; (800afc0 <MX_LWIP_Init+0x248>)
 800af7a:	4816      	ldr	r0, [pc, #88]	; (800afd4 <MX_LWIP_Init+0x25c>)
 800af7c:	f001 f926 	bl	800c1cc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800af80:	4814      	ldr	r0, [pc, #80]	; (800afd4 <MX_LWIP_Init+0x25c>)
 800af82:	f001 fad5 	bl	800c530 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800af86:	4b13      	ldr	r3, [pc, #76]	; (800afd4 <MX_LWIP_Init+0x25c>)
 800af88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af8c:	089b      	lsrs	r3, r3, #2
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b00      	cmp	r3, #0
 800af96:	d003      	beq.n	800afa0 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800af98:	480e      	ldr	r0, [pc, #56]	; (800afd4 <MX_LWIP_Init+0x25c>)
 800af9a:	f001 fad9 	bl	800c550 <netif_set_up>
 800af9e:	e002      	b.n	800afa6 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800afa0:	480c      	ldr	r0, [pc, #48]	; (800afd4 <MX_LWIP_Init+0x25c>)
 800afa2:	f001 fb41 	bl	800c628 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800afa6:	490c      	ldr	r1, [pc, #48]	; (800afd8 <MX_LWIP_Init+0x260>)
 800afa8:	480a      	ldr	r0, [pc, #40]	; (800afd4 <MX_LWIP_Init+0x25c>)
 800afaa:	f001 fbd3 	bl	800c754 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800afae:	bf00      	nop
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	20000f10 	.word	0x20000f10
 800afb8:	20000f14 	.word	0x20000f14
 800afbc:	20000f18 	.word	0x20000f18
 800afc0:	20000f04 	.word	0x20000f04
 800afc4:	20000f08 	.word	0x20000f08
 800afc8:	20000f0c 	.word	0x20000f0c
 800afcc:	08015879 	.word	0x08015879
 800afd0:	0800b2f1 	.word	0x0800b2f1
 800afd4:	20000ed0 	.word	0x20000ed0
 800afd8:	0800afdd 	.word	0x0800afdd

0800afdc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <SCB_InvalidateDCache_by_Addr>:
{
 800aff0:	b480      	push	{r7}
 800aff2:	b087      	sub	sp, #28
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800b002:	2320      	movs	r3, #32
 800b004:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b006:	f3bf 8f4f 	dsb	sy
}
 800b00a:	bf00      	nop
    while (op_size > 0) {
 800b00c:	e00b      	b.n	800b026 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800b00e:	4a0d      	ldr	r2, [pc, #52]	; (800b044 <SCB_InvalidateDCache_by_Addr+0x54>)
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	4413      	add	r3, r2
 800b01c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	dcf0      	bgt.n	800b00e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800b02c:	f3bf 8f4f 	dsb	sy
}
 800b030:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b032:	f3bf 8f6f 	isb	sy
}
 800b036:	bf00      	nop
}
 800b038:	bf00      	nop
 800b03a:	371c      	adds	r7, #28
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr
 800b044:	e000ed00 	.word	0xe000ed00

0800b048 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b050:	2300      	movs	r3, #0
 800b052:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b054:	4b40      	ldr	r3, [pc, #256]	; (800b158 <low_level_init+0x110>)
 800b056:	4a41      	ldr	r2, [pc, #260]	; (800b15c <low_level_init+0x114>)
 800b058:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b05a:	2300      	movs	r3, #0
 800b05c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b05e:	2380      	movs	r3, #128	; 0x80
 800b060:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b062:	23e1      	movs	r3, #225	; 0xe1
 800b064:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b066:	2300      	movs	r3, #0
 800b068:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b06a:	2300      	movs	r3, #0
 800b06c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b06e:	2300      	movs	r3, #0
 800b070:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b072:	4a39      	ldr	r2, [pc, #228]	; (800b158 <low_level_init+0x110>)
 800b074:	f107 0308 	add.w	r3, r7, #8
 800b078:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b07a:	4b37      	ldr	r3, [pc, #220]	; (800b158 <low_level_init+0x110>)
 800b07c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b080:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b082:	4b35      	ldr	r3, [pc, #212]	; (800b158 <low_level_init+0x110>)
 800b084:	4a36      	ldr	r2, [pc, #216]	; (800b160 <low_level_init+0x118>)
 800b086:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b088:	4b33      	ldr	r3, [pc, #204]	; (800b158 <low_level_init+0x110>)
 800b08a:	4a36      	ldr	r2, [pc, #216]	; (800b164 <low_level_init+0x11c>)
 800b08c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b08e:	4b32      	ldr	r3, [pc, #200]	; (800b158 <low_level_init+0x110>)
 800b090:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b094:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b096:	4830      	ldr	r0, [pc, #192]	; (800b158 <low_level_init+0x110>)
 800b098:	f7f8 f8bc 	bl	8003214 <HAL_ETH_Init>
 800b09c:	4603      	mov	r3, r0
 800b09e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b0a0:	2238      	movs	r2, #56	; 0x38
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	4830      	ldr	r0, [pc, #192]	; (800b168 <low_level_init+0x120>)
 800b0a6:	f00b f865 	bl	8016174 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b0aa:	4b2f      	ldr	r3, [pc, #188]	; (800b168 <low_level_init+0x120>)
 800b0ac:	2221      	movs	r2, #33	; 0x21
 800b0ae:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b0b0:	4b2d      	ldr	r3, [pc, #180]	; (800b168 <low_level_init+0x120>)
 800b0b2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800b0b6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b0b8:	4b2b      	ldr	r3, [pc, #172]	; (800b168 <low_level_init+0x120>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b0be:	482b      	ldr	r0, [pc, #172]	; (800b16c <low_level_init+0x124>)
 800b0c0:	f000 ff4c 	bl	800bf5c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2206      	movs	r2, #6
 800b0c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b0cc:	4b22      	ldr	r3, [pc, #136]	; (800b158 <low_level_init+0x110>)
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	781a      	ldrb	r2, [r3, #0]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b0d8:	4b1f      	ldr	r3, [pc, #124]	; (800b158 <low_level_init+0x110>)
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	785a      	ldrb	r2, [r3, #1]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b0e4:	4b1c      	ldr	r3, [pc, #112]	; (800b158 <low_level_init+0x110>)
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	789a      	ldrb	r2, [r3, #2]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b0f0:	4b19      	ldr	r3, [pc, #100]	; (800b158 <low_level_init+0x110>)
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	78da      	ldrb	r2, [r3, #3]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b0fc:	4b16      	ldr	r3, [pc, #88]	; (800b158 <low_level_init+0x110>)
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	791a      	ldrb	r2, [r3, #4]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b108:	4b13      	ldr	r3, [pc, #76]	; (800b158 <low_level_init+0x110>)
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	795a      	ldrb	r2, [r3, #5]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b11a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b122:	f043 030a 	orr.w	r3, r3, #10
 800b126:	b2da      	uxtb	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b12e:	4910      	ldr	r1, [pc, #64]	; (800b170 <low_level_init+0x128>)
 800b130:	4810      	ldr	r0, [pc, #64]	; (800b174 <low_level_init+0x12c>)
 800b132:	f7f7 f956 	bl	80023e2 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b136:	480f      	ldr	r0, [pc, #60]	; (800b174 <low_level_init+0x12c>)
 800b138:	f7f7 f985 	bl	8002446 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d103      	bne.n	800b14a <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 fa2a 	bl	800b59c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b148:	e001      	b.n	800b14e <low_level_init+0x106>
    Error_Handler();
 800b14a:	f7f6 f9e9 	bl	8001520 <Error_Handler>
}
 800b14e:	bf00      	nop
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	200058a8 	.word	0x200058a8
 800b15c:	40028000 	.word	0x40028000
 800b160:	20000130 	.word	0x20000130
 800b164:	20000090 	.word	0x20000090
 800b168:	20005958 	.word	0x20005958
 800b16c:	08019c60 	.word	0x08019c60
 800b170:	2000000c 	.word	0x2000000c
 800b174:	20005990 	.word	0x20005990

0800b178 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b092      	sub	sp, #72	; 0x48
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b182:	2300      	movs	r3, #0
 800b184:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800b186:	2300      	movs	r3, #0
 800b188:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b190:	f107 030c 	add.w	r3, r7, #12
 800b194:	2230      	movs	r2, #48	; 0x30
 800b196:	2100      	movs	r1, #0
 800b198:	4618      	mov	r0, r3
 800b19a:	f00a ffeb 	bl	8016174 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b19e:	f107 030c 	add.w	r3, r7, #12
 800b1a2:	2230      	movs	r2, #48	; 0x30
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f00a ffe4 	bl	8016174 <memset>

  for(q = p; q != NULL; q = q->next)
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	643b      	str	r3, [r7, #64]	; 0x40
 800b1b0:	e045      	b.n	800b23e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b1b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1b4:	2b03      	cmp	r3, #3
 800b1b6:	d902      	bls.n	800b1be <low_level_output+0x46>
      return ERR_IF;
 800b1b8:	f06f 030b 	mvn.w	r3, #11
 800b1bc:	e055      	b.n	800b26a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800b1be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1c0:	6859      	ldr	r1, [r3, #4]
 800b1c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	005b      	lsls	r3, r3, #1
 800b1c8:	4413      	add	r3, r2
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	3348      	adds	r3, #72	; 0x48
 800b1ce:	443b      	add	r3, r7
 800b1d0:	3b3c      	subs	r3, #60	; 0x3c
 800b1d2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b1d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1d6:	895b      	ldrh	r3, [r3, #10]
 800b1d8:	4619      	mov	r1, r3
 800b1da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1dc:	4613      	mov	r3, r2
 800b1de:	005b      	lsls	r3, r3, #1
 800b1e0:	4413      	add	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	3348      	adds	r3, #72	; 0x48
 800b1e6:	443b      	add	r3, r7
 800b1e8:	3b38      	subs	r3, #56	; 0x38
 800b1ea:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b1ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d011      	beq.n	800b216 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1f4:	1e5a      	subs	r2, r3, #1
 800b1f6:	f107 000c 	add.w	r0, r7, #12
 800b1fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	005b      	lsls	r3, r3, #1
 800b200:	440b      	add	r3, r1
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	18c1      	adds	r1, r0, r3
 800b206:	4613      	mov	r3, r2
 800b208:	005b      	lsls	r3, r3, #1
 800b20a:	4413      	add	r3, r2
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	3348      	adds	r3, #72	; 0x48
 800b210:	443b      	add	r3, r7
 800b212:	3b34      	subs	r3, #52	; 0x34
 800b214:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b216:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d109      	bne.n	800b232 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b21e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b220:	4613      	mov	r3, r2
 800b222:	005b      	lsls	r3, r3, #1
 800b224:	4413      	add	r3, r2
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	3348      	adds	r3, #72	; 0x48
 800b22a:	443b      	add	r3, r7
 800b22c:	3b34      	subs	r3, #52	; 0x34
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b232:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b234:	3301      	adds	r3, #1
 800b236:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	643b      	str	r3, [r7, #64]	; 0x40
 800b23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b240:	2b00      	cmp	r3, #0
 800b242:	d1b6      	bne.n	800b1b2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	891b      	ldrh	r3, [r3, #8]
 800b248:	461a      	mov	r2, r3
 800b24a:	4b0a      	ldr	r3, [pc, #40]	; (800b274 <low_level_output+0xfc>)
 800b24c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b24e:	4a09      	ldr	r2, [pc, #36]	; (800b274 <low_level_output+0xfc>)
 800b250:	f107 030c 	add.w	r3, r7, #12
 800b254:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b256:	4a07      	ldr	r2, [pc, #28]	; (800b274 <low_level_output+0xfc>)
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b25c:	2214      	movs	r2, #20
 800b25e:	4905      	ldr	r1, [pc, #20]	; (800b274 <low_level_output+0xfc>)
 800b260:	4805      	ldr	r0, [pc, #20]	; (800b278 <low_level_output+0x100>)
 800b262:	f7f8 f90b 	bl	800347c <HAL_ETH_Transmit>

  return errval;
 800b266:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3748      	adds	r7, #72	; 0x48
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	20005958 	.word	0x20005958
 800b278:	200058a8 	.word	0x200058a8

0800b27c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b284:	2300      	movs	r3, #0
 800b286:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b288:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <low_level_input+0x2c>)
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d105      	bne.n	800b29c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b290:	f107 030c 	add.w	r3, r7, #12
 800b294:	4619      	mov	r1, r3
 800b296:	4805      	ldr	r0, [pc, #20]	; (800b2ac <low_level_input+0x30>)
 800b298:	f7f8 f984 	bl	80035a4 <HAL_ETH_ReadData>
  }

  return p;
 800b29c:	68fb      	ldr	r3, [r7, #12]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	200058a4 	.word	0x200058a4
 800b2ac:	200058a8 	.word	0x200058a8

0800b2b0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b084      	sub	sp, #16
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff ffdd 	bl	800b27c <low_level_input>
 800b2c2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00a      	beq.n	800b2e0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	6879      	ldr	r1, [r7, #4]
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	4798      	blx	r3
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f001 fdba 	bl	800ce54 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d1ea      	bne.n	800b2bc <ethernetif_input+0xc>
}
 800b2e6:	bf00      	nop
 800b2e8:	bf00      	nop
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d106      	bne.n	800b30c <ethernetif_init+0x1c>
 800b2fe:	4b0e      	ldr	r3, [pc, #56]	; (800b338 <ethernetif_init+0x48>)
 800b300:	f240 127b 	movw	r2, #379	; 0x17b
 800b304:	490d      	ldr	r1, [pc, #52]	; (800b33c <ethernetif_init+0x4c>)
 800b306:	480e      	ldr	r0, [pc, #56]	; (800b340 <ethernetif_init+0x50>)
 800b308:	f00a ff3c 	bl	8016184 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2273      	movs	r2, #115	; 0x73
 800b310:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2274      	movs	r2, #116	; 0x74
 800b318:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a09      	ldr	r2, [pc, #36]	; (800b344 <ethernetif_init+0x54>)
 800b320:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	4a08      	ldr	r2, [pc, #32]	; (800b348 <ethernetif_init+0x58>)
 800b326:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f7ff fe8d 	bl	800b048 <low_level_init>

  return ERR_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3708      	adds	r7, #8
 800b334:	46bd      	mov	sp, r7
 800b336:	bd80      	pop	{r7, pc}
 800b338:	0801723c 	.word	0x0801723c
 800b33c:	08017258 	.word	0x08017258
 800b340:	08017268 	.word	0x08017268
 800b344:	08013d31 	.word	0x08013d31
 800b348:	0800b179 	.word	0x0800b179

0800b34c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b358:	68f9      	ldr	r1, [r7, #12]
 800b35a:	4807      	ldr	r0, [pc, #28]	; (800b378 <pbuf_free_custom+0x2c>)
 800b35c:	f000 fee0 	bl	800c120 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b360:	4b06      	ldr	r3, [pc, #24]	; (800b37c <pbuf_free_custom+0x30>)
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d102      	bne.n	800b36e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b368:	4b04      	ldr	r3, [pc, #16]	; (800b37c <pbuf_free_custom+0x30>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	701a      	strb	r2, [r3, #0]
  }
}
 800b36e:	bf00      	nop
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	08019c60 	.word	0x08019c60
 800b37c:	200058a4 	.word	0x200058a4

0800b380 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b384:	f7f7 f9e0 	bl	8002748 <HAL_GetTick>
 800b388:	4603      	mov	r3, r0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	bd80      	pop	{r7, pc}
	...

0800b390 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08e      	sub	sp, #56	; 0x38
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
 800b3a0:	605a      	str	r2, [r3, #4]
 800b3a2:	609a      	str	r2, [r3, #8]
 800b3a4:	60da      	str	r2, [r3, #12]
 800b3a6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a4e      	ldr	r2, [pc, #312]	; (800b4e8 <HAL_ETH_MspInit+0x158>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	f040 8096 	bne.w	800b4e0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b3b4:	4b4d      	ldr	r3, [pc, #308]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b3b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b8:	4a4c      	ldr	r2, [pc, #304]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b3ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b3be:	6313      	str	r3, [r2, #48]	; 0x30
 800b3c0:	4b4a      	ldr	r3, [pc, #296]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b3c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3c8:	623b      	str	r3, [r7, #32]
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	4b47      	ldr	r3, [pc, #284]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b3ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d0:	4a46      	ldr	r2, [pc, #280]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b3d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b3d6:	6313      	str	r3, [r2, #48]	; 0x30
 800b3d8:	4b44      	ldr	r3, [pc, #272]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b3da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3e0:	61fb      	str	r3, [r7, #28]
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	4b41      	ldr	r3, [pc, #260]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e8:	4a40      	ldr	r2, [pc, #256]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b3ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3ee:	6313      	str	r3, [r2, #48]	; 0x30
 800b3f0:	4b3e      	ldr	r3, [pc, #248]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3f8:	61bb      	str	r3, [r7, #24]
 800b3fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b3fc:	4b3b      	ldr	r3, [pc, #236]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b400:	4a3a      	ldr	r2, [pc, #232]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b402:	f043 0304 	orr.w	r3, r3, #4
 800b406:	6313      	str	r3, [r2, #48]	; 0x30
 800b408:	4b38      	ldr	r3, [pc, #224]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40c:	f003 0304 	and.w	r3, r3, #4
 800b410:	617b      	str	r3, [r7, #20]
 800b412:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b414:	4b35      	ldr	r3, [pc, #212]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b418:	4a34      	ldr	r2, [pc, #208]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b41a:	f043 0301 	orr.w	r3, r3, #1
 800b41e:	6313      	str	r3, [r2, #48]	; 0x30
 800b420:	4b32      	ldr	r3, [pc, #200]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b424:	f003 0301 	and.w	r3, r3, #1
 800b428:	613b      	str	r3, [r7, #16]
 800b42a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b42c:	4b2f      	ldr	r3, [pc, #188]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b430:	4a2e      	ldr	r2, [pc, #184]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b432:	f043 0302 	orr.w	r3, r3, #2
 800b436:	6313      	str	r3, [r2, #48]	; 0x30
 800b438:	4b2c      	ldr	r3, [pc, #176]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b43c:	f003 0302 	and.w	r3, r3, #2
 800b440:	60fb      	str	r3, [r7, #12]
 800b442:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b444:	4b29      	ldr	r3, [pc, #164]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b448:	4a28      	ldr	r2, [pc, #160]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b44e:	6313      	str	r3, [r2, #48]	; 0x30
 800b450:	4b26      	ldr	r3, [pc, #152]	; (800b4ec <HAL_ETH_MspInit+0x15c>)
 800b452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b458:	60bb      	str	r3, [r7, #8]
 800b45a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b45c:	2332      	movs	r3, #50	; 0x32
 800b45e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b460:	2302      	movs	r3, #2
 800b462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b464:	2300      	movs	r3, #0
 800b466:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b468:	2303      	movs	r3, #3
 800b46a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b46c:	230b      	movs	r3, #11
 800b46e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b474:	4619      	mov	r1, r3
 800b476:	481e      	ldr	r0, [pc, #120]	; (800b4f0 <HAL_ETH_MspInit+0x160>)
 800b478:	f7f8 ffbe 	bl	80043f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b47c:	2386      	movs	r3, #134	; 0x86
 800b47e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b480:	2302      	movs	r3, #2
 800b482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b484:	2300      	movs	r3, #0
 800b486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b488:	2303      	movs	r3, #3
 800b48a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b48c:	230b      	movs	r3, #11
 800b48e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b494:	4619      	mov	r1, r3
 800b496:	4817      	ldr	r0, [pc, #92]	; (800b4f4 <HAL_ETH_MspInit+0x164>)
 800b498:	f7f8 ffae 	bl	80043f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b49c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4aa:	2303      	movs	r3, #3
 800b4ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b4ae:	230b      	movs	r3, #11
 800b4b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b4b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	480f      	ldr	r0, [pc, #60]	; (800b4f8 <HAL_ETH_MspInit+0x168>)
 800b4ba:	f7f8 ff9d 	bl	80043f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b4be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b4c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b4d0:	230b      	movs	r3, #11
 800b4d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b4d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4d8:	4619      	mov	r1, r3
 800b4da:	4808      	ldr	r0, [pc, #32]	; (800b4fc <HAL_ETH_MspInit+0x16c>)
 800b4dc:	f7f8 ff8c 	bl	80043f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b4e0:	bf00      	nop
 800b4e2:	3738      	adds	r7, #56	; 0x38
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	40028000 	.word	0x40028000
 800b4ec:	40023800 	.word	0x40023800
 800b4f0:	40020800 	.word	0x40020800
 800b4f4:	40020000 	.word	0x40020000
 800b4f8:	40020400 	.word	0x40020400
 800b4fc:	40021800 	.word	0x40021800

0800b500 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b504:	4802      	ldr	r0, [pc, #8]	; (800b510 <ETH_PHY_IO_Init+0x10>)
 800b506:	f7f8 fb1d 	bl	8003b44 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	200058a8 	.word	0x200058a8

0800b514 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b514:	b480      	push	{r7}
 800b516:	af00      	add	r7, sp, #0
  return 0;
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b084      	sub	sp, #16
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68ba      	ldr	r2, [r7, #8]
 800b534:	68f9      	ldr	r1, [r7, #12]
 800b536:	4807      	ldr	r0, [pc, #28]	; (800b554 <ETH_PHY_IO_ReadReg+0x30>)
 800b538:	f7f8 f96c 	bl	8003814 <HAL_ETH_ReadPHYRegister>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d002      	beq.n	800b548 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b546:	e000      	b.n	800b54a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	200058a8 	.word	0x200058a8

0800b558 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	60f8      	str	r0, [r7, #12]
 800b560:	60b9      	str	r1, [r7, #8]
 800b562:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	68ba      	ldr	r2, [r7, #8]
 800b568:	68f9      	ldr	r1, [r7, #12]
 800b56a:	4807      	ldr	r0, [pc, #28]	; (800b588 <ETH_PHY_IO_WriteReg+0x30>)
 800b56c:	f7f8 f99d 	bl	80038aa <HAL_ETH_WritePHYRegister>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b57a:	e000      	b.n	800b57e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	200058a8 	.word	0x200058a8

0800b58c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b590:	f7f7 f8da 	bl	8002748 <HAL_GetTick>
 800b594:	4603      	mov	r3, r0
}
 800b596:	4618      	mov	r0, r3
 800b598:	bd80      	pop	{r7, pc}
	...

0800b59c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b0a0      	sub	sp, #128	; 0x80
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800b5a4:	f107 030c 	add.w	r3, r7, #12
 800b5a8:	2264      	movs	r2, #100	; 0x64
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f00a fde1 	bl	8016174 <memset>
  int32_t PHYLinkState = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5be:	2300      	movs	r3, #0
 800b5c0:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b5c2:	483a      	ldr	r0, [pc, #232]	; (800b6ac <ethernet_link_check_state+0x110>)
 800b5c4:	f7f6 ffe7 	bl	8002596 <LAN8742_GetLinkState>
 800b5c8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5d0:	089b      	lsrs	r3, r3, #2
 800b5d2:	f003 0301 	and.w	r3, r3, #1
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00c      	beq.n	800b5f6 <ethernet_link_check_state+0x5a>
 800b5dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	dc09      	bgt.n	800b5f6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800b5e2:	4833      	ldr	r0, [pc, #204]	; (800b6b0 <ethernet_link_check_state+0x114>)
 800b5e4:	f7f7 fef1 	bl	80033ca <HAL_ETH_Stop>
    netif_set_down(netif);
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f001 f81d 	bl	800c628 <netif_set_down>
    netif_set_link_down(netif);
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f001 f880 	bl	800c6f4 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800b5f4:	e055      	b.n	800b6a2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5fc:	f003 0304 	and.w	r3, r3, #4
 800b600:	2b00      	cmp	r3, #0
 800b602:	d14e      	bne.n	800b6a2 <ethernet_link_check_state+0x106>
 800b604:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b606:	2b01      	cmp	r3, #1
 800b608:	dd4b      	ble.n	800b6a2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800b60a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b60c:	3b02      	subs	r3, #2
 800b60e:	2b03      	cmp	r3, #3
 800b610:	d82a      	bhi.n	800b668 <ethernet_link_check_state+0xcc>
 800b612:	a201      	add	r2, pc, #4	; (adr r2, 800b618 <ethernet_link_check_state+0x7c>)
 800b614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b618:	0800b629 	.word	0x0800b629
 800b61c:	0800b63b 	.word	0x0800b63b
 800b620:	0800b64b 	.word	0x0800b64b
 800b624:	0800b65b 	.word	0x0800b65b
      duplex = ETH_FULLDUPLEX_MODE;
 800b628:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b62c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b62e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b632:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b634:	2301      	movs	r3, #1
 800b636:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b638:	e017      	b.n	800b66a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800b63a:	2300      	movs	r3, #0
 800b63c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b63e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b642:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b644:	2301      	movs	r3, #1
 800b646:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b648:	e00f      	b.n	800b66a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800b64a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b64e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b650:	2300      	movs	r3, #0
 800b652:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b654:	2301      	movs	r3, #1
 800b656:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b658:	e007      	b.n	800b66a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800b65a:	2300      	movs	r3, #0
 800b65c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b65e:	2300      	movs	r3, #0
 800b660:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b662:	2301      	movs	r3, #1
 800b664:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b666:	e000      	b.n	800b66a <ethernet_link_check_state+0xce>
      break;
 800b668:	bf00      	nop
    if(linkchanged)
 800b66a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d018      	beq.n	800b6a2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b670:	f107 030c 	add.w	r3, r7, #12
 800b674:	4619      	mov	r1, r3
 800b676:	480e      	ldr	r0, [pc, #56]	; (800b6b0 <ethernet_link_check_state+0x114>)
 800b678:	f7f8 f960 	bl	800393c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b67c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b67e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800b680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b682:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b684:	f107 030c 	add.w	r3, r7, #12
 800b688:	4619      	mov	r1, r3
 800b68a:	4809      	ldr	r0, [pc, #36]	; (800b6b0 <ethernet_link_check_state+0x114>)
 800b68c:	f7f8 fa40 	bl	8003b10 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800b690:	4807      	ldr	r0, [pc, #28]	; (800b6b0 <ethernet_link_check_state+0x114>)
 800b692:	f7f7 fe3b 	bl	800330c <HAL_ETH_Start>
      netif_set_up(netif);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 ff5a 	bl	800c550 <netif_set_up>
      netif_set_link_up(netif);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 fff5 	bl	800c68c <netif_set_link_up>
}
 800b6a2:	bf00      	nop
 800b6a4:	3780      	adds	r7, #128	; 0x80
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	20005990 	.word	0x20005990
 800b6b0:	200058a8 	.word	0x200058a8

0800b6b4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af02      	add	r7, sp, #8
 800b6ba:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b6bc:	4812      	ldr	r0, [pc, #72]	; (800b708 <HAL_ETH_RxAllocateCallback+0x54>)
 800b6be:	f000 fcc1 	bl	800c044 <memp_malloc_pool>
 800b6c2:	60f8      	str	r0, [r7, #12]
  if (p)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d014      	beq.n	800b6f4 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	f103 0220 	add.w	r2, r3, #32
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	4a0d      	ldr	r2, [pc, #52]	; (800b70c <HAL_ETH_RxAllocateCallback+0x58>)
 800b6d8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b6e2:	9201      	str	r2, [sp, #4]
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2241      	movs	r2, #65	; 0x41
 800b6ea:	2100      	movs	r1, #0
 800b6ec:	2000      	movs	r0, #0
 800b6ee:	f001 f9f7 	bl	800cae0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b6f2:	e005      	b.n	800b700 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b6f4:	4b06      	ldr	r3, [pc, #24]	; (800b710 <HAL_ETH_RxAllocateCallback+0x5c>)
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	601a      	str	r2, [r3, #0]
}
 800b700:	bf00      	nop
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	08019c60 	.word	0x08019c60
 800b70c:	0800b34d 	.word	0x0800b34d
 800b710:	200058a4 	.word	0x200058a4

0800b714 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
 800b720:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b72a:	2300      	movs	r3, #0
 800b72c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	3b20      	subs	r3, #32
 800b732:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	2200      	movs	r2, #0
 800b738:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	2200      	movs	r2, #0
 800b73e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b740:	69fb      	ldr	r3, [r7, #28]
 800b742:	887a      	ldrh	r2, [r7, #2]
 800b744:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b746:	69bb      	ldr	r3, [r7, #24]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d103      	bne.n	800b756 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	69fa      	ldr	r2, [r7, #28]
 800b752:	601a      	str	r2, [r3, #0]
 800b754:	e003      	b.n	800b75e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	69fa      	ldr	r2, [r7, #28]
 800b75c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	69fa      	ldr	r2, [r7, #28]
 800b762:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	61fb      	str	r3, [r7, #28]
 800b76a:	e009      	b.n	800b780 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	891a      	ldrh	r2, [r3, #8]
 800b770:	887b      	ldrh	r3, [r7, #2]
 800b772:	4413      	add	r3, r2
 800b774:	b29a      	uxth	r2, r3
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	61fb      	str	r3, [r7, #28]
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1f2      	bne.n	800b76c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800b786:	887b      	ldrh	r3, [r7, #2]
 800b788:	4619      	mov	r1, r3
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7ff fc30 	bl	800aff0 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b790:	bf00      	nop
 800b792:	3720      	adds	r7, #32
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b798:	b480      	push	{r7}
 800b79a:	b083      	sub	sp, #12
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	4603      	mov	r3, r0
 800b7a0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b7a2:	88fb      	ldrh	r3, [r7, #6]
 800b7a4:	021b      	lsls	r3, r3, #8
 800b7a6:	b21a      	sxth	r2, r3
 800b7a8:	88fb      	ldrh	r3, [r7, #6]
 800b7aa:	0a1b      	lsrs	r3, r3, #8
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	b21b      	sxth	r3, r3
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	b21b      	sxth	r3, r3
 800b7b4:	b29b      	uxth	r3, r3
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	370c      	adds	r7, #12
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b083      	sub	sp, #12
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	061a      	lsls	r2, r3, #24
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	021b      	lsls	r3, r3, #8
 800b7d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b7d6:	431a      	orrs	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	0a1b      	lsrs	r3, r3, #8
 800b7dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b7e0:	431a      	orrs	r2, r3
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	0e1b      	lsrs	r3, r3, #24
 800b7e6:	4313      	orrs	r3, r2
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800b7fe:	f000 f8d5 	bl	800b9ac <mem_init>
  memp_init();
 800b802:	f000 fbdb 	bl	800bfbc <memp_init>
  pbuf_init();
  netif_init();
 800b806:	f000 fcd9 	bl	800c1bc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b80a:	f007 f8f9 	bl	8012a00 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b80e:	f001 fe51 	bl	800d4b4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b812:	f007 f86b 	bl	80128ec <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
	...

0800b820 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b82a:	4b05      	ldr	r3, [pc, #20]	; (800b840 <ptr_to_mem+0x20>)
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	88fb      	ldrh	r3, [r7, #6]
 800b830:	4413      	add	r3, r2
}
 800b832:	4618      	mov	r0, r3
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	2000601c 	.word	0x2000601c

0800b844 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b84c:	4b05      	ldr	r3, [pc, #20]	; (800b864 <mem_to_ptr+0x20>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	b29b      	uxth	r3, r3
}
 800b856:	4618      	mov	r0, r3
 800b858:	370c      	adds	r7, #12
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	2000601c 	.word	0x2000601c

0800b868 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b868:	b590      	push	{r4, r7, lr}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b870:	4b45      	ldr	r3, [pc, #276]	; (800b988 <plug_holes+0x120>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	429a      	cmp	r2, r3
 800b878:	d206      	bcs.n	800b888 <plug_holes+0x20>
 800b87a:	4b44      	ldr	r3, [pc, #272]	; (800b98c <plug_holes+0x124>)
 800b87c:	f240 12df 	movw	r2, #479	; 0x1df
 800b880:	4943      	ldr	r1, [pc, #268]	; (800b990 <plug_holes+0x128>)
 800b882:	4844      	ldr	r0, [pc, #272]	; (800b994 <plug_holes+0x12c>)
 800b884:	f00a fc7e 	bl	8016184 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b888:	4b43      	ldr	r3, [pc, #268]	; (800b998 <plug_holes+0x130>)
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d306      	bcc.n	800b8a0 <plug_holes+0x38>
 800b892:	4b3e      	ldr	r3, [pc, #248]	; (800b98c <plug_holes+0x124>)
 800b894:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b898:	4940      	ldr	r1, [pc, #256]	; (800b99c <plug_holes+0x134>)
 800b89a:	483e      	ldr	r0, [pc, #248]	; (800b994 <plug_holes+0x12c>)
 800b89c:	f00a fc72 	bl	8016184 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	791b      	ldrb	r3, [r3, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d006      	beq.n	800b8b6 <plug_holes+0x4e>
 800b8a8:	4b38      	ldr	r3, [pc, #224]	; (800b98c <plug_holes+0x124>)
 800b8aa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b8ae:	493c      	ldr	r1, [pc, #240]	; (800b9a0 <plug_holes+0x138>)
 800b8b0:	4838      	ldr	r0, [pc, #224]	; (800b994 <plug_holes+0x12c>)
 800b8b2:	f00a fc67 	bl	8016184 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	881b      	ldrh	r3, [r3, #0]
 800b8ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8be:	d906      	bls.n	800b8ce <plug_holes+0x66>
 800b8c0:	4b32      	ldr	r3, [pc, #200]	; (800b98c <plug_holes+0x124>)
 800b8c2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b8c6:	4937      	ldr	r1, [pc, #220]	; (800b9a4 <plug_holes+0x13c>)
 800b8c8:	4832      	ldr	r0, [pc, #200]	; (800b994 <plug_holes+0x12c>)
 800b8ca:	f00a fc5b 	bl	8016184 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	881b      	ldrh	r3, [r3, #0]
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff ffa4 	bl	800b820 <ptr_to_mem>
 800b8d8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d024      	beq.n	800b92c <plug_holes+0xc4>
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	791b      	ldrb	r3, [r3, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d120      	bne.n	800b92c <plug_holes+0xc4>
 800b8ea:	4b2b      	ldr	r3, [pc, #172]	; (800b998 <plug_holes+0x130>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d01b      	beq.n	800b92c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b8f4:	4b2c      	ldr	r3, [pc, #176]	; (800b9a8 <plug_holes+0x140>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d102      	bne.n	800b904 <plug_holes+0x9c>
      lfree = mem;
 800b8fe:	4a2a      	ldr	r2, [pc, #168]	; (800b9a8 <plug_holes+0x140>)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	881a      	ldrh	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b914:	d00a      	beq.n	800b92c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7ff ff80 	bl	800b820 <ptr_to_mem>
 800b920:	4604      	mov	r4, r0
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f7ff ff8e 	bl	800b844 <mem_to_ptr>
 800b928:	4603      	mov	r3, r0
 800b92a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	885b      	ldrh	r3, [r3, #2]
 800b930:	4618      	mov	r0, r3
 800b932:	f7ff ff75 	bl	800b820 <ptr_to_mem>
 800b936:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d01f      	beq.n	800b980 <plug_holes+0x118>
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	791b      	ldrb	r3, [r3, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d11b      	bne.n	800b980 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b948:	4b17      	ldr	r3, [pc, #92]	; (800b9a8 <plug_holes+0x140>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d102      	bne.n	800b958 <plug_holes+0xf0>
      lfree = pmem;
 800b952:	4a15      	ldr	r2, [pc, #84]	; (800b9a8 <plug_holes+0x140>)
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	881a      	ldrh	r2, [r3, #0]
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	881b      	ldrh	r3, [r3, #0]
 800b964:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b968:	d00a      	beq.n	800b980 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	881b      	ldrh	r3, [r3, #0]
 800b96e:	4618      	mov	r0, r3
 800b970:	f7ff ff56 	bl	800b820 <ptr_to_mem>
 800b974:	4604      	mov	r4, r0
 800b976:	68b8      	ldr	r0, [r7, #8]
 800b978:	f7ff ff64 	bl	800b844 <mem_to_ptr>
 800b97c:	4603      	mov	r3, r0
 800b97e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b980:	bf00      	nop
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	bd90      	pop	{r4, r7, pc}
 800b988:	2000601c 	.word	0x2000601c
 800b98c:	08017290 	.word	0x08017290
 800b990:	080172c0 	.word	0x080172c0
 800b994:	080172d8 	.word	0x080172d8
 800b998:	20006020 	.word	0x20006020
 800b99c:	08017300 	.word	0x08017300
 800b9a0:	0801731c 	.word	0x0801731c
 800b9a4:	08017338 	.word	0x08017338
 800b9a8:	20006024 	.word	0x20006024

0800b9ac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b082      	sub	sp, #8
 800b9b0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b9b2:	4b18      	ldr	r3, [pc, #96]	; (800ba14 <mem_init+0x68>)
 800b9b4:	3303      	adds	r3, #3
 800b9b6:	f023 0303 	bic.w	r3, r3, #3
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	4b16      	ldr	r3, [pc, #88]	; (800ba18 <mem_init+0x6c>)
 800b9be:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b9c0:	4b15      	ldr	r3, [pc, #84]	; (800ba18 <mem_init+0x6c>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b9cc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b9da:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b9de:	f7ff ff1f 	bl	800b820 <ptr_to_mem>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	4a0d      	ldr	r2, [pc, #52]	; (800ba1c <mem_init+0x70>)
 800b9e6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ba1c <mem_init+0x70>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ba1c <mem_init+0x70>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b9f8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b9fa:	4b08      	ldr	r3, [pc, #32]	; (800ba1c <mem_init+0x70>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ba02:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ba04:	4b04      	ldr	r3, [pc, #16]	; (800ba18 <mem_init+0x6c>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4a05      	ldr	r2, [pc, #20]	; (800ba20 <mem_init+0x74>)
 800ba0a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ba0c:	bf00      	nop
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	200059c8 	.word	0x200059c8
 800ba18:	2000601c 	.word	0x2000601c
 800ba1c:	20006020 	.word	0x20006020
 800ba20:	20006024 	.word	0x20006024

0800ba24 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f7ff ff09 	bl	800b844 <mem_to_ptr>
 800ba32:	4603      	mov	r3, r0
 800ba34:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	881b      	ldrh	r3, [r3, #0]
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff fef0 	bl	800b820 <ptr_to_mem>
 800ba40:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	885b      	ldrh	r3, [r3, #2]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7ff feea 	bl	800b820 <ptr_to_mem>
 800ba4c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	881b      	ldrh	r3, [r3, #0]
 800ba52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba56:	d818      	bhi.n	800ba8a <mem_link_valid+0x66>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	885b      	ldrh	r3, [r3, #2]
 800ba5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba60:	d813      	bhi.n	800ba8a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba66:	8afa      	ldrh	r2, [r7, #22]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d004      	beq.n	800ba76 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	881b      	ldrh	r3, [r3, #0]
 800ba70:	8afa      	ldrh	r2, [r7, #22]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d109      	bne.n	800ba8a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba76:	4b08      	ldr	r3, [pc, #32]	; (800ba98 <mem_link_valid+0x74>)
 800ba78:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba7a:	693a      	ldr	r2, [r7, #16]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d006      	beq.n	800ba8e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	885b      	ldrh	r3, [r3, #2]
 800ba84:	8afa      	ldrh	r2, [r7, #22]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d001      	beq.n	800ba8e <mem_link_valid+0x6a>
    return 0;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	e000      	b.n	800ba90 <mem_link_valid+0x6c>
  }
  return 1;
 800ba8e:	2301      	movs	r3, #1
}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3718      	adds	r7, #24
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	20006020 	.word	0x20006020

0800ba9c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d04c      	beq.n	800bb44 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f003 0303 	and.w	r3, r3, #3
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d007      	beq.n	800bac4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bab4:	4b25      	ldr	r3, [pc, #148]	; (800bb4c <mem_free+0xb0>)
 800bab6:	f240 2273 	movw	r2, #627	; 0x273
 800baba:	4925      	ldr	r1, [pc, #148]	; (800bb50 <mem_free+0xb4>)
 800babc:	4825      	ldr	r0, [pc, #148]	; (800bb54 <mem_free+0xb8>)
 800babe:	f00a fb61 	bl	8016184 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bac2:	e040      	b.n	800bb46 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	3b08      	subs	r3, #8
 800bac8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800baca:	4b23      	ldr	r3, [pc, #140]	; (800bb58 <mem_free+0xbc>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68fa      	ldr	r2, [r7, #12]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d306      	bcc.n	800bae2 <mem_free+0x46>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f103 020c 	add.w	r2, r3, #12
 800bada:	4b20      	ldr	r3, [pc, #128]	; (800bb5c <mem_free+0xc0>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d907      	bls.n	800baf2 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bae2:	4b1a      	ldr	r3, [pc, #104]	; (800bb4c <mem_free+0xb0>)
 800bae4:	f240 227f 	movw	r2, #639	; 0x27f
 800bae8:	491d      	ldr	r1, [pc, #116]	; (800bb60 <mem_free+0xc4>)
 800baea:	481a      	ldr	r0, [pc, #104]	; (800bb54 <mem_free+0xb8>)
 800baec:	f00a fb4a 	bl	8016184 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800baf0:	e029      	b.n	800bb46 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	791b      	ldrb	r3, [r3, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d107      	bne.n	800bb0a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bafa:	4b14      	ldr	r3, [pc, #80]	; (800bb4c <mem_free+0xb0>)
 800bafc:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bb00:	4918      	ldr	r1, [pc, #96]	; (800bb64 <mem_free+0xc8>)
 800bb02:	4814      	ldr	r0, [pc, #80]	; (800bb54 <mem_free+0xb8>)
 800bb04:	f00a fb3e 	bl	8016184 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bb08:	e01d      	b.n	800bb46 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800bb0a:	68f8      	ldr	r0, [r7, #12]
 800bb0c:	f7ff ff8a 	bl	800ba24 <mem_link_valid>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d107      	bne.n	800bb26 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bb16:	4b0d      	ldr	r3, [pc, #52]	; (800bb4c <mem_free+0xb0>)
 800bb18:	f240 2295 	movw	r2, #661	; 0x295
 800bb1c:	4912      	ldr	r1, [pc, #72]	; (800bb68 <mem_free+0xcc>)
 800bb1e:	480d      	ldr	r0, [pc, #52]	; (800bb54 <mem_free+0xb8>)
 800bb20:	f00a fb30 	bl	8016184 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bb24:	e00f      	b.n	800bb46 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bb2c:	4b0f      	ldr	r3, [pc, #60]	; (800bb6c <mem_free+0xd0>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d202      	bcs.n	800bb3c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bb36:	4a0d      	ldr	r2, [pc, #52]	; (800bb6c <mem_free+0xd0>)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7ff fe93 	bl	800b868 <plug_holes>
 800bb42:	e000      	b.n	800bb46 <mem_free+0xaa>
    return;
 800bb44:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800bb46:	3710      	adds	r7, #16
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	08017290 	.word	0x08017290
 800bb50:	08017364 	.word	0x08017364
 800bb54:	080172d8 	.word	0x080172d8
 800bb58:	2000601c 	.word	0x2000601c
 800bb5c:	20006020 	.word	0x20006020
 800bb60:	08017388 	.word	0x08017388
 800bb64:	080173a4 	.word	0x080173a4
 800bb68:	080173cc 	.word	0x080173cc
 800bb6c:	20006024 	.word	0x20006024

0800bb70 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b088      	sub	sp, #32
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	460b      	mov	r3, r1
 800bb7a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bb7c:	887b      	ldrh	r3, [r7, #2]
 800bb7e:	3303      	adds	r3, #3
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	f023 0303 	bic.w	r3, r3, #3
 800bb86:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bb88:	8bfb      	ldrh	r3, [r7, #30]
 800bb8a:	2b0b      	cmp	r3, #11
 800bb8c:	d801      	bhi.n	800bb92 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bb8e:	230c      	movs	r3, #12
 800bb90:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bb92:	8bfb      	ldrh	r3, [r7, #30]
 800bb94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb98:	d803      	bhi.n	800bba2 <mem_trim+0x32>
 800bb9a:	8bfa      	ldrh	r2, [r7, #30]
 800bb9c:	887b      	ldrh	r3, [r7, #2]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d201      	bcs.n	800bba6 <mem_trim+0x36>
    return NULL;
 800bba2:	2300      	movs	r3, #0
 800bba4:	e0cc      	b.n	800bd40 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bba6:	4b68      	ldr	r3, [pc, #416]	; (800bd48 <mem_trim+0x1d8>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d304      	bcc.n	800bbba <mem_trim+0x4a>
 800bbb0:	4b66      	ldr	r3, [pc, #408]	; (800bd4c <mem_trim+0x1dc>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d306      	bcc.n	800bbc8 <mem_trim+0x58>
 800bbba:	4b65      	ldr	r3, [pc, #404]	; (800bd50 <mem_trim+0x1e0>)
 800bbbc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bbc0:	4964      	ldr	r1, [pc, #400]	; (800bd54 <mem_trim+0x1e4>)
 800bbc2:	4865      	ldr	r0, [pc, #404]	; (800bd58 <mem_trim+0x1e8>)
 800bbc4:	f00a fade 	bl	8016184 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bbc8:	4b5f      	ldr	r3, [pc, #380]	; (800bd48 <mem_trim+0x1d8>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	687a      	ldr	r2, [r7, #4]
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d304      	bcc.n	800bbdc <mem_trim+0x6c>
 800bbd2:	4b5e      	ldr	r3, [pc, #376]	; (800bd4c <mem_trim+0x1dc>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d301      	bcc.n	800bbe0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	e0af      	b.n	800bd40 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	3b08      	subs	r3, #8
 800bbe4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bbe6:	69b8      	ldr	r0, [r7, #24]
 800bbe8:	f7ff fe2c 	bl	800b844 <mem_to_ptr>
 800bbec:	4603      	mov	r3, r0
 800bbee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	881a      	ldrh	r2, [r3, #0]
 800bbf4:	8afb      	ldrh	r3, [r7, #22]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	3b08      	subs	r3, #8
 800bbfc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bbfe:	8bfa      	ldrh	r2, [r7, #30]
 800bc00:	8abb      	ldrh	r3, [r7, #20]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d906      	bls.n	800bc14 <mem_trim+0xa4>
 800bc06:	4b52      	ldr	r3, [pc, #328]	; (800bd50 <mem_trim+0x1e0>)
 800bc08:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bc0c:	4953      	ldr	r1, [pc, #332]	; (800bd5c <mem_trim+0x1ec>)
 800bc0e:	4852      	ldr	r0, [pc, #328]	; (800bd58 <mem_trim+0x1e8>)
 800bc10:	f00a fab8 	bl	8016184 <iprintf>
  if (newsize > size) {
 800bc14:	8bfa      	ldrh	r2, [r7, #30]
 800bc16:	8abb      	ldrh	r3, [r7, #20]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d901      	bls.n	800bc20 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	e08f      	b.n	800bd40 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800bc20:	8bfa      	ldrh	r2, [r7, #30]
 800bc22:	8abb      	ldrh	r3, [r7, #20]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d101      	bne.n	800bc2c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	e089      	b.n	800bd40 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	881b      	ldrh	r3, [r3, #0]
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7ff fdf5 	bl	800b820 <ptr_to_mem>
 800bc36:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	791b      	ldrb	r3, [r3, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d13f      	bne.n	800bcc0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	881b      	ldrh	r3, [r3, #0]
 800bc44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc48:	d106      	bne.n	800bc58 <mem_trim+0xe8>
 800bc4a:	4b41      	ldr	r3, [pc, #260]	; (800bd50 <mem_trim+0x1e0>)
 800bc4c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bc50:	4943      	ldr	r1, [pc, #268]	; (800bd60 <mem_trim+0x1f0>)
 800bc52:	4841      	ldr	r0, [pc, #260]	; (800bd58 <mem_trim+0x1e8>)
 800bc54:	f00a fa96 	bl	8016184 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc5e:	8afa      	ldrh	r2, [r7, #22]
 800bc60:	8bfb      	ldrh	r3, [r7, #30]
 800bc62:	4413      	add	r3, r2
 800bc64:	b29b      	uxth	r3, r3
 800bc66:	3308      	adds	r3, #8
 800bc68:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bc6a:	4b3e      	ldr	r3, [pc, #248]	; (800bd64 <mem_trim+0x1f4>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	693a      	ldr	r2, [r7, #16]
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d106      	bne.n	800bc82 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800bc74:	89fb      	ldrh	r3, [r7, #14]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7ff fdd2 	bl	800b820 <ptr_to_mem>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	4a39      	ldr	r2, [pc, #228]	; (800bd64 <mem_trim+0x1f4>)
 800bc80:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bc82:	89fb      	ldrh	r3, [r7, #14]
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7ff fdcb 	bl	800b820 <ptr_to_mem>
 800bc8a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bc92:	693b      	ldr	r3, [r7, #16]
 800bc94:	89ba      	ldrh	r2, [r7, #12]
 800bc96:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	8afa      	ldrh	r2, [r7, #22]
 800bc9c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	89fa      	ldrh	r2, [r7, #14]
 800bca2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	881b      	ldrh	r3, [r3, #0]
 800bca8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcac:	d047      	beq.n	800bd3e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	881b      	ldrh	r3, [r3, #0]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f7ff fdb4 	bl	800b820 <ptr_to_mem>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	89fb      	ldrh	r3, [r7, #14]
 800bcbc:	8053      	strh	r3, [r2, #2]
 800bcbe:	e03e      	b.n	800bd3e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bcc0:	8bfb      	ldrh	r3, [r7, #30]
 800bcc2:	f103 0214 	add.w	r2, r3, #20
 800bcc6:	8abb      	ldrh	r3, [r7, #20]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d838      	bhi.n	800bd3e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bccc:	8afa      	ldrh	r2, [r7, #22]
 800bcce:	8bfb      	ldrh	r3, [r7, #30]
 800bcd0:	4413      	add	r3, r2
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	3308      	adds	r3, #8
 800bcd6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bcd8:	69bb      	ldr	r3, [r7, #24]
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bce0:	d106      	bne.n	800bcf0 <mem_trim+0x180>
 800bce2:	4b1b      	ldr	r3, [pc, #108]	; (800bd50 <mem_trim+0x1e0>)
 800bce4:	f240 3216 	movw	r2, #790	; 0x316
 800bce8:	491d      	ldr	r1, [pc, #116]	; (800bd60 <mem_trim+0x1f0>)
 800bcea:	481b      	ldr	r0, [pc, #108]	; (800bd58 <mem_trim+0x1e8>)
 800bcec:	f00a fa4a 	bl	8016184 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bcf0:	89fb      	ldrh	r3, [r7, #14]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f7ff fd94 	bl	800b820 <ptr_to_mem>
 800bcf8:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bcfa:	4b1a      	ldr	r3, [pc, #104]	; (800bd64 <mem_trim+0x1f4>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	693a      	ldr	r2, [r7, #16]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d202      	bcs.n	800bd0a <mem_trim+0x19a>
      lfree = mem2;
 800bd04:	4a17      	ldr	r2, [pc, #92]	; (800bd64 <mem_trim+0x1f4>)
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	881a      	ldrh	r2, [r3, #0]
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	8afa      	ldrh	r2, [r7, #22]
 800bd1c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	89fa      	ldrh	r2, [r7, #14]
 800bd22:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	881b      	ldrh	r3, [r3, #0]
 800bd28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd2c:	d007      	beq.n	800bd3e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	881b      	ldrh	r3, [r3, #0]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f7ff fd74 	bl	800b820 <ptr_to_mem>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	89fb      	ldrh	r3, [r7, #14]
 800bd3c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800bd3e:	687b      	ldr	r3, [r7, #4]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3720      	adds	r7, #32
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	2000601c 	.word	0x2000601c
 800bd4c:	20006020 	.word	0x20006020
 800bd50:	08017290 	.word	0x08017290
 800bd54:	08017400 	.word	0x08017400
 800bd58:	080172d8 	.word	0x080172d8
 800bd5c:	08017418 	.word	0x08017418
 800bd60:	08017438 	.word	0x08017438
 800bd64:	20006024 	.word	0x20006024

0800bd68 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b088      	sub	sp, #32
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	4603      	mov	r3, r0
 800bd70:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bd72:	88fb      	ldrh	r3, [r7, #6]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d101      	bne.n	800bd7c <mem_malloc+0x14>
    return NULL;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	e0d9      	b.n	800bf30 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bd7c:	88fb      	ldrh	r3, [r7, #6]
 800bd7e:	3303      	adds	r3, #3
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	f023 0303 	bic.w	r3, r3, #3
 800bd86:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bd88:	8bbb      	ldrh	r3, [r7, #28]
 800bd8a:	2b0b      	cmp	r3, #11
 800bd8c:	d801      	bhi.n	800bd92 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bd8e:	230c      	movs	r3, #12
 800bd90:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bd92:	8bbb      	ldrh	r3, [r7, #28]
 800bd94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd98:	d803      	bhi.n	800bda2 <mem_malloc+0x3a>
 800bd9a:	8bba      	ldrh	r2, [r7, #28]
 800bd9c:	88fb      	ldrh	r3, [r7, #6]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d201      	bcs.n	800bda6 <mem_malloc+0x3e>
    return NULL;
 800bda2:	2300      	movs	r3, #0
 800bda4:	e0c4      	b.n	800bf30 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bda6:	4b64      	ldr	r3, [pc, #400]	; (800bf38 <mem_malloc+0x1d0>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7ff fd4a 	bl	800b844 <mem_to_ptr>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	83fb      	strh	r3, [r7, #30]
 800bdb4:	e0b4      	b.n	800bf20 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bdb6:	8bfb      	ldrh	r3, [r7, #30]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f7ff fd31 	bl	800b820 <ptr_to_mem>
 800bdbe:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	791b      	ldrb	r3, [r3, #4]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f040 80a4 	bne.w	800bf12 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	881b      	ldrh	r3, [r3, #0]
 800bdce:	461a      	mov	r2, r3
 800bdd0:	8bfb      	ldrh	r3, [r7, #30]
 800bdd2:	1ad3      	subs	r3, r2, r3
 800bdd4:	f1a3 0208 	sub.w	r2, r3, #8
 800bdd8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bdda:	429a      	cmp	r2, r3
 800bddc:	f0c0 8099 	bcc.w	800bf12 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	881b      	ldrh	r3, [r3, #0]
 800bde4:	461a      	mov	r2, r3
 800bde6:	8bfb      	ldrh	r3, [r7, #30]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	f1a3 0208 	sub.w	r2, r3, #8
 800bdee:	8bbb      	ldrh	r3, [r7, #28]
 800bdf0:	3314      	adds	r3, #20
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d333      	bcc.n	800be5e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bdf6:	8bfa      	ldrh	r2, [r7, #30]
 800bdf8:	8bbb      	ldrh	r3, [r7, #28]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	3308      	adds	r3, #8
 800be00:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800be02:	8a7b      	ldrh	r3, [r7, #18]
 800be04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be08:	d106      	bne.n	800be18 <mem_malloc+0xb0>
 800be0a:	4b4c      	ldr	r3, [pc, #304]	; (800bf3c <mem_malloc+0x1d4>)
 800be0c:	f240 3287 	movw	r2, #903	; 0x387
 800be10:	494b      	ldr	r1, [pc, #300]	; (800bf40 <mem_malloc+0x1d8>)
 800be12:	484c      	ldr	r0, [pc, #304]	; (800bf44 <mem_malloc+0x1dc>)
 800be14:	f00a f9b6 	bl	8016184 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800be18:	8a7b      	ldrh	r3, [r7, #18]
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7ff fd00 	bl	800b820 <ptr_to_mem>
 800be20:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	881a      	ldrh	r2, [r3, #0]
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	8bfa      	ldrh	r2, [r7, #30]
 800be34:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	8a7a      	ldrh	r2, [r7, #18]
 800be3a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	2201      	movs	r2, #1
 800be40:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	881b      	ldrh	r3, [r3, #0]
 800be46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be4a:	d00b      	beq.n	800be64 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	881b      	ldrh	r3, [r3, #0]
 800be50:	4618      	mov	r0, r3
 800be52:	f7ff fce5 	bl	800b820 <ptr_to_mem>
 800be56:	4602      	mov	r2, r0
 800be58:	8a7b      	ldrh	r3, [r7, #18]
 800be5a:	8053      	strh	r3, [r2, #2]
 800be5c:	e002      	b.n	800be64 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	2201      	movs	r2, #1
 800be62:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800be64:	4b34      	ldr	r3, [pc, #208]	; (800bf38 <mem_malloc+0x1d0>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	697a      	ldr	r2, [r7, #20]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d127      	bne.n	800bebe <mem_malloc+0x156>
          struct mem *cur = lfree;
 800be6e:	4b32      	ldr	r3, [pc, #200]	; (800bf38 <mem_malloc+0x1d0>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800be74:	e005      	b.n	800be82 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	881b      	ldrh	r3, [r3, #0]
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7ff fcd0 	bl	800b820 <ptr_to_mem>
 800be80:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800be82:	69bb      	ldr	r3, [r7, #24]
 800be84:	791b      	ldrb	r3, [r3, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d004      	beq.n	800be94 <mem_malloc+0x12c>
 800be8a:	4b2f      	ldr	r3, [pc, #188]	; (800bf48 <mem_malloc+0x1e0>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	69ba      	ldr	r2, [r7, #24]
 800be90:	429a      	cmp	r2, r3
 800be92:	d1f0      	bne.n	800be76 <mem_malloc+0x10e>
          }
          lfree = cur;
 800be94:	4a28      	ldr	r2, [pc, #160]	; (800bf38 <mem_malloc+0x1d0>)
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800be9a:	4b27      	ldr	r3, [pc, #156]	; (800bf38 <mem_malloc+0x1d0>)
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	4b2a      	ldr	r3, [pc, #168]	; (800bf48 <mem_malloc+0x1e0>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d00b      	beq.n	800bebe <mem_malloc+0x156>
 800bea6:	4b24      	ldr	r3, [pc, #144]	; (800bf38 <mem_malloc+0x1d0>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	791b      	ldrb	r3, [r3, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d006      	beq.n	800bebe <mem_malloc+0x156>
 800beb0:	4b22      	ldr	r3, [pc, #136]	; (800bf3c <mem_malloc+0x1d4>)
 800beb2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800beb6:	4925      	ldr	r1, [pc, #148]	; (800bf4c <mem_malloc+0x1e4>)
 800beb8:	4822      	ldr	r0, [pc, #136]	; (800bf44 <mem_malloc+0x1dc>)
 800beba:	f00a f963 	bl	8016184 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bebe:	8bba      	ldrh	r2, [r7, #28]
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	4413      	add	r3, r2
 800bec4:	3308      	adds	r3, #8
 800bec6:	4a20      	ldr	r2, [pc, #128]	; (800bf48 <mem_malloc+0x1e0>)
 800bec8:	6812      	ldr	r2, [r2, #0]
 800beca:	4293      	cmp	r3, r2
 800becc:	d906      	bls.n	800bedc <mem_malloc+0x174>
 800bece:	4b1b      	ldr	r3, [pc, #108]	; (800bf3c <mem_malloc+0x1d4>)
 800bed0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bed4:	491e      	ldr	r1, [pc, #120]	; (800bf50 <mem_malloc+0x1e8>)
 800bed6:	481b      	ldr	r0, [pc, #108]	; (800bf44 <mem_malloc+0x1dc>)
 800bed8:	f00a f954 	bl	8016184 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	f003 0303 	and.w	r3, r3, #3
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d006      	beq.n	800bef4 <mem_malloc+0x18c>
 800bee6:	4b15      	ldr	r3, [pc, #84]	; (800bf3c <mem_malloc+0x1d4>)
 800bee8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800beec:	4919      	ldr	r1, [pc, #100]	; (800bf54 <mem_malloc+0x1ec>)
 800beee:	4815      	ldr	r0, [pc, #84]	; (800bf44 <mem_malloc+0x1dc>)
 800bef0:	f00a f948 	bl	8016184 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	f003 0303 	and.w	r3, r3, #3
 800befa:	2b00      	cmp	r3, #0
 800befc:	d006      	beq.n	800bf0c <mem_malloc+0x1a4>
 800befe:	4b0f      	ldr	r3, [pc, #60]	; (800bf3c <mem_malloc+0x1d4>)
 800bf00:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bf04:	4914      	ldr	r1, [pc, #80]	; (800bf58 <mem_malloc+0x1f0>)
 800bf06:	480f      	ldr	r0, [pc, #60]	; (800bf44 <mem_malloc+0x1dc>)
 800bf08:	f00a f93c 	bl	8016184 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	3308      	adds	r3, #8
 800bf10:	e00e      	b.n	800bf30 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800bf12:	8bfb      	ldrh	r3, [r7, #30]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f7ff fc83 	bl	800b820 <ptr_to_mem>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	881b      	ldrh	r3, [r3, #0]
 800bf1e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf20:	8bfa      	ldrh	r2, [r7, #30]
 800bf22:	8bbb      	ldrh	r3, [r7, #28]
 800bf24:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	f4ff af44 	bcc.w	800bdb6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bf2e:	2300      	movs	r3, #0
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3720      	adds	r7, #32
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}
 800bf38:	20006024 	.word	0x20006024
 800bf3c:	08017290 	.word	0x08017290
 800bf40:	08017438 	.word	0x08017438
 800bf44:	080172d8 	.word	0x080172d8
 800bf48:	20006020 	.word	0x20006020
 800bf4c:	0801744c 	.word	0x0801744c
 800bf50:	08017468 	.word	0x08017468
 800bf54:	08017498 	.word	0x08017498
 800bf58:	080174c8 	.word	0x080174c8

0800bf5c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	689b      	ldr	r3, [r3, #8]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	3303      	adds	r3, #3
 800bf72:	f023 0303 	bic.w	r3, r3, #3
 800bf76:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bf78:	2300      	movs	r3, #0
 800bf7a:	60fb      	str	r3, [r7, #12]
 800bf7c:	e011      	b.n	800bfa2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	681a      	ldr	r2, [r3, #0]
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	689b      	ldr	r3, [r3, #8]
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	881b      	ldrh	r3, [r3, #0]
 800bf94:	461a      	mov	r2, r3
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	4413      	add	r3, r2
 800bf9a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	3301      	adds	r3, #1
 800bfa0:	60fb      	str	r3, [r7, #12]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	885b      	ldrh	r3, [r3, #2]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	dbe7      	blt.n	800bf7e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bfae:	bf00      	nop
 800bfb0:	bf00      	nop
 800bfb2:	3714      	adds	r7, #20
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfba:	4770      	bx	lr

0800bfbc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b082      	sub	sp, #8
 800bfc0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	80fb      	strh	r3, [r7, #6]
 800bfc6:	e009      	b.n	800bfdc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bfc8:	88fb      	ldrh	r3, [r7, #6]
 800bfca:	4a08      	ldr	r2, [pc, #32]	; (800bfec <memp_init+0x30>)
 800bfcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f7ff ffc3 	bl	800bf5c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfd6:	88fb      	ldrh	r3, [r7, #6]
 800bfd8:	3301      	adds	r3, #1
 800bfda:	80fb      	strh	r3, [r7, #6]
 800bfdc:	88fb      	ldrh	r3, [r7, #6]
 800bfde:	2b08      	cmp	r3, #8
 800bfe0:	d9f2      	bls.n	800bfc8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bfe2:	bf00      	nop
 800bfe4:	bf00      	nop
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	08019cd8 	.word	0x08019cd8

0800bff0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d012      	beq.n	800c02c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	68fa      	ldr	r2, [r7, #12]
 800c00c:	6812      	ldr	r2, [r2, #0]
 800c00e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	f003 0303 	and.w	r3, r3, #3
 800c016:	2b00      	cmp	r3, #0
 800c018:	d006      	beq.n	800c028 <do_memp_malloc_pool+0x38>
 800c01a:	4b07      	ldr	r3, [pc, #28]	; (800c038 <do_memp_malloc_pool+0x48>)
 800c01c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c020:	4906      	ldr	r1, [pc, #24]	; (800c03c <do_memp_malloc_pool+0x4c>)
 800c022:	4807      	ldr	r0, [pc, #28]	; (800c040 <do_memp_malloc_pool+0x50>)
 800c024:	f00a f8ae 	bl	8016184 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	e000      	b.n	800c02e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c02c:	2300      	movs	r3, #0
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	080174ec 	.word	0x080174ec
 800c03c:	0801751c 	.word	0x0801751c
 800c040:	08017540 	.word	0x08017540

0800c044 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d106      	bne.n	800c060 <memp_malloc_pool+0x1c>
 800c052:	4b0a      	ldr	r3, [pc, #40]	; (800c07c <memp_malloc_pool+0x38>)
 800c054:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c058:	4909      	ldr	r1, [pc, #36]	; (800c080 <memp_malloc_pool+0x3c>)
 800c05a:	480a      	ldr	r0, [pc, #40]	; (800c084 <memp_malloc_pool+0x40>)
 800c05c:	f00a f892 	bl	8016184 <iprintf>
  if (desc == NULL) {
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d101      	bne.n	800c06a <memp_malloc_pool+0x26>
    return NULL;
 800c066:	2300      	movs	r3, #0
 800c068:	e003      	b.n	800c072 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f7ff ffc0 	bl	800bff0 <do_memp_malloc_pool>
 800c070:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c072:	4618      	mov	r0, r3
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
 800c07a:	bf00      	nop
 800c07c:	080174ec 	.word	0x080174ec
 800c080:	08017568 	.word	0x08017568
 800c084:	08017540 	.word	0x08017540

0800c088 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	4603      	mov	r3, r0
 800c090:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c092:	79fb      	ldrb	r3, [r7, #7]
 800c094:	2b08      	cmp	r3, #8
 800c096:	d908      	bls.n	800c0aa <memp_malloc+0x22>
 800c098:	4b0a      	ldr	r3, [pc, #40]	; (800c0c4 <memp_malloc+0x3c>)
 800c09a:	f240 1257 	movw	r2, #343	; 0x157
 800c09e:	490a      	ldr	r1, [pc, #40]	; (800c0c8 <memp_malloc+0x40>)
 800c0a0:	480a      	ldr	r0, [pc, #40]	; (800c0cc <memp_malloc+0x44>)
 800c0a2:	f00a f86f 	bl	8016184 <iprintf>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	e008      	b.n	800c0bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c0aa:	79fb      	ldrb	r3, [r7, #7]
 800c0ac:	4a08      	ldr	r2, [pc, #32]	; (800c0d0 <memp_malloc+0x48>)
 800c0ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	f7ff ff9c 	bl	800bff0 <do_memp_malloc_pool>
 800c0b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c0ba:	68fb      	ldr	r3, [r7, #12]
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}
 800c0c4:	080174ec 	.word	0x080174ec
 800c0c8:	0801757c 	.word	0x0801757c
 800c0cc:	08017540 	.word	0x08017540
 800c0d0:	08019cd8 	.word	0x08019cd8

0800c0d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	f003 0303 	and.w	r3, r3, #3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d006      	beq.n	800c0f6 <do_memp_free_pool+0x22>
 800c0e8:	4b0a      	ldr	r3, [pc, #40]	; (800c114 <do_memp_free_pool+0x40>)
 800c0ea:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c0ee:	490a      	ldr	r1, [pc, #40]	; (800c118 <do_memp_free_pool+0x44>)
 800c0f0:	480a      	ldr	r0, [pc, #40]	; (800c11c <do_memp_free_pool+0x48>)
 800c0f2:	f00a f847 	bl	8016184 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	689b      	ldr	r3, [r3, #8]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c10c:	bf00      	nop
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}
 800c114:	080174ec 	.word	0x080174ec
 800c118:	0801759c 	.word	0x0801759c
 800c11c:	08017540 	.word	0x08017540

0800c120 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d106      	bne.n	800c13e <memp_free_pool+0x1e>
 800c130:	4b0a      	ldr	r3, [pc, #40]	; (800c15c <memp_free_pool+0x3c>)
 800c132:	f240 1295 	movw	r2, #405	; 0x195
 800c136:	490a      	ldr	r1, [pc, #40]	; (800c160 <memp_free_pool+0x40>)
 800c138:	480a      	ldr	r0, [pc, #40]	; (800c164 <memp_free_pool+0x44>)
 800c13a:	f00a f823 	bl	8016184 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d007      	beq.n	800c154 <memp_free_pool+0x34>
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d004      	beq.n	800c154 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f7ff ffc1 	bl	800c0d4 <do_memp_free_pool>
 800c152:	e000      	b.n	800c156 <memp_free_pool+0x36>
    return;
 800c154:	bf00      	nop
}
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	080174ec 	.word	0x080174ec
 800c160:	08017568 	.word	0x08017568
 800c164:	08017540 	.word	0x08017540

0800c168 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	4603      	mov	r3, r0
 800c170:	6039      	str	r1, [r7, #0]
 800c172:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c174:	79fb      	ldrb	r3, [r7, #7]
 800c176:	2b08      	cmp	r3, #8
 800c178:	d907      	bls.n	800c18a <memp_free+0x22>
 800c17a:	4b0c      	ldr	r3, [pc, #48]	; (800c1ac <memp_free+0x44>)
 800c17c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c180:	490b      	ldr	r1, [pc, #44]	; (800c1b0 <memp_free+0x48>)
 800c182:	480c      	ldr	r0, [pc, #48]	; (800c1b4 <memp_free+0x4c>)
 800c184:	f009 fffe 	bl	8016184 <iprintf>
 800c188:	e00c      	b.n	800c1a4 <memp_free+0x3c>

  if (mem == NULL) {
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d008      	beq.n	800c1a2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c190:	79fb      	ldrb	r3, [r7, #7]
 800c192:	4a09      	ldr	r2, [pc, #36]	; (800c1b8 <memp_free+0x50>)
 800c194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c198:	6839      	ldr	r1, [r7, #0]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f7ff ff9a 	bl	800c0d4 <do_memp_free_pool>
 800c1a0:	e000      	b.n	800c1a4 <memp_free+0x3c>
    return;
 800c1a2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c1a4:	3708      	adds	r7, #8
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	080174ec 	.word	0x080174ec
 800c1b0:	080175bc 	.word	0x080175bc
 800c1b4:	08017540 	.word	0x08017540
 800c1b8:	08019cd8 	.word	0x08019cd8

0800c1bc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c1c0:	bf00      	nop
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
	...

0800c1cc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b086      	sub	sp, #24
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	60f8      	str	r0, [r7, #12]
 800c1d4:	60b9      	str	r1, [r7, #8]
 800c1d6:	607a      	str	r2, [r7, #4]
 800c1d8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d108      	bne.n	800c1f2 <netif_add+0x26>
 800c1e0:	4b57      	ldr	r3, [pc, #348]	; (800c340 <netif_add+0x174>)
 800c1e2:	f240 1227 	movw	r2, #295	; 0x127
 800c1e6:	4957      	ldr	r1, [pc, #348]	; (800c344 <netif_add+0x178>)
 800c1e8:	4857      	ldr	r0, [pc, #348]	; (800c348 <netif_add+0x17c>)
 800c1ea:	f009 ffcb 	bl	8016184 <iprintf>
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	e0a2      	b.n	800c338 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d108      	bne.n	800c20a <netif_add+0x3e>
 800c1f8:	4b51      	ldr	r3, [pc, #324]	; (800c340 <netif_add+0x174>)
 800c1fa:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c1fe:	4953      	ldr	r1, [pc, #332]	; (800c34c <netif_add+0x180>)
 800c200:	4851      	ldr	r0, [pc, #324]	; (800c348 <netif_add+0x17c>)
 800c202:	f009 ffbf 	bl	8016184 <iprintf>
 800c206:	2300      	movs	r3, #0
 800c208:	e096      	b.n	800c338 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d101      	bne.n	800c214 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c210:	4b4f      	ldr	r3, [pc, #316]	; (800c350 <netif_add+0x184>)
 800c212:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c21a:	4b4d      	ldr	r3, [pc, #308]	; (800c350 <netif_add+0x184>)
 800c21c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d101      	bne.n	800c228 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c224:	4b4a      	ldr	r3, [pc, #296]	; (800c350 <netif_add+0x184>)
 800c226:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	2200      	movs	r2, #0
 800c232:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	2200      	movs	r2, #0
 800c238:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	4a45      	ldr	r2, [pc, #276]	; (800c354 <netif_add+0x188>)
 800c23e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2200      	movs	r2, #0
 800c244:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2200      	movs	r2, #0
 800c252:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6a3a      	ldr	r2, [r7, #32]
 800c258:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c25a:	4b3f      	ldr	r3, [pc, #252]	; (800c358 <netif_add+0x18c>)
 800c25c:	781a      	ldrb	r2, [r3, #0]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c268:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	68b9      	ldr	r1, [r7, #8]
 800c270:	68f8      	ldr	r0, [r7, #12]
 800c272:	f000 f913 	bl	800c49c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	4798      	blx	r3
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d001      	beq.n	800c286 <netif_add+0xba>
    return NULL;
 800c282:	2300      	movs	r3, #0
 800c284:	e058      	b.n	800c338 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c28c:	2bff      	cmp	r3, #255	; 0xff
 800c28e:	d103      	bne.n	800c298 <netif_add+0xcc>
        netif->num = 0;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c298:	2300      	movs	r3, #0
 800c29a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c29c:	4b2f      	ldr	r3, [pc, #188]	; (800c35c <netif_add+0x190>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	617b      	str	r3, [r7, #20]
 800c2a2:	e02b      	b.n	800c2fc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c2a4:	697a      	ldr	r2, [r7, #20]
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d106      	bne.n	800c2ba <netif_add+0xee>
 800c2ac:	4b24      	ldr	r3, [pc, #144]	; (800c340 <netif_add+0x174>)
 800c2ae:	f240 128b 	movw	r2, #395	; 0x18b
 800c2b2:	492b      	ldr	r1, [pc, #172]	; (800c360 <netif_add+0x194>)
 800c2b4:	4824      	ldr	r0, [pc, #144]	; (800c348 <netif_add+0x17c>)
 800c2b6:	f009 ff65 	bl	8016184 <iprintf>
        num_netifs++;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	3301      	adds	r3, #1
 800c2be:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	2bff      	cmp	r3, #255	; 0xff
 800c2c4:	dd06      	ble.n	800c2d4 <netif_add+0x108>
 800c2c6:	4b1e      	ldr	r3, [pc, #120]	; (800c340 <netif_add+0x174>)
 800c2c8:	f240 128d 	movw	r2, #397	; 0x18d
 800c2cc:	4925      	ldr	r1, [pc, #148]	; (800c364 <netif_add+0x198>)
 800c2ce:	481e      	ldr	r0, [pc, #120]	; (800c348 <netif_add+0x17c>)
 800c2d0:	f009 ff58 	bl	8016184 <iprintf>
        if (netif2->num == netif->num) {
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2e0:	429a      	cmp	r2, r3
 800c2e2:	d108      	bne.n	800c2f6 <netif_add+0x12a>
          netif->num++;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	b2da      	uxtb	r2, r3
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c2f4:	e005      	b.n	800c302 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	617b      	str	r3, [r7, #20]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1d0      	bne.n	800c2a4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1be      	bne.n	800c286 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c30e:	2bfe      	cmp	r3, #254	; 0xfe
 800c310:	d103      	bne.n	800c31a <netif_add+0x14e>
    netif_num = 0;
 800c312:	4b11      	ldr	r3, [pc, #68]	; (800c358 <netif_add+0x18c>)
 800c314:	2200      	movs	r2, #0
 800c316:	701a      	strb	r2, [r3, #0]
 800c318:	e006      	b.n	800c328 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c320:	3301      	adds	r3, #1
 800c322:	b2da      	uxtb	r2, r3
 800c324:	4b0c      	ldr	r3, [pc, #48]	; (800c358 <netif_add+0x18c>)
 800c326:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c328:	4b0c      	ldr	r3, [pc, #48]	; (800c35c <netif_add+0x190>)
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c330:	4a0a      	ldr	r2, [pc, #40]	; (800c35c <netif_add+0x190>)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c336:	68fb      	ldr	r3, [r7, #12]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3718      	adds	r7, #24
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	080175d8 	.word	0x080175d8
 800c344:	0801766c 	.word	0x0801766c
 800c348:	08017628 	.word	0x08017628
 800c34c:	08017688 	.word	0x08017688
 800c350:	08019d3c 	.word	0x08019d3c
 800c354:	0800c777 	.word	0x0800c777
 800c358:	20008f1c 	.word	0x20008f1c
 800c35c:	20008f14 	.word	0x20008f14
 800c360:	080176ac 	.word	0x080176ac
 800c364:	080176c0 	.word	0x080176c0

0800c368 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c372:	6839      	ldr	r1, [r7, #0]
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f002 fbe5 	bl	800eb44 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c37a:	6839      	ldr	r1, [r7, #0]
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f007 f85b 	bl	8013438 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c382:	bf00      	nop
 800c384:	3708      	adds	r7, #8
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
	...

0800c38c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b086      	sub	sp, #24
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d106      	bne.n	800c3ac <netif_do_set_ipaddr+0x20>
 800c39e:	4b1d      	ldr	r3, [pc, #116]	; (800c414 <netif_do_set_ipaddr+0x88>)
 800c3a0:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c3a4:	491c      	ldr	r1, [pc, #112]	; (800c418 <netif_do_set_ipaddr+0x8c>)
 800c3a6:	481d      	ldr	r0, [pc, #116]	; (800c41c <netif_do_set_ipaddr+0x90>)
 800c3a8:	f009 feec 	bl	8016184 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d106      	bne.n	800c3c0 <netif_do_set_ipaddr+0x34>
 800c3b2:	4b18      	ldr	r3, [pc, #96]	; (800c414 <netif_do_set_ipaddr+0x88>)
 800c3b4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c3b8:	4917      	ldr	r1, [pc, #92]	; (800c418 <netif_do_set_ipaddr+0x8c>)
 800c3ba:	4818      	ldr	r0, [pc, #96]	; (800c41c <netif_do_set_ipaddr+0x90>)
 800c3bc:	f009 fee2 	bl	8016184 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	3304      	adds	r3, #4
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d01c      	beq.n	800c408 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	3304      	adds	r3, #4
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c3de:	f107 0314 	add.w	r3, r7, #20
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7ff ffbf 	bl	800c368 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <netif_do_set_ipaddr+0x6a>
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	e000      	b.n	800c3f8 <netif_do_set_ipaddr+0x6c>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c3fc:	2101      	movs	r1, #1
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	f000 f8d2 	bl	800c5a8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c404:	2301      	movs	r3, #1
 800c406:	e000      	b.n	800c40a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3718      	adds	r7, #24
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	080175d8 	.word	0x080175d8
 800c418:	080176f0 	.word	0x080176f0
 800c41c:	08017628 	.word	0x08017628

0800c420 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c420:	b480      	push	{r7}
 800c422:	b085      	sub	sp, #20
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	3308      	adds	r3, #8
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	429a      	cmp	r2, r3
 800c438:	d00a      	beq.n	800c450 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <netif_do_set_netmask+0x26>
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	e000      	b.n	800c448 <netif_do_set_netmask+0x28>
 800c446:	2300      	movs	r3, #0
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c44c:	2301      	movs	r3, #1
 800c44e:	e000      	b.n	800c452 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3714      	adds	r7, #20
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr

0800c45e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c45e:	b480      	push	{r7}
 800c460:	b085      	sub	sp, #20
 800c462:	af00      	add	r7, sp, #0
 800c464:	60f8      	str	r0, [r7, #12]
 800c466:	60b9      	str	r1, [r7, #8]
 800c468:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	681a      	ldr	r2, [r3, #0]
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	330c      	adds	r3, #12
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	429a      	cmp	r2, r3
 800c476:	d00a      	beq.n	800c48e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d002      	beq.n	800c484 <netif_do_set_gw+0x26>
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	e000      	b.n	800c486 <netif_do_set_gw+0x28>
 800c484:	2300      	movs	r3, #0
 800c486:	68fa      	ldr	r2, [r7, #12]
 800c488:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c48a:	2301      	movs	r3, #1
 800c48c:	e000      	b.n	800c490 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	3714      	adds	r7, #20
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b088      	sub	sp, #32
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
 800c4a8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d101      	bne.n	800c4bc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c4b8:	4b1c      	ldr	r3, [pc, #112]	; (800c52c <netif_set_addr+0x90>)
 800c4ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d101      	bne.n	800c4c6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c4c2:	4b1a      	ldr	r3, [pc, #104]	; (800c52c <netif_set_addr+0x90>)
 800c4c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d101      	bne.n	800c4d0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c4cc:	4b17      	ldr	r3, [pc, #92]	; (800c52c <netif_set_addr+0x90>)
 800c4ce:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d003      	beq.n	800c4de <netif_set_addr+0x42>
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d101      	bne.n	800c4e2 <netif_set_addr+0x46>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e000      	b.n	800c4e4 <netif_set_addr+0x48>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d006      	beq.n	800c4fa <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c4ec:	f107 0310 	add.w	r3, r7, #16
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	68b9      	ldr	r1, [r7, #8]
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f7ff ff49 	bl	800c38c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c4fa:	69fa      	ldr	r2, [r7, #28]
 800c4fc:	6879      	ldr	r1, [r7, #4]
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f7ff ff8e 	bl	800c420 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c504:	69ba      	ldr	r2, [r7, #24]
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	f7ff ffa8 	bl	800c45e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d106      	bne.n	800c522 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c514:	f107 0310 	add.w	r3, r7, #16
 800c518:	461a      	mov	r2, r3
 800c51a:	68b9      	ldr	r1, [r7, #8]
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	f7ff ff35 	bl	800c38c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c522:	bf00      	nop
 800c524:	3720      	adds	r7, #32
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	08019d3c 	.word	0x08019d3c

0800c530 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c538:	4a04      	ldr	r2, [pc, #16]	; (800c54c <netif_set_default+0x1c>)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c53e:	bf00      	nop
 800c540:	370c      	adds	r7, #12
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr
 800c54a:	bf00      	nop
 800c54c:	20008f18 	.word	0x20008f18

0800c550 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b082      	sub	sp, #8
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d107      	bne.n	800c56e <netif_set_up+0x1e>
 800c55e:	4b0f      	ldr	r3, [pc, #60]	; (800c59c <netif_set_up+0x4c>)
 800c560:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c564:	490e      	ldr	r1, [pc, #56]	; (800c5a0 <netif_set_up+0x50>)
 800c566:	480f      	ldr	r0, [pc, #60]	; (800c5a4 <netif_set_up+0x54>)
 800c568:	f009 fe0c 	bl	8016184 <iprintf>
 800c56c:	e013      	b.n	800c596 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c574:	f003 0301 	and.w	r3, r3, #1
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10c      	bne.n	800c596 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c582:	f043 0301 	orr.w	r3, r3, #1
 800c586:	b2da      	uxtb	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c58e:	2103      	movs	r1, #3
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 f809 	bl	800c5a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c596:	3708      	adds	r7, #8
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	080175d8 	.word	0x080175d8
 800c5a0:	08017760 	.word	0x08017760
 800c5a4:	08017628 	.word	0x08017628

0800c5a8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b082      	sub	sp, #8
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	460b      	mov	r3, r1
 800c5b2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d106      	bne.n	800c5c8 <netif_issue_reports+0x20>
 800c5ba:	4b18      	ldr	r3, [pc, #96]	; (800c61c <netif_issue_reports+0x74>)
 800c5bc:	f240 326d 	movw	r2, #877	; 0x36d
 800c5c0:	4917      	ldr	r1, [pc, #92]	; (800c620 <netif_issue_reports+0x78>)
 800c5c2:	4818      	ldr	r0, [pc, #96]	; (800c624 <netif_issue_reports+0x7c>)
 800c5c4:	f009 fdde 	bl	8016184 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5ce:	f003 0304 	and.w	r3, r3, #4
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d01e      	beq.n	800c614 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5dc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d017      	beq.n	800c614 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c5e4:	78fb      	ldrb	r3, [r7, #3]
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d013      	beq.n	800c616 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	3304      	adds	r3, #4
 800c5f2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d00e      	beq.n	800c616 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5fe:	f003 0308 	and.w	r3, r3, #8
 800c602:	2b00      	cmp	r3, #0
 800c604:	d007      	beq.n	800c616 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	3304      	adds	r3, #4
 800c60a:	4619      	mov	r1, r3
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f007 fe7d 	bl	801430c <etharp_request>
 800c612:	e000      	b.n	800c616 <netif_issue_reports+0x6e>
    return;
 800c614:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	080175d8 	.word	0x080175d8
 800c620:	0801777c 	.word	0x0801777c
 800c624:	08017628 	.word	0x08017628

0800c628 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d107      	bne.n	800c646 <netif_set_down+0x1e>
 800c636:	4b12      	ldr	r3, [pc, #72]	; (800c680 <netif_set_down+0x58>)
 800c638:	f240 329b 	movw	r2, #923	; 0x39b
 800c63c:	4911      	ldr	r1, [pc, #68]	; (800c684 <netif_set_down+0x5c>)
 800c63e:	4812      	ldr	r0, [pc, #72]	; (800c688 <netif_set_down+0x60>)
 800c640:	f009 fda0 	bl	8016184 <iprintf>
 800c644:	e019      	b.n	800c67a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c64c:	f003 0301 	and.w	r3, r3, #1
 800c650:	2b00      	cmp	r3, #0
 800c652:	d012      	beq.n	800c67a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c65a:	f023 0301 	bic.w	r3, r3, #1
 800c65e:	b2da      	uxtb	r2, r3
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c66c:	f003 0308 	and.w	r3, r3, #8
 800c670:	2b00      	cmp	r3, #0
 800c672:	d002      	beq.n	800c67a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f007 fa07 	bl	8013a88 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	080175d8 	.word	0x080175d8
 800c684:	080177a0 	.word	0x080177a0
 800c688:	08017628 	.word	0x08017628

0800c68c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d107      	bne.n	800c6aa <netif_set_link_up+0x1e>
 800c69a:	4b13      	ldr	r3, [pc, #76]	; (800c6e8 <netif_set_link_up+0x5c>)
 800c69c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c6a0:	4912      	ldr	r1, [pc, #72]	; (800c6ec <netif_set_link_up+0x60>)
 800c6a2:	4813      	ldr	r0, [pc, #76]	; (800c6f0 <netif_set_link_up+0x64>)
 800c6a4:	f009 fd6e 	bl	8016184 <iprintf>
 800c6a8:	e01b      	b.n	800c6e2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6b0:	f003 0304 	and.w	r3, r3, #4
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d114      	bne.n	800c6e2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6be:	f043 0304 	orr.w	r3, r3, #4
 800c6c2:	b2da      	uxtb	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c6ca:	2103      	movs	r1, #3
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f7ff ff6b 	bl	800c5a8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	69db      	ldr	r3, [r3, #28]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d003      	beq.n	800c6e2 <netif_set_link_up+0x56>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	69db      	ldr	r3, [r3, #28]
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	080175d8 	.word	0x080175d8
 800c6ec:	080177c0 	.word	0x080177c0
 800c6f0:	08017628 	.word	0x08017628

0800c6f4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d107      	bne.n	800c712 <netif_set_link_down+0x1e>
 800c702:	4b11      	ldr	r3, [pc, #68]	; (800c748 <netif_set_link_down+0x54>)
 800c704:	f240 4206 	movw	r2, #1030	; 0x406
 800c708:	4910      	ldr	r1, [pc, #64]	; (800c74c <netif_set_link_down+0x58>)
 800c70a:	4811      	ldr	r0, [pc, #68]	; (800c750 <netif_set_link_down+0x5c>)
 800c70c:	f009 fd3a 	bl	8016184 <iprintf>
 800c710:	e017      	b.n	800c742 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c718:	f003 0304 	and.w	r3, r3, #4
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d010      	beq.n	800c742 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c726:	f023 0304 	bic.w	r3, r3, #4
 800c72a:	b2da      	uxtb	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	69db      	ldr	r3, [r3, #28]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <netif_set_link_down+0x4e>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	69db      	ldr	r3, [r3, #28]
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	080175d8 	.word	0x080175d8
 800c74c:	080177e4 	.word	0x080177e4
 800c750:	08017628 	.word	0x08017628

0800c754 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d002      	beq.n	800c76a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	683a      	ldr	r2, [r7, #0]
 800c768:	61da      	str	r2, [r3, #28]
  }
}
 800c76a:	bf00      	nop
 800c76c:	370c      	adds	r7, #12
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr

0800c776 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c776:	b480      	push	{r7}
 800c778:	b085      	sub	sp, #20
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	60b9      	str	r1, [r7, #8]
 800c780:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c782:	f06f 030b 	mvn.w	r3, #11
}
 800c786:	4618      	mov	r0, r3
 800c788:	3714      	adds	r7, #20
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
	...

0800c794 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
 800c79a:	4603      	mov	r3, r0
 800c79c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c79e:	79fb      	ldrb	r3, [r7, #7]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d013      	beq.n	800c7cc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c7a4:	4b0d      	ldr	r3, [pc, #52]	; (800c7dc <netif_get_by_index+0x48>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	60fb      	str	r3, [r7, #12]
 800c7aa:	e00c      	b.n	800c7c6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	79fa      	ldrb	r2, [r7, #7]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d101      	bne.n	800c7c0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	e006      	b.n	800c7ce <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	60fb      	str	r3, [r7, #12]
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1ef      	bne.n	800c7ac <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3714      	adds	r7, #20
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	20008f14 	.word	0x20008f14

0800c7e0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c7e6:	4b0c      	ldr	r3, [pc, #48]	; (800c818 <pbuf_free_ooseq+0x38>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c7ec:	4b0b      	ldr	r3, [pc, #44]	; (800c81c <pbuf_free_ooseq+0x3c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	607b      	str	r3, [r7, #4]
 800c7f2:	e00a      	b.n	800c80a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f002 f9df 	bl	800ebc0 <tcp_free_ooseq>
      return;
 800c802:	e005      	b.n	800c810 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	607b      	str	r3, [r7, #4]
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1f1      	bne.n	800c7f4 <pbuf_free_ooseq+0x14>
    }
  }
}
 800c810:	3708      	adds	r7, #8
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	20008f1d 	.word	0x20008f1d
 800c81c:	20008f2c 	.word	0x20008f2c

0800c820 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c820:	b480      	push	{r7}
 800c822:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800c824:	4b03      	ldr	r3, [pc, #12]	; (800c834 <pbuf_pool_is_empty+0x14>)
 800c826:	2201      	movs	r2, #1
 800c828:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c82a:	bf00      	nop
 800c82c:	46bd      	mov	sp, r7
 800c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c832:	4770      	bx	lr
 800c834:	20008f1d 	.word	0x20008f1d

0800c838 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	4611      	mov	r1, r2
 800c844:	461a      	mov	r2, r3
 800c846:	460b      	mov	r3, r1
 800c848:	80fb      	strh	r3, [r7, #6]
 800c84a:	4613      	mov	r3, r2
 800c84c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2200      	movs	r2, #0
 800c852:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	68ba      	ldr	r2, [r7, #8]
 800c858:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	88fa      	ldrh	r2, [r7, #6]
 800c85e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	88ba      	ldrh	r2, [r7, #4]
 800c864:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c866:	8b3b      	ldrh	r3, [r7, #24]
 800c868:	b2da      	uxtb	r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	7f3a      	ldrb	r2, [r7, #28]
 800c872:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2201      	movs	r2, #1
 800c878:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	2200      	movs	r2, #0
 800c87e:	73da      	strb	r2, [r3, #15]
}
 800c880:	bf00      	nop
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b08c      	sub	sp, #48	; 0x30
 800c890:	af02      	add	r7, sp, #8
 800c892:	4603      	mov	r3, r0
 800c894:	71fb      	strb	r3, [r7, #7]
 800c896:	460b      	mov	r3, r1
 800c898:	80bb      	strh	r3, [r7, #4]
 800c89a:	4613      	mov	r3, r2
 800c89c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c8a2:	887b      	ldrh	r3, [r7, #2]
 800c8a4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c8a8:	d07f      	beq.n	800c9aa <pbuf_alloc+0x11e>
 800c8aa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c8ae:	f300 80c8 	bgt.w	800ca42 <pbuf_alloc+0x1b6>
 800c8b2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c8b6:	d010      	beq.n	800c8da <pbuf_alloc+0x4e>
 800c8b8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c8bc:	f300 80c1 	bgt.w	800ca42 <pbuf_alloc+0x1b6>
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d002      	beq.n	800c8ca <pbuf_alloc+0x3e>
 800c8c4:	2b41      	cmp	r3, #65	; 0x41
 800c8c6:	f040 80bc 	bne.w	800ca42 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c8ca:	887a      	ldrh	r2, [r7, #2]
 800c8cc:	88bb      	ldrh	r3, [r7, #4]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	f000 f8d1 	bl	800ca78 <pbuf_alloc_reference>
 800c8d6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c8d8:	e0bd      	b.n	800ca56 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c8e2:	88bb      	ldrh	r3, [r7, #4]
 800c8e4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c8e6:	2008      	movs	r0, #8
 800c8e8:	f7ff fbce 	bl	800c088 <memp_malloc>
 800c8ec:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d109      	bne.n	800c908 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c8f4:	f7ff ff94 	bl	800c820 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d002      	beq.n	800c904 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c8fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c900:	f000 faa8 	bl	800ce54 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c904:	2300      	movs	r3, #0
 800c906:	e0a7      	b.n	800ca58 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c908:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c90a:	3303      	adds	r3, #3
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	f023 0303 	bic.w	r3, r3, #3
 800c912:	b29b      	uxth	r3, r3
 800c914:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c918:	b29b      	uxth	r3, r3
 800c91a:	8b7a      	ldrh	r2, [r7, #26]
 800c91c:	4293      	cmp	r3, r2
 800c91e:	bf28      	it	cs
 800c920:	4613      	movcs	r3, r2
 800c922:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c924:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c926:	3310      	adds	r3, #16
 800c928:	693a      	ldr	r2, [r7, #16]
 800c92a:	4413      	add	r3, r2
 800c92c:	3303      	adds	r3, #3
 800c92e:	f023 0303 	bic.w	r3, r3, #3
 800c932:	4618      	mov	r0, r3
 800c934:	89f9      	ldrh	r1, [r7, #14]
 800c936:	8b7a      	ldrh	r2, [r7, #26]
 800c938:	2300      	movs	r3, #0
 800c93a:	9301      	str	r3, [sp, #4]
 800c93c:	887b      	ldrh	r3, [r7, #2]
 800c93e:	9300      	str	r3, [sp, #0]
 800c940:	460b      	mov	r3, r1
 800c942:	4601      	mov	r1, r0
 800c944:	6938      	ldr	r0, [r7, #16]
 800c946:	f7ff ff77 	bl	800c838 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	f003 0303 	and.w	r3, r3, #3
 800c952:	2b00      	cmp	r3, #0
 800c954:	d006      	beq.n	800c964 <pbuf_alloc+0xd8>
 800c956:	4b42      	ldr	r3, [pc, #264]	; (800ca60 <pbuf_alloc+0x1d4>)
 800c958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c95c:	4941      	ldr	r1, [pc, #260]	; (800ca64 <pbuf_alloc+0x1d8>)
 800c95e:	4842      	ldr	r0, [pc, #264]	; (800ca68 <pbuf_alloc+0x1dc>)
 800c960:	f009 fc10 	bl	8016184 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c964:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c966:	3303      	adds	r3, #3
 800c968:	f023 0303 	bic.w	r3, r3, #3
 800c96c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c970:	d106      	bne.n	800c980 <pbuf_alloc+0xf4>
 800c972:	4b3b      	ldr	r3, [pc, #236]	; (800ca60 <pbuf_alloc+0x1d4>)
 800c974:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c978:	493c      	ldr	r1, [pc, #240]	; (800ca6c <pbuf_alloc+0x1e0>)
 800c97a:	483b      	ldr	r0, [pc, #236]	; (800ca68 <pbuf_alloc+0x1dc>)
 800c97c:	f009 fc02 	bl	8016184 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c982:	2b00      	cmp	r3, #0
 800c984:	d102      	bne.n	800c98c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	627b      	str	r3, [r7, #36]	; 0x24
 800c98a:	e002      	b.n	800c992 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	693a      	ldr	r2, [r7, #16]
 800c990:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c996:	8b7a      	ldrh	r2, [r7, #26]
 800c998:	89fb      	ldrh	r3, [r7, #14]
 800c99a:	1ad3      	subs	r3, r2, r3
 800c99c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c9a2:	8b7b      	ldrh	r3, [r7, #26]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d19e      	bne.n	800c8e6 <pbuf_alloc+0x5a>
      break;
 800c9a8:	e055      	b.n	800ca56 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c9aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9ac:	3303      	adds	r3, #3
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	f023 0303 	bic.w	r3, r3, #3
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	88bb      	ldrh	r3, [r7, #4]
 800c9b8:	3303      	adds	r3, #3
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	f023 0303 	bic.w	r3, r3, #3
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	4413      	add	r3, r2
 800c9c4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c9c6:	8b3b      	ldrh	r3, [r7, #24]
 800c9c8:	3310      	adds	r3, #16
 800c9ca:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c9cc:	8b3a      	ldrh	r2, [r7, #24]
 800c9ce:	88bb      	ldrh	r3, [r7, #4]
 800c9d0:	3303      	adds	r3, #3
 800c9d2:	f023 0303 	bic.w	r3, r3, #3
 800c9d6:	429a      	cmp	r2, r3
 800c9d8:	d306      	bcc.n	800c9e8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c9da:	8afa      	ldrh	r2, [r7, #22]
 800c9dc:	88bb      	ldrh	r3, [r7, #4]
 800c9de:	3303      	adds	r3, #3
 800c9e0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d201      	bcs.n	800c9ec <pbuf_alloc+0x160>
        return NULL;
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	e035      	b.n	800ca58 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c9ec:	8afb      	ldrh	r3, [r7, #22]
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7ff f9ba 	bl	800bd68 <mem_malloc>
 800c9f4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d101      	bne.n	800ca00 <pbuf_alloc+0x174>
        return NULL;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e02b      	b.n	800ca58 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ca00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca02:	3310      	adds	r3, #16
 800ca04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca06:	4413      	add	r3, r2
 800ca08:	3303      	adds	r3, #3
 800ca0a:	f023 0303 	bic.w	r3, r3, #3
 800ca0e:	4618      	mov	r0, r3
 800ca10:	88b9      	ldrh	r1, [r7, #4]
 800ca12:	88ba      	ldrh	r2, [r7, #4]
 800ca14:	2300      	movs	r3, #0
 800ca16:	9301      	str	r3, [sp, #4]
 800ca18:	887b      	ldrh	r3, [r7, #2]
 800ca1a:	9300      	str	r3, [sp, #0]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	4601      	mov	r1, r0
 800ca20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca22:	f7ff ff09 	bl	800c838 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	f003 0303 	and.w	r3, r3, #3
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d010      	beq.n	800ca54 <pbuf_alloc+0x1c8>
 800ca32:	4b0b      	ldr	r3, [pc, #44]	; (800ca60 <pbuf_alloc+0x1d4>)
 800ca34:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ca38:	490d      	ldr	r1, [pc, #52]	; (800ca70 <pbuf_alloc+0x1e4>)
 800ca3a:	480b      	ldr	r0, [pc, #44]	; (800ca68 <pbuf_alloc+0x1dc>)
 800ca3c:	f009 fba2 	bl	8016184 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ca40:	e008      	b.n	800ca54 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ca42:	4b07      	ldr	r3, [pc, #28]	; (800ca60 <pbuf_alloc+0x1d4>)
 800ca44:	f240 1227 	movw	r2, #295	; 0x127
 800ca48:	490a      	ldr	r1, [pc, #40]	; (800ca74 <pbuf_alloc+0x1e8>)
 800ca4a:	4807      	ldr	r0, [pc, #28]	; (800ca68 <pbuf_alloc+0x1dc>)
 800ca4c:	f009 fb9a 	bl	8016184 <iprintf>
      return NULL;
 800ca50:	2300      	movs	r3, #0
 800ca52:	e001      	b.n	800ca58 <pbuf_alloc+0x1cc>
      break;
 800ca54:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ca56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3728      	adds	r7, #40	; 0x28
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}
 800ca60:	08017808 	.word	0x08017808
 800ca64:	08017838 	.word	0x08017838
 800ca68:	08017868 	.word	0x08017868
 800ca6c:	08017890 	.word	0x08017890
 800ca70:	080178c4 	.word	0x080178c4
 800ca74:	080178f0 	.word	0x080178f0

0800ca78 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b086      	sub	sp, #24
 800ca7c:	af02      	add	r7, sp, #8
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	460b      	mov	r3, r1
 800ca82:	807b      	strh	r3, [r7, #2]
 800ca84:	4613      	mov	r3, r2
 800ca86:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ca88:	883b      	ldrh	r3, [r7, #0]
 800ca8a:	2b41      	cmp	r3, #65	; 0x41
 800ca8c:	d009      	beq.n	800caa2 <pbuf_alloc_reference+0x2a>
 800ca8e:	883b      	ldrh	r3, [r7, #0]
 800ca90:	2b01      	cmp	r3, #1
 800ca92:	d006      	beq.n	800caa2 <pbuf_alloc_reference+0x2a>
 800ca94:	4b0f      	ldr	r3, [pc, #60]	; (800cad4 <pbuf_alloc_reference+0x5c>)
 800ca96:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ca9a:	490f      	ldr	r1, [pc, #60]	; (800cad8 <pbuf_alloc_reference+0x60>)
 800ca9c:	480f      	ldr	r0, [pc, #60]	; (800cadc <pbuf_alloc_reference+0x64>)
 800ca9e:	f009 fb71 	bl	8016184 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800caa2:	2007      	movs	r0, #7
 800caa4:	f7ff faf0 	bl	800c088 <memp_malloc>
 800caa8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d101      	bne.n	800cab4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cab0:	2300      	movs	r3, #0
 800cab2:	e00b      	b.n	800cacc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cab4:	8879      	ldrh	r1, [r7, #2]
 800cab6:	887a      	ldrh	r2, [r7, #2]
 800cab8:	2300      	movs	r3, #0
 800caba:	9301      	str	r3, [sp, #4]
 800cabc:	883b      	ldrh	r3, [r7, #0]
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	460b      	mov	r3, r1
 800cac2:	6879      	ldr	r1, [r7, #4]
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f7ff feb7 	bl	800c838 <pbuf_init_alloced_pbuf>
  return p;
 800caca:	68fb      	ldr	r3, [r7, #12]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	08017808 	.word	0x08017808
 800cad8:	0801790c 	.word	0x0801790c
 800cadc:	08017868 	.word	0x08017868

0800cae0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b088      	sub	sp, #32
 800cae4:	af02      	add	r7, sp, #8
 800cae6:	607b      	str	r3, [r7, #4]
 800cae8:	4603      	mov	r3, r0
 800caea:	73fb      	strb	r3, [r7, #15]
 800caec:	460b      	mov	r3, r1
 800caee:	81bb      	strh	r3, [r7, #12]
 800caf0:	4613      	mov	r3, r2
 800caf2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
 800caf6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800caf8:	8a7b      	ldrh	r3, [r7, #18]
 800cafa:	3303      	adds	r3, #3
 800cafc:	f023 0203 	bic.w	r2, r3, #3
 800cb00:	89bb      	ldrh	r3, [r7, #12]
 800cb02:	441a      	add	r2, r3
 800cb04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d901      	bls.n	800cb0e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	e018      	b.n	800cb40 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d007      	beq.n	800cb24 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cb14:	8a7b      	ldrh	r3, [r7, #18]
 800cb16:	3303      	adds	r3, #3
 800cb18:	f023 0303 	bic.w	r3, r3, #3
 800cb1c:	6a3a      	ldr	r2, [r7, #32]
 800cb1e:	4413      	add	r3, r2
 800cb20:	617b      	str	r3, [r7, #20]
 800cb22:	e001      	b.n	800cb28 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cb24:	2300      	movs	r3, #0
 800cb26:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	89b9      	ldrh	r1, [r7, #12]
 800cb2c:	89ba      	ldrh	r2, [r7, #12]
 800cb2e:	2302      	movs	r3, #2
 800cb30:	9301      	str	r3, [sp, #4]
 800cb32:	897b      	ldrh	r3, [r7, #10]
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	460b      	mov	r3, r1
 800cb38:	6979      	ldr	r1, [r7, #20]
 800cb3a:	f7ff fe7d 	bl	800c838 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cb3e:	687b      	ldr	r3, [r7, #4]
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3718      	adds	r7, #24
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}

0800cb48 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	460b      	mov	r3, r1
 800cb52:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d106      	bne.n	800cb68 <pbuf_realloc+0x20>
 800cb5a:	4b3a      	ldr	r3, [pc, #232]	; (800cc44 <pbuf_realloc+0xfc>)
 800cb5c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cb60:	4939      	ldr	r1, [pc, #228]	; (800cc48 <pbuf_realloc+0x100>)
 800cb62:	483a      	ldr	r0, [pc, #232]	; (800cc4c <pbuf_realloc+0x104>)
 800cb64:	f009 fb0e 	bl	8016184 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	891b      	ldrh	r3, [r3, #8]
 800cb6c:	887a      	ldrh	r2, [r7, #2]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d263      	bcs.n	800cc3a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	891a      	ldrh	r2, [r3, #8]
 800cb76:	887b      	ldrh	r3, [r7, #2]
 800cb78:	1ad3      	subs	r3, r2, r3
 800cb7a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cb7c:	887b      	ldrh	r3, [r7, #2]
 800cb7e:	817b      	strh	r3, [r7, #10]
  q = p;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cb84:	e018      	b.n	800cbb8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	895b      	ldrh	r3, [r3, #10]
 800cb8a:	897a      	ldrh	r2, [r7, #10]
 800cb8c:	1ad3      	subs	r3, r2, r3
 800cb8e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	891a      	ldrh	r2, [r3, #8]
 800cb94:	893b      	ldrh	r3, [r7, #8]
 800cb96:	1ad3      	subs	r3, r2, r3
 800cb98:	b29a      	uxth	r2, r3
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d106      	bne.n	800cbb8 <pbuf_realloc+0x70>
 800cbaa:	4b26      	ldr	r3, [pc, #152]	; (800cc44 <pbuf_realloc+0xfc>)
 800cbac:	f240 12af 	movw	r2, #431	; 0x1af
 800cbb0:	4927      	ldr	r1, [pc, #156]	; (800cc50 <pbuf_realloc+0x108>)
 800cbb2:	4826      	ldr	r0, [pc, #152]	; (800cc4c <pbuf_realloc+0x104>)
 800cbb4:	f009 fae6 	bl	8016184 <iprintf>
  while (rem_len > q->len) {
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	895b      	ldrh	r3, [r3, #10]
 800cbbc:	897a      	ldrh	r2, [r7, #10]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d8e1      	bhi.n	800cb86 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	7b1b      	ldrb	r3, [r3, #12]
 800cbc6:	f003 030f 	and.w	r3, r3, #15
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d121      	bne.n	800cc12 <pbuf_realloc+0xca>
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	895b      	ldrh	r3, [r3, #10]
 800cbd2:	897a      	ldrh	r2, [r7, #10]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d01c      	beq.n	800cc12 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	7b5b      	ldrb	r3, [r3, #13]
 800cbdc:	f003 0302 	and.w	r3, r3, #2
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d116      	bne.n	800cc12 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	685a      	ldr	r2, [r3, #4]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	b29a      	uxth	r2, r3
 800cbee:	897b      	ldrh	r3, [r7, #10]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	68f8      	ldr	r0, [r7, #12]
 800cbf8:	f7fe ffba 	bl	800bb70 <mem_trim>
 800cbfc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d106      	bne.n	800cc12 <pbuf_realloc+0xca>
 800cc04:	4b0f      	ldr	r3, [pc, #60]	; (800cc44 <pbuf_realloc+0xfc>)
 800cc06:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cc0a:	4912      	ldr	r1, [pc, #72]	; (800cc54 <pbuf_realloc+0x10c>)
 800cc0c:	480f      	ldr	r0, [pc, #60]	; (800cc4c <pbuf_realloc+0x104>)
 800cc0e:	f009 fab9 	bl	8016184 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	897a      	ldrh	r2, [r7, #10]
 800cc16:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	895a      	ldrh	r2, [r3, #10]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d004      	beq.n	800cc32 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f000 f911 	bl	800ce54 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	2200      	movs	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	e000      	b.n	800cc3c <pbuf_realloc+0xf4>
    return;
 800cc3a:	bf00      	nop

}
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	08017808 	.word	0x08017808
 800cc48:	08017920 	.word	0x08017920
 800cc4c:	08017868 	.word	0x08017868
 800cc50:	08017938 	.word	0x08017938
 800cc54:	08017950 	.word	0x08017950

0800cc58 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	4613      	mov	r3, r2
 800cc64:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d106      	bne.n	800cc7a <pbuf_add_header_impl+0x22>
 800cc6c:	4b2b      	ldr	r3, [pc, #172]	; (800cd1c <pbuf_add_header_impl+0xc4>)
 800cc6e:	f240 12df 	movw	r2, #479	; 0x1df
 800cc72:	492b      	ldr	r1, [pc, #172]	; (800cd20 <pbuf_add_header_impl+0xc8>)
 800cc74:	482b      	ldr	r0, [pc, #172]	; (800cd24 <pbuf_add_header_impl+0xcc>)
 800cc76:	f009 fa85 	bl	8016184 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d003      	beq.n	800cc88 <pbuf_add_header_impl+0x30>
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc86:	d301      	bcc.n	800cc8c <pbuf_add_header_impl+0x34>
    return 1;
 800cc88:	2301      	movs	r3, #1
 800cc8a:	e043      	b.n	800cd14 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d101      	bne.n	800cc96 <pbuf_add_header_impl+0x3e>
    return 0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	e03e      	b.n	800cd14 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	891a      	ldrh	r2, [r3, #8]
 800cc9e:	8a7b      	ldrh	r3, [r7, #18]
 800cca0:	4413      	add	r3, r2
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	8a7a      	ldrh	r2, [r7, #18]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d901      	bls.n	800ccae <pbuf_add_header_impl+0x56>
    return 1;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	e032      	b.n	800cd14 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	7b1b      	ldrb	r3, [r3, #12]
 800ccb2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ccb4:	8a3b      	ldrh	r3, [r7, #16]
 800ccb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00c      	beq.n	800ccd8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	425b      	negs	r3, r3
 800ccc6:	4413      	add	r3, r2
 800ccc8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	3310      	adds	r3, #16
 800ccce:	697a      	ldr	r2, [r7, #20]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d20d      	bcs.n	800ccf0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e01d      	b.n	800cd14 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ccd8:	79fb      	ldrb	r3, [r7, #7]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d006      	beq.n	800ccec <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	685a      	ldr	r2, [r3, #4]
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	425b      	negs	r3, r3
 800cce6:	4413      	add	r3, r2
 800cce8:	617b      	str	r3, [r7, #20]
 800ccea:	e001      	b.n	800ccf0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ccec:	2301      	movs	r3, #1
 800ccee:	e011      	b.n	800cd14 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	697a      	ldr	r2, [r7, #20]
 800ccf4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	895a      	ldrh	r2, [r3, #10]
 800ccfa:	8a7b      	ldrh	r3, [r7, #18]
 800ccfc:	4413      	add	r3, r2
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	891a      	ldrh	r2, [r3, #8]
 800cd08:	8a7b      	ldrh	r3, [r7, #18]
 800cd0a:	4413      	add	r3, r2
 800cd0c:	b29a      	uxth	r2, r3
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	811a      	strh	r2, [r3, #8]


  return 0;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3718      	adds	r7, #24
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	08017808 	.word	0x08017808
 800cd20:	0801796c 	.word	0x0801796c
 800cd24:	08017868 	.word	0x08017868

0800cd28 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b082      	sub	sp, #8
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cd32:	2200      	movs	r2, #0
 800cd34:	6839      	ldr	r1, [r7, #0]
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f7ff ff8e 	bl	800cc58 <pbuf_add_header_impl>
 800cd3c:	4603      	mov	r3, r0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
	...

0800cd48 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d106      	bne.n	800cd66 <pbuf_remove_header+0x1e>
 800cd58:	4b20      	ldr	r3, [pc, #128]	; (800cddc <pbuf_remove_header+0x94>)
 800cd5a:	f240 224b 	movw	r2, #587	; 0x24b
 800cd5e:	4920      	ldr	r1, [pc, #128]	; (800cde0 <pbuf_remove_header+0x98>)
 800cd60:	4820      	ldr	r0, [pc, #128]	; (800cde4 <pbuf_remove_header+0x9c>)
 800cd62:	f009 fa0f 	bl	8016184 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d003      	beq.n	800cd74 <pbuf_remove_header+0x2c>
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd72:	d301      	bcc.n	800cd78 <pbuf_remove_header+0x30>
    return 1;
 800cd74:	2301      	movs	r3, #1
 800cd76:	e02c      	b.n	800cdd2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d101      	bne.n	800cd82 <pbuf_remove_header+0x3a>
    return 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	e027      	b.n	800cdd2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	895b      	ldrh	r3, [r3, #10]
 800cd8a:	89fa      	ldrh	r2, [r7, #14]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d908      	bls.n	800cda2 <pbuf_remove_header+0x5a>
 800cd90:	4b12      	ldr	r3, [pc, #72]	; (800cddc <pbuf_remove_header+0x94>)
 800cd92:	f240 2255 	movw	r2, #597	; 0x255
 800cd96:	4914      	ldr	r1, [pc, #80]	; (800cde8 <pbuf_remove_header+0xa0>)
 800cd98:	4812      	ldr	r0, [pc, #72]	; (800cde4 <pbuf_remove_header+0x9c>)
 800cd9a:	f009 f9f3 	bl	8016184 <iprintf>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e017      	b.n	800cdd2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	685a      	ldr	r2, [r3, #4]
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	441a      	add	r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	895a      	ldrh	r2, [r3, #10]
 800cdb8:	89fb      	ldrh	r3, [r7, #14]
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	891a      	ldrh	r2, [r3, #8]
 800cdc6:	89fb      	ldrh	r3, [r7, #14]
 800cdc8:	1ad3      	subs	r3, r2, r3
 800cdca:	b29a      	uxth	r2, r3
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3710      	adds	r7, #16
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	08017808 	.word	0x08017808
 800cde0:	0801796c 	.word	0x0801796c
 800cde4:	08017868 	.word	0x08017868
 800cde8:	08017978 	.word	0x08017978

0800cdec <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b082      	sub	sp, #8
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	807b      	strh	r3, [r7, #2]
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cdfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	da08      	bge.n	800ce16 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ce04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce08:	425b      	negs	r3, r3
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f7ff ff9b 	bl	800cd48 <pbuf_remove_header>
 800ce12:	4603      	mov	r3, r0
 800ce14:	e007      	b.n	800ce26 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ce16:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce1a:	787a      	ldrb	r2, [r7, #1]
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7ff ff1a 	bl	800cc58 <pbuf_add_header_impl>
 800ce24:	4603      	mov	r3, r0
  }
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3708      	adds	r7, #8
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b082      	sub	sp, #8
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
 800ce36:	460b      	mov	r3, r1
 800ce38:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ce3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	4619      	mov	r1, r3
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f7ff ffd2 	bl	800cdec <pbuf_header_impl>
 800ce48:	4603      	mov	r3, r0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3708      	adds	r7, #8
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
	...

0800ce54 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b086      	sub	sp, #24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d10b      	bne.n	800ce7a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d106      	bne.n	800ce76 <pbuf_free+0x22>
 800ce68:	4b38      	ldr	r3, [pc, #224]	; (800cf4c <pbuf_free+0xf8>)
 800ce6a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ce6e:	4938      	ldr	r1, [pc, #224]	; (800cf50 <pbuf_free+0xfc>)
 800ce70:	4838      	ldr	r0, [pc, #224]	; (800cf54 <pbuf_free+0x100>)
 800ce72:	f009 f987 	bl	8016184 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	e063      	b.n	800cf42 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ce7e:	e05c      	b.n	800cf3a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	7b9b      	ldrb	r3, [r3, #14]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d106      	bne.n	800ce96 <pbuf_free+0x42>
 800ce88:	4b30      	ldr	r3, [pc, #192]	; (800cf4c <pbuf_free+0xf8>)
 800ce8a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ce8e:	4932      	ldr	r1, [pc, #200]	; (800cf58 <pbuf_free+0x104>)
 800ce90:	4830      	ldr	r0, [pc, #192]	; (800cf54 <pbuf_free+0x100>)
 800ce92:	f009 f977 	bl	8016184 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	7b9b      	ldrb	r3, [r3, #14]
 800ce9a:	3b01      	subs	r3, #1
 800ce9c:	b2da      	uxtb	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	739a      	strb	r2, [r3, #14]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	7b9b      	ldrb	r3, [r3, #14]
 800cea6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cea8:	7dbb      	ldrb	r3, [r7, #22]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d143      	bne.n	800cf36 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	7b1b      	ldrb	r3, [r3, #12]
 800ceb8:	f003 030f 	and.w	r3, r3, #15
 800cebc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	7b5b      	ldrb	r3, [r3, #13]
 800cec2:	f003 0302 	and.w	r3, r3, #2
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d011      	beq.n	800ceee <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	691b      	ldr	r3, [r3, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d106      	bne.n	800cee4 <pbuf_free+0x90>
 800ced6:	4b1d      	ldr	r3, [pc, #116]	; (800cf4c <pbuf_free+0xf8>)
 800ced8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800cedc:	491f      	ldr	r1, [pc, #124]	; (800cf5c <pbuf_free+0x108>)
 800cede:	481d      	ldr	r0, [pc, #116]	; (800cf54 <pbuf_free+0x100>)
 800cee0:	f009 f950 	bl	8016184 <iprintf>
        pc->custom_free_function(p);
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	691b      	ldr	r3, [r3, #16]
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	4798      	blx	r3
 800ceec:	e01d      	b.n	800cf2a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ceee:	7bfb      	ldrb	r3, [r7, #15]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d104      	bne.n	800cefe <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800cef4:	6879      	ldr	r1, [r7, #4]
 800cef6:	2008      	movs	r0, #8
 800cef8:	f7ff f936 	bl	800c168 <memp_free>
 800cefc:	e015      	b.n	800cf2a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cefe:	7bfb      	ldrb	r3, [r7, #15]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d104      	bne.n	800cf0e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800cf04:	6879      	ldr	r1, [r7, #4]
 800cf06:	2007      	movs	r0, #7
 800cf08:	f7ff f92e 	bl	800c168 <memp_free>
 800cf0c:	e00d      	b.n	800cf2a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d103      	bne.n	800cf1c <pbuf_free+0xc8>
          mem_free(p);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f7fe fdc1 	bl	800ba9c <mem_free>
 800cf1a:	e006      	b.n	800cf2a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cf1c:	4b0b      	ldr	r3, [pc, #44]	; (800cf4c <pbuf_free+0xf8>)
 800cf1e:	f240 320f 	movw	r2, #783	; 0x30f
 800cf22:	490f      	ldr	r1, [pc, #60]	; (800cf60 <pbuf_free+0x10c>)
 800cf24:	480b      	ldr	r0, [pc, #44]	; (800cf54 <pbuf_free+0x100>)
 800cf26:	f009 f92d 	bl	8016184 <iprintf>
        }
      }
      count++;
 800cf2a:	7dfb      	ldrb	r3, [r7, #23]
 800cf2c:	3301      	adds	r3, #1
 800cf2e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	607b      	str	r3, [r7, #4]
 800cf34:	e001      	b.n	800cf3a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cf36:	2300      	movs	r3, #0
 800cf38:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d19f      	bne.n	800ce80 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cf40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3718      	adds	r7, #24
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	08017808 	.word	0x08017808
 800cf50:	0801796c 	.word	0x0801796c
 800cf54:	08017868 	.word	0x08017868
 800cf58:	08017998 	.word	0x08017998
 800cf5c:	080179b0 	.word	0x080179b0
 800cf60:	080179d4 	.word	0x080179d4

0800cf64 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cf70:	e005      	b.n	800cf7e <pbuf_clen+0x1a>
    ++len;
 800cf72:	89fb      	ldrh	r3, [r7, #14]
 800cf74:	3301      	adds	r3, #1
 800cf76:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d1f6      	bne.n	800cf72 <pbuf_clen+0xe>
  }
  return len;
 800cf84:	89fb      	ldrh	r3, [r7, #14]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3714      	adds	r7, #20
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
	...

0800cf94 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b082      	sub	sp, #8
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d010      	beq.n	800cfc4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	7b9b      	ldrb	r3, [r3, #14]
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	7b9b      	ldrb	r3, [r3, #14]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d106      	bne.n	800cfc4 <pbuf_ref+0x30>
 800cfb6:	4b05      	ldr	r3, [pc, #20]	; (800cfcc <pbuf_ref+0x38>)
 800cfb8:	f240 3242 	movw	r2, #834	; 0x342
 800cfbc:	4904      	ldr	r1, [pc, #16]	; (800cfd0 <pbuf_ref+0x3c>)
 800cfbe:	4805      	ldr	r0, [pc, #20]	; (800cfd4 <pbuf_ref+0x40>)
 800cfc0:	f009 f8e0 	bl	8016184 <iprintf>
  }
}
 800cfc4:	bf00      	nop
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	08017808 	.word	0x08017808
 800cfd0:	080179e8 	.word	0x080179e8
 800cfd4:	08017868 	.word	0x08017868

0800cfd8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <pbuf_cat+0x16>
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d107      	bne.n	800cffe <pbuf_cat+0x26>
 800cfee:	4b20      	ldr	r3, [pc, #128]	; (800d070 <pbuf_cat+0x98>)
 800cff0:	f240 3259 	movw	r2, #857	; 0x359
 800cff4:	491f      	ldr	r1, [pc, #124]	; (800d074 <pbuf_cat+0x9c>)
 800cff6:	4820      	ldr	r0, [pc, #128]	; (800d078 <pbuf_cat+0xa0>)
 800cff8:	f009 f8c4 	bl	8016184 <iprintf>
 800cffc:	e034      	b.n	800d068 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	60fb      	str	r3, [r7, #12]
 800d002:	e00a      	b.n	800d01a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	891a      	ldrh	r2, [r3, #8]
 800d008:	683b      	ldr	r3, [r7, #0]
 800d00a:	891b      	ldrh	r3, [r3, #8]
 800d00c:	4413      	add	r3, r2
 800d00e:	b29a      	uxth	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	60fb      	str	r3, [r7, #12]
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d1f0      	bne.n	800d004 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	891a      	ldrh	r2, [r3, #8]
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	895b      	ldrh	r3, [r3, #10]
 800d02a:	429a      	cmp	r2, r3
 800d02c:	d006      	beq.n	800d03c <pbuf_cat+0x64>
 800d02e:	4b10      	ldr	r3, [pc, #64]	; (800d070 <pbuf_cat+0x98>)
 800d030:	f240 3262 	movw	r2, #866	; 0x362
 800d034:	4911      	ldr	r1, [pc, #68]	; (800d07c <pbuf_cat+0xa4>)
 800d036:	4810      	ldr	r0, [pc, #64]	; (800d078 <pbuf_cat+0xa0>)
 800d038:	f009 f8a4 	bl	8016184 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d006      	beq.n	800d052 <pbuf_cat+0x7a>
 800d044:	4b0a      	ldr	r3, [pc, #40]	; (800d070 <pbuf_cat+0x98>)
 800d046:	f240 3263 	movw	r2, #867	; 0x363
 800d04a:	490d      	ldr	r1, [pc, #52]	; (800d080 <pbuf_cat+0xa8>)
 800d04c:	480a      	ldr	r0, [pc, #40]	; (800d078 <pbuf_cat+0xa0>)
 800d04e:	f009 f899 	bl	8016184 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	891a      	ldrh	r2, [r3, #8]
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	891b      	ldrh	r3, [r3, #8]
 800d05a:	4413      	add	r3, r2
 800d05c:	b29a      	uxth	r2, r3
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	683a      	ldr	r2, [r7, #0]
 800d066:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
 800d06e:	bf00      	nop
 800d070:	08017808 	.word	0x08017808
 800d074:	080179fc 	.word	0x080179fc
 800d078:	08017868 	.word	0x08017868
 800d07c:	08017a34 	.word	0x08017a34
 800d080:	08017a64 	.word	0x08017a64

0800d084 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d08e:	6839      	ldr	r1, [r7, #0]
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff ffa1 	bl	800cfd8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d096:	6838      	ldr	r0, [r7, #0]
 800d098:	f7ff ff7c 	bl	800cf94 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d09c:	bf00      	nop
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b086      	sub	sp, #24
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	617b      	str	r3, [r7, #20]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d008      	beq.n	800d0ce <pbuf_copy+0x2a>
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d005      	beq.n	800d0ce <pbuf_copy+0x2a>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	891a      	ldrh	r2, [r3, #8]
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	891b      	ldrh	r3, [r3, #8]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d209      	bcs.n	800d0e2 <pbuf_copy+0x3e>
 800d0ce:	4b57      	ldr	r3, [pc, #348]	; (800d22c <pbuf_copy+0x188>)
 800d0d0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d0d4:	4956      	ldr	r1, [pc, #344]	; (800d230 <pbuf_copy+0x18c>)
 800d0d6:	4857      	ldr	r0, [pc, #348]	; (800d234 <pbuf_copy+0x190>)
 800d0d8:	f009 f854 	bl	8016184 <iprintf>
 800d0dc:	f06f 030f 	mvn.w	r3, #15
 800d0e0:	e09f      	b.n	800d222 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	895b      	ldrh	r3, [r3, #10]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	1ad2      	subs	r2, r2, r3
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	895b      	ldrh	r3, [r3, #10]
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	1acb      	subs	r3, r1, r3
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d306      	bcc.n	800d108 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	895b      	ldrh	r3, [r3, #10]
 800d0fe:	461a      	mov	r2, r3
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	60fb      	str	r3, [r7, #12]
 800d106:	e005      	b.n	800d114 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	895b      	ldrh	r3, [r3, #10]
 800d10c:	461a      	mov	r2, r3
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	1ad3      	subs	r3, r2, r3
 800d112:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	18d0      	adds	r0, r2, r3
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	685a      	ldr	r2, [r3, #4]
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	4413      	add	r3, r2
 800d124:	68fa      	ldr	r2, [r7, #12]
 800d126:	4619      	mov	r1, r3
 800d128:	f009 f816 	bl	8016158 <memcpy>
    offset_to += len;
 800d12c:	697a      	ldr	r2, [r7, #20]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	4413      	add	r3, r2
 800d132:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d134:	693a      	ldr	r2, [r7, #16]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	4413      	add	r3, r2
 800d13a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	895b      	ldrh	r3, [r3, #10]
 800d140:	461a      	mov	r2, r3
 800d142:	697b      	ldr	r3, [r7, #20]
 800d144:	4293      	cmp	r3, r2
 800d146:	d906      	bls.n	800d156 <pbuf_copy+0xb2>
 800d148:	4b38      	ldr	r3, [pc, #224]	; (800d22c <pbuf_copy+0x188>)
 800d14a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d14e:	493a      	ldr	r1, [pc, #232]	; (800d238 <pbuf_copy+0x194>)
 800d150:	4838      	ldr	r0, [pc, #224]	; (800d234 <pbuf_copy+0x190>)
 800d152:	f009 f817 	bl	8016184 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	895b      	ldrh	r3, [r3, #10]
 800d15a:	461a      	mov	r2, r3
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	4293      	cmp	r3, r2
 800d160:	d906      	bls.n	800d170 <pbuf_copy+0xcc>
 800d162:	4b32      	ldr	r3, [pc, #200]	; (800d22c <pbuf_copy+0x188>)
 800d164:	f240 32da 	movw	r2, #986	; 0x3da
 800d168:	4934      	ldr	r1, [pc, #208]	; (800d23c <pbuf_copy+0x198>)
 800d16a:	4832      	ldr	r0, [pc, #200]	; (800d234 <pbuf_copy+0x190>)
 800d16c:	f009 f80a 	bl	8016184 <iprintf>
    if (offset_from >= p_from->len) {
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	895b      	ldrh	r3, [r3, #10]
 800d174:	461a      	mov	r2, r3
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	4293      	cmp	r3, r2
 800d17a:	d304      	bcc.n	800d186 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d17c:	2300      	movs	r3, #0
 800d17e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	895b      	ldrh	r3, [r3, #10]
 800d18a:	461a      	mov	r2, r3
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	4293      	cmp	r3, r2
 800d190:	d114      	bne.n	800d1bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d192:	2300      	movs	r3, #0
 800d194:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d10c      	bne.n	800d1bc <pbuf_copy+0x118>
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d009      	beq.n	800d1bc <pbuf_copy+0x118>
 800d1a8:	4b20      	ldr	r3, [pc, #128]	; (800d22c <pbuf_copy+0x188>)
 800d1aa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d1ae:	4924      	ldr	r1, [pc, #144]	; (800d240 <pbuf_copy+0x19c>)
 800d1b0:	4820      	ldr	r0, [pc, #128]	; (800d234 <pbuf_copy+0x190>)
 800d1b2:	f008 ffe7 	bl	8016184 <iprintf>
 800d1b6:	f06f 030f 	mvn.w	r3, #15
 800d1ba:	e032      	b.n	800d222 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d013      	beq.n	800d1ea <pbuf_copy+0x146>
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	895a      	ldrh	r2, [r3, #10]
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	891b      	ldrh	r3, [r3, #8]
 800d1ca:	429a      	cmp	r2, r3
 800d1cc:	d10d      	bne.n	800d1ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d009      	beq.n	800d1ea <pbuf_copy+0x146>
 800d1d6:	4b15      	ldr	r3, [pc, #84]	; (800d22c <pbuf_copy+0x188>)
 800d1d8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d1dc:	4919      	ldr	r1, [pc, #100]	; (800d244 <pbuf_copy+0x1a0>)
 800d1de:	4815      	ldr	r0, [pc, #84]	; (800d234 <pbuf_copy+0x190>)
 800d1e0:	f008 ffd0 	bl	8016184 <iprintf>
 800d1e4:	f06f 0305 	mvn.w	r3, #5
 800d1e8:	e01b      	b.n	800d222 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d013      	beq.n	800d218 <pbuf_copy+0x174>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	895a      	ldrh	r2, [r3, #10]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	891b      	ldrh	r3, [r3, #8]
 800d1f8:	429a      	cmp	r2, r3
 800d1fa:	d10d      	bne.n	800d218 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d009      	beq.n	800d218 <pbuf_copy+0x174>
 800d204:	4b09      	ldr	r3, [pc, #36]	; (800d22c <pbuf_copy+0x188>)
 800d206:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d20a:	490e      	ldr	r1, [pc, #56]	; (800d244 <pbuf_copy+0x1a0>)
 800d20c:	4809      	ldr	r0, [pc, #36]	; (800d234 <pbuf_copy+0x190>)
 800d20e:	f008 ffb9 	bl	8016184 <iprintf>
 800d212:	f06f 0305 	mvn.w	r3, #5
 800d216:	e004      	b.n	800d222 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	f47f af61 	bne.w	800d0e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3718      	adds	r7, #24
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	08017808 	.word	0x08017808
 800d230:	08017ab0 	.word	0x08017ab0
 800d234:	08017868 	.word	0x08017868
 800d238:	08017ae0 	.word	0x08017ae0
 800d23c:	08017af8 	.word	0x08017af8
 800d240:	08017b14 	.word	0x08017b14
 800d244:	08017b24 	.word	0x08017b24

0800d248 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b088      	sub	sp, #32
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	4611      	mov	r1, r2
 800d254:	461a      	mov	r2, r3
 800d256:	460b      	mov	r3, r1
 800d258:	80fb      	strh	r3, [r7, #6]
 800d25a:	4613      	mov	r3, r2
 800d25c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d262:	2300      	movs	r3, #0
 800d264:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d108      	bne.n	800d27e <pbuf_copy_partial+0x36>
 800d26c:	4b2b      	ldr	r3, [pc, #172]	; (800d31c <pbuf_copy_partial+0xd4>)
 800d26e:	f240 420a 	movw	r2, #1034	; 0x40a
 800d272:	492b      	ldr	r1, [pc, #172]	; (800d320 <pbuf_copy_partial+0xd8>)
 800d274:	482b      	ldr	r0, [pc, #172]	; (800d324 <pbuf_copy_partial+0xdc>)
 800d276:	f008 ff85 	bl	8016184 <iprintf>
 800d27a:	2300      	movs	r3, #0
 800d27c:	e04a      	b.n	800d314 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d108      	bne.n	800d296 <pbuf_copy_partial+0x4e>
 800d284:	4b25      	ldr	r3, [pc, #148]	; (800d31c <pbuf_copy_partial+0xd4>)
 800d286:	f240 420b 	movw	r2, #1035	; 0x40b
 800d28a:	4927      	ldr	r1, [pc, #156]	; (800d328 <pbuf_copy_partial+0xe0>)
 800d28c:	4825      	ldr	r0, [pc, #148]	; (800d324 <pbuf_copy_partial+0xdc>)
 800d28e:	f008 ff79 	bl	8016184 <iprintf>
 800d292:	2300      	movs	r3, #0
 800d294:	e03e      	b.n	800d314 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	61fb      	str	r3, [r7, #28]
 800d29a:	e034      	b.n	800d306 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d29c:	88bb      	ldrh	r3, [r7, #4]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00a      	beq.n	800d2b8 <pbuf_copy_partial+0x70>
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	895b      	ldrh	r3, [r3, #10]
 800d2a6:	88ba      	ldrh	r2, [r7, #4]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d305      	bcc.n	800d2b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	895b      	ldrh	r3, [r3, #10]
 800d2b0:	88ba      	ldrh	r2, [r7, #4]
 800d2b2:	1ad3      	subs	r3, r2, r3
 800d2b4:	80bb      	strh	r3, [r7, #4]
 800d2b6:	e023      	b.n	800d300 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	895a      	ldrh	r2, [r3, #10]
 800d2bc:	88bb      	ldrh	r3, [r7, #4]
 800d2be:	1ad3      	subs	r3, r2, r3
 800d2c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d2c2:	8b3a      	ldrh	r2, [r7, #24]
 800d2c4:	88fb      	ldrh	r3, [r7, #6]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d901      	bls.n	800d2ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d2ca:	88fb      	ldrh	r3, [r7, #6]
 800d2cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d2ce:	8b7b      	ldrh	r3, [r7, #26]
 800d2d0:	68ba      	ldr	r2, [r7, #8]
 800d2d2:	18d0      	adds	r0, r2, r3
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	685a      	ldr	r2, [r3, #4]
 800d2d8:	88bb      	ldrh	r3, [r7, #4]
 800d2da:	4413      	add	r3, r2
 800d2dc:	8b3a      	ldrh	r2, [r7, #24]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	f008 ff3a 	bl	8016158 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d2e4:	8afa      	ldrh	r2, [r7, #22]
 800d2e6:	8b3b      	ldrh	r3, [r7, #24]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d2ec:	8b7a      	ldrh	r2, [r7, #26]
 800d2ee:	8b3b      	ldrh	r3, [r7, #24]
 800d2f0:	4413      	add	r3, r2
 800d2f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d2f4:	88fa      	ldrh	r2, [r7, #6]
 800d2f6:	8b3b      	ldrh	r3, [r7, #24]
 800d2f8:	1ad3      	subs	r3, r2, r3
 800d2fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	61fb      	str	r3, [r7, #28]
 800d306:	88fb      	ldrh	r3, [r7, #6]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d002      	beq.n	800d312 <pbuf_copy_partial+0xca>
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1c4      	bne.n	800d29c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d312:	8afb      	ldrh	r3, [r7, #22]
}
 800d314:	4618      	mov	r0, r3
 800d316:	3720      	adds	r7, #32
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	08017808 	.word	0x08017808
 800d320:	08017b50 	.word	0x08017b50
 800d324:	08017868 	.word	0x08017868
 800d328:	08017b70 	.word	0x08017b70

0800d32c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b088      	sub	sp, #32
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	4613      	mov	r3, r2
 800d338:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800d33a:	88fb      	ldrh	r3, [r7, #6]
 800d33c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800d33e:	2300      	movs	r3, #0
 800d340:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d109      	bne.n	800d35c <pbuf_take+0x30>
 800d348:	4b3a      	ldr	r3, [pc, #232]	; (800d434 <pbuf_take+0x108>)
 800d34a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800d34e:	493a      	ldr	r1, [pc, #232]	; (800d438 <pbuf_take+0x10c>)
 800d350:	483a      	ldr	r0, [pc, #232]	; (800d43c <pbuf_take+0x110>)
 800d352:	f008 ff17 	bl	8016184 <iprintf>
 800d356:	f06f 030f 	mvn.w	r3, #15
 800d35a:	e067      	b.n	800d42c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d109      	bne.n	800d376 <pbuf_take+0x4a>
 800d362:	4b34      	ldr	r3, [pc, #208]	; (800d434 <pbuf_take+0x108>)
 800d364:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800d368:	4935      	ldr	r1, [pc, #212]	; (800d440 <pbuf_take+0x114>)
 800d36a:	4834      	ldr	r0, [pc, #208]	; (800d43c <pbuf_take+0x110>)
 800d36c:	f008 ff0a 	bl	8016184 <iprintf>
 800d370:	f06f 030f 	mvn.w	r3, #15
 800d374:	e05a      	b.n	800d42c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	891b      	ldrh	r3, [r3, #8]
 800d37a:	88fa      	ldrh	r2, [r7, #6]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d909      	bls.n	800d394 <pbuf_take+0x68>
 800d380:	4b2c      	ldr	r3, [pc, #176]	; (800d434 <pbuf_take+0x108>)
 800d382:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800d386:	492f      	ldr	r1, [pc, #188]	; (800d444 <pbuf_take+0x118>)
 800d388:	482c      	ldr	r0, [pc, #176]	; (800d43c <pbuf_take+0x110>)
 800d38a:	f008 fefb 	bl	8016184 <iprintf>
 800d38e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d392:	e04b      	b.n	800d42c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d007      	beq.n	800d3aa <pbuf_take+0x7e>
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d004      	beq.n	800d3aa <pbuf_take+0x7e>
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	891b      	ldrh	r3, [r3, #8]
 800d3a4:	88fa      	ldrh	r2, [r7, #6]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d902      	bls.n	800d3b0 <pbuf_take+0x84>
    return ERR_ARG;
 800d3aa:	f06f 030f 	mvn.w	r3, #15
 800d3ae:	e03d      	b.n	800d42c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	61fb      	str	r3, [r7, #28]
 800d3b4:	e028      	b.n	800d408 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800d3b6:	69fb      	ldr	r3, [r7, #28]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d106      	bne.n	800d3ca <pbuf_take+0x9e>
 800d3bc:	4b1d      	ldr	r3, [pc, #116]	; (800d434 <pbuf_take+0x108>)
 800d3be:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d3c2:	4921      	ldr	r1, [pc, #132]	; (800d448 <pbuf_take+0x11c>)
 800d3c4:	481d      	ldr	r0, [pc, #116]	; (800d43c <pbuf_take+0x110>)
 800d3c6:	f008 fedd 	bl	8016184 <iprintf>
    buf_copy_len = total_copy_len;
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	895b      	ldrh	r3, [r3, #10]
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d902      	bls.n	800d3e0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800d3da:	69fb      	ldr	r3, [r7, #28]
 800d3dc:	895b      	ldrh	r3, [r3, #10]
 800d3de:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	6858      	ldr	r0, [r3, #4]
 800d3e4:	68ba      	ldr	r2, [r7, #8]
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	4413      	add	r3, r2
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	f008 feb3 	bl	8016158 <memcpy>
    total_copy_len -= buf_copy_len;
 800d3f2:	697a      	ldr	r2, [r7, #20]
 800d3f4:	69bb      	ldr	r3, [r7, #24]
 800d3f6:	1ad3      	subs	r3, r2, r3
 800d3f8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800d3fa:	693a      	ldr	r2, [r7, #16]
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	4413      	add	r3, r2
 800d400:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	61fb      	str	r3, [r7, #28]
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d1d3      	bne.n	800d3b6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d103      	bne.n	800d41c <pbuf_take+0xf0>
 800d414:	88fb      	ldrh	r3, [r7, #6]
 800d416:	693a      	ldr	r2, [r7, #16]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d006      	beq.n	800d42a <pbuf_take+0xfe>
 800d41c:	4b05      	ldr	r3, [pc, #20]	; (800d434 <pbuf_take+0x108>)
 800d41e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800d422:	490a      	ldr	r1, [pc, #40]	; (800d44c <pbuf_take+0x120>)
 800d424:	4805      	ldr	r0, [pc, #20]	; (800d43c <pbuf_take+0x110>)
 800d426:	f008 fead 	bl	8016184 <iprintf>
  return ERR_OK;
 800d42a:	2300      	movs	r3, #0
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3720      	adds	r7, #32
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	08017808 	.word	0x08017808
 800d438:	08017be0 	.word	0x08017be0
 800d43c:	08017868 	.word	0x08017868
 800d440:	08017bf8 	.word	0x08017bf8
 800d444:	08017c14 	.word	0x08017c14
 800d448:	08017c34 	.word	0x08017c34
 800d44c:	08017c4c 	.word	0x08017c4c

0800d450 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d450:	b580      	push	{r7, lr}
 800d452:	b084      	sub	sp, #16
 800d454:	af00      	add	r7, sp, #0
 800d456:	4603      	mov	r3, r0
 800d458:	603a      	str	r2, [r7, #0]
 800d45a:	71fb      	strb	r3, [r7, #7]
 800d45c:	460b      	mov	r3, r1
 800d45e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	8919      	ldrh	r1, [r3, #8]
 800d464:	88ba      	ldrh	r2, [r7, #4]
 800d466:	79fb      	ldrb	r3, [r7, #7]
 800d468:	4618      	mov	r0, r3
 800d46a:	f7ff fa0f 	bl	800c88c <pbuf_alloc>
 800d46e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <pbuf_clone+0x2a>
    return NULL;
 800d476:	2300      	movs	r3, #0
 800d478:	e011      	b.n	800d49e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d47a:	6839      	ldr	r1, [r7, #0]
 800d47c:	68f8      	ldr	r0, [r7, #12]
 800d47e:	f7ff fe11 	bl	800d0a4 <pbuf_copy>
 800d482:	4603      	mov	r3, r0
 800d484:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d486:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d006      	beq.n	800d49c <pbuf_clone+0x4c>
 800d48e:	4b06      	ldr	r3, [pc, #24]	; (800d4a8 <pbuf_clone+0x58>)
 800d490:	f240 5224 	movw	r2, #1316	; 0x524
 800d494:	4905      	ldr	r1, [pc, #20]	; (800d4ac <pbuf_clone+0x5c>)
 800d496:	4806      	ldr	r0, [pc, #24]	; (800d4b0 <pbuf_clone+0x60>)
 800d498:	f008 fe74 	bl	8016184 <iprintf>
  return q;
 800d49c:	68fb      	ldr	r3, [r7, #12]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	08017808 	.word	0x08017808
 800d4ac:	08017c7c 	.word	0x08017c7c
 800d4b0:	08017868 	.word	0x08017868

0800d4b4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d4b8:	f008 fe7c 	bl	80161b4 <rand>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	b29b      	uxth	r3, r3
 800d4c0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d4ca:	b29a      	uxth	r2, r3
 800d4cc:	4b01      	ldr	r3, [pc, #4]	; (800d4d4 <tcp_init+0x20>)
 800d4ce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d4d0:	bf00      	nop
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	20000020 	.word	0x20000020

0800d4d8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	7d1b      	ldrb	r3, [r3, #20]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d105      	bne.n	800d4f4 <tcp_free+0x1c>
 800d4e8:	4b06      	ldr	r3, [pc, #24]	; (800d504 <tcp_free+0x2c>)
 800d4ea:	22d4      	movs	r2, #212	; 0xd4
 800d4ec:	4906      	ldr	r1, [pc, #24]	; (800d508 <tcp_free+0x30>)
 800d4ee:	4807      	ldr	r0, [pc, #28]	; (800d50c <tcp_free+0x34>)
 800d4f0:	f008 fe48 	bl	8016184 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	2001      	movs	r0, #1
 800d4f8:	f7fe fe36 	bl	800c168 <memp_free>
}
 800d4fc:	bf00      	nop
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}
 800d504:	08017d08 	.word	0x08017d08
 800d508:	08017d38 	.word	0x08017d38
 800d50c:	08017d4c 	.word	0x08017d4c

0800d510 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b082      	sub	sp, #8
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	7d1b      	ldrb	r3, [r3, #20]
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d105      	bne.n	800d52c <tcp_free_listen+0x1c>
 800d520:	4b06      	ldr	r3, [pc, #24]	; (800d53c <tcp_free_listen+0x2c>)
 800d522:	22df      	movs	r2, #223	; 0xdf
 800d524:	4906      	ldr	r1, [pc, #24]	; (800d540 <tcp_free_listen+0x30>)
 800d526:	4807      	ldr	r0, [pc, #28]	; (800d544 <tcp_free_listen+0x34>)
 800d528:	f008 fe2c 	bl	8016184 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d52c:	6879      	ldr	r1, [r7, #4]
 800d52e:	2002      	movs	r0, #2
 800d530:	f7fe fe1a 	bl	800c168 <memp_free>
}
 800d534:	bf00      	nop
 800d536:	3708      	adds	r7, #8
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	08017d08 	.word	0x08017d08
 800d540:	08017d74 	.word	0x08017d74
 800d544:	08017d4c 	.word	0x08017d4c

0800d548 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d54c:	f000 fea2 	bl	800e294 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d550:	4b07      	ldr	r3, [pc, #28]	; (800d570 <tcp_tmr+0x28>)
 800d552:	781b      	ldrb	r3, [r3, #0]
 800d554:	3301      	adds	r3, #1
 800d556:	b2da      	uxtb	r2, r3
 800d558:	4b05      	ldr	r3, [pc, #20]	; (800d570 <tcp_tmr+0x28>)
 800d55a:	701a      	strb	r2, [r3, #0]
 800d55c:	4b04      	ldr	r3, [pc, #16]	; (800d570 <tcp_tmr+0x28>)
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	f003 0301 	and.w	r3, r3, #1
 800d564:	2b00      	cmp	r3, #0
 800d566:	d001      	beq.n	800d56c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d568:	f000 fb54 	bl	800dc14 <tcp_slowtmr>
  }
}
 800d56c:	bf00      	nop
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	20008f35 	.word	0x20008f35

0800d574 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b084      	sub	sp, #16
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
 800d57c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d105      	bne.n	800d590 <tcp_remove_listener+0x1c>
 800d584:	4b0d      	ldr	r3, [pc, #52]	; (800d5bc <tcp_remove_listener+0x48>)
 800d586:	22ff      	movs	r2, #255	; 0xff
 800d588:	490d      	ldr	r1, [pc, #52]	; (800d5c0 <tcp_remove_listener+0x4c>)
 800d58a:	480e      	ldr	r0, [pc, #56]	; (800d5c4 <tcp_remove_listener+0x50>)
 800d58c:	f008 fdfa 	bl	8016184 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	60fb      	str	r3, [r7, #12]
 800d594:	e00a      	b.n	800d5ac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d59a:	683a      	ldr	r2, [r7, #0]
 800d59c:	429a      	cmp	r2, r3
 800d59e:	d102      	bne.n	800d5a6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	68db      	ldr	r3, [r3, #12]
 800d5aa:	60fb      	str	r3, [r7, #12]
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1f1      	bne.n	800d596 <tcp_remove_listener+0x22>
    }
  }
}
 800d5b2:	bf00      	nop
 800d5b4:	bf00      	nop
 800d5b6:	3710      	adds	r7, #16
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}
 800d5bc:	08017d08 	.word	0x08017d08
 800d5c0:	08017d90 	.word	0x08017d90
 800d5c4:	08017d4c 	.word	0x08017d4c

0800d5c8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d106      	bne.n	800d5e4 <tcp_listen_closed+0x1c>
 800d5d6:	4b14      	ldr	r3, [pc, #80]	; (800d628 <tcp_listen_closed+0x60>)
 800d5d8:	f240 1211 	movw	r2, #273	; 0x111
 800d5dc:	4913      	ldr	r1, [pc, #76]	; (800d62c <tcp_listen_closed+0x64>)
 800d5de:	4814      	ldr	r0, [pc, #80]	; (800d630 <tcp_listen_closed+0x68>)
 800d5e0:	f008 fdd0 	bl	8016184 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	7d1b      	ldrb	r3, [r3, #20]
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d006      	beq.n	800d5fa <tcp_listen_closed+0x32>
 800d5ec:	4b0e      	ldr	r3, [pc, #56]	; (800d628 <tcp_listen_closed+0x60>)
 800d5ee:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d5f2:	4910      	ldr	r1, [pc, #64]	; (800d634 <tcp_listen_closed+0x6c>)
 800d5f4:	480e      	ldr	r0, [pc, #56]	; (800d630 <tcp_listen_closed+0x68>)
 800d5f6:	f008 fdc5 	bl	8016184 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	60fb      	str	r3, [r7, #12]
 800d5fe:	e00b      	b.n	800d618 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d600:	4a0d      	ldr	r2, [pc, #52]	; (800d638 <tcp_listen_closed+0x70>)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	6879      	ldr	r1, [r7, #4]
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7ff ffb1 	bl	800d574 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	3301      	adds	r3, #1
 800d616:	60fb      	str	r3, [r7, #12]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2b03      	cmp	r3, #3
 800d61c:	d9f0      	bls.n	800d600 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d61e:	bf00      	nop
 800d620:	bf00      	nop
 800d622:	3710      	adds	r7, #16
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}
 800d628:	08017d08 	.word	0x08017d08
 800d62c:	08017db8 	.word	0x08017db8
 800d630:	08017d4c 	.word	0x08017d4c
 800d634:	08017dc4 	.word	0x08017dc4
 800d638:	08019d14 	.word	0x08019d14

0800d63c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d63c:	b5b0      	push	{r4, r5, r7, lr}
 800d63e:	b088      	sub	sp, #32
 800d640:	af04      	add	r7, sp, #16
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	460b      	mov	r3, r1
 800d646:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d106      	bne.n	800d65c <tcp_close_shutdown+0x20>
 800d64e:	4b63      	ldr	r3, [pc, #396]	; (800d7dc <tcp_close_shutdown+0x1a0>)
 800d650:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d654:	4962      	ldr	r1, [pc, #392]	; (800d7e0 <tcp_close_shutdown+0x1a4>)
 800d656:	4863      	ldr	r0, [pc, #396]	; (800d7e4 <tcp_close_shutdown+0x1a8>)
 800d658:	f008 fd94 	bl	8016184 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d65c:	78fb      	ldrb	r3, [r7, #3]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d066      	beq.n	800d730 <tcp_close_shutdown+0xf4>
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	7d1b      	ldrb	r3, [r3, #20]
 800d666:	2b04      	cmp	r3, #4
 800d668:	d003      	beq.n	800d672 <tcp_close_shutdown+0x36>
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	7d1b      	ldrb	r3, [r3, #20]
 800d66e:	2b07      	cmp	r3, #7
 800d670:	d15e      	bne.n	800d730 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d676:	2b00      	cmp	r3, #0
 800d678:	d104      	bne.n	800d684 <tcp_close_shutdown+0x48>
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d67e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d682:	d055      	beq.n	800d730 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	8b5b      	ldrh	r3, [r3, #26]
 800d688:	f003 0310 	and.w	r3, r3, #16
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d106      	bne.n	800d69e <tcp_close_shutdown+0x62>
 800d690:	4b52      	ldr	r3, [pc, #328]	; (800d7dc <tcp_close_shutdown+0x1a0>)
 800d692:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d696:	4954      	ldr	r1, [pc, #336]	; (800d7e8 <tcp_close_shutdown+0x1ac>)
 800d698:	4852      	ldr	r0, [pc, #328]	; (800d7e4 <tcp_close_shutdown+0x1a8>)
 800d69a:	f008 fd73 	bl	8016184 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d6a6:	687d      	ldr	r5, [r7, #4]
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	3304      	adds	r3, #4
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	8ad2      	ldrh	r2, [r2, #22]
 800d6b0:	6879      	ldr	r1, [r7, #4]
 800d6b2:	8b09      	ldrh	r1, [r1, #24]
 800d6b4:	9102      	str	r1, [sp, #8]
 800d6b6:	9201      	str	r2, [sp, #4]
 800d6b8:	9300      	str	r3, [sp, #0]
 800d6ba:	462b      	mov	r3, r5
 800d6bc:	4622      	mov	r2, r4
 800d6be:	4601      	mov	r1, r0
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f004 fe91 	bl	80123e8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f001 f8c6 	bl	800e858 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d6cc:	4b47      	ldr	r3, [pc, #284]	; (800d7ec <tcp_close_shutdown+0x1b0>)
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	687a      	ldr	r2, [r7, #4]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d105      	bne.n	800d6e2 <tcp_close_shutdown+0xa6>
 800d6d6:	4b45      	ldr	r3, [pc, #276]	; (800d7ec <tcp_close_shutdown+0x1b0>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68db      	ldr	r3, [r3, #12]
 800d6dc:	4a43      	ldr	r2, [pc, #268]	; (800d7ec <tcp_close_shutdown+0x1b0>)
 800d6de:	6013      	str	r3, [r2, #0]
 800d6e0:	e013      	b.n	800d70a <tcp_close_shutdown+0xce>
 800d6e2:	4b42      	ldr	r3, [pc, #264]	; (800d7ec <tcp_close_shutdown+0x1b0>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	60fb      	str	r3, [r7, #12]
 800d6e8:	e00c      	b.n	800d704 <tcp_close_shutdown+0xc8>
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	68db      	ldr	r3, [r3, #12]
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d104      	bne.n	800d6fe <tcp_close_shutdown+0xc2>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	68da      	ldr	r2, [r3, #12]
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	60da      	str	r2, [r3, #12]
 800d6fc:	e005      	b.n	800d70a <tcp_close_shutdown+0xce>
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	60fb      	str	r3, [r7, #12]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1ef      	bne.n	800d6ea <tcp_close_shutdown+0xae>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2200      	movs	r2, #0
 800d70e:	60da      	str	r2, [r3, #12]
 800d710:	4b37      	ldr	r3, [pc, #220]	; (800d7f0 <tcp_close_shutdown+0x1b4>)
 800d712:	2201      	movs	r2, #1
 800d714:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d716:	4b37      	ldr	r3, [pc, #220]	; (800d7f4 <tcp_close_shutdown+0x1b8>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d102      	bne.n	800d726 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d720:	f003 fd5e 	bl	80111e0 <tcp_trigger_input_pcb_close>
 800d724:	e002      	b.n	800d72c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f7ff fed6 	bl	800d4d8 <tcp_free>
      }
      return ERR_OK;
 800d72c:	2300      	movs	r3, #0
 800d72e:	e050      	b.n	800d7d2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	7d1b      	ldrb	r3, [r3, #20]
 800d734:	2b02      	cmp	r3, #2
 800d736:	d03b      	beq.n	800d7b0 <tcp_close_shutdown+0x174>
 800d738:	2b02      	cmp	r3, #2
 800d73a:	dc44      	bgt.n	800d7c6 <tcp_close_shutdown+0x18a>
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d002      	beq.n	800d746 <tcp_close_shutdown+0x10a>
 800d740:	2b01      	cmp	r3, #1
 800d742:	d02a      	beq.n	800d79a <tcp_close_shutdown+0x15e>
 800d744:	e03f      	b.n	800d7c6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	8adb      	ldrh	r3, [r3, #22]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d021      	beq.n	800d792 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d74e:	4b2a      	ldr	r3, [pc, #168]	; (800d7f8 <tcp_close_shutdown+0x1bc>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	429a      	cmp	r2, r3
 800d756:	d105      	bne.n	800d764 <tcp_close_shutdown+0x128>
 800d758:	4b27      	ldr	r3, [pc, #156]	; (800d7f8 <tcp_close_shutdown+0x1bc>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	4a26      	ldr	r2, [pc, #152]	; (800d7f8 <tcp_close_shutdown+0x1bc>)
 800d760:	6013      	str	r3, [r2, #0]
 800d762:	e013      	b.n	800d78c <tcp_close_shutdown+0x150>
 800d764:	4b24      	ldr	r3, [pc, #144]	; (800d7f8 <tcp_close_shutdown+0x1bc>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	60bb      	str	r3, [r7, #8]
 800d76a:	e00c      	b.n	800d786 <tcp_close_shutdown+0x14a>
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	429a      	cmp	r2, r3
 800d774:	d104      	bne.n	800d780 <tcp_close_shutdown+0x144>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	68da      	ldr	r2, [r3, #12]
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	60da      	str	r2, [r3, #12]
 800d77e:	e005      	b.n	800d78c <tcp_close_shutdown+0x150>
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	60bb      	str	r3, [r7, #8]
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d1ef      	bne.n	800d76c <tcp_close_shutdown+0x130>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f7ff fea0 	bl	800d4d8 <tcp_free>
      break;
 800d798:	e01a      	b.n	800d7d0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d79a:	6878      	ldr	r0, [r7, #4]
 800d79c:	f7ff ff14 	bl	800d5c8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d7a0:	6879      	ldr	r1, [r7, #4]
 800d7a2:	4816      	ldr	r0, [pc, #88]	; (800d7fc <tcp_close_shutdown+0x1c0>)
 800d7a4:	f001 f8a8 	bl	800e8f8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f7ff feb1 	bl	800d510 <tcp_free_listen>
      break;
 800d7ae:	e00f      	b.n	800d7d0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	480e      	ldr	r0, [pc, #56]	; (800d7ec <tcp_close_shutdown+0x1b0>)
 800d7b4:	f001 f8a0 	bl	800e8f8 <tcp_pcb_remove>
 800d7b8:	4b0d      	ldr	r3, [pc, #52]	; (800d7f0 <tcp_close_shutdown+0x1b4>)
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7ff fe8a 	bl	800d4d8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d7c4:	e004      	b.n	800d7d0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f81a 	bl	800d800 <tcp_close_shutdown_fin>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	e000      	b.n	800d7d2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d7d0:	2300      	movs	r3, #0
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3710      	adds	r7, #16
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bdb0      	pop	{r4, r5, r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	08017d08 	.word	0x08017d08
 800d7e0:	08017ddc 	.word	0x08017ddc
 800d7e4:	08017d4c 	.word	0x08017d4c
 800d7e8:	08017dfc 	.word	0x08017dfc
 800d7ec:	20008f2c 	.word	0x20008f2c
 800d7f0:	20008f34 	.word	0x20008f34
 800d7f4:	20008f6c 	.word	0x20008f6c
 800d7f8:	20008f24 	.word	0x20008f24
 800d7fc:	20008f28 	.word	0x20008f28

0800d800 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b084      	sub	sp, #16
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d106      	bne.n	800d81c <tcp_close_shutdown_fin+0x1c>
 800d80e:	4b2e      	ldr	r3, [pc, #184]	; (800d8c8 <tcp_close_shutdown_fin+0xc8>)
 800d810:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d814:	492d      	ldr	r1, [pc, #180]	; (800d8cc <tcp_close_shutdown_fin+0xcc>)
 800d816:	482e      	ldr	r0, [pc, #184]	; (800d8d0 <tcp_close_shutdown_fin+0xd0>)
 800d818:	f008 fcb4 	bl	8016184 <iprintf>

  switch (pcb->state) {
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	7d1b      	ldrb	r3, [r3, #20]
 800d820:	2b07      	cmp	r3, #7
 800d822:	d020      	beq.n	800d866 <tcp_close_shutdown_fin+0x66>
 800d824:	2b07      	cmp	r3, #7
 800d826:	dc2b      	bgt.n	800d880 <tcp_close_shutdown_fin+0x80>
 800d828:	2b03      	cmp	r3, #3
 800d82a:	d002      	beq.n	800d832 <tcp_close_shutdown_fin+0x32>
 800d82c:	2b04      	cmp	r3, #4
 800d82e:	d00d      	beq.n	800d84c <tcp_close_shutdown_fin+0x4c>
 800d830:	e026      	b.n	800d880 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f003 fee6 	bl	8011604 <tcp_send_fin>
 800d838:	4603      	mov	r3, r0
 800d83a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d83c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d11f      	bne.n	800d884 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2205      	movs	r2, #5
 800d848:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d84a:	e01b      	b.n	800d884 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f003 fed9 	bl	8011604 <tcp_send_fin>
 800d852:	4603      	mov	r3, r0
 800d854:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d114      	bne.n	800d888 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2205      	movs	r2, #5
 800d862:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d864:	e010      	b.n	800d888 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f003 fecc 	bl	8011604 <tcp_send_fin>
 800d86c:	4603      	mov	r3, r0
 800d86e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d870:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d109      	bne.n	800d88c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2209      	movs	r2, #9
 800d87c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d87e:	e005      	b.n	800d88c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d880:	2300      	movs	r3, #0
 800d882:	e01c      	b.n	800d8be <tcp_close_shutdown_fin+0xbe>
      break;
 800d884:	bf00      	nop
 800d886:	e002      	b.n	800d88e <tcp_close_shutdown_fin+0x8e>
      break;
 800d888:	bf00      	nop
 800d88a:	e000      	b.n	800d88e <tcp_close_shutdown_fin+0x8e>
      break;
 800d88c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d88e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d103      	bne.n	800d89e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f003 fff2 	bl	8011880 <tcp_output>
 800d89c:	e00d      	b.n	800d8ba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d89e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8a6:	d108      	bne.n	800d8ba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	8b5b      	ldrh	r3, [r3, #26]
 800d8ac:	f043 0308 	orr.w	r3, r3, #8
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	e001      	b.n	800d8be <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d8ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	08017d08 	.word	0x08017d08
 800d8cc:	08017db8 	.word	0x08017db8
 800d8d0:	08017d4c 	.word	0x08017d4c

0800d8d4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b082      	sub	sp, #8
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d109      	bne.n	800d8f6 <tcp_close+0x22>
 800d8e2:	4b0f      	ldr	r3, [pc, #60]	; (800d920 <tcp_close+0x4c>)
 800d8e4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d8e8:	490e      	ldr	r1, [pc, #56]	; (800d924 <tcp_close+0x50>)
 800d8ea:	480f      	ldr	r0, [pc, #60]	; (800d928 <tcp_close+0x54>)
 800d8ec:	f008 fc4a 	bl	8016184 <iprintf>
 800d8f0:	f06f 030f 	mvn.w	r3, #15
 800d8f4:	e00f      	b.n	800d916 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	7d1b      	ldrb	r3, [r3, #20]
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d006      	beq.n	800d90c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	8b5b      	ldrh	r3, [r3, #26]
 800d902:	f043 0310 	orr.w	r3, r3, #16
 800d906:	b29a      	uxth	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d90c:	2101      	movs	r1, #1
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f7ff fe94 	bl	800d63c <tcp_close_shutdown>
 800d914:	4603      	mov	r3, r0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3708      	adds	r7, #8
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}
 800d91e:	bf00      	nop
 800d920:	08017d08 	.word	0x08017d08
 800d924:	08017e18 	.word	0x08017e18
 800d928:	08017d4c 	.word	0x08017d4c

0800d92c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b08e      	sub	sp, #56	; 0x38
 800d930:	af04      	add	r7, sp, #16
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d107      	bne.n	800d94c <tcp_abandon+0x20>
 800d93c:	4b52      	ldr	r3, [pc, #328]	; (800da88 <tcp_abandon+0x15c>)
 800d93e:	f240 223d 	movw	r2, #573	; 0x23d
 800d942:	4952      	ldr	r1, [pc, #328]	; (800da8c <tcp_abandon+0x160>)
 800d944:	4852      	ldr	r0, [pc, #328]	; (800da90 <tcp_abandon+0x164>)
 800d946:	f008 fc1d 	bl	8016184 <iprintf>
 800d94a:	e099      	b.n	800da80 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	7d1b      	ldrb	r3, [r3, #20]
 800d950:	2b01      	cmp	r3, #1
 800d952:	d106      	bne.n	800d962 <tcp_abandon+0x36>
 800d954:	4b4c      	ldr	r3, [pc, #304]	; (800da88 <tcp_abandon+0x15c>)
 800d956:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d95a:	494e      	ldr	r1, [pc, #312]	; (800da94 <tcp_abandon+0x168>)
 800d95c:	484c      	ldr	r0, [pc, #304]	; (800da90 <tcp_abandon+0x164>)
 800d95e:	f008 fc11 	bl	8016184 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	7d1b      	ldrb	r3, [r3, #20]
 800d966:	2b0a      	cmp	r3, #10
 800d968:	d107      	bne.n	800d97a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d96a:	6879      	ldr	r1, [r7, #4]
 800d96c:	484a      	ldr	r0, [pc, #296]	; (800da98 <tcp_abandon+0x16c>)
 800d96e:	f000 ffc3 	bl	800e8f8 <tcp_pcb_remove>
    tcp_free(pcb);
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f7ff fdb0 	bl	800d4d8 <tcp_free>
 800d978:	e082      	b.n	800da80 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d97a:	2300      	movs	r3, #0
 800d97c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d97e:	2300      	movs	r3, #0
 800d980:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d986:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d98c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d994:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	691b      	ldr	r3, [r3, #16]
 800d99a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	7d1b      	ldrb	r3, [r3, #20]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d126      	bne.n	800d9f2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	8adb      	ldrh	r3, [r3, #22]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d02e      	beq.n	800da0a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d9ac:	4b3b      	ldr	r3, [pc, #236]	; (800da9c <tcp_abandon+0x170>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d105      	bne.n	800d9c2 <tcp_abandon+0x96>
 800d9b6:	4b39      	ldr	r3, [pc, #228]	; (800da9c <tcp_abandon+0x170>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	4a37      	ldr	r2, [pc, #220]	; (800da9c <tcp_abandon+0x170>)
 800d9be:	6013      	str	r3, [r2, #0]
 800d9c0:	e013      	b.n	800d9ea <tcp_abandon+0xbe>
 800d9c2:	4b36      	ldr	r3, [pc, #216]	; (800da9c <tcp_abandon+0x170>)
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	61fb      	str	r3, [r7, #28]
 800d9c8:	e00c      	b.n	800d9e4 <tcp_abandon+0xb8>
 800d9ca:	69fb      	ldr	r3, [r7, #28]
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d104      	bne.n	800d9de <tcp_abandon+0xb2>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	68da      	ldr	r2, [r3, #12]
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	60da      	str	r2, [r3, #12]
 800d9dc:	e005      	b.n	800d9ea <tcp_abandon+0xbe>
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	61fb      	str	r3, [r7, #28]
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1ef      	bne.n	800d9ca <tcp_abandon+0x9e>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	60da      	str	r2, [r3, #12]
 800d9f0:	e00b      	b.n	800da0a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	8adb      	ldrh	r3, [r3, #22]
 800d9fa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d9fc:	6879      	ldr	r1, [r7, #4]
 800d9fe:	4828      	ldr	r0, [pc, #160]	; (800daa0 <tcp_abandon+0x174>)
 800da00:	f000 ff7a 	bl	800e8f8 <tcp_pcb_remove>
 800da04:	4b27      	ldr	r3, [pc, #156]	; (800daa4 <tcp_abandon+0x178>)
 800da06:	2201      	movs	r2, #1
 800da08:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d004      	beq.n	800da1c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da16:	4618      	mov	r0, r3
 800da18:	f000 fd1c 	bl	800e454 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da20:	2b00      	cmp	r3, #0
 800da22:	d004      	beq.n	800da2e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da28:	4618      	mov	r0, r3
 800da2a:	f000 fd13 	bl	800e454 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da32:	2b00      	cmp	r3, #0
 800da34:	d004      	beq.n	800da40 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da3a:	4618      	mov	r0, r3
 800da3c:	f000 fd0a 	bl	800e454 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	2b00      	cmp	r3, #0
 800da44:	d00e      	beq.n	800da64 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800da46:	6879      	ldr	r1, [r7, #4]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	3304      	adds	r3, #4
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	8b12      	ldrh	r2, [r2, #24]
 800da50:	9202      	str	r2, [sp, #8]
 800da52:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800da54:	9201      	str	r2, [sp, #4]
 800da56:	9300      	str	r3, [sp, #0]
 800da58:	460b      	mov	r3, r1
 800da5a:	697a      	ldr	r2, [r7, #20]
 800da5c:	69b9      	ldr	r1, [r7, #24]
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f004 fcc2 	bl	80123e8 <tcp_rst>
    }
    last_state = pcb->state;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	7d1b      	ldrb	r3, [r3, #20]
 800da68:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f7ff fd34 	bl	800d4d8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d004      	beq.n	800da80 <tcp_abandon+0x154>
 800da76:	693b      	ldr	r3, [r7, #16]
 800da78:	f06f 010c 	mvn.w	r1, #12
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	4798      	blx	r3
  }
}
 800da80:	3728      	adds	r7, #40	; 0x28
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	08017d08 	.word	0x08017d08
 800da8c:	08017e4c 	.word	0x08017e4c
 800da90:	08017d4c 	.word	0x08017d4c
 800da94:	08017e68 	.word	0x08017e68
 800da98:	20008f30 	.word	0x20008f30
 800da9c:	20008f24 	.word	0x20008f24
 800daa0:	20008f2c 	.word	0x20008f2c
 800daa4:	20008f34 	.word	0x20008f34

0800daa8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dab0:	2101      	movs	r1, #1
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f7ff ff3a 	bl	800d92c <tcp_abandon>
}
 800dab8:	bf00      	nop
 800daba:	3708      	adds	r7, #8
 800dabc:	46bd      	mov	sp, r7
 800dabe:	bd80      	pop	{r7, pc}

0800dac0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d106      	bne.n	800dadc <tcp_update_rcv_ann_wnd+0x1c>
 800dace:	4b25      	ldr	r3, [pc, #148]	; (800db64 <tcp_update_rcv_ann_wnd+0xa4>)
 800dad0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dad4:	4924      	ldr	r1, [pc, #144]	; (800db68 <tcp_update_rcv_ann_wnd+0xa8>)
 800dad6:	4825      	ldr	r0, [pc, #148]	; (800db6c <tcp_update_rcv_ann_wnd+0xac>)
 800dad8:	f008 fb54 	bl	8016184 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dae4:	4413      	add	r3, r2
 800dae6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800daf0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800daf4:	bf28      	it	cs
 800daf6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dafa:	b292      	uxth	r2, r2
 800dafc:	4413      	add	r3, r2
 800dafe:	68fa      	ldr	r2, [r7, #12]
 800db00:	1ad3      	subs	r3, r2, r3
 800db02:	2b00      	cmp	r3, #0
 800db04:	db08      	blt.n	800db18 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db12:	68fa      	ldr	r2, [r7, #12]
 800db14:	1ad3      	subs	r3, r2, r3
 800db16:	e020      	b.n	800db5a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db20:	1ad3      	subs	r3, r2, r3
 800db22:	2b00      	cmp	r3, #0
 800db24:	dd03      	ble.n	800db2e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2200      	movs	r2, #0
 800db2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800db2c:	e014      	b.n	800db58 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db36:	1ad3      	subs	r3, r2, r3
 800db38:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db40:	d306      	bcc.n	800db50 <tcp_update_rcv_ann_wnd+0x90>
 800db42:	4b08      	ldr	r3, [pc, #32]	; (800db64 <tcp_update_rcv_ann_wnd+0xa4>)
 800db44:	f240 32b6 	movw	r2, #950	; 0x3b6
 800db48:	4909      	ldr	r1, [pc, #36]	; (800db70 <tcp_update_rcv_ann_wnd+0xb0>)
 800db4a:	4808      	ldr	r0, [pc, #32]	; (800db6c <tcp_update_rcv_ann_wnd+0xac>)
 800db4c:	f008 fb1a 	bl	8016184 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	b29a      	uxth	r2, r3
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800db58:	2300      	movs	r3, #0
  }
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3710      	adds	r7, #16
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	08017d08 	.word	0x08017d08
 800db68:	08017f64 	.word	0x08017f64
 800db6c:	08017d4c 	.word	0x08017d4c
 800db70:	08017f88 	.word	0x08017f88

0800db74 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	b084      	sub	sp, #16
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
 800db7c:	460b      	mov	r3, r1
 800db7e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d107      	bne.n	800db96 <tcp_recved+0x22>
 800db86:	4b1f      	ldr	r3, [pc, #124]	; (800dc04 <tcp_recved+0x90>)
 800db88:	f240 32cf 	movw	r2, #975	; 0x3cf
 800db8c:	491e      	ldr	r1, [pc, #120]	; (800dc08 <tcp_recved+0x94>)
 800db8e:	481f      	ldr	r0, [pc, #124]	; (800dc0c <tcp_recved+0x98>)
 800db90:	f008 faf8 	bl	8016184 <iprintf>
 800db94:	e032      	b.n	800dbfc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	7d1b      	ldrb	r3, [r3, #20]
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d106      	bne.n	800dbac <tcp_recved+0x38>
 800db9e:	4b19      	ldr	r3, [pc, #100]	; (800dc04 <tcp_recved+0x90>)
 800dba0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800dba4:	491a      	ldr	r1, [pc, #104]	; (800dc10 <tcp_recved+0x9c>)
 800dba6:	4819      	ldr	r0, [pc, #100]	; (800dc0c <tcp_recved+0x98>)
 800dba8:	f008 faec 	bl	8016184 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dbb0:	887b      	ldrh	r3, [r7, #2]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dbb6:	89fb      	ldrh	r3, [r7, #14]
 800dbb8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dbbc:	d804      	bhi.n	800dbc8 <tcp_recved+0x54>
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbc2:	89fa      	ldrh	r2, [r7, #14]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d204      	bcs.n	800dbd2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dbce:	851a      	strh	r2, [r3, #40]	; 0x28
 800dbd0:	e002      	b.n	800dbd8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	89fa      	ldrh	r2, [r7, #14]
 800dbd6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f7ff ff71 	bl	800dac0 <tcp_update_rcv_ann_wnd>
 800dbde:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dbe6:	d309      	bcc.n	800dbfc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	8b5b      	ldrh	r3, [r3, #26]
 800dbec:	f043 0302 	orr.w	r3, r3, #2
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f003 fe42 	bl	8011880 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	08017d08 	.word	0x08017d08
 800dc08:	08017fa4 	.word	0x08017fa4
 800dc0c:	08017d4c 	.word	0x08017d4c
 800dc10:	08017fbc 	.word	0x08017fbc

0800dc14 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dc14:	b5b0      	push	{r4, r5, r7, lr}
 800dc16:	b090      	sub	sp, #64	; 0x40
 800dc18:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dc20:	4b94      	ldr	r3, [pc, #592]	; (800de74 <tcp_slowtmr+0x260>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	3301      	adds	r3, #1
 800dc26:	4a93      	ldr	r2, [pc, #588]	; (800de74 <tcp_slowtmr+0x260>)
 800dc28:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dc2a:	4b93      	ldr	r3, [pc, #588]	; (800de78 <tcp_slowtmr+0x264>)
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	b2da      	uxtb	r2, r3
 800dc32:	4b91      	ldr	r3, [pc, #580]	; (800de78 <tcp_slowtmr+0x264>)
 800dc34:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800dc36:	2300      	movs	r3, #0
 800dc38:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800dc3a:	4b90      	ldr	r3, [pc, #576]	; (800de7c <tcp_slowtmr+0x268>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800dc40:	e29d      	b.n	800e17e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dc42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc44:	7d1b      	ldrb	r3, [r3, #20]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d106      	bne.n	800dc58 <tcp_slowtmr+0x44>
 800dc4a:	4b8d      	ldr	r3, [pc, #564]	; (800de80 <tcp_slowtmr+0x26c>)
 800dc4c:	f240 42be 	movw	r2, #1214	; 0x4be
 800dc50:	498c      	ldr	r1, [pc, #560]	; (800de84 <tcp_slowtmr+0x270>)
 800dc52:	488d      	ldr	r0, [pc, #564]	; (800de88 <tcp_slowtmr+0x274>)
 800dc54:	f008 fa96 	bl	8016184 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc5a:	7d1b      	ldrb	r3, [r3, #20]
 800dc5c:	2b01      	cmp	r3, #1
 800dc5e:	d106      	bne.n	800dc6e <tcp_slowtmr+0x5a>
 800dc60:	4b87      	ldr	r3, [pc, #540]	; (800de80 <tcp_slowtmr+0x26c>)
 800dc62:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800dc66:	4989      	ldr	r1, [pc, #548]	; (800de8c <tcp_slowtmr+0x278>)
 800dc68:	4887      	ldr	r0, [pc, #540]	; (800de88 <tcp_slowtmr+0x274>)
 800dc6a:	f008 fa8b 	bl	8016184 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dc6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc70:	7d1b      	ldrb	r3, [r3, #20]
 800dc72:	2b0a      	cmp	r3, #10
 800dc74:	d106      	bne.n	800dc84 <tcp_slowtmr+0x70>
 800dc76:	4b82      	ldr	r3, [pc, #520]	; (800de80 <tcp_slowtmr+0x26c>)
 800dc78:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800dc7c:	4984      	ldr	r1, [pc, #528]	; (800de90 <tcp_slowtmr+0x27c>)
 800dc7e:	4882      	ldr	r0, [pc, #520]	; (800de88 <tcp_slowtmr+0x274>)
 800dc80:	f008 fa80 	bl	8016184 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc86:	7f9a      	ldrb	r2, [r3, #30]
 800dc88:	4b7b      	ldr	r3, [pc, #492]	; (800de78 <tcp_slowtmr+0x264>)
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d105      	bne.n	800dc9c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800dc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc92:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800dc9a:	e270      	b.n	800e17e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800dc9c:	4b76      	ldr	r3, [pc, #472]	; (800de78 <tcp_slowtmr+0x264>)
 800dc9e:	781a      	ldrb	r2, [r3, #0]
 800dca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dca2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800dca4:	2300      	movs	r3, #0
 800dca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb2:	7d1b      	ldrb	r3, [r3, #20]
 800dcb4:	2b02      	cmp	r3, #2
 800dcb6:	d10a      	bne.n	800dcce <tcp_slowtmr+0xba>
 800dcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcbe:	2b05      	cmp	r3, #5
 800dcc0:	d905      	bls.n	800dcce <tcp_slowtmr+0xba>
      ++pcb_remove;
 800dcc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dccc:	e11e      	b.n	800df0c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dcce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcd4:	2b0b      	cmp	r3, #11
 800dcd6:	d905      	bls.n	800dce4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800dcd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcdc:	3301      	adds	r3, #1
 800dcde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dce2:	e113      	b.n	800df0c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d075      	beq.n	800ddda <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dcee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d006      	beq.n	800dd04 <tcp_slowtmr+0xf0>
 800dcf6:	4b62      	ldr	r3, [pc, #392]	; (800de80 <tcp_slowtmr+0x26c>)
 800dcf8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dcfc:	4965      	ldr	r1, [pc, #404]	; (800de94 <tcp_slowtmr+0x280>)
 800dcfe:	4862      	ldr	r0, [pc, #392]	; (800de88 <tcp_slowtmr+0x274>)
 800dd00:	f008 fa40 	bl	8016184 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d106      	bne.n	800dd1a <tcp_slowtmr+0x106>
 800dd0c:	4b5c      	ldr	r3, [pc, #368]	; (800de80 <tcp_slowtmr+0x26c>)
 800dd0e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dd12:	4961      	ldr	r1, [pc, #388]	; (800de98 <tcp_slowtmr+0x284>)
 800dd14:	485c      	ldr	r0, [pc, #368]	; (800de88 <tcp_slowtmr+0x274>)
 800dd16:	f008 fa35 	bl	8016184 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd1c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dd20:	2b0b      	cmp	r3, #11
 800dd22:	d905      	bls.n	800dd30 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800dd24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd28:	3301      	adds	r3, #1
 800dd2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd2e:	e0ed      	b.n	800df0c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dd36:	3b01      	subs	r3, #1
 800dd38:	4a58      	ldr	r2, [pc, #352]	; (800de9c <tcp_slowtmr+0x288>)
 800dd3a:	5cd3      	ldrb	r3, [r2, r3]
 800dd3c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd40:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dd44:	7c7a      	ldrb	r2, [r7, #17]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d907      	bls.n	800dd5a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800dd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dd50:	3301      	adds	r3, #1
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd56:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800dd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dd60:	7c7a      	ldrb	r2, [r7, #17]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	f200 80d2 	bhi.w	800df0c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800dd68:	2301      	movs	r3, #1
 800dd6a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800dd6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d108      	bne.n	800dd88 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dd76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd78:	f004 fc2a 	bl	80125d0 <tcp_zero_window_probe>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d014      	beq.n	800ddac <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800dd82:	2300      	movs	r3, #0
 800dd84:	623b      	str	r3, [r7, #32]
 800dd86:	e011      	b.n	800ddac <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd8e:	4619      	mov	r1, r3
 800dd90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd92:	f003 faef 	bl	8011374 <tcp_split_unsent_seg>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d107      	bne.n	800ddac <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800dd9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd9e:	f003 fd6f 	bl	8011880 <tcp_output>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d101      	bne.n	800ddac <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ddac:	6a3b      	ldr	r3, [r7, #32]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	f000 80ac 	beq.w	800df0c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ddb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ddbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ddc2:	2b06      	cmp	r3, #6
 800ddc4:	f200 80a2 	bhi.w	800df0c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ddc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ddce:	3301      	adds	r3, #1
 800ddd0:	b2da      	uxtb	r2, r3
 800ddd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ddd8:	e098      	b.n	800df0c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ddda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dddc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	db0f      	blt.n	800de04 <tcp_slowtmr+0x1f0>
 800dde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ddea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ddee:	4293      	cmp	r3, r2
 800ddf0:	d008      	beq.n	800de04 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ddf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	b21a      	sxth	r2, r3
 800de00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de02:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800de04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de06:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800de0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800de10:	429a      	cmp	r2, r3
 800de12:	db7b      	blt.n	800df0c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800de14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de16:	f004 f825 	bl	8011e64 <tcp_rexmit_rto_prepare>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d007      	beq.n	800de30 <tcp_slowtmr+0x21c>
 800de20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de24:	2b00      	cmp	r3, #0
 800de26:	d171      	bne.n	800df0c <tcp_slowtmr+0x2f8>
 800de28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d06d      	beq.n	800df0c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800de30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de32:	7d1b      	ldrb	r3, [r3, #20]
 800de34:	2b02      	cmp	r3, #2
 800de36:	d03a      	beq.n	800deae <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800de38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de3e:	2b0c      	cmp	r3, #12
 800de40:	bf28      	it	cs
 800de42:	230c      	movcs	r3, #12
 800de44:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800de46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de4c:	10db      	asrs	r3, r3, #3
 800de4e:	b21b      	sxth	r3, r3
 800de50:	461a      	mov	r2, r3
 800de52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de54:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de58:	4413      	add	r3, r2
 800de5a:	7efa      	ldrb	r2, [r7, #27]
 800de5c:	4910      	ldr	r1, [pc, #64]	; (800dea0 <tcp_slowtmr+0x28c>)
 800de5e:	5c8a      	ldrb	r2, [r1, r2]
 800de60:	4093      	lsls	r3, r2
 800de62:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800de6a:	4293      	cmp	r3, r2
 800de6c:	dc1a      	bgt.n	800dea4 <tcp_slowtmr+0x290>
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	b21a      	sxth	r2, r3
 800de72:	e019      	b.n	800dea8 <tcp_slowtmr+0x294>
 800de74:	20008f20 	.word	0x20008f20
 800de78:	20008f36 	.word	0x20008f36
 800de7c:	20008f2c 	.word	0x20008f2c
 800de80:	08017d08 	.word	0x08017d08
 800de84:	0801804c 	.word	0x0801804c
 800de88:	08017d4c 	.word	0x08017d4c
 800de8c:	08018078 	.word	0x08018078
 800de90:	080180a4 	.word	0x080180a4
 800de94:	080180d4 	.word	0x080180d4
 800de98:	08018108 	.word	0x08018108
 800de9c:	08019d0c 	.word	0x08019d0c
 800dea0:	08019cfc 	.word	0x08019cfc
 800dea4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800deae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb0:	2200      	movs	r2, #0
 800deb2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800deb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800deba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800debc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dec0:	4293      	cmp	r3, r2
 800dec2:	bf28      	it	cs
 800dec4:	4613      	movcs	r3, r2
 800dec6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dec8:	8a7b      	ldrh	r3, [r7, #18]
 800deca:	085b      	lsrs	r3, r3, #1
 800decc:	b29a      	uxth	r2, r3
 800dece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ded4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800deda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dedc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dede:	005b      	lsls	r3, r3, #1
 800dee0:	b29b      	uxth	r3, r3
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d206      	bcs.n	800def4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800dee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800deea:	005b      	lsls	r3, r3, #1
 800deec:	b29a      	uxth	r2, r3
 800deee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800def4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800def8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800defe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df00:	2200      	movs	r2, #0
 800df02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800df06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df08:	f004 f81c 	bl	8011f44 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800df0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0e:	7d1b      	ldrb	r3, [r3, #20]
 800df10:	2b06      	cmp	r3, #6
 800df12:	d111      	bne.n	800df38 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800df14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df16:	8b5b      	ldrh	r3, [r3, #26]
 800df18:	f003 0310 	and.w	r3, r3, #16
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00b      	beq.n	800df38 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df20:	4b9c      	ldr	r3, [pc, #624]	; (800e194 <tcp_slowtmr+0x580>)
 800df22:	681a      	ldr	r2, [r3, #0]
 800df24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df26:	6a1b      	ldr	r3, [r3, #32]
 800df28:	1ad3      	subs	r3, r2, r3
 800df2a:	2b28      	cmp	r3, #40	; 0x28
 800df2c:	d904      	bls.n	800df38 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800df2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df32:	3301      	adds	r3, #1
 800df34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800df38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3a:	7a5b      	ldrb	r3, [r3, #9]
 800df3c:	f003 0308 	and.w	r3, r3, #8
 800df40:	2b00      	cmp	r3, #0
 800df42:	d04a      	beq.n	800dfda <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800df44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df46:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800df48:	2b04      	cmp	r3, #4
 800df4a:	d003      	beq.n	800df54 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800df4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800df50:	2b07      	cmp	r3, #7
 800df52:	d142      	bne.n	800dfda <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df54:	4b8f      	ldr	r3, [pc, #572]	; (800e194 <tcp_slowtmr+0x580>)
 800df56:	681a      	ldr	r2, [r3, #0]
 800df58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5a:	6a1b      	ldr	r3, [r3, #32]
 800df5c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800df5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df60:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800df64:	4b8c      	ldr	r3, [pc, #560]	; (800e198 <tcp_slowtmr+0x584>)
 800df66:	440b      	add	r3, r1
 800df68:	498c      	ldr	r1, [pc, #560]	; (800e19c <tcp_slowtmr+0x588>)
 800df6a:	fba1 1303 	umull	r1, r3, r1, r3
 800df6e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df70:	429a      	cmp	r2, r3
 800df72:	d90a      	bls.n	800df8a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800df74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df78:	3301      	adds	r3, #1
 800df7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800df7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df82:	3301      	adds	r3, #1
 800df84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800df88:	e027      	b.n	800dfda <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df8a:	4b82      	ldr	r3, [pc, #520]	; (800e194 <tcp_slowtmr+0x580>)
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df90:	6a1b      	ldr	r3, [r3, #32]
 800df92:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800df94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df96:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800df9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	4b7f      	ldr	r3, [pc, #508]	; (800e1a0 <tcp_slowtmr+0x58c>)
 800dfa4:	fb00 f303 	mul.w	r3, r0, r3
 800dfa8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800dfaa:	497c      	ldr	r1, [pc, #496]	; (800e19c <tcp_slowtmr+0x588>)
 800dfac:	fba1 1303 	umull	r1, r3, r1, r3
 800dfb0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d911      	bls.n	800dfda <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800dfb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfb8:	f004 faca 	bl	8012550 <tcp_keepalive>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800dfc2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d107      	bne.n	800dfda <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800dfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfcc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	b2da      	uxtb	r2, r3
 800dfd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800dfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d011      	beq.n	800e006 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800dfe2:	4b6c      	ldr	r3, [pc, #432]	; (800e194 <tcp_slowtmr+0x580>)
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe8:	6a1b      	ldr	r3, [r3, #32]
 800dfea:	1ad2      	subs	r2, r2, r3
 800dfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dff2:	4619      	mov	r1, r3
 800dff4:	460b      	mov	r3, r1
 800dff6:	005b      	lsls	r3, r3, #1
 800dff8:	440b      	add	r3, r1
 800dffa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d302      	bcc.n	800e006 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e000:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e002:	f000 fddd 	bl	800ebc0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e008:	7d1b      	ldrb	r3, [r3, #20]
 800e00a:	2b03      	cmp	r3, #3
 800e00c:	d10b      	bne.n	800e026 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e00e:	4b61      	ldr	r3, [pc, #388]	; (800e194 <tcp_slowtmr+0x580>)
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e014:	6a1b      	ldr	r3, [r3, #32]
 800e016:	1ad3      	subs	r3, r2, r3
 800e018:	2b28      	cmp	r3, #40	; 0x28
 800e01a:	d904      	bls.n	800e026 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e01c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e020:	3301      	adds	r3, #1
 800e022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e028:	7d1b      	ldrb	r3, [r3, #20]
 800e02a:	2b09      	cmp	r3, #9
 800e02c:	d10b      	bne.n	800e046 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e02e:	4b59      	ldr	r3, [pc, #356]	; (800e194 <tcp_slowtmr+0x580>)
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e034:	6a1b      	ldr	r3, [r3, #32]
 800e036:	1ad3      	subs	r3, r2, r3
 800e038:	2bf0      	cmp	r3, #240	; 0xf0
 800e03a:	d904      	bls.n	800e046 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e03c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e040:	3301      	adds	r3, #1
 800e042:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d060      	beq.n	800e110 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e054:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e056:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e058:	f000 fbfe 	bl	800e858 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e05c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d010      	beq.n	800e084 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e062:	4b50      	ldr	r3, [pc, #320]	; (800e1a4 <tcp_slowtmr+0x590>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e068:	429a      	cmp	r2, r3
 800e06a:	d106      	bne.n	800e07a <tcp_slowtmr+0x466>
 800e06c:	4b4e      	ldr	r3, [pc, #312]	; (800e1a8 <tcp_slowtmr+0x594>)
 800e06e:	f240 526d 	movw	r2, #1389	; 0x56d
 800e072:	494e      	ldr	r1, [pc, #312]	; (800e1ac <tcp_slowtmr+0x598>)
 800e074:	484e      	ldr	r0, [pc, #312]	; (800e1b0 <tcp_slowtmr+0x59c>)
 800e076:	f008 f885 	bl	8016184 <iprintf>
        prev->next = pcb->next;
 800e07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e07c:	68da      	ldr	r2, [r3, #12]
 800e07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e080:	60da      	str	r2, [r3, #12]
 800e082:	e00f      	b.n	800e0a4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e084:	4b47      	ldr	r3, [pc, #284]	; (800e1a4 <tcp_slowtmr+0x590>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d006      	beq.n	800e09c <tcp_slowtmr+0x488>
 800e08e:	4b46      	ldr	r3, [pc, #280]	; (800e1a8 <tcp_slowtmr+0x594>)
 800e090:	f240 5271 	movw	r2, #1393	; 0x571
 800e094:	4947      	ldr	r1, [pc, #284]	; (800e1b4 <tcp_slowtmr+0x5a0>)
 800e096:	4846      	ldr	r0, [pc, #280]	; (800e1b0 <tcp_slowtmr+0x59c>)
 800e098:	f008 f874 	bl	8016184 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09e:	68db      	ldr	r3, [r3, #12]
 800e0a0:	4a40      	ldr	r2, [pc, #256]	; (800e1a4 <tcp_slowtmr+0x590>)
 800e0a2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e0a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d013      	beq.n	800e0d4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e0b4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b8:	3304      	adds	r3, #4
 800e0ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0bc:	8ad2      	ldrh	r2, [r2, #22]
 800e0be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0c0:	8b09      	ldrh	r1, [r1, #24]
 800e0c2:	9102      	str	r1, [sp, #8]
 800e0c4:	9201      	str	r2, [sp, #4]
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	462b      	mov	r3, r5
 800e0ca:	4622      	mov	r2, r4
 800e0cc:	4601      	mov	r1, r0
 800e0ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0d0:	f004 f98a 	bl	80123e8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d6:	691b      	ldr	r3, [r3, #16]
 800e0d8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0dc:	7d1b      	ldrb	r3, [r3, #20]
 800e0de:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e6:	68db      	ldr	r3, [r3, #12]
 800e0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e0ea:	6838      	ldr	r0, [r7, #0]
 800e0ec:	f7ff f9f4 	bl	800d4d8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e0f0:	4b31      	ldr	r3, [pc, #196]	; (800e1b8 <tcp_slowtmr+0x5a4>)
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d004      	beq.n	800e106 <tcp_slowtmr+0x4f2>
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	f06f 010c 	mvn.w	r1, #12
 800e102:	68b8      	ldr	r0, [r7, #8]
 800e104:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e106:	4b2c      	ldr	r3, [pc, #176]	; (800e1b8 <tcp_slowtmr+0x5a4>)
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d037      	beq.n	800e17e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e10e:	e592      	b.n	800dc36 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e112:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11c:	7f1b      	ldrb	r3, [r3, #28]
 800e11e:	3301      	adds	r3, #1
 800e120:	b2da      	uxtb	r2, r3
 800e122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e124:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e128:	7f1a      	ldrb	r2, [r3, #28]
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	7f5b      	ldrb	r3, [r3, #29]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d325      	bcc.n	800e17e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e134:	2200      	movs	r2, #0
 800e136:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e138:	4b1f      	ldr	r3, [pc, #124]	; (800e1b8 <tcp_slowtmr+0x5a4>)
 800e13a:	2200      	movs	r2, #0
 800e13c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e144:	2b00      	cmp	r3, #0
 800e146:	d00b      	beq.n	800e160 <tcp_slowtmr+0x54c>
 800e148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e14a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e14e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e150:	6912      	ldr	r2, [r2, #16]
 800e152:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e154:	4610      	mov	r0, r2
 800e156:	4798      	blx	r3
 800e158:	4603      	mov	r3, r0
 800e15a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e15e:	e002      	b.n	800e166 <tcp_slowtmr+0x552>
 800e160:	2300      	movs	r3, #0
 800e162:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e166:	4b14      	ldr	r3, [pc, #80]	; (800e1b8 <tcp_slowtmr+0x5a4>)
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d000      	beq.n	800e170 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e16e:	e562      	b.n	800dc36 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e170:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e174:	2b00      	cmp	r3, #0
 800e176:	d102      	bne.n	800e17e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e178:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e17a:	f003 fb81 	bl	8011880 <tcp_output>
  while (pcb != NULL) {
 800e17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e180:	2b00      	cmp	r3, #0
 800e182:	f47f ad5e 	bne.w	800dc42 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e186:	2300      	movs	r3, #0
 800e188:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e18a:	4b0c      	ldr	r3, [pc, #48]	; (800e1bc <tcp_slowtmr+0x5a8>)
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e190:	e069      	b.n	800e266 <tcp_slowtmr+0x652>
 800e192:	bf00      	nop
 800e194:	20008f20 	.word	0x20008f20
 800e198:	000a4cb8 	.word	0x000a4cb8
 800e19c:	10624dd3 	.word	0x10624dd3
 800e1a0:	000124f8 	.word	0x000124f8
 800e1a4:	20008f2c 	.word	0x20008f2c
 800e1a8:	08017d08 	.word	0x08017d08
 800e1ac:	08018140 	.word	0x08018140
 800e1b0:	08017d4c 	.word	0x08017d4c
 800e1b4:	0801816c 	.word	0x0801816c
 800e1b8:	20008f34 	.word	0x20008f34
 800e1bc:	20008f30 	.word	0x20008f30
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c2:	7d1b      	ldrb	r3, [r3, #20]
 800e1c4:	2b0a      	cmp	r3, #10
 800e1c6:	d006      	beq.n	800e1d6 <tcp_slowtmr+0x5c2>
 800e1c8:	4b2b      	ldr	r3, [pc, #172]	; (800e278 <tcp_slowtmr+0x664>)
 800e1ca:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e1ce:	492b      	ldr	r1, [pc, #172]	; (800e27c <tcp_slowtmr+0x668>)
 800e1d0:	482b      	ldr	r0, [pc, #172]	; (800e280 <tcp_slowtmr+0x66c>)
 800e1d2:	f007 ffd7 	bl	8016184 <iprintf>
    pcb_remove = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e1dc:	4b29      	ldr	r3, [pc, #164]	; (800e284 <tcp_slowtmr+0x670>)
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e2:	6a1b      	ldr	r3, [r3, #32]
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	2bf0      	cmp	r3, #240	; 0xf0
 800e1e8:	d904      	bls.n	800e1f4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e1ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1ee:	3301      	adds	r3, #1
 800e1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d02f      	beq.n	800e25c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e1fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1fe:	f000 fb2b 	bl	800e858 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e204:	2b00      	cmp	r3, #0
 800e206:	d010      	beq.n	800e22a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e208:	4b1f      	ldr	r3, [pc, #124]	; (800e288 <tcp_slowtmr+0x674>)
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e20e:	429a      	cmp	r2, r3
 800e210:	d106      	bne.n	800e220 <tcp_slowtmr+0x60c>
 800e212:	4b19      	ldr	r3, [pc, #100]	; (800e278 <tcp_slowtmr+0x664>)
 800e214:	f240 52af 	movw	r2, #1455	; 0x5af
 800e218:	491c      	ldr	r1, [pc, #112]	; (800e28c <tcp_slowtmr+0x678>)
 800e21a:	4819      	ldr	r0, [pc, #100]	; (800e280 <tcp_slowtmr+0x66c>)
 800e21c:	f007 ffb2 	bl	8016184 <iprintf>
        prev->next = pcb->next;
 800e220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e222:	68da      	ldr	r2, [r3, #12]
 800e224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e226:	60da      	str	r2, [r3, #12]
 800e228:	e00f      	b.n	800e24a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e22a:	4b17      	ldr	r3, [pc, #92]	; (800e288 <tcp_slowtmr+0x674>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e230:	429a      	cmp	r2, r3
 800e232:	d006      	beq.n	800e242 <tcp_slowtmr+0x62e>
 800e234:	4b10      	ldr	r3, [pc, #64]	; (800e278 <tcp_slowtmr+0x664>)
 800e236:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e23a:	4915      	ldr	r1, [pc, #84]	; (800e290 <tcp_slowtmr+0x67c>)
 800e23c:	4810      	ldr	r0, [pc, #64]	; (800e280 <tcp_slowtmr+0x66c>)
 800e23e:	f007 ffa1 	bl	8016184 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	4a10      	ldr	r2, [pc, #64]	; (800e288 <tcp_slowtmr+0x674>)
 800e248:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e250:	68db      	ldr	r3, [r3, #12]
 800e252:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e254:	69f8      	ldr	r0, [r7, #28]
 800e256:	f7ff f93f 	bl	800d4d8 <tcp_free>
 800e25a:	e004      	b.n	800e266 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1a9      	bne.n	800e1c0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800e26c:	bf00      	nop
 800e26e:	bf00      	nop
 800e270:	3730      	adds	r7, #48	; 0x30
 800e272:	46bd      	mov	sp, r7
 800e274:	bdb0      	pop	{r4, r5, r7, pc}
 800e276:	bf00      	nop
 800e278:	08017d08 	.word	0x08017d08
 800e27c:	08018198 	.word	0x08018198
 800e280:	08017d4c 	.word	0x08017d4c
 800e284:	20008f20 	.word	0x20008f20
 800e288:	20008f30 	.word	0x20008f30
 800e28c:	080181c8 	.word	0x080181c8
 800e290:	080181f0 	.word	0x080181f0

0800e294 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b082      	sub	sp, #8
 800e298:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e29a:	4b2d      	ldr	r3, [pc, #180]	; (800e350 <tcp_fasttmr+0xbc>)
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	3301      	adds	r3, #1
 800e2a0:	b2da      	uxtb	r2, r3
 800e2a2:	4b2b      	ldr	r3, [pc, #172]	; (800e350 <tcp_fasttmr+0xbc>)
 800e2a4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e2a6:	4b2b      	ldr	r3, [pc, #172]	; (800e354 <tcp_fasttmr+0xc0>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e2ac:	e048      	b.n	800e340 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	7f9a      	ldrb	r2, [r3, #30]
 800e2b2:	4b27      	ldr	r3, [pc, #156]	; (800e350 <tcp_fasttmr+0xbc>)
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d03f      	beq.n	800e33a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e2ba:	4b25      	ldr	r3, [pc, #148]	; (800e350 <tcp_fasttmr+0xbc>)
 800e2bc:	781a      	ldrb	r2, [r3, #0]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	8b5b      	ldrh	r3, [r3, #26]
 800e2c6:	f003 0301 	and.w	r3, r3, #1
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d010      	beq.n	800e2f0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	8b5b      	ldrh	r3, [r3, #26]
 800e2d2:	f043 0302 	orr.w	r3, r3, #2
 800e2d6:	b29a      	uxth	r2, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f003 facf 	bl	8011880 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	8b5b      	ldrh	r3, [r3, #26]
 800e2e6:	f023 0303 	bic.w	r3, r3, #3
 800e2ea:	b29a      	uxth	r2, r3
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	8b5b      	ldrh	r3, [r3, #26]
 800e2f4:	f003 0308 	and.w	r3, r3, #8
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d009      	beq.n	800e310 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	8b5b      	ldrh	r3, [r3, #26]
 800e300:	f023 0308 	bic.w	r3, r3, #8
 800e304:	b29a      	uxth	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f7ff fa78 	bl	800d800 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d00a      	beq.n	800e334 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e31e:	4b0e      	ldr	r3, [pc, #56]	; (800e358 <tcp_fasttmr+0xc4>)
 800e320:	2200      	movs	r2, #0
 800e322:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e324:	6878      	ldr	r0, [r7, #4]
 800e326:	f000 f819 	bl	800e35c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e32a:	4b0b      	ldr	r3, [pc, #44]	; (800e358 <tcp_fasttmr+0xc4>)
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d000      	beq.n	800e334 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e332:	e7b8      	b.n	800e2a6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	607b      	str	r3, [r7, #4]
 800e338:	e002      	b.n	800e340 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1b3      	bne.n	800e2ae <tcp_fasttmr+0x1a>
    }
  }
}
 800e346:	bf00      	nop
 800e348:	bf00      	nop
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	20008f36 	.word	0x20008f36
 800e354:	20008f2c 	.word	0x20008f2c
 800e358:	20008f34 	.word	0x20008f34

0800e35c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e35c:	b590      	push	{r4, r7, lr}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d109      	bne.n	800e37e <tcp_process_refused_data+0x22>
 800e36a:	4b37      	ldr	r3, [pc, #220]	; (800e448 <tcp_process_refused_data+0xec>)
 800e36c:	f240 6209 	movw	r2, #1545	; 0x609
 800e370:	4936      	ldr	r1, [pc, #216]	; (800e44c <tcp_process_refused_data+0xf0>)
 800e372:	4837      	ldr	r0, [pc, #220]	; (800e450 <tcp_process_refused_data+0xf4>)
 800e374:	f007 ff06 	bl	8016184 <iprintf>
 800e378:	f06f 030f 	mvn.w	r3, #15
 800e37c:	e060      	b.n	800e440 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e382:	7b5b      	ldrb	r3, [r3, #13]
 800e384:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e38a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2200      	movs	r2, #0
 800e390:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00b      	beq.n	800e3b4 <tcp_process_refused_data+0x58>
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6918      	ldr	r0, [r3, #16]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	68ba      	ldr	r2, [r7, #8]
 800e3aa:	6879      	ldr	r1, [r7, #4]
 800e3ac:	47a0      	blx	r4
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	73fb      	strb	r3, [r7, #15]
 800e3b2:	e007      	b.n	800e3c4 <tcp_process_refused_data+0x68>
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	68ba      	ldr	r2, [r7, #8]
 800e3b8:	6879      	ldr	r1, [r7, #4]
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	f000 f8a4 	bl	800e508 <tcp_recv_null>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e3c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d12a      	bne.n	800e422 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e3cc:	7bbb      	ldrb	r3, [r7, #14]
 800e3ce:	f003 0320 	and.w	r3, r3, #32
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d033      	beq.n	800e43e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e3de:	d005      	beq.n	800e3ec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d00b      	beq.n	800e40e <tcp_process_refused_data+0xb2>
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6918      	ldr	r0, [r3, #16]
 800e400:	2300      	movs	r3, #0
 800e402:	2200      	movs	r2, #0
 800e404:	6879      	ldr	r1, [r7, #4]
 800e406:	47a0      	blx	r4
 800e408:	4603      	mov	r3, r0
 800e40a:	73fb      	strb	r3, [r7, #15]
 800e40c:	e001      	b.n	800e412 <tcp_process_refused_data+0xb6>
 800e40e:	2300      	movs	r3, #0
 800e410:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e416:	f113 0f0d 	cmn.w	r3, #13
 800e41a:	d110      	bne.n	800e43e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e41c:	f06f 030c 	mvn.w	r3, #12
 800e420:	e00e      	b.n	800e440 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e426:	f113 0f0d 	cmn.w	r3, #13
 800e42a:	d102      	bne.n	800e432 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e42c:	f06f 030c 	mvn.w	r3, #12
 800e430:	e006      	b.n	800e440 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	68ba      	ldr	r2, [r7, #8]
 800e436:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e438:	f06f 0304 	mvn.w	r3, #4
 800e43c:	e000      	b.n	800e440 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3714      	adds	r7, #20
 800e444:	46bd      	mov	sp, r7
 800e446:	bd90      	pop	{r4, r7, pc}
 800e448:	08017d08 	.word	0x08017d08
 800e44c:	08018218 	.word	0x08018218
 800e450:	08017d4c 	.word	0x08017d4c

0800e454 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e45c:	e007      	b.n	800e46e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 f80a 	bl	800e47e <tcp_seg_free>
    seg = next;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d1f4      	bne.n	800e45e <tcp_segs_free+0xa>
  }
}
 800e474:	bf00      	nop
 800e476:	bf00      	nop
 800e478:	3710      	adds	r7, #16
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b082      	sub	sp, #8
 800e482:	af00      	add	r7, sp, #0
 800e484:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d00c      	beq.n	800e4a6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d004      	beq.n	800e49e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	4618      	mov	r0, r3
 800e49a:	f7fe fcdb 	bl	800ce54 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e49e:	6879      	ldr	r1, [r7, #4]
 800e4a0:	2003      	movs	r0, #3
 800e4a2:	f7fd fe61 	bl	800c168 <memp_free>
  }
}
 800e4a6:	bf00      	nop
 800e4a8:	3708      	adds	r7, #8
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
	...

0800e4b0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d106      	bne.n	800e4cc <tcp_seg_copy+0x1c>
 800e4be:	4b0f      	ldr	r3, [pc, #60]	; (800e4fc <tcp_seg_copy+0x4c>)
 800e4c0:	f240 6282 	movw	r2, #1666	; 0x682
 800e4c4:	490e      	ldr	r1, [pc, #56]	; (800e500 <tcp_seg_copy+0x50>)
 800e4c6:	480f      	ldr	r0, [pc, #60]	; (800e504 <tcp_seg_copy+0x54>)
 800e4c8:	f007 fe5c 	bl	8016184 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e4cc:	2003      	movs	r0, #3
 800e4ce:	f7fd fddb 	bl	800c088 <memp_malloc>
 800e4d2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d101      	bne.n	800e4de <tcp_seg_copy+0x2e>
    return NULL;
 800e4da:	2300      	movs	r3, #0
 800e4dc:	e00a      	b.n	800e4f4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e4de:	2210      	movs	r2, #16
 800e4e0:	6879      	ldr	r1, [r7, #4]
 800e4e2:	68f8      	ldr	r0, [r7, #12]
 800e4e4:	f007 fe38 	bl	8016158 <memcpy>
  pbuf_ref(cseg->p);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	685b      	ldr	r3, [r3, #4]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f7fe fd51 	bl	800cf94 <pbuf_ref>
  return cseg;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
}
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	3710      	adds	r7, #16
 800e4f8:	46bd      	mov	sp, r7
 800e4fa:	bd80      	pop	{r7, pc}
 800e4fc:	08017d08 	.word	0x08017d08
 800e500:	0801825c 	.word	0x0801825c
 800e504:	08017d4c 	.word	0x08017d4c

0800e508 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b084      	sub	sp, #16
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	60f8      	str	r0, [r7, #12]
 800e510:	60b9      	str	r1, [r7, #8]
 800e512:	607a      	str	r2, [r7, #4]
 800e514:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e516:	68bb      	ldr	r3, [r7, #8]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d109      	bne.n	800e530 <tcp_recv_null+0x28>
 800e51c:	4b12      	ldr	r3, [pc, #72]	; (800e568 <tcp_recv_null+0x60>)
 800e51e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e522:	4912      	ldr	r1, [pc, #72]	; (800e56c <tcp_recv_null+0x64>)
 800e524:	4812      	ldr	r0, [pc, #72]	; (800e570 <tcp_recv_null+0x68>)
 800e526:	f007 fe2d 	bl	8016184 <iprintf>
 800e52a:	f06f 030f 	mvn.w	r3, #15
 800e52e:	e016      	b.n	800e55e <tcp_recv_null+0x56>

  if (p != NULL) {
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d009      	beq.n	800e54a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	891b      	ldrh	r3, [r3, #8]
 800e53a:	4619      	mov	r1, r3
 800e53c:	68b8      	ldr	r0, [r7, #8]
 800e53e:	f7ff fb19 	bl	800db74 <tcp_recved>
    pbuf_free(p);
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f7fe fc86 	bl	800ce54 <pbuf_free>
 800e548:	e008      	b.n	800e55c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e54a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d104      	bne.n	800e55c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e552:	68b8      	ldr	r0, [r7, #8]
 800e554:	f7ff f9be 	bl	800d8d4 <tcp_close>
 800e558:	4603      	mov	r3, r0
 800e55a:	e000      	b.n	800e55e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e55c:	2300      	movs	r3, #0
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3710      	adds	r7, #16
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop
 800e568:	08017d08 	.word	0x08017d08
 800e56c:	08018278 	.word	0x08018278
 800e570:	08017d4c 	.word	0x08017d4c

0800e574 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b086      	sub	sp, #24
 800e578:	af00      	add	r7, sp, #0
 800e57a:	4603      	mov	r3, r0
 800e57c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e57e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e582:	2b00      	cmp	r3, #0
 800e584:	db01      	blt.n	800e58a <tcp_kill_prio+0x16>
 800e586:	79fb      	ldrb	r3, [r7, #7]
 800e588:	e000      	b.n	800e58c <tcp_kill_prio+0x18>
 800e58a:	237f      	movs	r3, #127	; 0x7f
 800e58c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e58e:	7afb      	ldrb	r3, [r7, #11]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d034      	beq.n	800e5fe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e594:	7afb      	ldrb	r3, [r7, #11]
 800e596:	3b01      	subs	r3, #1
 800e598:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e59a:	2300      	movs	r3, #0
 800e59c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5a2:	4b19      	ldr	r3, [pc, #100]	; (800e608 <tcp_kill_prio+0x94>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	617b      	str	r3, [r7, #20]
 800e5a8:	e01f      	b.n	800e5ea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	7d5b      	ldrb	r3, [r3, #21]
 800e5ae:	7afa      	ldrb	r2, [r7, #11]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d80c      	bhi.n	800e5ce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e5b8:	7afa      	ldrb	r2, [r7, #11]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d112      	bne.n	800e5e4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e5be:	4b13      	ldr	r3, [pc, #76]	; (800e60c <tcp_kill_prio+0x98>)
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	6a1b      	ldr	r3, [r3, #32]
 800e5c6:	1ad3      	subs	r3, r2, r3
 800e5c8:	68fa      	ldr	r2, [r7, #12]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d80a      	bhi.n	800e5e4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e5ce:	4b0f      	ldr	r3, [pc, #60]	; (800e60c <tcp_kill_prio+0x98>)
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	6a1b      	ldr	r3, [r3, #32]
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	7d5b      	ldrb	r3, [r3, #21]
 800e5e2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5e4:	697b      	ldr	r3, [r7, #20]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	617b      	str	r3, [r7, #20]
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d1dc      	bne.n	800e5aa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d004      	beq.n	800e600 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e5f6:	6938      	ldr	r0, [r7, #16]
 800e5f8:	f7ff fa56 	bl	800daa8 <tcp_abort>
 800e5fc:	e000      	b.n	800e600 <tcp_kill_prio+0x8c>
    return;
 800e5fe:	bf00      	nop
  }
}
 800e600:	3718      	adds	r7, #24
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	20008f2c 	.word	0x20008f2c
 800e60c:	20008f20 	.word	0x20008f20

0800e610 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b086      	sub	sp, #24
 800e614:	af00      	add	r7, sp, #0
 800e616:	4603      	mov	r3, r0
 800e618:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e61a:	79fb      	ldrb	r3, [r7, #7]
 800e61c:	2b08      	cmp	r3, #8
 800e61e:	d009      	beq.n	800e634 <tcp_kill_state+0x24>
 800e620:	79fb      	ldrb	r3, [r7, #7]
 800e622:	2b09      	cmp	r3, #9
 800e624:	d006      	beq.n	800e634 <tcp_kill_state+0x24>
 800e626:	4b1a      	ldr	r3, [pc, #104]	; (800e690 <tcp_kill_state+0x80>)
 800e628:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e62c:	4919      	ldr	r1, [pc, #100]	; (800e694 <tcp_kill_state+0x84>)
 800e62e:	481a      	ldr	r0, [pc, #104]	; (800e698 <tcp_kill_state+0x88>)
 800e630:	f007 fda8 	bl	8016184 <iprintf>

  inactivity = 0;
 800e634:	2300      	movs	r3, #0
 800e636:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e638:	2300      	movs	r3, #0
 800e63a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e63c:	4b17      	ldr	r3, [pc, #92]	; (800e69c <tcp_kill_state+0x8c>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	617b      	str	r3, [r7, #20]
 800e642:	e017      	b.n	800e674 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	7d1b      	ldrb	r3, [r3, #20]
 800e648:	79fa      	ldrb	r2, [r7, #7]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d10f      	bne.n	800e66e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e64e:	4b14      	ldr	r3, [pc, #80]	; (800e6a0 <tcp_kill_state+0x90>)
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	6a1b      	ldr	r3, [r3, #32]
 800e656:	1ad3      	subs	r3, r2, r3
 800e658:	68fa      	ldr	r2, [r7, #12]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d807      	bhi.n	800e66e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e65e:	4b10      	ldr	r3, [pc, #64]	; (800e6a0 <tcp_kill_state+0x90>)
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	6a1b      	ldr	r3, [r3, #32]
 800e666:	1ad3      	subs	r3, r2, r3
 800e668:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	617b      	str	r3, [r7, #20]
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d1e4      	bne.n	800e644 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d003      	beq.n	800e688 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e680:	2100      	movs	r1, #0
 800e682:	6938      	ldr	r0, [r7, #16]
 800e684:	f7ff f952 	bl	800d92c <tcp_abandon>
  }
}
 800e688:	bf00      	nop
 800e68a:	3718      	adds	r7, #24
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	08017d08 	.word	0x08017d08
 800e694:	08018294 	.word	0x08018294
 800e698:	08017d4c 	.word	0x08017d4c
 800e69c:	20008f2c 	.word	0x20008f2c
 800e6a0:	20008f20 	.word	0x20008f20

0800e6a4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6b2:	4b12      	ldr	r3, [pc, #72]	; (800e6fc <tcp_kill_timewait+0x58>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	60fb      	str	r3, [r7, #12]
 800e6b8:	e012      	b.n	800e6e0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e6ba:	4b11      	ldr	r3, [pc, #68]	; (800e700 <tcp_kill_timewait+0x5c>)
 800e6bc:	681a      	ldr	r2, [r3, #0]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	6a1b      	ldr	r3, [r3, #32]
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	d807      	bhi.n	800e6da <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e6ca:	4b0d      	ldr	r3, [pc, #52]	; (800e700 <tcp_kill_timewait+0x5c>)
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6a1b      	ldr	r3, [r3, #32]
 800e6d2:	1ad3      	subs	r3, r2, r3
 800e6d4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	68db      	ldr	r3, [r3, #12]
 800e6de:	60fb      	str	r3, [r7, #12]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1e9      	bne.n	800e6ba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d002      	beq.n	800e6f2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e6ec:	68b8      	ldr	r0, [r7, #8]
 800e6ee:	f7ff f9db 	bl	800daa8 <tcp_abort>
  }
}
 800e6f2:	bf00      	nop
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	20008f30 	.word	0x20008f30
 800e700:	20008f20 	.word	0x20008f20

0800e704 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e70a:	4b10      	ldr	r3, [pc, #64]	; (800e74c <tcp_handle_closepend+0x48>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e710:	e014      	b.n	800e73c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	8b5b      	ldrh	r3, [r3, #26]
 800e71c:	f003 0308 	and.w	r3, r3, #8
 800e720:	2b00      	cmp	r3, #0
 800e722:	d009      	beq.n	800e738 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	8b5b      	ldrh	r3, [r3, #26]
 800e728:	f023 0308 	bic.w	r3, r3, #8
 800e72c:	b29a      	uxth	r2, r3
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f7ff f864 	bl	800d800 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d1e7      	bne.n	800e712 <tcp_handle_closepend+0xe>
  }
}
 800e742:	bf00      	nop
 800e744:	bf00      	nop
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	20008f2c 	.word	0x20008f2c

0800e750 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e75a:	2001      	movs	r0, #1
 800e75c:	f7fd fc94 	bl	800c088 <memp_malloc>
 800e760:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d126      	bne.n	800e7b6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e768:	f7ff ffcc 	bl	800e704 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e76c:	f7ff ff9a 	bl	800e6a4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e770:	2001      	movs	r0, #1
 800e772:	f7fd fc89 	bl	800c088 <memp_malloc>
 800e776:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d11b      	bne.n	800e7b6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e77e:	2009      	movs	r0, #9
 800e780:	f7ff ff46 	bl	800e610 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e784:	2001      	movs	r0, #1
 800e786:	f7fd fc7f 	bl	800c088 <memp_malloc>
 800e78a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d111      	bne.n	800e7b6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e792:	2008      	movs	r0, #8
 800e794:	f7ff ff3c 	bl	800e610 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e798:	2001      	movs	r0, #1
 800e79a:	f7fd fc75 	bl	800c088 <memp_malloc>
 800e79e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d107      	bne.n	800e7b6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e7a6:	79fb      	ldrb	r3, [r7, #7]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7ff fee3 	bl	800e574 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e7ae:	2001      	movs	r0, #1
 800e7b0:	f7fd fc6a 	bl	800c088 <memp_malloc>
 800e7b4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d03f      	beq.n	800e83c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e7bc:	229c      	movs	r2, #156	; 0x9c
 800e7be:	2100      	movs	r1, #0
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f007 fcd7 	bl	8016174 <memset>
    pcb->prio = prio;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	79fa      	ldrb	r2, [r7, #7]
 800e7ca:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e7d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e7dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	22ff      	movs	r2, #255	; 0xff
 800e7ea:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e7f2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2206      	movs	r2, #6
 800e7f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2206      	movs	r2, #6
 800e800:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e808:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2201      	movs	r2, #1
 800e80e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e812:	4b0d      	ldr	r3, [pc, #52]	; (800e848 <tcp_alloc+0xf8>)
 800e814:	681a      	ldr	r2, [r3, #0]
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e81a:	4b0c      	ldr	r3, [pc, #48]	; (800e84c <tcp_alloc+0xfc>)
 800e81c:	781a      	ldrb	r2, [r3, #0]
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e828:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	4a08      	ldr	r2, [pc, #32]	; (800e850 <tcp_alloc+0x100>)
 800e830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	4a07      	ldr	r2, [pc, #28]	; (800e854 <tcp_alloc+0x104>)
 800e838:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e83c:	68fb      	ldr	r3, [r7, #12]
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	20008f20 	.word	0x20008f20
 800e84c:	20008f36 	.word	0x20008f36
 800e850:	0800e509 	.word	0x0800e509
 800e854:	006ddd00 	.word	0x006ddd00

0800e858 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b082      	sub	sp, #8
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d107      	bne.n	800e876 <tcp_pcb_purge+0x1e>
 800e866:	4b21      	ldr	r3, [pc, #132]	; (800e8ec <tcp_pcb_purge+0x94>)
 800e868:	f640 0251 	movw	r2, #2129	; 0x851
 800e86c:	4920      	ldr	r1, [pc, #128]	; (800e8f0 <tcp_pcb_purge+0x98>)
 800e86e:	4821      	ldr	r0, [pc, #132]	; (800e8f4 <tcp_pcb_purge+0x9c>)
 800e870:	f007 fc88 	bl	8016184 <iprintf>
 800e874:	e037      	b.n	800e8e6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	7d1b      	ldrb	r3, [r3, #20]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d033      	beq.n	800e8e6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e882:	2b0a      	cmp	r3, #10
 800e884:	d02f      	beq.n	800e8e6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	d02b      	beq.n	800e8e6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e892:	2b00      	cmp	r3, #0
 800e894:	d007      	beq.n	800e8a6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fe fada 	bl	800ce54 <pbuf_free>
      pcb->refused_data = NULL;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d002      	beq.n	800e8b4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f000 f986 	bl	800ebc0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8ba:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7ff fdc7 	bl	800e454 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7ff fdc2 	bl	800e454 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	66da      	str	r2, [r3, #108]	; 0x6c
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e8e6:	3708      	adds	r7, #8
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	08017d08 	.word	0x08017d08
 800e8f0:	08018354 	.word	0x08018354
 800e8f4:	08017d4c 	.word	0x08017d4c

0800e8f8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d106      	bne.n	800e916 <tcp_pcb_remove+0x1e>
 800e908:	4b3e      	ldr	r3, [pc, #248]	; (800ea04 <tcp_pcb_remove+0x10c>)
 800e90a:	f640 0283 	movw	r2, #2179	; 0x883
 800e90e:	493e      	ldr	r1, [pc, #248]	; (800ea08 <tcp_pcb_remove+0x110>)
 800e910:	483e      	ldr	r0, [pc, #248]	; (800ea0c <tcp_pcb_remove+0x114>)
 800e912:	f007 fc37 	bl	8016184 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d106      	bne.n	800e92a <tcp_pcb_remove+0x32>
 800e91c:	4b39      	ldr	r3, [pc, #228]	; (800ea04 <tcp_pcb_remove+0x10c>)
 800e91e:	f640 0284 	movw	r2, #2180	; 0x884
 800e922:	493b      	ldr	r1, [pc, #236]	; (800ea10 <tcp_pcb_remove+0x118>)
 800e924:	4839      	ldr	r0, [pc, #228]	; (800ea0c <tcp_pcb_remove+0x114>)
 800e926:	f007 fc2d 	bl	8016184 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	683a      	ldr	r2, [r7, #0]
 800e930:	429a      	cmp	r2, r3
 800e932:	d105      	bne.n	800e940 <tcp_pcb_remove+0x48>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	68da      	ldr	r2, [r3, #12]
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	601a      	str	r2, [r3, #0]
 800e93e:	e013      	b.n	800e968 <tcp_pcb_remove+0x70>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	60fb      	str	r3, [r7, #12]
 800e946:	e00c      	b.n	800e962 <tcp_pcb_remove+0x6a>
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	683a      	ldr	r2, [r7, #0]
 800e94e:	429a      	cmp	r2, r3
 800e950:	d104      	bne.n	800e95c <tcp_pcb_remove+0x64>
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	68da      	ldr	r2, [r3, #12]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	60da      	str	r2, [r3, #12]
 800e95a:	e005      	b.n	800e968 <tcp_pcb_remove+0x70>
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	60fb      	str	r3, [r7, #12]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1ef      	bne.n	800e948 <tcp_pcb_remove+0x50>
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	2200      	movs	r2, #0
 800e96c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e96e:	6838      	ldr	r0, [r7, #0]
 800e970:	f7ff ff72 	bl	800e858 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	7d1b      	ldrb	r3, [r3, #20]
 800e978:	2b0a      	cmp	r3, #10
 800e97a:	d013      	beq.n	800e9a4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e980:	2b01      	cmp	r3, #1
 800e982:	d00f      	beq.n	800e9a4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	8b5b      	ldrh	r3, [r3, #26]
 800e988:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d009      	beq.n	800e9a4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	8b5b      	ldrh	r3, [r3, #26]
 800e994:	f043 0302 	orr.w	r3, r3, #2
 800e998:	b29a      	uxth	r2, r3
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e99e:	6838      	ldr	r0, [r7, #0]
 800e9a0:	f002 ff6e 	bl	8011880 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	7d1b      	ldrb	r3, [r3, #20]
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d020      	beq.n	800e9ee <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d006      	beq.n	800e9c2 <tcp_pcb_remove+0xca>
 800e9b4:	4b13      	ldr	r3, [pc, #76]	; (800ea04 <tcp_pcb_remove+0x10c>)
 800e9b6:	f640 0293 	movw	r2, #2195	; 0x893
 800e9ba:	4916      	ldr	r1, [pc, #88]	; (800ea14 <tcp_pcb_remove+0x11c>)
 800e9bc:	4813      	ldr	r0, [pc, #76]	; (800ea0c <tcp_pcb_remove+0x114>)
 800e9be:	f007 fbe1 	bl	8016184 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d006      	beq.n	800e9d8 <tcp_pcb_remove+0xe0>
 800e9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ea04 <tcp_pcb_remove+0x10c>)
 800e9cc:	f640 0294 	movw	r2, #2196	; 0x894
 800e9d0:	4911      	ldr	r1, [pc, #68]	; (800ea18 <tcp_pcb_remove+0x120>)
 800e9d2:	480e      	ldr	r0, [pc, #56]	; (800ea0c <tcp_pcb_remove+0x114>)
 800e9d4:	f007 fbd6 	bl	8016184 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d006      	beq.n	800e9ee <tcp_pcb_remove+0xf6>
 800e9e0:	4b08      	ldr	r3, [pc, #32]	; (800ea04 <tcp_pcb_remove+0x10c>)
 800e9e2:	f640 0296 	movw	r2, #2198	; 0x896
 800e9e6:	490d      	ldr	r1, [pc, #52]	; (800ea1c <tcp_pcb_remove+0x124>)
 800e9e8:	4808      	ldr	r0, [pc, #32]	; (800ea0c <tcp_pcb_remove+0x114>)
 800e9ea:	f007 fbcb 	bl	8016184 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e9fa:	bf00      	nop
 800e9fc:	3710      	adds	r7, #16
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
 800ea02:	bf00      	nop
 800ea04:	08017d08 	.word	0x08017d08
 800ea08:	08018370 	.word	0x08018370
 800ea0c:	08017d4c 	.word	0x08017d4c
 800ea10:	0801838c 	.word	0x0801838c
 800ea14:	080183ac 	.word	0x080183ac
 800ea18:	080183c4 	.word	0x080183c4
 800ea1c:	080183e0 	.word	0x080183e0

0800ea20 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d106      	bne.n	800ea3c <tcp_next_iss+0x1c>
 800ea2e:	4b0a      	ldr	r3, [pc, #40]	; (800ea58 <tcp_next_iss+0x38>)
 800ea30:	f640 02af 	movw	r2, #2223	; 0x8af
 800ea34:	4909      	ldr	r1, [pc, #36]	; (800ea5c <tcp_next_iss+0x3c>)
 800ea36:	480a      	ldr	r0, [pc, #40]	; (800ea60 <tcp_next_iss+0x40>)
 800ea38:	f007 fba4 	bl	8016184 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ea3c:	4b09      	ldr	r3, [pc, #36]	; (800ea64 <tcp_next_iss+0x44>)
 800ea3e:	681a      	ldr	r2, [r3, #0]
 800ea40:	4b09      	ldr	r3, [pc, #36]	; (800ea68 <tcp_next_iss+0x48>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	4413      	add	r3, r2
 800ea46:	4a07      	ldr	r2, [pc, #28]	; (800ea64 <tcp_next_iss+0x44>)
 800ea48:	6013      	str	r3, [r2, #0]
  return iss;
 800ea4a:	4b06      	ldr	r3, [pc, #24]	; (800ea64 <tcp_next_iss+0x44>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	bf00      	nop
 800ea58:	08017d08 	.word	0x08017d08
 800ea5c:	080183f8 	.word	0x080183f8
 800ea60:	08017d4c 	.word	0x08017d4c
 800ea64:	20000024 	.word	0x20000024
 800ea68:	20008f20 	.word	0x20008f20

0800ea6c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	4603      	mov	r3, r0
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d106      	bne.n	800ea8e <tcp_eff_send_mss_netif+0x22>
 800ea80:	4b14      	ldr	r3, [pc, #80]	; (800ead4 <tcp_eff_send_mss_netif+0x68>)
 800ea82:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ea86:	4914      	ldr	r1, [pc, #80]	; (800ead8 <tcp_eff_send_mss_netif+0x6c>)
 800ea88:	4814      	ldr	r0, [pc, #80]	; (800eadc <tcp_eff_send_mss_netif+0x70>)
 800ea8a:	f007 fb7b 	bl	8016184 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d101      	bne.n	800ea98 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ea94:	89fb      	ldrh	r3, [r7, #14]
 800ea96:	e019      	b.n	800eacc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea9c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ea9e:	8afb      	ldrh	r3, [r7, #22]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d012      	beq.n	800eaca <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800eaa4:	2328      	movs	r3, #40	; 0x28
 800eaa6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eaa8:	8afa      	ldrh	r2, [r7, #22]
 800eaaa:	8abb      	ldrh	r3, [r7, #20]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d904      	bls.n	800eaba <tcp_eff_send_mss_netif+0x4e>
 800eab0:	8afa      	ldrh	r2, [r7, #22]
 800eab2:	8abb      	ldrh	r3, [r7, #20]
 800eab4:	1ad3      	subs	r3, r2, r3
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	e000      	b.n	800eabc <tcp_eff_send_mss_netif+0x50>
 800eaba:	2300      	movs	r3, #0
 800eabc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800eabe:	8a7a      	ldrh	r2, [r7, #18]
 800eac0:	89fb      	ldrh	r3, [r7, #14]
 800eac2:	4293      	cmp	r3, r2
 800eac4:	bf28      	it	cs
 800eac6:	4613      	movcs	r3, r2
 800eac8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eaca:	89fb      	ldrh	r3, [r7, #14]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3718      	adds	r7, #24
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}
 800ead4:	08017d08 	.word	0x08017d08
 800ead8:	08018414 	.word	0x08018414
 800eadc:	08017d4c 	.word	0x08017d4c

0800eae0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d119      	bne.n	800eb28 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800eaf4:	4b10      	ldr	r3, [pc, #64]	; (800eb38 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800eaf6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800eafa:	4910      	ldr	r1, [pc, #64]	; (800eb3c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800eafc:	4810      	ldr	r0, [pc, #64]	; (800eb40 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800eafe:	f007 fb41 	bl	8016184 <iprintf>

  while (pcb != NULL) {
 800eb02:	e011      	b.n	800eb28 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	429a      	cmp	r2, r3
 800eb0e:	d108      	bne.n	800eb22 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	68db      	ldr	r3, [r3, #12]
 800eb14:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f7fe ffc6 	bl	800daa8 <tcp_abort>
      pcb = next;
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	60fb      	str	r3, [r7, #12]
 800eb20:	e002      	b.n	800eb28 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	68db      	ldr	r3, [r3, #12]
 800eb26:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1ea      	bne.n	800eb04 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800eb2e:	bf00      	nop
 800eb30:	bf00      	nop
 800eb32:	3710      	adds	r7, #16
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	08017d08 	.word	0x08017d08
 800eb3c:	0801843c 	.word	0x0801843c
 800eb40:	08017d4c 	.word	0x08017d4c

0800eb44 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d02a      	beq.n	800ebaa <tcp_netif_ip_addr_changed+0x66>
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d026      	beq.n	800ebaa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800eb5c:	4b15      	ldr	r3, [pc, #84]	; (800ebb4 <tcp_netif_ip_addr_changed+0x70>)
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4619      	mov	r1, r3
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f7ff ffbc 	bl	800eae0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800eb68:	4b13      	ldr	r3, [pc, #76]	; (800ebb8 <tcp_netif_ip_addr_changed+0x74>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f7ff ffb6 	bl	800eae0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d017      	beq.n	800ebaa <tcp_netif_ip_addr_changed+0x66>
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d013      	beq.n	800ebaa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb82:	4b0e      	ldr	r3, [pc, #56]	; (800ebbc <tcp_netif_ip_addr_changed+0x78>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	60fb      	str	r3, [r7, #12]
 800eb88:	e00c      	b.n	800eba4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	681a      	ldr	r2, [r3, #0]
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	429a      	cmp	r2, r3
 800eb94:	d103      	bne.n	800eb9e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	68db      	ldr	r3, [r3, #12]
 800eba2:	60fb      	str	r3, [r7, #12]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d1ef      	bne.n	800eb8a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ebaa:	bf00      	nop
 800ebac:	3710      	adds	r7, #16
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	20008f2c 	.word	0x20008f2c
 800ebb8:	20008f24 	.word	0x20008f24
 800ebbc:	20008f28 	.word	0x20008f28

0800ebc0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ebc0:	b580      	push	{r7, lr}
 800ebc2:	b082      	sub	sp, #8
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d007      	beq.n	800ebe0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	f7ff fc3d 	bl	800e454 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ebe0:	bf00      	nop
 800ebe2:	3708      	adds	r7, #8
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ebe8:	b590      	push	{r4, r7, lr}
 800ebea:	b08d      	sub	sp, #52	; 0x34
 800ebec:	af04      	add	r7, sp, #16
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d105      	bne.n	800ec04 <tcp_input+0x1c>
 800ebf8:	4b9b      	ldr	r3, [pc, #620]	; (800ee68 <tcp_input+0x280>)
 800ebfa:	2283      	movs	r2, #131	; 0x83
 800ebfc:	499b      	ldr	r1, [pc, #620]	; (800ee6c <tcp_input+0x284>)
 800ebfe:	489c      	ldr	r0, [pc, #624]	; (800ee70 <tcp_input+0x288>)
 800ec00:	f007 fac0 	bl	8016184 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	4a9a      	ldr	r2, [pc, #616]	; (800ee74 <tcp_input+0x28c>)
 800ec0a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	895b      	ldrh	r3, [r3, #10]
 800ec10:	2b13      	cmp	r3, #19
 800ec12:	f240 83d1 	bls.w	800f3b8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ec16:	4b98      	ldr	r3, [pc, #608]	; (800ee78 <tcp_input+0x290>)
 800ec18:	695b      	ldr	r3, [r3, #20]
 800ec1a:	4a97      	ldr	r2, [pc, #604]	; (800ee78 <tcp_input+0x290>)
 800ec1c:	6812      	ldr	r2, [r2, #0]
 800ec1e:	4611      	mov	r1, r2
 800ec20:	4618      	mov	r0, r3
 800ec22:	f005 ffa9 	bl	8014b78 <ip4_addr_isbroadcast_u32>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f040 83c7 	bne.w	800f3bc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ec2e:	4b92      	ldr	r3, [pc, #584]	; (800ee78 <tcp_input+0x290>)
 800ec30:	695b      	ldr	r3, [r3, #20]
 800ec32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ec36:	2be0      	cmp	r3, #224	; 0xe0
 800ec38:	f000 83c0 	beq.w	800f3bc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ec3c:	4b8d      	ldr	r3, [pc, #564]	; (800ee74 <tcp_input+0x28c>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	899b      	ldrh	r3, [r3, #12]
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	4618      	mov	r0, r3
 800ec46:	f7fc fda7 	bl	800b798 <lwip_htons>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	0b1b      	lsrs	r3, r3, #12
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	b2db      	uxtb	r3, r3
 800ec52:	009b      	lsls	r3, r3, #2
 800ec54:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ec56:	7cbb      	ldrb	r3, [r7, #18]
 800ec58:	2b13      	cmp	r3, #19
 800ec5a:	f240 83b1 	bls.w	800f3c0 <tcp_input+0x7d8>
 800ec5e:	7cbb      	ldrb	r3, [r7, #18]
 800ec60:	b29a      	uxth	r2, r3
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	891b      	ldrh	r3, [r3, #8]
 800ec66:	429a      	cmp	r2, r3
 800ec68:	f200 83aa 	bhi.w	800f3c0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ec6c:	7cbb      	ldrb	r3, [r7, #18]
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	3b14      	subs	r3, #20
 800ec72:	b29a      	uxth	r2, r3
 800ec74:	4b81      	ldr	r3, [pc, #516]	; (800ee7c <tcp_input+0x294>)
 800ec76:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ec78:	4b81      	ldr	r3, [pc, #516]	; (800ee80 <tcp_input+0x298>)
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	895a      	ldrh	r2, [r3, #10]
 800ec82:	7cbb      	ldrb	r3, [r7, #18]
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d309      	bcc.n	800ec9e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ec8a:	4b7c      	ldr	r3, [pc, #496]	; (800ee7c <tcp_input+0x294>)
 800ec8c:	881a      	ldrh	r2, [r3, #0]
 800ec8e:	4b7d      	ldr	r3, [pc, #500]	; (800ee84 <tcp_input+0x29c>)
 800ec90:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ec92:	7cbb      	ldrb	r3, [r7, #18]
 800ec94:	4619      	mov	r1, r3
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f7fe f856 	bl	800cd48 <pbuf_remove_header>
 800ec9c:	e04e      	b.n	800ed3c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d105      	bne.n	800ecb2 <tcp_input+0xca>
 800eca6:	4b70      	ldr	r3, [pc, #448]	; (800ee68 <tcp_input+0x280>)
 800eca8:	22c2      	movs	r2, #194	; 0xc2
 800ecaa:	4977      	ldr	r1, [pc, #476]	; (800ee88 <tcp_input+0x2a0>)
 800ecac:	4870      	ldr	r0, [pc, #448]	; (800ee70 <tcp_input+0x288>)
 800ecae:	f007 fa69 	bl	8016184 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ecb2:	2114      	movs	r1, #20
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f7fe f847 	bl	800cd48 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	895a      	ldrh	r2, [r3, #10]
 800ecbe:	4b71      	ldr	r3, [pc, #452]	; (800ee84 <tcp_input+0x29c>)
 800ecc0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ecc2:	4b6e      	ldr	r3, [pc, #440]	; (800ee7c <tcp_input+0x294>)
 800ecc4:	881a      	ldrh	r2, [r3, #0]
 800ecc6:	4b6f      	ldr	r3, [pc, #444]	; (800ee84 <tcp_input+0x29c>)
 800ecc8:	881b      	ldrh	r3, [r3, #0]
 800ecca:	1ad3      	subs	r3, r2, r3
 800eccc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ecce:	4b6d      	ldr	r3, [pc, #436]	; (800ee84 <tcp_input+0x29c>)
 800ecd0:	881b      	ldrh	r3, [r3, #0]
 800ecd2:	4619      	mov	r1, r3
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f7fe f837 	bl	800cd48 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	895b      	ldrh	r3, [r3, #10]
 800ece0:	8a3a      	ldrh	r2, [r7, #16]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	f200 836e 	bhi.w	800f3c4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	4a64      	ldr	r2, [pc, #400]	; (800ee80 <tcp_input+0x298>)
 800ecf0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	8a3a      	ldrh	r2, [r7, #16]
 800ecf8:	4611      	mov	r1, r2
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fe f824 	bl	800cd48 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	891a      	ldrh	r2, [r3, #8]
 800ed04:	8a3b      	ldrh	r3, [r7, #16]
 800ed06:	1ad3      	subs	r3, r2, r3
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	895b      	ldrh	r3, [r3, #10]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d005      	beq.n	800ed22 <tcp_input+0x13a>
 800ed16:	4b54      	ldr	r3, [pc, #336]	; (800ee68 <tcp_input+0x280>)
 800ed18:	22df      	movs	r2, #223	; 0xdf
 800ed1a:	495c      	ldr	r1, [pc, #368]	; (800ee8c <tcp_input+0x2a4>)
 800ed1c:	4854      	ldr	r0, [pc, #336]	; (800ee70 <tcp_input+0x288>)
 800ed1e:	f007 fa31 	bl	8016184 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	891a      	ldrh	r2, [r3, #8]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	891b      	ldrh	r3, [r3, #8]
 800ed2c:	429a      	cmp	r2, r3
 800ed2e:	d005      	beq.n	800ed3c <tcp_input+0x154>
 800ed30:	4b4d      	ldr	r3, [pc, #308]	; (800ee68 <tcp_input+0x280>)
 800ed32:	22e0      	movs	r2, #224	; 0xe0
 800ed34:	4956      	ldr	r1, [pc, #344]	; (800ee90 <tcp_input+0x2a8>)
 800ed36:	484e      	ldr	r0, [pc, #312]	; (800ee70 <tcp_input+0x288>)
 800ed38:	f007 fa24 	bl	8016184 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ed3c:	4b4d      	ldr	r3, [pc, #308]	; (800ee74 <tcp_input+0x28c>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	881b      	ldrh	r3, [r3, #0]
 800ed42:	b29b      	uxth	r3, r3
 800ed44:	4a4b      	ldr	r2, [pc, #300]	; (800ee74 <tcp_input+0x28c>)
 800ed46:	6814      	ldr	r4, [r2, #0]
 800ed48:	4618      	mov	r0, r3
 800ed4a:	f7fc fd25 	bl	800b798 <lwip_htons>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ed52:	4b48      	ldr	r3, [pc, #288]	; (800ee74 <tcp_input+0x28c>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	885b      	ldrh	r3, [r3, #2]
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	4a46      	ldr	r2, [pc, #280]	; (800ee74 <tcp_input+0x28c>)
 800ed5c:	6814      	ldr	r4, [r2, #0]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fc fd1a 	bl	800b798 <lwip_htons>
 800ed64:	4603      	mov	r3, r0
 800ed66:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ed68:	4b42      	ldr	r3, [pc, #264]	; (800ee74 <tcp_input+0x28c>)
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	4a41      	ldr	r2, [pc, #260]	; (800ee74 <tcp_input+0x28c>)
 800ed70:	6814      	ldr	r4, [r2, #0]
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fc fd25 	bl	800b7c2 <lwip_htonl>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	6063      	str	r3, [r4, #4]
 800ed7c:	6863      	ldr	r3, [r4, #4]
 800ed7e:	4a45      	ldr	r2, [pc, #276]	; (800ee94 <tcp_input+0x2ac>)
 800ed80:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ed82:	4b3c      	ldr	r3, [pc, #240]	; (800ee74 <tcp_input+0x28c>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	4a3a      	ldr	r2, [pc, #232]	; (800ee74 <tcp_input+0x28c>)
 800ed8a:	6814      	ldr	r4, [r2, #0]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fc fd18 	bl	800b7c2 <lwip_htonl>
 800ed92:	4603      	mov	r3, r0
 800ed94:	60a3      	str	r3, [r4, #8]
 800ed96:	68a3      	ldr	r3, [r4, #8]
 800ed98:	4a3f      	ldr	r2, [pc, #252]	; (800ee98 <tcp_input+0x2b0>)
 800ed9a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ed9c:	4b35      	ldr	r3, [pc, #212]	; (800ee74 <tcp_input+0x28c>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	89db      	ldrh	r3, [r3, #14]
 800eda2:	b29b      	uxth	r3, r3
 800eda4:	4a33      	ldr	r2, [pc, #204]	; (800ee74 <tcp_input+0x28c>)
 800eda6:	6814      	ldr	r4, [r2, #0]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7fc fcf5 	bl	800b798 <lwip_htons>
 800edae:	4603      	mov	r3, r0
 800edb0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800edb2:	4b30      	ldr	r3, [pc, #192]	; (800ee74 <tcp_input+0x28c>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	899b      	ldrh	r3, [r3, #12]
 800edb8:	b29b      	uxth	r3, r3
 800edba:	4618      	mov	r0, r3
 800edbc:	f7fc fcec 	bl	800b798 <lwip_htons>
 800edc0:	4603      	mov	r3, r0
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800edc8:	b2da      	uxtb	r2, r3
 800edca:	4b34      	ldr	r3, [pc, #208]	; (800ee9c <tcp_input+0x2b4>)
 800edcc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	891a      	ldrh	r2, [r3, #8]
 800edd2:	4b33      	ldr	r3, [pc, #204]	; (800eea0 <tcp_input+0x2b8>)
 800edd4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800edd6:	4b31      	ldr	r3, [pc, #196]	; (800ee9c <tcp_input+0x2b4>)
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	f003 0303 	and.w	r3, r3, #3
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00c      	beq.n	800edfc <tcp_input+0x214>
    tcplen++;
 800ede2:	4b2f      	ldr	r3, [pc, #188]	; (800eea0 <tcp_input+0x2b8>)
 800ede4:	881b      	ldrh	r3, [r3, #0]
 800ede6:	3301      	adds	r3, #1
 800ede8:	b29a      	uxth	r2, r3
 800edea:	4b2d      	ldr	r3, [pc, #180]	; (800eea0 <tcp_input+0x2b8>)
 800edec:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	891a      	ldrh	r2, [r3, #8]
 800edf2:	4b2b      	ldr	r3, [pc, #172]	; (800eea0 <tcp_input+0x2b8>)
 800edf4:	881b      	ldrh	r3, [r3, #0]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	f200 82e6 	bhi.w	800f3c8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800edfc:	2300      	movs	r3, #0
 800edfe:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee00:	4b28      	ldr	r3, [pc, #160]	; (800eea4 <tcp_input+0x2bc>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	61fb      	str	r3, [r7, #28]
 800ee06:	e09d      	b.n	800ef44 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	7d1b      	ldrb	r3, [r3, #20]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d105      	bne.n	800ee1c <tcp_input+0x234>
 800ee10:	4b15      	ldr	r3, [pc, #84]	; (800ee68 <tcp_input+0x280>)
 800ee12:	22fb      	movs	r2, #251	; 0xfb
 800ee14:	4924      	ldr	r1, [pc, #144]	; (800eea8 <tcp_input+0x2c0>)
 800ee16:	4816      	ldr	r0, [pc, #88]	; (800ee70 <tcp_input+0x288>)
 800ee18:	f007 f9b4 	bl	8016184 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	7d1b      	ldrb	r3, [r3, #20]
 800ee20:	2b0a      	cmp	r3, #10
 800ee22:	d105      	bne.n	800ee30 <tcp_input+0x248>
 800ee24:	4b10      	ldr	r3, [pc, #64]	; (800ee68 <tcp_input+0x280>)
 800ee26:	22fc      	movs	r2, #252	; 0xfc
 800ee28:	4920      	ldr	r1, [pc, #128]	; (800eeac <tcp_input+0x2c4>)
 800ee2a:	4811      	ldr	r0, [pc, #68]	; (800ee70 <tcp_input+0x288>)
 800ee2c:	f007 f9aa 	bl	8016184 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	7d1b      	ldrb	r3, [r3, #20]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	d105      	bne.n	800ee44 <tcp_input+0x25c>
 800ee38:	4b0b      	ldr	r3, [pc, #44]	; (800ee68 <tcp_input+0x280>)
 800ee3a:	22fd      	movs	r2, #253	; 0xfd
 800ee3c:	491c      	ldr	r1, [pc, #112]	; (800eeb0 <tcp_input+0x2c8>)
 800ee3e:	480c      	ldr	r0, [pc, #48]	; (800ee70 <tcp_input+0x288>)
 800ee40:	f007 f9a0 	bl	8016184 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	7a1b      	ldrb	r3, [r3, #8]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d033      	beq.n	800eeb4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ee4c:	69fb      	ldr	r3, [r7, #28]
 800ee4e:	7a1a      	ldrb	r2, [r3, #8]
 800ee50:	4b09      	ldr	r3, [pc, #36]	; (800ee78 <tcp_input+0x290>)
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee58:	3301      	adds	r3, #1
 800ee5a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d029      	beq.n	800eeb4 <tcp_input+0x2cc>
      prev = pcb;
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	61bb      	str	r3, [r7, #24]
      continue;
 800ee64:	e06b      	b.n	800ef3e <tcp_input+0x356>
 800ee66:	bf00      	nop
 800ee68:	08018470 	.word	0x08018470
 800ee6c:	080184a4 	.word	0x080184a4
 800ee70:	080184bc 	.word	0x080184bc
 800ee74:	20008f48 	.word	0x20008f48
 800ee78:	200059b0 	.word	0x200059b0
 800ee7c:	20008f4c 	.word	0x20008f4c
 800ee80:	20008f50 	.word	0x20008f50
 800ee84:	20008f4e 	.word	0x20008f4e
 800ee88:	080184e4 	.word	0x080184e4
 800ee8c:	080184f4 	.word	0x080184f4
 800ee90:	08018500 	.word	0x08018500
 800ee94:	20008f58 	.word	0x20008f58
 800ee98:	20008f5c 	.word	0x20008f5c
 800ee9c:	20008f64 	.word	0x20008f64
 800eea0:	20008f62 	.word	0x20008f62
 800eea4:	20008f2c 	.word	0x20008f2c
 800eea8:	08018520 	.word	0x08018520
 800eeac:	08018548 	.word	0x08018548
 800eeb0:	08018574 	.word	0x08018574
    }

    if (pcb->remote_port == tcphdr->src &&
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	8b1a      	ldrh	r2, [r3, #24]
 800eeb8:	4b72      	ldr	r3, [pc, #456]	; (800f084 <tcp_input+0x49c>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	881b      	ldrh	r3, [r3, #0]
 800eebe:	b29b      	uxth	r3, r3
 800eec0:	429a      	cmp	r2, r3
 800eec2:	d13a      	bne.n	800ef3a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	8ada      	ldrh	r2, [r3, #22]
 800eec8:	4b6e      	ldr	r3, [pc, #440]	; (800f084 <tcp_input+0x49c>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	885b      	ldrh	r3, [r3, #2]
 800eece:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d132      	bne.n	800ef3a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	685a      	ldr	r2, [r3, #4]
 800eed8:	4b6b      	ldr	r3, [pc, #428]	; (800f088 <tcp_input+0x4a0>)
 800eeda:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800eedc:	429a      	cmp	r2, r3
 800eede:	d12c      	bne.n	800ef3a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	681a      	ldr	r2, [r3, #0]
 800eee4:	4b68      	ldr	r3, [pc, #416]	; (800f088 <tcp_input+0x4a0>)
 800eee6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eee8:	429a      	cmp	r2, r3
 800eeea:	d126      	bne.n	800ef3a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	68db      	ldr	r3, [r3, #12]
 800eef0:	69fa      	ldr	r2, [r7, #28]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	d106      	bne.n	800ef04 <tcp_input+0x31c>
 800eef6:	4b65      	ldr	r3, [pc, #404]	; (800f08c <tcp_input+0x4a4>)
 800eef8:	f240 120d 	movw	r2, #269	; 0x10d
 800eefc:	4964      	ldr	r1, [pc, #400]	; (800f090 <tcp_input+0x4a8>)
 800eefe:	4865      	ldr	r0, [pc, #404]	; (800f094 <tcp_input+0x4ac>)
 800ef00:	f007 f940 	bl	8016184 <iprintf>
      if (prev != NULL) {
 800ef04:	69bb      	ldr	r3, [r7, #24]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d00a      	beq.n	800ef20 <tcp_input+0x338>
        prev->next = pcb->next;
 800ef0a:	69fb      	ldr	r3, [r7, #28]
 800ef0c:	68da      	ldr	r2, [r3, #12]
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ef12:	4b61      	ldr	r3, [pc, #388]	; (800f098 <tcp_input+0x4b0>)
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ef1a:	4a5f      	ldr	r2, [pc, #380]	; (800f098 <tcp_input+0x4b0>)
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	68db      	ldr	r3, [r3, #12]
 800ef24:	69fa      	ldr	r2, [r7, #28]
 800ef26:	429a      	cmp	r2, r3
 800ef28:	d111      	bne.n	800ef4e <tcp_input+0x366>
 800ef2a:	4b58      	ldr	r3, [pc, #352]	; (800f08c <tcp_input+0x4a4>)
 800ef2c:	f240 1215 	movw	r2, #277	; 0x115
 800ef30:	495a      	ldr	r1, [pc, #360]	; (800f09c <tcp_input+0x4b4>)
 800ef32:	4858      	ldr	r0, [pc, #352]	; (800f094 <tcp_input+0x4ac>)
 800ef34:	f007 f926 	bl	8016184 <iprintf>
      break;
 800ef38:	e009      	b.n	800ef4e <tcp_input+0x366>
    }
    prev = pcb;
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	61fb      	str	r3, [r7, #28]
 800ef44:	69fb      	ldr	r3, [r7, #28]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	f47f af5e 	bne.w	800ee08 <tcp_input+0x220>
 800ef4c:	e000      	b.n	800ef50 <tcp_input+0x368>
      break;
 800ef4e:	bf00      	nop
  }

  if (pcb == NULL) {
 800ef50:	69fb      	ldr	r3, [r7, #28]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f040 80aa 	bne.w	800f0ac <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef58:	4b51      	ldr	r3, [pc, #324]	; (800f0a0 <tcp_input+0x4b8>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	61fb      	str	r3, [r7, #28]
 800ef5e:	e03f      	b.n	800efe0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	7d1b      	ldrb	r3, [r3, #20]
 800ef64:	2b0a      	cmp	r3, #10
 800ef66:	d006      	beq.n	800ef76 <tcp_input+0x38e>
 800ef68:	4b48      	ldr	r3, [pc, #288]	; (800f08c <tcp_input+0x4a4>)
 800ef6a:	f240 121f 	movw	r2, #287	; 0x11f
 800ef6e:	494d      	ldr	r1, [pc, #308]	; (800f0a4 <tcp_input+0x4bc>)
 800ef70:	4848      	ldr	r0, [pc, #288]	; (800f094 <tcp_input+0x4ac>)
 800ef72:	f007 f907 	bl	8016184 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef76:	69fb      	ldr	r3, [r7, #28]
 800ef78:	7a1b      	ldrb	r3, [r3, #8]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d009      	beq.n	800ef92 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	7a1a      	ldrb	r2, [r3, #8]
 800ef82:	4b41      	ldr	r3, [pc, #260]	; (800f088 <tcp_input+0x4a0>)
 800ef84:	685b      	ldr	r3, [r3, #4]
 800ef86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d122      	bne.n	800efd8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	8b1a      	ldrh	r2, [r3, #24]
 800ef96:	4b3b      	ldr	r3, [pc, #236]	; (800f084 <tcp_input+0x49c>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	881b      	ldrh	r3, [r3, #0]
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d11b      	bne.n	800efda <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800efa2:	69fb      	ldr	r3, [r7, #28]
 800efa4:	8ada      	ldrh	r2, [r3, #22]
 800efa6:	4b37      	ldr	r3, [pc, #220]	; (800f084 <tcp_input+0x49c>)
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	885b      	ldrh	r3, [r3, #2]
 800efac:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800efae:	429a      	cmp	r2, r3
 800efb0:	d113      	bne.n	800efda <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	685a      	ldr	r2, [r3, #4]
 800efb6:	4b34      	ldr	r3, [pc, #208]	; (800f088 <tcp_input+0x4a0>)
 800efb8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800efba:	429a      	cmp	r2, r3
 800efbc:	d10d      	bne.n	800efda <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800efbe:	69fb      	ldr	r3, [r7, #28]
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	4b31      	ldr	r3, [pc, #196]	; (800f088 <tcp_input+0x4a0>)
 800efc4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d107      	bne.n	800efda <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800efca:	69f8      	ldr	r0, [r7, #28]
 800efcc:	f000 fb56 	bl	800f67c <tcp_timewait_input>
        }
        pbuf_free(p);
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f7fd ff3f 	bl	800ce54 <pbuf_free>
        return;
 800efd6:	e1fd      	b.n	800f3d4 <tcp_input+0x7ec>
        continue;
 800efd8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800efda:	69fb      	ldr	r3, [r7, #28]
 800efdc:	68db      	ldr	r3, [r3, #12]
 800efde:	61fb      	str	r3, [r7, #28]
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d1bc      	bne.n	800ef60 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800efe6:	2300      	movs	r3, #0
 800efe8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800efea:	4b2f      	ldr	r3, [pc, #188]	; (800f0a8 <tcp_input+0x4c0>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	617b      	str	r3, [r7, #20]
 800eff0:	e02a      	b.n	800f048 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	7a1b      	ldrb	r3, [r3, #8]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d00c      	beq.n	800f014 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800effa:	697b      	ldr	r3, [r7, #20]
 800effc:	7a1a      	ldrb	r2, [r3, #8]
 800effe:	4b22      	ldr	r3, [pc, #136]	; (800f088 <tcp_input+0x4a0>)
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f006:	3301      	adds	r3, #1
 800f008:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f00a:	429a      	cmp	r2, r3
 800f00c:	d002      	beq.n	800f014 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	61bb      	str	r3, [r7, #24]
        continue;
 800f012:	e016      	b.n	800f042 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	8ada      	ldrh	r2, [r3, #22]
 800f018:	4b1a      	ldr	r3, [pc, #104]	; (800f084 <tcp_input+0x49c>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	885b      	ldrh	r3, [r3, #2]
 800f01e:	b29b      	uxth	r3, r3
 800f020:	429a      	cmp	r2, r3
 800f022:	d10c      	bne.n	800f03e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	681a      	ldr	r2, [r3, #0]
 800f028:	4b17      	ldr	r3, [pc, #92]	; (800f088 <tcp_input+0x4a0>)
 800f02a:	695b      	ldr	r3, [r3, #20]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	d00f      	beq.n	800f050 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00d      	beq.n	800f052 <tcp_input+0x46a>
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d009      	beq.n	800f052 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	617b      	str	r3, [r7, #20]
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d1d1      	bne.n	800eff2 <tcp_input+0x40a>
 800f04e:	e000      	b.n	800f052 <tcp_input+0x46a>
            break;
 800f050:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d029      	beq.n	800f0ac <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f058:	69bb      	ldr	r3, [r7, #24]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00a      	beq.n	800f074 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	68da      	ldr	r2, [r3, #12]
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f066:	4b10      	ldr	r3, [pc, #64]	; (800f0a8 <tcp_input+0x4c0>)
 800f068:	681a      	ldr	r2, [r3, #0]
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f06e:	4a0e      	ldr	r2, [pc, #56]	; (800f0a8 <tcp_input+0x4c0>)
 800f070:	697b      	ldr	r3, [r7, #20]
 800f072:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f074:	6978      	ldr	r0, [r7, #20]
 800f076:	f000 fa03 	bl	800f480 <tcp_listen_input>
      }
      pbuf_free(p);
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f7fd feea 	bl	800ce54 <pbuf_free>
      return;
 800f080:	e1a8      	b.n	800f3d4 <tcp_input+0x7ec>
 800f082:	bf00      	nop
 800f084:	20008f48 	.word	0x20008f48
 800f088:	200059b0 	.word	0x200059b0
 800f08c:	08018470 	.word	0x08018470
 800f090:	0801859c 	.word	0x0801859c
 800f094:	080184bc 	.word	0x080184bc
 800f098:	20008f2c 	.word	0x20008f2c
 800f09c:	080185c8 	.word	0x080185c8
 800f0a0:	20008f30 	.word	0x20008f30
 800f0a4:	080185f4 	.word	0x080185f4
 800f0a8:	20008f28 	.word	0x20008f28
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f0ac:	69fb      	ldr	r3, [r7, #28]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f000 8158 	beq.w	800f364 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f0b4:	4b95      	ldr	r3, [pc, #596]	; (800f30c <tcp_input+0x724>)
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	891a      	ldrh	r2, [r3, #8]
 800f0be:	4b93      	ldr	r3, [pc, #588]	; (800f30c <tcp_input+0x724>)
 800f0c0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f0c2:	4a92      	ldr	r2, [pc, #584]	; (800f30c <tcp_input+0x724>)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f0c8:	4b91      	ldr	r3, [pc, #580]	; (800f310 <tcp_input+0x728>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4a8f      	ldr	r2, [pc, #572]	; (800f30c <tcp_input+0x724>)
 800f0ce:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f0d0:	4b90      	ldr	r3, [pc, #576]	; (800f314 <tcp_input+0x72c>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f0d6:	4b90      	ldr	r3, [pc, #576]	; (800f318 <tcp_input+0x730>)
 800f0d8:	2200      	movs	r2, #0
 800f0da:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f0dc:	4b8f      	ldr	r3, [pc, #572]	; (800f31c <tcp_input+0x734>)
 800f0de:	2200      	movs	r2, #0
 800f0e0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f0e2:	4b8f      	ldr	r3, [pc, #572]	; (800f320 <tcp_input+0x738>)
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	f003 0308 	and.w	r3, r3, #8
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d006      	beq.n	800f0fc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	7b5b      	ldrb	r3, [r3, #13]
 800f0f2:	f043 0301 	orr.w	r3, r3, #1
 800f0f6:	b2da      	uxtb	r2, r3
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f0fc:	69fb      	ldr	r3, [r7, #28]
 800f0fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f100:	2b00      	cmp	r3, #0
 800f102:	d017      	beq.n	800f134 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f104:	69f8      	ldr	r0, [r7, #28]
 800f106:	f7ff f929 	bl	800e35c <tcp_process_refused_data>
 800f10a:	4603      	mov	r3, r0
 800f10c:	f113 0f0d 	cmn.w	r3, #13
 800f110:	d007      	beq.n	800f122 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f112:	69fb      	ldr	r3, [r7, #28]
 800f114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f116:	2b00      	cmp	r3, #0
 800f118:	d00c      	beq.n	800f134 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f11a:	4b82      	ldr	r3, [pc, #520]	; (800f324 <tcp_input+0x73c>)
 800f11c:	881b      	ldrh	r3, [r3, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d008      	beq.n	800f134 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f126:	2b00      	cmp	r3, #0
 800f128:	f040 80e3 	bne.w	800f2f2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f12c:	69f8      	ldr	r0, [r7, #28]
 800f12e:	f003 f9ad 	bl	801248c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f132:	e0de      	b.n	800f2f2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f134:	4a7c      	ldr	r2, [pc, #496]	; (800f328 <tcp_input+0x740>)
 800f136:	69fb      	ldr	r3, [r7, #28]
 800f138:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f13a:	69f8      	ldr	r0, [r7, #28]
 800f13c:	f000 fb18 	bl	800f770 <tcp_process>
 800f140:	4603      	mov	r3, r0
 800f142:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f144:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f148:	f113 0f0d 	cmn.w	r3, #13
 800f14c:	f000 80d3 	beq.w	800f2f6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f150:	4b71      	ldr	r3, [pc, #452]	; (800f318 <tcp_input+0x730>)
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	f003 0308 	and.w	r3, r3, #8
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d015      	beq.n	800f188 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f15c:	69fb      	ldr	r3, [r7, #28]
 800f15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f162:	2b00      	cmp	r3, #0
 800f164:	d008      	beq.n	800f178 <tcp_input+0x590>
 800f166:	69fb      	ldr	r3, [r7, #28]
 800f168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f16c:	69fa      	ldr	r2, [r7, #28]
 800f16e:	6912      	ldr	r2, [r2, #16]
 800f170:	f06f 010d 	mvn.w	r1, #13
 800f174:	4610      	mov	r0, r2
 800f176:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f178:	69f9      	ldr	r1, [r7, #28]
 800f17a:	486c      	ldr	r0, [pc, #432]	; (800f32c <tcp_input+0x744>)
 800f17c:	f7ff fbbc 	bl	800e8f8 <tcp_pcb_remove>
        tcp_free(pcb);
 800f180:	69f8      	ldr	r0, [r7, #28]
 800f182:	f7fe f9a9 	bl	800d4d8 <tcp_free>
 800f186:	e0da      	b.n	800f33e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f188:	2300      	movs	r3, #0
 800f18a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f18c:	4b63      	ldr	r3, [pc, #396]	; (800f31c <tcp_input+0x734>)
 800f18e:	881b      	ldrh	r3, [r3, #0]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d01d      	beq.n	800f1d0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f194:	4b61      	ldr	r3, [pc, #388]	; (800f31c <tcp_input+0x734>)
 800f196:	881b      	ldrh	r3, [r3, #0]
 800f198:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f19a:	69fb      	ldr	r3, [r7, #28]
 800f19c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d00a      	beq.n	800f1ba <tcp_input+0x5d2>
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f1aa:	69fa      	ldr	r2, [r7, #28]
 800f1ac:	6910      	ldr	r0, [r2, #16]
 800f1ae:	89fa      	ldrh	r2, [r7, #14]
 800f1b0:	69f9      	ldr	r1, [r7, #28]
 800f1b2:	4798      	blx	r3
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	74fb      	strb	r3, [r7, #19]
 800f1b8:	e001      	b.n	800f1be <tcp_input+0x5d6>
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f1be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1c2:	f113 0f0d 	cmn.w	r3, #13
 800f1c6:	f000 8098 	beq.w	800f2fa <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f1ca:	4b54      	ldr	r3, [pc, #336]	; (800f31c <tcp_input+0x734>)
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f1d0:	69f8      	ldr	r0, [r7, #28]
 800f1d2:	f000 f915 	bl	800f400 <tcp_input_delayed_close>
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	f040 8090 	bne.w	800f2fe <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f1de:	4b4d      	ldr	r3, [pc, #308]	; (800f314 <tcp_input+0x72c>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d041      	beq.n	800f26a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f1e6:	69fb      	ldr	r3, [r7, #28]
 800f1e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d006      	beq.n	800f1fc <tcp_input+0x614>
 800f1ee:	4b50      	ldr	r3, [pc, #320]	; (800f330 <tcp_input+0x748>)
 800f1f0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f1f4:	494f      	ldr	r1, [pc, #316]	; (800f334 <tcp_input+0x74c>)
 800f1f6:	4850      	ldr	r0, [pc, #320]	; (800f338 <tcp_input+0x750>)
 800f1f8:	f006 ffc4 	bl	8016184 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	8b5b      	ldrh	r3, [r3, #26]
 800f200:	f003 0310 	and.w	r3, r3, #16
 800f204:	2b00      	cmp	r3, #0
 800f206:	d008      	beq.n	800f21a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f208:	4b42      	ldr	r3, [pc, #264]	; (800f314 <tcp_input+0x72c>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7fd fe21 	bl	800ce54 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f212:	69f8      	ldr	r0, [r7, #28]
 800f214:	f7fe fc48 	bl	800daa8 <tcp_abort>
            goto aborted;
 800f218:	e091      	b.n	800f33e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00c      	beq.n	800f23e <tcp_input+0x656>
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f22a:	69fb      	ldr	r3, [r7, #28]
 800f22c:	6918      	ldr	r0, [r3, #16]
 800f22e:	4b39      	ldr	r3, [pc, #228]	; (800f314 <tcp_input+0x72c>)
 800f230:	681a      	ldr	r2, [r3, #0]
 800f232:	2300      	movs	r3, #0
 800f234:	69f9      	ldr	r1, [r7, #28]
 800f236:	47a0      	blx	r4
 800f238:	4603      	mov	r3, r0
 800f23a:	74fb      	strb	r3, [r7, #19]
 800f23c:	e008      	b.n	800f250 <tcp_input+0x668>
 800f23e:	4b35      	ldr	r3, [pc, #212]	; (800f314 <tcp_input+0x72c>)
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	2300      	movs	r3, #0
 800f244:	69f9      	ldr	r1, [r7, #28]
 800f246:	2000      	movs	r0, #0
 800f248:	f7ff f95e 	bl	800e508 <tcp_recv_null>
 800f24c:	4603      	mov	r3, r0
 800f24e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f250:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f254:	f113 0f0d 	cmn.w	r3, #13
 800f258:	d053      	beq.n	800f302 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f25a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d003      	beq.n	800f26a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f262:	4b2c      	ldr	r3, [pc, #176]	; (800f314 <tcp_input+0x72c>)
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f26a:	4b2b      	ldr	r3, [pc, #172]	; (800f318 <tcp_input+0x730>)
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	f003 0320 	and.w	r3, r3, #32
 800f272:	2b00      	cmp	r3, #0
 800f274:	d030      	beq.n	800f2d8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f276:	69fb      	ldr	r3, [r7, #28]
 800f278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d009      	beq.n	800f292 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f282:	7b5a      	ldrb	r2, [r3, #13]
 800f284:	69fb      	ldr	r3, [r7, #28]
 800f286:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f288:	f042 0220 	orr.w	r2, r2, #32
 800f28c:	b2d2      	uxtb	r2, r2
 800f28e:	735a      	strb	r2, [r3, #13]
 800f290:	e022      	b.n	800f2d8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f296:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f29a:	d005      	beq.n	800f2a8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	b29a      	uxth	r2, r3
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d00b      	beq.n	800f2ca <tcp_input+0x6e2>
 800f2b2:	69fb      	ldr	r3, [r7, #28]
 800f2b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	6918      	ldr	r0, [r3, #16]
 800f2bc:	2300      	movs	r3, #0
 800f2be:	2200      	movs	r2, #0
 800f2c0:	69f9      	ldr	r1, [r7, #28]
 800f2c2:	47a0      	blx	r4
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	74fb      	strb	r3, [r7, #19]
 800f2c8:	e001      	b.n	800f2ce <tcp_input+0x6e6>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f2ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f2d2:	f113 0f0d 	cmn.w	r3, #13
 800f2d6:	d016      	beq.n	800f306 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f2d8:	4b13      	ldr	r3, [pc, #76]	; (800f328 <tcp_input+0x740>)
 800f2da:	2200      	movs	r2, #0
 800f2dc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f2de:	69f8      	ldr	r0, [r7, #28]
 800f2e0:	f000 f88e 	bl	800f400 <tcp_input_delayed_close>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d128      	bne.n	800f33c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f2ea:	69f8      	ldr	r0, [r7, #28]
 800f2ec:	f002 fac8 	bl	8011880 <tcp_output>
 800f2f0:	e025      	b.n	800f33e <tcp_input+0x756>
        goto aborted;
 800f2f2:	bf00      	nop
 800f2f4:	e023      	b.n	800f33e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f2f6:	bf00      	nop
 800f2f8:	e021      	b.n	800f33e <tcp_input+0x756>
              goto aborted;
 800f2fa:	bf00      	nop
 800f2fc:	e01f      	b.n	800f33e <tcp_input+0x756>
          goto aborted;
 800f2fe:	bf00      	nop
 800f300:	e01d      	b.n	800f33e <tcp_input+0x756>
            goto aborted;
 800f302:	bf00      	nop
 800f304:	e01b      	b.n	800f33e <tcp_input+0x756>
              goto aborted;
 800f306:	bf00      	nop
 800f308:	e019      	b.n	800f33e <tcp_input+0x756>
 800f30a:	bf00      	nop
 800f30c:	20008f38 	.word	0x20008f38
 800f310:	20008f48 	.word	0x20008f48
 800f314:	20008f68 	.word	0x20008f68
 800f318:	20008f65 	.word	0x20008f65
 800f31c:	20008f60 	.word	0x20008f60
 800f320:	20008f64 	.word	0x20008f64
 800f324:	20008f62 	.word	0x20008f62
 800f328:	20008f6c 	.word	0x20008f6c
 800f32c:	20008f2c 	.word	0x20008f2c
 800f330:	08018470 	.word	0x08018470
 800f334:	08018624 	.word	0x08018624
 800f338:	080184bc 	.word	0x080184bc
          goto aborted;
 800f33c:	bf00      	nop
    tcp_input_pcb = NULL;
 800f33e:	4b27      	ldr	r3, [pc, #156]	; (800f3dc <tcp_input+0x7f4>)
 800f340:	2200      	movs	r2, #0
 800f342:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f344:	4b26      	ldr	r3, [pc, #152]	; (800f3e0 <tcp_input+0x7f8>)
 800f346:	2200      	movs	r2, #0
 800f348:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f34a:	4b26      	ldr	r3, [pc, #152]	; (800f3e4 <tcp_input+0x7fc>)
 800f34c:	685b      	ldr	r3, [r3, #4]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d03f      	beq.n	800f3d2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f352:	4b24      	ldr	r3, [pc, #144]	; (800f3e4 <tcp_input+0x7fc>)
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	4618      	mov	r0, r3
 800f358:	f7fd fd7c 	bl	800ce54 <pbuf_free>
      inseg.p = NULL;
 800f35c:	4b21      	ldr	r3, [pc, #132]	; (800f3e4 <tcp_input+0x7fc>)
 800f35e:	2200      	movs	r2, #0
 800f360:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f362:	e036      	b.n	800f3d2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f364:	4b20      	ldr	r3, [pc, #128]	; (800f3e8 <tcp_input+0x800>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	899b      	ldrh	r3, [r3, #12]
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7fc fa13 	bl	800b798 <lwip_htons>
 800f372:	4603      	mov	r3, r0
 800f374:	b2db      	uxtb	r3, r3
 800f376:	f003 0304 	and.w	r3, r3, #4
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d118      	bne.n	800f3b0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f37e:	4b1b      	ldr	r3, [pc, #108]	; (800f3ec <tcp_input+0x804>)
 800f380:	6819      	ldr	r1, [r3, #0]
 800f382:	4b1b      	ldr	r3, [pc, #108]	; (800f3f0 <tcp_input+0x808>)
 800f384:	881b      	ldrh	r3, [r3, #0]
 800f386:	461a      	mov	r2, r3
 800f388:	4b1a      	ldr	r3, [pc, #104]	; (800f3f4 <tcp_input+0x80c>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f38e:	4b16      	ldr	r3, [pc, #88]	; (800f3e8 <tcp_input+0x800>)
 800f390:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f392:	885b      	ldrh	r3, [r3, #2]
 800f394:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f396:	4a14      	ldr	r2, [pc, #80]	; (800f3e8 <tcp_input+0x800>)
 800f398:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f39a:	8812      	ldrh	r2, [r2, #0]
 800f39c:	b292      	uxth	r2, r2
 800f39e:	9202      	str	r2, [sp, #8]
 800f3a0:	9301      	str	r3, [sp, #4]
 800f3a2:	4b15      	ldr	r3, [pc, #84]	; (800f3f8 <tcp_input+0x810>)
 800f3a4:	9300      	str	r3, [sp, #0]
 800f3a6:	4b15      	ldr	r3, [pc, #84]	; (800f3fc <tcp_input+0x814>)
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	2000      	movs	r0, #0
 800f3ac:	f003 f81c 	bl	80123e8 <tcp_rst>
    pbuf_free(p);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f7fd fd4f 	bl	800ce54 <pbuf_free>
  return;
 800f3b6:	e00c      	b.n	800f3d2 <tcp_input+0x7ea>
    goto dropped;
 800f3b8:	bf00      	nop
 800f3ba:	e006      	b.n	800f3ca <tcp_input+0x7e2>
    goto dropped;
 800f3bc:	bf00      	nop
 800f3be:	e004      	b.n	800f3ca <tcp_input+0x7e2>
    goto dropped;
 800f3c0:	bf00      	nop
 800f3c2:	e002      	b.n	800f3ca <tcp_input+0x7e2>
      goto dropped;
 800f3c4:	bf00      	nop
 800f3c6:	e000      	b.n	800f3ca <tcp_input+0x7e2>
      goto dropped;
 800f3c8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f7fd fd42 	bl	800ce54 <pbuf_free>
 800f3d0:	e000      	b.n	800f3d4 <tcp_input+0x7ec>
  return;
 800f3d2:	bf00      	nop
}
 800f3d4:	3724      	adds	r7, #36	; 0x24
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd90      	pop	{r4, r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	20008f6c 	.word	0x20008f6c
 800f3e0:	20008f68 	.word	0x20008f68
 800f3e4:	20008f38 	.word	0x20008f38
 800f3e8:	20008f48 	.word	0x20008f48
 800f3ec:	20008f5c 	.word	0x20008f5c
 800f3f0:	20008f62 	.word	0x20008f62
 800f3f4:	20008f58 	.word	0x20008f58
 800f3f8:	200059c0 	.word	0x200059c0
 800f3fc:	200059c4 	.word	0x200059c4

0800f400 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b082      	sub	sp, #8
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d106      	bne.n	800f41c <tcp_input_delayed_close+0x1c>
 800f40e:	4b17      	ldr	r3, [pc, #92]	; (800f46c <tcp_input_delayed_close+0x6c>)
 800f410:	f240 225a 	movw	r2, #602	; 0x25a
 800f414:	4916      	ldr	r1, [pc, #88]	; (800f470 <tcp_input_delayed_close+0x70>)
 800f416:	4817      	ldr	r0, [pc, #92]	; (800f474 <tcp_input_delayed_close+0x74>)
 800f418:	f006 feb4 	bl	8016184 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f41c:	4b16      	ldr	r3, [pc, #88]	; (800f478 <tcp_input_delayed_close+0x78>)
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	f003 0310 	and.w	r3, r3, #16
 800f424:	2b00      	cmp	r3, #0
 800f426:	d01c      	beq.n	800f462 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	8b5b      	ldrh	r3, [r3, #26]
 800f42c:	f003 0310 	and.w	r3, r3, #16
 800f430:	2b00      	cmp	r3, #0
 800f432:	d10d      	bne.n	800f450 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d008      	beq.n	800f450 <tcp_input_delayed_close+0x50>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f444:	687a      	ldr	r2, [r7, #4]
 800f446:	6912      	ldr	r2, [r2, #16]
 800f448:	f06f 010e 	mvn.w	r1, #14
 800f44c:	4610      	mov	r0, r2
 800f44e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f450:	6879      	ldr	r1, [r7, #4]
 800f452:	480a      	ldr	r0, [pc, #40]	; (800f47c <tcp_input_delayed_close+0x7c>)
 800f454:	f7ff fa50 	bl	800e8f8 <tcp_pcb_remove>
    tcp_free(pcb);
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f7fe f83d 	bl	800d4d8 <tcp_free>
    return 1;
 800f45e:	2301      	movs	r3, #1
 800f460:	e000      	b.n	800f464 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f462:	2300      	movs	r3, #0
}
 800f464:	4618      	mov	r0, r3
 800f466:	3708      	adds	r7, #8
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	08018470 	.word	0x08018470
 800f470:	08018640 	.word	0x08018640
 800f474:	080184bc 	.word	0x080184bc
 800f478:	20008f65 	.word	0x20008f65
 800f47c:	20008f2c 	.word	0x20008f2c

0800f480 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f480:	b590      	push	{r4, r7, lr}
 800f482:	b08b      	sub	sp, #44	; 0x2c
 800f484:	af04      	add	r7, sp, #16
 800f486:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f488:	4b6f      	ldr	r3, [pc, #444]	; (800f648 <tcp_listen_input+0x1c8>)
 800f48a:	781b      	ldrb	r3, [r3, #0]
 800f48c:	f003 0304 	and.w	r3, r3, #4
 800f490:	2b00      	cmp	r3, #0
 800f492:	f040 80d2 	bne.w	800f63a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d106      	bne.n	800f4aa <tcp_listen_input+0x2a>
 800f49c:	4b6b      	ldr	r3, [pc, #428]	; (800f64c <tcp_listen_input+0x1cc>)
 800f49e:	f240 2281 	movw	r2, #641	; 0x281
 800f4a2:	496b      	ldr	r1, [pc, #428]	; (800f650 <tcp_listen_input+0x1d0>)
 800f4a4:	486b      	ldr	r0, [pc, #428]	; (800f654 <tcp_listen_input+0x1d4>)
 800f4a6:	f006 fe6d 	bl	8016184 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f4aa:	4b67      	ldr	r3, [pc, #412]	; (800f648 <tcp_listen_input+0x1c8>)
 800f4ac:	781b      	ldrb	r3, [r3, #0]
 800f4ae:	f003 0310 	and.w	r3, r3, #16
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d019      	beq.n	800f4ea <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4b6:	4b68      	ldr	r3, [pc, #416]	; (800f658 <tcp_listen_input+0x1d8>)
 800f4b8:	6819      	ldr	r1, [r3, #0]
 800f4ba:	4b68      	ldr	r3, [pc, #416]	; (800f65c <tcp_listen_input+0x1dc>)
 800f4bc:	881b      	ldrh	r3, [r3, #0]
 800f4be:	461a      	mov	r2, r3
 800f4c0:	4b67      	ldr	r3, [pc, #412]	; (800f660 <tcp_listen_input+0x1e0>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4c6:	4b67      	ldr	r3, [pc, #412]	; (800f664 <tcp_listen_input+0x1e4>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4ca:	885b      	ldrh	r3, [r3, #2]
 800f4cc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4ce:	4a65      	ldr	r2, [pc, #404]	; (800f664 <tcp_listen_input+0x1e4>)
 800f4d0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4d2:	8812      	ldrh	r2, [r2, #0]
 800f4d4:	b292      	uxth	r2, r2
 800f4d6:	9202      	str	r2, [sp, #8]
 800f4d8:	9301      	str	r3, [sp, #4]
 800f4da:	4b63      	ldr	r3, [pc, #396]	; (800f668 <tcp_listen_input+0x1e8>)
 800f4dc:	9300      	str	r3, [sp, #0]
 800f4de:	4b63      	ldr	r3, [pc, #396]	; (800f66c <tcp_listen_input+0x1ec>)
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f002 ff80 	bl	80123e8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f4e8:	e0a9      	b.n	800f63e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f4ea:	4b57      	ldr	r3, [pc, #348]	; (800f648 <tcp_listen_input+0x1c8>)
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	f003 0302 	and.w	r3, r3, #2
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	f000 80a3 	beq.w	800f63e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	7d5b      	ldrb	r3, [r3, #21]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7ff f927 	bl	800e750 <tcp_alloc>
 800f502:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d111      	bne.n	800f52e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	699b      	ldr	r3, [r3, #24]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d00a      	beq.n	800f528 <tcp_listen_input+0xa8>
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	699b      	ldr	r3, [r3, #24]
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	6910      	ldr	r0, [r2, #16]
 800f51a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f51e:	2100      	movs	r1, #0
 800f520:	4798      	blx	r3
 800f522:	4603      	mov	r3, r0
 800f524:	73bb      	strb	r3, [r7, #14]
      return;
 800f526:	e08b      	b.n	800f640 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f528:	23f0      	movs	r3, #240	; 0xf0
 800f52a:	73bb      	strb	r3, [r7, #14]
      return;
 800f52c:	e088      	b.n	800f640 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f52e:	4b50      	ldr	r3, [pc, #320]	; (800f670 <tcp_listen_input+0x1f0>)
 800f530:	695a      	ldr	r2, [r3, #20]
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f536:	4b4e      	ldr	r3, [pc, #312]	; (800f670 <tcp_listen_input+0x1f0>)
 800f538:	691a      	ldr	r2, [r3, #16]
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	8ada      	ldrh	r2, [r3, #22]
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f546:	4b47      	ldr	r3, [pc, #284]	; (800f664 <tcp_listen_input+0x1e4>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	881b      	ldrh	r3, [r3, #0]
 800f54c:	b29a      	uxth	r2, r3
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	2203      	movs	r2, #3
 800f556:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f558:	4b41      	ldr	r3, [pc, #260]	; (800f660 <tcp_listen_input+0x1e0>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	1c5a      	adds	r2, r3, #1
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f56a:	6978      	ldr	r0, [r7, #20]
 800f56c:	f7ff fa58 	bl	800ea20 <tcp_next_iss>
 800f570:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	693a      	ldr	r2, [r7, #16]
 800f576:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	693a      	ldr	r2, [r7, #16]
 800f57c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	693a      	ldr	r2, [r7, #16]
 800f582:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	693a      	ldr	r2, [r7, #16]
 800f588:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f58a:	4b35      	ldr	r3, [pc, #212]	; (800f660 <tcp_listen_input+0x1e0>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	1e5a      	subs	r2, r3, #1
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	691a      	ldr	r2, [r3, #16]
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	7a5b      	ldrb	r3, [r3, #9]
 800f5a6:	f003 030c 	and.w	r3, r3, #12
 800f5aa:	b2da      	uxtb	r2, r3
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	7a1a      	ldrb	r2, [r3, #8]
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f5b8:	4b2e      	ldr	r3, [pc, #184]	; (800f674 <tcp_listen_input+0x1f4>)
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	60da      	str	r2, [r3, #12]
 800f5c0:	4a2c      	ldr	r2, [pc, #176]	; (800f674 <tcp_listen_input+0x1f4>)
 800f5c2:	697b      	ldr	r3, [r7, #20]
 800f5c4:	6013      	str	r3, [r2, #0]
 800f5c6:	f003 f8d1 	bl	801276c <tcp_timer_needed>
 800f5ca:	4b2b      	ldr	r3, [pc, #172]	; (800f678 <tcp_listen_input+0x1f8>)
 800f5cc:	2201      	movs	r2, #1
 800f5ce:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f5d0:	6978      	ldr	r0, [r7, #20]
 800f5d2:	f001 fd8f 	bl	80110f4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f5d6:	4b23      	ldr	r3, [pc, #140]	; (800f664 <tcp_listen_input+0x1e4>)
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	89db      	ldrh	r3, [r3, #14]
 800f5dc:	b29a      	uxth	r2, r3
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f5e4:	697b      	ldr	r3, [r7, #20]
 800f5e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f5f4:	697b      	ldr	r3, [r7, #20]
 800f5f6:	3304      	adds	r3, #4
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	f005 f827 	bl	801464c <ip4_route>
 800f5fe:	4601      	mov	r1, r0
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	3304      	adds	r3, #4
 800f604:	461a      	mov	r2, r3
 800f606:	4620      	mov	r0, r4
 800f608:	f7ff fa30 	bl	800ea6c <tcp_eff_send_mss_netif>
 800f60c:	4603      	mov	r3, r0
 800f60e:	461a      	mov	r2, r3
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f614:	2112      	movs	r1, #18
 800f616:	6978      	ldr	r0, [r7, #20]
 800f618:	f002 f844 	bl	80116a4 <tcp_enqueue_flags>
 800f61c:	4603      	mov	r3, r0
 800f61e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d004      	beq.n	800f632 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f628:	2100      	movs	r1, #0
 800f62a:	6978      	ldr	r0, [r7, #20]
 800f62c:	f7fe f97e 	bl	800d92c <tcp_abandon>
      return;
 800f630:	e006      	b.n	800f640 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f632:	6978      	ldr	r0, [r7, #20]
 800f634:	f002 f924 	bl	8011880 <tcp_output>
  return;
 800f638:	e001      	b.n	800f63e <tcp_listen_input+0x1be>
    return;
 800f63a:	bf00      	nop
 800f63c:	e000      	b.n	800f640 <tcp_listen_input+0x1c0>
  return;
 800f63e:	bf00      	nop
}
 800f640:	371c      	adds	r7, #28
 800f642:	46bd      	mov	sp, r7
 800f644:	bd90      	pop	{r4, r7, pc}
 800f646:	bf00      	nop
 800f648:	20008f64 	.word	0x20008f64
 800f64c:	08018470 	.word	0x08018470
 800f650:	08018668 	.word	0x08018668
 800f654:	080184bc 	.word	0x080184bc
 800f658:	20008f5c 	.word	0x20008f5c
 800f65c:	20008f62 	.word	0x20008f62
 800f660:	20008f58 	.word	0x20008f58
 800f664:	20008f48 	.word	0x20008f48
 800f668:	200059c0 	.word	0x200059c0
 800f66c:	200059c4 	.word	0x200059c4
 800f670:	200059b0 	.word	0x200059b0
 800f674:	20008f2c 	.word	0x20008f2c
 800f678:	20008f34 	.word	0x20008f34

0800f67c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b086      	sub	sp, #24
 800f680:	af04      	add	r7, sp, #16
 800f682:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f684:	4b2f      	ldr	r3, [pc, #188]	; (800f744 <tcp_timewait_input+0xc8>)
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	f003 0304 	and.w	r3, r3, #4
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d153      	bne.n	800f738 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d106      	bne.n	800f6a4 <tcp_timewait_input+0x28>
 800f696:	4b2c      	ldr	r3, [pc, #176]	; (800f748 <tcp_timewait_input+0xcc>)
 800f698:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f69c:	492b      	ldr	r1, [pc, #172]	; (800f74c <tcp_timewait_input+0xd0>)
 800f69e:	482c      	ldr	r0, [pc, #176]	; (800f750 <tcp_timewait_input+0xd4>)
 800f6a0:	f006 fd70 	bl	8016184 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f6a4:	4b27      	ldr	r3, [pc, #156]	; (800f744 <tcp_timewait_input+0xc8>)
 800f6a6:	781b      	ldrb	r3, [r3, #0]
 800f6a8:	f003 0302 	and.w	r3, r3, #2
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d02a      	beq.n	800f706 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f6b0:	4b28      	ldr	r3, [pc, #160]	; (800f754 <tcp_timewait_input+0xd8>)
 800f6b2:	681a      	ldr	r2, [r3, #0]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b8:	1ad3      	subs	r3, r2, r3
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	db2d      	blt.n	800f71a <tcp_timewait_input+0x9e>
 800f6be:	4b25      	ldr	r3, [pc, #148]	; (800f754 <tcp_timewait_input+0xd8>)
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c6:	6879      	ldr	r1, [r7, #4]
 800f6c8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6ca:	440b      	add	r3, r1
 800f6cc:	1ad3      	subs	r3, r2, r3
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	dc23      	bgt.n	800f71a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6d2:	4b21      	ldr	r3, [pc, #132]	; (800f758 <tcp_timewait_input+0xdc>)
 800f6d4:	6819      	ldr	r1, [r3, #0]
 800f6d6:	4b21      	ldr	r3, [pc, #132]	; (800f75c <tcp_timewait_input+0xe0>)
 800f6d8:	881b      	ldrh	r3, [r3, #0]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	4b1d      	ldr	r3, [pc, #116]	; (800f754 <tcp_timewait_input+0xd8>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f6e2:	4b1f      	ldr	r3, [pc, #124]	; (800f760 <tcp_timewait_input+0xe4>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6e6:	885b      	ldrh	r3, [r3, #2]
 800f6e8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f6ea:	4a1d      	ldr	r2, [pc, #116]	; (800f760 <tcp_timewait_input+0xe4>)
 800f6ec:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6ee:	8812      	ldrh	r2, [r2, #0]
 800f6f0:	b292      	uxth	r2, r2
 800f6f2:	9202      	str	r2, [sp, #8]
 800f6f4:	9301      	str	r3, [sp, #4]
 800f6f6:	4b1b      	ldr	r3, [pc, #108]	; (800f764 <tcp_timewait_input+0xe8>)
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	4b1b      	ldr	r3, [pc, #108]	; (800f768 <tcp_timewait_input+0xec>)
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f002 fe72 	bl	80123e8 <tcp_rst>
      return;
 800f704:	e01b      	b.n	800f73e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f706:	4b0f      	ldr	r3, [pc, #60]	; (800f744 <tcp_timewait_input+0xc8>)
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	f003 0301 	and.w	r3, r3, #1
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d003      	beq.n	800f71a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f712:	4b16      	ldr	r3, [pc, #88]	; (800f76c <tcp_timewait_input+0xf0>)
 800f714:	681a      	ldr	r2, [r3, #0]
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f71a:	4b10      	ldr	r3, [pc, #64]	; (800f75c <tcp_timewait_input+0xe0>)
 800f71c:	881b      	ldrh	r3, [r3, #0]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d00c      	beq.n	800f73c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	8b5b      	ldrh	r3, [r3, #26]
 800f726:	f043 0302 	orr.w	r3, r3, #2
 800f72a:	b29a      	uxth	r2, r3
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f002 f8a5 	bl	8011880 <tcp_output>
  }
  return;
 800f736:	e001      	b.n	800f73c <tcp_timewait_input+0xc0>
    return;
 800f738:	bf00      	nop
 800f73a:	e000      	b.n	800f73e <tcp_timewait_input+0xc2>
  return;
 800f73c:	bf00      	nop
}
 800f73e:	3708      	adds	r7, #8
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}
 800f744:	20008f64 	.word	0x20008f64
 800f748:	08018470 	.word	0x08018470
 800f74c:	08018688 	.word	0x08018688
 800f750:	080184bc 	.word	0x080184bc
 800f754:	20008f58 	.word	0x20008f58
 800f758:	20008f5c 	.word	0x20008f5c
 800f75c:	20008f62 	.word	0x20008f62
 800f760:	20008f48 	.word	0x20008f48
 800f764:	200059c0 	.word	0x200059c0
 800f768:	200059c4 	.word	0x200059c4
 800f76c:	20008f20 	.word	0x20008f20

0800f770 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f770:	b590      	push	{r4, r7, lr}
 800f772:	b08d      	sub	sp, #52	; 0x34
 800f774:	af04      	add	r7, sp, #16
 800f776:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f778:	2300      	movs	r3, #0
 800f77a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f77c:	2300      	movs	r3, #0
 800f77e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d106      	bne.n	800f794 <tcp_process+0x24>
 800f786:	4b9d      	ldr	r3, [pc, #628]	; (800f9fc <tcp_process+0x28c>)
 800f788:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f78c:	499c      	ldr	r1, [pc, #624]	; (800fa00 <tcp_process+0x290>)
 800f78e:	489d      	ldr	r0, [pc, #628]	; (800fa04 <tcp_process+0x294>)
 800f790:	f006 fcf8 	bl	8016184 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f794:	4b9c      	ldr	r3, [pc, #624]	; (800fa08 <tcp_process+0x298>)
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	f003 0304 	and.w	r3, r3, #4
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d04e      	beq.n	800f83e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	7d1b      	ldrb	r3, [r3, #20]
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	d108      	bne.n	800f7ba <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f7ac:	4b97      	ldr	r3, [pc, #604]	; (800fa0c <tcp_process+0x29c>)
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d123      	bne.n	800f7fc <tcp_process+0x8c>
        acceptable = 1;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	76fb      	strb	r3, [r7, #27]
 800f7b8:	e020      	b.n	800f7fc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7be:	4b94      	ldr	r3, [pc, #592]	; (800fa10 <tcp_process+0x2a0>)
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d102      	bne.n	800f7cc <tcp_process+0x5c>
        acceptable = 1;
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	76fb      	strb	r3, [r7, #27]
 800f7ca:	e017      	b.n	800f7fc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f7cc:	4b90      	ldr	r3, [pc, #576]	; (800fa10 <tcp_process+0x2a0>)
 800f7ce:	681a      	ldr	r2, [r3, #0]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	db10      	blt.n	800f7fc <tcp_process+0x8c>
 800f7da:	4b8d      	ldr	r3, [pc, #564]	; (800fa10 <tcp_process+0x2a0>)
 800f7dc:	681a      	ldr	r2, [r3, #0]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7e2:	6879      	ldr	r1, [r7, #4]
 800f7e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f7e6:	440b      	add	r3, r1
 800f7e8:	1ad3      	subs	r3, r2, r3
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	dc06      	bgt.n	800f7fc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	8b5b      	ldrh	r3, [r3, #26]
 800f7f2:	f043 0302 	orr.w	r3, r3, #2
 800f7f6:	b29a      	uxth	r2, r3
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f7fc:	7efb      	ldrb	r3, [r7, #27]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d01b      	beq.n	800f83a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	7d1b      	ldrb	r3, [r3, #20]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d106      	bne.n	800f818 <tcp_process+0xa8>
 800f80a:	4b7c      	ldr	r3, [pc, #496]	; (800f9fc <tcp_process+0x28c>)
 800f80c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f810:	4980      	ldr	r1, [pc, #512]	; (800fa14 <tcp_process+0x2a4>)
 800f812:	487c      	ldr	r0, [pc, #496]	; (800fa04 <tcp_process+0x294>)
 800f814:	f006 fcb6 	bl	8016184 <iprintf>
      recv_flags |= TF_RESET;
 800f818:	4b7f      	ldr	r3, [pc, #508]	; (800fa18 <tcp_process+0x2a8>)
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	f043 0308 	orr.w	r3, r3, #8
 800f820:	b2da      	uxtb	r2, r3
 800f822:	4b7d      	ldr	r3, [pc, #500]	; (800fa18 <tcp_process+0x2a8>)
 800f824:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	8b5b      	ldrh	r3, [r3, #26]
 800f82a:	f023 0301 	bic.w	r3, r3, #1
 800f82e:	b29a      	uxth	r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f834:	f06f 030d 	mvn.w	r3, #13
 800f838:	e37a      	b.n	800ff30 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f83a:	2300      	movs	r3, #0
 800f83c:	e378      	b.n	800ff30 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f83e:	4b72      	ldr	r3, [pc, #456]	; (800fa08 <tcp_process+0x298>)
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	f003 0302 	and.w	r3, r3, #2
 800f846:	2b00      	cmp	r3, #0
 800f848:	d010      	beq.n	800f86c <tcp_process+0xfc>
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	7d1b      	ldrb	r3, [r3, #20]
 800f84e:	2b02      	cmp	r3, #2
 800f850:	d00c      	beq.n	800f86c <tcp_process+0xfc>
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	7d1b      	ldrb	r3, [r3, #20]
 800f856:	2b03      	cmp	r3, #3
 800f858:	d008      	beq.n	800f86c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	8b5b      	ldrh	r3, [r3, #26]
 800f85e:	f043 0302 	orr.w	r3, r3, #2
 800f862:	b29a      	uxth	r2, r3
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f868:	2300      	movs	r3, #0
 800f86a:	e361      	b.n	800ff30 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	8b5b      	ldrh	r3, [r3, #26]
 800f870:	f003 0310 	and.w	r3, r3, #16
 800f874:	2b00      	cmp	r3, #0
 800f876:	d103      	bne.n	800f880 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f878:	4b68      	ldr	r3, [pc, #416]	; (800fa1c <tcp_process+0x2ac>)
 800f87a:	681a      	ldr	r2, [r3, #0]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2200      	movs	r2, #0
 800f884:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2200      	movs	r2, #0
 800f88c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	f001 fc2f 	bl	80110f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	7d1b      	ldrb	r3, [r3, #20]
 800f89a:	3b02      	subs	r3, #2
 800f89c:	2b07      	cmp	r3, #7
 800f89e:	f200 8337 	bhi.w	800ff10 <tcp_process+0x7a0>
 800f8a2:	a201      	add	r2, pc, #4	; (adr r2, 800f8a8 <tcp_process+0x138>)
 800f8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a8:	0800f8c9 	.word	0x0800f8c9
 800f8ac:	0800faf9 	.word	0x0800faf9
 800f8b0:	0800fc71 	.word	0x0800fc71
 800f8b4:	0800fc9b 	.word	0x0800fc9b
 800f8b8:	0800fdbf 	.word	0x0800fdbf
 800f8bc:	0800fc71 	.word	0x0800fc71
 800f8c0:	0800fe4b 	.word	0x0800fe4b
 800f8c4:	0800fedb 	.word	0x0800fedb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f8c8:	4b4f      	ldr	r3, [pc, #316]	; (800fa08 <tcp_process+0x298>)
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	f003 0310 	and.w	r3, r3, #16
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	f000 80e4 	beq.w	800fa9e <tcp_process+0x32e>
 800f8d6:	4b4c      	ldr	r3, [pc, #304]	; (800fa08 <tcp_process+0x298>)
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	f003 0302 	and.w	r3, r3, #2
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f000 80dd 	beq.w	800fa9e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8e8:	1c5a      	adds	r2, r3, #1
 800f8ea:	4b48      	ldr	r3, [pc, #288]	; (800fa0c <tcp_process+0x29c>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	f040 80d5 	bne.w	800fa9e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f8f4:	4b46      	ldr	r3, [pc, #280]	; (800fa10 <tcp_process+0x2a0>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	1c5a      	adds	r2, r3, #1
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f906:	4b41      	ldr	r3, [pc, #260]	; (800fa0c <tcp_process+0x29c>)
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f90e:	4b44      	ldr	r3, [pc, #272]	; (800fa20 <tcp_process+0x2b0>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	89db      	ldrh	r3, [r3, #14]
 800f914:	b29a      	uxth	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f928:	4b39      	ldr	r3, [pc, #228]	; (800fa10 <tcp_process+0x2a0>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	1e5a      	subs	r2, r3, #1
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2204      	movs	r2, #4
 800f936:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	3304      	adds	r3, #4
 800f940:	4618      	mov	r0, r3
 800f942:	f004 fe83 	bl	801464c <ip4_route>
 800f946:	4601      	mov	r1, r0
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	3304      	adds	r3, #4
 800f94c:	461a      	mov	r2, r3
 800f94e:	4620      	mov	r0, r4
 800f950:	f7ff f88c 	bl	800ea6c <tcp_eff_send_mss_netif>
 800f954:	4603      	mov	r3, r0
 800f956:	461a      	mov	r2, r3
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f960:	009a      	lsls	r2, r3, #2
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f966:	005b      	lsls	r3, r3, #1
 800f968:	f241 111c 	movw	r1, #4380	; 0x111c
 800f96c:	428b      	cmp	r3, r1
 800f96e:	bf38      	it	cc
 800f970:	460b      	movcc	r3, r1
 800f972:	429a      	cmp	r2, r3
 800f974:	d204      	bcs.n	800f980 <tcp_process+0x210>
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f97a:	009b      	lsls	r3, r3, #2
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	e00d      	b.n	800f99c <tcp_process+0x22c>
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f984:	005b      	lsls	r3, r3, #1
 800f986:	f241 121c 	movw	r2, #4380	; 0x111c
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d904      	bls.n	800f998 <tcp_process+0x228>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f992:	005b      	lsls	r3, r3, #1
 800f994:	b29b      	uxth	r3, r3
 800f996:	e001      	b.n	800f99c <tcp_process+0x22c>
 800f998:	f241 131c 	movw	r3, #4380	; 0x111c
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d106      	bne.n	800f9ba <tcp_process+0x24a>
 800f9ac:	4b13      	ldr	r3, [pc, #76]	; (800f9fc <tcp_process+0x28c>)
 800f9ae:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f9b2:	491c      	ldr	r1, [pc, #112]	; (800fa24 <tcp_process+0x2b4>)
 800f9b4:	4813      	ldr	r0, [pc, #76]	; (800fa04 <tcp_process+0x294>)
 800f9b6:	f006 fbe5 	bl	8016184 <iprintf>
        --pcb->snd_queuelen;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9c0:	3b01      	subs	r3, #1
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ce:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d12a      	bne.n	800fa2c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9da:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f9dc:	69fb      	ldr	r3, [r7, #28]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d106      	bne.n	800f9f0 <tcp_process+0x280>
 800f9e2:	4b06      	ldr	r3, [pc, #24]	; (800f9fc <tcp_process+0x28c>)
 800f9e4:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f9e8:	490f      	ldr	r1, [pc, #60]	; (800fa28 <tcp_process+0x2b8>)
 800f9ea:	4806      	ldr	r0, [pc, #24]	; (800fa04 <tcp_process+0x294>)
 800f9ec:	f006 fbca 	bl	8016184 <iprintf>
          pcb->unsent = rseg->next;
 800f9f0:	69fb      	ldr	r3, [r7, #28]
 800f9f2:	681a      	ldr	r2, [r3, #0]
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	66da      	str	r2, [r3, #108]	; 0x6c
 800f9f8:	e01c      	b.n	800fa34 <tcp_process+0x2c4>
 800f9fa:	bf00      	nop
 800f9fc:	08018470 	.word	0x08018470
 800fa00:	080186a8 	.word	0x080186a8
 800fa04:	080184bc 	.word	0x080184bc
 800fa08:	20008f64 	.word	0x20008f64
 800fa0c:	20008f5c 	.word	0x20008f5c
 800fa10:	20008f58 	.word	0x20008f58
 800fa14:	080186c4 	.word	0x080186c4
 800fa18:	20008f65 	.word	0x20008f65
 800fa1c:	20008f20 	.word	0x20008f20
 800fa20:	20008f48 	.word	0x20008f48
 800fa24:	080186e4 	.word	0x080186e4
 800fa28:	080186fc 	.word	0x080186fc
        } else {
          pcb->unacked = rseg->next;
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	681a      	ldr	r2, [r3, #0]
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fa34:	69f8      	ldr	r0, [r7, #28]
 800fa36:	f7fe fd22 	bl	800e47e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d104      	bne.n	800fa4c <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa48:	861a      	strh	r2, [r3, #48]	; 0x30
 800fa4a:	e006      	b.n	800fa5a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d00a      	beq.n	800fa7a <tcp_process+0x30a>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa6a:	687a      	ldr	r2, [r7, #4]
 800fa6c:	6910      	ldr	r0, [r2, #16]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	6879      	ldr	r1, [r7, #4]
 800fa72:	4798      	blx	r3
 800fa74:	4603      	mov	r3, r0
 800fa76:	76bb      	strb	r3, [r7, #26]
 800fa78:	e001      	b.n	800fa7e <tcp_process+0x30e>
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fa7e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa82:	f113 0f0d 	cmn.w	r3, #13
 800fa86:	d102      	bne.n	800fa8e <tcp_process+0x31e>
          return ERR_ABRT;
 800fa88:	f06f 030c 	mvn.w	r3, #12
 800fa8c:	e250      	b.n	800ff30 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	8b5b      	ldrh	r3, [r3, #26]
 800fa92:	f043 0302 	orr.w	r3, r3, #2
 800fa96:	b29a      	uxth	r2, r3
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fa9c:	e23a      	b.n	800ff14 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fa9e:	4b98      	ldr	r3, [pc, #608]	; (800fd00 <tcp_process+0x590>)
 800faa0:	781b      	ldrb	r3, [r3, #0]
 800faa2:	f003 0310 	and.w	r3, r3, #16
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	f000 8234 	beq.w	800ff14 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faac:	4b95      	ldr	r3, [pc, #596]	; (800fd04 <tcp_process+0x594>)
 800faae:	6819      	ldr	r1, [r3, #0]
 800fab0:	4b95      	ldr	r3, [pc, #596]	; (800fd08 <tcp_process+0x598>)
 800fab2:	881b      	ldrh	r3, [r3, #0]
 800fab4:	461a      	mov	r2, r3
 800fab6:	4b95      	ldr	r3, [pc, #596]	; (800fd0c <tcp_process+0x59c>)
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fabc:	4b94      	ldr	r3, [pc, #592]	; (800fd10 <tcp_process+0x5a0>)
 800fabe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fac0:	885b      	ldrh	r3, [r3, #2]
 800fac2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fac4:	4a92      	ldr	r2, [pc, #584]	; (800fd10 <tcp_process+0x5a0>)
 800fac6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fac8:	8812      	ldrh	r2, [r2, #0]
 800faca:	b292      	uxth	r2, r2
 800facc:	9202      	str	r2, [sp, #8]
 800face:	9301      	str	r3, [sp, #4]
 800fad0:	4b90      	ldr	r3, [pc, #576]	; (800fd14 <tcp_process+0x5a4>)
 800fad2:	9300      	str	r3, [sp, #0]
 800fad4:	4b90      	ldr	r3, [pc, #576]	; (800fd18 <tcp_process+0x5a8>)
 800fad6:	4602      	mov	r2, r0
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f002 fc85 	bl	80123e8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fae4:	2b05      	cmp	r3, #5
 800fae6:	f200 8215 	bhi.w	800ff14 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2200      	movs	r2, #0
 800faee:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f002 fa4f 	bl	8011f94 <tcp_rexmit_rto>
      break;
 800faf6:	e20d      	b.n	800ff14 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800faf8:	4b81      	ldr	r3, [pc, #516]	; (800fd00 <tcp_process+0x590>)
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	f003 0310 	and.w	r3, r3, #16
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	f000 80a1 	beq.w	800fc48 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fb06:	4b7f      	ldr	r3, [pc, #508]	; (800fd04 <tcp_process+0x594>)
 800fb08:	681a      	ldr	r2, [r3, #0]
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb0e:	1ad3      	subs	r3, r2, r3
 800fb10:	3b01      	subs	r3, #1
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	db7e      	blt.n	800fc14 <tcp_process+0x4a4>
 800fb16:	4b7b      	ldr	r3, [pc, #492]	; (800fd04 <tcp_process+0x594>)
 800fb18:	681a      	ldr	r2, [r3, #0]
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb1e:	1ad3      	subs	r3, r2, r3
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	dc77      	bgt.n	800fc14 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2204      	movs	r2, #4
 800fb28:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d102      	bne.n	800fb38 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fb32:	23fa      	movs	r3, #250	; 0xfa
 800fb34:	76bb      	strb	r3, [r7, #26]
 800fb36:	e01d      	b.n	800fb74 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb3c:	699b      	ldr	r3, [r3, #24]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d106      	bne.n	800fb50 <tcp_process+0x3e0>
 800fb42:	4b76      	ldr	r3, [pc, #472]	; (800fd1c <tcp_process+0x5ac>)
 800fb44:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fb48:	4975      	ldr	r1, [pc, #468]	; (800fd20 <tcp_process+0x5b0>)
 800fb4a:	4876      	ldr	r0, [pc, #472]	; (800fd24 <tcp_process+0x5b4>)
 800fb4c:	f006 fb1a 	bl	8016184 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb54:	699b      	ldr	r3, [r3, #24]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d00a      	beq.n	800fb70 <tcp_process+0x400>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb5e:	699b      	ldr	r3, [r3, #24]
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	6910      	ldr	r0, [r2, #16]
 800fb64:	2200      	movs	r2, #0
 800fb66:	6879      	ldr	r1, [r7, #4]
 800fb68:	4798      	blx	r3
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	76bb      	strb	r3, [r7, #26]
 800fb6e:	e001      	b.n	800fb74 <tcp_process+0x404>
 800fb70:	23f0      	movs	r3, #240	; 0xf0
 800fb72:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fb74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00a      	beq.n	800fb92 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fb7c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb80:	f113 0f0d 	cmn.w	r3, #13
 800fb84:	d002      	beq.n	800fb8c <tcp_process+0x41c>
              tcp_abort(pcb);
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7fd ff8e 	bl	800daa8 <tcp_abort>
            }
            return ERR_ABRT;
 800fb8c:	f06f 030c 	mvn.w	r3, #12
 800fb90:	e1ce      	b.n	800ff30 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fb92:	6878      	ldr	r0, [r7, #4]
 800fb94:	f000 fae0 	bl	8010158 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fb98:	4b63      	ldr	r3, [pc, #396]	; (800fd28 <tcp_process+0x5b8>)
 800fb9a:	881b      	ldrh	r3, [r3, #0]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d005      	beq.n	800fbac <tcp_process+0x43c>
            recv_acked--;
 800fba0:	4b61      	ldr	r3, [pc, #388]	; (800fd28 <tcp_process+0x5b8>)
 800fba2:	881b      	ldrh	r3, [r3, #0]
 800fba4:	3b01      	subs	r3, #1
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	4b5f      	ldr	r3, [pc, #380]	; (800fd28 <tcp_process+0x5b8>)
 800fbaa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbb0:	009a      	lsls	r2, r3, #2
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbb6:	005b      	lsls	r3, r3, #1
 800fbb8:	f241 111c 	movw	r1, #4380	; 0x111c
 800fbbc:	428b      	cmp	r3, r1
 800fbbe:	bf38      	it	cc
 800fbc0:	460b      	movcc	r3, r1
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d204      	bcs.n	800fbd0 <tcp_process+0x460>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	e00d      	b.n	800fbec <tcp_process+0x47c>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbd4:	005b      	lsls	r3, r3, #1
 800fbd6:	f241 121c 	movw	r2, #4380	; 0x111c
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d904      	bls.n	800fbe8 <tcp_process+0x478>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbe2:	005b      	lsls	r3, r3, #1
 800fbe4:	b29b      	uxth	r3, r3
 800fbe6:	e001      	b.n	800fbec <tcp_process+0x47c>
 800fbe8:	f241 131c 	movw	r3, #4380	; 0x111c
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fbf2:	4b4e      	ldr	r3, [pc, #312]	; (800fd2c <tcp_process+0x5bc>)
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	f003 0320 	and.w	r3, r3, #32
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d037      	beq.n	800fc6e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	8b5b      	ldrh	r3, [r3, #26]
 800fc02:	f043 0302 	orr.w	r3, r3, #2
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2207      	movs	r2, #7
 800fc10:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fc12:	e02c      	b.n	800fc6e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc14:	4b3b      	ldr	r3, [pc, #236]	; (800fd04 <tcp_process+0x594>)
 800fc16:	6819      	ldr	r1, [r3, #0]
 800fc18:	4b3b      	ldr	r3, [pc, #236]	; (800fd08 <tcp_process+0x598>)
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	461a      	mov	r2, r3
 800fc1e:	4b3b      	ldr	r3, [pc, #236]	; (800fd0c <tcp_process+0x59c>)
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc24:	4b3a      	ldr	r3, [pc, #232]	; (800fd10 <tcp_process+0x5a0>)
 800fc26:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc28:	885b      	ldrh	r3, [r3, #2]
 800fc2a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc2c:	4a38      	ldr	r2, [pc, #224]	; (800fd10 <tcp_process+0x5a0>)
 800fc2e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc30:	8812      	ldrh	r2, [r2, #0]
 800fc32:	b292      	uxth	r2, r2
 800fc34:	9202      	str	r2, [sp, #8]
 800fc36:	9301      	str	r3, [sp, #4]
 800fc38:	4b36      	ldr	r3, [pc, #216]	; (800fd14 <tcp_process+0x5a4>)
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	4b36      	ldr	r3, [pc, #216]	; (800fd18 <tcp_process+0x5a8>)
 800fc3e:	4602      	mov	r2, r0
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f002 fbd1 	bl	80123e8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fc46:	e167      	b.n	800ff18 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fc48:	4b2d      	ldr	r3, [pc, #180]	; (800fd00 <tcp_process+0x590>)
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	f003 0302 	and.w	r3, r3, #2
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	f000 8161 	beq.w	800ff18 <tcp_process+0x7a8>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5a:	1e5a      	subs	r2, r3, #1
 800fc5c:	4b2b      	ldr	r3, [pc, #172]	; (800fd0c <tcp_process+0x59c>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	f040 8159 	bne.w	800ff18 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f002 f9b6 	bl	8011fd8 <tcp_rexmit>
      break;
 800fc6c:	e154      	b.n	800ff18 <tcp_process+0x7a8>
 800fc6e:	e153      	b.n	800ff18 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 fa71 	bl	8010158 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fc76:	4b2d      	ldr	r3, [pc, #180]	; (800fd2c <tcp_process+0x5bc>)
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	f003 0320 	and.w	r3, r3, #32
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	f000 814c 	beq.w	800ff1c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	8b5b      	ldrh	r3, [r3, #26]
 800fc88:	f043 0302 	orr.w	r3, r3, #2
 800fc8c:	b29a      	uxth	r2, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2207      	movs	r2, #7
 800fc96:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fc98:	e140      	b.n	800ff1c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 fa5c 	bl	8010158 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fca0:	4b22      	ldr	r3, [pc, #136]	; (800fd2c <tcp_process+0x5bc>)
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	f003 0320 	and.w	r3, r3, #32
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d071      	beq.n	800fd90 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fcac:	4b14      	ldr	r3, [pc, #80]	; (800fd00 <tcp_process+0x590>)
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	f003 0310 	and.w	r3, r3, #16
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d060      	beq.n	800fd7a <tcp_process+0x60a>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fcbc:	4b11      	ldr	r3, [pc, #68]	; (800fd04 <tcp_process+0x594>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d15a      	bne.n	800fd7a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d156      	bne.n	800fd7a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	8b5b      	ldrh	r3, [r3, #26]
 800fcd0:	f043 0302 	orr.w	r3, r3, #2
 800fcd4:	b29a      	uxth	r2, r3
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f7fe fdbc 	bl	800e858 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fce0:	4b13      	ldr	r3, [pc, #76]	; (800fd30 <tcp_process+0x5c0>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d105      	bne.n	800fcf6 <tcp_process+0x586>
 800fcea:	4b11      	ldr	r3, [pc, #68]	; (800fd30 <tcp_process+0x5c0>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	4a0f      	ldr	r2, [pc, #60]	; (800fd30 <tcp_process+0x5c0>)
 800fcf2:	6013      	str	r3, [r2, #0]
 800fcf4:	e02e      	b.n	800fd54 <tcp_process+0x5e4>
 800fcf6:	4b0e      	ldr	r3, [pc, #56]	; (800fd30 <tcp_process+0x5c0>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	617b      	str	r3, [r7, #20]
 800fcfc:	e027      	b.n	800fd4e <tcp_process+0x5de>
 800fcfe:	bf00      	nop
 800fd00:	20008f64 	.word	0x20008f64
 800fd04:	20008f5c 	.word	0x20008f5c
 800fd08:	20008f62 	.word	0x20008f62
 800fd0c:	20008f58 	.word	0x20008f58
 800fd10:	20008f48 	.word	0x20008f48
 800fd14:	200059c0 	.word	0x200059c0
 800fd18:	200059c4 	.word	0x200059c4
 800fd1c:	08018470 	.word	0x08018470
 800fd20:	08018710 	.word	0x08018710
 800fd24:	080184bc 	.word	0x080184bc
 800fd28:	20008f60 	.word	0x20008f60
 800fd2c:	20008f65 	.word	0x20008f65
 800fd30:	20008f2c 	.word	0x20008f2c
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	68db      	ldr	r3, [r3, #12]
 800fd38:	687a      	ldr	r2, [r7, #4]
 800fd3a:	429a      	cmp	r2, r3
 800fd3c:	d104      	bne.n	800fd48 <tcp_process+0x5d8>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	68da      	ldr	r2, [r3, #12]
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	60da      	str	r2, [r3, #12]
 800fd46:	e005      	b.n	800fd54 <tcp_process+0x5e4>
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	68db      	ldr	r3, [r3, #12]
 800fd4c:	617b      	str	r3, [r7, #20]
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1ef      	bne.n	800fd34 <tcp_process+0x5c4>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2200      	movs	r2, #0
 800fd58:	60da      	str	r2, [r3, #12]
 800fd5a:	4b77      	ldr	r3, [pc, #476]	; (800ff38 <tcp_process+0x7c8>)
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	220a      	movs	r2, #10
 800fd64:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fd66:	4b75      	ldr	r3, [pc, #468]	; (800ff3c <tcp_process+0x7cc>)
 800fd68:	681a      	ldr	r2, [r3, #0]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	60da      	str	r2, [r3, #12]
 800fd6e:	4a73      	ldr	r2, [pc, #460]	; (800ff3c <tcp_process+0x7cc>)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6013      	str	r3, [r2, #0]
 800fd74:	f002 fcfa 	bl	801276c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fd78:	e0d2      	b.n	800ff20 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	8b5b      	ldrh	r3, [r3, #26]
 800fd7e:	f043 0302 	orr.w	r3, r3, #2
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2208      	movs	r2, #8
 800fd8c:	751a      	strb	r2, [r3, #20]
      break;
 800fd8e:	e0c7      	b.n	800ff20 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd90:	4b6b      	ldr	r3, [pc, #428]	; (800ff40 <tcp_process+0x7d0>)
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	f003 0310 	and.w	r3, r3, #16
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	f000 80c1 	beq.w	800ff20 <tcp_process+0x7b0>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fda2:	4b68      	ldr	r3, [pc, #416]	; (800ff44 <tcp_process+0x7d4>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	f040 80ba 	bne.w	800ff20 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	f040 80b5 	bne.w	800ff20 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2206      	movs	r2, #6
 800fdba:	751a      	strb	r2, [r3, #20]
      break;
 800fdbc:	e0b0      	b.n	800ff20 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fdbe:	6878      	ldr	r0, [r7, #4]
 800fdc0:	f000 f9ca 	bl	8010158 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fdc4:	4b60      	ldr	r3, [pc, #384]	; (800ff48 <tcp_process+0x7d8>)
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	f003 0320 	and.w	r3, r3, #32
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f000 80a9 	beq.w	800ff24 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	8b5b      	ldrh	r3, [r3, #26]
 800fdd6:	f043 0302 	orr.w	r3, r3, #2
 800fdda:	b29a      	uxth	r2, r3
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f7fe fd39 	bl	800e858 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fde6:	4b59      	ldr	r3, [pc, #356]	; (800ff4c <tcp_process+0x7dc>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	429a      	cmp	r2, r3
 800fdee:	d105      	bne.n	800fdfc <tcp_process+0x68c>
 800fdf0:	4b56      	ldr	r3, [pc, #344]	; (800ff4c <tcp_process+0x7dc>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	68db      	ldr	r3, [r3, #12]
 800fdf6:	4a55      	ldr	r2, [pc, #340]	; (800ff4c <tcp_process+0x7dc>)
 800fdf8:	6013      	str	r3, [r2, #0]
 800fdfa:	e013      	b.n	800fe24 <tcp_process+0x6b4>
 800fdfc:	4b53      	ldr	r3, [pc, #332]	; (800ff4c <tcp_process+0x7dc>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	613b      	str	r3, [r7, #16]
 800fe02:	e00c      	b.n	800fe1e <tcp_process+0x6ae>
 800fe04:	693b      	ldr	r3, [r7, #16]
 800fe06:	68db      	ldr	r3, [r3, #12]
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d104      	bne.n	800fe18 <tcp_process+0x6a8>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	68da      	ldr	r2, [r3, #12]
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	60da      	str	r2, [r3, #12]
 800fe16:	e005      	b.n	800fe24 <tcp_process+0x6b4>
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	68db      	ldr	r3, [r3, #12]
 800fe1c:	613b      	str	r3, [r7, #16]
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d1ef      	bne.n	800fe04 <tcp_process+0x694>
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2200      	movs	r2, #0
 800fe28:	60da      	str	r2, [r3, #12]
 800fe2a:	4b43      	ldr	r3, [pc, #268]	; (800ff38 <tcp_process+0x7c8>)
 800fe2c:	2201      	movs	r2, #1
 800fe2e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	220a      	movs	r2, #10
 800fe34:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fe36:	4b41      	ldr	r3, [pc, #260]	; (800ff3c <tcp_process+0x7cc>)
 800fe38:	681a      	ldr	r2, [r3, #0]
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	60da      	str	r2, [r3, #12]
 800fe3e:	4a3f      	ldr	r2, [pc, #252]	; (800ff3c <tcp_process+0x7cc>)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	6013      	str	r3, [r2, #0]
 800fe44:	f002 fc92 	bl	801276c <tcp_timer_needed>
      }
      break;
 800fe48:	e06c      	b.n	800ff24 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 f984 	bl	8010158 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fe50:	4b3b      	ldr	r3, [pc, #236]	; (800ff40 <tcp_process+0x7d0>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	f003 0310 	and.w	r3, r3, #16
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d065      	beq.n	800ff28 <tcp_process+0x7b8>
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe60:	4b38      	ldr	r3, [pc, #224]	; (800ff44 <tcp_process+0x7d4>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d15f      	bne.n	800ff28 <tcp_process+0x7b8>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d15b      	bne.n	800ff28 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f7fe fcf1 	bl	800e858 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fe76:	4b35      	ldr	r3, [pc, #212]	; (800ff4c <tcp_process+0x7dc>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	687a      	ldr	r2, [r7, #4]
 800fe7c:	429a      	cmp	r2, r3
 800fe7e:	d105      	bne.n	800fe8c <tcp_process+0x71c>
 800fe80:	4b32      	ldr	r3, [pc, #200]	; (800ff4c <tcp_process+0x7dc>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	4a31      	ldr	r2, [pc, #196]	; (800ff4c <tcp_process+0x7dc>)
 800fe88:	6013      	str	r3, [r2, #0]
 800fe8a:	e013      	b.n	800feb4 <tcp_process+0x744>
 800fe8c:	4b2f      	ldr	r3, [pc, #188]	; (800ff4c <tcp_process+0x7dc>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	60fb      	str	r3, [r7, #12]
 800fe92:	e00c      	b.n	800feae <tcp_process+0x73e>
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	68db      	ldr	r3, [r3, #12]
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d104      	bne.n	800fea8 <tcp_process+0x738>
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	68da      	ldr	r2, [r3, #12]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	60da      	str	r2, [r3, #12]
 800fea6:	e005      	b.n	800feb4 <tcp_process+0x744>
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	60fb      	str	r3, [r7, #12]
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d1ef      	bne.n	800fe94 <tcp_process+0x724>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	60da      	str	r2, [r3, #12]
 800feba:	4b1f      	ldr	r3, [pc, #124]	; (800ff38 <tcp_process+0x7c8>)
 800febc:	2201      	movs	r2, #1
 800febe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	220a      	movs	r2, #10
 800fec4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fec6:	4b1d      	ldr	r3, [pc, #116]	; (800ff3c <tcp_process+0x7cc>)
 800fec8:	681a      	ldr	r2, [r3, #0]
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	60da      	str	r2, [r3, #12]
 800fece:	4a1b      	ldr	r2, [pc, #108]	; (800ff3c <tcp_process+0x7cc>)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	6013      	str	r3, [r2, #0]
 800fed4:	f002 fc4a 	bl	801276c <tcp_timer_needed>
      }
      break;
 800fed8:	e026      	b.n	800ff28 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f000 f93c 	bl	8010158 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fee0:	4b17      	ldr	r3, [pc, #92]	; (800ff40 <tcp_process+0x7d0>)
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	f003 0310 	and.w	r3, r3, #16
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d01f      	beq.n	800ff2c <tcp_process+0x7bc>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fef0:	4b14      	ldr	r3, [pc, #80]	; (800ff44 <tcp_process+0x7d4>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d119      	bne.n	800ff2c <tcp_process+0x7bc>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d115      	bne.n	800ff2c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ff00:	4b11      	ldr	r3, [pc, #68]	; (800ff48 <tcp_process+0x7d8>)
 800ff02:	781b      	ldrb	r3, [r3, #0]
 800ff04:	f043 0310 	orr.w	r3, r3, #16
 800ff08:	b2da      	uxtb	r2, r3
 800ff0a:	4b0f      	ldr	r3, [pc, #60]	; (800ff48 <tcp_process+0x7d8>)
 800ff0c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ff0e:	e00d      	b.n	800ff2c <tcp_process+0x7bc>
    default:
      break;
 800ff10:	bf00      	nop
 800ff12:	e00c      	b.n	800ff2e <tcp_process+0x7be>
      break;
 800ff14:	bf00      	nop
 800ff16:	e00a      	b.n	800ff2e <tcp_process+0x7be>
      break;
 800ff18:	bf00      	nop
 800ff1a:	e008      	b.n	800ff2e <tcp_process+0x7be>
      break;
 800ff1c:	bf00      	nop
 800ff1e:	e006      	b.n	800ff2e <tcp_process+0x7be>
      break;
 800ff20:	bf00      	nop
 800ff22:	e004      	b.n	800ff2e <tcp_process+0x7be>
      break;
 800ff24:	bf00      	nop
 800ff26:	e002      	b.n	800ff2e <tcp_process+0x7be>
      break;
 800ff28:	bf00      	nop
 800ff2a:	e000      	b.n	800ff2e <tcp_process+0x7be>
      break;
 800ff2c:	bf00      	nop
  }
  return ERR_OK;
 800ff2e:	2300      	movs	r3, #0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3724      	adds	r7, #36	; 0x24
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd90      	pop	{r4, r7, pc}
 800ff38:	20008f34 	.word	0x20008f34
 800ff3c:	20008f30 	.word	0x20008f30
 800ff40:	20008f64 	.word	0x20008f64
 800ff44:	20008f5c 	.word	0x20008f5c
 800ff48:	20008f65 	.word	0x20008f65
 800ff4c:	20008f2c 	.word	0x20008f2c

0800ff50 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ff50:	b590      	push	{r4, r7, lr}
 800ff52:	b085      	sub	sp, #20
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d106      	bne.n	800ff6e <tcp_oos_insert_segment+0x1e>
 800ff60:	4b3b      	ldr	r3, [pc, #236]	; (8010050 <tcp_oos_insert_segment+0x100>)
 800ff62:	f240 421f 	movw	r2, #1055	; 0x41f
 800ff66:	493b      	ldr	r1, [pc, #236]	; (8010054 <tcp_oos_insert_segment+0x104>)
 800ff68:	483b      	ldr	r0, [pc, #236]	; (8010058 <tcp_oos_insert_segment+0x108>)
 800ff6a:	f006 f90b 	bl	8016184 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	899b      	ldrh	r3, [r3, #12]
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	4618      	mov	r0, r3
 800ff78:	f7fb fc0e 	bl	800b798 <lwip_htons>
 800ff7c:	4603      	mov	r3, r0
 800ff7e:	b2db      	uxtb	r3, r3
 800ff80:	f003 0301 	and.w	r3, r3, #1
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d028      	beq.n	800ffda <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ff88:	6838      	ldr	r0, [r7, #0]
 800ff8a:	f7fe fa63 	bl	800e454 <tcp_segs_free>
    next = NULL;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	603b      	str	r3, [r7, #0]
 800ff92:	e056      	b.n	8010042 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	899b      	ldrh	r3, [r3, #12]
 800ff9a:	b29b      	uxth	r3, r3
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fb fbfb 	bl	800b798 <lwip_htons>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	b2db      	uxtb	r3, r3
 800ffa6:	f003 0301 	and.w	r3, r3, #1
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d00d      	beq.n	800ffca <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	899b      	ldrh	r3, [r3, #12]
 800ffb4:	b29c      	uxth	r4, r3
 800ffb6:	2001      	movs	r0, #1
 800ffb8:	f7fb fbee 	bl	800b798 <lwip_htons>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	4322      	orrs	r2, r4
 800ffc6:	b292      	uxth	r2, r2
 800ffc8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ffd4:	68f8      	ldr	r0, [r7, #12]
 800ffd6:	f7fe fa52 	bl	800e47e <tcp_seg_free>
    while (next &&
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d00e      	beq.n	800fffe <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	891b      	ldrh	r3, [r3, #8]
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	4b1d      	ldr	r3, [pc, #116]	; (801005c <tcp_oos_insert_segment+0x10c>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	441a      	add	r2, r3
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	68db      	ldr	r3, [r3, #12]
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	6839      	ldr	r1, [r7, #0]
 800fff4:	8909      	ldrh	r1, [r1, #8]
 800fff6:	440b      	add	r3, r1
 800fff8:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	daca      	bge.n	800ff94 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d01e      	beq.n	8010042 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	891b      	ldrh	r3, [r3, #8]
 8010008:	461a      	mov	r2, r3
 801000a:	4b14      	ldr	r3, [pc, #80]	; (801005c <tcp_oos_insert_segment+0x10c>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	441a      	add	r2, r3
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	68db      	ldr	r3, [r3, #12]
 8010014:	685b      	ldr	r3, [r3, #4]
 8010016:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010018:	2b00      	cmp	r3, #0
 801001a:	dd12      	ble.n	8010042 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	68db      	ldr	r3, [r3, #12]
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	b29a      	uxth	r2, r3
 8010024:	4b0d      	ldr	r3, [pc, #52]	; (801005c <tcp_oos_insert_segment+0x10c>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	b29b      	uxth	r3, r3
 801002a:	1ad3      	subs	r3, r2, r3
 801002c:	b29a      	uxth	r2, r3
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	685a      	ldr	r2, [r3, #4]
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	891b      	ldrh	r3, [r3, #8]
 801003a:	4619      	mov	r1, r3
 801003c:	4610      	mov	r0, r2
 801003e:	f7fc fd83 	bl	800cb48 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	683a      	ldr	r2, [r7, #0]
 8010046:	601a      	str	r2, [r3, #0]
}
 8010048:	bf00      	nop
 801004a:	3714      	adds	r7, #20
 801004c:	46bd      	mov	sp, r7
 801004e:	bd90      	pop	{r4, r7, pc}
 8010050:	08018470 	.word	0x08018470
 8010054:	08018730 	.word	0x08018730
 8010058:	080184bc 	.word	0x080184bc
 801005c:	20008f58 	.word	0x20008f58

08010060 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010060:	b5b0      	push	{r4, r5, r7, lr}
 8010062:	b086      	sub	sp, #24
 8010064:	af00      	add	r7, sp, #0
 8010066:	60f8      	str	r0, [r7, #12]
 8010068:	60b9      	str	r1, [r7, #8]
 801006a:	607a      	str	r2, [r7, #4]
 801006c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801006e:	e03e      	b.n	80100ee <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	4618      	mov	r0, r3
 8010080:	f7fc ff70 	bl	800cf64 <pbuf_clen>
 8010084:	4603      	mov	r3, r0
 8010086:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801008e:	8a7a      	ldrh	r2, [r7, #18]
 8010090:	429a      	cmp	r2, r3
 8010092:	d906      	bls.n	80100a2 <tcp_free_acked_segments+0x42>
 8010094:	4b2a      	ldr	r3, [pc, #168]	; (8010140 <tcp_free_acked_segments+0xe0>)
 8010096:	f240 4257 	movw	r2, #1111	; 0x457
 801009a:	492a      	ldr	r1, [pc, #168]	; (8010144 <tcp_free_acked_segments+0xe4>)
 801009c:	482a      	ldr	r0, [pc, #168]	; (8010148 <tcp_free_acked_segments+0xe8>)
 801009e:	f006 f871 	bl	8016184 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80100a8:	8a7b      	ldrh	r3, [r7, #18]
 80100aa:	1ad3      	subs	r3, r2, r3
 80100ac:	b29a      	uxth	r2, r3
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	891a      	ldrh	r2, [r3, #8]
 80100b8:	4b24      	ldr	r3, [pc, #144]	; (801014c <tcp_free_acked_segments+0xec>)
 80100ba:	881b      	ldrh	r3, [r3, #0]
 80100bc:	4413      	add	r3, r2
 80100be:	b29a      	uxth	r2, r3
 80100c0:	4b22      	ldr	r3, [pc, #136]	; (801014c <tcp_free_acked_segments+0xec>)
 80100c2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80100c4:	6978      	ldr	r0, [r7, #20]
 80100c6:	f7fe f9da 	bl	800e47e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d00c      	beq.n	80100ee <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d109      	bne.n	80100ee <tcp_free_acked_segments+0x8e>
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d106      	bne.n	80100ee <tcp_free_acked_segments+0x8e>
 80100e0:	4b17      	ldr	r3, [pc, #92]	; (8010140 <tcp_free_acked_segments+0xe0>)
 80100e2:	f240 4261 	movw	r2, #1121	; 0x461
 80100e6:	491a      	ldr	r1, [pc, #104]	; (8010150 <tcp_free_acked_segments+0xf0>)
 80100e8:	4817      	ldr	r0, [pc, #92]	; (8010148 <tcp_free_acked_segments+0xe8>)
 80100ea:	f006 f84b 	bl	8016184 <iprintf>
  while (seg_list != NULL &&
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d020      	beq.n	8010136 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7fb fb61 	bl	800b7c2 <lwip_htonl>
 8010100:	4604      	mov	r4, r0
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	891b      	ldrh	r3, [r3, #8]
 8010106:	461d      	mov	r5, r3
 8010108:	68bb      	ldr	r3, [r7, #8]
 801010a:	68db      	ldr	r3, [r3, #12]
 801010c:	899b      	ldrh	r3, [r3, #12]
 801010e:	b29b      	uxth	r3, r3
 8010110:	4618      	mov	r0, r3
 8010112:	f7fb fb41 	bl	800b798 <lwip_htons>
 8010116:	4603      	mov	r3, r0
 8010118:	b2db      	uxtb	r3, r3
 801011a:	f003 0303 	and.w	r3, r3, #3
 801011e:	2b00      	cmp	r3, #0
 8010120:	d001      	beq.n	8010126 <tcp_free_acked_segments+0xc6>
 8010122:	2301      	movs	r3, #1
 8010124:	e000      	b.n	8010128 <tcp_free_acked_segments+0xc8>
 8010126:	2300      	movs	r3, #0
 8010128:	442b      	add	r3, r5
 801012a:	18e2      	adds	r2, r4, r3
 801012c:	4b09      	ldr	r3, [pc, #36]	; (8010154 <tcp_free_acked_segments+0xf4>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010132:	2b00      	cmp	r3, #0
 8010134:	dd9c      	ble.n	8010070 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010136:	68bb      	ldr	r3, [r7, #8]
}
 8010138:	4618      	mov	r0, r3
 801013a:	3718      	adds	r7, #24
 801013c:	46bd      	mov	sp, r7
 801013e:	bdb0      	pop	{r4, r5, r7, pc}
 8010140:	08018470 	.word	0x08018470
 8010144:	08018758 	.word	0x08018758
 8010148:	080184bc 	.word	0x080184bc
 801014c:	20008f60 	.word	0x20008f60
 8010150:	08018780 	.word	0x08018780
 8010154:	20008f5c 	.word	0x20008f5c

08010158 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010158:	b5b0      	push	{r4, r5, r7, lr}
 801015a:	b094      	sub	sp, #80	; 0x50
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010160:	2300      	movs	r3, #0
 8010162:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d106      	bne.n	8010178 <tcp_receive+0x20>
 801016a:	4b91      	ldr	r3, [pc, #580]	; (80103b0 <tcp_receive+0x258>)
 801016c:	f240 427b 	movw	r2, #1147	; 0x47b
 8010170:	4990      	ldr	r1, [pc, #576]	; (80103b4 <tcp_receive+0x25c>)
 8010172:	4891      	ldr	r0, [pc, #580]	; (80103b8 <tcp_receive+0x260>)
 8010174:	f006 f806 	bl	8016184 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	7d1b      	ldrb	r3, [r3, #20]
 801017c:	2b03      	cmp	r3, #3
 801017e:	d806      	bhi.n	801018e <tcp_receive+0x36>
 8010180:	4b8b      	ldr	r3, [pc, #556]	; (80103b0 <tcp_receive+0x258>)
 8010182:	f240 427c 	movw	r2, #1148	; 0x47c
 8010186:	498d      	ldr	r1, [pc, #564]	; (80103bc <tcp_receive+0x264>)
 8010188:	488b      	ldr	r0, [pc, #556]	; (80103b8 <tcp_receive+0x260>)
 801018a:	f005 fffb 	bl	8016184 <iprintf>

  if (flags & TCP_ACK) {
 801018e:	4b8c      	ldr	r3, [pc, #560]	; (80103c0 <tcp_receive+0x268>)
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	f003 0310 	and.w	r3, r3, #16
 8010196:	2b00      	cmp	r3, #0
 8010198:	f000 8264 	beq.w	8010664 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101a2:	461a      	mov	r2, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101a8:	4413      	add	r3, r2
 80101aa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101b0:	4b84      	ldr	r3, [pc, #528]	; (80103c4 <tcp_receive+0x26c>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	1ad3      	subs	r3, r2, r3
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	db1b      	blt.n	80101f2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101be:	4b81      	ldr	r3, [pc, #516]	; (80103c4 <tcp_receive+0x26c>)
 80101c0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80101c2:	429a      	cmp	r2, r3
 80101c4:	d106      	bne.n	80101d4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80101ca:	4b7f      	ldr	r3, [pc, #508]	; (80103c8 <tcp_receive+0x270>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	1ad3      	subs	r3, r2, r3
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	db0e      	blt.n	80101f2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80101d8:	4b7b      	ldr	r3, [pc, #492]	; (80103c8 <tcp_receive+0x270>)
 80101da:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80101dc:	429a      	cmp	r2, r3
 80101de:	d125      	bne.n	801022c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80101e0:	4b7a      	ldr	r3, [pc, #488]	; (80103cc <tcp_receive+0x274>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	89db      	ldrh	r3, [r3, #14]
 80101e6:	b29a      	uxth	r2, r3
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d91c      	bls.n	801022c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80101f2:	4b76      	ldr	r3, [pc, #472]	; (80103cc <tcp_receive+0x274>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	89db      	ldrh	r3, [r3, #14]
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801020c:	429a      	cmp	r2, r3
 801020e:	d205      	bcs.n	801021c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801021c:	4b69      	ldr	r3, [pc, #420]	; (80103c4 <tcp_receive+0x26c>)
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010224:	4b68      	ldr	r3, [pc, #416]	; (80103c8 <tcp_receive+0x270>)
 8010226:	681a      	ldr	r2, [r3, #0]
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801022c:	4b66      	ldr	r3, [pc, #408]	; (80103c8 <tcp_receive+0x270>)
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	2b00      	cmp	r3, #0
 8010238:	dc58      	bgt.n	80102ec <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801023a:	4b65      	ldr	r3, [pc, #404]	; (80103d0 <tcp_receive+0x278>)
 801023c:	881b      	ldrh	r3, [r3, #0]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d14b      	bne.n	80102da <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801024c:	4413      	add	r3, r2
 801024e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010250:	429a      	cmp	r2, r3
 8010252:	d142      	bne.n	80102da <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801025a:	2b00      	cmp	r3, #0
 801025c:	db3d      	blt.n	80102da <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010262:	4b59      	ldr	r3, [pc, #356]	; (80103c8 <tcp_receive+0x270>)
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	429a      	cmp	r2, r3
 8010268:	d137      	bne.n	80102da <tcp_receive+0x182>
              found_dupack = 1;
 801026a:	2301      	movs	r3, #1
 801026c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010274:	2bff      	cmp	r3, #255	; 0xff
 8010276:	d007      	beq.n	8010288 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801027e:	3301      	adds	r3, #1
 8010280:	b2da      	uxtb	r2, r3
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801028e:	2b03      	cmp	r3, #3
 8010290:	d91b      	bls.n	80102ca <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801029c:	4413      	add	r3, r2
 801029e:	b29a      	uxth	r2, r3
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d30a      	bcc.n	80102c0 <tcp_receive+0x168>
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102b4:	4413      	add	r3, r2
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80102be:	e004      	b.n	80102ca <tcp_receive+0x172>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80102d0:	2b02      	cmp	r3, #2
 80102d2:	d902      	bls.n	80102da <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f001 feeb 	bl	80120b0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80102da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102dc:	2b00      	cmp	r3, #0
 80102de:	f040 8161 	bne.w	80105a4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80102ea:	e15b      	b.n	80105a4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80102ec:	4b36      	ldr	r3, [pc, #216]	; (80103c8 <tcp_receive+0x270>)
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102f4:	1ad3      	subs	r3, r2, r3
 80102f6:	3b01      	subs	r3, #1
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f2c0 814e 	blt.w	801059a <tcp_receive+0x442>
 80102fe:	4b32      	ldr	r3, [pc, #200]	; (80103c8 <tcp_receive+0x270>)
 8010300:	681a      	ldr	r2, [r3, #0]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010306:	1ad3      	subs	r3, r2, r3
 8010308:	2b00      	cmp	r3, #0
 801030a:	f300 8146 	bgt.w	801059a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	8b5b      	ldrh	r3, [r3, #26]
 8010312:	f003 0304 	and.w	r3, r3, #4
 8010316:	2b00      	cmp	r3, #0
 8010318:	d010      	beq.n	801033c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	8b5b      	ldrh	r3, [r3, #26]
 801031e:	f023 0304 	bic.w	r3, r3, #4
 8010322:	b29a      	uxth	r2, r3
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2200      	movs	r2, #0
 8010338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2200      	movs	r2, #0
 8010340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801034a:	10db      	asrs	r3, r3, #3
 801034c:	b21b      	sxth	r3, r3
 801034e:	b29a      	uxth	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010356:	b29b      	uxth	r3, r3
 8010358:	4413      	add	r3, r2
 801035a:	b29b      	uxth	r3, r3
 801035c:	b21a      	sxth	r2, r3
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010364:	4b18      	ldr	r3, [pc, #96]	; (80103c8 <tcp_receive+0x270>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	b29a      	uxth	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801036e:	b29b      	uxth	r3, r3
 8010370:	1ad3      	subs	r3, r2, r3
 8010372:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	2200      	movs	r2, #0
 8010378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801037c:	4b12      	ldr	r3, [pc, #72]	; (80103c8 <tcp_receive+0x270>)
 801037e:	681a      	ldr	r2, [r3, #0]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	7d1b      	ldrb	r3, [r3, #20]
 8010388:	2b03      	cmp	r3, #3
 801038a:	f240 8097 	bls.w	80104bc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801039a:	429a      	cmp	r2, r3
 801039c:	d245      	bcs.n	801042a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	8b5b      	ldrh	r3, [r3, #26]
 80103a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d014      	beq.n	80103d4 <tcp_receive+0x27c>
 80103aa:	2301      	movs	r3, #1
 80103ac:	e013      	b.n	80103d6 <tcp_receive+0x27e>
 80103ae:	bf00      	nop
 80103b0:	08018470 	.word	0x08018470
 80103b4:	080187a0 	.word	0x080187a0
 80103b8:	080184bc 	.word	0x080184bc
 80103bc:	080187bc 	.word	0x080187bc
 80103c0:	20008f64 	.word	0x20008f64
 80103c4:	20008f58 	.word	0x20008f58
 80103c8:	20008f5c 	.word	0x20008f5c
 80103cc:	20008f48 	.word	0x20008f48
 80103d0:	20008f62 	.word	0x20008f62
 80103d4:	2302      	movs	r3, #2
 80103d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80103da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80103de:	b29a      	uxth	r2, r3
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103e4:	fb12 f303 	smulbb	r3, r2, r3
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80103ec:	4293      	cmp	r3, r2
 80103ee:	bf28      	it	cs
 80103f0:	4613      	movcs	r3, r2
 80103f2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80103fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80103fc:	4413      	add	r3, r2
 80103fe:	b29a      	uxth	r2, r3
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010406:	429a      	cmp	r2, r3
 8010408:	d309      	bcc.n	801041e <tcp_receive+0x2c6>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010410:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010412:	4413      	add	r3, r2
 8010414:	b29a      	uxth	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801041c:	e04e      	b.n	80104bc <tcp_receive+0x364>
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010424:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010428:	e048      	b.n	80104bc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010430:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010432:	4413      	add	r3, r2
 8010434:	b29a      	uxth	r2, r3
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801043c:	429a      	cmp	r2, r3
 801043e:	d309      	bcc.n	8010454 <tcp_receive+0x2fc>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010446:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010448:	4413      	add	r3, r2
 801044a:	b29a      	uxth	r2, r3
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010452:	e004      	b.n	801045e <tcp_receive+0x306>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801045a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801046a:	429a      	cmp	r2, r3
 801046c:	d326      	bcc.n	80104bc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801047a:	1ad3      	subs	r3, r2, r3
 801047c:	b29a      	uxth	r2, r3
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801048e:	4413      	add	r3, r2
 8010490:	b29a      	uxth	r2, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010498:	429a      	cmp	r2, r3
 801049a:	d30a      	bcc.n	80104b2 <tcp_receive+0x35a>
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104a6:	4413      	add	r3, r2
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80104b0:	e004      	b.n	80104bc <tcp_receive+0x364>
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104c4:	4a98      	ldr	r2, [pc, #608]	; (8010728 <tcp_receive+0x5d0>)
 80104c6:	6878      	ldr	r0, [r7, #4]
 80104c8:	f7ff fdca 	bl	8010060 <tcp_free_acked_segments>
 80104cc:	4602      	mov	r2, r0
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104da:	4a94      	ldr	r2, [pc, #592]	; (801072c <tcp_receive+0x5d4>)
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f7ff fdbf 	bl	8010060 <tcp_free_acked_segments>
 80104e2:	4602      	mov	r2, r0
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d104      	bne.n	80104fa <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104f6:	861a      	strh	r2, [r3, #48]	; 0x30
 80104f8:	e002      	b.n	8010500 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2200      	movs	r2, #0
 80104fe:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2200      	movs	r2, #0
 8010504:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801050a:	2b00      	cmp	r3, #0
 801050c:	d103      	bne.n	8010516 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2200      	movs	r2, #0
 8010512:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801051c:	4b84      	ldr	r3, [pc, #528]	; (8010730 <tcp_receive+0x5d8>)
 801051e:	881b      	ldrh	r3, [r3, #0]
 8010520:	4413      	add	r3, r2
 8010522:	b29a      	uxth	r2, r3
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	8b5b      	ldrh	r3, [r3, #26]
 801052e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010532:	2b00      	cmp	r3, #0
 8010534:	d035      	beq.n	80105a2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801053a:	2b00      	cmp	r3, #0
 801053c:	d118      	bne.n	8010570 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010542:	2b00      	cmp	r3, #0
 8010544:	d00c      	beq.n	8010560 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801054e:	68db      	ldr	r3, [r3, #12]
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	4618      	mov	r0, r3
 8010554:	f7fb f935 	bl	800b7c2 <lwip_htonl>
 8010558:	4603      	mov	r3, r0
 801055a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801055c:	2b00      	cmp	r3, #0
 801055e:	dc20      	bgt.n	80105a2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	8b5b      	ldrh	r3, [r3, #26]
 8010564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010568:	b29a      	uxth	r2, r3
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801056e:	e018      	b.n	80105a2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010578:	68db      	ldr	r3, [r3, #12]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	4618      	mov	r0, r3
 801057e:	f7fb f920 	bl	800b7c2 <lwip_htonl>
 8010582:	4603      	mov	r3, r0
 8010584:	1ae3      	subs	r3, r4, r3
 8010586:	2b00      	cmp	r3, #0
 8010588:	dc0b      	bgt.n	80105a2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	8b5b      	ldrh	r3, [r3, #26]
 801058e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010592:	b29a      	uxth	r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010598:	e003      	b.n	80105a2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	f001 ff76 	bl	801248c <tcp_send_empty_ack>
 80105a0:	e000      	b.n	80105a4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80105a2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d05b      	beq.n	8010664 <tcp_receive+0x50c>
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80105b0:	4b60      	ldr	r3, [pc, #384]	; (8010734 <tcp_receive+0x5dc>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	1ad3      	subs	r3, r2, r3
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	da54      	bge.n	8010664 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80105ba:	4b5f      	ldr	r3, [pc, #380]	; (8010738 <tcp_receive+0x5e0>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	b29a      	uxth	r2, r3
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	1ad3      	subs	r3, r2, r3
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80105ce:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80105d8:	10db      	asrs	r3, r3, #3
 80105da:	b21b      	sxth	r3, r3
 80105dc:	b29b      	uxth	r3, r3
 80105de:	1ad3      	subs	r3, r2, r3
 80105e0:	b29b      	uxth	r3, r3
 80105e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80105ec:	b29a      	uxth	r2, r3
 80105ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80105f2:	4413      	add	r3, r2
 80105f4:	b29b      	uxth	r3, r3
 80105f6:	b21a      	sxth	r2, r3
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80105fc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010600:	2b00      	cmp	r3, #0
 8010602:	da05      	bge.n	8010610 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010604:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010608:	425b      	negs	r3, r3
 801060a:	b29b      	uxth	r3, r3
 801060c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010610:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801061a:	109b      	asrs	r3, r3, #2
 801061c:	b21b      	sxth	r3, r3
 801061e:	b29b      	uxth	r3, r3
 8010620:	1ad3      	subs	r3, r2, r3
 8010622:	b29b      	uxth	r3, r3
 8010624:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801062e:	b29a      	uxth	r2, r3
 8010630:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010634:	4413      	add	r3, r2
 8010636:	b29b      	uxth	r3, r3
 8010638:	b21a      	sxth	r2, r3
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010644:	10db      	asrs	r3, r3, #3
 8010646:	b21b      	sxth	r3, r3
 8010648:	b29a      	uxth	r2, r3
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010650:	b29b      	uxth	r3, r3
 8010652:	4413      	add	r3, r2
 8010654:	b29b      	uxth	r3, r3
 8010656:	b21a      	sxth	r2, r3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2200      	movs	r2, #0
 8010662:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010664:	4b35      	ldr	r3, [pc, #212]	; (801073c <tcp_receive+0x5e4>)
 8010666:	881b      	ldrh	r3, [r3, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	f000 84e2 	beq.w	8011032 <tcp_receive+0xeda>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	7d1b      	ldrb	r3, [r3, #20]
 8010672:	2b06      	cmp	r3, #6
 8010674:	f200 84dd 	bhi.w	8011032 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801067c:	4b30      	ldr	r3, [pc, #192]	; (8010740 <tcp_receive+0x5e8>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	1ad3      	subs	r3, r2, r3
 8010682:	3b01      	subs	r3, #1
 8010684:	2b00      	cmp	r3, #0
 8010686:	f2c0 808f 	blt.w	80107a8 <tcp_receive+0x650>
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801068e:	4b2b      	ldr	r3, [pc, #172]	; (801073c <tcp_receive+0x5e4>)
 8010690:	881b      	ldrh	r3, [r3, #0]
 8010692:	4619      	mov	r1, r3
 8010694:	4b2a      	ldr	r3, [pc, #168]	; (8010740 <tcp_receive+0x5e8>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	440b      	add	r3, r1
 801069a:	1ad3      	subs	r3, r2, r3
 801069c:	3301      	adds	r3, #1
 801069e:	2b00      	cmp	r3, #0
 80106a0:	f300 8082 	bgt.w	80107a8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80106a4:	4b27      	ldr	r3, [pc, #156]	; (8010744 <tcp_receive+0x5ec>)
 80106a6:	685b      	ldr	r3, [r3, #4]
 80106a8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106ae:	4b24      	ldr	r3, [pc, #144]	; (8010740 <tcp_receive+0x5e8>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	1ad3      	subs	r3, r2, r3
 80106b4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80106b6:	4b23      	ldr	r3, [pc, #140]	; (8010744 <tcp_receive+0x5ec>)
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d106      	bne.n	80106cc <tcp_receive+0x574>
 80106be:	4b22      	ldr	r3, [pc, #136]	; (8010748 <tcp_receive+0x5f0>)
 80106c0:	f240 5294 	movw	r2, #1428	; 0x594
 80106c4:	4921      	ldr	r1, [pc, #132]	; (801074c <tcp_receive+0x5f4>)
 80106c6:	4822      	ldr	r0, [pc, #136]	; (8010750 <tcp_receive+0x5f8>)
 80106c8:	f005 fd5c 	bl	8016184 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80106cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d906      	bls.n	80106e4 <tcp_receive+0x58c>
 80106d6:	4b1c      	ldr	r3, [pc, #112]	; (8010748 <tcp_receive+0x5f0>)
 80106d8:	f240 5295 	movw	r2, #1429	; 0x595
 80106dc:	491d      	ldr	r1, [pc, #116]	; (8010754 <tcp_receive+0x5fc>)
 80106de:	481c      	ldr	r0, [pc, #112]	; (8010750 <tcp_receive+0x5f8>)
 80106e0:	f005 fd50 	bl	8016184 <iprintf>
      off = (u16_t)off32;
 80106e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80106ea:	4b16      	ldr	r3, [pc, #88]	; (8010744 <tcp_receive+0x5ec>)
 80106ec:	685b      	ldr	r3, [r3, #4]
 80106ee:	891b      	ldrh	r3, [r3, #8]
 80106f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106f4:	429a      	cmp	r2, r3
 80106f6:	d906      	bls.n	8010706 <tcp_receive+0x5ae>
 80106f8:	4b13      	ldr	r3, [pc, #76]	; (8010748 <tcp_receive+0x5f0>)
 80106fa:	f240 5297 	movw	r2, #1431	; 0x597
 80106fe:	4916      	ldr	r1, [pc, #88]	; (8010758 <tcp_receive+0x600>)
 8010700:	4813      	ldr	r0, [pc, #76]	; (8010750 <tcp_receive+0x5f8>)
 8010702:	f005 fd3f 	bl	8016184 <iprintf>
      inseg.len -= off;
 8010706:	4b0f      	ldr	r3, [pc, #60]	; (8010744 <tcp_receive+0x5ec>)
 8010708:	891a      	ldrh	r2, [r3, #8]
 801070a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801070e:	1ad3      	subs	r3, r2, r3
 8010710:	b29a      	uxth	r2, r3
 8010712:	4b0c      	ldr	r3, [pc, #48]	; (8010744 <tcp_receive+0x5ec>)
 8010714:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010716:	4b0b      	ldr	r3, [pc, #44]	; (8010744 <tcp_receive+0x5ec>)
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	891a      	ldrh	r2, [r3, #8]
 801071c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010720:	1ad3      	subs	r3, r2, r3
 8010722:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010724:	e02a      	b.n	801077c <tcp_receive+0x624>
 8010726:	bf00      	nop
 8010728:	080187d8 	.word	0x080187d8
 801072c:	080187e0 	.word	0x080187e0
 8010730:	20008f60 	.word	0x20008f60
 8010734:	20008f5c 	.word	0x20008f5c
 8010738:	20008f20 	.word	0x20008f20
 801073c:	20008f62 	.word	0x20008f62
 8010740:	20008f58 	.word	0x20008f58
 8010744:	20008f38 	.word	0x20008f38
 8010748:	08018470 	.word	0x08018470
 801074c:	080187e8 	.word	0x080187e8
 8010750:	080184bc 	.word	0x080184bc
 8010754:	080187f8 	.word	0x080187f8
 8010758:	08018808 	.word	0x08018808
        off -= p->len;
 801075c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801075e:	895b      	ldrh	r3, [r3, #10]
 8010760:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010764:	1ad3      	subs	r3, r2, r3
 8010766:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801076a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801076c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801076e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010772:	2200      	movs	r2, #0
 8010774:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801077c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801077e:	895b      	ldrh	r3, [r3, #10]
 8010780:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010784:	429a      	cmp	r2, r3
 8010786:	d8e9      	bhi.n	801075c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010788:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801078c:	4619      	mov	r1, r3
 801078e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010790:	f7fc fada 	bl	800cd48 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010798:	4a91      	ldr	r2, [pc, #580]	; (80109e0 <tcp_receive+0x888>)
 801079a:	6013      	str	r3, [r2, #0]
 801079c:	4b91      	ldr	r3, [pc, #580]	; (80109e4 <tcp_receive+0x88c>)
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	4a8f      	ldr	r2, [pc, #572]	; (80109e0 <tcp_receive+0x888>)
 80107a2:	6812      	ldr	r2, [r2, #0]
 80107a4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80107a6:	e00d      	b.n	80107c4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80107a8:	4b8d      	ldr	r3, [pc, #564]	; (80109e0 <tcp_receive+0x888>)
 80107aa:	681a      	ldr	r2, [r3, #0]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107b0:	1ad3      	subs	r3, r2, r3
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	da06      	bge.n	80107c4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	8b5b      	ldrh	r3, [r3, #26]
 80107ba:	f043 0302 	orr.w	r3, r3, #2
 80107be:	b29a      	uxth	r2, r3
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80107c4:	4b86      	ldr	r3, [pc, #536]	; (80109e0 <tcp_receive+0x888>)
 80107c6:	681a      	ldr	r2, [r3, #0]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107cc:	1ad3      	subs	r3, r2, r3
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	f2c0 842a 	blt.w	8011028 <tcp_receive+0xed0>
 80107d4:	4b82      	ldr	r3, [pc, #520]	; (80109e0 <tcp_receive+0x888>)
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107dc:	6879      	ldr	r1, [r7, #4]
 80107de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107e0:	440b      	add	r3, r1
 80107e2:	1ad3      	subs	r3, r2, r3
 80107e4:	3301      	adds	r3, #1
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f300 841e 	bgt.w	8011028 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107f0:	4b7b      	ldr	r3, [pc, #492]	; (80109e0 <tcp_receive+0x888>)
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	f040 829a 	bne.w	8010d2e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80107fa:	4b7a      	ldr	r3, [pc, #488]	; (80109e4 <tcp_receive+0x88c>)
 80107fc:	891c      	ldrh	r4, [r3, #8]
 80107fe:	4b79      	ldr	r3, [pc, #484]	; (80109e4 <tcp_receive+0x88c>)
 8010800:	68db      	ldr	r3, [r3, #12]
 8010802:	899b      	ldrh	r3, [r3, #12]
 8010804:	b29b      	uxth	r3, r3
 8010806:	4618      	mov	r0, r3
 8010808:	f7fa ffc6 	bl	800b798 <lwip_htons>
 801080c:	4603      	mov	r3, r0
 801080e:	b2db      	uxtb	r3, r3
 8010810:	f003 0303 	and.w	r3, r3, #3
 8010814:	2b00      	cmp	r3, #0
 8010816:	d001      	beq.n	801081c <tcp_receive+0x6c4>
 8010818:	2301      	movs	r3, #1
 801081a:	e000      	b.n	801081e <tcp_receive+0x6c6>
 801081c:	2300      	movs	r3, #0
 801081e:	4423      	add	r3, r4
 8010820:	b29a      	uxth	r2, r3
 8010822:	4b71      	ldr	r3, [pc, #452]	; (80109e8 <tcp_receive+0x890>)
 8010824:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801082a:	4b6f      	ldr	r3, [pc, #444]	; (80109e8 <tcp_receive+0x890>)
 801082c:	881b      	ldrh	r3, [r3, #0]
 801082e:	429a      	cmp	r2, r3
 8010830:	d275      	bcs.n	801091e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010832:	4b6c      	ldr	r3, [pc, #432]	; (80109e4 <tcp_receive+0x88c>)
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	899b      	ldrh	r3, [r3, #12]
 8010838:	b29b      	uxth	r3, r3
 801083a:	4618      	mov	r0, r3
 801083c:	f7fa ffac 	bl	800b798 <lwip_htons>
 8010840:	4603      	mov	r3, r0
 8010842:	b2db      	uxtb	r3, r3
 8010844:	f003 0301 	and.w	r3, r3, #1
 8010848:	2b00      	cmp	r3, #0
 801084a:	d01f      	beq.n	801088c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801084c:	4b65      	ldr	r3, [pc, #404]	; (80109e4 <tcp_receive+0x88c>)
 801084e:	68db      	ldr	r3, [r3, #12]
 8010850:	899b      	ldrh	r3, [r3, #12]
 8010852:	b29b      	uxth	r3, r3
 8010854:	b21b      	sxth	r3, r3
 8010856:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801085a:	b21c      	sxth	r4, r3
 801085c:	4b61      	ldr	r3, [pc, #388]	; (80109e4 <tcp_receive+0x88c>)
 801085e:	68db      	ldr	r3, [r3, #12]
 8010860:	899b      	ldrh	r3, [r3, #12]
 8010862:	b29b      	uxth	r3, r3
 8010864:	4618      	mov	r0, r3
 8010866:	f7fa ff97 	bl	800b798 <lwip_htons>
 801086a:	4603      	mov	r3, r0
 801086c:	b2db      	uxtb	r3, r3
 801086e:	b29b      	uxth	r3, r3
 8010870:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010874:	b29b      	uxth	r3, r3
 8010876:	4618      	mov	r0, r3
 8010878:	f7fa ff8e 	bl	800b798 <lwip_htons>
 801087c:	4603      	mov	r3, r0
 801087e:	b21b      	sxth	r3, r3
 8010880:	4323      	orrs	r3, r4
 8010882:	b21a      	sxth	r2, r3
 8010884:	4b57      	ldr	r3, [pc, #348]	; (80109e4 <tcp_receive+0x88c>)
 8010886:	68db      	ldr	r3, [r3, #12]
 8010888:	b292      	uxth	r2, r2
 801088a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010890:	4b54      	ldr	r3, [pc, #336]	; (80109e4 <tcp_receive+0x88c>)
 8010892:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010894:	4b53      	ldr	r3, [pc, #332]	; (80109e4 <tcp_receive+0x88c>)
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	899b      	ldrh	r3, [r3, #12]
 801089a:	b29b      	uxth	r3, r3
 801089c:	4618      	mov	r0, r3
 801089e:	f7fa ff7b 	bl	800b798 <lwip_htons>
 80108a2:	4603      	mov	r3, r0
 80108a4:	b2db      	uxtb	r3, r3
 80108a6:	f003 0302 	and.w	r3, r3, #2
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d005      	beq.n	80108ba <tcp_receive+0x762>
            inseg.len -= 1;
 80108ae:	4b4d      	ldr	r3, [pc, #308]	; (80109e4 <tcp_receive+0x88c>)
 80108b0:	891b      	ldrh	r3, [r3, #8]
 80108b2:	3b01      	subs	r3, #1
 80108b4:	b29a      	uxth	r2, r3
 80108b6:	4b4b      	ldr	r3, [pc, #300]	; (80109e4 <tcp_receive+0x88c>)
 80108b8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80108ba:	4b4a      	ldr	r3, [pc, #296]	; (80109e4 <tcp_receive+0x88c>)
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	4a49      	ldr	r2, [pc, #292]	; (80109e4 <tcp_receive+0x88c>)
 80108c0:	8912      	ldrh	r2, [r2, #8]
 80108c2:	4611      	mov	r1, r2
 80108c4:	4618      	mov	r0, r3
 80108c6:	f7fc f93f 	bl	800cb48 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80108ca:	4b46      	ldr	r3, [pc, #280]	; (80109e4 <tcp_receive+0x88c>)
 80108cc:	891c      	ldrh	r4, [r3, #8]
 80108ce:	4b45      	ldr	r3, [pc, #276]	; (80109e4 <tcp_receive+0x88c>)
 80108d0:	68db      	ldr	r3, [r3, #12]
 80108d2:	899b      	ldrh	r3, [r3, #12]
 80108d4:	b29b      	uxth	r3, r3
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7fa ff5e 	bl	800b798 <lwip_htons>
 80108dc:	4603      	mov	r3, r0
 80108de:	b2db      	uxtb	r3, r3
 80108e0:	f003 0303 	and.w	r3, r3, #3
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d001      	beq.n	80108ec <tcp_receive+0x794>
 80108e8:	2301      	movs	r3, #1
 80108ea:	e000      	b.n	80108ee <tcp_receive+0x796>
 80108ec:	2300      	movs	r3, #0
 80108ee:	4423      	add	r3, r4
 80108f0:	b29a      	uxth	r2, r3
 80108f2:	4b3d      	ldr	r3, [pc, #244]	; (80109e8 <tcp_receive+0x890>)
 80108f4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80108f6:	4b3c      	ldr	r3, [pc, #240]	; (80109e8 <tcp_receive+0x890>)
 80108f8:	881b      	ldrh	r3, [r3, #0]
 80108fa:	461a      	mov	r2, r3
 80108fc:	4b38      	ldr	r3, [pc, #224]	; (80109e0 <tcp_receive+0x888>)
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	441a      	add	r2, r3
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010906:	6879      	ldr	r1, [r7, #4]
 8010908:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801090a:	440b      	add	r3, r1
 801090c:	429a      	cmp	r2, r3
 801090e:	d006      	beq.n	801091e <tcp_receive+0x7c6>
 8010910:	4b36      	ldr	r3, [pc, #216]	; (80109ec <tcp_receive+0x894>)
 8010912:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010916:	4936      	ldr	r1, [pc, #216]	; (80109f0 <tcp_receive+0x898>)
 8010918:	4836      	ldr	r0, [pc, #216]	; (80109f4 <tcp_receive+0x89c>)
 801091a:	f005 fc33 	bl	8016184 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010922:	2b00      	cmp	r3, #0
 8010924:	f000 80e7 	beq.w	8010af6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010928:	4b2e      	ldr	r3, [pc, #184]	; (80109e4 <tcp_receive+0x88c>)
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	899b      	ldrh	r3, [r3, #12]
 801092e:	b29b      	uxth	r3, r3
 8010930:	4618      	mov	r0, r3
 8010932:	f7fa ff31 	bl	800b798 <lwip_htons>
 8010936:	4603      	mov	r3, r0
 8010938:	b2db      	uxtb	r3, r3
 801093a:	f003 0301 	and.w	r3, r3, #1
 801093e:	2b00      	cmp	r3, #0
 8010940:	d010      	beq.n	8010964 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010942:	e00a      	b.n	801095a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010948:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010954:	68f8      	ldr	r0, [r7, #12]
 8010956:	f7fd fd92 	bl	800e47e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801095e:	2b00      	cmp	r3, #0
 8010960:	d1f0      	bne.n	8010944 <tcp_receive+0x7ec>
 8010962:	e0c8      	b.n	8010af6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010968:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801096a:	e052      	b.n	8010a12 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801096c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801096e:	68db      	ldr	r3, [r3, #12]
 8010970:	899b      	ldrh	r3, [r3, #12]
 8010972:	b29b      	uxth	r3, r3
 8010974:	4618      	mov	r0, r3
 8010976:	f7fa ff0f 	bl	800b798 <lwip_htons>
 801097a:	4603      	mov	r3, r0
 801097c:	b2db      	uxtb	r3, r3
 801097e:	f003 0301 	and.w	r3, r3, #1
 8010982:	2b00      	cmp	r3, #0
 8010984:	d03d      	beq.n	8010a02 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010986:	4b17      	ldr	r3, [pc, #92]	; (80109e4 <tcp_receive+0x88c>)
 8010988:	68db      	ldr	r3, [r3, #12]
 801098a:	899b      	ldrh	r3, [r3, #12]
 801098c:	b29b      	uxth	r3, r3
 801098e:	4618      	mov	r0, r3
 8010990:	f7fa ff02 	bl	800b798 <lwip_htons>
 8010994:	4603      	mov	r3, r0
 8010996:	b2db      	uxtb	r3, r3
 8010998:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801099c:	2b00      	cmp	r3, #0
 801099e:	d130      	bne.n	8010a02 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80109a0:	4b10      	ldr	r3, [pc, #64]	; (80109e4 <tcp_receive+0x88c>)
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	899b      	ldrh	r3, [r3, #12]
 80109a6:	b29c      	uxth	r4, r3
 80109a8:	2001      	movs	r0, #1
 80109aa:	f7fa fef5 	bl	800b798 <lwip_htons>
 80109ae:	4603      	mov	r3, r0
 80109b0:	461a      	mov	r2, r3
 80109b2:	4b0c      	ldr	r3, [pc, #48]	; (80109e4 <tcp_receive+0x88c>)
 80109b4:	68db      	ldr	r3, [r3, #12]
 80109b6:	4322      	orrs	r2, r4
 80109b8:	b292      	uxth	r2, r2
 80109ba:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80109bc:	4b09      	ldr	r3, [pc, #36]	; (80109e4 <tcp_receive+0x88c>)
 80109be:	891c      	ldrh	r4, [r3, #8]
 80109c0:	4b08      	ldr	r3, [pc, #32]	; (80109e4 <tcp_receive+0x88c>)
 80109c2:	68db      	ldr	r3, [r3, #12]
 80109c4:	899b      	ldrh	r3, [r3, #12]
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	4618      	mov	r0, r3
 80109ca:	f7fa fee5 	bl	800b798 <lwip_htons>
 80109ce:	4603      	mov	r3, r0
 80109d0:	b2db      	uxtb	r3, r3
 80109d2:	f003 0303 	and.w	r3, r3, #3
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d00e      	beq.n	80109f8 <tcp_receive+0x8a0>
 80109da:	2301      	movs	r3, #1
 80109dc:	e00d      	b.n	80109fa <tcp_receive+0x8a2>
 80109de:	bf00      	nop
 80109e0:	20008f58 	.word	0x20008f58
 80109e4:	20008f38 	.word	0x20008f38
 80109e8:	20008f62 	.word	0x20008f62
 80109ec:	08018470 	.word	0x08018470
 80109f0:	08018818 	.word	0x08018818
 80109f4:	080184bc 	.word	0x080184bc
 80109f8:	2300      	movs	r3, #0
 80109fa:	4423      	add	r3, r4
 80109fc:	b29a      	uxth	r2, r3
 80109fe:	4b98      	ldr	r3, [pc, #608]	; (8010c60 <tcp_receive+0xb08>)
 8010a00:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a04:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010a0c:	6938      	ldr	r0, [r7, #16]
 8010a0e:	f7fd fd36 	bl	800e47e <tcp_seg_free>
            while (next &&
 8010a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d00e      	beq.n	8010a36 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010a18:	4b91      	ldr	r3, [pc, #580]	; (8010c60 <tcp_receive+0xb08>)
 8010a1a:	881b      	ldrh	r3, [r3, #0]
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	4b91      	ldr	r3, [pc, #580]	; (8010c64 <tcp_receive+0xb0c>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	441a      	add	r2, r3
 8010a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a26:	68db      	ldr	r3, [r3, #12]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a2c:	8909      	ldrh	r1, [r1, #8]
 8010a2e:	440b      	add	r3, r1
 8010a30:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	da9a      	bge.n	801096c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d059      	beq.n	8010af0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010a3c:	4b88      	ldr	r3, [pc, #544]	; (8010c60 <tcp_receive+0xb08>)
 8010a3e:	881b      	ldrh	r3, [r3, #0]
 8010a40:	461a      	mov	r2, r3
 8010a42:	4b88      	ldr	r3, [pc, #544]	; (8010c64 <tcp_receive+0xb0c>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	441a      	add	r2, r3
 8010a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a4a:	68db      	ldr	r3, [r3, #12]
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	dd4d      	ble.n	8010af0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a56:	68db      	ldr	r3, [r3, #12]
 8010a58:	685b      	ldr	r3, [r3, #4]
 8010a5a:	b29a      	uxth	r2, r3
 8010a5c:	4b81      	ldr	r3, [pc, #516]	; (8010c64 <tcp_receive+0xb0c>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	1ad3      	subs	r3, r2, r3
 8010a64:	b29a      	uxth	r2, r3
 8010a66:	4b80      	ldr	r3, [pc, #512]	; (8010c68 <tcp_receive+0xb10>)
 8010a68:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010a6a:	4b7f      	ldr	r3, [pc, #508]	; (8010c68 <tcp_receive+0xb10>)
 8010a6c:	68db      	ldr	r3, [r3, #12]
 8010a6e:	899b      	ldrh	r3, [r3, #12]
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7fa fe90 	bl	800b798 <lwip_htons>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	b2db      	uxtb	r3, r3
 8010a7c:	f003 0302 	and.w	r3, r3, #2
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d005      	beq.n	8010a90 <tcp_receive+0x938>
                inseg.len -= 1;
 8010a84:	4b78      	ldr	r3, [pc, #480]	; (8010c68 <tcp_receive+0xb10>)
 8010a86:	891b      	ldrh	r3, [r3, #8]
 8010a88:	3b01      	subs	r3, #1
 8010a8a:	b29a      	uxth	r2, r3
 8010a8c:	4b76      	ldr	r3, [pc, #472]	; (8010c68 <tcp_receive+0xb10>)
 8010a8e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010a90:	4b75      	ldr	r3, [pc, #468]	; (8010c68 <tcp_receive+0xb10>)
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	4a74      	ldr	r2, [pc, #464]	; (8010c68 <tcp_receive+0xb10>)
 8010a96:	8912      	ldrh	r2, [r2, #8]
 8010a98:	4611      	mov	r1, r2
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7fc f854 	bl	800cb48 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010aa0:	4b71      	ldr	r3, [pc, #452]	; (8010c68 <tcp_receive+0xb10>)
 8010aa2:	891c      	ldrh	r4, [r3, #8]
 8010aa4:	4b70      	ldr	r3, [pc, #448]	; (8010c68 <tcp_receive+0xb10>)
 8010aa6:	68db      	ldr	r3, [r3, #12]
 8010aa8:	899b      	ldrh	r3, [r3, #12]
 8010aaa:	b29b      	uxth	r3, r3
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fa fe73 	bl	800b798 <lwip_htons>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	b2db      	uxtb	r3, r3
 8010ab6:	f003 0303 	and.w	r3, r3, #3
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d001      	beq.n	8010ac2 <tcp_receive+0x96a>
 8010abe:	2301      	movs	r3, #1
 8010ac0:	e000      	b.n	8010ac4 <tcp_receive+0x96c>
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	4423      	add	r3, r4
 8010ac6:	b29a      	uxth	r2, r3
 8010ac8:	4b65      	ldr	r3, [pc, #404]	; (8010c60 <tcp_receive+0xb08>)
 8010aca:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010acc:	4b64      	ldr	r3, [pc, #400]	; (8010c60 <tcp_receive+0xb08>)
 8010ace:	881b      	ldrh	r3, [r3, #0]
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	4b64      	ldr	r3, [pc, #400]	; (8010c64 <tcp_receive+0xb0c>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	441a      	add	r2, r3
 8010ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	685b      	ldr	r3, [r3, #4]
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	d006      	beq.n	8010af0 <tcp_receive+0x998>
 8010ae2:	4b62      	ldr	r3, [pc, #392]	; (8010c6c <tcp_receive+0xb14>)
 8010ae4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010ae8:	4961      	ldr	r1, [pc, #388]	; (8010c70 <tcp_receive+0xb18>)
 8010aea:	4862      	ldr	r0, [pc, #392]	; (8010c74 <tcp_receive+0xb1c>)
 8010aec:	f005 fb4a 	bl	8016184 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010af4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010af6:	4b5a      	ldr	r3, [pc, #360]	; (8010c60 <tcp_receive+0xb08>)
 8010af8:	881b      	ldrh	r3, [r3, #0]
 8010afa:	461a      	mov	r2, r3
 8010afc:	4b59      	ldr	r3, [pc, #356]	; (8010c64 <tcp_receive+0xb0c>)
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	441a      	add	r2, r3
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b0a:	4b55      	ldr	r3, [pc, #340]	; (8010c60 <tcp_receive+0xb08>)
 8010b0c:	881b      	ldrh	r3, [r3, #0]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d206      	bcs.n	8010b20 <tcp_receive+0x9c8>
 8010b12:	4b56      	ldr	r3, [pc, #344]	; (8010c6c <tcp_receive+0xb14>)
 8010b14:	f240 6207 	movw	r2, #1543	; 0x607
 8010b18:	4957      	ldr	r1, [pc, #348]	; (8010c78 <tcp_receive+0xb20>)
 8010b1a:	4856      	ldr	r0, [pc, #344]	; (8010c74 <tcp_receive+0xb1c>)
 8010b1c:	f005 fb32 	bl	8016184 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b24:	4b4e      	ldr	r3, [pc, #312]	; (8010c60 <tcp_receive+0xb08>)
 8010b26:	881b      	ldrh	r3, [r3, #0]
 8010b28:	1ad3      	subs	r3, r2, r3
 8010b2a:	b29a      	uxth	r2, r3
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f7fc ffc5 	bl	800dac0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010b36:	4b4c      	ldr	r3, [pc, #304]	; (8010c68 <tcp_receive+0xb10>)
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	891b      	ldrh	r3, [r3, #8]
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d006      	beq.n	8010b4e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010b40:	4b49      	ldr	r3, [pc, #292]	; (8010c68 <tcp_receive+0xb10>)
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	4a4d      	ldr	r2, [pc, #308]	; (8010c7c <tcp_receive+0xb24>)
 8010b46:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010b48:	4b47      	ldr	r3, [pc, #284]	; (8010c68 <tcp_receive+0xb10>)
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010b4e:	4b46      	ldr	r3, [pc, #280]	; (8010c68 <tcp_receive+0xb10>)
 8010b50:	68db      	ldr	r3, [r3, #12]
 8010b52:	899b      	ldrh	r3, [r3, #12]
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7fa fe1e 	bl	800b798 <lwip_htons>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	f003 0301 	and.w	r3, r3, #1
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	f000 80b8 	beq.w	8010cda <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010b6a:	4b45      	ldr	r3, [pc, #276]	; (8010c80 <tcp_receive+0xb28>)
 8010b6c:	781b      	ldrb	r3, [r3, #0]
 8010b6e:	f043 0320 	orr.w	r3, r3, #32
 8010b72:	b2da      	uxtb	r2, r3
 8010b74:	4b42      	ldr	r3, [pc, #264]	; (8010c80 <tcp_receive+0xb28>)
 8010b76:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010b78:	e0af      	b.n	8010cda <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b7e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	4a36      	ldr	r2, [pc, #216]	; (8010c64 <tcp_receive+0xb0c>)
 8010b8a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	891b      	ldrh	r3, [r3, #8]
 8010b90:	461c      	mov	r4, r3
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	68db      	ldr	r3, [r3, #12]
 8010b96:	899b      	ldrh	r3, [r3, #12]
 8010b98:	b29b      	uxth	r3, r3
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f7fa fdfc 	bl	800b798 <lwip_htons>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	b2db      	uxtb	r3, r3
 8010ba4:	f003 0303 	and.w	r3, r3, #3
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d001      	beq.n	8010bb0 <tcp_receive+0xa58>
 8010bac:	2301      	movs	r3, #1
 8010bae:	e000      	b.n	8010bb2 <tcp_receive+0xa5a>
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	191a      	adds	r2, r3, r4
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb8:	441a      	add	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010bc2:	461c      	mov	r4, r3
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	891b      	ldrh	r3, [r3, #8]
 8010bc8:	461d      	mov	r5, r3
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	68db      	ldr	r3, [r3, #12]
 8010bce:	899b      	ldrh	r3, [r3, #12]
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7fa fde0 	bl	800b798 <lwip_htons>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	b2db      	uxtb	r3, r3
 8010bdc:	f003 0303 	and.w	r3, r3, #3
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d001      	beq.n	8010be8 <tcp_receive+0xa90>
 8010be4:	2301      	movs	r3, #1
 8010be6:	e000      	b.n	8010bea <tcp_receive+0xa92>
 8010be8:	2300      	movs	r3, #0
 8010bea:	442b      	add	r3, r5
 8010bec:	429c      	cmp	r4, r3
 8010bee:	d206      	bcs.n	8010bfe <tcp_receive+0xaa6>
 8010bf0:	4b1e      	ldr	r3, [pc, #120]	; (8010c6c <tcp_receive+0xb14>)
 8010bf2:	f240 622b 	movw	r2, #1579	; 0x62b
 8010bf6:	4923      	ldr	r1, [pc, #140]	; (8010c84 <tcp_receive+0xb2c>)
 8010bf8:	481e      	ldr	r0, [pc, #120]	; (8010c74 <tcp_receive+0xb1c>)
 8010bfa:	f005 fac3 	bl	8016184 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	891b      	ldrh	r3, [r3, #8]
 8010c02:	461c      	mov	r4, r3
 8010c04:	68bb      	ldr	r3, [r7, #8]
 8010c06:	68db      	ldr	r3, [r3, #12]
 8010c08:	899b      	ldrh	r3, [r3, #12]
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	4618      	mov	r0, r3
 8010c0e:	f7fa fdc3 	bl	800b798 <lwip_htons>
 8010c12:	4603      	mov	r3, r0
 8010c14:	b2db      	uxtb	r3, r3
 8010c16:	f003 0303 	and.w	r3, r3, #3
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d001      	beq.n	8010c22 <tcp_receive+0xaca>
 8010c1e:	2301      	movs	r3, #1
 8010c20:	e000      	b.n	8010c24 <tcp_receive+0xacc>
 8010c22:	2300      	movs	r3, #0
 8010c24:	1919      	adds	r1, r3, r4
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010c2a:	b28b      	uxth	r3, r1
 8010c2c:	1ad3      	subs	r3, r2, r3
 8010c2e:	b29a      	uxth	r2, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f7fc ff43 	bl	800dac0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	685b      	ldr	r3, [r3, #4]
 8010c3e:	891b      	ldrh	r3, [r3, #8]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d028      	beq.n	8010c96 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010c44:	4b0d      	ldr	r3, [pc, #52]	; (8010c7c <tcp_receive+0xb24>)
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d01d      	beq.n	8010c88 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010c4c:	4b0b      	ldr	r3, [pc, #44]	; (8010c7c <tcp_receive+0xb24>)
 8010c4e:	681a      	ldr	r2, [r3, #0]
 8010c50:	68bb      	ldr	r3, [r7, #8]
 8010c52:	685b      	ldr	r3, [r3, #4]
 8010c54:	4619      	mov	r1, r3
 8010c56:	4610      	mov	r0, r2
 8010c58:	f7fc f9be 	bl	800cfd8 <pbuf_cat>
 8010c5c:	e018      	b.n	8010c90 <tcp_receive+0xb38>
 8010c5e:	bf00      	nop
 8010c60:	20008f62 	.word	0x20008f62
 8010c64:	20008f58 	.word	0x20008f58
 8010c68:	20008f38 	.word	0x20008f38
 8010c6c:	08018470 	.word	0x08018470
 8010c70:	08018850 	.word	0x08018850
 8010c74:	080184bc 	.word	0x080184bc
 8010c78:	0801888c 	.word	0x0801888c
 8010c7c:	20008f68 	.word	0x20008f68
 8010c80:	20008f65 	.word	0x20008f65
 8010c84:	080188ac 	.word	0x080188ac
            } else {
              recv_data = cseg->p;
 8010c88:	68bb      	ldr	r3, [r7, #8]
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	4a70      	ldr	r2, [pc, #448]	; (8010e50 <tcp_receive+0xcf8>)
 8010c8e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010c90:	68bb      	ldr	r3, [r7, #8]
 8010c92:	2200      	movs	r2, #0
 8010c94:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	68db      	ldr	r3, [r3, #12]
 8010c9a:	899b      	ldrh	r3, [r3, #12]
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7fa fd7a 	bl	800b798 <lwip_htons>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	b2db      	uxtb	r3, r3
 8010ca8:	f003 0301 	and.w	r3, r3, #1
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d00d      	beq.n	8010ccc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010cb0:	4b68      	ldr	r3, [pc, #416]	; (8010e54 <tcp_receive+0xcfc>)
 8010cb2:	781b      	ldrb	r3, [r3, #0]
 8010cb4:	f043 0320 	orr.w	r3, r3, #32
 8010cb8:	b2da      	uxtb	r2, r3
 8010cba:	4b66      	ldr	r3, [pc, #408]	; (8010e54 <tcp_receive+0xcfc>)
 8010cbc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	7d1b      	ldrb	r3, [r3, #20]
 8010cc2:	2b04      	cmp	r3, #4
 8010cc4:	d102      	bne.n	8010ccc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	2207      	movs	r2, #7
 8010cca:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010ccc:	68bb      	ldr	r3, [r7, #8]
 8010cce:	681a      	ldr	r2, [r3, #0]
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010cd4:	68b8      	ldr	r0, [r7, #8]
 8010cd6:	f7fd fbd2 	bl	800e47e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d008      	beq.n	8010cf4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ce6:	68db      	ldr	r3, [r3, #12]
 8010ce8:	685a      	ldr	r2, [r3, #4]
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	f43f af43 	beq.w	8010b7a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	8b5b      	ldrh	r3, [r3, #26]
 8010cf8:	f003 0301 	and.w	r3, r3, #1
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d00e      	beq.n	8010d1e <tcp_receive+0xbc6>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	8b5b      	ldrh	r3, [r3, #26]
 8010d04:	f023 0301 	bic.w	r3, r3, #1
 8010d08:	b29a      	uxth	r2, r3
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	835a      	strh	r2, [r3, #26]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	8b5b      	ldrh	r3, [r3, #26]
 8010d12:	f043 0302 	orr.w	r3, r3, #2
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010d1c:	e188      	b.n	8011030 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	8b5b      	ldrh	r3, [r3, #26]
 8010d22:	f043 0301 	orr.w	r3, r3, #1
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010d2c:	e180      	b.n	8011030 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d106      	bne.n	8010d44 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010d36:	4848      	ldr	r0, [pc, #288]	; (8010e58 <tcp_receive+0xd00>)
 8010d38:	f7fd fbba 	bl	800e4b0 <tcp_seg_copy>
 8010d3c:	4602      	mov	r2, r0
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	675a      	str	r2, [r3, #116]	; 0x74
 8010d42:	e16d      	b.n	8011020 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010d44:	2300      	movs	r3, #0
 8010d46:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d4e:	e157      	b.n	8011000 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d52:	68db      	ldr	r3, [r3, #12]
 8010d54:	685a      	ldr	r2, [r3, #4]
 8010d56:	4b41      	ldr	r3, [pc, #260]	; (8010e5c <tcp_receive+0xd04>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d11d      	bne.n	8010d9a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010d5e:	4b3e      	ldr	r3, [pc, #248]	; (8010e58 <tcp_receive+0xd00>)
 8010d60:	891a      	ldrh	r2, [r3, #8]
 8010d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d64:	891b      	ldrh	r3, [r3, #8]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	f240 814f 	bls.w	801100a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d6c:	483a      	ldr	r0, [pc, #232]	; (8010e58 <tcp_receive+0xd00>)
 8010d6e:	f7fd fb9f 	bl	800e4b0 <tcp_seg_copy>
 8010d72:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	f000 8149 	beq.w	801100e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d003      	beq.n	8010d8a <tcp_receive+0xc32>
                    prev->next = cseg;
 8010d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d84:	697a      	ldr	r2, [r7, #20]
 8010d86:	601a      	str	r2, [r3, #0]
 8010d88:	e002      	b.n	8010d90 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	697a      	ldr	r2, [r7, #20]
 8010d8e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010d90:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d92:	6978      	ldr	r0, [r7, #20]
 8010d94:	f7ff f8dc 	bl	800ff50 <tcp_oos_insert_segment>
                }
                break;
 8010d98:	e139      	b.n	801100e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d117      	bne.n	8010dd0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010da0:	4b2e      	ldr	r3, [pc, #184]	; (8010e5c <tcp_receive+0xd04>)
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	685b      	ldr	r3, [r3, #4]
 8010daa:	1ad3      	subs	r3, r2, r3
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	da57      	bge.n	8010e60 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010db0:	4829      	ldr	r0, [pc, #164]	; (8010e58 <tcp_receive+0xd00>)
 8010db2:	f7fd fb7d 	bl	800e4b0 <tcp_seg_copy>
 8010db6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010db8:	69bb      	ldr	r3, [r7, #24]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f000 8129 	beq.w	8011012 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	69ba      	ldr	r2, [r7, #24]
 8010dc4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010dc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010dc8:	69b8      	ldr	r0, [r7, #24]
 8010dca:	f7ff f8c1 	bl	800ff50 <tcp_oos_insert_segment>
                  }
                  break;
 8010dce:	e120      	b.n	8011012 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010dd0:	4b22      	ldr	r3, [pc, #136]	; (8010e5c <tcp_receive+0xd04>)
 8010dd2:	681a      	ldr	r2, [r3, #0]
 8010dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	1ad3      	subs	r3, r2, r3
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	db3e      	blt.n	8010e60 <tcp_receive+0xd08>
 8010de2:	4b1e      	ldr	r3, [pc, #120]	; (8010e5c <tcp_receive+0xd04>)
 8010de4:	681a      	ldr	r2, [r3, #0]
 8010de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de8:	68db      	ldr	r3, [r3, #12]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	1ad3      	subs	r3, r2, r3
 8010dee:	3301      	adds	r3, #1
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	dc35      	bgt.n	8010e60 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010df4:	4818      	ldr	r0, [pc, #96]	; (8010e58 <tcp_receive+0xd00>)
 8010df6:	f7fd fb5b 	bl	800e4b0 <tcp_seg_copy>
 8010dfa:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	f000 8109 	beq.w	8011016 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e06:	68db      	ldr	r3, [r3, #12]
 8010e08:	685b      	ldr	r3, [r3, #4]
 8010e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e0c:	8912      	ldrh	r2, [r2, #8]
 8010e0e:	441a      	add	r2, r3
 8010e10:	4b12      	ldr	r3, [pc, #72]	; (8010e5c <tcp_receive+0xd04>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	1ad3      	subs	r3, r2, r3
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	dd12      	ble.n	8010e40 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010e1a:	4b10      	ldr	r3, [pc, #64]	; (8010e5c <tcp_receive+0xd04>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	b29a      	uxth	r2, r3
 8010e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e22:	68db      	ldr	r3, [r3, #12]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	1ad3      	subs	r3, r2, r3
 8010e2a:	b29a      	uxth	r2, r3
 8010e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e2e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e32:	685a      	ldr	r2, [r3, #4]
 8010e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e36:	891b      	ldrh	r3, [r3, #8]
 8010e38:	4619      	mov	r1, r3
 8010e3a:	4610      	mov	r0, r2
 8010e3c:	f7fb fe84 	bl	800cb48 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e42:	69fa      	ldr	r2, [r7, #28]
 8010e44:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010e46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010e48:	69f8      	ldr	r0, [r7, #28]
 8010e4a:	f7ff f881 	bl	800ff50 <tcp_oos_insert_segment>
                  }
                  break;
 8010e4e:	e0e2      	b.n	8011016 <tcp_receive+0xebe>
 8010e50:	20008f68 	.word	0x20008f68
 8010e54:	20008f65 	.word	0x20008f65
 8010e58:	20008f38 	.word	0x20008f38
 8010e5c:	20008f58 	.word	0x20008f58
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e62:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	f040 80c6 	bne.w	8010ffa <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010e6e:	4b80      	ldr	r3, [pc, #512]	; (8011070 <tcp_receive+0xf18>)
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e74:	68db      	ldr	r3, [r3, #12]
 8010e76:	685b      	ldr	r3, [r3, #4]
 8010e78:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	f340 80bd 	ble.w	8010ffa <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	899b      	ldrh	r3, [r3, #12]
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f7fa fc85 	bl	800b798 <lwip_htons>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	b2db      	uxtb	r3, r3
 8010e92:	f003 0301 	and.w	r3, r3, #1
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	f040 80bf 	bne.w	801101a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010e9c:	4875      	ldr	r0, [pc, #468]	; (8011074 <tcp_receive+0xf1c>)
 8010e9e:	f7fd fb07 	bl	800e4b0 <tcp_seg_copy>
 8010ea2:	4602      	mov	r2, r0
 8010ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	f000 80b6 	beq.w	801101e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb4:	68db      	ldr	r3, [r3, #12]
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010eba:	8912      	ldrh	r2, [r2, #8]
 8010ebc:	441a      	add	r2, r3
 8010ebe:	4b6c      	ldr	r3, [pc, #432]	; (8011070 <tcp_receive+0xf18>)
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	1ad3      	subs	r3, r2, r3
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	dd12      	ble.n	8010eee <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010ec8:	4b69      	ldr	r3, [pc, #420]	; (8011070 <tcp_receive+0xf18>)
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	b29a      	uxth	r2, r3
 8010ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed0:	68db      	ldr	r3, [r3, #12]
 8010ed2:	685b      	ldr	r3, [r3, #4]
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	1ad3      	subs	r3, r2, r3
 8010ed8:	b29a      	uxth	r2, r3
 8010eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010edc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee0:	685a      	ldr	r2, [r3, #4]
 8010ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee4:	891b      	ldrh	r3, [r3, #8]
 8010ee6:	4619      	mov	r1, r3
 8010ee8:	4610      	mov	r0, r2
 8010eea:	f7fb fe2d 	bl	800cb48 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010eee:	4b62      	ldr	r3, [pc, #392]	; (8011078 <tcp_receive+0xf20>)
 8010ef0:	881b      	ldrh	r3, [r3, #0]
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	4b5e      	ldr	r3, [pc, #376]	; (8011070 <tcp_receive+0xf18>)
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	441a      	add	r2, r3
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010efe:	6879      	ldr	r1, [r7, #4]
 8010f00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010f02:	440b      	add	r3, r1
 8010f04:	1ad3      	subs	r3, r2, r3
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	f340 8089 	ble.w	801101e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	68db      	ldr	r3, [r3, #12]
 8010f12:	899b      	ldrh	r3, [r3, #12]
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	4618      	mov	r0, r3
 8010f18:	f7fa fc3e 	bl	800b798 <lwip_htons>
 8010f1c:	4603      	mov	r3, r0
 8010f1e:	b2db      	uxtb	r3, r3
 8010f20:	f003 0301 	and.w	r3, r3, #1
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d022      	beq.n	8010f6e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	68db      	ldr	r3, [r3, #12]
 8010f2e:	899b      	ldrh	r3, [r3, #12]
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	b21b      	sxth	r3, r3
 8010f34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010f38:	b21c      	sxth	r4, r3
 8010f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	899b      	ldrh	r3, [r3, #12]
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	4618      	mov	r0, r3
 8010f46:	f7fa fc27 	bl	800b798 <lwip_htons>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010f54:	b29b      	uxth	r3, r3
 8010f56:	4618      	mov	r0, r3
 8010f58:	f7fa fc1e 	bl	800b798 <lwip_htons>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	b21b      	sxth	r3, r3
 8010f60:	4323      	orrs	r3, r4
 8010f62:	b21a      	sxth	r2, r3
 8010f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	b292      	uxth	r2, r2
 8010f6c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f72:	b29a      	uxth	r2, r3
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f78:	4413      	add	r3, r2
 8010f7a:	b299      	uxth	r1, r3
 8010f7c:	4b3c      	ldr	r3, [pc, #240]	; (8011070 <tcp_receive+0xf18>)
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	b29a      	uxth	r2, r3
 8010f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	1a8a      	subs	r2, r1, r2
 8010f88:	b292      	uxth	r2, r2
 8010f8a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	685a      	ldr	r2, [r3, #4]
 8010f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	891b      	ldrh	r3, [r3, #8]
 8010f98:	4619      	mov	r1, r3
 8010f9a:	4610      	mov	r0, r2
 8010f9c:	f7fb fdd4 	bl	800cb48 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	891c      	ldrh	r4, [r3, #8]
 8010fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	899b      	ldrh	r3, [r3, #12]
 8010fae:	b29b      	uxth	r3, r3
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f7fa fbf1 	bl	800b798 <lwip_htons>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	b2db      	uxtb	r3, r3
 8010fba:	f003 0303 	and.w	r3, r3, #3
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d001      	beq.n	8010fc6 <tcp_receive+0xe6e>
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	e000      	b.n	8010fc8 <tcp_receive+0xe70>
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	4423      	add	r3, r4
 8010fca:	b29a      	uxth	r2, r3
 8010fcc:	4b2a      	ldr	r3, [pc, #168]	; (8011078 <tcp_receive+0xf20>)
 8010fce:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010fd0:	4b29      	ldr	r3, [pc, #164]	; (8011078 <tcp_receive+0xf20>)
 8010fd2:	881b      	ldrh	r3, [r3, #0]
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	4b26      	ldr	r3, [pc, #152]	; (8011070 <tcp_receive+0xf18>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	441a      	add	r2, r3
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fe0:	6879      	ldr	r1, [r7, #4]
 8010fe2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010fe4:	440b      	add	r3, r1
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d019      	beq.n	801101e <tcp_receive+0xec6>
 8010fea:	4b24      	ldr	r3, [pc, #144]	; (801107c <tcp_receive+0xf24>)
 8010fec:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010ff0:	4923      	ldr	r1, [pc, #140]	; (8011080 <tcp_receive+0xf28>)
 8010ff2:	4824      	ldr	r0, [pc, #144]	; (8011084 <tcp_receive+0xf2c>)
 8010ff4:	f005 f8c6 	bl	8016184 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010ff8:	e011      	b.n	801101e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	63bb      	str	r3, [r7, #56]	; 0x38
 8011000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011002:	2b00      	cmp	r3, #0
 8011004:	f47f aea4 	bne.w	8010d50 <tcp_receive+0xbf8>
 8011008:	e00a      	b.n	8011020 <tcp_receive+0xec8>
                break;
 801100a:	bf00      	nop
 801100c:	e008      	b.n	8011020 <tcp_receive+0xec8>
                break;
 801100e:	bf00      	nop
 8011010:	e006      	b.n	8011020 <tcp_receive+0xec8>
                  break;
 8011012:	bf00      	nop
 8011014:	e004      	b.n	8011020 <tcp_receive+0xec8>
                  break;
 8011016:	bf00      	nop
 8011018:	e002      	b.n	8011020 <tcp_receive+0xec8>
                  break;
 801101a:	bf00      	nop
 801101c:	e000      	b.n	8011020 <tcp_receive+0xec8>
                break;
 801101e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f001 fa33 	bl	801248c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011026:	e003      	b.n	8011030 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011028:	6878      	ldr	r0, [r7, #4]
 801102a:	f001 fa2f 	bl	801248c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801102e:	e01a      	b.n	8011066 <tcp_receive+0xf0e>
 8011030:	e019      	b.n	8011066 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011032:	4b0f      	ldr	r3, [pc, #60]	; (8011070 <tcp_receive+0xf18>)
 8011034:	681a      	ldr	r2, [r3, #0]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801103a:	1ad3      	subs	r3, r2, r3
 801103c:	2b00      	cmp	r3, #0
 801103e:	db0a      	blt.n	8011056 <tcp_receive+0xefe>
 8011040:	4b0b      	ldr	r3, [pc, #44]	; (8011070 <tcp_receive+0xf18>)
 8011042:	681a      	ldr	r2, [r3, #0]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011048:	6879      	ldr	r1, [r7, #4]
 801104a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801104c:	440b      	add	r3, r1
 801104e:	1ad3      	subs	r3, r2, r3
 8011050:	3301      	adds	r3, #1
 8011052:	2b00      	cmp	r3, #0
 8011054:	dd07      	ble.n	8011066 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	8b5b      	ldrh	r3, [r3, #26]
 801105a:	f043 0302 	orr.w	r3, r3, #2
 801105e:	b29a      	uxth	r2, r3
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011064:	e7ff      	b.n	8011066 <tcp_receive+0xf0e>
 8011066:	bf00      	nop
 8011068:	3750      	adds	r7, #80	; 0x50
 801106a:	46bd      	mov	sp, r7
 801106c:	bdb0      	pop	{r4, r5, r7, pc}
 801106e:	bf00      	nop
 8011070:	20008f58 	.word	0x20008f58
 8011074:	20008f38 	.word	0x20008f38
 8011078:	20008f62 	.word	0x20008f62
 801107c:	08018470 	.word	0x08018470
 8011080:	08018818 	.word	0x08018818
 8011084:	080184bc 	.word	0x080184bc

08011088 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801108e:	4b15      	ldr	r3, [pc, #84]	; (80110e4 <tcp_get_next_optbyte+0x5c>)
 8011090:	881b      	ldrh	r3, [r3, #0]
 8011092:	1c5a      	adds	r2, r3, #1
 8011094:	b291      	uxth	r1, r2
 8011096:	4a13      	ldr	r2, [pc, #76]	; (80110e4 <tcp_get_next_optbyte+0x5c>)
 8011098:	8011      	strh	r1, [r2, #0]
 801109a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801109c:	4b12      	ldr	r3, [pc, #72]	; (80110e8 <tcp_get_next_optbyte+0x60>)
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d004      	beq.n	80110ae <tcp_get_next_optbyte+0x26>
 80110a4:	4b11      	ldr	r3, [pc, #68]	; (80110ec <tcp_get_next_optbyte+0x64>)
 80110a6:	881b      	ldrh	r3, [r3, #0]
 80110a8:	88fa      	ldrh	r2, [r7, #6]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d208      	bcs.n	80110c0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80110ae:	4b10      	ldr	r3, [pc, #64]	; (80110f0 <tcp_get_next_optbyte+0x68>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	3314      	adds	r3, #20
 80110b4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80110b6:	88fb      	ldrh	r3, [r7, #6]
 80110b8:	683a      	ldr	r2, [r7, #0]
 80110ba:	4413      	add	r3, r2
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	e00b      	b.n	80110d8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80110c0:	88fb      	ldrh	r3, [r7, #6]
 80110c2:	b2da      	uxtb	r2, r3
 80110c4:	4b09      	ldr	r3, [pc, #36]	; (80110ec <tcp_get_next_optbyte+0x64>)
 80110c6:	881b      	ldrh	r3, [r3, #0]
 80110c8:	b2db      	uxtb	r3, r3
 80110ca:	1ad3      	subs	r3, r2, r3
 80110cc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80110ce:	4b06      	ldr	r3, [pc, #24]	; (80110e8 <tcp_get_next_optbyte+0x60>)
 80110d0:	681a      	ldr	r2, [r3, #0]
 80110d2:	797b      	ldrb	r3, [r7, #5]
 80110d4:	4413      	add	r3, r2
 80110d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80110d8:	4618      	mov	r0, r3
 80110da:	370c      	adds	r7, #12
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr
 80110e4:	20008f54 	.word	0x20008f54
 80110e8:	20008f50 	.word	0x20008f50
 80110ec:	20008f4e 	.word	0x20008f4e
 80110f0:	20008f48 	.word	0x20008f48

080110f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	b084      	sub	sp, #16
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d106      	bne.n	8011110 <tcp_parseopt+0x1c>
 8011102:	4b32      	ldr	r3, [pc, #200]	; (80111cc <tcp_parseopt+0xd8>)
 8011104:	f240 727d 	movw	r2, #1917	; 0x77d
 8011108:	4931      	ldr	r1, [pc, #196]	; (80111d0 <tcp_parseopt+0xdc>)
 801110a:	4832      	ldr	r0, [pc, #200]	; (80111d4 <tcp_parseopt+0xe0>)
 801110c:	f005 f83a 	bl	8016184 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011110:	4b31      	ldr	r3, [pc, #196]	; (80111d8 <tcp_parseopt+0xe4>)
 8011112:	881b      	ldrh	r3, [r3, #0]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d055      	beq.n	80111c4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011118:	4b30      	ldr	r3, [pc, #192]	; (80111dc <tcp_parseopt+0xe8>)
 801111a:	2200      	movs	r2, #0
 801111c:	801a      	strh	r2, [r3, #0]
 801111e:	e045      	b.n	80111ac <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011120:	f7ff ffb2 	bl	8011088 <tcp_get_next_optbyte>
 8011124:	4603      	mov	r3, r0
 8011126:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011128:	7bfb      	ldrb	r3, [r7, #15]
 801112a:	2b02      	cmp	r3, #2
 801112c:	d006      	beq.n	801113c <tcp_parseopt+0x48>
 801112e:	2b02      	cmp	r3, #2
 8011130:	dc2b      	bgt.n	801118a <tcp_parseopt+0x96>
 8011132:	2b00      	cmp	r3, #0
 8011134:	d041      	beq.n	80111ba <tcp_parseopt+0xc6>
 8011136:	2b01      	cmp	r3, #1
 8011138:	d127      	bne.n	801118a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801113a:	e037      	b.n	80111ac <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801113c:	f7ff ffa4 	bl	8011088 <tcp_get_next_optbyte>
 8011140:	4603      	mov	r3, r0
 8011142:	2b04      	cmp	r3, #4
 8011144:	d13b      	bne.n	80111be <tcp_parseopt+0xca>
 8011146:	4b25      	ldr	r3, [pc, #148]	; (80111dc <tcp_parseopt+0xe8>)
 8011148:	881b      	ldrh	r3, [r3, #0]
 801114a:	3301      	adds	r3, #1
 801114c:	4a22      	ldr	r2, [pc, #136]	; (80111d8 <tcp_parseopt+0xe4>)
 801114e:	8812      	ldrh	r2, [r2, #0]
 8011150:	4293      	cmp	r3, r2
 8011152:	da34      	bge.n	80111be <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011154:	f7ff ff98 	bl	8011088 <tcp_get_next_optbyte>
 8011158:	4603      	mov	r3, r0
 801115a:	b29b      	uxth	r3, r3
 801115c:	021b      	lsls	r3, r3, #8
 801115e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011160:	f7ff ff92 	bl	8011088 <tcp_get_next_optbyte>
 8011164:	4603      	mov	r3, r0
 8011166:	b29a      	uxth	r2, r3
 8011168:	89bb      	ldrh	r3, [r7, #12]
 801116a:	4313      	orrs	r3, r2
 801116c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801116e:	89bb      	ldrh	r3, [r7, #12]
 8011170:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011174:	d804      	bhi.n	8011180 <tcp_parseopt+0x8c>
 8011176:	89bb      	ldrh	r3, [r7, #12]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d001      	beq.n	8011180 <tcp_parseopt+0x8c>
 801117c:	89ba      	ldrh	r2, [r7, #12]
 801117e:	e001      	b.n	8011184 <tcp_parseopt+0x90>
 8011180:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011188:	e010      	b.n	80111ac <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801118a:	f7ff ff7d 	bl	8011088 <tcp_get_next_optbyte>
 801118e:	4603      	mov	r3, r0
 8011190:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011192:	7afb      	ldrb	r3, [r7, #11]
 8011194:	2b01      	cmp	r3, #1
 8011196:	d914      	bls.n	80111c2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011198:	7afb      	ldrb	r3, [r7, #11]
 801119a:	b29a      	uxth	r2, r3
 801119c:	4b0f      	ldr	r3, [pc, #60]	; (80111dc <tcp_parseopt+0xe8>)
 801119e:	881b      	ldrh	r3, [r3, #0]
 80111a0:	4413      	add	r3, r2
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	3b02      	subs	r3, #2
 80111a6:	b29a      	uxth	r2, r3
 80111a8:	4b0c      	ldr	r3, [pc, #48]	; (80111dc <tcp_parseopt+0xe8>)
 80111aa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80111ac:	4b0b      	ldr	r3, [pc, #44]	; (80111dc <tcp_parseopt+0xe8>)
 80111ae:	881a      	ldrh	r2, [r3, #0]
 80111b0:	4b09      	ldr	r3, [pc, #36]	; (80111d8 <tcp_parseopt+0xe4>)
 80111b2:	881b      	ldrh	r3, [r3, #0]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d3b3      	bcc.n	8011120 <tcp_parseopt+0x2c>
 80111b8:	e004      	b.n	80111c4 <tcp_parseopt+0xd0>
          return;
 80111ba:	bf00      	nop
 80111bc:	e002      	b.n	80111c4 <tcp_parseopt+0xd0>
            return;
 80111be:	bf00      	nop
 80111c0:	e000      	b.n	80111c4 <tcp_parseopt+0xd0>
            return;
 80111c2:	bf00      	nop
      }
    }
  }
}
 80111c4:	3710      	adds	r7, #16
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	08018470 	.word	0x08018470
 80111d0:	080188d4 	.word	0x080188d4
 80111d4:	080184bc 	.word	0x080184bc
 80111d8:	20008f4c 	.word	0x20008f4c
 80111dc:	20008f54 	.word	0x20008f54

080111e0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80111e0:	b480      	push	{r7}
 80111e2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80111e4:	4b05      	ldr	r3, [pc, #20]	; (80111fc <tcp_trigger_input_pcb_close+0x1c>)
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	f043 0310 	orr.w	r3, r3, #16
 80111ec:	b2da      	uxtb	r2, r3
 80111ee:	4b03      	ldr	r3, [pc, #12]	; (80111fc <tcp_trigger_input_pcb_close+0x1c>)
 80111f0:	701a      	strb	r2, [r3, #0]
}
 80111f2:	bf00      	nop
 80111f4:	46bd      	mov	sp, r7
 80111f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fa:	4770      	bx	lr
 80111fc:	20008f65 	.word	0x20008f65

08011200 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b084      	sub	sp, #16
 8011204:	af00      	add	r7, sp, #0
 8011206:	60f8      	str	r0, [r7, #12]
 8011208:	60b9      	str	r1, [r7, #8]
 801120a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d00a      	beq.n	8011228 <tcp_route+0x28>
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	7a1b      	ldrb	r3, [r3, #8]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d006      	beq.n	8011228 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	7a1b      	ldrb	r3, [r3, #8]
 801121e:	4618      	mov	r0, r3
 8011220:	f7fb fab8 	bl	800c794 <netif_get_by_index>
 8011224:	4603      	mov	r3, r0
 8011226:	e003      	b.n	8011230 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f003 fa0f 	bl	801464c <ip4_route>
 801122e:	4603      	mov	r3, r0
  }
}
 8011230:	4618      	mov	r0, r3
 8011232:	3710      	adds	r7, #16
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011238:	b590      	push	{r4, r7, lr}
 801123a:	b087      	sub	sp, #28
 801123c:	af00      	add	r7, sp, #0
 801123e:	60f8      	str	r0, [r7, #12]
 8011240:	60b9      	str	r1, [r7, #8]
 8011242:	603b      	str	r3, [r7, #0]
 8011244:	4613      	mov	r3, r2
 8011246:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	2b00      	cmp	r3, #0
 801124c:	d105      	bne.n	801125a <tcp_create_segment+0x22>
 801124e:	4b44      	ldr	r3, [pc, #272]	; (8011360 <tcp_create_segment+0x128>)
 8011250:	22a3      	movs	r2, #163	; 0xa3
 8011252:	4944      	ldr	r1, [pc, #272]	; (8011364 <tcp_create_segment+0x12c>)
 8011254:	4844      	ldr	r0, [pc, #272]	; (8011368 <tcp_create_segment+0x130>)
 8011256:	f004 ff95 	bl	8016184 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d105      	bne.n	801126c <tcp_create_segment+0x34>
 8011260:	4b3f      	ldr	r3, [pc, #252]	; (8011360 <tcp_create_segment+0x128>)
 8011262:	22a4      	movs	r2, #164	; 0xa4
 8011264:	4941      	ldr	r1, [pc, #260]	; (801136c <tcp_create_segment+0x134>)
 8011266:	4840      	ldr	r0, [pc, #256]	; (8011368 <tcp_create_segment+0x130>)
 8011268:	f004 ff8c 	bl	8016184 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801126c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011270:	009b      	lsls	r3, r3, #2
 8011272:	b2db      	uxtb	r3, r3
 8011274:	f003 0304 	and.w	r3, r3, #4
 8011278:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801127a:	2003      	movs	r0, #3
 801127c:	f7fa ff04 	bl	800c088 <memp_malloc>
 8011280:	6138      	str	r0, [r7, #16]
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d104      	bne.n	8011292 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011288:	68b8      	ldr	r0, [r7, #8]
 801128a:	f7fb fde3 	bl	800ce54 <pbuf_free>
    return NULL;
 801128e:	2300      	movs	r3, #0
 8011290:	e061      	b.n	8011356 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011298:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801129a:	693b      	ldr	r3, [r7, #16]
 801129c:	2200      	movs	r2, #0
 801129e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	68ba      	ldr	r2, [r7, #8]
 80112a4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	891a      	ldrh	r2, [r3, #8]
 80112aa:	7dfb      	ldrb	r3, [r7, #23]
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	429a      	cmp	r2, r3
 80112b0:	d205      	bcs.n	80112be <tcp_create_segment+0x86>
 80112b2:	4b2b      	ldr	r3, [pc, #172]	; (8011360 <tcp_create_segment+0x128>)
 80112b4:	22b0      	movs	r2, #176	; 0xb0
 80112b6:	492e      	ldr	r1, [pc, #184]	; (8011370 <tcp_create_segment+0x138>)
 80112b8:	482b      	ldr	r0, [pc, #172]	; (8011368 <tcp_create_segment+0x130>)
 80112ba:	f004 ff63 	bl	8016184 <iprintf>
  seg->len = p->tot_len - optlen;
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	891a      	ldrh	r2, [r3, #8]
 80112c2:	7dfb      	ldrb	r3, [r7, #23]
 80112c4:	b29b      	uxth	r3, r3
 80112c6:	1ad3      	subs	r3, r2, r3
 80112c8:	b29a      	uxth	r2, r3
 80112ca:	693b      	ldr	r3, [r7, #16]
 80112cc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80112ce:	2114      	movs	r1, #20
 80112d0:	68b8      	ldr	r0, [r7, #8]
 80112d2:	f7fb fd29 	bl	800cd28 <pbuf_add_header>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d004      	beq.n	80112e6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80112dc:	6938      	ldr	r0, [r7, #16]
 80112de:	f7fd f8ce 	bl	800e47e <tcp_seg_free>
    return NULL;
 80112e2:	2300      	movs	r3, #0
 80112e4:	e037      	b.n	8011356 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	685b      	ldr	r3, [r3, #4]
 80112ea:	685a      	ldr	r2, [r3, #4]
 80112ec:	693b      	ldr	r3, [r7, #16]
 80112ee:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	8ada      	ldrh	r2, [r3, #22]
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	68dc      	ldr	r4, [r3, #12]
 80112f8:	4610      	mov	r0, r2
 80112fa:	f7fa fa4d 	bl	800b798 <lwip_htons>
 80112fe:	4603      	mov	r3, r0
 8011300:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	8b1a      	ldrh	r2, [r3, #24]
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	68dc      	ldr	r4, [r3, #12]
 801130a:	4610      	mov	r0, r2
 801130c:	f7fa fa44 	bl	800b798 <lwip_htons>
 8011310:	4603      	mov	r3, r0
 8011312:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	68dc      	ldr	r4, [r3, #12]
 8011318:	6838      	ldr	r0, [r7, #0]
 801131a:	f7fa fa52 	bl	800b7c2 <lwip_htonl>
 801131e:	4603      	mov	r3, r0
 8011320:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011322:	7dfb      	ldrb	r3, [r7, #23]
 8011324:	089b      	lsrs	r3, r3, #2
 8011326:	b2db      	uxtb	r3, r3
 8011328:	b29b      	uxth	r3, r3
 801132a:	3305      	adds	r3, #5
 801132c:	b29b      	uxth	r3, r3
 801132e:	031b      	lsls	r3, r3, #12
 8011330:	b29a      	uxth	r2, r3
 8011332:	79fb      	ldrb	r3, [r7, #7]
 8011334:	b29b      	uxth	r3, r3
 8011336:	4313      	orrs	r3, r2
 8011338:	b29a      	uxth	r2, r3
 801133a:	693b      	ldr	r3, [r7, #16]
 801133c:	68dc      	ldr	r4, [r3, #12]
 801133e:	4610      	mov	r0, r2
 8011340:	f7fa fa2a 	bl	800b798 <lwip_htons>
 8011344:	4603      	mov	r3, r0
 8011346:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	68db      	ldr	r3, [r3, #12]
 801134c:	2200      	movs	r2, #0
 801134e:	749a      	strb	r2, [r3, #18]
 8011350:	2200      	movs	r2, #0
 8011352:	74da      	strb	r2, [r3, #19]
  return seg;
 8011354:	693b      	ldr	r3, [r7, #16]
}
 8011356:	4618      	mov	r0, r3
 8011358:	371c      	adds	r7, #28
 801135a:	46bd      	mov	sp, r7
 801135c:	bd90      	pop	{r4, r7, pc}
 801135e:	bf00      	nop
 8011360:	080188f0 	.word	0x080188f0
 8011364:	08018924 	.word	0x08018924
 8011368:	08018944 	.word	0x08018944
 801136c:	0801896c 	.word	0x0801896c
 8011370:	08018990 	.word	0x08018990

08011374 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011374:	b590      	push	{r4, r7, lr}
 8011376:	b08b      	sub	sp, #44	; 0x2c
 8011378:	af02      	add	r7, sp, #8
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	460b      	mov	r3, r1
 801137e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011380:	2300      	movs	r3, #0
 8011382:	61fb      	str	r3, [r7, #28]
 8011384:	2300      	movs	r3, #0
 8011386:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011388:	2300      	movs	r3, #0
 801138a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d106      	bne.n	80113a0 <tcp_split_unsent_seg+0x2c>
 8011392:	4b95      	ldr	r3, [pc, #596]	; (80115e8 <tcp_split_unsent_seg+0x274>)
 8011394:	f240 324b 	movw	r2, #843	; 0x34b
 8011398:	4994      	ldr	r1, [pc, #592]	; (80115ec <tcp_split_unsent_seg+0x278>)
 801139a:	4895      	ldr	r0, [pc, #596]	; (80115f0 <tcp_split_unsent_seg+0x27c>)
 801139c:	f004 fef2 	bl	8016184 <iprintf>

  useg = pcb->unsent;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113a4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d102      	bne.n	80113b2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80113ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113b0:	e116      	b.n	80115e0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80113b2:	887b      	ldrh	r3, [r7, #2]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d109      	bne.n	80113cc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80113b8:	4b8b      	ldr	r3, [pc, #556]	; (80115e8 <tcp_split_unsent_seg+0x274>)
 80113ba:	f240 3253 	movw	r2, #851	; 0x353
 80113be:	498d      	ldr	r1, [pc, #564]	; (80115f4 <tcp_split_unsent_seg+0x280>)
 80113c0:	488b      	ldr	r0, [pc, #556]	; (80115f0 <tcp_split_unsent_seg+0x27c>)
 80113c2:	f004 fedf 	bl	8016184 <iprintf>
    return ERR_VAL;
 80113c6:	f06f 0305 	mvn.w	r3, #5
 80113ca:	e109      	b.n	80115e0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	891b      	ldrh	r3, [r3, #8]
 80113d0:	887a      	ldrh	r2, [r7, #2]
 80113d2:	429a      	cmp	r2, r3
 80113d4:	d301      	bcc.n	80113da <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80113d6:	2300      	movs	r3, #0
 80113d8:	e102      	b.n	80115e0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113de:	887a      	ldrh	r2, [r7, #2]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d906      	bls.n	80113f2 <tcp_split_unsent_seg+0x7e>
 80113e4:	4b80      	ldr	r3, [pc, #512]	; (80115e8 <tcp_split_unsent_seg+0x274>)
 80113e6:	f240 325b 	movw	r2, #859	; 0x35b
 80113ea:	4983      	ldr	r1, [pc, #524]	; (80115f8 <tcp_split_unsent_seg+0x284>)
 80113ec:	4880      	ldr	r0, [pc, #512]	; (80115f0 <tcp_split_unsent_seg+0x27c>)
 80113ee:	f004 fec9 	bl	8016184 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	891b      	ldrh	r3, [r3, #8]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d106      	bne.n	8011408 <tcp_split_unsent_seg+0x94>
 80113fa:	4b7b      	ldr	r3, [pc, #492]	; (80115e8 <tcp_split_unsent_seg+0x274>)
 80113fc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011400:	497e      	ldr	r1, [pc, #504]	; (80115fc <tcp_split_unsent_seg+0x288>)
 8011402:	487b      	ldr	r0, [pc, #492]	; (80115f0 <tcp_split_unsent_seg+0x27c>)
 8011404:	f004 febe 	bl	8016184 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	7a9b      	ldrb	r3, [r3, #10]
 801140c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801140e:	7bfb      	ldrb	r3, [r7, #15]
 8011410:	009b      	lsls	r3, r3, #2
 8011412:	b2db      	uxtb	r3, r3
 8011414:	f003 0304 	and.w	r3, r3, #4
 8011418:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	891a      	ldrh	r2, [r3, #8]
 801141e:	887b      	ldrh	r3, [r7, #2]
 8011420:	1ad3      	subs	r3, r2, r3
 8011422:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011424:	7bbb      	ldrb	r3, [r7, #14]
 8011426:	b29a      	uxth	r2, r3
 8011428:	89bb      	ldrh	r3, [r7, #12]
 801142a:	4413      	add	r3, r2
 801142c:	b29b      	uxth	r3, r3
 801142e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011432:	4619      	mov	r1, r3
 8011434:	2036      	movs	r0, #54	; 0x36
 8011436:	f7fb fa29 	bl	800c88c <pbuf_alloc>
 801143a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	2b00      	cmp	r3, #0
 8011440:	f000 80b7 	beq.w	80115b2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	891a      	ldrh	r2, [r3, #8]
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	891b      	ldrh	r3, [r3, #8]
 801144e:	1ad3      	subs	r3, r2, r3
 8011450:	b29a      	uxth	r2, r3
 8011452:	887b      	ldrh	r3, [r7, #2]
 8011454:	4413      	add	r3, r2
 8011456:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	6858      	ldr	r0, [r3, #4]
 801145c:	693b      	ldr	r3, [r7, #16]
 801145e:	685a      	ldr	r2, [r3, #4]
 8011460:	7bbb      	ldrb	r3, [r7, #14]
 8011462:	18d1      	adds	r1, r2, r3
 8011464:	897b      	ldrh	r3, [r7, #10]
 8011466:	89ba      	ldrh	r2, [r7, #12]
 8011468:	f7fb feee 	bl	800d248 <pbuf_copy_partial>
 801146c:	4603      	mov	r3, r0
 801146e:	461a      	mov	r2, r3
 8011470:	89bb      	ldrh	r3, [r7, #12]
 8011472:	4293      	cmp	r3, r2
 8011474:	f040 809f 	bne.w	80115b6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	68db      	ldr	r3, [r3, #12]
 801147c:	899b      	ldrh	r3, [r3, #12]
 801147e:	b29b      	uxth	r3, r3
 8011480:	4618      	mov	r0, r3
 8011482:	f7fa f989 	bl	800b798 <lwip_htons>
 8011486:	4603      	mov	r3, r0
 8011488:	b2db      	uxtb	r3, r3
 801148a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801148e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011490:	2300      	movs	r3, #0
 8011492:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011494:	7efb      	ldrb	r3, [r7, #27]
 8011496:	f003 0308 	and.w	r3, r3, #8
 801149a:	2b00      	cmp	r3, #0
 801149c:	d007      	beq.n	80114ae <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801149e:	7efb      	ldrb	r3, [r7, #27]
 80114a0:	f023 0308 	bic.w	r3, r3, #8
 80114a4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80114a6:	7ebb      	ldrb	r3, [r7, #26]
 80114a8:	f043 0308 	orr.w	r3, r3, #8
 80114ac:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80114ae:	7efb      	ldrb	r3, [r7, #27]
 80114b0:	f003 0301 	and.w	r3, r3, #1
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d007      	beq.n	80114c8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80114b8:	7efb      	ldrb	r3, [r7, #27]
 80114ba:	f023 0301 	bic.w	r3, r3, #1
 80114be:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80114c0:	7ebb      	ldrb	r3, [r7, #26]
 80114c2:	f043 0301 	orr.w	r3, r3, #1
 80114c6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	4618      	mov	r0, r3
 80114d0:	f7fa f977 	bl	800b7c2 <lwip_htonl>
 80114d4:	4602      	mov	r2, r0
 80114d6:	887b      	ldrh	r3, [r7, #2]
 80114d8:	18d1      	adds	r1, r2, r3
 80114da:	7eba      	ldrb	r2, [r7, #26]
 80114dc:	7bfb      	ldrb	r3, [r7, #15]
 80114de:	9300      	str	r3, [sp, #0]
 80114e0:	460b      	mov	r3, r1
 80114e2:	6939      	ldr	r1, [r7, #16]
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f7ff fea7 	bl	8011238 <tcp_create_segment>
 80114ea:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80114ec:	69fb      	ldr	r3, [r7, #28]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d063      	beq.n	80115ba <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80114f2:	697b      	ldr	r3, [r7, #20]
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fb fd34 	bl	800cf64 <pbuf_clen>
 80114fc:	4603      	mov	r3, r0
 80114fe:	461a      	mov	r2, r3
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011506:	1a9b      	subs	r3, r3, r2
 8011508:	b29a      	uxth	r2, r3
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	6858      	ldr	r0, [r3, #4]
 8011514:	697b      	ldr	r3, [r7, #20]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	891a      	ldrh	r2, [r3, #8]
 801151a:	89bb      	ldrh	r3, [r7, #12]
 801151c:	1ad3      	subs	r3, r2, r3
 801151e:	b29b      	uxth	r3, r3
 8011520:	4619      	mov	r1, r3
 8011522:	f7fb fb11 	bl	800cb48 <pbuf_realloc>
  useg->len -= remainder;
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	891a      	ldrh	r2, [r3, #8]
 801152a:	89bb      	ldrh	r3, [r7, #12]
 801152c:	1ad3      	subs	r3, r2, r3
 801152e:	b29a      	uxth	r2, r3
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	899b      	ldrh	r3, [r3, #12]
 801153a:	b29c      	uxth	r4, r3
 801153c:	7efb      	ldrb	r3, [r7, #27]
 801153e:	b29b      	uxth	r3, r3
 8011540:	4618      	mov	r0, r3
 8011542:	f7fa f929 	bl	800b798 <lwip_htons>
 8011546:	4603      	mov	r3, r0
 8011548:	461a      	mov	r2, r3
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	68db      	ldr	r3, [r3, #12]
 801154e:	4322      	orrs	r2, r4
 8011550:	b292      	uxth	r2, r2
 8011552:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	685b      	ldr	r3, [r3, #4]
 8011558:	4618      	mov	r0, r3
 801155a:	f7fb fd03 	bl	800cf64 <pbuf_clen>
 801155e:	4603      	mov	r3, r0
 8011560:	461a      	mov	r2, r3
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011568:	4413      	add	r3, r2
 801156a:	b29a      	uxth	r2, r3
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	685b      	ldr	r3, [r3, #4]
 8011576:	4618      	mov	r0, r3
 8011578:	f7fb fcf4 	bl	800cf64 <pbuf_clen>
 801157c:	4603      	mov	r3, r0
 801157e:	461a      	mov	r2, r3
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011586:	4413      	add	r3, r2
 8011588:	b29a      	uxth	r2, r3
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011590:	697b      	ldr	r3, [r7, #20]
 8011592:	681a      	ldr	r2, [r3, #0]
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011598:	697b      	ldr	r3, [r7, #20]
 801159a:	69fa      	ldr	r2, [r7, #28]
 801159c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801159e:	69fb      	ldr	r3, [r7, #28]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d103      	bne.n	80115ae <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2200      	movs	r2, #0
 80115aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80115ae:	2300      	movs	r3, #0
 80115b0:	e016      	b.n	80115e0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80115b2:	bf00      	nop
 80115b4:	e002      	b.n	80115bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80115b6:	bf00      	nop
 80115b8:	e000      	b.n	80115bc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80115ba:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80115bc:	69fb      	ldr	r3, [r7, #28]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d006      	beq.n	80115d0 <tcp_split_unsent_seg+0x25c>
 80115c2:	4b09      	ldr	r3, [pc, #36]	; (80115e8 <tcp_split_unsent_seg+0x274>)
 80115c4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80115c8:	490d      	ldr	r1, [pc, #52]	; (8011600 <tcp_split_unsent_seg+0x28c>)
 80115ca:	4809      	ldr	r0, [pc, #36]	; (80115f0 <tcp_split_unsent_seg+0x27c>)
 80115cc:	f004 fdda 	bl	8016184 <iprintf>
  if (p != NULL) {
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d002      	beq.n	80115dc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80115d6:	6938      	ldr	r0, [r7, #16]
 80115d8:	f7fb fc3c 	bl	800ce54 <pbuf_free>
  }

  return ERR_MEM;
 80115dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	3724      	adds	r7, #36	; 0x24
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd90      	pop	{r4, r7, pc}
 80115e8:	080188f0 	.word	0x080188f0
 80115ec:	08018c84 	.word	0x08018c84
 80115f0:	08018944 	.word	0x08018944
 80115f4:	08018ca8 	.word	0x08018ca8
 80115f8:	08018ccc 	.word	0x08018ccc
 80115fc:	08018cdc 	.word	0x08018cdc
 8011600:	08018cec 	.word	0x08018cec

08011604 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011604:	b590      	push	{r4, r7, lr}
 8011606:	b085      	sub	sp, #20
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2b00      	cmp	r3, #0
 8011610:	d106      	bne.n	8011620 <tcp_send_fin+0x1c>
 8011612:	4b21      	ldr	r3, [pc, #132]	; (8011698 <tcp_send_fin+0x94>)
 8011614:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011618:	4920      	ldr	r1, [pc, #128]	; (801169c <tcp_send_fin+0x98>)
 801161a:	4821      	ldr	r0, [pc, #132]	; (80116a0 <tcp_send_fin+0x9c>)
 801161c:	f004 fdb2 	bl	8016184 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011624:	2b00      	cmp	r3, #0
 8011626:	d02e      	beq.n	8011686 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801162c:	60fb      	str	r3, [r7, #12]
 801162e:	e002      	b.n	8011636 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d1f8      	bne.n	8011630 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	68db      	ldr	r3, [r3, #12]
 8011642:	899b      	ldrh	r3, [r3, #12]
 8011644:	b29b      	uxth	r3, r3
 8011646:	4618      	mov	r0, r3
 8011648:	f7fa f8a6 	bl	800b798 <lwip_htons>
 801164c:	4603      	mov	r3, r0
 801164e:	b2db      	uxtb	r3, r3
 8011650:	f003 0307 	and.w	r3, r3, #7
 8011654:	2b00      	cmp	r3, #0
 8011656:	d116      	bne.n	8011686 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	68db      	ldr	r3, [r3, #12]
 801165c:	899b      	ldrh	r3, [r3, #12]
 801165e:	b29c      	uxth	r4, r3
 8011660:	2001      	movs	r0, #1
 8011662:	f7fa f899 	bl	800b798 <lwip_htons>
 8011666:	4603      	mov	r3, r0
 8011668:	461a      	mov	r2, r3
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	4322      	orrs	r2, r4
 8011670:	b292      	uxth	r2, r2
 8011672:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	8b5b      	ldrh	r3, [r3, #26]
 8011678:	f043 0320 	orr.w	r3, r3, #32
 801167c:	b29a      	uxth	r2, r3
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011682:	2300      	movs	r3, #0
 8011684:	e004      	b.n	8011690 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011686:	2101      	movs	r1, #1
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f000 f80b 	bl	80116a4 <tcp_enqueue_flags>
 801168e:	4603      	mov	r3, r0
}
 8011690:	4618      	mov	r0, r3
 8011692:	3714      	adds	r7, #20
 8011694:	46bd      	mov	sp, r7
 8011696:	bd90      	pop	{r4, r7, pc}
 8011698:	080188f0 	.word	0x080188f0
 801169c:	08018cf8 	.word	0x08018cf8
 80116a0:	08018944 	.word	0x08018944

080116a4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b08a      	sub	sp, #40	; 0x28
 80116a8:	af02      	add	r7, sp, #8
 80116aa:	6078      	str	r0, [r7, #4]
 80116ac:	460b      	mov	r3, r1
 80116ae:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80116b0:	2300      	movs	r3, #0
 80116b2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80116b4:	2300      	movs	r3, #0
 80116b6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80116b8:	78fb      	ldrb	r3, [r7, #3]
 80116ba:	f003 0303 	and.w	r3, r3, #3
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d106      	bne.n	80116d0 <tcp_enqueue_flags+0x2c>
 80116c2:	4b67      	ldr	r3, [pc, #412]	; (8011860 <tcp_enqueue_flags+0x1bc>)
 80116c4:	f240 4211 	movw	r2, #1041	; 0x411
 80116c8:	4966      	ldr	r1, [pc, #408]	; (8011864 <tcp_enqueue_flags+0x1c0>)
 80116ca:	4867      	ldr	r0, [pc, #412]	; (8011868 <tcp_enqueue_flags+0x1c4>)
 80116cc:	f004 fd5a 	bl	8016184 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d106      	bne.n	80116e4 <tcp_enqueue_flags+0x40>
 80116d6:	4b62      	ldr	r3, [pc, #392]	; (8011860 <tcp_enqueue_flags+0x1bc>)
 80116d8:	f240 4213 	movw	r2, #1043	; 0x413
 80116dc:	4963      	ldr	r1, [pc, #396]	; (801186c <tcp_enqueue_flags+0x1c8>)
 80116de:	4862      	ldr	r0, [pc, #392]	; (8011868 <tcp_enqueue_flags+0x1c4>)
 80116e0:	f004 fd50 	bl	8016184 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80116e4:	78fb      	ldrb	r3, [r7, #3]
 80116e6:	f003 0302 	and.w	r3, r3, #2
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d001      	beq.n	80116f2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80116ee:	2301      	movs	r3, #1
 80116f0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80116f2:	7ffb      	ldrb	r3, [r7, #31]
 80116f4:	009b      	lsls	r3, r3, #2
 80116f6:	b2db      	uxtb	r3, r3
 80116f8:	f003 0304 	and.w	r3, r3, #4
 80116fc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80116fe:	7dfb      	ldrb	r3, [r7, #23]
 8011700:	b29b      	uxth	r3, r3
 8011702:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011706:	4619      	mov	r1, r3
 8011708:	2036      	movs	r0, #54	; 0x36
 801170a:	f7fb f8bf 	bl	800c88c <pbuf_alloc>
 801170e:	6138      	str	r0, [r7, #16]
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d109      	bne.n	801172a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	8b5b      	ldrh	r3, [r3, #26]
 801171a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801171e:	b29a      	uxth	r2, r3
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011728:	e095      	b.n	8011856 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	895a      	ldrh	r2, [r3, #10]
 801172e:	7dfb      	ldrb	r3, [r7, #23]
 8011730:	b29b      	uxth	r3, r3
 8011732:	429a      	cmp	r2, r3
 8011734:	d206      	bcs.n	8011744 <tcp_enqueue_flags+0xa0>
 8011736:	4b4a      	ldr	r3, [pc, #296]	; (8011860 <tcp_enqueue_flags+0x1bc>)
 8011738:	f240 4239 	movw	r2, #1081	; 0x439
 801173c:	494c      	ldr	r1, [pc, #304]	; (8011870 <tcp_enqueue_flags+0x1cc>)
 801173e:	484a      	ldr	r0, [pc, #296]	; (8011868 <tcp_enqueue_flags+0x1c4>)
 8011740:	f004 fd20 	bl	8016184 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011748:	78fa      	ldrb	r2, [r7, #3]
 801174a:	7ffb      	ldrb	r3, [r7, #31]
 801174c:	9300      	str	r3, [sp, #0]
 801174e:	460b      	mov	r3, r1
 8011750:	6939      	ldr	r1, [r7, #16]
 8011752:	6878      	ldr	r0, [r7, #4]
 8011754:	f7ff fd70 	bl	8011238 <tcp_create_segment>
 8011758:	60f8      	str	r0, [r7, #12]
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d109      	bne.n	8011774 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	8b5b      	ldrh	r3, [r3, #26]
 8011764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011768:	b29a      	uxth	r2, r3
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801176e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011772:	e070      	b.n	8011856 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	68db      	ldr	r3, [r3, #12]
 8011778:	f003 0303 	and.w	r3, r3, #3
 801177c:	2b00      	cmp	r3, #0
 801177e:	d006      	beq.n	801178e <tcp_enqueue_flags+0xea>
 8011780:	4b37      	ldr	r3, [pc, #220]	; (8011860 <tcp_enqueue_flags+0x1bc>)
 8011782:	f240 4242 	movw	r2, #1090	; 0x442
 8011786:	493b      	ldr	r1, [pc, #236]	; (8011874 <tcp_enqueue_flags+0x1d0>)
 8011788:	4837      	ldr	r0, [pc, #220]	; (8011868 <tcp_enqueue_flags+0x1c4>)
 801178a:	f004 fcfb 	bl	8016184 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	891b      	ldrh	r3, [r3, #8]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d006      	beq.n	80117a4 <tcp_enqueue_flags+0x100>
 8011796:	4b32      	ldr	r3, [pc, #200]	; (8011860 <tcp_enqueue_flags+0x1bc>)
 8011798:	f240 4243 	movw	r2, #1091	; 0x443
 801179c:	4936      	ldr	r1, [pc, #216]	; (8011878 <tcp_enqueue_flags+0x1d4>)
 801179e:	4832      	ldr	r0, [pc, #200]	; (8011868 <tcp_enqueue_flags+0x1c4>)
 80117a0:	f004 fcf0 	bl	8016184 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d103      	bne.n	80117b4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	68fa      	ldr	r2, [r7, #12]
 80117b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80117b2:	e00d      	b.n	80117d0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117b8:	61bb      	str	r3, [r7, #24]
 80117ba:	e002      	b.n	80117c2 <tcp_enqueue_flags+0x11e>
 80117bc:	69bb      	ldr	r3, [r7, #24]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	61bb      	str	r3, [r7, #24]
 80117c2:	69bb      	ldr	r3, [r7, #24]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d1f8      	bne.n	80117bc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80117ca:	69bb      	ldr	r3, [r7, #24]
 80117cc:	68fa      	ldr	r2, [r7, #12]
 80117ce:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	2200      	movs	r2, #0
 80117d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80117d8:	78fb      	ldrb	r3, [r7, #3]
 80117da:	f003 0302 	and.w	r3, r3, #2
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d104      	bne.n	80117ec <tcp_enqueue_flags+0x148>
 80117e2:	78fb      	ldrb	r3, [r7, #3]
 80117e4:	f003 0301 	and.w	r3, r3, #1
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d004      	beq.n	80117f6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117f0:	1c5a      	adds	r2, r3, #1
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80117f6:	78fb      	ldrb	r3, [r7, #3]
 80117f8:	f003 0301 	and.w	r3, r3, #1
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d006      	beq.n	801180e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	8b5b      	ldrh	r3, [r3, #26]
 8011804:	f043 0320 	orr.w	r3, r3, #32
 8011808:	b29a      	uxth	r2, r3
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	685b      	ldr	r3, [r3, #4]
 8011812:	4618      	mov	r0, r3
 8011814:	f7fb fba6 	bl	800cf64 <pbuf_clen>
 8011818:	4603      	mov	r3, r0
 801181a:	461a      	mov	r2, r3
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011822:	4413      	add	r3, r2
 8011824:	b29a      	uxth	r2, r3
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011832:	2b00      	cmp	r3, #0
 8011834:	d00e      	beq.n	8011854 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801183a:	2b00      	cmp	r3, #0
 801183c:	d10a      	bne.n	8011854 <tcp_enqueue_flags+0x1b0>
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011842:	2b00      	cmp	r3, #0
 8011844:	d106      	bne.n	8011854 <tcp_enqueue_flags+0x1b0>
 8011846:	4b06      	ldr	r3, [pc, #24]	; (8011860 <tcp_enqueue_flags+0x1bc>)
 8011848:	f240 4265 	movw	r2, #1125	; 0x465
 801184c:	490b      	ldr	r1, [pc, #44]	; (801187c <tcp_enqueue_flags+0x1d8>)
 801184e:	4806      	ldr	r0, [pc, #24]	; (8011868 <tcp_enqueue_flags+0x1c4>)
 8011850:	f004 fc98 	bl	8016184 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011854:	2300      	movs	r3, #0
}
 8011856:	4618      	mov	r0, r3
 8011858:	3720      	adds	r7, #32
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	080188f0 	.word	0x080188f0
 8011864:	08018d14 	.word	0x08018d14
 8011868:	08018944 	.word	0x08018944
 801186c:	08018d6c 	.word	0x08018d6c
 8011870:	08018d8c 	.word	0x08018d8c
 8011874:	08018dc8 	.word	0x08018dc8
 8011878:	08018de0 	.word	0x08018de0
 801187c:	08018e0c 	.word	0x08018e0c

08011880 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011880:	b5b0      	push	{r4, r5, r7, lr}
 8011882:	b08a      	sub	sp, #40	; 0x28
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d106      	bne.n	801189c <tcp_output+0x1c>
 801188e:	4b8a      	ldr	r3, [pc, #552]	; (8011ab8 <tcp_output+0x238>)
 8011890:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011894:	4989      	ldr	r1, [pc, #548]	; (8011abc <tcp_output+0x23c>)
 8011896:	488a      	ldr	r0, [pc, #552]	; (8011ac0 <tcp_output+0x240>)
 8011898:	f004 fc74 	bl	8016184 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	7d1b      	ldrb	r3, [r3, #20]
 80118a0:	2b01      	cmp	r3, #1
 80118a2:	d106      	bne.n	80118b2 <tcp_output+0x32>
 80118a4:	4b84      	ldr	r3, [pc, #528]	; (8011ab8 <tcp_output+0x238>)
 80118a6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80118aa:	4986      	ldr	r1, [pc, #536]	; (8011ac4 <tcp_output+0x244>)
 80118ac:	4884      	ldr	r0, [pc, #528]	; (8011ac0 <tcp_output+0x240>)
 80118ae:	f004 fc69 	bl	8016184 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80118b2:	4b85      	ldr	r3, [pc, #532]	; (8011ac8 <tcp_output+0x248>)
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	429a      	cmp	r2, r3
 80118ba:	d101      	bne.n	80118c0 <tcp_output+0x40>
    return ERR_OK;
 80118bc:	2300      	movs	r3, #0
 80118be:	e1ce      	b.n	8011c5e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118cc:	4293      	cmp	r3, r2
 80118ce:	bf28      	it	cs
 80118d0:	4613      	movcs	r3, r2
 80118d2:	b29b      	uxth	r3, r3
 80118d4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118da:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80118dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d10b      	bne.n	80118fa <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	8b5b      	ldrh	r3, [r3, #26]
 80118e6:	f003 0302 	and.w	r3, r3, #2
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	f000 81aa 	beq.w	8011c44 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f000 fdcb 	bl	801248c <tcp_send_empty_ack>
 80118f6:	4603      	mov	r3, r0
 80118f8:	e1b1      	b.n	8011c5e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80118fa:	6879      	ldr	r1, [r7, #4]
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	3304      	adds	r3, #4
 8011900:	461a      	mov	r2, r3
 8011902:	6878      	ldr	r0, [r7, #4]
 8011904:	f7ff fc7c 	bl	8011200 <tcp_route>
 8011908:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d102      	bne.n	8011916 <tcp_output+0x96>
    return ERR_RTE;
 8011910:	f06f 0303 	mvn.w	r3, #3
 8011914:	e1a3      	b.n	8011c5e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d003      	beq.n	8011924 <tcp_output+0xa4>
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	681b      	ldr	r3, [r3, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d111      	bne.n	8011948 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011924:	697b      	ldr	r3, [r7, #20]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d002      	beq.n	8011930 <tcp_output+0xb0>
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	3304      	adds	r3, #4
 801192e:	e000      	b.n	8011932 <tcp_output+0xb2>
 8011930:	2300      	movs	r3, #0
 8011932:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011934:	693b      	ldr	r3, [r7, #16]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d102      	bne.n	8011940 <tcp_output+0xc0>
      return ERR_RTE;
 801193a:	f06f 0303 	mvn.w	r3, #3
 801193e:	e18e      	b.n	8011c5e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011940:	693b      	ldr	r3, [r7, #16]
 8011942:	681a      	ldr	r2, [r3, #0]
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801194a:	68db      	ldr	r3, [r3, #12]
 801194c:	685b      	ldr	r3, [r3, #4]
 801194e:	4618      	mov	r0, r3
 8011950:	f7f9 ff37 	bl	800b7c2 <lwip_htonl>
 8011954:	4602      	mov	r2, r0
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801195a:	1ad3      	subs	r3, r2, r3
 801195c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801195e:	8912      	ldrh	r2, [r2, #8]
 8011960:	4413      	add	r3, r2
 8011962:	69ba      	ldr	r2, [r7, #24]
 8011964:	429a      	cmp	r2, r3
 8011966:	d227      	bcs.n	80119b8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801196e:	461a      	mov	r2, r3
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	4293      	cmp	r3, r2
 8011974:	d114      	bne.n	80119a0 <tcp_output+0x120>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801197a:	2b00      	cmp	r3, #0
 801197c:	d110      	bne.n	80119a0 <tcp_output+0x120>
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011984:	2b00      	cmp	r3, #0
 8011986:	d10b      	bne.n	80119a0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	2200      	movs	r2, #0
 801198c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2201      	movs	r2, #1
 8011994:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2200      	movs	r2, #0
 801199c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	8b5b      	ldrh	r3, [r3, #26]
 80119a4:	f003 0302 	and.w	r3, r3, #2
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	f000 814d 	beq.w	8011c48 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80119ae:	6878      	ldr	r0, [r7, #4]
 80119b0:	f000 fd6c 	bl	801248c <tcp_send_empty_ack>
 80119b4:	4603      	mov	r3, r0
 80119b6:	e152      	b.n	8011c5e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2200      	movs	r2, #0
 80119bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119c4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80119c6:	6a3b      	ldr	r3, [r7, #32]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	f000 811c 	beq.w	8011c06 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80119ce:	e002      	b.n	80119d6 <tcp_output+0x156>
 80119d0:	6a3b      	ldr	r3, [r7, #32]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	623b      	str	r3, [r7, #32]
 80119d6:	6a3b      	ldr	r3, [r7, #32]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d1f8      	bne.n	80119d0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80119de:	e112      	b.n	8011c06 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80119e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e2:	68db      	ldr	r3, [r3, #12]
 80119e4:	899b      	ldrh	r3, [r3, #12]
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7f9 fed5 	bl	800b798 <lwip_htons>
 80119ee:	4603      	mov	r3, r0
 80119f0:	b2db      	uxtb	r3, r3
 80119f2:	f003 0304 	and.w	r3, r3, #4
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d006      	beq.n	8011a08 <tcp_output+0x188>
 80119fa:	4b2f      	ldr	r3, [pc, #188]	; (8011ab8 <tcp_output+0x238>)
 80119fc:	f240 5236 	movw	r2, #1334	; 0x536
 8011a00:	4932      	ldr	r1, [pc, #200]	; (8011acc <tcp_output+0x24c>)
 8011a02:	482f      	ldr	r0, [pc, #188]	; (8011ac0 <tcp_output+0x240>)
 8011a04:	f004 fbbe 	bl	8016184 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d01f      	beq.n	8011a50 <tcp_output+0x1d0>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	8b5b      	ldrh	r3, [r3, #26]
 8011a14:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d119      	bne.n	8011a50 <tcp_output+0x1d0>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d00b      	beq.n	8011a3c <tcp_output+0x1bc>
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d110      	bne.n	8011a50 <tcp_output+0x1d0>
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a32:	891a      	ldrh	r2, [r3, #8]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d209      	bcs.n	8011a50 <tcp_output+0x1d0>
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d004      	beq.n	8011a50 <tcp_output+0x1d0>
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a4c:	2b08      	cmp	r3, #8
 8011a4e:	d901      	bls.n	8011a54 <tcp_output+0x1d4>
 8011a50:	2301      	movs	r3, #1
 8011a52:	e000      	b.n	8011a56 <tcp_output+0x1d6>
 8011a54:	2300      	movs	r3, #0
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d106      	bne.n	8011a68 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	8b5b      	ldrh	r3, [r3, #26]
 8011a5e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	f000 80e4 	beq.w	8011c30 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	7d1b      	ldrb	r3, [r3, #20]
 8011a6c:	2b02      	cmp	r3, #2
 8011a6e:	d00d      	beq.n	8011a8c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	899b      	ldrh	r3, [r3, #12]
 8011a76:	b29c      	uxth	r4, r3
 8011a78:	2010      	movs	r0, #16
 8011a7a:	f7f9 fe8d 	bl	800b798 <lwip_htons>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	461a      	mov	r2, r3
 8011a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a84:	68db      	ldr	r3, [r3, #12]
 8011a86:	4322      	orrs	r2, r4
 8011a88:	b292      	uxth	r2, r2
 8011a8a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011a8c:	697a      	ldr	r2, [r7, #20]
 8011a8e:	6879      	ldr	r1, [r7, #4]
 8011a90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a92:	f000 f909 	bl	8011ca8 <tcp_output_segment>
 8011a96:	4603      	mov	r3, r0
 8011a98:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d016      	beq.n	8011ad0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	8b5b      	ldrh	r3, [r3, #26]
 8011aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011aaa:	b29a      	uxth	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	835a      	strh	r2, [r3, #26]
      return err;
 8011ab0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ab4:	e0d3      	b.n	8011c5e <tcp_output+0x3de>
 8011ab6:	bf00      	nop
 8011ab8:	080188f0 	.word	0x080188f0
 8011abc:	08018e34 	.word	0x08018e34
 8011ac0:	08018944 	.word	0x08018944
 8011ac4:	08018e4c 	.word	0x08018e4c
 8011ac8:	20008f6c 	.word	0x20008f6c
 8011acc:	08018e74 	.word	0x08018e74
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ad2:	681a      	ldr	r2, [r3, #0]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	7d1b      	ldrb	r3, [r3, #20]
 8011adc:	2b02      	cmp	r3, #2
 8011ade:	d006      	beq.n	8011aee <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	8b5b      	ldrh	r3, [r3, #26]
 8011ae4:	f023 0303 	bic.w	r3, r3, #3
 8011ae8:	b29a      	uxth	r2, r3
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011af0:	68db      	ldr	r3, [r3, #12]
 8011af2:	685b      	ldr	r3, [r3, #4]
 8011af4:	4618      	mov	r0, r3
 8011af6:	f7f9 fe64 	bl	800b7c2 <lwip_htonl>
 8011afa:	4604      	mov	r4, r0
 8011afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afe:	891b      	ldrh	r3, [r3, #8]
 8011b00:	461d      	mov	r5, r3
 8011b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b04:	68db      	ldr	r3, [r3, #12]
 8011b06:	899b      	ldrh	r3, [r3, #12]
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7f9 fe44 	bl	800b798 <lwip_htons>
 8011b10:	4603      	mov	r3, r0
 8011b12:	b2db      	uxtb	r3, r3
 8011b14:	f003 0303 	and.w	r3, r3, #3
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d001      	beq.n	8011b20 <tcp_output+0x2a0>
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e000      	b.n	8011b22 <tcp_output+0x2a2>
 8011b20:	2300      	movs	r3, #0
 8011b22:	442b      	add	r3, r5
 8011b24:	4423      	add	r3, r4
 8011b26:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	1ad3      	subs	r3, r2, r3
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	da02      	bge.n	8011b3a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	68ba      	ldr	r2, [r7, #8]
 8011b38:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3c:	891b      	ldrh	r3, [r3, #8]
 8011b3e:	461c      	mov	r4, r3
 8011b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b42:	68db      	ldr	r3, [r3, #12]
 8011b44:	899b      	ldrh	r3, [r3, #12]
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7f9 fe25 	bl	800b798 <lwip_htons>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	b2db      	uxtb	r3, r3
 8011b52:	f003 0303 	and.w	r3, r3, #3
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d001      	beq.n	8011b5e <tcp_output+0x2de>
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	e000      	b.n	8011b60 <tcp_output+0x2e0>
 8011b5e:	2300      	movs	r3, #0
 8011b60:	4423      	add	r3, r4
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d049      	beq.n	8011bfa <tcp_output+0x37a>
      seg->next = NULL;
 8011b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b68:	2200      	movs	r2, #0
 8011b6a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d105      	bne.n	8011b80 <tcp_output+0x300>
        pcb->unacked = seg;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b78:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7c:	623b      	str	r3, [r7, #32]
 8011b7e:	e03f      	b.n	8011c00 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	685b      	ldr	r3, [r3, #4]
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7f9 fe1b 	bl	800b7c2 <lwip_htonl>
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	6a3b      	ldr	r3, [r7, #32]
 8011b90:	68db      	ldr	r3, [r3, #12]
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	4618      	mov	r0, r3
 8011b96:	f7f9 fe14 	bl	800b7c2 <lwip_htonl>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	1ae3      	subs	r3, r4, r3
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	da24      	bge.n	8011bec <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	3370      	adds	r3, #112	; 0x70
 8011ba6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011ba8:	e002      	b.n	8011bb0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011baa:	69fb      	ldr	r3, [r7, #28]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011bb0:	69fb      	ldr	r3, [r7, #28]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d011      	beq.n	8011bdc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011bb8:	69fb      	ldr	r3, [r7, #28]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	68db      	ldr	r3, [r3, #12]
 8011bbe:	685b      	ldr	r3, [r3, #4]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7f9 fdfe 	bl	800b7c2 <lwip_htonl>
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bca:	68db      	ldr	r3, [r3, #12]
 8011bcc:	685b      	ldr	r3, [r3, #4]
 8011bce:	4618      	mov	r0, r3
 8011bd0:	f7f9 fdf7 	bl	800b7c2 <lwip_htonl>
 8011bd4:	4603      	mov	r3, r0
 8011bd6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	dbe6      	blt.n	8011baa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011bdc:	69fb      	ldr	r3, [r7, #28]
 8011bde:	681a      	ldr	r2, [r3, #0]
 8011be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011be4:	69fb      	ldr	r3, [r7, #28]
 8011be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011be8:	601a      	str	r2, [r3, #0]
 8011bea:	e009      	b.n	8011c00 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011bec:	6a3b      	ldr	r3, [r7, #32]
 8011bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bf0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011bf2:	6a3b      	ldr	r3, [r7, #32]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	623b      	str	r3, [r7, #32]
 8011bf8:	e002      	b.n	8011c00 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011bfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bfc:	f7fc fc3f 	bl	800e47e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c04:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d012      	beq.n	8011c32 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0e:	68db      	ldr	r3, [r3, #12]
 8011c10:	685b      	ldr	r3, [r3, #4]
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7f9 fdd5 	bl	800b7c2 <lwip_htonl>
 8011c18:	4602      	mov	r2, r0
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c1e:	1ad3      	subs	r3, r2, r3
 8011c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c22:	8912      	ldrh	r2, [r2, #8]
 8011c24:	4413      	add	r3, r2
  while (seg != NULL &&
 8011c26:	69ba      	ldr	r2, [r7, #24]
 8011c28:	429a      	cmp	r2, r3
 8011c2a:	f4bf aed9 	bcs.w	80119e0 <tcp_output+0x160>
 8011c2e:	e000      	b.n	8011c32 <tcp_output+0x3b2>
      break;
 8011c30:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d108      	bne.n	8011c4c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011c42:	e004      	b.n	8011c4e <tcp_output+0x3ce>
    goto output_done;
 8011c44:	bf00      	nop
 8011c46:	e002      	b.n	8011c4e <tcp_output+0x3ce>
    goto output_done;
 8011c48:	bf00      	nop
 8011c4a:	e000      	b.n	8011c4e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011c4c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	8b5b      	ldrh	r3, [r3, #26]
 8011c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011c56:	b29a      	uxth	r2, r3
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011c5c:	2300      	movs	r3, #0
}
 8011c5e:	4618      	mov	r0, r3
 8011c60:	3728      	adds	r7, #40	; 0x28
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bdb0      	pop	{r4, r5, r7, pc}
 8011c66:	bf00      	nop

08011c68 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011c68:	b580      	push	{r7, lr}
 8011c6a:	b082      	sub	sp, #8
 8011c6c:	af00      	add	r7, sp, #0
 8011c6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d106      	bne.n	8011c84 <tcp_output_segment_busy+0x1c>
 8011c76:	4b09      	ldr	r3, [pc, #36]	; (8011c9c <tcp_output_segment_busy+0x34>)
 8011c78:	f240 529a 	movw	r2, #1434	; 0x59a
 8011c7c:	4908      	ldr	r1, [pc, #32]	; (8011ca0 <tcp_output_segment_busy+0x38>)
 8011c7e:	4809      	ldr	r0, [pc, #36]	; (8011ca4 <tcp_output_segment_busy+0x3c>)
 8011c80:	f004 fa80 	bl	8016184 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	685b      	ldr	r3, [r3, #4]
 8011c88:	7b9b      	ldrb	r3, [r3, #14]
 8011c8a:	2b01      	cmp	r3, #1
 8011c8c:	d001      	beq.n	8011c92 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011c8e:	2301      	movs	r3, #1
 8011c90:	e000      	b.n	8011c94 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011c92:	2300      	movs	r3, #0
}
 8011c94:	4618      	mov	r0, r3
 8011c96:	3708      	adds	r7, #8
 8011c98:	46bd      	mov	sp, r7
 8011c9a:	bd80      	pop	{r7, pc}
 8011c9c:	080188f0 	.word	0x080188f0
 8011ca0:	08018e8c 	.word	0x08018e8c
 8011ca4:	08018944 	.word	0x08018944

08011ca8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011ca8:	b5b0      	push	{r4, r5, r7, lr}
 8011caa:	b08c      	sub	sp, #48	; 0x30
 8011cac:	af04      	add	r7, sp, #16
 8011cae:	60f8      	str	r0, [r7, #12]
 8011cb0:	60b9      	str	r1, [r7, #8]
 8011cb2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d106      	bne.n	8011cc8 <tcp_output_segment+0x20>
 8011cba:	4b63      	ldr	r3, [pc, #396]	; (8011e48 <tcp_output_segment+0x1a0>)
 8011cbc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011cc0:	4962      	ldr	r1, [pc, #392]	; (8011e4c <tcp_output_segment+0x1a4>)
 8011cc2:	4863      	ldr	r0, [pc, #396]	; (8011e50 <tcp_output_segment+0x1a8>)
 8011cc4:	f004 fa5e 	bl	8016184 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d106      	bne.n	8011cdc <tcp_output_segment+0x34>
 8011cce:	4b5e      	ldr	r3, [pc, #376]	; (8011e48 <tcp_output_segment+0x1a0>)
 8011cd0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011cd4:	495f      	ldr	r1, [pc, #380]	; (8011e54 <tcp_output_segment+0x1ac>)
 8011cd6:	485e      	ldr	r0, [pc, #376]	; (8011e50 <tcp_output_segment+0x1a8>)
 8011cd8:	f004 fa54 	bl	8016184 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d106      	bne.n	8011cf0 <tcp_output_segment+0x48>
 8011ce2:	4b59      	ldr	r3, [pc, #356]	; (8011e48 <tcp_output_segment+0x1a0>)
 8011ce4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011ce8:	495b      	ldr	r1, [pc, #364]	; (8011e58 <tcp_output_segment+0x1b0>)
 8011cea:	4859      	ldr	r0, [pc, #356]	; (8011e50 <tcp_output_segment+0x1a8>)
 8011cec:	f004 fa4a 	bl	8016184 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011cf0:	68f8      	ldr	r0, [r7, #12]
 8011cf2:	f7ff ffb9 	bl	8011c68 <tcp_output_segment_busy>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d001      	beq.n	8011d00 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	e09f      	b.n	8011e40 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011d00:	68bb      	ldr	r3, [r7, #8]
 8011d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	68dc      	ldr	r4, [r3, #12]
 8011d08:	4610      	mov	r0, r2
 8011d0a:	f7f9 fd5a 	bl	800b7c2 <lwip_htonl>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	68dc      	ldr	r4, [r3, #12]
 8011d1a:	4610      	mov	r0, r2
 8011d1c:	f7f9 fd3c 	bl	800b798 <lwip_htons>
 8011d20:	4603      	mov	r3, r0
 8011d22:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011d24:	68bb      	ldr	r3, [r7, #8]
 8011d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d28:	68ba      	ldr	r2, [r7, #8]
 8011d2a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011d2c:	441a      	add	r2, r3
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	68db      	ldr	r3, [r3, #12]
 8011d36:	3314      	adds	r3, #20
 8011d38:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	7a9b      	ldrb	r3, [r3, #10]
 8011d3e:	f003 0301 	and.w	r3, r3, #1
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d015      	beq.n	8011d72 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	3304      	adds	r3, #4
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	6879      	ldr	r1, [r7, #4]
 8011d4e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011d52:	f7fc fe8b 	bl	800ea6c <tcp_eff_send_mss_netif>
 8011d56:	4603      	mov	r3, r0
 8011d58:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011d5a:	8b7b      	ldrh	r3, [r7, #26]
 8011d5c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7f9 fd2e 	bl	800b7c2 <lwip_htonl>
 8011d66:	4602      	mov	r2, r0
 8011d68:	69fb      	ldr	r3, [r7, #28]
 8011d6a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	3304      	adds	r3, #4
 8011d70:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011d72:	68bb      	ldr	r3, [r7, #8]
 8011d74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	da02      	bge.n	8011d82 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011d82:	68bb      	ldr	r3, [r7, #8]
 8011d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d10c      	bne.n	8011da4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011d8a:	4b34      	ldr	r3, [pc, #208]	; (8011e5c <tcp_output_segment+0x1b4>)
 8011d8c:	681a      	ldr	r2, [r3, #0]
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7f9 fd12 	bl	800b7c2 <lwip_htonl>
 8011d9e:	4602      	mov	r2, r0
 8011da0:	68bb      	ldr	r3, [r7, #8]
 8011da2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	68da      	ldr	r2, [r3, #12]
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	685b      	ldr	r3, [r3, #4]
 8011dac:	685b      	ldr	r3, [r3, #4]
 8011dae:	1ad3      	subs	r3, r2, r3
 8011db0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	8959      	ldrh	r1, [r3, #10]
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	685b      	ldr	r3, [r3, #4]
 8011dbc:	8b3a      	ldrh	r2, [r7, #24]
 8011dbe:	1a8a      	subs	r2, r1, r2
 8011dc0:	b292      	uxth	r2, r2
 8011dc2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	685b      	ldr	r3, [r3, #4]
 8011dc8:	8919      	ldrh	r1, [r3, #8]
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	685b      	ldr	r3, [r3, #4]
 8011dce:	8b3a      	ldrh	r2, [r7, #24]
 8011dd0:	1a8a      	subs	r2, r1, r2
 8011dd2:	b292      	uxth	r2, r2
 8011dd4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	68fa      	ldr	r2, [r7, #12]
 8011ddc:	68d2      	ldr	r2, [r2, #12]
 8011dde:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	2200      	movs	r2, #0
 8011de6:	741a      	strb	r2, [r3, #16]
 8011de8:	2200      	movs	r2, #0
 8011dea:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	68db      	ldr	r3, [r3, #12]
 8011df0:	f103 0214 	add.w	r2, r3, #20
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	7a9b      	ldrb	r3, [r3, #10]
 8011df8:	009b      	lsls	r3, r3, #2
 8011dfa:	f003 0304 	and.w	r3, r3, #4
 8011dfe:	4413      	add	r3, r2
 8011e00:	69fa      	ldr	r2, [r7, #28]
 8011e02:	429a      	cmp	r2, r3
 8011e04:	d006      	beq.n	8011e14 <tcp_output_segment+0x16c>
 8011e06:	4b10      	ldr	r3, [pc, #64]	; (8011e48 <tcp_output_segment+0x1a0>)
 8011e08:	f240 621c 	movw	r2, #1564	; 0x61c
 8011e0c:	4914      	ldr	r1, [pc, #80]	; (8011e60 <tcp_output_segment+0x1b8>)
 8011e0e:	4810      	ldr	r0, [pc, #64]	; (8011e50 <tcp_output_segment+0x1a8>)
 8011e10:	f004 f9b8 	bl	8016184 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	6858      	ldr	r0, [r3, #4]
 8011e18:	68b9      	ldr	r1, [r7, #8]
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	1d1c      	adds	r4, r3, #4
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	7add      	ldrb	r5, [r3, #11]
 8011e22:	68bb      	ldr	r3, [r7, #8]
 8011e24:	7a9b      	ldrb	r3, [r3, #10]
 8011e26:	687a      	ldr	r2, [r7, #4]
 8011e28:	9202      	str	r2, [sp, #8]
 8011e2a:	2206      	movs	r2, #6
 8011e2c:	9201      	str	r2, [sp, #4]
 8011e2e:	9300      	str	r3, [sp, #0]
 8011e30:	462b      	mov	r3, r5
 8011e32:	4622      	mov	r2, r4
 8011e34:	f002 fdc8 	bl	80149c8 <ip4_output_if>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011e3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3720      	adds	r7, #32
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bdb0      	pop	{r4, r5, r7, pc}
 8011e48:	080188f0 	.word	0x080188f0
 8011e4c:	08018eb4 	.word	0x08018eb4
 8011e50:	08018944 	.word	0x08018944
 8011e54:	08018ed4 	.word	0x08018ed4
 8011e58:	08018ef4 	.word	0x08018ef4
 8011e5c:	20008f20 	.word	0x20008f20
 8011e60:	08018f18 	.word	0x08018f18

08011e64 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011e64:	b5b0      	push	{r4, r5, r7, lr}
 8011e66:	b084      	sub	sp, #16
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d106      	bne.n	8011e80 <tcp_rexmit_rto_prepare+0x1c>
 8011e72:	4b31      	ldr	r3, [pc, #196]	; (8011f38 <tcp_rexmit_rto_prepare+0xd4>)
 8011e74:	f240 6263 	movw	r2, #1635	; 0x663
 8011e78:	4930      	ldr	r1, [pc, #192]	; (8011f3c <tcp_rexmit_rto_prepare+0xd8>)
 8011e7a:	4831      	ldr	r0, [pc, #196]	; (8011f40 <tcp_rexmit_rto_prepare+0xdc>)
 8011e7c:	f004 f982 	bl	8016184 <iprintf>

  if (pcb->unacked == NULL) {
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d102      	bne.n	8011e8e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011e88:	f06f 0305 	mvn.w	r3, #5
 8011e8c:	e050      	b.n	8011f30 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e92:	60fb      	str	r3, [r7, #12]
 8011e94:	e00b      	b.n	8011eae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011e96:	68f8      	ldr	r0, [r7, #12]
 8011e98:	f7ff fee6 	bl	8011c68 <tcp_output_segment_busy>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d002      	beq.n	8011ea8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011ea2:	f06f 0305 	mvn.w	r3, #5
 8011ea6:	e043      	b.n	8011f30 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	60fb      	str	r3, [r7, #12]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d1ef      	bne.n	8011e96 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011eb6:	68f8      	ldr	r0, [r7, #12]
 8011eb8:	f7ff fed6 	bl	8011c68 <tcp_output_segment_busy>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d002      	beq.n	8011ec8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011ec2:	f06f 0305 	mvn.w	r3, #5
 8011ec6:	e033      	b.n	8011f30 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2200      	movs	r2, #0
 8011edc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	8b5b      	ldrh	r3, [r3, #26]
 8011ee2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011ee6:	b29a      	uxth	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	68db      	ldr	r3, [r3, #12]
 8011ef0:	685b      	ldr	r3, [r3, #4]
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f7f9 fc65 	bl	800b7c2 <lwip_htonl>
 8011ef8:	4604      	mov	r4, r0
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	891b      	ldrh	r3, [r3, #8]
 8011efe:	461d      	mov	r5, r3
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	68db      	ldr	r3, [r3, #12]
 8011f04:	899b      	ldrh	r3, [r3, #12]
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f7f9 fc45 	bl	800b798 <lwip_htons>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	b2db      	uxtb	r3, r3
 8011f12:	f003 0303 	and.w	r3, r3, #3
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d001      	beq.n	8011f1e <tcp_rexmit_rto_prepare+0xba>
 8011f1a:	2301      	movs	r3, #1
 8011f1c:	e000      	b.n	8011f20 <tcp_rexmit_rto_prepare+0xbc>
 8011f1e:	2300      	movs	r3, #0
 8011f20:	442b      	add	r3, r5
 8011f22:	18e2      	adds	r2, r4, r3
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011f2e:	2300      	movs	r3, #0
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3710      	adds	r7, #16
 8011f34:	46bd      	mov	sp, r7
 8011f36:	bdb0      	pop	{r4, r5, r7, pc}
 8011f38:	080188f0 	.word	0x080188f0
 8011f3c:	08018f2c 	.word	0x08018f2c
 8011f40:	08018944 	.word	0x08018944

08011f44 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b082      	sub	sp, #8
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d106      	bne.n	8011f60 <tcp_rexmit_rto_commit+0x1c>
 8011f52:	4b0d      	ldr	r3, [pc, #52]	; (8011f88 <tcp_rexmit_rto_commit+0x44>)
 8011f54:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011f58:	490c      	ldr	r1, [pc, #48]	; (8011f8c <tcp_rexmit_rto_commit+0x48>)
 8011f5a:	480d      	ldr	r0, [pc, #52]	; (8011f90 <tcp_rexmit_rto_commit+0x4c>)
 8011f5c:	f004 f912 	bl	8016184 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f66:	2bff      	cmp	r3, #255	; 0xff
 8011f68:	d007      	beq.n	8011f7a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f70:	3301      	adds	r3, #1
 8011f72:	b2da      	uxtb	r2, r3
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	f7ff fc80 	bl	8011880 <tcp_output>
}
 8011f80:	bf00      	nop
 8011f82:	3708      	adds	r7, #8
 8011f84:	46bd      	mov	sp, r7
 8011f86:	bd80      	pop	{r7, pc}
 8011f88:	080188f0 	.word	0x080188f0
 8011f8c:	08018f50 	.word	0x08018f50
 8011f90:	08018944 	.word	0x08018944

08011f94 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d106      	bne.n	8011fb0 <tcp_rexmit_rto+0x1c>
 8011fa2:	4b0a      	ldr	r3, [pc, #40]	; (8011fcc <tcp_rexmit_rto+0x38>)
 8011fa4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011fa8:	4909      	ldr	r1, [pc, #36]	; (8011fd0 <tcp_rexmit_rto+0x3c>)
 8011faa:	480a      	ldr	r0, [pc, #40]	; (8011fd4 <tcp_rexmit_rto+0x40>)
 8011fac:	f004 f8ea 	bl	8016184 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011fb0:	6878      	ldr	r0, [r7, #4]
 8011fb2:	f7ff ff57 	bl	8011e64 <tcp_rexmit_rto_prepare>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d102      	bne.n	8011fc2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011fbc:	6878      	ldr	r0, [r7, #4]
 8011fbe:	f7ff ffc1 	bl	8011f44 <tcp_rexmit_rto_commit>
  }
}
 8011fc2:	bf00      	nop
 8011fc4:	3708      	adds	r7, #8
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	080188f0 	.word	0x080188f0
 8011fd0:	08018f74 	.word	0x08018f74
 8011fd4:	08018944 	.word	0x08018944

08011fd8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011fd8:	b590      	push	{r4, r7, lr}
 8011fda:	b085      	sub	sp, #20
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d106      	bne.n	8011ff4 <tcp_rexmit+0x1c>
 8011fe6:	4b2f      	ldr	r3, [pc, #188]	; (80120a4 <tcp_rexmit+0xcc>)
 8011fe8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011fec:	492e      	ldr	r1, [pc, #184]	; (80120a8 <tcp_rexmit+0xd0>)
 8011fee:	482f      	ldr	r0, [pc, #188]	; (80120ac <tcp_rexmit+0xd4>)
 8011ff0:	f004 f8c8 	bl	8016184 <iprintf>

  if (pcb->unacked == NULL) {
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d102      	bne.n	8012002 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011ffc:	f06f 0305 	mvn.w	r3, #5
 8012000:	e04c      	b.n	801209c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012006:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012008:	68b8      	ldr	r0, [r7, #8]
 801200a:	f7ff fe2d 	bl	8011c68 <tcp_output_segment_busy>
 801200e:	4603      	mov	r3, r0
 8012010:	2b00      	cmp	r3, #0
 8012012:	d002      	beq.n	801201a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012014:	f06f 0305 	mvn.w	r3, #5
 8012018:	e040      	b.n	801209c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	681a      	ldr	r2, [r3, #0]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	336c      	adds	r3, #108	; 0x6c
 8012026:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012028:	e002      	b.n	8012030 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d011      	beq.n	801205c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	68db      	ldr	r3, [r3, #12]
 801203e:	685b      	ldr	r3, [r3, #4]
 8012040:	4618      	mov	r0, r3
 8012042:	f7f9 fbbe 	bl	800b7c2 <lwip_htonl>
 8012046:	4604      	mov	r4, r0
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	68db      	ldr	r3, [r3, #12]
 801204c:	685b      	ldr	r3, [r3, #4]
 801204e:	4618      	mov	r0, r3
 8012050:	f7f9 fbb7 	bl	800b7c2 <lwip_htonl>
 8012054:	4603      	mov	r3, r0
 8012056:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012058:	2b00      	cmp	r3, #0
 801205a:	dbe6      	blt.n	801202a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	681a      	ldr	r2, [r3, #0]
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	68ba      	ldr	r2, [r7, #8]
 8012068:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d103      	bne.n	801207a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2200      	movs	r2, #0
 8012076:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012080:	2bff      	cmp	r3, #255	; 0xff
 8012082:	d007      	beq.n	8012094 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801208a:	3301      	adds	r3, #1
 801208c:	b2da      	uxtb	r2, r3
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2200      	movs	r2, #0
 8012098:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801209a:	2300      	movs	r3, #0
}
 801209c:	4618      	mov	r0, r3
 801209e:	3714      	adds	r7, #20
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd90      	pop	{r4, r7, pc}
 80120a4:	080188f0 	.word	0x080188f0
 80120a8:	08018f90 	.word	0x08018f90
 80120ac:	08018944 	.word	0x08018944

080120b0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b082      	sub	sp, #8
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d106      	bne.n	80120cc <tcp_rexmit_fast+0x1c>
 80120be:	4b2a      	ldr	r3, [pc, #168]	; (8012168 <tcp_rexmit_fast+0xb8>)
 80120c0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80120c4:	4929      	ldr	r1, [pc, #164]	; (801216c <tcp_rexmit_fast+0xbc>)
 80120c6:	482a      	ldr	r0, [pc, #168]	; (8012170 <tcp_rexmit_fast+0xc0>)
 80120c8:	f004 f85c 	bl	8016184 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d045      	beq.n	8012160 <tcp_rexmit_fast+0xb0>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	8b5b      	ldrh	r3, [r3, #26]
 80120d8:	f003 0304 	and.w	r3, r3, #4
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d13f      	bne.n	8012160 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f7ff ff79 	bl	8011fd8 <tcp_rexmit>
 80120e6:	4603      	mov	r3, r0
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d139      	bne.n	8012160 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120f8:	4293      	cmp	r3, r2
 80120fa:	bf28      	it	cs
 80120fc:	4613      	movcs	r3, r2
 80120fe:	b29b      	uxth	r3, r3
 8012100:	2b00      	cmp	r3, #0
 8012102:	da00      	bge.n	8012106 <tcp_rexmit_fast+0x56>
 8012104:	3301      	adds	r3, #1
 8012106:	105b      	asrs	r3, r3, #1
 8012108:	b29a      	uxth	r2, r3
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012116:	461a      	mov	r2, r3
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801211c:	005b      	lsls	r3, r3, #1
 801211e:	429a      	cmp	r2, r3
 8012120:	d206      	bcs.n	8012130 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012126:	005b      	lsls	r3, r3, #1
 8012128:	b29a      	uxth	r2, r3
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801213a:	4619      	mov	r1, r3
 801213c:	0049      	lsls	r1, r1, #1
 801213e:	440b      	add	r3, r1
 8012140:	b29b      	uxth	r3, r3
 8012142:	4413      	add	r3, r2
 8012144:	b29a      	uxth	r2, r3
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	8b5b      	ldrh	r3, [r3, #26]
 8012150:	f043 0304 	orr.w	r3, r3, #4
 8012154:	b29a      	uxth	r2, r3
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2200      	movs	r2, #0
 801215e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012160:	bf00      	nop
 8012162:	3708      	adds	r7, #8
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}
 8012168:	080188f0 	.word	0x080188f0
 801216c:	08018fa8 	.word	0x08018fa8
 8012170:	08018944 	.word	0x08018944

08012174 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b086      	sub	sp, #24
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	607b      	str	r3, [r7, #4]
 801217e:	460b      	mov	r3, r1
 8012180:	817b      	strh	r3, [r7, #10]
 8012182:	4613      	mov	r3, r2
 8012184:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012186:	897a      	ldrh	r2, [r7, #10]
 8012188:	893b      	ldrh	r3, [r7, #8]
 801218a:	4413      	add	r3, r2
 801218c:	b29b      	uxth	r3, r3
 801218e:	3314      	adds	r3, #20
 8012190:	b29b      	uxth	r3, r3
 8012192:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012196:	4619      	mov	r1, r3
 8012198:	2022      	movs	r0, #34	; 0x22
 801219a:	f7fa fb77 	bl	800c88c <pbuf_alloc>
 801219e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80121a0:	697b      	ldr	r3, [r7, #20]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d04d      	beq.n	8012242 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80121a6:	897b      	ldrh	r3, [r7, #10]
 80121a8:	3313      	adds	r3, #19
 80121aa:	697a      	ldr	r2, [r7, #20]
 80121ac:	8952      	ldrh	r2, [r2, #10]
 80121ae:	4293      	cmp	r3, r2
 80121b0:	db06      	blt.n	80121c0 <tcp_output_alloc_header_common+0x4c>
 80121b2:	4b26      	ldr	r3, [pc, #152]	; (801224c <tcp_output_alloc_header_common+0xd8>)
 80121b4:	f240 7223 	movw	r2, #1827	; 0x723
 80121b8:	4925      	ldr	r1, [pc, #148]	; (8012250 <tcp_output_alloc_header_common+0xdc>)
 80121ba:	4826      	ldr	r0, [pc, #152]	; (8012254 <tcp_output_alloc_header_common+0xe0>)
 80121bc:	f003 ffe2 	bl	8016184 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80121c0:	697b      	ldr	r3, [r7, #20]
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80121c6:	8c3b      	ldrh	r3, [r7, #32]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7f9 fae5 	bl	800b798 <lwip_htons>
 80121ce:	4603      	mov	r3, r0
 80121d0:	461a      	mov	r2, r3
 80121d2:	693b      	ldr	r3, [r7, #16]
 80121d4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80121d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121d8:	4618      	mov	r0, r3
 80121da:	f7f9 fadd 	bl	800b798 <lwip_htons>
 80121de:	4603      	mov	r3, r0
 80121e0:	461a      	mov	r2, r3
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	687a      	ldr	r2, [r7, #4]
 80121ea:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80121ec:	68f8      	ldr	r0, [r7, #12]
 80121ee:	f7f9 fae8 	bl	800b7c2 <lwip_htonl>
 80121f2:	4602      	mov	r2, r0
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80121f8:	897b      	ldrh	r3, [r7, #10]
 80121fa:	089b      	lsrs	r3, r3, #2
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	3305      	adds	r3, #5
 8012200:	b29b      	uxth	r3, r3
 8012202:	031b      	lsls	r3, r3, #12
 8012204:	b29a      	uxth	r2, r3
 8012206:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801220a:	b29b      	uxth	r3, r3
 801220c:	4313      	orrs	r3, r2
 801220e:	b29b      	uxth	r3, r3
 8012210:	4618      	mov	r0, r3
 8012212:	f7f9 fac1 	bl	800b798 <lwip_htons>
 8012216:	4603      	mov	r3, r0
 8012218:	461a      	mov	r2, r3
 801221a:	693b      	ldr	r3, [r7, #16]
 801221c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801221e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012220:	4618      	mov	r0, r3
 8012222:	f7f9 fab9 	bl	800b798 <lwip_htons>
 8012226:	4603      	mov	r3, r0
 8012228:	461a      	mov	r2, r3
 801222a:	693b      	ldr	r3, [r7, #16]
 801222c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801222e:	693b      	ldr	r3, [r7, #16]
 8012230:	2200      	movs	r2, #0
 8012232:	741a      	strb	r2, [r3, #16]
 8012234:	2200      	movs	r2, #0
 8012236:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	2200      	movs	r2, #0
 801223c:	749a      	strb	r2, [r3, #18]
 801223e:	2200      	movs	r2, #0
 8012240:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012242:	697b      	ldr	r3, [r7, #20]
}
 8012244:	4618      	mov	r0, r3
 8012246:	3718      	adds	r7, #24
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}
 801224c:	080188f0 	.word	0x080188f0
 8012250:	08018fc8 	.word	0x08018fc8
 8012254:	08018944 	.word	0x08018944

08012258 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012258:	b5b0      	push	{r4, r5, r7, lr}
 801225a:	b08a      	sub	sp, #40	; 0x28
 801225c:	af04      	add	r7, sp, #16
 801225e:	60f8      	str	r0, [r7, #12]
 8012260:	607b      	str	r3, [r7, #4]
 8012262:	460b      	mov	r3, r1
 8012264:	817b      	strh	r3, [r7, #10]
 8012266:	4613      	mov	r3, r2
 8012268:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d106      	bne.n	801227e <tcp_output_alloc_header+0x26>
 8012270:	4b15      	ldr	r3, [pc, #84]	; (80122c8 <tcp_output_alloc_header+0x70>)
 8012272:	f240 7242 	movw	r2, #1858	; 0x742
 8012276:	4915      	ldr	r1, [pc, #84]	; (80122cc <tcp_output_alloc_header+0x74>)
 8012278:	4815      	ldr	r0, [pc, #84]	; (80122d0 <tcp_output_alloc_header+0x78>)
 801227a:	f003 ff83 	bl	8016184 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	8adb      	ldrh	r3, [r3, #22]
 8012286:	68fa      	ldr	r2, [r7, #12]
 8012288:	8b12      	ldrh	r2, [r2, #24]
 801228a:	68f9      	ldr	r1, [r7, #12]
 801228c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801228e:	893d      	ldrh	r5, [r7, #8]
 8012290:	897c      	ldrh	r4, [r7, #10]
 8012292:	9103      	str	r1, [sp, #12]
 8012294:	2110      	movs	r1, #16
 8012296:	9102      	str	r1, [sp, #8]
 8012298:	9201      	str	r2, [sp, #4]
 801229a:	9300      	str	r3, [sp, #0]
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	462a      	mov	r2, r5
 80122a0:	4621      	mov	r1, r4
 80122a2:	f7ff ff67 	bl	8012174 <tcp_output_alloc_header_common>
 80122a6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d006      	beq.n	80122bc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122b2:	68fa      	ldr	r2, [r7, #12]
 80122b4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80122b6:	441a      	add	r2, r3
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80122bc:	697b      	ldr	r3, [r7, #20]
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3718      	adds	r7, #24
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bdb0      	pop	{r4, r5, r7, pc}
 80122c6:	bf00      	nop
 80122c8:	080188f0 	.word	0x080188f0
 80122cc:	08018ff8 	.word	0x08018ff8
 80122d0:	08018944 	.word	0x08018944

080122d4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b088      	sub	sp, #32
 80122d8:	af00      	add	r7, sp, #0
 80122da:	60f8      	str	r0, [r7, #12]
 80122dc:	60b9      	str	r1, [r7, #8]
 80122de:	4611      	mov	r1, r2
 80122e0:	461a      	mov	r2, r3
 80122e2:	460b      	mov	r3, r1
 80122e4:	71fb      	strb	r3, [r7, #7]
 80122e6:	4613      	mov	r3, r2
 80122e8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80122ea:	2300      	movs	r3, #0
 80122ec:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d106      	bne.n	8012302 <tcp_output_fill_options+0x2e>
 80122f4:	4b13      	ldr	r3, [pc, #76]	; (8012344 <tcp_output_fill_options+0x70>)
 80122f6:	f240 7256 	movw	r2, #1878	; 0x756
 80122fa:	4913      	ldr	r1, [pc, #76]	; (8012348 <tcp_output_fill_options+0x74>)
 80122fc:	4813      	ldr	r0, [pc, #76]	; (801234c <tcp_output_fill_options+0x78>)
 80122fe:	f003 ff41 	bl	8016184 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	685b      	ldr	r3, [r3, #4]
 8012306:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012308:	69bb      	ldr	r3, [r7, #24]
 801230a:	3314      	adds	r3, #20
 801230c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801230e:	69bb      	ldr	r3, [r7, #24]
 8012310:	f103 0214 	add.w	r2, r3, #20
 8012314:	8bfb      	ldrh	r3, [r7, #30]
 8012316:	009b      	lsls	r3, r3, #2
 8012318:	4619      	mov	r1, r3
 801231a:	79fb      	ldrb	r3, [r7, #7]
 801231c:	009b      	lsls	r3, r3, #2
 801231e:	f003 0304 	and.w	r3, r3, #4
 8012322:	440b      	add	r3, r1
 8012324:	4413      	add	r3, r2
 8012326:	697a      	ldr	r2, [r7, #20]
 8012328:	429a      	cmp	r2, r3
 801232a:	d006      	beq.n	801233a <tcp_output_fill_options+0x66>
 801232c:	4b05      	ldr	r3, [pc, #20]	; (8012344 <tcp_output_fill_options+0x70>)
 801232e:	f240 7275 	movw	r2, #1909	; 0x775
 8012332:	4907      	ldr	r1, [pc, #28]	; (8012350 <tcp_output_fill_options+0x7c>)
 8012334:	4805      	ldr	r0, [pc, #20]	; (801234c <tcp_output_fill_options+0x78>)
 8012336:	f003 ff25 	bl	8016184 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801233a:	bf00      	nop
 801233c:	3720      	adds	r7, #32
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}
 8012342:	bf00      	nop
 8012344:	080188f0 	.word	0x080188f0
 8012348:	08019020 	.word	0x08019020
 801234c:	08018944 	.word	0x08018944
 8012350:	08018f18 	.word	0x08018f18

08012354 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b08a      	sub	sp, #40	; 0x28
 8012358:	af04      	add	r7, sp, #16
 801235a:	60f8      	str	r0, [r7, #12]
 801235c:	60b9      	str	r1, [r7, #8]
 801235e:	607a      	str	r2, [r7, #4]
 8012360:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d106      	bne.n	8012376 <tcp_output_control_segment+0x22>
 8012368:	4b1c      	ldr	r3, [pc, #112]	; (80123dc <tcp_output_control_segment+0x88>)
 801236a:	f240 7287 	movw	r2, #1927	; 0x787
 801236e:	491c      	ldr	r1, [pc, #112]	; (80123e0 <tcp_output_control_segment+0x8c>)
 8012370:	481c      	ldr	r0, [pc, #112]	; (80123e4 <tcp_output_control_segment+0x90>)
 8012372:	f003 ff07 	bl	8016184 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012376:	683a      	ldr	r2, [r7, #0]
 8012378:	6879      	ldr	r1, [r7, #4]
 801237a:	68f8      	ldr	r0, [r7, #12]
 801237c:	f7fe ff40 	bl	8011200 <tcp_route>
 8012380:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d102      	bne.n	801238e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012388:	23fc      	movs	r3, #252	; 0xfc
 801238a:	75fb      	strb	r3, [r7, #23]
 801238c:	e01c      	b.n	80123c8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d006      	beq.n	80123a2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	7adb      	ldrb	r3, [r3, #11]
 8012398:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	7a9b      	ldrb	r3, [r3, #10]
 801239e:	757b      	strb	r3, [r7, #21]
 80123a0:	e003      	b.n	80123aa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80123a2:	23ff      	movs	r3, #255	; 0xff
 80123a4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80123a6:	2300      	movs	r3, #0
 80123a8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80123aa:	7dba      	ldrb	r2, [r7, #22]
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	9302      	str	r3, [sp, #8]
 80123b0:	2306      	movs	r3, #6
 80123b2:	9301      	str	r3, [sp, #4]
 80123b4:	7d7b      	ldrb	r3, [r7, #21]
 80123b6:	9300      	str	r3, [sp, #0]
 80123b8:	4613      	mov	r3, r2
 80123ba:	683a      	ldr	r2, [r7, #0]
 80123bc:	6879      	ldr	r1, [r7, #4]
 80123be:	68b8      	ldr	r0, [r7, #8]
 80123c0:	f002 fb02 	bl	80149c8 <ip4_output_if>
 80123c4:	4603      	mov	r3, r0
 80123c6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80123c8:	68b8      	ldr	r0, [r7, #8]
 80123ca:	f7fa fd43 	bl	800ce54 <pbuf_free>
  return err;
 80123ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3718      	adds	r7, #24
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	080188f0 	.word	0x080188f0
 80123e0:	08019048 	.word	0x08019048
 80123e4:	08018944 	.word	0x08018944

080123e8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80123e8:	b590      	push	{r4, r7, lr}
 80123ea:	b08b      	sub	sp, #44	; 0x2c
 80123ec:	af04      	add	r7, sp, #16
 80123ee:	60f8      	str	r0, [r7, #12]
 80123f0:	60b9      	str	r1, [r7, #8]
 80123f2:	607a      	str	r2, [r7, #4]
 80123f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d106      	bne.n	801240a <tcp_rst+0x22>
 80123fc:	4b1f      	ldr	r3, [pc, #124]	; (801247c <tcp_rst+0x94>)
 80123fe:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012402:	491f      	ldr	r1, [pc, #124]	; (8012480 <tcp_rst+0x98>)
 8012404:	481f      	ldr	r0, [pc, #124]	; (8012484 <tcp_rst+0x9c>)
 8012406:	f003 febd 	bl	8016184 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801240a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240c:	2b00      	cmp	r3, #0
 801240e:	d106      	bne.n	801241e <tcp_rst+0x36>
 8012410:	4b1a      	ldr	r3, [pc, #104]	; (801247c <tcp_rst+0x94>)
 8012412:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012416:	491c      	ldr	r1, [pc, #112]	; (8012488 <tcp_rst+0xa0>)
 8012418:	481a      	ldr	r0, [pc, #104]	; (8012484 <tcp_rst+0x9c>)
 801241a:	f003 feb3 	bl	8016184 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801241e:	2300      	movs	r3, #0
 8012420:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012422:	f246 0308 	movw	r3, #24584	; 0x6008
 8012426:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012428:	7dfb      	ldrb	r3, [r7, #23]
 801242a:	b29c      	uxth	r4, r3
 801242c:	68b8      	ldr	r0, [r7, #8]
 801242e:	f7f9 f9c8 	bl	800b7c2 <lwip_htonl>
 8012432:	4602      	mov	r2, r0
 8012434:	8abb      	ldrh	r3, [r7, #20]
 8012436:	9303      	str	r3, [sp, #12]
 8012438:	2314      	movs	r3, #20
 801243a:	9302      	str	r3, [sp, #8]
 801243c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801243e:	9301      	str	r3, [sp, #4]
 8012440:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012442:	9300      	str	r3, [sp, #0]
 8012444:	4613      	mov	r3, r2
 8012446:	2200      	movs	r2, #0
 8012448:	4621      	mov	r1, r4
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f7ff fe92 	bl	8012174 <tcp_output_alloc_header_common>
 8012450:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d00c      	beq.n	8012472 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012458:	7dfb      	ldrb	r3, [r7, #23]
 801245a:	2200      	movs	r2, #0
 801245c:	6939      	ldr	r1, [r7, #16]
 801245e:	68f8      	ldr	r0, [r7, #12]
 8012460:	f7ff ff38 	bl	80122d4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012466:	683a      	ldr	r2, [r7, #0]
 8012468:	6939      	ldr	r1, [r7, #16]
 801246a:	68f8      	ldr	r0, [r7, #12]
 801246c:	f7ff ff72 	bl	8012354 <tcp_output_control_segment>
 8012470:	e000      	b.n	8012474 <tcp_rst+0x8c>
    return;
 8012472:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012474:	371c      	adds	r7, #28
 8012476:	46bd      	mov	sp, r7
 8012478:	bd90      	pop	{r4, r7, pc}
 801247a:	bf00      	nop
 801247c:	080188f0 	.word	0x080188f0
 8012480:	08019074 	.word	0x08019074
 8012484:	08018944 	.word	0x08018944
 8012488:	08019090 	.word	0x08019090

0801248c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801248c:	b590      	push	{r4, r7, lr}
 801248e:	b087      	sub	sp, #28
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012494:	2300      	movs	r3, #0
 8012496:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012498:	2300      	movs	r3, #0
 801249a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d106      	bne.n	80124b0 <tcp_send_empty_ack+0x24>
 80124a2:	4b28      	ldr	r3, [pc, #160]	; (8012544 <tcp_send_empty_ack+0xb8>)
 80124a4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80124a8:	4927      	ldr	r1, [pc, #156]	; (8012548 <tcp_send_empty_ack+0xbc>)
 80124aa:	4828      	ldr	r0, [pc, #160]	; (801254c <tcp_send_empty_ack+0xc0>)
 80124ac:	f003 fe6a 	bl	8016184 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80124b0:	7dfb      	ldrb	r3, [r7, #23]
 80124b2:	009b      	lsls	r3, r3, #2
 80124b4:	b2db      	uxtb	r3, r3
 80124b6:	f003 0304 	and.w	r3, r3, #4
 80124ba:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80124bc:	7d7b      	ldrb	r3, [r7, #21]
 80124be:	b29c      	uxth	r4, r3
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124c4:	4618      	mov	r0, r3
 80124c6:	f7f9 f97c 	bl	800b7c2 <lwip_htonl>
 80124ca:	4603      	mov	r3, r0
 80124cc:	2200      	movs	r2, #0
 80124ce:	4621      	mov	r1, r4
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f7ff fec1 	bl	8012258 <tcp_output_alloc_header>
 80124d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d109      	bne.n	80124f2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	8b5b      	ldrh	r3, [r3, #26]
 80124e2:	f043 0303 	orr.w	r3, r3, #3
 80124e6:	b29a      	uxth	r2, r3
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80124ec:	f06f 0301 	mvn.w	r3, #1
 80124f0:	e023      	b.n	801253a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80124f2:	7dbb      	ldrb	r3, [r7, #22]
 80124f4:	7dfa      	ldrb	r2, [r7, #23]
 80124f6:	6939      	ldr	r1, [r7, #16]
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f7ff feeb 	bl	80122d4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80124fe:	687a      	ldr	r2, [r7, #4]
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	3304      	adds	r3, #4
 8012504:	6939      	ldr	r1, [r7, #16]
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f7ff ff24 	bl	8012354 <tcp_output_control_segment>
 801250c:	4603      	mov	r3, r0
 801250e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d007      	beq.n	8012528 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	8b5b      	ldrh	r3, [r3, #26]
 801251c:	f043 0303 	orr.w	r3, r3, #3
 8012520:	b29a      	uxth	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	835a      	strh	r2, [r3, #26]
 8012526:	e006      	b.n	8012536 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	8b5b      	ldrh	r3, [r3, #26]
 801252c:	f023 0303 	bic.w	r3, r3, #3
 8012530:	b29a      	uxth	r2, r3
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012536:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801253a:	4618      	mov	r0, r3
 801253c:	371c      	adds	r7, #28
 801253e:	46bd      	mov	sp, r7
 8012540:	bd90      	pop	{r4, r7, pc}
 8012542:	bf00      	nop
 8012544:	080188f0 	.word	0x080188f0
 8012548:	080190ac 	.word	0x080190ac
 801254c:	08018944 	.word	0x08018944

08012550 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012550:	b590      	push	{r4, r7, lr}
 8012552:	b087      	sub	sp, #28
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012558:	2300      	movs	r3, #0
 801255a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d106      	bne.n	8012570 <tcp_keepalive+0x20>
 8012562:	4b18      	ldr	r3, [pc, #96]	; (80125c4 <tcp_keepalive+0x74>)
 8012564:	f640 0224 	movw	r2, #2084	; 0x824
 8012568:	4917      	ldr	r1, [pc, #92]	; (80125c8 <tcp_keepalive+0x78>)
 801256a:	4818      	ldr	r0, [pc, #96]	; (80125cc <tcp_keepalive+0x7c>)
 801256c:	f003 fe0a 	bl	8016184 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012570:	7dfb      	ldrb	r3, [r7, #23]
 8012572:	b29c      	uxth	r4, r3
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012578:	3b01      	subs	r3, #1
 801257a:	4618      	mov	r0, r3
 801257c:	f7f9 f921 	bl	800b7c2 <lwip_htonl>
 8012580:	4603      	mov	r3, r0
 8012582:	2200      	movs	r2, #0
 8012584:	4621      	mov	r1, r4
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f7ff fe66 	bl	8012258 <tcp_output_alloc_header>
 801258c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d102      	bne.n	801259a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012594:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012598:	e010      	b.n	80125bc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801259a:	7dfb      	ldrb	r3, [r7, #23]
 801259c:	2200      	movs	r2, #0
 801259e:	6939      	ldr	r1, [r7, #16]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f7ff fe97 	bl	80122d4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80125a6:	687a      	ldr	r2, [r7, #4]
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	3304      	adds	r3, #4
 80125ac:	6939      	ldr	r1, [r7, #16]
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f7ff fed0 	bl	8012354 <tcp_output_control_segment>
 80125b4:	4603      	mov	r3, r0
 80125b6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80125b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80125bc:	4618      	mov	r0, r3
 80125be:	371c      	adds	r7, #28
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd90      	pop	{r4, r7, pc}
 80125c4:	080188f0 	.word	0x080188f0
 80125c8:	080190cc 	.word	0x080190cc
 80125cc:	08018944 	.word	0x08018944

080125d0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80125d0:	b590      	push	{r4, r7, lr}
 80125d2:	b08b      	sub	sp, #44	; 0x2c
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80125d8:	2300      	movs	r3, #0
 80125da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d106      	bne.n	80125f2 <tcp_zero_window_probe+0x22>
 80125e4:	4b4c      	ldr	r3, [pc, #304]	; (8012718 <tcp_zero_window_probe+0x148>)
 80125e6:	f640 024f 	movw	r2, #2127	; 0x84f
 80125ea:	494c      	ldr	r1, [pc, #304]	; (801271c <tcp_zero_window_probe+0x14c>)
 80125ec:	484c      	ldr	r0, [pc, #304]	; (8012720 <tcp_zero_window_probe+0x150>)
 80125ee:	f003 fdc9 	bl	8016184 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125f6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80125f8:	6a3b      	ldr	r3, [r7, #32]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d101      	bne.n	8012602 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80125fe:	2300      	movs	r3, #0
 8012600:	e086      	b.n	8012710 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012608:	2bff      	cmp	r3, #255	; 0xff
 801260a:	d007      	beq.n	801261c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012612:	3301      	adds	r3, #1
 8012614:	b2da      	uxtb	r2, r3
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801261c:	6a3b      	ldr	r3, [r7, #32]
 801261e:	68db      	ldr	r3, [r3, #12]
 8012620:	899b      	ldrh	r3, [r3, #12]
 8012622:	b29b      	uxth	r3, r3
 8012624:	4618      	mov	r0, r3
 8012626:	f7f9 f8b7 	bl	800b798 <lwip_htons>
 801262a:	4603      	mov	r3, r0
 801262c:	b2db      	uxtb	r3, r3
 801262e:	f003 0301 	and.w	r3, r3, #1
 8012632:	2b00      	cmp	r3, #0
 8012634:	d005      	beq.n	8012642 <tcp_zero_window_probe+0x72>
 8012636:	6a3b      	ldr	r3, [r7, #32]
 8012638:	891b      	ldrh	r3, [r3, #8]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d101      	bne.n	8012642 <tcp_zero_window_probe+0x72>
 801263e:	2301      	movs	r3, #1
 8012640:	e000      	b.n	8012644 <tcp_zero_window_probe+0x74>
 8012642:	2300      	movs	r3, #0
 8012644:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012646:	7ffb      	ldrb	r3, [r7, #31]
 8012648:	2b00      	cmp	r3, #0
 801264a:	bf0c      	ite	eq
 801264c:	2301      	moveq	r3, #1
 801264e:	2300      	movne	r3, #0
 8012650:	b2db      	uxtb	r3, r3
 8012652:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012658:	b299      	uxth	r1, r3
 801265a:	6a3b      	ldr	r3, [r7, #32]
 801265c:	68db      	ldr	r3, [r3, #12]
 801265e:	685b      	ldr	r3, [r3, #4]
 8012660:	8bba      	ldrh	r2, [r7, #28]
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f7ff fdf8 	bl	8012258 <tcp_output_alloc_header>
 8012668:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801266a:	69bb      	ldr	r3, [r7, #24]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d102      	bne.n	8012676 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012670:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012674:	e04c      	b.n	8012710 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012676:	69bb      	ldr	r3, [r7, #24]
 8012678:	685b      	ldr	r3, [r3, #4]
 801267a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801267c:	7ffb      	ldrb	r3, [r7, #31]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d011      	beq.n	80126a6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	899b      	ldrh	r3, [r3, #12]
 8012686:	b29b      	uxth	r3, r3
 8012688:	b21b      	sxth	r3, r3
 801268a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801268e:	b21c      	sxth	r4, r3
 8012690:	2011      	movs	r0, #17
 8012692:	f7f9 f881 	bl	800b798 <lwip_htons>
 8012696:	4603      	mov	r3, r0
 8012698:	b21b      	sxth	r3, r3
 801269a:	4323      	orrs	r3, r4
 801269c:	b21b      	sxth	r3, r3
 801269e:	b29a      	uxth	r2, r3
 80126a0:	697b      	ldr	r3, [r7, #20]
 80126a2:	819a      	strh	r2, [r3, #12]
 80126a4:	e010      	b.n	80126c8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	685b      	ldr	r3, [r3, #4]
 80126aa:	3314      	adds	r3, #20
 80126ac:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80126ae:	6a3b      	ldr	r3, [r7, #32]
 80126b0:	6858      	ldr	r0, [r3, #4]
 80126b2:	6a3b      	ldr	r3, [r7, #32]
 80126b4:	685b      	ldr	r3, [r3, #4]
 80126b6:	891a      	ldrh	r2, [r3, #8]
 80126b8:	6a3b      	ldr	r3, [r7, #32]
 80126ba:	891b      	ldrh	r3, [r3, #8]
 80126bc:	1ad3      	subs	r3, r2, r3
 80126be:	b29b      	uxth	r3, r3
 80126c0:	2201      	movs	r2, #1
 80126c2:	6939      	ldr	r1, [r7, #16]
 80126c4:	f7fa fdc0 	bl	800d248 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80126c8:	6a3b      	ldr	r3, [r7, #32]
 80126ca:	68db      	ldr	r3, [r3, #12]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7f9 f877 	bl	800b7c2 <lwip_htonl>
 80126d4:	4603      	mov	r3, r0
 80126d6:	3301      	adds	r3, #1
 80126d8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	1ad3      	subs	r3, r2, r3
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	da02      	bge.n	80126ec <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	68fa      	ldr	r2, [r7, #12]
 80126ea:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80126ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126f0:	2200      	movs	r2, #0
 80126f2:	69b9      	ldr	r1, [r7, #24]
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f7ff fded 	bl	80122d4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80126fa:	687a      	ldr	r2, [r7, #4]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	3304      	adds	r3, #4
 8012700:	69b9      	ldr	r1, [r7, #24]
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f7ff fe26 	bl	8012354 <tcp_output_control_segment>
 8012708:	4603      	mov	r3, r0
 801270a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801270c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012710:	4618      	mov	r0, r3
 8012712:	372c      	adds	r7, #44	; 0x2c
 8012714:	46bd      	mov	sp, r7
 8012716:	bd90      	pop	{r4, r7, pc}
 8012718:	080188f0 	.word	0x080188f0
 801271c:	080190e8 	.word	0x080190e8
 8012720:	08018944 	.word	0x08018944

08012724 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801272c:	f7fa ff0c 	bl	800d548 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012730:	4b0a      	ldr	r3, [pc, #40]	; (801275c <tcpip_tcp_timer+0x38>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d103      	bne.n	8012740 <tcpip_tcp_timer+0x1c>
 8012738:	4b09      	ldr	r3, [pc, #36]	; (8012760 <tcpip_tcp_timer+0x3c>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d005      	beq.n	801274c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012740:	2200      	movs	r2, #0
 8012742:	4908      	ldr	r1, [pc, #32]	; (8012764 <tcpip_tcp_timer+0x40>)
 8012744:	20fa      	movs	r0, #250	; 0xfa
 8012746:	f000 f8f3 	bl	8012930 <sys_timeout>
 801274a:	e003      	b.n	8012754 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801274c:	4b06      	ldr	r3, [pc, #24]	; (8012768 <tcpip_tcp_timer+0x44>)
 801274e:	2200      	movs	r2, #0
 8012750:	601a      	str	r2, [r3, #0]
  }
}
 8012752:	bf00      	nop
 8012754:	bf00      	nop
 8012756:	3708      	adds	r7, #8
 8012758:	46bd      	mov	sp, r7
 801275a:	bd80      	pop	{r7, pc}
 801275c:	20008f2c 	.word	0x20008f2c
 8012760:	20008f30 	.word	0x20008f30
 8012764:	08012725 	.word	0x08012725
 8012768:	20008f78 	.word	0x20008f78

0801276c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012770:	4b0a      	ldr	r3, [pc, #40]	; (801279c <tcp_timer_needed+0x30>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d10f      	bne.n	8012798 <tcp_timer_needed+0x2c>
 8012778:	4b09      	ldr	r3, [pc, #36]	; (80127a0 <tcp_timer_needed+0x34>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d103      	bne.n	8012788 <tcp_timer_needed+0x1c>
 8012780:	4b08      	ldr	r3, [pc, #32]	; (80127a4 <tcp_timer_needed+0x38>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d007      	beq.n	8012798 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012788:	4b04      	ldr	r3, [pc, #16]	; (801279c <tcp_timer_needed+0x30>)
 801278a:	2201      	movs	r2, #1
 801278c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801278e:	2200      	movs	r2, #0
 8012790:	4905      	ldr	r1, [pc, #20]	; (80127a8 <tcp_timer_needed+0x3c>)
 8012792:	20fa      	movs	r0, #250	; 0xfa
 8012794:	f000 f8cc 	bl	8012930 <sys_timeout>
  }
}
 8012798:	bf00      	nop
 801279a:	bd80      	pop	{r7, pc}
 801279c:	20008f78 	.word	0x20008f78
 80127a0:	20008f2c 	.word	0x20008f2c
 80127a4:	20008f30 	.word	0x20008f30
 80127a8:	08012725 	.word	0x08012725

080127ac <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b086      	sub	sp, #24
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	60f8      	str	r0, [r7, #12]
 80127b4:	60b9      	str	r1, [r7, #8]
 80127b6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80127b8:	2006      	movs	r0, #6
 80127ba:	f7f9 fc65 	bl	800c088 <memp_malloc>
 80127be:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80127c0:	693b      	ldr	r3, [r7, #16]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d109      	bne.n	80127da <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80127c6:	693b      	ldr	r3, [r7, #16]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d151      	bne.n	8012870 <sys_timeout_abs+0xc4>
 80127cc:	4b2a      	ldr	r3, [pc, #168]	; (8012878 <sys_timeout_abs+0xcc>)
 80127ce:	22be      	movs	r2, #190	; 0xbe
 80127d0:	492a      	ldr	r1, [pc, #168]	; (801287c <sys_timeout_abs+0xd0>)
 80127d2:	482b      	ldr	r0, [pc, #172]	; (8012880 <sys_timeout_abs+0xd4>)
 80127d4:	f003 fcd6 	bl	8016184 <iprintf>
    return;
 80127d8:	e04a      	b.n	8012870 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	2200      	movs	r2, #0
 80127de:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80127e0:	693b      	ldr	r3, [r7, #16]
 80127e2:	68ba      	ldr	r2, [r7, #8]
 80127e4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	687a      	ldr	r2, [r7, #4]
 80127ea:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80127ec:	693b      	ldr	r3, [r7, #16]
 80127ee:	68fa      	ldr	r2, [r7, #12]
 80127f0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80127f2:	4b24      	ldr	r3, [pc, #144]	; (8012884 <sys_timeout_abs+0xd8>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d103      	bne.n	8012802 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80127fa:	4a22      	ldr	r2, [pc, #136]	; (8012884 <sys_timeout_abs+0xd8>)
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	6013      	str	r3, [r2, #0]
    return;
 8012800:	e037      	b.n	8012872 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	685a      	ldr	r2, [r3, #4]
 8012806:	4b1f      	ldr	r3, [pc, #124]	; (8012884 <sys_timeout_abs+0xd8>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	1ad3      	subs	r3, r2, r3
 801280e:	0fdb      	lsrs	r3, r3, #31
 8012810:	f003 0301 	and.w	r3, r3, #1
 8012814:	b2db      	uxtb	r3, r3
 8012816:	2b00      	cmp	r3, #0
 8012818:	d007      	beq.n	801282a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801281a:	4b1a      	ldr	r3, [pc, #104]	; (8012884 <sys_timeout_abs+0xd8>)
 801281c:	681a      	ldr	r2, [r3, #0]
 801281e:	693b      	ldr	r3, [r7, #16]
 8012820:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012822:	4a18      	ldr	r2, [pc, #96]	; (8012884 <sys_timeout_abs+0xd8>)
 8012824:	693b      	ldr	r3, [r7, #16]
 8012826:	6013      	str	r3, [r2, #0]
 8012828:	e023      	b.n	8012872 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801282a:	4b16      	ldr	r3, [pc, #88]	; (8012884 <sys_timeout_abs+0xd8>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	617b      	str	r3, [r7, #20]
 8012830:	e01a      	b.n	8012868 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d00b      	beq.n	8012852 <sys_timeout_abs+0xa6>
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	685a      	ldr	r2, [r3, #4]
 801283e:	697b      	ldr	r3, [r7, #20]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	685b      	ldr	r3, [r3, #4]
 8012844:	1ad3      	subs	r3, r2, r3
 8012846:	0fdb      	lsrs	r3, r3, #31
 8012848:	f003 0301 	and.w	r3, r3, #1
 801284c:	b2db      	uxtb	r3, r3
 801284e:	2b00      	cmp	r3, #0
 8012850:	d007      	beq.n	8012862 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	681a      	ldr	r2, [r3, #0]
 8012856:	693b      	ldr	r3, [r7, #16]
 8012858:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	693a      	ldr	r2, [r7, #16]
 801285e:	601a      	str	r2, [r3, #0]
        break;
 8012860:	e007      	b.n	8012872 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	617b      	str	r3, [r7, #20]
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d1e1      	bne.n	8012832 <sys_timeout_abs+0x86>
 801286e:	e000      	b.n	8012872 <sys_timeout_abs+0xc6>
    return;
 8012870:	bf00      	nop
      }
    }
  }
}
 8012872:	3718      	adds	r7, #24
 8012874:	46bd      	mov	sp, r7
 8012876:	bd80      	pop	{r7, pc}
 8012878:	0801910c 	.word	0x0801910c
 801287c:	08019140 	.word	0x08019140
 8012880:	08019180 	.word	0x08019180
 8012884:	20008f70 	.word	0x20008f70

08012888 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012888:	b580      	push	{r7, lr}
 801288a:	b086      	sub	sp, #24
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012894:	697b      	ldr	r3, [r7, #20]
 8012896:	685b      	ldr	r3, [r3, #4]
 8012898:	4798      	blx	r3

  now = sys_now();
 801289a:	f7f8 fd71 	bl	800b380 <sys_now>
 801289e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	681a      	ldr	r2, [r3, #0]
 80128a4:	4b0f      	ldr	r3, [pc, #60]	; (80128e4 <lwip_cyclic_timer+0x5c>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	4413      	add	r3, r2
 80128aa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80128ac:	68fa      	ldr	r2, [r7, #12]
 80128ae:	693b      	ldr	r3, [r7, #16]
 80128b0:	1ad3      	subs	r3, r2, r3
 80128b2:	0fdb      	lsrs	r3, r3, #31
 80128b4:	f003 0301 	and.w	r3, r3, #1
 80128b8:	b2db      	uxtb	r3, r3
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d009      	beq.n	80128d2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	4413      	add	r3, r2
 80128c6:	687a      	ldr	r2, [r7, #4]
 80128c8:	4907      	ldr	r1, [pc, #28]	; (80128e8 <lwip_cyclic_timer+0x60>)
 80128ca:	4618      	mov	r0, r3
 80128cc:	f7ff ff6e 	bl	80127ac <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80128d0:	e004      	b.n	80128dc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80128d2:	687a      	ldr	r2, [r7, #4]
 80128d4:	4904      	ldr	r1, [pc, #16]	; (80128e8 <lwip_cyclic_timer+0x60>)
 80128d6:	68f8      	ldr	r0, [r7, #12]
 80128d8:	f7ff ff68 	bl	80127ac <sys_timeout_abs>
}
 80128dc:	bf00      	nop
 80128de:	3718      	adds	r7, #24
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}
 80128e4:	20008f74 	.word	0x20008f74
 80128e8:	08012889 	.word	0x08012889

080128ec <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	b082      	sub	sp, #8
 80128f0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80128f2:	2301      	movs	r3, #1
 80128f4:	607b      	str	r3, [r7, #4]
 80128f6:	e00e      	b.n	8012916 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80128f8:	4a0b      	ldr	r2, [pc, #44]	; (8012928 <sys_timeouts_init+0x3c>)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	00db      	lsls	r3, r3, #3
 8012904:	4a08      	ldr	r2, [pc, #32]	; (8012928 <sys_timeouts_init+0x3c>)
 8012906:	4413      	add	r3, r2
 8012908:	461a      	mov	r2, r3
 801290a:	4908      	ldr	r1, [pc, #32]	; (801292c <sys_timeouts_init+0x40>)
 801290c:	f000 f810 	bl	8012930 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	3301      	adds	r3, #1
 8012914:	607b      	str	r3, [r7, #4]
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2b02      	cmp	r3, #2
 801291a:	d9ed      	bls.n	80128f8 <sys_timeouts_init+0xc>
  }
}
 801291c:	bf00      	nop
 801291e:	bf00      	nop
 8012920:	3708      	adds	r7, #8
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
 8012926:	bf00      	nop
 8012928:	08019d24 	.word	0x08019d24
 801292c:	08012889 	.word	0x08012889

08012930 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b086      	sub	sp, #24
 8012934:	af00      	add	r7, sp, #0
 8012936:	60f8      	str	r0, [r7, #12]
 8012938:	60b9      	str	r1, [r7, #8]
 801293a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801293c:	68fb      	ldr	r3, [r7, #12]
 801293e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012942:	d306      	bcc.n	8012952 <sys_timeout+0x22>
 8012944:	4b0a      	ldr	r3, [pc, #40]	; (8012970 <sys_timeout+0x40>)
 8012946:	f240 1229 	movw	r2, #297	; 0x129
 801294a:	490a      	ldr	r1, [pc, #40]	; (8012974 <sys_timeout+0x44>)
 801294c:	480a      	ldr	r0, [pc, #40]	; (8012978 <sys_timeout+0x48>)
 801294e:	f003 fc19 	bl	8016184 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012952:	f7f8 fd15 	bl	800b380 <sys_now>
 8012956:	4602      	mov	r2, r0
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	4413      	add	r3, r2
 801295c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801295e:	687a      	ldr	r2, [r7, #4]
 8012960:	68b9      	ldr	r1, [r7, #8]
 8012962:	6978      	ldr	r0, [r7, #20]
 8012964:	f7ff ff22 	bl	80127ac <sys_timeout_abs>
#endif
}
 8012968:	bf00      	nop
 801296a:	3718      	adds	r7, #24
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}
 8012970:	0801910c 	.word	0x0801910c
 8012974:	080191a8 	.word	0x080191a8
 8012978:	08019180 	.word	0x08019180

0801297c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b084      	sub	sp, #16
 8012980:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012982:	f7f8 fcfd 	bl	800b380 <sys_now>
 8012986:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012988:	4b1a      	ldr	r3, [pc, #104]	; (80129f4 <sys_check_timeouts+0x78>)
 801298a:	781b      	ldrb	r3, [r3, #0]
 801298c:	b2db      	uxtb	r3, r3
 801298e:	2b00      	cmp	r3, #0
 8012990:	d001      	beq.n	8012996 <sys_check_timeouts+0x1a>
 8012992:	f7f9 ff25 	bl	800c7e0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012996:	4b18      	ldr	r3, [pc, #96]	; (80129f8 <sys_check_timeouts+0x7c>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d022      	beq.n	80129e8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	68fa      	ldr	r2, [r7, #12]
 80129a8:	1ad3      	subs	r3, r2, r3
 80129aa:	0fdb      	lsrs	r3, r3, #31
 80129ac:	f003 0301 	and.w	r3, r3, #1
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d11a      	bne.n	80129ec <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80129b6:	68bb      	ldr	r3, [r7, #8]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	4a0f      	ldr	r2, [pc, #60]	; (80129f8 <sys_check_timeouts+0x7c>)
 80129bc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	689b      	ldr	r3, [r3, #8]
 80129c2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80129c4:	68bb      	ldr	r3, [r7, #8]
 80129c6:	68db      	ldr	r3, [r3, #12]
 80129c8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	685b      	ldr	r3, [r3, #4]
 80129ce:	4a0b      	ldr	r2, [pc, #44]	; (80129fc <sys_check_timeouts+0x80>)
 80129d0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80129d2:	68b9      	ldr	r1, [r7, #8]
 80129d4:	2006      	movs	r0, #6
 80129d6:	f7f9 fbc7 	bl	800c168 <memp_free>
    if (handler != NULL) {
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d0d3      	beq.n	8012988 <sys_check_timeouts+0xc>
      handler(arg);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	6838      	ldr	r0, [r7, #0]
 80129e4:	4798      	blx	r3
  do {
 80129e6:	e7cf      	b.n	8012988 <sys_check_timeouts+0xc>
      return;
 80129e8:	bf00      	nop
 80129ea:	e000      	b.n	80129ee <sys_check_timeouts+0x72>
      return;
 80129ec:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80129ee:	3710      	adds	r7, #16
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	20008f1d 	.word	0x20008f1d
 80129f8:	20008f70 	.word	0x20008f70
 80129fc:	20008f74 	.word	0x20008f74

08012a00 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012a00:	b580      	push	{r7, lr}
 8012a02:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012a04:	f003 fbd6 	bl	80161b4 <rand>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012a10:	b29b      	uxth	r3, r3
 8012a12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012a16:	b29a      	uxth	r2, r3
 8012a18:	4b01      	ldr	r3, [pc, #4]	; (8012a20 <udp_init+0x20>)
 8012a1a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012a1c:	bf00      	nop
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	20000028 	.word	0x20000028

08012a24 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012a24:	b480      	push	{r7}
 8012a26:	b083      	sub	sp, #12
 8012a28:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012a2e:	4b17      	ldr	r3, [pc, #92]	; (8012a8c <udp_new_port+0x68>)
 8012a30:	881b      	ldrh	r3, [r3, #0]
 8012a32:	1c5a      	adds	r2, r3, #1
 8012a34:	b291      	uxth	r1, r2
 8012a36:	4a15      	ldr	r2, [pc, #84]	; (8012a8c <udp_new_port+0x68>)
 8012a38:	8011      	strh	r1, [r2, #0]
 8012a3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a3e:	4293      	cmp	r3, r2
 8012a40:	d103      	bne.n	8012a4a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012a42:	4b12      	ldr	r3, [pc, #72]	; (8012a8c <udp_new_port+0x68>)
 8012a44:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012a48:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a4a:	4b11      	ldr	r3, [pc, #68]	; (8012a90 <udp_new_port+0x6c>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	603b      	str	r3, [r7, #0]
 8012a50:	e011      	b.n	8012a76 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012a52:	683b      	ldr	r3, [r7, #0]
 8012a54:	8a5a      	ldrh	r2, [r3, #18]
 8012a56:	4b0d      	ldr	r3, [pc, #52]	; (8012a8c <udp_new_port+0x68>)
 8012a58:	881b      	ldrh	r3, [r3, #0]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d108      	bne.n	8012a70 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012a5e:	88fb      	ldrh	r3, [r7, #6]
 8012a60:	3301      	adds	r3, #1
 8012a62:	80fb      	strh	r3, [r7, #6]
 8012a64:	88fb      	ldrh	r3, [r7, #6]
 8012a66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012a6a:	d3e0      	bcc.n	8012a2e <udp_new_port+0xa>
        return 0;
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	e007      	b.n	8012a80 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	68db      	ldr	r3, [r3, #12]
 8012a74:	603b      	str	r3, [r7, #0]
 8012a76:	683b      	ldr	r3, [r7, #0]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d1ea      	bne.n	8012a52 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012a7c:	4b03      	ldr	r3, [pc, #12]	; (8012a8c <udp_new_port+0x68>)
 8012a7e:	881b      	ldrh	r3, [r3, #0]
}
 8012a80:	4618      	mov	r0, r3
 8012a82:	370c      	adds	r7, #12
 8012a84:	46bd      	mov	sp, r7
 8012a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a8a:	4770      	bx	lr
 8012a8c:	20000028 	.word	0x20000028
 8012a90:	20008f7c 	.word	0x20008f7c

08012a94 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012a94:	b580      	push	{r7, lr}
 8012a96:	b084      	sub	sp, #16
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	60f8      	str	r0, [r7, #12]
 8012a9c:	60b9      	str	r1, [r7, #8]
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d105      	bne.n	8012ab4 <udp_input_local_match+0x20>
 8012aa8:	4b27      	ldr	r3, [pc, #156]	; (8012b48 <udp_input_local_match+0xb4>)
 8012aaa:	2287      	movs	r2, #135	; 0x87
 8012aac:	4927      	ldr	r1, [pc, #156]	; (8012b4c <udp_input_local_match+0xb8>)
 8012aae:	4828      	ldr	r0, [pc, #160]	; (8012b50 <udp_input_local_match+0xbc>)
 8012ab0:	f003 fb68 	bl	8016184 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d105      	bne.n	8012ac6 <udp_input_local_match+0x32>
 8012aba:	4b23      	ldr	r3, [pc, #140]	; (8012b48 <udp_input_local_match+0xb4>)
 8012abc:	2288      	movs	r2, #136	; 0x88
 8012abe:	4925      	ldr	r1, [pc, #148]	; (8012b54 <udp_input_local_match+0xc0>)
 8012ac0:	4823      	ldr	r0, [pc, #140]	; (8012b50 <udp_input_local_match+0xbc>)
 8012ac2:	f003 fb5f 	bl	8016184 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	7a1b      	ldrb	r3, [r3, #8]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d00b      	beq.n	8012ae6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	7a1a      	ldrb	r2, [r3, #8]
 8012ad2:	4b21      	ldr	r3, [pc, #132]	; (8012b58 <udp_input_local_match+0xc4>)
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ada:	3301      	adds	r3, #1
 8012adc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d001      	beq.n	8012ae6 <udp_input_local_match+0x52>
    return 0;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	e02b      	b.n	8012b3e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012ae6:	79fb      	ldrb	r3, [r7, #7]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d018      	beq.n	8012b1e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d013      	beq.n	8012b1a <udp_input_local_match+0x86>
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d00f      	beq.n	8012b1a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012afa:	4b17      	ldr	r3, [pc, #92]	; (8012b58 <udp_input_local_match+0xc4>)
 8012afc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012afe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b02:	d00a      	beq.n	8012b1a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	681a      	ldr	r2, [r3, #0]
 8012b08:	4b13      	ldr	r3, [pc, #76]	; (8012b58 <udp_input_local_match+0xc4>)
 8012b0a:	695b      	ldr	r3, [r3, #20]
 8012b0c:	405a      	eors	r2, r3
 8012b0e:	68bb      	ldr	r3, [r7, #8]
 8012b10:	3308      	adds	r3, #8
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d110      	bne.n	8012b3c <udp_input_local_match+0xa8>
          return 1;
 8012b1a:	2301      	movs	r3, #1
 8012b1c:	e00f      	b.n	8012b3e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d009      	beq.n	8012b38 <udp_input_local_match+0xa4>
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d005      	beq.n	8012b38 <udp_input_local_match+0xa4>
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	4b09      	ldr	r3, [pc, #36]	; (8012b58 <udp_input_local_match+0xc4>)
 8012b32:	695b      	ldr	r3, [r3, #20]
 8012b34:	429a      	cmp	r2, r3
 8012b36:	d101      	bne.n	8012b3c <udp_input_local_match+0xa8>
        return 1;
 8012b38:	2301      	movs	r3, #1
 8012b3a:	e000      	b.n	8012b3e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012b3c:	2300      	movs	r3, #0
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	3710      	adds	r7, #16
 8012b42:	46bd      	mov	sp, r7
 8012b44:	bd80      	pop	{r7, pc}
 8012b46:	bf00      	nop
 8012b48:	080191f4 	.word	0x080191f4
 8012b4c:	08019224 	.word	0x08019224
 8012b50:	08019248 	.word	0x08019248
 8012b54:	08019270 	.word	0x08019270
 8012b58:	200059b0 	.word	0x200059b0

08012b5c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012b5c:	b590      	push	{r4, r7, lr}
 8012b5e:	b08d      	sub	sp, #52	; 0x34
 8012b60:	af02      	add	r7, sp, #8
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012b66:	2300      	movs	r3, #0
 8012b68:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d105      	bne.n	8012b7c <udp_input+0x20>
 8012b70:	4b7c      	ldr	r3, [pc, #496]	; (8012d64 <udp_input+0x208>)
 8012b72:	22cf      	movs	r2, #207	; 0xcf
 8012b74:	497c      	ldr	r1, [pc, #496]	; (8012d68 <udp_input+0x20c>)
 8012b76:	487d      	ldr	r0, [pc, #500]	; (8012d6c <udp_input+0x210>)
 8012b78:	f003 fb04 	bl	8016184 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d105      	bne.n	8012b8e <udp_input+0x32>
 8012b82:	4b78      	ldr	r3, [pc, #480]	; (8012d64 <udp_input+0x208>)
 8012b84:	22d0      	movs	r2, #208	; 0xd0
 8012b86:	497a      	ldr	r1, [pc, #488]	; (8012d70 <udp_input+0x214>)
 8012b88:	4878      	ldr	r0, [pc, #480]	; (8012d6c <udp_input+0x210>)
 8012b8a:	f003 fafb 	bl	8016184 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	895b      	ldrh	r3, [r3, #10]
 8012b92:	2b07      	cmp	r3, #7
 8012b94:	d803      	bhi.n	8012b9e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012b96:	6878      	ldr	r0, [r7, #4]
 8012b98:	f7fa f95c 	bl	800ce54 <pbuf_free>
    goto end;
 8012b9c:	e0de      	b.n	8012d5c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012ba4:	4b73      	ldr	r3, [pc, #460]	; (8012d74 <udp_input+0x218>)
 8012ba6:	695b      	ldr	r3, [r3, #20]
 8012ba8:	4a72      	ldr	r2, [pc, #456]	; (8012d74 <udp_input+0x218>)
 8012baa:	6812      	ldr	r2, [r2, #0]
 8012bac:	4611      	mov	r1, r2
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f001 ffe2 	bl	8014b78 <ip4_addr_isbroadcast_u32>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012bb8:	697b      	ldr	r3, [r7, #20]
 8012bba:	881b      	ldrh	r3, [r3, #0]
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f7f8 fdea 	bl	800b798 <lwip_htons>
 8012bc4:	4603      	mov	r3, r0
 8012bc6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	885b      	ldrh	r3, [r3, #2]
 8012bcc:	b29b      	uxth	r3, r3
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7f8 fde2 	bl	800b798 <lwip_htons>
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012bdc:	2300      	movs	r3, #0
 8012bde:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012be0:	2300      	movs	r3, #0
 8012be2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012be4:	4b64      	ldr	r3, [pc, #400]	; (8012d78 <udp_input+0x21c>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	627b      	str	r3, [r7, #36]	; 0x24
 8012bea:	e054      	b.n	8012c96 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bee:	8a5b      	ldrh	r3, [r3, #18]
 8012bf0:	89fa      	ldrh	r2, [r7, #14]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d14a      	bne.n	8012c8c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012bf6:	7cfb      	ldrb	r3, [r7, #19]
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	6839      	ldr	r1, [r7, #0]
 8012bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bfe:	f7ff ff49 	bl	8012a94 <udp_input_local_match>
 8012c02:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d041      	beq.n	8012c8c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0a:	7c1b      	ldrb	r3, [r3, #16]
 8012c0c:	f003 0304 	and.w	r3, r3, #4
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d11d      	bne.n	8012c50 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012c14:	69fb      	ldr	r3, [r7, #28]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d102      	bne.n	8012c20 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1c:	61fb      	str	r3, [r7, #28]
 8012c1e:	e017      	b.n	8012c50 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012c20:	7cfb      	ldrb	r3, [r7, #19]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d014      	beq.n	8012c50 <udp_input+0xf4>
 8012c26:	4b53      	ldr	r3, [pc, #332]	; (8012d74 <udp_input+0x218>)
 8012c28:	695b      	ldr	r3, [r3, #20]
 8012c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c2e:	d10f      	bne.n	8012c50 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	681a      	ldr	r2, [r3, #0]
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	3304      	adds	r3, #4
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	429a      	cmp	r2, r3
 8012c3c:	d008      	beq.n	8012c50 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c40:	681a      	ldr	r2, [r3, #0]
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	3304      	adds	r3, #4
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d101      	bne.n	8012c50 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c52:	8a9b      	ldrh	r3, [r3, #20]
 8012c54:	8a3a      	ldrh	r2, [r7, #16]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d118      	bne.n	8012c8c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c5c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d005      	beq.n	8012c6e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c64:	685a      	ldr	r2, [r3, #4]
 8012c66:	4b43      	ldr	r3, [pc, #268]	; (8012d74 <udp_input+0x218>)
 8012c68:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d10e      	bne.n	8012c8c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012c6e:	6a3b      	ldr	r3, [r7, #32]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d014      	beq.n	8012c9e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c76:	68da      	ldr	r2, [r3, #12]
 8012c78:	6a3b      	ldr	r3, [r7, #32]
 8012c7a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012c7c:	4b3e      	ldr	r3, [pc, #248]	; (8012d78 <udp_input+0x21c>)
 8012c7e:	681a      	ldr	r2, [r3, #0]
 8012c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c82:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012c84:	4a3c      	ldr	r2, [pc, #240]	; (8012d78 <udp_input+0x21c>)
 8012c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c88:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012c8a:	e008      	b.n	8012c9e <udp_input+0x142>
      }
    }

    prev = pcb;
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	627b      	str	r3, [r7, #36]	; 0x24
 8012c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d1a7      	bne.n	8012bec <udp_input+0x90>
 8012c9c:	e000      	b.n	8012ca0 <udp_input+0x144>
        break;
 8012c9e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d101      	bne.n	8012caa <udp_input+0x14e>
    pcb = uncon_pcb;
 8012ca6:	69fb      	ldr	r3, [r7, #28]
 8012ca8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d002      	beq.n	8012cb6 <udp_input+0x15a>
    for_us = 1;
 8012cb0:	2301      	movs	r3, #1
 8012cb2:	76fb      	strb	r3, [r7, #27]
 8012cb4:	e00a      	b.n	8012ccc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012cb6:	683b      	ldr	r3, [r7, #0]
 8012cb8:	3304      	adds	r3, #4
 8012cba:	681a      	ldr	r2, [r3, #0]
 8012cbc:	4b2d      	ldr	r3, [pc, #180]	; (8012d74 <udp_input+0x218>)
 8012cbe:	695b      	ldr	r3, [r3, #20]
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	bf0c      	ite	eq
 8012cc4:	2301      	moveq	r3, #1
 8012cc6:	2300      	movne	r3, #0
 8012cc8:	b2db      	uxtb	r3, r3
 8012cca:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012ccc:	7efb      	ldrb	r3, [r7, #27]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d041      	beq.n	8012d56 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012cd2:	2108      	movs	r1, #8
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f7fa f837 	bl	800cd48 <pbuf_remove_header>
 8012cda:	4603      	mov	r3, r0
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d00a      	beq.n	8012cf6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012ce0:	4b20      	ldr	r3, [pc, #128]	; (8012d64 <udp_input+0x208>)
 8012ce2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012ce6:	4925      	ldr	r1, [pc, #148]	; (8012d7c <udp_input+0x220>)
 8012ce8:	4820      	ldr	r0, [pc, #128]	; (8012d6c <udp_input+0x210>)
 8012cea:	f003 fa4b 	bl	8016184 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f7fa f8b0 	bl	800ce54 <pbuf_free>
      goto end;
 8012cf4:	e032      	b.n	8012d5c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d012      	beq.n	8012d22 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfe:	699b      	ldr	r3, [r3, #24]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d00a      	beq.n	8012d1a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d06:	699c      	ldr	r4, [r3, #24]
 8012d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0a:	69d8      	ldr	r0, [r3, #28]
 8012d0c:	8a3b      	ldrh	r3, [r7, #16]
 8012d0e:	9300      	str	r3, [sp, #0]
 8012d10:	4b1b      	ldr	r3, [pc, #108]	; (8012d80 <udp_input+0x224>)
 8012d12:	687a      	ldr	r2, [r7, #4]
 8012d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d16:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012d18:	e021      	b.n	8012d5e <udp_input+0x202>
        pbuf_free(p);
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f7fa f89a 	bl	800ce54 <pbuf_free>
        goto end;
 8012d20:	e01c      	b.n	8012d5c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012d22:	7cfb      	ldrb	r3, [r7, #19]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d112      	bne.n	8012d4e <udp_input+0x1f2>
 8012d28:	4b12      	ldr	r3, [pc, #72]	; (8012d74 <udp_input+0x218>)
 8012d2a:	695b      	ldr	r3, [r3, #20]
 8012d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d30:	2be0      	cmp	r3, #224	; 0xe0
 8012d32:	d00c      	beq.n	8012d4e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012d34:	4b0f      	ldr	r3, [pc, #60]	; (8012d74 <udp_input+0x218>)
 8012d36:	899b      	ldrh	r3, [r3, #12]
 8012d38:	3308      	adds	r3, #8
 8012d3a:	b29b      	uxth	r3, r3
 8012d3c:	b21b      	sxth	r3, r3
 8012d3e:	4619      	mov	r1, r3
 8012d40:	6878      	ldr	r0, [r7, #4]
 8012d42:	f7fa f874 	bl	800ce2e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012d46:	2103      	movs	r1, #3
 8012d48:	6878      	ldr	r0, [r7, #4]
 8012d4a:	f001 fbf5 	bl	8014538 <icmp_dest_unreach>
      pbuf_free(p);
 8012d4e:	6878      	ldr	r0, [r7, #4]
 8012d50:	f7fa f880 	bl	800ce54 <pbuf_free>
  return;
 8012d54:	e003      	b.n	8012d5e <udp_input+0x202>
    pbuf_free(p);
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f7fa f87c 	bl	800ce54 <pbuf_free>
  return;
 8012d5c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012d5e:	372c      	adds	r7, #44	; 0x2c
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd90      	pop	{r4, r7, pc}
 8012d64:	080191f4 	.word	0x080191f4
 8012d68:	08019298 	.word	0x08019298
 8012d6c:	08019248 	.word	0x08019248
 8012d70:	080192b0 	.word	0x080192b0
 8012d74:	200059b0 	.word	0x200059b0
 8012d78:	20008f7c 	.word	0x20008f7c
 8012d7c:	080192cc 	.word	0x080192cc
 8012d80:	200059c0 	.word	0x200059c0

08012d84 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b082      	sub	sp, #8
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	6078      	str	r0, [r7, #4]
 8012d8c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d109      	bne.n	8012da8 <udp_send+0x24>
 8012d94:	4b11      	ldr	r3, [pc, #68]	; (8012ddc <udp_send+0x58>)
 8012d96:	f240 12d5 	movw	r2, #469	; 0x1d5
 8012d9a:	4911      	ldr	r1, [pc, #68]	; (8012de0 <udp_send+0x5c>)
 8012d9c:	4811      	ldr	r0, [pc, #68]	; (8012de4 <udp_send+0x60>)
 8012d9e:	f003 f9f1 	bl	8016184 <iprintf>
 8012da2:	f06f 030f 	mvn.w	r3, #15
 8012da6:	e015      	b.n	8012dd4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8012da8:	683b      	ldr	r3, [r7, #0]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d109      	bne.n	8012dc2 <udp_send+0x3e>
 8012dae:	4b0b      	ldr	r3, [pc, #44]	; (8012ddc <udp_send+0x58>)
 8012db0:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8012db4:	490c      	ldr	r1, [pc, #48]	; (8012de8 <udp_send+0x64>)
 8012db6:	480b      	ldr	r0, [pc, #44]	; (8012de4 <udp_send+0x60>)
 8012db8:	f003 f9e4 	bl	8016184 <iprintf>
 8012dbc:	f06f 030f 	mvn.w	r3, #15
 8012dc0:	e008      	b.n	8012dd4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	1d1a      	adds	r2, r3, #4
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	8a9b      	ldrh	r3, [r3, #20]
 8012dca:	6839      	ldr	r1, [r7, #0]
 8012dcc:	6878      	ldr	r0, [r7, #4]
 8012dce:	f000 f80d 	bl	8012dec <udp_sendto>
 8012dd2:	4603      	mov	r3, r0
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	3708      	adds	r7, #8
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	bd80      	pop	{r7, pc}
 8012ddc:	080191f4 	.word	0x080191f4
 8012de0:	080192e8 	.word	0x080192e8
 8012de4:	08019248 	.word	0x08019248
 8012de8:	08019300 	.word	0x08019300

08012dec <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b088      	sub	sp, #32
 8012df0:	af02      	add	r7, sp, #8
 8012df2:	60f8      	str	r0, [r7, #12]
 8012df4:	60b9      	str	r1, [r7, #8]
 8012df6:	607a      	str	r2, [r7, #4]
 8012df8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d109      	bne.n	8012e14 <udp_sendto+0x28>
 8012e00:	4b23      	ldr	r3, [pc, #140]	; (8012e90 <udp_sendto+0xa4>)
 8012e02:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012e06:	4923      	ldr	r1, [pc, #140]	; (8012e94 <udp_sendto+0xa8>)
 8012e08:	4823      	ldr	r0, [pc, #140]	; (8012e98 <udp_sendto+0xac>)
 8012e0a:	f003 f9bb 	bl	8016184 <iprintf>
 8012e0e:	f06f 030f 	mvn.w	r3, #15
 8012e12:	e038      	b.n	8012e86 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d109      	bne.n	8012e2e <udp_sendto+0x42>
 8012e1a:	4b1d      	ldr	r3, [pc, #116]	; (8012e90 <udp_sendto+0xa4>)
 8012e1c:	f240 2219 	movw	r2, #537	; 0x219
 8012e20:	491e      	ldr	r1, [pc, #120]	; (8012e9c <udp_sendto+0xb0>)
 8012e22:	481d      	ldr	r0, [pc, #116]	; (8012e98 <udp_sendto+0xac>)
 8012e24:	f003 f9ae 	bl	8016184 <iprintf>
 8012e28:	f06f 030f 	mvn.w	r3, #15
 8012e2c:	e02b      	b.n	8012e86 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d109      	bne.n	8012e48 <udp_sendto+0x5c>
 8012e34:	4b16      	ldr	r3, [pc, #88]	; (8012e90 <udp_sendto+0xa4>)
 8012e36:	f240 221a 	movw	r2, #538	; 0x21a
 8012e3a:	4919      	ldr	r1, [pc, #100]	; (8012ea0 <udp_sendto+0xb4>)
 8012e3c:	4816      	ldr	r0, [pc, #88]	; (8012e98 <udp_sendto+0xac>)
 8012e3e:	f003 f9a1 	bl	8016184 <iprintf>
 8012e42:	f06f 030f 	mvn.w	r3, #15
 8012e46:	e01e      	b.n	8012e86 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	7a1b      	ldrb	r3, [r3, #8]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d006      	beq.n	8012e5e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	7a1b      	ldrb	r3, [r3, #8]
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7f9 fc9d 	bl	800c794 <netif_get_by_index>
 8012e5a:	6178      	str	r0, [r7, #20]
 8012e5c:	e003      	b.n	8012e66 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8012e5e:	6878      	ldr	r0, [r7, #4]
 8012e60:	f001 fbf4 	bl	801464c <ip4_route>
 8012e64:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d102      	bne.n	8012e72 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8012e6c:	f06f 0303 	mvn.w	r3, #3
 8012e70:	e009      	b.n	8012e86 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8012e72:	887a      	ldrh	r2, [r7, #2]
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	9300      	str	r3, [sp, #0]
 8012e78:	4613      	mov	r3, r2
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	68b9      	ldr	r1, [r7, #8]
 8012e7e:	68f8      	ldr	r0, [r7, #12]
 8012e80:	f000 f810 	bl	8012ea4 <udp_sendto_if>
 8012e84:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012e86:	4618      	mov	r0, r3
 8012e88:	3718      	adds	r7, #24
 8012e8a:	46bd      	mov	sp, r7
 8012e8c:	bd80      	pop	{r7, pc}
 8012e8e:	bf00      	nop
 8012e90:	080191f4 	.word	0x080191f4
 8012e94:	08019318 	.word	0x08019318
 8012e98:	08019248 	.word	0x08019248
 8012e9c:	08019330 	.word	0x08019330
 8012ea0:	0801934c 	.word	0x0801934c

08012ea4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b088      	sub	sp, #32
 8012ea8:	af02      	add	r7, sp, #8
 8012eaa:	60f8      	str	r0, [r7, #12]
 8012eac:	60b9      	str	r1, [r7, #8]
 8012eae:	607a      	str	r2, [r7, #4]
 8012eb0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d109      	bne.n	8012ecc <udp_sendto_if+0x28>
 8012eb8:	4b2e      	ldr	r3, [pc, #184]	; (8012f74 <udp_sendto_if+0xd0>)
 8012eba:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012ebe:	492e      	ldr	r1, [pc, #184]	; (8012f78 <udp_sendto_if+0xd4>)
 8012ec0:	482e      	ldr	r0, [pc, #184]	; (8012f7c <udp_sendto_if+0xd8>)
 8012ec2:	f003 f95f 	bl	8016184 <iprintf>
 8012ec6:	f06f 030f 	mvn.w	r3, #15
 8012eca:	e04f      	b.n	8012f6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d109      	bne.n	8012ee6 <udp_sendto_if+0x42>
 8012ed2:	4b28      	ldr	r3, [pc, #160]	; (8012f74 <udp_sendto_if+0xd0>)
 8012ed4:	f240 2281 	movw	r2, #641	; 0x281
 8012ed8:	4929      	ldr	r1, [pc, #164]	; (8012f80 <udp_sendto_if+0xdc>)
 8012eda:	4828      	ldr	r0, [pc, #160]	; (8012f7c <udp_sendto_if+0xd8>)
 8012edc:	f003 f952 	bl	8016184 <iprintf>
 8012ee0:	f06f 030f 	mvn.w	r3, #15
 8012ee4:	e042      	b.n	8012f6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d109      	bne.n	8012f00 <udp_sendto_if+0x5c>
 8012eec:	4b21      	ldr	r3, [pc, #132]	; (8012f74 <udp_sendto_if+0xd0>)
 8012eee:	f240 2282 	movw	r2, #642	; 0x282
 8012ef2:	4924      	ldr	r1, [pc, #144]	; (8012f84 <udp_sendto_if+0xe0>)
 8012ef4:	4821      	ldr	r0, [pc, #132]	; (8012f7c <udp_sendto_if+0xd8>)
 8012ef6:	f003 f945 	bl	8016184 <iprintf>
 8012efa:	f06f 030f 	mvn.w	r3, #15
 8012efe:	e035      	b.n	8012f6c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012f00:	6a3b      	ldr	r3, [r7, #32]
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d109      	bne.n	8012f1a <udp_sendto_if+0x76>
 8012f06:	4b1b      	ldr	r3, [pc, #108]	; (8012f74 <udp_sendto_if+0xd0>)
 8012f08:	f240 2283 	movw	r2, #643	; 0x283
 8012f0c:	491e      	ldr	r1, [pc, #120]	; (8012f88 <udp_sendto_if+0xe4>)
 8012f0e:	481b      	ldr	r0, [pc, #108]	; (8012f7c <udp_sendto_if+0xd8>)
 8012f10:	f003 f938 	bl	8016184 <iprintf>
 8012f14:	f06f 030f 	mvn.w	r3, #15
 8012f18:	e028      	b.n	8012f6c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d009      	beq.n	8012f34 <udp_sendto_if+0x90>
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d005      	beq.n	8012f34 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f30:	2be0      	cmp	r3, #224	; 0xe0
 8012f32:	d103      	bne.n	8012f3c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012f34:	6a3b      	ldr	r3, [r7, #32]
 8012f36:	3304      	adds	r3, #4
 8012f38:	617b      	str	r3, [r7, #20]
 8012f3a:	e00b      	b.n	8012f54 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	681a      	ldr	r2, [r3, #0]
 8012f40:	6a3b      	ldr	r3, [r7, #32]
 8012f42:	3304      	adds	r3, #4
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d002      	beq.n	8012f50 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012f4a:	f06f 0303 	mvn.w	r3, #3
 8012f4e:	e00d      	b.n	8012f6c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012f54:	887a      	ldrh	r2, [r7, #2]
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	9301      	str	r3, [sp, #4]
 8012f5a:	6a3b      	ldr	r3, [r7, #32]
 8012f5c:	9300      	str	r3, [sp, #0]
 8012f5e:	4613      	mov	r3, r2
 8012f60:	687a      	ldr	r2, [r7, #4]
 8012f62:	68b9      	ldr	r1, [r7, #8]
 8012f64:	68f8      	ldr	r0, [r7, #12]
 8012f66:	f000 f811 	bl	8012f8c <udp_sendto_if_src>
 8012f6a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	3718      	adds	r7, #24
 8012f70:	46bd      	mov	sp, r7
 8012f72:	bd80      	pop	{r7, pc}
 8012f74:	080191f4 	.word	0x080191f4
 8012f78:	08019368 	.word	0x08019368
 8012f7c:	08019248 	.word	0x08019248
 8012f80:	08019384 	.word	0x08019384
 8012f84:	080193a0 	.word	0x080193a0
 8012f88:	080193c0 	.word	0x080193c0

08012f8c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b08c      	sub	sp, #48	; 0x30
 8012f90:	af04      	add	r7, sp, #16
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	607a      	str	r2, [r7, #4]
 8012f98:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d109      	bne.n	8012fb4 <udp_sendto_if_src+0x28>
 8012fa0:	4b65      	ldr	r3, [pc, #404]	; (8013138 <udp_sendto_if_src+0x1ac>)
 8012fa2:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012fa6:	4965      	ldr	r1, [pc, #404]	; (801313c <udp_sendto_if_src+0x1b0>)
 8012fa8:	4865      	ldr	r0, [pc, #404]	; (8013140 <udp_sendto_if_src+0x1b4>)
 8012faa:	f003 f8eb 	bl	8016184 <iprintf>
 8012fae:	f06f 030f 	mvn.w	r3, #15
 8012fb2:	e0bc      	b.n	801312e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012fb4:	68bb      	ldr	r3, [r7, #8]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d109      	bne.n	8012fce <udp_sendto_if_src+0x42>
 8012fba:	4b5f      	ldr	r3, [pc, #380]	; (8013138 <udp_sendto_if_src+0x1ac>)
 8012fbc:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012fc0:	4960      	ldr	r1, [pc, #384]	; (8013144 <udp_sendto_if_src+0x1b8>)
 8012fc2:	485f      	ldr	r0, [pc, #380]	; (8013140 <udp_sendto_if_src+0x1b4>)
 8012fc4:	f003 f8de 	bl	8016184 <iprintf>
 8012fc8:	f06f 030f 	mvn.w	r3, #15
 8012fcc:	e0af      	b.n	801312e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d109      	bne.n	8012fe8 <udp_sendto_if_src+0x5c>
 8012fd4:	4b58      	ldr	r3, [pc, #352]	; (8013138 <udp_sendto_if_src+0x1ac>)
 8012fd6:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012fda:	495b      	ldr	r1, [pc, #364]	; (8013148 <udp_sendto_if_src+0x1bc>)
 8012fdc:	4858      	ldr	r0, [pc, #352]	; (8013140 <udp_sendto_if_src+0x1b4>)
 8012fde:	f003 f8d1 	bl	8016184 <iprintf>
 8012fe2:	f06f 030f 	mvn.w	r3, #15
 8012fe6:	e0a2      	b.n	801312e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d109      	bne.n	8013002 <udp_sendto_if_src+0x76>
 8012fee:	4b52      	ldr	r3, [pc, #328]	; (8013138 <udp_sendto_if_src+0x1ac>)
 8012ff0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012ff4:	4955      	ldr	r1, [pc, #340]	; (801314c <udp_sendto_if_src+0x1c0>)
 8012ff6:	4852      	ldr	r0, [pc, #328]	; (8013140 <udp_sendto_if_src+0x1b4>)
 8012ff8:	f003 f8c4 	bl	8016184 <iprintf>
 8012ffc:	f06f 030f 	mvn.w	r3, #15
 8013000:	e095      	b.n	801312e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013004:	2b00      	cmp	r3, #0
 8013006:	d109      	bne.n	801301c <udp_sendto_if_src+0x90>
 8013008:	4b4b      	ldr	r3, [pc, #300]	; (8013138 <udp_sendto_if_src+0x1ac>)
 801300a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801300e:	4950      	ldr	r1, [pc, #320]	; (8013150 <udp_sendto_if_src+0x1c4>)
 8013010:	484b      	ldr	r0, [pc, #300]	; (8013140 <udp_sendto_if_src+0x1b4>)
 8013012:	f003 f8b7 	bl	8016184 <iprintf>
 8013016:	f06f 030f 	mvn.w	r3, #15
 801301a:	e088      	b.n	801312e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	8a5b      	ldrh	r3, [r3, #18]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d10f      	bne.n	8013044 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013024:	68f9      	ldr	r1, [r7, #12]
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	8a5b      	ldrh	r3, [r3, #18]
 801302a:	461a      	mov	r2, r3
 801302c:	68f8      	ldr	r0, [r7, #12]
 801302e:	f000 f893 	bl	8013158 <udp_bind>
 8013032:	4603      	mov	r3, r0
 8013034:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013036:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d002      	beq.n	8013044 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801303e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013042:	e074      	b.n	801312e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013044:	68bb      	ldr	r3, [r7, #8]
 8013046:	891b      	ldrh	r3, [r3, #8]
 8013048:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801304c:	4293      	cmp	r3, r2
 801304e:	d902      	bls.n	8013056 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013054:	e06b      	b.n	801312e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013056:	2108      	movs	r1, #8
 8013058:	68b8      	ldr	r0, [r7, #8]
 801305a:	f7f9 fe65 	bl	800cd28 <pbuf_add_header>
 801305e:	4603      	mov	r3, r0
 8013060:	2b00      	cmp	r3, #0
 8013062:	d015      	beq.n	8013090 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013064:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013068:	2108      	movs	r1, #8
 801306a:	2022      	movs	r0, #34	; 0x22
 801306c:	f7f9 fc0e 	bl	800c88c <pbuf_alloc>
 8013070:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013072:	69fb      	ldr	r3, [r7, #28]
 8013074:	2b00      	cmp	r3, #0
 8013076:	d102      	bne.n	801307e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801307c:	e057      	b.n	801312e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	891b      	ldrh	r3, [r3, #8]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d006      	beq.n	8013094 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013086:	68b9      	ldr	r1, [r7, #8]
 8013088:	69f8      	ldr	r0, [r7, #28]
 801308a:	f7f9 fffb 	bl	800d084 <pbuf_chain>
 801308e:	e001      	b.n	8013094 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	895b      	ldrh	r3, [r3, #10]
 8013098:	2b07      	cmp	r3, #7
 801309a:	d806      	bhi.n	80130aa <udp_sendto_if_src+0x11e>
 801309c:	4b26      	ldr	r3, [pc, #152]	; (8013138 <udp_sendto_if_src+0x1ac>)
 801309e:	f240 320d 	movw	r2, #781	; 0x30d
 80130a2:	492c      	ldr	r1, [pc, #176]	; (8013154 <udp_sendto_if_src+0x1c8>)
 80130a4:	4826      	ldr	r0, [pc, #152]	; (8013140 <udp_sendto_if_src+0x1b4>)
 80130a6:	f003 f86d 	bl	8016184 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80130aa:	69fb      	ldr	r3, [r7, #28]
 80130ac:	685b      	ldr	r3, [r3, #4]
 80130ae:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	8a5b      	ldrh	r3, [r3, #18]
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7f8 fb6f 	bl	800b798 <lwip_htons>
 80130ba:	4603      	mov	r3, r0
 80130bc:	461a      	mov	r2, r3
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80130c2:	887b      	ldrh	r3, [r7, #2]
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7f8 fb67 	bl	800b798 <lwip_htons>
 80130ca:	4603      	mov	r3, r0
 80130cc:	461a      	mov	r2, r3
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	2200      	movs	r2, #0
 80130d6:	719a      	strb	r2, [r3, #6]
 80130d8:	2200      	movs	r2, #0
 80130da:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	891b      	ldrh	r3, [r3, #8]
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7f8 fb59 	bl	800b798 <lwip_htons>
 80130e6:	4603      	mov	r3, r0
 80130e8:	461a      	mov	r2, r3
 80130ea:	697b      	ldr	r3, [r7, #20]
 80130ec:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80130ee:	2311      	movs	r3, #17
 80130f0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	7adb      	ldrb	r3, [r3, #11]
 80130f6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	7a9b      	ldrb	r3, [r3, #10]
 80130fc:	7cb9      	ldrb	r1, [r7, #18]
 80130fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013100:	9202      	str	r2, [sp, #8]
 8013102:	7cfa      	ldrb	r2, [r7, #19]
 8013104:	9201      	str	r2, [sp, #4]
 8013106:	9300      	str	r3, [sp, #0]
 8013108:	460b      	mov	r3, r1
 801310a:	687a      	ldr	r2, [r7, #4]
 801310c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801310e:	69f8      	ldr	r0, [r7, #28]
 8013110:	f001 fc84 	bl	8014a1c <ip4_output_if_src>
 8013114:	4603      	mov	r3, r0
 8013116:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013118:	69fa      	ldr	r2, [r7, #28]
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	429a      	cmp	r2, r3
 801311e:	d004      	beq.n	801312a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013120:	69f8      	ldr	r0, [r7, #28]
 8013122:	f7f9 fe97 	bl	800ce54 <pbuf_free>
    q = NULL;
 8013126:	2300      	movs	r3, #0
 8013128:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801312a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801312e:	4618      	mov	r0, r3
 8013130:	3720      	adds	r7, #32
 8013132:	46bd      	mov	sp, r7
 8013134:	bd80      	pop	{r7, pc}
 8013136:	bf00      	nop
 8013138:	080191f4 	.word	0x080191f4
 801313c:	080193e0 	.word	0x080193e0
 8013140:	08019248 	.word	0x08019248
 8013144:	08019400 	.word	0x08019400
 8013148:	08019420 	.word	0x08019420
 801314c:	08019444 	.word	0x08019444
 8013150:	08019468 	.word	0x08019468
 8013154:	0801948c 	.word	0x0801948c

08013158 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b086      	sub	sp, #24
 801315c:	af00      	add	r7, sp, #0
 801315e:	60f8      	str	r0, [r7, #12]
 8013160:	60b9      	str	r1, [r7, #8]
 8013162:	4613      	mov	r3, r2
 8013164:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d101      	bne.n	8013170 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801316c:	4b39      	ldr	r3, [pc, #228]	; (8013254 <udp_bind+0xfc>)
 801316e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d109      	bne.n	801318a <udp_bind+0x32>
 8013176:	4b38      	ldr	r3, [pc, #224]	; (8013258 <udp_bind+0x100>)
 8013178:	f240 32b7 	movw	r2, #951	; 0x3b7
 801317c:	4937      	ldr	r1, [pc, #220]	; (801325c <udp_bind+0x104>)
 801317e:	4838      	ldr	r0, [pc, #224]	; (8013260 <udp_bind+0x108>)
 8013180:	f003 f800 	bl	8016184 <iprintf>
 8013184:	f06f 030f 	mvn.w	r3, #15
 8013188:	e060      	b.n	801324c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801318a:	2300      	movs	r3, #0
 801318c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801318e:	4b35      	ldr	r3, [pc, #212]	; (8013264 <udp_bind+0x10c>)
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	617b      	str	r3, [r7, #20]
 8013194:	e009      	b.n	80131aa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013196:	68fa      	ldr	r2, [r7, #12]
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	429a      	cmp	r2, r3
 801319c:	d102      	bne.n	80131a4 <udp_bind+0x4c>
      rebind = 1;
 801319e:	2301      	movs	r3, #1
 80131a0:	74fb      	strb	r3, [r7, #19]
      break;
 80131a2:	e005      	b.n	80131b0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	68db      	ldr	r3, [r3, #12]
 80131a8:	617b      	str	r3, [r7, #20]
 80131aa:	697b      	ldr	r3, [r7, #20]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d1f2      	bne.n	8013196 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80131b0:	88fb      	ldrh	r3, [r7, #6]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d109      	bne.n	80131ca <udp_bind+0x72>
    port = udp_new_port();
 80131b6:	f7ff fc35 	bl	8012a24 <udp_new_port>
 80131ba:	4603      	mov	r3, r0
 80131bc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80131be:	88fb      	ldrh	r3, [r7, #6]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d12c      	bne.n	801321e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80131c4:	f06f 0307 	mvn.w	r3, #7
 80131c8:	e040      	b.n	801324c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131ca:	4b26      	ldr	r3, [pc, #152]	; (8013264 <udp_bind+0x10c>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	617b      	str	r3, [r7, #20]
 80131d0:	e022      	b.n	8013218 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80131d2:	68fa      	ldr	r2, [r7, #12]
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d01b      	beq.n	8013212 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	8a5b      	ldrh	r3, [r3, #18]
 80131de:	88fa      	ldrh	r2, [r7, #6]
 80131e0:	429a      	cmp	r2, r3
 80131e2:	d116      	bne.n	8013212 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80131e4:	697b      	ldr	r3, [r7, #20]
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80131ec:	429a      	cmp	r2, r3
 80131ee:	d00d      	beq.n	801320c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d00a      	beq.n	801320c <udp_bind+0xb4>
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d006      	beq.n	801320c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80131fe:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013200:	2b00      	cmp	r3, #0
 8013202:	d003      	beq.n	801320c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d102      	bne.n	8013212 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801320c:	f06f 0307 	mvn.w	r3, #7
 8013210:	e01c      	b.n	801324c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013212:	697b      	ldr	r3, [r7, #20]
 8013214:	68db      	ldr	r3, [r3, #12]
 8013216:	617b      	str	r3, [r7, #20]
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d1d9      	bne.n	80131d2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d002      	beq.n	801322a <udp_bind+0xd2>
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	e000      	b.n	801322c <udp_bind+0xd4>
 801322a:	2300      	movs	r3, #0
 801322c:	68fa      	ldr	r2, [r7, #12]
 801322e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	88fa      	ldrh	r2, [r7, #6]
 8013234:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013236:	7cfb      	ldrb	r3, [r7, #19]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d106      	bne.n	801324a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801323c:	4b09      	ldr	r3, [pc, #36]	; (8013264 <udp_bind+0x10c>)
 801323e:	681a      	ldr	r2, [r3, #0]
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013244:	4a07      	ldr	r2, [pc, #28]	; (8013264 <udp_bind+0x10c>)
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801324a:	2300      	movs	r3, #0
}
 801324c:	4618      	mov	r0, r3
 801324e:	3718      	adds	r7, #24
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	08019d3c 	.word	0x08019d3c
 8013258:	080191f4 	.word	0x080191f4
 801325c:	080194bc 	.word	0x080194bc
 8013260:	08019248 	.word	0x08019248
 8013264:	20008f7c 	.word	0x20008f7c

08013268 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013268:	b580      	push	{r7, lr}
 801326a:	b086      	sub	sp, #24
 801326c:	af00      	add	r7, sp, #0
 801326e:	60f8      	str	r0, [r7, #12]
 8013270:	60b9      	str	r1, [r7, #8]
 8013272:	4613      	mov	r3, r2
 8013274:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d109      	bne.n	8013290 <udp_connect+0x28>
 801327c:	4b2c      	ldr	r3, [pc, #176]	; (8013330 <udp_connect+0xc8>)
 801327e:	f240 4235 	movw	r2, #1077	; 0x435
 8013282:	492c      	ldr	r1, [pc, #176]	; (8013334 <udp_connect+0xcc>)
 8013284:	482c      	ldr	r0, [pc, #176]	; (8013338 <udp_connect+0xd0>)
 8013286:	f002 ff7d 	bl	8016184 <iprintf>
 801328a:	f06f 030f 	mvn.w	r3, #15
 801328e:	e04b      	b.n	8013328 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d109      	bne.n	80132aa <udp_connect+0x42>
 8013296:	4b26      	ldr	r3, [pc, #152]	; (8013330 <udp_connect+0xc8>)
 8013298:	f240 4236 	movw	r2, #1078	; 0x436
 801329c:	4927      	ldr	r1, [pc, #156]	; (801333c <udp_connect+0xd4>)
 801329e:	4826      	ldr	r0, [pc, #152]	; (8013338 <udp_connect+0xd0>)
 80132a0:	f002 ff70 	bl	8016184 <iprintf>
 80132a4:	f06f 030f 	mvn.w	r3, #15
 80132a8:	e03e      	b.n	8013328 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	8a5b      	ldrh	r3, [r3, #18]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d10f      	bne.n	80132d2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80132b2:	68f9      	ldr	r1, [r7, #12]
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	8a5b      	ldrh	r3, [r3, #18]
 80132b8:	461a      	mov	r2, r3
 80132ba:	68f8      	ldr	r0, [r7, #12]
 80132bc:	f7ff ff4c 	bl	8013158 <udp_bind>
 80132c0:	4603      	mov	r3, r0
 80132c2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80132c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d002      	beq.n	80132d2 <udp_connect+0x6a>
      return err;
 80132cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132d0:	e02a      	b.n	8013328 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80132d2:	68bb      	ldr	r3, [r7, #8]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d002      	beq.n	80132de <udp_connect+0x76>
 80132d8:	68bb      	ldr	r3, [r7, #8]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	e000      	b.n	80132e0 <udp_connect+0x78>
 80132de:	2300      	movs	r3, #0
 80132e0:	68fa      	ldr	r2, [r7, #12]
 80132e2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	88fa      	ldrh	r2, [r7, #6]
 80132e8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	7c1b      	ldrb	r3, [r3, #16]
 80132ee:	f043 0304 	orr.w	r3, r3, #4
 80132f2:	b2da      	uxtb	r2, r3
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80132f8:	4b11      	ldr	r3, [pc, #68]	; (8013340 <udp_connect+0xd8>)
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	617b      	str	r3, [r7, #20]
 80132fe:	e008      	b.n	8013312 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013300:	68fa      	ldr	r2, [r7, #12]
 8013302:	697b      	ldr	r3, [r7, #20]
 8013304:	429a      	cmp	r2, r3
 8013306:	d101      	bne.n	801330c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013308:	2300      	movs	r3, #0
 801330a:	e00d      	b.n	8013328 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	68db      	ldr	r3, [r3, #12]
 8013310:	617b      	str	r3, [r7, #20]
 8013312:	697b      	ldr	r3, [r7, #20]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d1f3      	bne.n	8013300 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013318:	4b09      	ldr	r3, [pc, #36]	; (8013340 <udp_connect+0xd8>)
 801331a:	681a      	ldr	r2, [r3, #0]
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013320:	4a07      	ldr	r2, [pc, #28]	; (8013340 <udp_connect+0xd8>)
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013326:	2300      	movs	r3, #0
}
 8013328:	4618      	mov	r0, r3
 801332a:	3718      	adds	r7, #24
 801332c:	46bd      	mov	sp, r7
 801332e:	bd80      	pop	{r7, pc}
 8013330:	080191f4 	.word	0x080191f4
 8013334:	080194d4 	.word	0x080194d4
 8013338:	08019248 	.word	0x08019248
 801333c:	080194f0 	.word	0x080194f0
 8013340:	20008f7c 	.word	0x20008f7c

08013344 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0
 801334a:	60f8      	str	r0, [r7, #12]
 801334c:	60b9      	str	r1, [r7, #8]
 801334e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	2b00      	cmp	r3, #0
 8013354:	d107      	bne.n	8013366 <udp_recv+0x22>
 8013356:	4b08      	ldr	r3, [pc, #32]	; (8013378 <udp_recv+0x34>)
 8013358:	f240 428a 	movw	r2, #1162	; 0x48a
 801335c:	4907      	ldr	r1, [pc, #28]	; (801337c <udp_recv+0x38>)
 801335e:	4808      	ldr	r0, [pc, #32]	; (8013380 <udp_recv+0x3c>)
 8013360:	f002 ff10 	bl	8016184 <iprintf>
 8013364:	e005      	b.n	8013372 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	68ba      	ldr	r2, [r7, #8]
 801336a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	687a      	ldr	r2, [r7, #4]
 8013370:	61da      	str	r2, [r3, #28]
}
 8013372:	3710      	adds	r7, #16
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}
 8013378:	080191f4 	.word	0x080191f4
 801337c:	08019528 	.word	0x08019528
 8013380:	08019248 	.word	0x08019248

08013384 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013384:	b580      	push	{r7, lr}
 8013386:	b084      	sub	sp, #16
 8013388:	af00      	add	r7, sp, #0
 801338a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d107      	bne.n	80133a2 <udp_remove+0x1e>
 8013392:	4b19      	ldr	r3, [pc, #100]	; (80133f8 <udp_remove+0x74>)
 8013394:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013398:	4918      	ldr	r1, [pc, #96]	; (80133fc <udp_remove+0x78>)
 801339a:	4819      	ldr	r0, [pc, #100]	; (8013400 <udp_remove+0x7c>)
 801339c:	f002 fef2 	bl	8016184 <iprintf>
 80133a0:	e026      	b.n	80133f0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80133a2:	4b18      	ldr	r3, [pc, #96]	; (8013404 <udp_remove+0x80>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	687a      	ldr	r2, [r7, #4]
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d105      	bne.n	80133b8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80133ac:	4b15      	ldr	r3, [pc, #84]	; (8013404 <udp_remove+0x80>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	4a14      	ldr	r2, [pc, #80]	; (8013404 <udp_remove+0x80>)
 80133b4:	6013      	str	r3, [r2, #0]
 80133b6:	e017      	b.n	80133e8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80133b8:	4b12      	ldr	r3, [pc, #72]	; (8013404 <udp_remove+0x80>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	60fb      	str	r3, [r7, #12]
 80133be:	e010      	b.n	80133e2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	68db      	ldr	r3, [r3, #12]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d009      	beq.n	80133dc <udp_remove+0x58>
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	68db      	ldr	r3, [r3, #12]
 80133cc:	687a      	ldr	r2, [r7, #4]
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d104      	bne.n	80133dc <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	68da      	ldr	r2, [r3, #12]
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	60da      	str	r2, [r3, #12]
        break;
 80133da:	e005      	b.n	80133e8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	60fb      	str	r3, [r7, #12]
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d1eb      	bne.n	80133c0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80133e8:	6879      	ldr	r1, [r7, #4]
 80133ea:	2000      	movs	r0, #0
 80133ec:	f7f8 febc 	bl	800c168 <memp_free>
}
 80133f0:	3710      	adds	r7, #16
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
 80133f6:	bf00      	nop
 80133f8:	080191f4 	.word	0x080191f4
 80133fc:	08019540 	.word	0x08019540
 8013400:	08019248 	.word	0x08019248
 8013404:	20008f7c 	.word	0x20008f7c

08013408 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b082      	sub	sp, #8
 801340c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801340e:	2000      	movs	r0, #0
 8013410:	f7f8 fe3a 	bl	800c088 <memp_malloc>
 8013414:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d007      	beq.n	801342c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801341c:	2220      	movs	r2, #32
 801341e:	2100      	movs	r1, #0
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f002 fea7 	bl	8016174 <memset>
    pcb->ttl = UDP_TTL;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	22ff      	movs	r2, #255	; 0xff
 801342a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801342c:	687b      	ldr	r3, [r7, #4]
}
 801342e:	4618      	mov	r0, r3
 8013430:	3708      	adds	r7, #8
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
	...

08013438 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013438:	b480      	push	{r7}
 801343a:	b085      	sub	sp, #20
 801343c:	af00      	add	r7, sp, #0
 801343e:	6078      	str	r0, [r7, #4]
 8013440:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d01e      	beq.n	8013486 <udp_netif_ip_addr_changed+0x4e>
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d01a      	beq.n	8013486 <udp_netif_ip_addr_changed+0x4e>
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d017      	beq.n	8013486 <udp_netif_ip_addr_changed+0x4e>
 8013456:	683b      	ldr	r3, [r7, #0]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d013      	beq.n	8013486 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801345e:	4b0d      	ldr	r3, [pc, #52]	; (8013494 <udp_netif_ip_addr_changed+0x5c>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	60fb      	str	r3, [r7, #12]
 8013464:	e00c      	b.n	8013480 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	681a      	ldr	r2, [r3, #0]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	429a      	cmp	r2, r3
 8013470:	d103      	bne.n	801347a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	681a      	ldr	r2, [r3, #0]
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	68db      	ldr	r3, [r3, #12]
 801347e:	60fb      	str	r3, [r7, #12]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d1ef      	bne.n	8013466 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013486:	bf00      	nop
 8013488:	3714      	adds	r7, #20
 801348a:	46bd      	mov	sp, r7
 801348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013490:	4770      	bx	lr
 8013492:	bf00      	nop
 8013494:	20008f7c 	.word	0x20008f7c

08013498 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80134a0:	4915      	ldr	r1, [pc, #84]	; (80134f8 <etharp_free_entry+0x60>)
 80134a2:	687a      	ldr	r2, [r7, #4]
 80134a4:	4613      	mov	r3, r2
 80134a6:	005b      	lsls	r3, r3, #1
 80134a8:	4413      	add	r3, r2
 80134aa:	00db      	lsls	r3, r3, #3
 80134ac:	440b      	add	r3, r1
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d013      	beq.n	80134dc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80134b4:	4910      	ldr	r1, [pc, #64]	; (80134f8 <etharp_free_entry+0x60>)
 80134b6:	687a      	ldr	r2, [r7, #4]
 80134b8:	4613      	mov	r3, r2
 80134ba:	005b      	lsls	r3, r3, #1
 80134bc:	4413      	add	r3, r2
 80134be:	00db      	lsls	r3, r3, #3
 80134c0:	440b      	add	r3, r1
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7f9 fcc5 	bl	800ce54 <pbuf_free>
    arp_table[i].q = NULL;
 80134ca:	490b      	ldr	r1, [pc, #44]	; (80134f8 <etharp_free_entry+0x60>)
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	4613      	mov	r3, r2
 80134d0:	005b      	lsls	r3, r3, #1
 80134d2:	4413      	add	r3, r2
 80134d4:	00db      	lsls	r3, r3, #3
 80134d6:	440b      	add	r3, r1
 80134d8:	2200      	movs	r2, #0
 80134da:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80134dc:	4906      	ldr	r1, [pc, #24]	; (80134f8 <etharp_free_entry+0x60>)
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	4613      	mov	r3, r2
 80134e2:	005b      	lsls	r3, r3, #1
 80134e4:	4413      	add	r3, r2
 80134e6:	00db      	lsls	r3, r3, #3
 80134e8:	440b      	add	r3, r1
 80134ea:	3314      	adds	r3, #20
 80134ec:	2200      	movs	r2, #0
 80134ee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80134f0:	bf00      	nop
 80134f2:	3708      	adds	r7, #8
 80134f4:	46bd      	mov	sp, r7
 80134f6:	bd80      	pop	{r7, pc}
 80134f8:	20008f80 	.word	0x20008f80

080134fc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b082      	sub	sp, #8
 8013500:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013502:	2300      	movs	r3, #0
 8013504:	607b      	str	r3, [r7, #4]
 8013506:	e096      	b.n	8013636 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013508:	494f      	ldr	r1, [pc, #316]	; (8013648 <etharp_tmr+0x14c>)
 801350a:	687a      	ldr	r2, [r7, #4]
 801350c:	4613      	mov	r3, r2
 801350e:	005b      	lsls	r3, r3, #1
 8013510:	4413      	add	r3, r2
 8013512:	00db      	lsls	r3, r3, #3
 8013514:	440b      	add	r3, r1
 8013516:	3314      	adds	r3, #20
 8013518:	781b      	ldrb	r3, [r3, #0]
 801351a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801351c:	78fb      	ldrb	r3, [r7, #3]
 801351e:	2b00      	cmp	r3, #0
 8013520:	f000 8086 	beq.w	8013630 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013524:	4948      	ldr	r1, [pc, #288]	; (8013648 <etharp_tmr+0x14c>)
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	4613      	mov	r3, r2
 801352a:	005b      	lsls	r3, r3, #1
 801352c:	4413      	add	r3, r2
 801352e:	00db      	lsls	r3, r3, #3
 8013530:	440b      	add	r3, r1
 8013532:	3312      	adds	r3, #18
 8013534:	881b      	ldrh	r3, [r3, #0]
 8013536:	3301      	adds	r3, #1
 8013538:	b298      	uxth	r0, r3
 801353a:	4943      	ldr	r1, [pc, #268]	; (8013648 <etharp_tmr+0x14c>)
 801353c:	687a      	ldr	r2, [r7, #4]
 801353e:	4613      	mov	r3, r2
 8013540:	005b      	lsls	r3, r3, #1
 8013542:	4413      	add	r3, r2
 8013544:	00db      	lsls	r3, r3, #3
 8013546:	440b      	add	r3, r1
 8013548:	3312      	adds	r3, #18
 801354a:	4602      	mov	r2, r0
 801354c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801354e:	493e      	ldr	r1, [pc, #248]	; (8013648 <etharp_tmr+0x14c>)
 8013550:	687a      	ldr	r2, [r7, #4]
 8013552:	4613      	mov	r3, r2
 8013554:	005b      	lsls	r3, r3, #1
 8013556:	4413      	add	r3, r2
 8013558:	00db      	lsls	r3, r3, #3
 801355a:	440b      	add	r3, r1
 801355c:	3312      	adds	r3, #18
 801355e:	881b      	ldrh	r3, [r3, #0]
 8013560:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013564:	d215      	bcs.n	8013592 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013566:	4938      	ldr	r1, [pc, #224]	; (8013648 <etharp_tmr+0x14c>)
 8013568:	687a      	ldr	r2, [r7, #4]
 801356a:	4613      	mov	r3, r2
 801356c:	005b      	lsls	r3, r3, #1
 801356e:	4413      	add	r3, r2
 8013570:	00db      	lsls	r3, r3, #3
 8013572:	440b      	add	r3, r1
 8013574:	3314      	adds	r3, #20
 8013576:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013578:	2b01      	cmp	r3, #1
 801357a:	d10e      	bne.n	801359a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801357c:	4932      	ldr	r1, [pc, #200]	; (8013648 <etharp_tmr+0x14c>)
 801357e:	687a      	ldr	r2, [r7, #4]
 8013580:	4613      	mov	r3, r2
 8013582:	005b      	lsls	r3, r3, #1
 8013584:	4413      	add	r3, r2
 8013586:	00db      	lsls	r3, r3, #3
 8013588:	440b      	add	r3, r1
 801358a:	3312      	adds	r3, #18
 801358c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801358e:	2b04      	cmp	r3, #4
 8013590:	d903      	bls.n	801359a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f7ff ff80 	bl	8013498 <etharp_free_entry>
 8013598:	e04a      	b.n	8013630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801359a:	492b      	ldr	r1, [pc, #172]	; (8013648 <etharp_tmr+0x14c>)
 801359c:	687a      	ldr	r2, [r7, #4]
 801359e:	4613      	mov	r3, r2
 80135a0:	005b      	lsls	r3, r3, #1
 80135a2:	4413      	add	r3, r2
 80135a4:	00db      	lsls	r3, r3, #3
 80135a6:	440b      	add	r3, r1
 80135a8:	3314      	adds	r3, #20
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	2b03      	cmp	r3, #3
 80135ae:	d10a      	bne.n	80135c6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80135b0:	4925      	ldr	r1, [pc, #148]	; (8013648 <etharp_tmr+0x14c>)
 80135b2:	687a      	ldr	r2, [r7, #4]
 80135b4:	4613      	mov	r3, r2
 80135b6:	005b      	lsls	r3, r3, #1
 80135b8:	4413      	add	r3, r2
 80135ba:	00db      	lsls	r3, r3, #3
 80135bc:	440b      	add	r3, r1
 80135be:	3314      	adds	r3, #20
 80135c0:	2204      	movs	r2, #4
 80135c2:	701a      	strb	r2, [r3, #0]
 80135c4:	e034      	b.n	8013630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80135c6:	4920      	ldr	r1, [pc, #128]	; (8013648 <etharp_tmr+0x14c>)
 80135c8:	687a      	ldr	r2, [r7, #4]
 80135ca:	4613      	mov	r3, r2
 80135cc:	005b      	lsls	r3, r3, #1
 80135ce:	4413      	add	r3, r2
 80135d0:	00db      	lsls	r3, r3, #3
 80135d2:	440b      	add	r3, r1
 80135d4:	3314      	adds	r3, #20
 80135d6:	781b      	ldrb	r3, [r3, #0]
 80135d8:	2b04      	cmp	r3, #4
 80135da:	d10a      	bne.n	80135f2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80135dc:	491a      	ldr	r1, [pc, #104]	; (8013648 <etharp_tmr+0x14c>)
 80135de:	687a      	ldr	r2, [r7, #4]
 80135e0:	4613      	mov	r3, r2
 80135e2:	005b      	lsls	r3, r3, #1
 80135e4:	4413      	add	r3, r2
 80135e6:	00db      	lsls	r3, r3, #3
 80135e8:	440b      	add	r3, r1
 80135ea:	3314      	adds	r3, #20
 80135ec:	2202      	movs	r2, #2
 80135ee:	701a      	strb	r2, [r3, #0]
 80135f0:	e01e      	b.n	8013630 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80135f2:	4915      	ldr	r1, [pc, #84]	; (8013648 <etharp_tmr+0x14c>)
 80135f4:	687a      	ldr	r2, [r7, #4]
 80135f6:	4613      	mov	r3, r2
 80135f8:	005b      	lsls	r3, r3, #1
 80135fa:	4413      	add	r3, r2
 80135fc:	00db      	lsls	r3, r3, #3
 80135fe:	440b      	add	r3, r1
 8013600:	3314      	adds	r3, #20
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	2b01      	cmp	r3, #1
 8013606:	d113      	bne.n	8013630 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013608:	490f      	ldr	r1, [pc, #60]	; (8013648 <etharp_tmr+0x14c>)
 801360a:	687a      	ldr	r2, [r7, #4]
 801360c:	4613      	mov	r3, r2
 801360e:	005b      	lsls	r3, r3, #1
 8013610:	4413      	add	r3, r2
 8013612:	00db      	lsls	r3, r3, #3
 8013614:	440b      	add	r3, r1
 8013616:	3308      	adds	r3, #8
 8013618:	6818      	ldr	r0, [r3, #0]
 801361a:	687a      	ldr	r2, [r7, #4]
 801361c:	4613      	mov	r3, r2
 801361e:	005b      	lsls	r3, r3, #1
 8013620:	4413      	add	r3, r2
 8013622:	00db      	lsls	r3, r3, #3
 8013624:	4a08      	ldr	r2, [pc, #32]	; (8013648 <etharp_tmr+0x14c>)
 8013626:	4413      	add	r3, r2
 8013628:	3304      	adds	r3, #4
 801362a:	4619      	mov	r1, r3
 801362c:	f000 fe6e 	bl	801430c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	3301      	adds	r3, #1
 8013634:	607b      	str	r3, [r7, #4]
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	2b09      	cmp	r3, #9
 801363a:	f77f af65 	ble.w	8013508 <etharp_tmr+0xc>
      }
    }
  }
}
 801363e:	bf00      	nop
 8013640:	bf00      	nop
 8013642:	3708      	adds	r7, #8
 8013644:	46bd      	mov	sp, r7
 8013646:	bd80      	pop	{r7, pc}
 8013648:	20008f80 	.word	0x20008f80

0801364c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	b08a      	sub	sp, #40	; 0x28
 8013650:	af00      	add	r7, sp, #0
 8013652:	60f8      	str	r0, [r7, #12]
 8013654:	460b      	mov	r3, r1
 8013656:	607a      	str	r2, [r7, #4]
 8013658:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801365a:	230a      	movs	r3, #10
 801365c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801365e:	230a      	movs	r3, #10
 8013660:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013662:	230a      	movs	r3, #10
 8013664:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013666:	2300      	movs	r3, #0
 8013668:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801366a:	230a      	movs	r3, #10
 801366c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801366e:	2300      	movs	r3, #0
 8013670:	83bb      	strh	r3, [r7, #28]
 8013672:	2300      	movs	r3, #0
 8013674:	837b      	strh	r3, [r7, #26]
 8013676:	2300      	movs	r3, #0
 8013678:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801367a:	2300      	movs	r3, #0
 801367c:	843b      	strh	r3, [r7, #32]
 801367e:	e0ae      	b.n	80137de <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013680:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013684:	49a6      	ldr	r1, [pc, #664]	; (8013920 <etharp_find_entry+0x2d4>)
 8013686:	4613      	mov	r3, r2
 8013688:	005b      	lsls	r3, r3, #1
 801368a:	4413      	add	r3, r2
 801368c:	00db      	lsls	r3, r3, #3
 801368e:	440b      	add	r3, r1
 8013690:	3314      	adds	r3, #20
 8013692:	781b      	ldrb	r3, [r3, #0]
 8013694:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013696:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801369a:	2b0a      	cmp	r3, #10
 801369c:	d105      	bne.n	80136aa <etharp_find_entry+0x5e>
 801369e:	7dfb      	ldrb	r3, [r7, #23]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d102      	bne.n	80136aa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80136a4:	8c3b      	ldrh	r3, [r7, #32]
 80136a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80136a8:	e095      	b.n	80137d6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80136aa:	7dfb      	ldrb	r3, [r7, #23]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	f000 8092 	beq.w	80137d6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80136b2:	7dfb      	ldrb	r3, [r7, #23]
 80136b4:	2b01      	cmp	r3, #1
 80136b6:	d009      	beq.n	80136cc <etharp_find_entry+0x80>
 80136b8:	7dfb      	ldrb	r3, [r7, #23]
 80136ba:	2b01      	cmp	r3, #1
 80136bc:	d806      	bhi.n	80136cc <etharp_find_entry+0x80>
 80136be:	4b99      	ldr	r3, [pc, #612]	; (8013924 <etharp_find_entry+0x2d8>)
 80136c0:	f240 1223 	movw	r2, #291	; 0x123
 80136c4:	4998      	ldr	r1, [pc, #608]	; (8013928 <etharp_find_entry+0x2dc>)
 80136c6:	4899      	ldr	r0, [pc, #612]	; (801392c <etharp_find_entry+0x2e0>)
 80136c8:	f002 fd5c 	bl	8016184 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d020      	beq.n	8013714 <etharp_find_entry+0xc8>
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	6819      	ldr	r1, [r3, #0]
 80136d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136da:	4891      	ldr	r0, [pc, #580]	; (8013920 <etharp_find_entry+0x2d4>)
 80136dc:	4613      	mov	r3, r2
 80136de:	005b      	lsls	r3, r3, #1
 80136e0:	4413      	add	r3, r2
 80136e2:	00db      	lsls	r3, r3, #3
 80136e4:	4403      	add	r3, r0
 80136e6:	3304      	adds	r3, #4
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	4299      	cmp	r1, r3
 80136ec:	d112      	bne.n	8013714 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00c      	beq.n	801370e <etharp_find_entry+0xc2>
 80136f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136f8:	4989      	ldr	r1, [pc, #548]	; (8013920 <etharp_find_entry+0x2d4>)
 80136fa:	4613      	mov	r3, r2
 80136fc:	005b      	lsls	r3, r3, #1
 80136fe:	4413      	add	r3, r2
 8013700:	00db      	lsls	r3, r3, #3
 8013702:	440b      	add	r3, r1
 8013704:	3308      	adds	r3, #8
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	687a      	ldr	r2, [r7, #4]
 801370a:	429a      	cmp	r2, r3
 801370c:	d102      	bne.n	8013714 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801370e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013712:	e100      	b.n	8013916 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013714:	7dfb      	ldrb	r3, [r7, #23]
 8013716:	2b01      	cmp	r3, #1
 8013718:	d140      	bne.n	801379c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801371a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801371e:	4980      	ldr	r1, [pc, #512]	; (8013920 <etharp_find_entry+0x2d4>)
 8013720:	4613      	mov	r3, r2
 8013722:	005b      	lsls	r3, r3, #1
 8013724:	4413      	add	r3, r2
 8013726:	00db      	lsls	r3, r3, #3
 8013728:	440b      	add	r3, r1
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d01a      	beq.n	8013766 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013730:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013734:	497a      	ldr	r1, [pc, #488]	; (8013920 <etharp_find_entry+0x2d4>)
 8013736:	4613      	mov	r3, r2
 8013738:	005b      	lsls	r3, r3, #1
 801373a:	4413      	add	r3, r2
 801373c:	00db      	lsls	r3, r3, #3
 801373e:	440b      	add	r3, r1
 8013740:	3312      	adds	r3, #18
 8013742:	881b      	ldrh	r3, [r3, #0]
 8013744:	8bba      	ldrh	r2, [r7, #28]
 8013746:	429a      	cmp	r2, r3
 8013748:	d845      	bhi.n	80137d6 <etharp_find_entry+0x18a>
            old_queue = i;
 801374a:	8c3b      	ldrh	r3, [r7, #32]
 801374c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801374e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013752:	4973      	ldr	r1, [pc, #460]	; (8013920 <etharp_find_entry+0x2d4>)
 8013754:	4613      	mov	r3, r2
 8013756:	005b      	lsls	r3, r3, #1
 8013758:	4413      	add	r3, r2
 801375a:	00db      	lsls	r3, r3, #3
 801375c:	440b      	add	r3, r1
 801375e:	3312      	adds	r3, #18
 8013760:	881b      	ldrh	r3, [r3, #0]
 8013762:	83bb      	strh	r3, [r7, #28]
 8013764:	e037      	b.n	80137d6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801376a:	496d      	ldr	r1, [pc, #436]	; (8013920 <etharp_find_entry+0x2d4>)
 801376c:	4613      	mov	r3, r2
 801376e:	005b      	lsls	r3, r3, #1
 8013770:	4413      	add	r3, r2
 8013772:	00db      	lsls	r3, r3, #3
 8013774:	440b      	add	r3, r1
 8013776:	3312      	adds	r3, #18
 8013778:	881b      	ldrh	r3, [r3, #0]
 801377a:	8b7a      	ldrh	r2, [r7, #26]
 801377c:	429a      	cmp	r2, r3
 801377e:	d82a      	bhi.n	80137d6 <etharp_find_entry+0x18a>
            old_pending = i;
 8013780:	8c3b      	ldrh	r3, [r7, #32]
 8013782:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013784:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013788:	4965      	ldr	r1, [pc, #404]	; (8013920 <etharp_find_entry+0x2d4>)
 801378a:	4613      	mov	r3, r2
 801378c:	005b      	lsls	r3, r3, #1
 801378e:	4413      	add	r3, r2
 8013790:	00db      	lsls	r3, r3, #3
 8013792:	440b      	add	r3, r1
 8013794:	3312      	adds	r3, #18
 8013796:	881b      	ldrh	r3, [r3, #0]
 8013798:	837b      	strh	r3, [r7, #26]
 801379a:	e01c      	b.n	80137d6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801379c:	7dfb      	ldrb	r3, [r7, #23]
 801379e:	2b01      	cmp	r3, #1
 80137a0:	d919      	bls.n	80137d6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80137a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137a6:	495e      	ldr	r1, [pc, #376]	; (8013920 <etharp_find_entry+0x2d4>)
 80137a8:	4613      	mov	r3, r2
 80137aa:	005b      	lsls	r3, r3, #1
 80137ac:	4413      	add	r3, r2
 80137ae:	00db      	lsls	r3, r3, #3
 80137b0:	440b      	add	r3, r1
 80137b2:	3312      	adds	r3, #18
 80137b4:	881b      	ldrh	r3, [r3, #0]
 80137b6:	8b3a      	ldrh	r2, [r7, #24]
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d80c      	bhi.n	80137d6 <etharp_find_entry+0x18a>
            old_stable = i;
 80137bc:	8c3b      	ldrh	r3, [r7, #32]
 80137be:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80137c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137c4:	4956      	ldr	r1, [pc, #344]	; (8013920 <etharp_find_entry+0x2d4>)
 80137c6:	4613      	mov	r3, r2
 80137c8:	005b      	lsls	r3, r3, #1
 80137ca:	4413      	add	r3, r2
 80137cc:	00db      	lsls	r3, r3, #3
 80137ce:	440b      	add	r3, r1
 80137d0:	3312      	adds	r3, #18
 80137d2:	881b      	ldrh	r3, [r3, #0]
 80137d4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80137d6:	8c3b      	ldrh	r3, [r7, #32]
 80137d8:	3301      	adds	r3, #1
 80137da:	b29b      	uxth	r3, r3
 80137dc:	843b      	strh	r3, [r7, #32]
 80137de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80137e2:	2b09      	cmp	r3, #9
 80137e4:	f77f af4c 	ble.w	8013680 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80137e8:	7afb      	ldrb	r3, [r7, #11]
 80137ea:	f003 0302 	and.w	r3, r3, #2
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d108      	bne.n	8013804 <etharp_find_entry+0x1b8>
 80137f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80137f6:	2b0a      	cmp	r3, #10
 80137f8:	d107      	bne.n	801380a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80137fa:	7afb      	ldrb	r3, [r7, #11]
 80137fc:	f003 0301 	and.w	r3, r3, #1
 8013800:	2b00      	cmp	r3, #0
 8013802:	d102      	bne.n	801380a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013808:	e085      	b.n	8013916 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801380a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801380e:	2b09      	cmp	r3, #9
 8013810:	dc02      	bgt.n	8013818 <etharp_find_entry+0x1cc>
    i = empty;
 8013812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013814:	843b      	strh	r3, [r7, #32]
 8013816:	e039      	b.n	801388c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013818:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801381c:	2b09      	cmp	r3, #9
 801381e:	dc14      	bgt.n	801384a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013820:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013822:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013824:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013828:	493d      	ldr	r1, [pc, #244]	; (8013920 <etharp_find_entry+0x2d4>)
 801382a:	4613      	mov	r3, r2
 801382c:	005b      	lsls	r3, r3, #1
 801382e:	4413      	add	r3, r2
 8013830:	00db      	lsls	r3, r3, #3
 8013832:	440b      	add	r3, r1
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d018      	beq.n	801386c <etharp_find_entry+0x220>
 801383a:	4b3a      	ldr	r3, [pc, #232]	; (8013924 <etharp_find_entry+0x2d8>)
 801383c:	f240 126d 	movw	r2, #365	; 0x16d
 8013840:	493b      	ldr	r1, [pc, #236]	; (8013930 <etharp_find_entry+0x2e4>)
 8013842:	483a      	ldr	r0, [pc, #232]	; (801392c <etharp_find_entry+0x2e0>)
 8013844:	f002 fc9e 	bl	8016184 <iprintf>
 8013848:	e010      	b.n	801386c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801384a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801384e:	2b09      	cmp	r3, #9
 8013850:	dc02      	bgt.n	8013858 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013854:	843b      	strh	r3, [r7, #32]
 8013856:	e009      	b.n	801386c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013858:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801385c:	2b09      	cmp	r3, #9
 801385e:	dc02      	bgt.n	8013866 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013860:	8bfb      	ldrh	r3, [r7, #30]
 8013862:	843b      	strh	r3, [r7, #32]
 8013864:	e002      	b.n	801386c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801386a:	e054      	b.n	8013916 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801386c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013870:	2b09      	cmp	r3, #9
 8013872:	dd06      	ble.n	8013882 <etharp_find_entry+0x236>
 8013874:	4b2b      	ldr	r3, [pc, #172]	; (8013924 <etharp_find_entry+0x2d8>)
 8013876:	f240 127f 	movw	r2, #383	; 0x17f
 801387a:	492e      	ldr	r1, [pc, #184]	; (8013934 <etharp_find_entry+0x2e8>)
 801387c:	482b      	ldr	r0, [pc, #172]	; (801392c <etharp_find_entry+0x2e0>)
 801387e:	f002 fc81 	bl	8016184 <iprintf>
    etharp_free_entry(i);
 8013882:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013886:	4618      	mov	r0, r3
 8013888:	f7ff fe06 	bl	8013498 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801388c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013890:	2b09      	cmp	r3, #9
 8013892:	dd06      	ble.n	80138a2 <etharp_find_entry+0x256>
 8013894:	4b23      	ldr	r3, [pc, #140]	; (8013924 <etharp_find_entry+0x2d8>)
 8013896:	f240 1283 	movw	r2, #387	; 0x183
 801389a:	4926      	ldr	r1, [pc, #152]	; (8013934 <etharp_find_entry+0x2e8>)
 801389c:	4823      	ldr	r0, [pc, #140]	; (801392c <etharp_find_entry+0x2e0>)
 801389e:	f002 fc71 	bl	8016184 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80138a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138a6:	491e      	ldr	r1, [pc, #120]	; (8013920 <etharp_find_entry+0x2d4>)
 80138a8:	4613      	mov	r3, r2
 80138aa:	005b      	lsls	r3, r3, #1
 80138ac:	4413      	add	r3, r2
 80138ae:	00db      	lsls	r3, r3, #3
 80138b0:	440b      	add	r3, r1
 80138b2:	3314      	adds	r3, #20
 80138b4:	781b      	ldrb	r3, [r3, #0]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d006      	beq.n	80138c8 <etharp_find_entry+0x27c>
 80138ba:	4b1a      	ldr	r3, [pc, #104]	; (8013924 <etharp_find_entry+0x2d8>)
 80138bc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80138c0:	491d      	ldr	r1, [pc, #116]	; (8013938 <etharp_find_entry+0x2ec>)
 80138c2:	481a      	ldr	r0, [pc, #104]	; (801392c <etharp_find_entry+0x2e0>)
 80138c4:	f002 fc5e 	bl	8016184 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d00b      	beq.n	80138e6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80138ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	6819      	ldr	r1, [r3, #0]
 80138d6:	4812      	ldr	r0, [pc, #72]	; (8013920 <etharp_find_entry+0x2d4>)
 80138d8:	4613      	mov	r3, r2
 80138da:	005b      	lsls	r3, r3, #1
 80138dc:	4413      	add	r3, r2
 80138de:	00db      	lsls	r3, r3, #3
 80138e0:	4403      	add	r3, r0
 80138e2:	3304      	adds	r3, #4
 80138e4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80138e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138ea:	490d      	ldr	r1, [pc, #52]	; (8013920 <etharp_find_entry+0x2d4>)
 80138ec:	4613      	mov	r3, r2
 80138ee:	005b      	lsls	r3, r3, #1
 80138f0:	4413      	add	r3, r2
 80138f2:	00db      	lsls	r3, r3, #3
 80138f4:	440b      	add	r3, r1
 80138f6:	3312      	adds	r3, #18
 80138f8:	2200      	movs	r2, #0
 80138fa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80138fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013900:	4907      	ldr	r1, [pc, #28]	; (8013920 <etharp_find_entry+0x2d4>)
 8013902:	4613      	mov	r3, r2
 8013904:	005b      	lsls	r3, r3, #1
 8013906:	4413      	add	r3, r2
 8013908:	00db      	lsls	r3, r3, #3
 801390a:	440b      	add	r3, r1
 801390c:	3308      	adds	r3, #8
 801390e:	687a      	ldr	r2, [r7, #4]
 8013910:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013912:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013916:	4618      	mov	r0, r3
 8013918:	3728      	adds	r7, #40	; 0x28
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}
 801391e:	bf00      	nop
 8013920:	20008f80 	.word	0x20008f80
 8013924:	08019558 	.word	0x08019558
 8013928:	08019590 	.word	0x08019590
 801392c:	080195d0 	.word	0x080195d0
 8013930:	080195f8 	.word	0x080195f8
 8013934:	08019610 	.word	0x08019610
 8013938:	08019624 	.word	0x08019624

0801393c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b088      	sub	sp, #32
 8013940:	af02      	add	r7, sp, #8
 8013942:	60f8      	str	r0, [r7, #12]
 8013944:	60b9      	str	r1, [r7, #8]
 8013946:	607a      	str	r2, [r7, #4]
 8013948:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013950:	2b06      	cmp	r3, #6
 8013952:	d006      	beq.n	8013962 <etharp_update_arp_entry+0x26>
 8013954:	4b48      	ldr	r3, [pc, #288]	; (8013a78 <etharp_update_arp_entry+0x13c>)
 8013956:	f240 12a9 	movw	r2, #425	; 0x1a9
 801395a:	4948      	ldr	r1, [pc, #288]	; (8013a7c <etharp_update_arp_entry+0x140>)
 801395c:	4848      	ldr	r0, [pc, #288]	; (8013a80 <etharp_update_arp_entry+0x144>)
 801395e:	f002 fc11 	bl	8016184 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d012      	beq.n	801398e <etharp_update_arp_entry+0x52>
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d00e      	beq.n	801398e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	68f9      	ldr	r1, [r7, #12]
 8013976:	4618      	mov	r0, r3
 8013978:	f001 f8fe 	bl	8014b78 <ip4_addr_isbroadcast_u32>
 801397c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801397e:	2b00      	cmp	r3, #0
 8013980:	d105      	bne.n	801398e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801398a:	2be0      	cmp	r3, #224	; 0xe0
 801398c:	d102      	bne.n	8013994 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801398e:	f06f 030f 	mvn.w	r3, #15
 8013992:	e06c      	b.n	8013a6e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013994:	78fb      	ldrb	r3, [r7, #3]
 8013996:	68fa      	ldr	r2, [r7, #12]
 8013998:	4619      	mov	r1, r3
 801399a:	68b8      	ldr	r0, [r7, #8]
 801399c:	f7ff fe56 	bl	801364c <etharp_find_entry>
 80139a0:	4603      	mov	r3, r0
 80139a2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80139a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	da02      	bge.n	80139b2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80139ac:	8afb      	ldrh	r3, [r7, #22]
 80139ae:	b25b      	sxtb	r3, r3
 80139b0:	e05d      	b.n	8013a6e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80139b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139b6:	4933      	ldr	r1, [pc, #204]	; (8013a84 <etharp_update_arp_entry+0x148>)
 80139b8:	4613      	mov	r3, r2
 80139ba:	005b      	lsls	r3, r3, #1
 80139bc:	4413      	add	r3, r2
 80139be:	00db      	lsls	r3, r3, #3
 80139c0:	440b      	add	r3, r1
 80139c2:	3314      	adds	r3, #20
 80139c4:	2202      	movs	r2, #2
 80139c6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80139c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139cc:	492d      	ldr	r1, [pc, #180]	; (8013a84 <etharp_update_arp_entry+0x148>)
 80139ce:	4613      	mov	r3, r2
 80139d0:	005b      	lsls	r3, r3, #1
 80139d2:	4413      	add	r3, r2
 80139d4:	00db      	lsls	r3, r3, #3
 80139d6:	440b      	add	r3, r1
 80139d8:	3308      	adds	r3, #8
 80139da:	68fa      	ldr	r2, [r7, #12]
 80139dc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80139de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139e2:	4613      	mov	r3, r2
 80139e4:	005b      	lsls	r3, r3, #1
 80139e6:	4413      	add	r3, r2
 80139e8:	00db      	lsls	r3, r3, #3
 80139ea:	3308      	adds	r3, #8
 80139ec:	4a25      	ldr	r2, [pc, #148]	; (8013a84 <etharp_update_arp_entry+0x148>)
 80139ee:	4413      	add	r3, r2
 80139f0:	3304      	adds	r3, #4
 80139f2:	2206      	movs	r2, #6
 80139f4:	6879      	ldr	r1, [r7, #4]
 80139f6:	4618      	mov	r0, r3
 80139f8:	f002 fbae 	bl	8016158 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80139fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a00:	4920      	ldr	r1, [pc, #128]	; (8013a84 <etharp_update_arp_entry+0x148>)
 8013a02:	4613      	mov	r3, r2
 8013a04:	005b      	lsls	r3, r3, #1
 8013a06:	4413      	add	r3, r2
 8013a08:	00db      	lsls	r3, r3, #3
 8013a0a:	440b      	add	r3, r1
 8013a0c:	3312      	adds	r3, #18
 8013a0e:	2200      	movs	r2, #0
 8013a10:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013a12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a16:	491b      	ldr	r1, [pc, #108]	; (8013a84 <etharp_update_arp_entry+0x148>)
 8013a18:	4613      	mov	r3, r2
 8013a1a:	005b      	lsls	r3, r3, #1
 8013a1c:	4413      	add	r3, r2
 8013a1e:	00db      	lsls	r3, r3, #3
 8013a20:	440b      	add	r3, r1
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d021      	beq.n	8013a6c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013a28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a2c:	4915      	ldr	r1, [pc, #84]	; (8013a84 <etharp_update_arp_entry+0x148>)
 8013a2e:	4613      	mov	r3, r2
 8013a30:	005b      	lsls	r3, r3, #1
 8013a32:	4413      	add	r3, r2
 8013a34:	00db      	lsls	r3, r3, #3
 8013a36:	440b      	add	r3, r1
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013a3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a40:	4910      	ldr	r1, [pc, #64]	; (8013a84 <etharp_update_arp_entry+0x148>)
 8013a42:	4613      	mov	r3, r2
 8013a44:	005b      	lsls	r3, r3, #1
 8013a46:	4413      	add	r3, r2
 8013a48:	00db      	lsls	r3, r3, #3
 8013a4a:	440b      	add	r3, r1
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013a5a:	9300      	str	r3, [sp, #0]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	6939      	ldr	r1, [r7, #16]
 8013a60:	68f8      	ldr	r0, [r7, #12]
 8013a62:	f001 ff97 	bl	8015994 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013a66:	6938      	ldr	r0, [r7, #16]
 8013a68:	f7f9 f9f4 	bl	800ce54 <pbuf_free>
  }
  return ERR_OK;
 8013a6c:	2300      	movs	r3, #0
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3718      	adds	r7, #24
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	bf00      	nop
 8013a78:	08019558 	.word	0x08019558
 8013a7c:	08019650 	.word	0x08019650
 8013a80:	080195d0 	.word	0x080195d0
 8013a84:	20008f80 	.word	0x20008f80

08013a88 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b084      	sub	sp, #16
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a90:	2300      	movs	r3, #0
 8013a92:	60fb      	str	r3, [r7, #12]
 8013a94:	e01e      	b.n	8013ad4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013a96:	4913      	ldr	r1, [pc, #76]	; (8013ae4 <etharp_cleanup_netif+0x5c>)
 8013a98:	68fa      	ldr	r2, [r7, #12]
 8013a9a:	4613      	mov	r3, r2
 8013a9c:	005b      	lsls	r3, r3, #1
 8013a9e:	4413      	add	r3, r2
 8013aa0:	00db      	lsls	r3, r3, #3
 8013aa2:	440b      	add	r3, r1
 8013aa4:	3314      	adds	r3, #20
 8013aa6:	781b      	ldrb	r3, [r3, #0]
 8013aa8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013aaa:	7afb      	ldrb	r3, [r7, #11]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d00e      	beq.n	8013ace <etharp_cleanup_netif+0x46>
 8013ab0:	490c      	ldr	r1, [pc, #48]	; (8013ae4 <etharp_cleanup_netif+0x5c>)
 8013ab2:	68fa      	ldr	r2, [r7, #12]
 8013ab4:	4613      	mov	r3, r2
 8013ab6:	005b      	lsls	r3, r3, #1
 8013ab8:	4413      	add	r3, r2
 8013aba:	00db      	lsls	r3, r3, #3
 8013abc:	440b      	add	r3, r1
 8013abe:	3308      	adds	r3, #8
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	687a      	ldr	r2, [r7, #4]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	d102      	bne.n	8013ace <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013ac8:	68f8      	ldr	r0, [r7, #12]
 8013aca:	f7ff fce5 	bl	8013498 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	3301      	adds	r3, #1
 8013ad2:	60fb      	str	r3, [r7, #12]
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	2b09      	cmp	r3, #9
 8013ad8:	dddd      	ble.n	8013a96 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013ada:	bf00      	nop
 8013adc:	bf00      	nop
 8013ade:	3710      	adds	r7, #16
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}
 8013ae4:	20008f80 	.word	0x20008f80

08013ae8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013ae8:	b5b0      	push	{r4, r5, r7, lr}
 8013aea:	b08a      	sub	sp, #40	; 0x28
 8013aec:	af04      	add	r7, sp, #16
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d107      	bne.n	8013b08 <etharp_input+0x20>
 8013af8:	4b3d      	ldr	r3, [pc, #244]	; (8013bf0 <etharp_input+0x108>)
 8013afa:	f240 228a 	movw	r2, #650	; 0x28a
 8013afe:	493d      	ldr	r1, [pc, #244]	; (8013bf4 <etharp_input+0x10c>)
 8013b00:	483d      	ldr	r0, [pc, #244]	; (8013bf8 <etharp_input+0x110>)
 8013b02:	f002 fb3f 	bl	8016184 <iprintf>
 8013b06:	e06f      	b.n	8013be8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	685b      	ldr	r3, [r3, #4]
 8013b0c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013b0e:	693b      	ldr	r3, [r7, #16]
 8013b10:	881b      	ldrh	r3, [r3, #0]
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b18:	d10c      	bne.n	8013b34 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013b1a:	693b      	ldr	r3, [r7, #16]
 8013b1c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013b1e:	2b06      	cmp	r3, #6
 8013b20:	d108      	bne.n	8013b34 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013b22:	693b      	ldr	r3, [r7, #16]
 8013b24:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013b26:	2b04      	cmp	r3, #4
 8013b28:	d104      	bne.n	8013b34 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013b2a:	693b      	ldr	r3, [r7, #16]
 8013b2c:	885b      	ldrh	r3, [r3, #2]
 8013b2e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013b30:	2b08      	cmp	r3, #8
 8013b32:	d003      	beq.n	8013b3c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f7f9 f98d 	bl	800ce54 <pbuf_free>
    return;
 8013b3a:	e055      	b.n	8013be8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	330e      	adds	r3, #14
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	3318      	adds	r3, #24
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	3304      	adds	r3, #4
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d102      	bne.n	8013b5c <etharp_input+0x74>
    for_us = 0;
 8013b56:	2300      	movs	r3, #0
 8013b58:	75fb      	strb	r3, [r7, #23]
 8013b5a:	e009      	b.n	8013b70 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013b5c:	68ba      	ldr	r2, [r7, #8]
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	3304      	adds	r3, #4
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	429a      	cmp	r2, r3
 8013b66:	bf0c      	ite	eq
 8013b68:	2301      	moveq	r3, #1
 8013b6a:	2300      	movne	r3, #0
 8013b6c:	b2db      	uxtb	r3, r3
 8013b6e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	f103 0208 	add.w	r2, r3, #8
 8013b76:	7dfb      	ldrb	r3, [r7, #23]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d001      	beq.n	8013b80 <etharp_input+0x98>
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	e000      	b.n	8013b82 <etharp_input+0x9a>
 8013b80:	2302      	movs	r3, #2
 8013b82:	f107 010c 	add.w	r1, r7, #12
 8013b86:	6838      	ldr	r0, [r7, #0]
 8013b88:	f7ff fed8 	bl	801393c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	88db      	ldrh	r3, [r3, #6]
 8013b90:	b29b      	uxth	r3, r3
 8013b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b96:	d003      	beq.n	8013ba0 <etharp_input+0xb8>
 8013b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b9c:	d01e      	beq.n	8013bdc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013b9e:	e020      	b.n	8013be2 <etharp_input+0xfa>
      if (for_us) {
 8013ba0:	7dfb      	ldrb	r3, [r7, #23]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d01c      	beq.n	8013be0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013bac:	693b      	ldr	r3, [r7, #16]
 8013bae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013bb2:	683b      	ldr	r3, [r7, #0]
 8013bb4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013bb8:	683b      	ldr	r3, [r7, #0]
 8013bba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013bbc:	693a      	ldr	r2, [r7, #16]
 8013bbe:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013bc0:	2102      	movs	r1, #2
 8013bc2:	9103      	str	r1, [sp, #12]
 8013bc4:	f107 010c 	add.w	r1, r7, #12
 8013bc8:	9102      	str	r1, [sp, #8]
 8013bca:	9201      	str	r2, [sp, #4]
 8013bcc:	9300      	str	r3, [sp, #0]
 8013bce:	462b      	mov	r3, r5
 8013bd0:	4622      	mov	r2, r4
 8013bd2:	4601      	mov	r1, r0
 8013bd4:	6838      	ldr	r0, [r7, #0]
 8013bd6:	f000 faeb 	bl	80141b0 <etharp_raw>
      break;
 8013bda:	e001      	b.n	8013be0 <etharp_input+0xf8>
      break;
 8013bdc:	bf00      	nop
 8013bde:	e000      	b.n	8013be2 <etharp_input+0xfa>
      break;
 8013be0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	f7f9 f936 	bl	800ce54 <pbuf_free>
}
 8013be8:	3718      	adds	r7, #24
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bdb0      	pop	{r4, r5, r7, pc}
 8013bee:	bf00      	nop
 8013bf0:	08019558 	.word	0x08019558
 8013bf4:	080196a8 	.word	0x080196a8
 8013bf8:	080195d0 	.word	0x080195d0

08013bfc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b086      	sub	sp, #24
 8013c00:	af02      	add	r7, sp, #8
 8013c02:	60f8      	str	r0, [r7, #12]
 8013c04:	60b9      	str	r1, [r7, #8]
 8013c06:	4613      	mov	r3, r2
 8013c08:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013c0a:	79fa      	ldrb	r2, [r7, #7]
 8013c0c:	4944      	ldr	r1, [pc, #272]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013c0e:	4613      	mov	r3, r2
 8013c10:	005b      	lsls	r3, r3, #1
 8013c12:	4413      	add	r3, r2
 8013c14:	00db      	lsls	r3, r3, #3
 8013c16:	440b      	add	r3, r1
 8013c18:	3314      	adds	r3, #20
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	2b01      	cmp	r3, #1
 8013c1e:	d806      	bhi.n	8013c2e <etharp_output_to_arp_index+0x32>
 8013c20:	4b40      	ldr	r3, [pc, #256]	; (8013d24 <etharp_output_to_arp_index+0x128>)
 8013c22:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013c26:	4940      	ldr	r1, [pc, #256]	; (8013d28 <etharp_output_to_arp_index+0x12c>)
 8013c28:	4840      	ldr	r0, [pc, #256]	; (8013d2c <etharp_output_to_arp_index+0x130>)
 8013c2a:	f002 faab 	bl	8016184 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013c2e:	79fa      	ldrb	r2, [r7, #7]
 8013c30:	493b      	ldr	r1, [pc, #236]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013c32:	4613      	mov	r3, r2
 8013c34:	005b      	lsls	r3, r3, #1
 8013c36:	4413      	add	r3, r2
 8013c38:	00db      	lsls	r3, r3, #3
 8013c3a:	440b      	add	r3, r1
 8013c3c:	3314      	adds	r3, #20
 8013c3e:	781b      	ldrb	r3, [r3, #0]
 8013c40:	2b02      	cmp	r3, #2
 8013c42:	d153      	bne.n	8013cec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013c44:	79fa      	ldrb	r2, [r7, #7]
 8013c46:	4936      	ldr	r1, [pc, #216]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013c48:	4613      	mov	r3, r2
 8013c4a:	005b      	lsls	r3, r3, #1
 8013c4c:	4413      	add	r3, r2
 8013c4e:	00db      	lsls	r3, r3, #3
 8013c50:	440b      	add	r3, r1
 8013c52:	3312      	adds	r3, #18
 8013c54:	881b      	ldrh	r3, [r3, #0]
 8013c56:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013c5a:	d919      	bls.n	8013c90 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013c5c:	79fa      	ldrb	r2, [r7, #7]
 8013c5e:	4613      	mov	r3, r2
 8013c60:	005b      	lsls	r3, r3, #1
 8013c62:	4413      	add	r3, r2
 8013c64:	00db      	lsls	r3, r3, #3
 8013c66:	4a2e      	ldr	r2, [pc, #184]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013c68:	4413      	add	r3, r2
 8013c6a:	3304      	adds	r3, #4
 8013c6c:	4619      	mov	r1, r3
 8013c6e:	68f8      	ldr	r0, [r7, #12]
 8013c70:	f000 fb4c 	bl	801430c <etharp_request>
 8013c74:	4603      	mov	r3, r0
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d138      	bne.n	8013cec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013c7a:	79fa      	ldrb	r2, [r7, #7]
 8013c7c:	4928      	ldr	r1, [pc, #160]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013c7e:	4613      	mov	r3, r2
 8013c80:	005b      	lsls	r3, r3, #1
 8013c82:	4413      	add	r3, r2
 8013c84:	00db      	lsls	r3, r3, #3
 8013c86:	440b      	add	r3, r1
 8013c88:	3314      	adds	r3, #20
 8013c8a:	2203      	movs	r2, #3
 8013c8c:	701a      	strb	r2, [r3, #0]
 8013c8e:	e02d      	b.n	8013cec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013c90:	79fa      	ldrb	r2, [r7, #7]
 8013c92:	4923      	ldr	r1, [pc, #140]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013c94:	4613      	mov	r3, r2
 8013c96:	005b      	lsls	r3, r3, #1
 8013c98:	4413      	add	r3, r2
 8013c9a:	00db      	lsls	r3, r3, #3
 8013c9c:	440b      	add	r3, r1
 8013c9e:	3312      	adds	r3, #18
 8013ca0:	881b      	ldrh	r3, [r3, #0]
 8013ca2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013ca6:	d321      	bcc.n	8013cec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013ca8:	79fa      	ldrb	r2, [r7, #7]
 8013caa:	4613      	mov	r3, r2
 8013cac:	005b      	lsls	r3, r3, #1
 8013cae:	4413      	add	r3, r2
 8013cb0:	00db      	lsls	r3, r3, #3
 8013cb2:	4a1b      	ldr	r2, [pc, #108]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013cb4:	4413      	add	r3, r2
 8013cb6:	1d19      	adds	r1, r3, #4
 8013cb8:	79fa      	ldrb	r2, [r7, #7]
 8013cba:	4613      	mov	r3, r2
 8013cbc:	005b      	lsls	r3, r3, #1
 8013cbe:	4413      	add	r3, r2
 8013cc0:	00db      	lsls	r3, r3, #3
 8013cc2:	3308      	adds	r3, #8
 8013cc4:	4a16      	ldr	r2, [pc, #88]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013cc6:	4413      	add	r3, r2
 8013cc8:	3304      	adds	r3, #4
 8013cca:	461a      	mov	r2, r3
 8013ccc:	68f8      	ldr	r0, [r7, #12]
 8013cce:	f000 fafb 	bl	80142c8 <etharp_request_dst>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d109      	bne.n	8013cec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013cd8:	79fa      	ldrb	r2, [r7, #7]
 8013cda:	4911      	ldr	r1, [pc, #68]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013cdc:	4613      	mov	r3, r2
 8013cde:	005b      	lsls	r3, r3, #1
 8013ce0:	4413      	add	r3, r2
 8013ce2:	00db      	lsls	r3, r3, #3
 8013ce4:	440b      	add	r3, r1
 8013ce6:	3314      	adds	r3, #20
 8013ce8:	2203      	movs	r2, #3
 8013cea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013cf2:	79fa      	ldrb	r2, [r7, #7]
 8013cf4:	4613      	mov	r3, r2
 8013cf6:	005b      	lsls	r3, r3, #1
 8013cf8:	4413      	add	r3, r2
 8013cfa:	00db      	lsls	r3, r3, #3
 8013cfc:	3308      	adds	r3, #8
 8013cfe:	4a08      	ldr	r2, [pc, #32]	; (8013d20 <etharp_output_to_arp_index+0x124>)
 8013d00:	4413      	add	r3, r2
 8013d02:	3304      	adds	r3, #4
 8013d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013d08:	9200      	str	r2, [sp, #0]
 8013d0a:	460a      	mov	r2, r1
 8013d0c:	68b9      	ldr	r1, [r7, #8]
 8013d0e:	68f8      	ldr	r0, [r7, #12]
 8013d10:	f001 fe40 	bl	8015994 <ethernet_output>
 8013d14:	4603      	mov	r3, r0
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	3710      	adds	r7, #16
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
 8013d1e:	bf00      	nop
 8013d20:	20008f80 	.word	0x20008f80
 8013d24:	08019558 	.word	0x08019558
 8013d28:	080196c8 	.word	0x080196c8
 8013d2c:	080195d0 	.word	0x080195d0

08013d30 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b08a      	sub	sp, #40	; 0x28
 8013d34:	af02      	add	r7, sp, #8
 8013d36:	60f8      	str	r0, [r7, #12]
 8013d38:	60b9      	str	r1, [r7, #8]
 8013d3a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d106      	bne.n	8013d54 <etharp_output+0x24>
 8013d46:	4b73      	ldr	r3, [pc, #460]	; (8013f14 <etharp_output+0x1e4>)
 8013d48:	f240 321e 	movw	r2, #798	; 0x31e
 8013d4c:	4972      	ldr	r1, [pc, #456]	; (8013f18 <etharp_output+0x1e8>)
 8013d4e:	4873      	ldr	r0, [pc, #460]	; (8013f1c <etharp_output+0x1ec>)
 8013d50:	f002 fa18 	bl	8016184 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d106      	bne.n	8013d68 <etharp_output+0x38>
 8013d5a:	4b6e      	ldr	r3, [pc, #440]	; (8013f14 <etharp_output+0x1e4>)
 8013d5c:	f240 321f 	movw	r2, #799	; 0x31f
 8013d60:	496f      	ldr	r1, [pc, #444]	; (8013f20 <etharp_output+0x1f0>)
 8013d62:	486e      	ldr	r0, [pc, #440]	; (8013f1c <etharp_output+0x1ec>)
 8013d64:	f002 fa0e 	bl	8016184 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d106      	bne.n	8013d7c <etharp_output+0x4c>
 8013d6e:	4b69      	ldr	r3, [pc, #420]	; (8013f14 <etharp_output+0x1e4>)
 8013d70:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013d74:	496b      	ldr	r1, [pc, #428]	; (8013f24 <etharp_output+0x1f4>)
 8013d76:	4869      	ldr	r0, [pc, #420]	; (8013f1c <etharp_output+0x1ec>)
 8013d78:	f002 fa04 	bl	8016184 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	68f9      	ldr	r1, [r7, #12]
 8013d82:	4618      	mov	r0, r3
 8013d84:	f000 fef8 	bl	8014b78 <ip4_addr_isbroadcast_u32>
 8013d88:	4603      	mov	r3, r0
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d002      	beq.n	8013d94 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013d8e:	4b66      	ldr	r3, [pc, #408]	; (8013f28 <etharp_output+0x1f8>)
 8013d90:	61fb      	str	r3, [r7, #28]
 8013d92:	e0af      	b.n	8013ef4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d9c:	2be0      	cmp	r3, #224	; 0xe0
 8013d9e:	d118      	bne.n	8013dd2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013da0:	2301      	movs	r3, #1
 8013da2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013da4:	2300      	movs	r3, #0
 8013da6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013da8:	235e      	movs	r3, #94	; 0x5e
 8013daa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	3301      	adds	r3, #1
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013db6:	b2db      	uxtb	r3, r3
 8013db8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	3302      	adds	r3, #2
 8013dbe:	781b      	ldrb	r3, [r3, #0]
 8013dc0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	3303      	adds	r3, #3
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013dca:	f107 0310 	add.w	r3, r7, #16
 8013dce:	61fb      	str	r3, [r7, #28]
 8013dd0:	e090      	b.n	8013ef4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681a      	ldr	r2, [r3, #0]
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	3304      	adds	r3, #4
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	405a      	eors	r2, r3
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	3308      	adds	r3, #8
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	4013      	ands	r3, r2
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d012      	beq.n	8013e10 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013df0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013df4:	4293      	cmp	r3, r2
 8013df6:	d00b      	beq.n	8013e10 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	330c      	adds	r3, #12
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d003      	beq.n	8013e0a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	330c      	adds	r3, #12
 8013e06:	61bb      	str	r3, [r7, #24]
 8013e08:	e002      	b.n	8013e10 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013e0a:	f06f 0303 	mvn.w	r3, #3
 8013e0e:	e07d      	b.n	8013f0c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013e10:	4b46      	ldr	r3, [pc, #280]	; (8013f2c <etharp_output+0x1fc>)
 8013e12:	781b      	ldrb	r3, [r3, #0]
 8013e14:	4619      	mov	r1, r3
 8013e16:	4a46      	ldr	r2, [pc, #280]	; (8013f30 <etharp_output+0x200>)
 8013e18:	460b      	mov	r3, r1
 8013e1a:	005b      	lsls	r3, r3, #1
 8013e1c:	440b      	add	r3, r1
 8013e1e:	00db      	lsls	r3, r3, #3
 8013e20:	4413      	add	r3, r2
 8013e22:	3314      	adds	r3, #20
 8013e24:	781b      	ldrb	r3, [r3, #0]
 8013e26:	2b01      	cmp	r3, #1
 8013e28:	d925      	bls.n	8013e76 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013e2a:	4b40      	ldr	r3, [pc, #256]	; (8013f2c <etharp_output+0x1fc>)
 8013e2c:	781b      	ldrb	r3, [r3, #0]
 8013e2e:	4619      	mov	r1, r3
 8013e30:	4a3f      	ldr	r2, [pc, #252]	; (8013f30 <etharp_output+0x200>)
 8013e32:	460b      	mov	r3, r1
 8013e34:	005b      	lsls	r3, r3, #1
 8013e36:	440b      	add	r3, r1
 8013e38:	00db      	lsls	r3, r3, #3
 8013e3a:	4413      	add	r3, r2
 8013e3c:	3308      	adds	r3, #8
 8013e3e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013e40:	68fa      	ldr	r2, [r7, #12]
 8013e42:	429a      	cmp	r2, r3
 8013e44:	d117      	bne.n	8013e76 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013e46:	69bb      	ldr	r3, [r7, #24]
 8013e48:	681a      	ldr	r2, [r3, #0]
 8013e4a:	4b38      	ldr	r3, [pc, #224]	; (8013f2c <etharp_output+0x1fc>)
 8013e4c:	781b      	ldrb	r3, [r3, #0]
 8013e4e:	4618      	mov	r0, r3
 8013e50:	4937      	ldr	r1, [pc, #220]	; (8013f30 <etharp_output+0x200>)
 8013e52:	4603      	mov	r3, r0
 8013e54:	005b      	lsls	r3, r3, #1
 8013e56:	4403      	add	r3, r0
 8013e58:	00db      	lsls	r3, r3, #3
 8013e5a:	440b      	add	r3, r1
 8013e5c:	3304      	adds	r3, #4
 8013e5e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013e60:	429a      	cmp	r2, r3
 8013e62:	d108      	bne.n	8013e76 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013e64:	4b31      	ldr	r3, [pc, #196]	; (8013f2c <etharp_output+0x1fc>)
 8013e66:	781b      	ldrb	r3, [r3, #0]
 8013e68:	461a      	mov	r2, r3
 8013e6a:	68b9      	ldr	r1, [r7, #8]
 8013e6c:	68f8      	ldr	r0, [r7, #12]
 8013e6e:	f7ff fec5 	bl	8013bfc <etharp_output_to_arp_index>
 8013e72:	4603      	mov	r3, r0
 8013e74:	e04a      	b.n	8013f0c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013e76:	2300      	movs	r3, #0
 8013e78:	75fb      	strb	r3, [r7, #23]
 8013e7a:	e031      	b.n	8013ee0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013e7c:	7dfa      	ldrb	r2, [r7, #23]
 8013e7e:	492c      	ldr	r1, [pc, #176]	; (8013f30 <etharp_output+0x200>)
 8013e80:	4613      	mov	r3, r2
 8013e82:	005b      	lsls	r3, r3, #1
 8013e84:	4413      	add	r3, r2
 8013e86:	00db      	lsls	r3, r3, #3
 8013e88:	440b      	add	r3, r1
 8013e8a:	3314      	adds	r3, #20
 8013e8c:	781b      	ldrb	r3, [r3, #0]
 8013e8e:	2b01      	cmp	r3, #1
 8013e90:	d923      	bls.n	8013eda <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013e92:	7dfa      	ldrb	r2, [r7, #23]
 8013e94:	4926      	ldr	r1, [pc, #152]	; (8013f30 <etharp_output+0x200>)
 8013e96:	4613      	mov	r3, r2
 8013e98:	005b      	lsls	r3, r3, #1
 8013e9a:	4413      	add	r3, r2
 8013e9c:	00db      	lsls	r3, r3, #3
 8013e9e:	440b      	add	r3, r1
 8013ea0:	3308      	adds	r3, #8
 8013ea2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013ea4:	68fa      	ldr	r2, [r7, #12]
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d117      	bne.n	8013eda <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013eaa:	69bb      	ldr	r3, [r7, #24]
 8013eac:	6819      	ldr	r1, [r3, #0]
 8013eae:	7dfa      	ldrb	r2, [r7, #23]
 8013eb0:	481f      	ldr	r0, [pc, #124]	; (8013f30 <etharp_output+0x200>)
 8013eb2:	4613      	mov	r3, r2
 8013eb4:	005b      	lsls	r3, r3, #1
 8013eb6:	4413      	add	r3, r2
 8013eb8:	00db      	lsls	r3, r3, #3
 8013eba:	4403      	add	r3, r0
 8013ebc:	3304      	adds	r3, #4
 8013ebe:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013ec0:	4299      	cmp	r1, r3
 8013ec2:	d10a      	bne.n	8013eda <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013ec4:	4a19      	ldr	r2, [pc, #100]	; (8013f2c <etharp_output+0x1fc>)
 8013ec6:	7dfb      	ldrb	r3, [r7, #23]
 8013ec8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013eca:	7dfb      	ldrb	r3, [r7, #23]
 8013ecc:	461a      	mov	r2, r3
 8013ece:	68b9      	ldr	r1, [r7, #8]
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f7ff fe93 	bl	8013bfc <etharp_output_to_arp_index>
 8013ed6:	4603      	mov	r3, r0
 8013ed8:	e018      	b.n	8013f0c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013eda:	7dfb      	ldrb	r3, [r7, #23]
 8013edc:	3301      	adds	r3, #1
 8013ede:	75fb      	strb	r3, [r7, #23]
 8013ee0:	7dfb      	ldrb	r3, [r7, #23]
 8013ee2:	2b09      	cmp	r3, #9
 8013ee4:	d9ca      	bls.n	8013e7c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013ee6:	68ba      	ldr	r2, [r7, #8]
 8013ee8:	69b9      	ldr	r1, [r7, #24]
 8013eea:	68f8      	ldr	r0, [r7, #12]
 8013eec:	f000 f822 	bl	8013f34 <etharp_query>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	e00b      	b.n	8013f0c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013efa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013efe:	9300      	str	r3, [sp, #0]
 8013f00:	69fb      	ldr	r3, [r7, #28]
 8013f02:	68b9      	ldr	r1, [r7, #8]
 8013f04:	68f8      	ldr	r0, [r7, #12]
 8013f06:	f001 fd45 	bl	8015994 <ethernet_output>
 8013f0a:	4603      	mov	r3, r0
}
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	3720      	adds	r7, #32
 8013f10:	46bd      	mov	sp, r7
 8013f12:	bd80      	pop	{r7, pc}
 8013f14:	08019558 	.word	0x08019558
 8013f18:	080196a8 	.word	0x080196a8
 8013f1c:	080195d0 	.word	0x080195d0
 8013f20:	080196f8 	.word	0x080196f8
 8013f24:	08019698 	.word	0x08019698
 8013f28:	08019d40 	.word	0x08019d40
 8013f2c:	20009070 	.word	0x20009070
 8013f30:	20008f80 	.word	0x20008f80

08013f34 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b08c      	sub	sp, #48	; 0x30
 8013f38:	af02      	add	r7, sp, #8
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	3326      	adds	r3, #38	; 0x26
 8013f44:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013f46:	23ff      	movs	r3, #255	; 0xff
 8013f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	68f9      	ldr	r1, [r7, #12]
 8013f56:	4618      	mov	r0, r3
 8013f58:	f000 fe0e 	bl	8014b78 <ip4_addr_isbroadcast_u32>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d10c      	bne.n	8013f7c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013f62:	68bb      	ldr	r3, [r7, #8]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f6a:	2be0      	cmp	r3, #224	; 0xe0
 8013f6c:	d006      	beq.n	8013f7c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d003      	beq.n	8013f7c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d102      	bne.n	8013f82 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013f7c:	f06f 030f 	mvn.w	r3, #15
 8013f80:	e101      	b.n	8014186 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013f82:	68fa      	ldr	r2, [r7, #12]
 8013f84:	2101      	movs	r1, #1
 8013f86:	68b8      	ldr	r0, [r7, #8]
 8013f88:	f7ff fb60 	bl	801364c <etharp_find_entry>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013f90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	da02      	bge.n	8013f9e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013f98:	8a7b      	ldrh	r3, [r7, #18]
 8013f9a:	b25b      	sxtb	r3, r3
 8013f9c:	e0f3      	b.n	8014186 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013f9e:	8a7b      	ldrh	r3, [r7, #18]
 8013fa0:	2b7e      	cmp	r3, #126	; 0x7e
 8013fa2:	d906      	bls.n	8013fb2 <etharp_query+0x7e>
 8013fa4:	4b7a      	ldr	r3, [pc, #488]	; (8014190 <etharp_query+0x25c>)
 8013fa6:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013faa:	497a      	ldr	r1, [pc, #488]	; (8014194 <etharp_query+0x260>)
 8013fac:	487a      	ldr	r0, [pc, #488]	; (8014198 <etharp_query+0x264>)
 8013fae:	f002 f8e9 	bl	8016184 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013fb2:	8a7b      	ldrh	r3, [r7, #18]
 8013fb4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013fb6:	7c7a      	ldrb	r2, [r7, #17]
 8013fb8:	4978      	ldr	r1, [pc, #480]	; (801419c <etharp_query+0x268>)
 8013fba:	4613      	mov	r3, r2
 8013fbc:	005b      	lsls	r3, r3, #1
 8013fbe:	4413      	add	r3, r2
 8013fc0:	00db      	lsls	r3, r3, #3
 8013fc2:	440b      	add	r3, r1
 8013fc4:	3314      	adds	r3, #20
 8013fc6:	781b      	ldrb	r3, [r3, #0]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d115      	bne.n	8013ff8 <etharp_query+0xc4>
    is_new_entry = 1;
 8013fcc:	2301      	movs	r3, #1
 8013fce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013fd0:	7c7a      	ldrb	r2, [r7, #17]
 8013fd2:	4972      	ldr	r1, [pc, #456]	; (801419c <etharp_query+0x268>)
 8013fd4:	4613      	mov	r3, r2
 8013fd6:	005b      	lsls	r3, r3, #1
 8013fd8:	4413      	add	r3, r2
 8013fda:	00db      	lsls	r3, r3, #3
 8013fdc:	440b      	add	r3, r1
 8013fde:	3314      	adds	r3, #20
 8013fe0:	2201      	movs	r2, #1
 8013fe2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013fe4:	7c7a      	ldrb	r2, [r7, #17]
 8013fe6:	496d      	ldr	r1, [pc, #436]	; (801419c <etharp_query+0x268>)
 8013fe8:	4613      	mov	r3, r2
 8013fea:	005b      	lsls	r3, r3, #1
 8013fec:	4413      	add	r3, r2
 8013fee:	00db      	lsls	r3, r3, #3
 8013ff0:	440b      	add	r3, r1
 8013ff2:	3308      	adds	r3, #8
 8013ff4:	68fa      	ldr	r2, [r7, #12]
 8013ff6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013ff8:	7c7a      	ldrb	r2, [r7, #17]
 8013ffa:	4968      	ldr	r1, [pc, #416]	; (801419c <etharp_query+0x268>)
 8013ffc:	4613      	mov	r3, r2
 8013ffe:	005b      	lsls	r3, r3, #1
 8014000:	4413      	add	r3, r2
 8014002:	00db      	lsls	r3, r3, #3
 8014004:	440b      	add	r3, r1
 8014006:	3314      	adds	r3, #20
 8014008:	781b      	ldrb	r3, [r3, #0]
 801400a:	2b01      	cmp	r3, #1
 801400c:	d011      	beq.n	8014032 <etharp_query+0xfe>
 801400e:	7c7a      	ldrb	r2, [r7, #17]
 8014010:	4962      	ldr	r1, [pc, #392]	; (801419c <etharp_query+0x268>)
 8014012:	4613      	mov	r3, r2
 8014014:	005b      	lsls	r3, r3, #1
 8014016:	4413      	add	r3, r2
 8014018:	00db      	lsls	r3, r3, #3
 801401a:	440b      	add	r3, r1
 801401c:	3314      	adds	r3, #20
 801401e:	781b      	ldrb	r3, [r3, #0]
 8014020:	2b01      	cmp	r3, #1
 8014022:	d806      	bhi.n	8014032 <etharp_query+0xfe>
 8014024:	4b5a      	ldr	r3, [pc, #360]	; (8014190 <etharp_query+0x25c>)
 8014026:	f240 32cd 	movw	r2, #973	; 0x3cd
 801402a:	495d      	ldr	r1, [pc, #372]	; (80141a0 <etharp_query+0x26c>)
 801402c:	485a      	ldr	r0, [pc, #360]	; (8014198 <etharp_query+0x264>)
 801402e:	f002 f8a9 	bl	8016184 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014032:	6a3b      	ldr	r3, [r7, #32]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d102      	bne.n	801403e <etharp_query+0x10a>
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d10c      	bne.n	8014058 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801403e:	68b9      	ldr	r1, [r7, #8]
 8014040:	68f8      	ldr	r0, [r7, #12]
 8014042:	f000 f963 	bl	801430c <etharp_request>
 8014046:	4603      	mov	r3, r0
 8014048:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d102      	bne.n	8014058 <etharp_query+0x124>
      return result;
 8014052:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014056:	e096      	b.n	8014186 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d106      	bne.n	801406c <etharp_query+0x138>
 801405e:	4b4c      	ldr	r3, [pc, #304]	; (8014190 <etharp_query+0x25c>)
 8014060:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014064:	494f      	ldr	r1, [pc, #316]	; (80141a4 <etharp_query+0x270>)
 8014066:	484c      	ldr	r0, [pc, #304]	; (8014198 <etharp_query+0x264>)
 8014068:	f002 f88c 	bl	8016184 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801406c:	7c7a      	ldrb	r2, [r7, #17]
 801406e:	494b      	ldr	r1, [pc, #300]	; (801419c <etharp_query+0x268>)
 8014070:	4613      	mov	r3, r2
 8014072:	005b      	lsls	r3, r3, #1
 8014074:	4413      	add	r3, r2
 8014076:	00db      	lsls	r3, r3, #3
 8014078:	440b      	add	r3, r1
 801407a:	3314      	adds	r3, #20
 801407c:	781b      	ldrb	r3, [r3, #0]
 801407e:	2b01      	cmp	r3, #1
 8014080:	d917      	bls.n	80140b2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014082:	4a49      	ldr	r2, [pc, #292]	; (80141a8 <etharp_query+0x274>)
 8014084:	7c7b      	ldrb	r3, [r7, #17]
 8014086:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014088:	7c7a      	ldrb	r2, [r7, #17]
 801408a:	4613      	mov	r3, r2
 801408c:	005b      	lsls	r3, r3, #1
 801408e:	4413      	add	r3, r2
 8014090:	00db      	lsls	r3, r3, #3
 8014092:	3308      	adds	r3, #8
 8014094:	4a41      	ldr	r2, [pc, #260]	; (801419c <etharp_query+0x268>)
 8014096:	4413      	add	r3, r2
 8014098:	3304      	adds	r3, #4
 801409a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801409e:	9200      	str	r2, [sp, #0]
 80140a0:	697a      	ldr	r2, [r7, #20]
 80140a2:	6879      	ldr	r1, [r7, #4]
 80140a4:	68f8      	ldr	r0, [r7, #12]
 80140a6:	f001 fc75 	bl	8015994 <ethernet_output>
 80140aa:	4603      	mov	r3, r0
 80140ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80140b0:	e067      	b.n	8014182 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80140b2:	7c7a      	ldrb	r2, [r7, #17]
 80140b4:	4939      	ldr	r1, [pc, #228]	; (801419c <etharp_query+0x268>)
 80140b6:	4613      	mov	r3, r2
 80140b8:	005b      	lsls	r3, r3, #1
 80140ba:	4413      	add	r3, r2
 80140bc:	00db      	lsls	r3, r3, #3
 80140be:	440b      	add	r3, r1
 80140c0:	3314      	adds	r3, #20
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	2b01      	cmp	r3, #1
 80140c6:	d15c      	bne.n	8014182 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80140c8:	2300      	movs	r3, #0
 80140ca:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	61fb      	str	r3, [r7, #28]
    while (p) {
 80140d0:	e01c      	b.n	801410c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	895a      	ldrh	r2, [r3, #10]
 80140d6:	69fb      	ldr	r3, [r7, #28]
 80140d8:	891b      	ldrh	r3, [r3, #8]
 80140da:	429a      	cmp	r2, r3
 80140dc:	d10a      	bne.n	80140f4 <etharp_query+0x1c0>
 80140de:	69fb      	ldr	r3, [r7, #28]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d006      	beq.n	80140f4 <etharp_query+0x1c0>
 80140e6:	4b2a      	ldr	r3, [pc, #168]	; (8014190 <etharp_query+0x25c>)
 80140e8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80140ec:	492f      	ldr	r1, [pc, #188]	; (80141ac <etharp_query+0x278>)
 80140ee:	482a      	ldr	r0, [pc, #168]	; (8014198 <etharp_query+0x264>)
 80140f0:	f002 f848 	bl	8016184 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80140f4:	69fb      	ldr	r3, [r7, #28]
 80140f6:	7b1b      	ldrb	r3, [r3, #12]
 80140f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d002      	beq.n	8014106 <etharp_query+0x1d2>
        copy_needed = 1;
 8014100:	2301      	movs	r3, #1
 8014102:	61bb      	str	r3, [r7, #24]
        break;
 8014104:	e005      	b.n	8014112 <etharp_query+0x1de>
      }
      p = p->next;
 8014106:	69fb      	ldr	r3, [r7, #28]
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801410c:	69fb      	ldr	r3, [r7, #28]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d1df      	bne.n	80140d2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014112:	69bb      	ldr	r3, [r7, #24]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d007      	beq.n	8014128 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014118:	687a      	ldr	r2, [r7, #4]
 801411a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801411e:	200e      	movs	r0, #14
 8014120:	f7f9 f996 	bl	800d450 <pbuf_clone>
 8014124:	61f8      	str	r0, [r7, #28]
 8014126:	e004      	b.n	8014132 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801412c:	69f8      	ldr	r0, [r7, #28]
 801412e:	f7f8 ff31 	bl	800cf94 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014132:	69fb      	ldr	r3, [r7, #28]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d021      	beq.n	801417c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014138:	7c7a      	ldrb	r2, [r7, #17]
 801413a:	4918      	ldr	r1, [pc, #96]	; (801419c <etharp_query+0x268>)
 801413c:	4613      	mov	r3, r2
 801413e:	005b      	lsls	r3, r3, #1
 8014140:	4413      	add	r3, r2
 8014142:	00db      	lsls	r3, r3, #3
 8014144:	440b      	add	r3, r1
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d00a      	beq.n	8014162 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801414c:	7c7a      	ldrb	r2, [r7, #17]
 801414e:	4913      	ldr	r1, [pc, #76]	; (801419c <etharp_query+0x268>)
 8014150:	4613      	mov	r3, r2
 8014152:	005b      	lsls	r3, r3, #1
 8014154:	4413      	add	r3, r2
 8014156:	00db      	lsls	r3, r3, #3
 8014158:	440b      	add	r3, r1
 801415a:	681b      	ldr	r3, [r3, #0]
 801415c:	4618      	mov	r0, r3
 801415e:	f7f8 fe79 	bl	800ce54 <pbuf_free>
      }
      arp_table[i].q = p;
 8014162:	7c7a      	ldrb	r2, [r7, #17]
 8014164:	490d      	ldr	r1, [pc, #52]	; (801419c <etharp_query+0x268>)
 8014166:	4613      	mov	r3, r2
 8014168:	005b      	lsls	r3, r3, #1
 801416a:	4413      	add	r3, r2
 801416c:	00db      	lsls	r3, r3, #3
 801416e:	440b      	add	r3, r1
 8014170:	69fa      	ldr	r2, [r7, #28]
 8014172:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014174:	2300      	movs	r3, #0
 8014176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801417a:	e002      	b.n	8014182 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801417c:	23ff      	movs	r3, #255	; 0xff
 801417e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014182:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014186:	4618      	mov	r0, r3
 8014188:	3728      	adds	r7, #40	; 0x28
 801418a:	46bd      	mov	sp, r7
 801418c:	bd80      	pop	{r7, pc}
 801418e:	bf00      	nop
 8014190:	08019558 	.word	0x08019558
 8014194:	08019704 	.word	0x08019704
 8014198:	080195d0 	.word	0x080195d0
 801419c:	20008f80 	.word	0x20008f80
 80141a0:	08019714 	.word	0x08019714
 80141a4:	080196f8 	.word	0x080196f8
 80141a8:	20009070 	.word	0x20009070
 80141ac:	0801973c 	.word	0x0801973c

080141b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b08a      	sub	sp, #40	; 0x28
 80141b4:	af02      	add	r7, sp, #8
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	60b9      	str	r1, [r7, #8]
 80141ba:	607a      	str	r2, [r7, #4]
 80141bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80141be:	2300      	movs	r3, #0
 80141c0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d106      	bne.n	80141d6 <etharp_raw+0x26>
 80141c8:	4b3a      	ldr	r3, [pc, #232]	; (80142b4 <etharp_raw+0x104>)
 80141ca:	f240 4257 	movw	r2, #1111	; 0x457
 80141ce:	493a      	ldr	r1, [pc, #232]	; (80142b8 <etharp_raw+0x108>)
 80141d0:	483a      	ldr	r0, [pc, #232]	; (80142bc <etharp_raw+0x10c>)
 80141d2:	f001 ffd7 	bl	8016184 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80141d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141da:	211c      	movs	r1, #28
 80141dc:	200e      	movs	r0, #14
 80141de:	f7f8 fb55 	bl	800c88c <pbuf_alloc>
 80141e2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80141e4:	69bb      	ldr	r3, [r7, #24]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d102      	bne.n	80141f0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80141ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141ee:	e05d      	b.n	80142ac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80141f0:	69bb      	ldr	r3, [r7, #24]
 80141f2:	895b      	ldrh	r3, [r3, #10]
 80141f4:	2b1b      	cmp	r3, #27
 80141f6:	d806      	bhi.n	8014206 <etharp_raw+0x56>
 80141f8:	4b2e      	ldr	r3, [pc, #184]	; (80142b4 <etharp_raw+0x104>)
 80141fa:	f240 4262 	movw	r2, #1122	; 0x462
 80141fe:	4930      	ldr	r1, [pc, #192]	; (80142c0 <etharp_raw+0x110>)
 8014200:	482e      	ldr	r0, [pc, #184]	; (80142bc <etharp_raw+0x10c>)
 8014202:	f001 ffbf 	bl	8016184 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014206:	69bb      	ldr	r3, [r7, #24]
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801420c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801420e:	4618      	mov	r0, r3
 8014210:	f7f7 fac2 	bl	800b798 <lwip_htons>
 8014214:	4603      	mov	r3, r0
 8014216:	461a      	mov	r2, r3
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801421c:	68fb      	ldr	r3, [r7, #12]
 801421e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014222:	2b06      	cmp	r3, #6
 8014224:	d006      	beq.n	8014234 <etharp_raw+0x84>
 8014226:	4b23      	ldr	r3, [pc, #140]	; (80142b4 <etharp_raw+0x104>)
 8014228:	f240 4269 	movw	r2, #1129	; 0x469
 801422c:	4925      	ldr	r1, [pc, #148]	; (80142c4 <etharp_raw+0x114>)
 801422e:	4823      	ldr	r0, [pc, #140]	; (80142bc <etharp_raw+0x10c>)
 8014230:	f001 ffa8 	bl	8016184 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014234:	697b      	ldr	r3, [r7, #20]
 8014236:	3308      	adds	r3, #8
 8014238:	2206      	movs	r2, #6
 801423a:	6839      	ldr	r1, [r7, #0]
 801423c:	4618      	mov	r0, r3
 801423e:	f001 ff8b 	bl	8016158 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	3312      	adds	r3, #18
 8014246:	2206      	movs	r2, #6
 8014248:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801424a:	4618      	mov	r0, r3
 801424c:	f001 ff84 	bl	8016158 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014250:	697b      	ldr	r3, [r7, #20]
 8014252:	330e      	adds	r3, #14
 8014254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014256:	6812      	ldr	r2, [r2, #0]
 8014258:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	3318      	adds	r3, #24
 801425e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014260:	6812      	ldr	r2, [r2, #0]
 8014262:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	2200      	movs	r2, #0
 8014268:	701a      	strb	r2, [r3, #0]
 801426a:	2200      	movs	r2, #0
 801426c:	f042 0201 	orr.w	r2, r2, #1
 8014270:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	2200      	movs	r2, #0
 8014276:	f042 0208 	orr.w	r2, r2, #8
 801427a:	709a      	strb	r2, [r3, #2]
 801427c:	2200      	movs	r2, #0
 801427e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	2206      	movs	r2, #6
 8014284:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014286:	697b      	ldr	r3, [r7, #20]
 8014288:	2204      	movs	r2, #4
 801428a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801428c:	f640 0306 	movw	r3, #2054	; 0x806
 8014290:	9300      	str	r3, [sp, #0]
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	68ba      	ldr	r2, [r7, #8]
 8014296:	69b9      	ldr	r1, [r7, #24]
 8014298:	68f8      	ldr	r0, [r7, #12]
 801429a:	f001 fb7b 	bl	8015994 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801429e:	69b8      	ldr	r0, [r7, #24]
 80142a0:	f7f8 fdd8 	bl	800ce54 <pbuf_free>
  p = NULL;
 80142a4:	2300      	movs	r3, #0
 80142a6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80142a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80142ac:	4618      	mov	r0, r3
 80142ae:	3720      	adds	r7, #32
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd80      	pop	{r7, pc}
 80142b4:	08019558 	.word	0x08019558
 80142b8:	080196a8 	.word	0x080196a8
 80142bc:	080195d0 	.word	0x080195d0
 80142c0:	08019758 	.word	0x08019758
 80142c4:	0801978c 	.word	0x0801978c

080142c8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b088      	sub	sp, #32
 80142cc:	af04      	add	r7, sp, #16
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	60b9      	str	r1, [r7, #8]
 80142d2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80142d4:	68fb      	ldr	r3, [r7, #12]
 80142d6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80142e4:	2201      	movs	r2, #1
 80142e6:	9203      	str	r2, [sp, #12]
 80142e8:	68ba      	ldr	r2, [r7, #8]
 80142ea:	9202      	str	r2, [sp, #8]
 80142ec:	4a06      	ldr	r2, [pc, #24]	; (8014308 <etharp_request_dst+0x40>)
 80142ee:	9201      	str	r2, [sp, #4]
 80142f0:	9300      	str	r3, [sp, #0]
 80142f2:	4603      	mov	r3, r0
 80142f4:	687a      	ldr	r2, [r7, #4]
 80142f6:	68f8      	ldr	r0, [r7, #12]
 80142f8:	f7ff ff5a 	bl	80141b0 <etharp_raw>
 80142fc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80142fe:	4618      	mov	r0, r3
 8014300:	3710      	adds	r7, #16
 8014302:	46bd      	mov	sp, r7
 8014304:	bd80      	pop	{r7, pc}
 8014306:	bf00      	nop
 8014308:	08019d48 	.word	0x08019d48

0801430c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b082      	sub	sp, #8
 8014310:	af00      	add	r7, sp, #0
 8014312:	6078      	str	r0, [r7, #4]
 8014314:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014316:	4a05      	ldr	r2, [pc, #20]	; (801432c <etharp_request+0x20>)
 8014318:	6839      	ldr	r1, [r7, #0]
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f7ff ffd4 	bl	80142c8 <etharp_request_dst>
 8014320:	4603      	mov	r3, r0
}
 8014322:	4618      	mov	r0, r3
 8014324:	3708      	adds	r7, #8
 8014326:	46bd      	mov	sp, r7
 8014328:	bd80      	pop	{r7, pc}
 801432a:	bf00      	nop
 801432c:	08019d40 	.word	0x08019d40

08014330 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014330:	b580      	push	{r7, lr}
 8014332:	b08e      	sub	sp, #56	; 0x38
 8014334:	af04      	add	r7, sp, #16
 8014336:	6078      	str	r0, [r7, #4]
 8014338:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801433a:	4b79      	ldr	r3, [pc, #484]	; (8014520 <icmp_input+0x1f0>)
 801433c:	689b      	ldr	r3, [r3, #8]
 801433e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	f003 030f 	and.w	r3, r3, #15
 8014348:	b2db      	uxtb	r3, r3
 801434a:	009b      	lsls	r3, r3, #2
 801434c:	b2db      	uxtb	r3, r3
 801434e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014350:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014352:	2b13      	cmp	r3, #19
 8014354:	f240 80cd 	bls.w	80144f2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	895b      	ldrh	r3, [r3, #10]
 801435c:	2b03      	cmp	r3, #3
 801435e:	f240 80ca 	bls.w	80144f6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	685b      	ldr	r3, [r3, #4]
 8014366:	781b      	ldrb	r3, [r3, #0]
 8014368:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801436c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014370:	2b00      	cmp	r3, #0
 8014372:	f000 80b7 	beq.w	80144e4 <icmp_input+0x1b4>
 8014376:	2b08      	cmp	r3, #8
 8014378:	f040 80b7 	bne.w	80144ea <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801437c:	4b69      	ldr	r3, [pc, #420]	; (8014524 <icmp_input+0x1f4>)
 801437e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014380:	4b67      	ldr	r3, [pc, #412]	; (8014520 <icmp_input+0x1f0>)
 8014382:	695b      	ldr	r3, [r3, #20]
 8014384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014388:	2be0      	cmp	r3, #224	; 0xe0
 801438a:	f000 80bb 	beq.w	8014504 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801438e:	4b64      	ldr	r3, [pc, #400]	; (8014520 <icmp_input+0x1f0>)
 8014390:	695b      	ldr	r3, [r3, #20]
 8014392:	4a63      	ldr	r2, [pc, #396]	; (8014520 <icmp_input+0x1f0>)
 8014394:	6812      	ldr	r2, [r2, #0]
 8014396:	4611      	mov	r1, r2
 8014398:	4618      	mov	r0, r3
 801439a:	f000 fbed 	bl	8014b78 <ip4_addr_isbroadcast_u32>
 801439e:	4603      	mov	r3, r0
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	f040 80b1 	bne.w	8014508 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	891b      	ldrh	r3, [r3, #8]
 80143aa:	2b07      	cmp	r3, #7
 80143ac:	f240 80a5 	bls.w	80144fa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80143b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143b2:	330e      	adds	r3, #14
 80143b4:	4619      	mov	r1, r3
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f7f8 fcb6 	bl	800cd28 <pbuf_add_header>
 80143bc:	4603      	mov	r3, r0
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d04b      	beq.n	801445a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	891a      	ldrh	r2, [r3, #8]
 80143c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143c8:	4413      	add	r3, r2
 80143ca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	891b      	ldrh	r3, [r3, #8]
 80143d0:	8b7a      	ldrh	r2, [r7, #26]
 80143d2:	429a      	cmp	r2, r3
 80143d4:	f0c0 809a 	bcc.w	801450c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80143d8:	8b7b      	ldrh	r3, [r7, #26]
 80143da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143de:	4619      	mov	r1, r3
 80143e0:	200e      	movs	r0, #14
 80143e2:	f7f8 fa53 	bl	800c88c <pbuf_alloc>
 80143e6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80143e8:	697b      	ldr	r3, [r7, #20]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	f000 8090 	beq.w	8014510 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	895b      	ldrh	r3, [r3, #10]
 80143f4:	461a      	mov	r2, r3
 80143f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143f8:	3308      	adds	r3, #8
 80143fa:	429a      	cmp	r2, r3
 80143fc:	d203      	bcs.n	8014406 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80143fe:	6978      	ldr	r0, [r7, #20]
 8014400:	f7f8 fd28 	bl	800ce54 <pbuf_free>
          goto icmperr;
 8014404:	e085      	b.n	8014512 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014406:	697b      	ldr	r3, [r7, #20]
 8014408:	685b      	ldr	r3, [r3, #4]
 801440a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801440c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801440e:	4618      	mov	r0, r3
 8014410:	f001 fea2 	bl	8016158 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014416:	4619      	mov	r1, r3
 8014418:	6978      	ldr	r0, [r7, #20]
 801441a:	f7f8 fc95 	bl	800cd48 <pbuf_remove_header>
 801441e:	4603      	mov	r3, r0
 8014420:	2b00      	cmp	r3, #0
 8014422:	d009      	beq.n	8014438 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014424:	4b40      	ldr	r3, [pc, #256]	; (8014528 <icmp_input+0x1f8>)
 8014426:	22b6      	movs	r2, #182	; 0xb6
 8014428:	4940      	ldr	r1, [pc, #256]	; (801452c <icmp_input+0x1fc>)
 801442a:	4841      	ldr	r0, [pc, #260]	; (8014530 <icmp_input+0x200>)
 801442c:	f001 feaa 	bl	8016184 <iprintf>
          pbuf_free(r);
 8014430:	6978      	ldr	r0, [r7, #20]
 8014432:	f7f8 fd0f 	bl	800ce54 <pbuf_free>
          goto icmperr;
 8014436:	e06c      	b.n	8014512 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014438:	6879      	ldr	r1, [r7, #4]
 801443a:	6978      	ldr	r0, [r7, #20]
 801443c:	f7f8 fe32 	bl	800d0a4 <pbuf_copy>
 8014440:	4603      	mov	r3, r0
 8014442:	2b00      	cmp	r3, #0
 8014444:	d003      	beq.n	801444e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014446:	6978      	ldr	r0, [r7, #20]
 8014448:	f7f8 fd04 	bl	800ce54 <pbuf_free>
          goto icmperr;
 801444c:	e061      	b.n	8014512 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801444e:	6878      	ldr	r0, [r7, #4]
 8014450:	f7f8 fd00 	bl	800ce54 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	607b      	str	r3, [r7, #4]
 8014458:	e00f      	b.n	801447a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801445a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801445c:	330e      	adds	r3, #14
 801445e:	4619      	mov	r1, r3
 8014460:	6878      	ldr	r0, [r7, #4]
 8014462:	f7f8 fc71 	bl	800cd48 <pbuf_remove_header>
 8014466:	4603      	mov	r3, r0
 8014468:	2b00      	cmp	r3, #0
 801446a:	d006      	beq.n	801447a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801446c:	4b2e      	ldr	r3, [pc, #184]	; (8014528 <icmp_input+0x1f8>)
 801446e:	22c7      	movs	r2, #199	; 0xc7
 8014470:	4930      	ldr	r1, [pc, #192]	; (8014534 <icmp_input+0x204>)
 8014472:	482f      	ldr	r0, [pc, #188]	; (8014530 <icmp_input+0x200>)
 8014474:	f001 fe86 	bl	8016184 <iprintf>
          goto icmperr;
 8014478:	e04b      	b.n	8014512 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	685b      	ldr	r3, [r3, #4]
 801447e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014482:	4619      	mov	r1, r3
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f7f8 fc4f 	bl	800cd28 <pbuf_add_header>
 801448a:	4603      	mov	r3, r0
 801448c:	2b00      	cmp	r3, #0
 801448e:	d12b      	bne.n	80144e8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	685b      	ldr	r3, [r3, #4]
 8014494:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	681a      	ldr	r2, [r3, #0]
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801449e:	4b20      	ldr	r3, [pc, #128]	; (8014520 <icmp_input+0x1f0>)
 80144a0:	691a      	ldr	r2, [r3, #16]
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	2200      	movs	r2, #0
 80144aa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	2200      	movs	r2, #0
 80144b0:	709a      	strb	r2, [r3, #2]
 80144b2:	2200      	movs	r2, #0
 80144b4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	22ff      	movs	r2, #255	; 0xff
 80144ba:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	2200      	movs	r2, #0
 80144c0:	729a      	strb	r2, [r3, #10]
 80144c2:	2200      	movs	r2, #0
 80144c4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	9302      	str	r3, [sp, #8]
 80144ca:	2301      	movs	r3, #1
 80144cc:	9301      	str	r3, [sp, #4]
 80144ce:	2300      	movs	r3, #0
 80144d0:	9300      	str	r3, [sp, #0]
 80144d2:	23ff      	movs	r3, #255	; 0xff
 80144d4:	2200      	movs	r2, #0
 80144d6:	69f9      	ldr	r1, [r7, #28]
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 fa75 	bl	80149c8 <ip4_output_if>
 80144de:	4603      	mov	r3, r0
 80144e0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80144e2:	e001      	b.n	80144e8 <icmp_input+0x1b8>
      break;
 80144e4:	bf00      	nop
 80144e6:	e000      	b.n	80144ea <icmp_input+0x1ba>
      break;
 80144e8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f7f8 fcb2 	bl	800ce54 <pbuf_free>
  return;
 80144f0:	e013      	b.n	801451a <icmp_input+0x1ea>
    goto lenerr;
 80144f2:	bf00      	nop
 80144f4:	e002      	b.n	80144fc <icmp_input+0x1cc>
    goto lenerr;
 80144f6:	bf00      	nop
 80144f8:	e000      	b.n	80144fc <icmp_input+0x1cc>
        goto lenerr;
 80144fa:	bf00      	nop
lenerr:
  pbuf_free(p);
 80144fc:	6878      	ldr	r0, [r7, #4]
 80144fe:	f7f8 fca9 	bl	800ce54 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014502:	e00a      	b.n	801451a <icmp_input+0x1ea>
        goto icmperr;
 8014504:	bf00      	nop
 8014506:	e004      	b.n	8014512 <icmp_input+0x1e2>
        goto icmperr;
 8014508:	bf00      	nop
 801450a:	e002      	b.n	8014512 <icmp_input+0x1e2>
          goto icmperr;
 801450c:	bf00      	nop
 801450e:	e000      	b.n	8014512 <icmp_input+0x1e2>
          goto icmperr;
 8014510:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f7f8 fc9e 	bl	800ce54 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014518:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801451a:	3728      	adds	r7, #40	; 0x28
 801451c:	46bd      	mov	sp, r7
 801451e:	bd80      	pop	{r7, pc}
 8014520:	200059b0 	.word	0x200059b0
 8014524:	200059c4 	.word	0x200059c4
 8014528:	080197d0 	.word	0x080197d0
 801452c:	08019808 	.word	0x08019808
 8014530:	08019840 	.word	0x08019840
 8014534:	08019868 	.word	0x08019868

08014538 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014538:	b580      	push	{r7, lr}
 801453a:	b082      	sub	sp, #8
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	460b      	mov	r3, r1
 8014542:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014544:	78fb      	ldrb	r3, [r7, #3]
 8014546:	461a      	mov	r2, r3
 8014548:	2103      	movs	r1, #3
 801454a:	6878      	ldr	r0, [r7, #4]
 801454c:	f000 f814 	bl	8014578 <icmp_send_response>
}
 8014550:	bf00      	nop
 8014552:	3708      	adds	r7, #8
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}

08014558 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014558:	b580      	push	{r7, lr}
 801455a:	b082      	sub	sp, #8
 801455c:	af00      	add	r7, sp, #0
 801455e:	6078      	str	r0, [r7, #4]
 8014560:	460b      	mov	r3, r1
 8014562:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014564:	78fb      	ldrb	r3, [r7, #3]
 8014566:	461a      	mov	r2, r3
 8014568:	210b      	movs	r1, #11
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f000 f804 	bl	8014578 <icmp_send_response>
}
 8014570:	bf00      	nop
 8014572:	3708      	adds	r7, #8
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b08c      	sub	sp, #48	; 0x30
 801457c:	af04      	add	r7, sp, #16
 801457e:	6078      	str	r0, [r7, #4]
 8014580:	460b      	mov	r3, r1
 8014582:	70fb      	strb	r3, [r7, #3]
 8014584:	4613      	mov	r3, r2
 8014586:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014588:	f44f 7220 	mov.w	r2, #640	; 0x280
 801458c:	2124      	movs	r1, #36	; 0x24
 801458e:	2022      	movs	r0, #34	; 0x22
 8014590:	f7f8 f97c 	bl	800c88c <pbuf_alloc>
 8014594:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014596:	69fb      	ldr	r3, [r7, #28]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d04c      	beq.n	8014636 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801459c:	69fb      	ldr	r3, [r7, #28]
 801459e:	895b      	ldrh	r3, [r3, #10]
 80145a0:	2b23      	cmp	r3, #35	; 0x23
 80145a2:	d806      	bhi.n	80145b2 <icmp_send_response+0x3a>
 80145a4:	4b26      	ldr	r3, [pc, #152]	; (8014640 <icmp_send_response+0xc8>)
 80145a6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80145aa:	4926      	ldr	r1, [pc, #152]	; (8014644 <icmp_send_response+0xcc>)
 80145ac:	4826      	ldr	r0, [pc, #152]	; (8014648 <icmp_send_response+0xd0>)
 80145ae:	f001 fde9 	bl	8016184 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80145b8:	69fb      	ldr	r3, [r7, #28]
 80145ba:	685b      	ldr	r3, [r3, #4]
 80145bc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	78fa      	ldrb	r2, [r7, #3]
 80145c2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	78ba      	ldrb	r2, [r7, #2]
 80145c8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	2200      	movs	r2, #0
 80145ce:	711a      	strb	r2, [r3, #4]
 80145d0:	2200      	movs	r2, #0
 80145d2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80145d4:	697b      	ldr	r3, [r7, #20]
 80145d6:	2200      	movs	r2, #0
 80145d8:	719a      	strb	r2, [r3, #6]
 80145da:	2200      	movs	r2, #0
 80145dc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80145de:	69fb      	ldr	r3, [r7, #28]
 80145e0:	685b      	ldr	r3, [r3, #4]
 80145e2:	f103 0008 	add.w	r0, r3, #8
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	685b      	ldr	r3, [r3, #4]
 80145ea:	221c      	movs	r2, #28
 80145ec:	4619      	mov	r1, r3
 80145ee:	f001 fdb3 	bl	8016158 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	68db      	ldr	r3, [r3, #12]
 80145f6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80145f8:	f107 030c 	add.w	r3, r7, #12
 80145fc:	4618      	mov	r0, r3
 80145fe:	f000 f825 	bl	801464c <ip4_route>
 8014602:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014604:	693b      	ldr	r3, [r7, #16]
 8014606:	2b00      	cmp	r3, #0
 8014608:	d011      	beq.n	801462e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	2200      	movs	r2, #0
 801460e:	709a      	strb	r2, [r3, #2]
 8014610:	2200      	movs	r2, #0
 8014612:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014614:	f107 020c 	add.w	r2, r7, #12
 8014618:	693b      	ldr	r3, [r7, #16]
 801461a:	9302      	str	r3, [sp, #8]
 801461c:	2301      	movs	r3, #1
 801461e:	9301      	str	r3, [sp, #4]
 8014620:	2300      	movs	r3, #0
 8014622:	9300      	str	r3, [sp, #0]
 8014624:	23ff      	movs	r3, #255	; 0xff
 8014626:	2100      	movs	r1, #0
 8014628:	69f8      	ldr	r0, [r7, #28]
 801462a:	f000 f9cd 	bl	80149c8 <ip4_output_if>
  }
  pbuf_free(q);
 801462e:	69f8      	ldr	r0, [r7, #28]
 8014630:	f7f8 fc10 	bl	800ce54 <pbuf_free>
 8014634:	e000      	b.n	8014638 <icmp_send_response+0xc0>
    return;
 8014636:	bf00      	nop
}
 8014638:	3720      	adds	r7, #32
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}
 801463e:	bf00      	nop
 8014640:	080197d0 	.word	0x080197d0
 8014644:	0801989c 	.word	0x0801989c
 8014648:	08019840 	.word	0x08019840

0801464c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801464c:	b480      	push	{r7}
 801464e:	b085      	sub	sp, #20
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014654:	4b33      	ldr	r3, [pc, #204]	; (8014724 <ip4_route+0xd8>)
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	60fb      	str	r3, [r7, #12]
 801465a:	e036      	b.n	80146ca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014662:	f003 0301 	and.w	r3, r3, #1
 8014666:	b2db      	uxtb	r3, r3
 8014668:	2b00      	cmp	r3, #0
 801466a:	d02b      	beq.n	80146c4 <ip4_route+0x78>
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014672:	089b      	lsrs	r3, r3, #2
 8014674:	f003 0301 	and.w	r3, r3, #1
 8014678:	b2db      	uxtb	r3, r3
 801467a:	2b00      	cmp	r3, #0
 801467c:	d022      	beq.n	80146c4 <ip4_route+0x78>
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	3304      	adds	r3, #4
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d01d      	beq.n	80146c4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	681a      	ldr	r2, [r3, #0]
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	3304      	adds	r3, #4
 8014690:	681b      	ldr	r3, [r3, #0]
 8014692:	405a      	eors	r2, r3
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	3308      	adds	r3, #8
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	4013      	ands	r3, r2
 801469c:	2b00      	cmp	r3, #0
 801469e:	d101      	bne.n	80146a4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	e038      	b.n	8014716 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80146aa:	f003 0302 	and.w	r3, r3, #2
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d108      	bne.n	80146c4 <ip4_route+0x78>
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681a      	ldr	r2, [r3, #0]
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	330c      	adds	r3, #12
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d101      	bne.n	80146c4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	e028      	b.n	8014716 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	60fb      	str	r3, [r7, #12]
 80146ca:	68fb      	ldr	r3, [r7, #12]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d1c5      	bne.n	801465c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80146d0:	4b15      	ldr	r3, [pc, #84]	; (8014728 <ip4_route+0xdc>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d01a      	beq.n	801470e <ip4_route+0xc2>
 80146d8:	4b13      	ldr	r3, [pc, #76]	; (8014728 <ip4_route+0xdc>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80146e0:	f003 0301 	and.w	r3, r3, #1
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d012      	beq.n	801470e <ip4_route+0xc2>
 80146e8:	4b0f      	ldr	r3, [pc, #60]	; (8014728 <ip4_route+0xdc>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80146f0:	f003 0304 	and.w	r3, r3, #4
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d00a      	beq.n	801470e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80146f8:	4b0b      	ldr	r3, [pc, #44]	; (8014728 <ip4_route+0xdc>)
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	3304      	adds	r3, #4
 80146fe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014700:	2b00      	cmp	r3, #0
 8014702:	d004      	beq.n	801470e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	b2db      	uxtb	r3, r3
 801470a:	2b7f      	cmp	r3, #127	; 0x7f
 801470c:	d101      	bne.n	8014712 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801470e:	2300      	movs	r3, #0
 8014710:	e001      	b.n	8014716 <ip4_route+0xca>
  }

  return netif_default;
 8014712:	4b05      	ldr	r3, [pc, #20]	; (8014728 <ip4_route+0xdc>)
 8014714:	681b      	ldr	r3, [r3, #0]
}
 8014716:	4618      	mov	r0, r3
 8014718:	3714      	adds	r7, #20
 801471a:	46bd      	mov	sp, r7
 801471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014720:	4770      	bx	lr
 8014722:	bf00      	nop
 8014724:	20008f14 	.word	0x20008f14
 8014728:	20008f18 	.word	0x20008f18

0801472c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b082      	sub	sp, #8
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801473a:	f003 0301 	and.w	r3, r3, #1
 801473e:	b2db      	uxtb	r3, r3
 8014740:	2b00      	cmp	r3, #0
 8014742:	d016      	beq.n	8014772 <ip4_input_accept+0x46>
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	3304      	adds	r3, #4
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d011      	beq.n	8014772 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801474e:	4b0b      	ldr	r3, [pc, #44]	; (801477c <ip4_input_accept+0x50>)
 8014750:	695a      	ldr	r2, [r3, #20]
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	3304      	adds	r3, #4
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	429a      	cmp	r2, r3
 801475a:	d008      	beq.n	801476e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801475c:	4b07      	ldr	r3, [pc, #28]	; (801477c <ip4_input_accept+0x50>)
 801475e:	695b      	ldr	r3, [r3, #20]
 8014760:	6879      	ldr	r1, [r7, #4]
 8014762:	4618      	mov	r0, r3
 8014764:	f000 fa08 	bl	8014b78 <ip4_addr_isbroadcast_u32>
 8014768:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801476a:	2b00      	cmp	r3, #0
 801476c:	d001      	beq.n	8014772 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801476e:	2301      	movs	r3, #1
 8014770:	e000      	b.n	8014774 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014772:	2300      	movs	r3, #0
}
 8014774:	4618      	mov	r0, r3
 8014776:	3708      	adds	r7, #8
 8014778:	46bd      	mov	sp, r7
 801477a:	bd80      	pop	{r7, pc}
 801477c:	200059b0 	.word	0x200059b0

08014780 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b086      	sub	sp, #24
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	685b      	ldr	r3, [r3, #4]
 801478e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	091b      	lsrs	r3, r3, #4
 8014796:	b2db      	uxtb	r3, r3
 8014798:	2b04      	cmp	r3, #4
 801479a:	d004      	beq.n	80147a6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801479c:	6878      	ldr	r0, [r7, #4]
 801479e:	f7f8 fb59 	bl	800ce54 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80147a2:	2300      	movs	r3, #0
 80147a4:	e107      	b.n	80149b6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80147a6:	697b      	ldr	r3, [r7, #20]
 80147a8:	781b      	ldrb	r3, [r3, #0]
 80147aa:	f003 030f 	and.w	r3, r3, #15
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	009b      	lsls	r3, r3, #2
 80147b2:	b2db      	uxtb	r3, r3
 80147b4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80147b6:	697b      	ldr	r3, [r7, #20]
 80147b8:	885b      	ldrh	r3, [r3, #2]
 80147ba:	b29b      	uxth	r3, r3
 80147bc:	4618      	mov	r0, r3
 80147be:	f7f6 ffeb 	bl	800b798 <lwip_htons>
 80147c2:	4603      	mov	r3, r0
 80147c4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	891b      	ldrh	r3, [r3, #8]
 80147ca:	89ba      	ldrh	r2, [r7, #12]
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d204      	bcs.n	80147da <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80147d0:	89bb      	ldrh	r3, [r7, #12]
 80147d2:	4619      	mov	r1, r3
 80147d4:	6878      	ldr	r0, [r7, #4]
 80147d6:	f7f8 f9b7 	bl	800cb48 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	895b      	ldrh	r3, [r3, #10]
 80147de:	89fa      	ldrh	r2, [r7, #14]
 80147e0:	429a      	cmp	r2, r3
 80147e2:	d807      	bhi.n	80147f4 <ip4_input+0x74>
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	891b      	ldrh	r3, [r3, #8]
 80147e8:	89ba      	ldrh	r2, [r7, #12]
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d802      	bhi.n	80147f4 <ip4_input+0x74>
 80147ee:	89fb      	ldrh	r3, [r7, #14]
 80147f0:	2b13      	cmp	r3, #19
 80147f2:	d804      	bhi.n	80147fe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80147f4:	6878      	ldr	r0, [r7, #4]
 80147f6:	f7f8 fb2d 	bl	800ce54 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80147fa:	2300      	movs	r3, #0
 80147fc:	e0db      	b.n	80149b6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	691b      	ldr	r3, [r3, #16]
 8014802:	4a6f      	ldr	r2, [pc, #444]	; (80149c0 <ip4_input+0x240>)
 8014804:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014806:	697b      	ldr	r3, [r7, #20]
 8014808:	68db      	ldr	r3, [r3, #12]
 801480a:	4a6d      	ldr	r2, [pc, #436]	; (80149c0 <ip4_input+0x240>)
 801480c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801480e:	4b6c      	ldr	r3, [pc, #432]	; (80149c0 <ip4_input+0x240>)
 8014810:	695b      	ldr	r3, [r3, #20]
 8014812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014816:	2be0      	cmp	r3, #224	; 0xe0
 8014818:	d112      	bne.n	8014840 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801481a:	683b      	ldr	r3, [r7, #0]
 801481c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014820:	f003 0301 	and.w	r3, r3, #1
 8014824:	b2db      	uxtb	r3, r3
 8014826:	2b00      	cmp	r3, #0
 8014828:	d007      	beq.n	801483a <ip4_input+0xba>
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	3304      	adds	r3, #4
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d002      	beq.n	801483a <ip4_input+0xba>
      netif = inp;
 8014834:	683b      	ldr	r3, [r7, #0]
 8014836:	613b      	str	r3, [r7, #16]
 8014838:	e02a      	b.n	8014890 <ip4_input+0x110>
    } else {
      netif = NULL;
 801483a:	2300      	movs	r3, #0
 801483c:	613b      	str	r3, [r7, #16]
 801483e:	e027      	b.n	8014890 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014840:	6838      	ldr	r0, [r7, #0]
 8014842:	f7ff ff73 	bl	801472c <ip4_input_accept>
 8014846:	4603      	mov	r3, r0
 8014848:	2b00      	cmp	r3, #0
 801484a:	d002      	beq.n	8014852 <ip4_input+0xd2>
      netif = inp;
 801484c:	683b      	ldr	r3, [r7, #0]
 801484e:	613b      	str	r3, [r7, #16]
 8014850:	e01e      	b.n	8014890 <ip4_input+0x110>
    } else {
      netif = NULL;
 8014852:	2300      	movs	r3, #0
 8014854:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014856:	4b5a      	ldr	r3, [pc, #360]	; (80149c0 <ip4_input+0x240>)
 8014858:	695b      	ldr	r3, [r3, #20]
 801485a:	b2db      	uxtb	r3, r3
 801485c:	2b7f      	cmp	r3, #127	; 0x7f
 801485e:	d017      	beq.n	8014890 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014860:	4b58      	ldr	r3, [pc, #352]	; (80149c4 <ip4_input+0x244>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	613b      	str	r3, [r7, #16]
 8014866:	e00e      	b.n	8014886 <ip4_input+0x106>
          if (netif == inp) {
 8014868:	693a      	ldr	r2, [r7, #16]
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	429a      	cmp	r2, r3
 801486e:	d006      	beq.n	801487e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014870:	6938      	ldr	r0, [r7, #16]
 8014872:	f7ff ff5b 	bl	801472c <ip4_input_accept>
 8014876:	4603      	mov	r3, r0
 8014878:	2b00      	cmp	r3, #0
 801487a:	d108      	bne.n	801488e <ip4_input+0x10e>
 801487c:	e000      	b.n	8014880 <ip4_input+0x100>
            continue;
 801487e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014880:	693b      	ldr	r3, [r7, #16]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	613b      	str	r3, [r7, #16]
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d1ed      	bne.n	8014868 <ip4_input+0xe8>
 801488c:	e000      	b.n	8014890 <ip4_input+0x110>
            break;
 801488e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014890:	4b4b      	ldr	r3, [pc, #300]	; (80149c0 <ip4_input+0x240>)
 8014892:	691b      	ldr	r3, [r3, #16]
 8014894:	6839      	ldr	r1, [r7, #0]
 8014896:	4618      	mov	r0, r3
 8014898:	f000 f96e 	bl	8014b78 <ip4_addr_isbroadcast_u32>
 801489c:	4603      	mov	r3, r0
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d105      	bne.n	80148ae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80148a2:	4b47      	ldr	r3, [pc, #284]	; (80149c0 <ip4_input+0x240>)
 80148a4:	691b      	ldr	r3, [r3, #16]
 80148a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80148aa:	2be0      	cmp	r3, #224	; 0xe0
 80148ac:	d104      	bne.n	80148b8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f7f8 fad0 	bl	800ce54 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80148b4:	2300      	movs	r3, #0
 80148b6:	e07e      	b.n	80149b6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80148b8:	693b      	ldr	r3, [r7, #16]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d104      	bne.n	80148c8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f7f8 fac8 	bl	800ce54 <pbuf_free>
    return ERR_OK;
 80148c4:	2300      	movs	r3, #0
 80148c6:	e076      	b.n	80149b6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80148c8:	697b      	ldr	r3, [r7, #20]
 80148ca:	88db      	ldrh	r3, [r3, #6]
 80148cc:	b29b      	uxth	r3, r3
 80148ce:	461a      	mov	r2, r3
 80148d0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80148d4:	4013      	ands	r3, r2
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d00b      	beq.n	80148f2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80148da:	6878      	ldr	r0, [r7, #4]
 80148dc:	f000 fc92 	bl	8015204 <ip4_reass>
 80148e0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d101      	bne.n	80148ec <ip4_input+0x16c>
      return ERR_OK;
 80148e8:	2300      	movs	r3, #0
 80148ea:	e064      	b.n	80149b6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	685b      	ldr	r3, [r3, #4]
 80148f0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80148f2:	4a33      	ldr	r2, [pc, #204]	; (80149c0 <ip4_input+0x240>)
 80148f4:	693b      	ldr	r3, [r7, #16]
 80148f6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80148f8:	4a31      	ldr	r2, [pc, #196]	; (80149c0 <ip4_input+0x240>)
 80148fa:	683b      	ldr	r3, [r7, #0]
 80148fc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80148fe:	4a30      	ldr	r2, [pc, #192]	; (80149c0 <ip4_input+0x240>)
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014904:	697b      	ldr	r3, [r7, #20]
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	f003 030f 	and.w	r3, r3, #15
 801490c:	b2db      	uxtb	r3, r3
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	b2db      	uxtb	r3, r3
 8014912:	b29a      	uxth	r2, r3
 8014914:	4b2a      	ldr	r3, [pc, #168]	; (80149c0 <ip4_input+0x240>)
 8014916:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014918:	89fb      	ldrh	r3, [r7, #14]
 801491a:	4619      	mov	r1, r3
 801491c:	6878      	ldr	r0, [r7, #4]
 801491e:	f7f8 fa13 	bl	800cd48 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014922:	697b      	ldr	r3, [r7, #20]
 8014924:	7a5b      	ldrb	r3, [r3, #9]
 8014926:	2b11      	cmp	r3, #17
 8014928:	d006      	beq.n	8014938 <ip4_input+0x1b8>
 801492a:	2b11      	cmp	r3, #17
 801492c:	dc13      	bgt.n	8014956 <ip4_input+0x1d6>
 801492e:	2b01      	cmp	r3, #1
 8014930:	d00c      	beq.n	801494c <ip4_input+0x1cc>
 8014932:	2b06      	cmp	r3, #6
 8014934:	d005      	beq.n	8014942 <ip4_input+0x1c2>
 8014936:	e00e      	b.n	8014956 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014938:	6839      	ldr	r1, [r7, #0]
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f7fe f90e 	bl	8012b5c <udp_input>
        break;
 8014940:	e026      	b.n	8014990 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014942:	6839      	ldr	r1, [r7, #0]
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f7fa f94f 	bl	800ebe8 <tcp_input>
        break;
 801494a:	e021      	b.n	8014990 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801494c:	6839      	ldr	r1, [r7, #0]
 801494e:	6878      	ldr	r0, [r7, #4]
 8014950:	f7ff fcee 	bl	8014330 <icmp_input>
        break;
 8014954:	e01c      	b.n	8014990 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014956:	4b1a      	ldr	r3, [pc, #104]	; (80149c0 <ip4_input+0x240>)
 8014958:	695b      	ldr	r3, [r3, #20]
 801495a:	6939      	ldr	r1, [r7, #16]
 801495c:	4618      	mov	r0, r3
 801495e:	f000 f90b 	bl	8014b78 <ip4_addr_isbroadcast_u32>
 8014962:	4603      	mov	r3, r0
 8014964:	2b00      	cmp	r3, #0
 8014966:	d10f      	bne.n	8014988 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014968:	4b15      	ldr	r3, [pc, #84]	; (80149c0 <ip4_input+0x240>)
 801496a:	695b      	ldr	r3, [r3, #20]
 801496c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014970:	2be0      	cmp	r3, #224	; 0xe0
 8014972:	d009      	beq.n	8014988 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014974:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014978:	4619      	mov	r1, r3
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f7f8 fa57 	bl	800ce2e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014980:	2102      	movs	r1, #2
 8014982:	6878      	ldr	r0, [r7, #4]
 8014984:	f7ff fdd8 	bl	8014538 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014988:	6878      	ldr	r0, [r7, #4]
 801498a:	f7f8 fa63 	bl	800ce54 <pbuf_free>
        break;
 801498e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014990:	4b0b      	ldr	r3, [pc, #44]	; (80149c0 <ip4_input+0x240>)
 8014992:	2200      	movs	r2, #0
 8014994:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014996:	4b0a      	ldr	r3, [pc, #40]	; (80149c0 <ip4_input+0x240>)
 8014998:	2200      	movs	r2, #0
 801499a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801499c:	4b08      	ldr	r3, [pc, #32]	; (80149c0 <ip4_input+0x240>)
 801499e:	2200      	movs	r2, #0
 80149a0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80149a2:	4b07      	ldr	r3, [pc, #28]	; (80149c0 <ip4_input+0x240>)
 80149a4:	2200      	movs	r2, #0
 80149a6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80149a8:	4b05      	ldr	r3, [pc, #20]	; (80149c0 <ip4_input+0x240>)
 80149aa:	2200      	movs	r2, #0
 80149ac:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80149ae:	4b04      	ldr	r3, [pc, #16]	; (80149c0 <ip4_input+0x240>)
 80149b0:	2200      	movs	r2, #0
 80149b2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80149b4:	2300      	movs	r3, #0
}
 80149b6:	4618      	mov	r0, r3
 80149b8:	3718      	adds	r7, #24
 80149ba:	46bd      	mov	sp, r7
 80149bc:	bd80      	pop	{r7, pc}
 80149be:	bf00      	nop
 80149c0:	200059b0 	.word	0x200059b0
 80149c4:	20008f14 	.word	0x20008f14

080149c8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b08a      	sub	sp, #40	; 0x28
 80149cc:	af04      	add	r7, sp, #16
 80149ce:	60f8      	str	r0, [r7, #12]
 80149d0:	60b9      	str	r1, [r7, #8]
 80149d2:	607a      	str	r2, [r7, #4]
 80149d4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80149d6:	68bb      	ldr	r3, [r7, #8]
 80149d8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d009      	beq.n	80149f4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d003      	beq.n	80149ee <ip4_output_if+0x26>
 80149e6:	68bb      	ldr	r3, [r7, #8]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d102      	bne.n	80149f4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80149ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f0:	3304      	adds	r3, #4
 80149f2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80149f4:	78fa      	ldrb	r2, [r7, #3]
 80149f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f8:	9302      	str	r3, [sp, #8]
 80149fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80149fe:	9301      	str	r3, [sp, #4]
 8014a00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014a04:	9300      	str	r3, [sp, #0]
 8014a06:	4613      	mov	r3, r2
 8014a08:	687a      	ldr	r2, [r7, #4]
 8014a0a:	6979      	ldr	r1, [r7, #20]
 8014a0c:	68f8      	ldr	r0, [r7, #12]
 8014a0e:	f000 f805 	bl	8014a1c <ip4_output_if_src>
 8014a12:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014a14:	4618      	mov	r0, r3
 8014a16:	3718      	adds	r7, #24
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b088      	sub	sp, #32
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	60f8      	str	r0, [r7, #12]
 8014a24:	60b9      	str	r1, [r7, #8]
 8014a26:	607a      	str	r2, [r7, #4]
 8014a28:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014a2a:	68fb      	ldr	r3, [r7, #12]
 8014a2c:	7b9b      	ldrb	r3, [r3, #14]
 8014a2e:	2b01      	cmp	r3, #1
 8014a30:	d006      	beq.n	8014a40 <ip4_output_if_src+0x24>
 8014a32:	4b4b      	ldr	r3, [pc, #300]	; (8014b60 <ip4_output_if_src+0x144>)
 8014a34:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014a38:	494a      	ldr	r1, [pc, #296]	; (8014b64 <ip4_output_if_src+0x148>)
 8014a3a:	484b      	ldr	r0, [pc, #300]	; (8014b68 <ip4_output_if_src+0x14c>)
 8014a3c:	f001 fba2 	bl	8016184 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d060      	beq.n	8014b08 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014a46:	2314      	movs	r3, #20
 8014a48:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014a4a:	2114      	movs	r1, #20
 8014a4c:	68f8      	ldr	r0, [r7, #12]
 8014a4e:	f7f8 f96b 	bl	800cd28 <pbuf_add_header>
 8014a52:	4603      	mov	r3, r0
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d002      	beq.n	8014a5e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014a58:	f06f 0301 	mvn.w	r3, #1
 8014a5c:	e07c      	b.n	8014b58 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	685b      	ldr	r3, [r3, #4]
 8014a62:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	895b      	ldrh	r3, [r3, #10]
 8014a68:	2b13      	cmp	r3, #19
 8014a6a:	d806      	bhi.n	8014a7a <ip4_output_if_src+0x5e>
 8014a6c:	4b3c      	ldr	r3, [pc, #240]	; (8014b60 <ip4_output_if_src+0x144>)
 8014a6e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014a72:	493e      	ldr	r1, [pc, #248]	; (8014b6c <ip4_output_if_src+0x150>)
 8014a74:	483c      	ldr	r0, [pc, #240]	; (8014b68 <ip4_output_if_src+0x14c>)
 8014a76:	f001 fb85 	bl	8016184 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014a7a:	69fb      	ldr	r3, [r7, #28]
 8014a7c:	78fa      	ldrb	r2, [r7, #3]
 8014a7e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014a80:	69fb      	ldr	r3, [r7, #28]
 8014a82:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014a86:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	681a      	ldr	r2, [r3, #0]
 8014a8c:	69fb      	ldr	r3, [r7, #28]
 8014a8e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014a90:	8b7b      	ldrh	r3, [r7, #26]
 8014a92:	089b      	lsrs	r3, r3, #2
 8014a94:	b29b      	uxth	r3, r3
 8014a96:	b2db      	uxtb	r3, r3
 8014a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a9c:	b2da      	uxtb	r2, r3
 8014a9e:	69fb      	ldr	r3, [r7, #28]
 8014aa0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014aa2:	69fb      	ldr	r3, [r7, #28]
 8014aa4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014aa8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	891b      	ldrh	r3, [r3, #8]
 8014aae:	4618      	mov	r0, r3
 8014ab0:	f7f6 fe72 	bl	800b798 <lwip_htons>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	69fb      	ldr	r3, [r7, #28]
 8014aba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014abc:	69fb      	ldr	r3, [r7, #28]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	719a      	strb	r2, [r3, #6]
 8014ac2:	2200      	movs	r2, #0
 8014ac4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014ac6:	4b2a      	ldr	r3, [pc, #168]	; (8014b70 <ip4_output_if_src+0x154>)
 8014ac8:	881b      	ldrh	r3, [r3, #0]
 8014aca:	4618      	mov	r0, r3
 8014acc:	f7f6 fe64 	bl	800b798 <lwip_htons>
 8014ad0:	4603      	mov	r3, r0
 8014ad2:	461a      	mov	r2, r3
 8014ad4:	69fb      	ldr	r3, [r7, #28]
 8014ad6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014ad8:	4b25      	ldr	r3, [pc, #148]	; (8014b70 <ip4_output_if_src+0x154>)
 8014ada:	881b      	ldrh	r3, [r3, #0]
 8014adc:	3301      	adds	r3, #1
 8014ade:	b29a      	uxth	r2, r3
 8014ae0:	4b23      	ldr	r3, [pc, #140]	; (8014b70 <ip4_output_if_src+0x154>)
 8014ae2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d104      	bne.n	8014af4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014aea:	4b22      	ldr	r3, [pc, #136]	; (8014b74 <ip4_output_if_src+0x158>)
 8014aec:	681a      	ldr	r2, [r3, #0]
 8014aee:	69fb      	ldr	r3, [r7, #28]
 8014af0:	60da      	str	r2, [r3, #12]
 8014af2:	e003      	b.n	8014afc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014af4:	68bb      	ldr	r3, [r7, #8]
 8014af6:	681a      	ldr	r2, [r3, #0]
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014afc:	69fb      	ldr	r3, [r7, #28]
 8014afe:	2200      	movs	r2, #0
 8014b00:	729a      	strb	r2, [r3, #10]
 8014b02:	2200      	movs	r2, #0
 8014b04:	72da      	strb	r2, [r3, #11]
 8014b06:	e00f      	b.n	8014b28 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	895b      	ldrh	r3, [r3, #10]
 8014b0c:	2b13      	cmp	r3, #19
 8014b0e:	d802      	bhi.n	8014b16 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014b10:	f06f 0301 	mvn.w	r3, #1
 8014b14:	e020      	b.n	8014b58 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	685b      	ldr	r3, [r3, #4]
 8014b1a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014b1c:	69fb      	ldr	r3, [r7, #28]
 8014b1e:	691b      	ldr	r3, [r3, #16]
 8014b20:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014b22:	f107 0314 	add.w	r3, r7, #20
 8014b26:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d00c      	beq.n	8014b4a <ip4_output_if_src+0x12e>
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	891a      	ldrh	r2, [r3, #8]
 8014b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014b38:	429a      	cmp	r2, r3
 8014b3a:	d906      	bls.n	8014b4a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014b3c:	687a      	ldr	r2, [r7, #4]
 8014b3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014b40:	68f8      	ldr	r0, [r7, #12]
 8014b42:	f000 fd53 	bl	80155ec <ip4_frag>
 8014b46:	4603      	mov	r3, r0
 8014b48:	e006      	b.n	8014b58 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b4c:	695b      	ldr	r3, [r3, #20]
 8014b4e:	687a      	ldr	r2, [r7, #4]
 8014b50:	68f9      	ldr	r1, [r7, #12]
 8014b52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b54:	4798      	blx	r3
 8014b56:	4603      	mov	r3, r0
}
 8014b58:	4618      	mov	r0, r3
 8014b5a:	3720      	adds	r7, #32
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}
 8014b60:	080198c8 	.word	0x080198c8
 8014b64:	080198fc 	.word	0x080198fc
 8014b68:	08019908 	.word	0x08019908
 8014b6c:	08019930 	.word	0x08019930
 8014b70:	20009072 	.word	0x20009072
 8014b74:	08019d3c 	.word	0x08019d3c

08014b78 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014b78:	b480      	push	{r7}
 8014b7a:	b085      	sub	sp, #20
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
 8014b80:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b8c:	d002      	beq.n	8014b94 <ip4_addr_isbroadcast_u32+0x1c>
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d101      	bne.n	8014b98 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014b94:	2301      	movs	r3, #1
 8014b96:	e02a      	b.n	8014bee <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014b9e:	f003 0302 	and.w	r3, r3, #2
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d101      	bne.n	8014baa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	e021      	b.n	8014bee <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	3304      	adds	r3, #4
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	687a      	ldr	r2, [r7, #4]
 8014bb2:	429a      	cmp	r2, r3
 8014bb4:	d101      	bne.n	8014bba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	e019      	b.n	8014bee <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014bba:	68fa      	ldr	r2, [r7, #12]
 8014bbc:	683b      	ldr	r3, [r7, #0]
 8014bbe:	3304      	adds	r3, #4
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	405a      	eors	r2, r3
 8014bc4:	683b      	ldr	r3, [r7, #0]
 8014bc6:	3308      	adds	r3, #8
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	4013      	ands	r3, r2
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d10d      	bne.n	8014bec <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014bd0:	683b      	ldr	r3, [r7, #0]
 8014bd2:	3308      	adds	r3, #8
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	43da      	mvns	r2, r3
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	3308      	adds	r3, #8
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014be4:	429a      	cmp	r2, r3
 8014be6:	d101      	bne.n	8014bec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014be8:	2301      	movs	r3, #1
 8014bea:	e000      	b.n	8014bee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014bec:	2300      	movs	r3, #0
  }
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3714      	adds	r7, #20
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf8:	4770      	bx	lr
	...

08014bfc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b084      	sub	sp, #16
 8014c00:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014c02:	2300      	movs	r3, #0
 8014c04:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014c06:	4b12      	ldr	r3, [pc, #72]	; (8014c50 <ip_reass_tmr+0x54>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014c0c:	e018      	b.n	8014c40 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	7fdb      	ldrb	r3, [r3, #31]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d00b      	beq.n	8014c2e <ip_reass_tmr+0x32>
      r->timer--;
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	7fdb      	ldrb	r3, [r3, #31]
 8014c1a:	3b01      	subs	r3, #1
 8014c1c:	b2da      	uxtb	r2, r3
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	60fb      	str	r3, [r7, #12]
 8014c2c:	e008      	b.n	8014c40 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014c38:	68b9      	ldr	r1, [r7, #8]
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	f000 f80a 	bl	8014c54 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d1e3      	bne.n	8014c0e <ip_reass_tmr+0x12>
    }
  }
}
 8014c46:	bf00      	nop
 8014c48:	bf00      	nop
 8014c4a:	3710      	adds	r7, #16
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}
 8014c50:	20009074 	.word	0x20009074

08014c54 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b088      	sub	sp, #32
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014c62:	683a      	ldr	r2, [r7, #0]
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d105      	bne.n	8014c76 <ip_reass_free_complete_datagram+0x22>
 8014c6a:	4b45      	ldr	r3, [pc, #276]	; (8014d80 <ip_reass_free_complete_datagram+0x12c>)
 8014c6c:	22ab      	movs	r2, #171	; 0xab
 8014c6e:	4945      	ldr	r1, [pc, #276]	; (8014d84 <ip_reass_free_complete_datagram+0x130>)
 8014c70:	4845      	ldr	r0, [pc, #276]	; (8014d88 <ip_reass_free_complete_datagram+0x134>)
 8014c72:	f001 fa87 	bl	8016184 <iprintf>
  if (prev != NULL) {
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d00a      	beq.n	8014c92 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	687a      	ldr	r2, [r7, #4]
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d005      	beq.n	8014c92 <ip_reass_free_complete_datagram+0x3e>
 8014c86:	4b3e      	ldr	r3, [pc, #248]	; (8014d80 <ip_reass_free_complete_datagram+0x12c>)
 8014c88:	22ad      	movs	r2, #173	; 0xad
 8014c8a:	4940      	ldr	r1, [pc, #256]	; (8014d8c <ip_reass_free_complete_datagram+0x138>)
 8014c8c:	483e      	ldr	r0, [pc, #248]	; (8014d88 <ip_reass_free_complete_datagram+0x134>)
 8014c8e:	f001 fa79 	bl	8016184 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	685b      	ldr	r3, [r3, #4]
 8014c96:	685b      	ldr	r3, [r3, #4]
 8014c98:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014c9a:	697b      	ldr	r3, [r7, #20]
 8014c9c:	889b      	ldrh	r3, [r3, #4]
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d12a      	bne.n	8014cfa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	685b      	ldr	r3, [r3, #4]
 8014ca8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014caa:	697b      	ldr	r3, [r7, #20]
 8014cac:	681a      	ldr	r2, [r3, #0]
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014cb2:	69bb      	ldr	r3, [r7, #24]
 8014cb4:	6858      	ldr	r0, [r3, #4]
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	3308      	adds	r3, #8
 8014cba:	2214      	movs	r2, #20
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	f001 fa4b 	bl	8016158 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014cc2:	2101      	movs	r1, #1
 8014cc4:	69b8      	ldr	r0, [r7, #24]
 8014cc6:	f7ff fc47 	bl	8014558 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014cca:	69b8      	ldr	r0, [r7, #24]
 8014ccc:	f7f8 f94a 	bl	800cf64 <pbuf_clen>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014cd4:	8bfa      	ldrh	r2, [r7, #30]
 8014cd6:	8a7b      	ldrh	r3, [r7, #18]
 8014cd8:	4413      	add	r3, r2
 8014cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014cde:	db05      	blt.n	8014cec <ip_reass_free_complete_datagram+0x98>
 8014ce0:	4b27      	ldr	r3, [pc, #156]	; (8014d80 <ip_reass_free_complete_datagram+0x12c>)
 8014ce2:	22bc      	movs	r2, #188	; 0xbc
 8014ce4:	492a      	ldr	r1, [pc, #168]	; (8014d90 <ip_reass_free_complete_datagram+0x13c>)
 8014ce6:	4828      	ldr	r0, [pc, #160]	; (8014d88 <ip_reass_free_complete_datagram+0x134>)
 8014ce8:	f001 fa4c 	bl	8016184 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014cec:	8bfa      	ldrh	r2, [r7, #30]
 8014cee:	8a7b      	ldrh	r3, [r7, #18]
 8014cf0:	4413      	add	r3, r2
 8014cf2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014cf4:	69b8      	ldr	r0, [r7, #24]
 8014cf6:	f7f8 f8ad 	bl	800ce54 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	685b      	ldr	r3, [r3, #4]
 8014cfe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014d00:	e01f      	b.n	8014d42 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014d02:	69bb      	ldr	r3, [r7, #24]
 8014d04:	685b      	ldr	r3, [r3, #4]
 8014d06:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014d08:	69bb      	ldr	r3, [r7, #24]
 8014d0a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014d0c:	697b      	ldr	r3, [r7, #20]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014d12:	68f8      	ldr	r0, [r7, #12]
 8014d14:	f7f8 f926 	bl	800cf64 <pbuf_clen>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014d1c:	8bfa      	ldrh	r2, [r7, #30]
 8014d1e:	8a7b      	ldrh	r3, [r7, #18]
 8014d20:	4413      	add	r3, r2
 8014d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d26:	db05      	blt.n	8014d34 <ip_reass_free_complete_datagram+0xe0>
 8014d28:	4b15      	ldr	r3, [pc, #84]	; (8014d80 <ip_reass_free_complete_datagram+0x12c>)
 8014d2a:	22cc      	movs	r2, #204	; 0xcc
 8014d2c:	4918      	ldr	r1, [pc, #96]	; (8014d90 <ip_reass_free_complete_datagram+0x13c>)
 8014d2e:	4816      	ldr	r0, [pc, #88]	; (8014d88 <ip_reass_free_complete_datagram+0x134>)
 8014d30:	f001 fa28 	bl	8016184 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014d34:	8bfa      	ldrh	r2, [r7, #30]
 8014d36:	8a7b      	ldrh	r3, [r7, #18]
 8014d38:	4413      	add	r3, r2
 8014d3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014d3c:	68f8      	ldr	r0, [r7, #12]
 8014d3e:	f7f8 f889 	bl	800ce54 <pbuf_free>
  while (p != NULL) {
 8014d42:	69bb      	ldr	r3, [r7, #24]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d1dc      	bne.n	8014d02 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014d48:	6839      	ldr	r1, [r7, #0]
 8014d4a:	6878      	ldr	r0, [r7, #4]
 8014d4c:	f000 f8c2 	bl	8014ed4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014d50:	4b10      	ldr	r3, [pc, #64]	; (8014d94 <ip_reass_free_complete_datagram+0x140>)
 8014d52:	881b      	ldrh	r3, [r3, #0]
 8014d54:	8bfa      	ldrh	r2, [r7, #30]
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d905      	bls.n	8014d66 <ip_reass_free_complete_datagram+0x112>
 8014d5a:	4b09      	ldr	r3, [pc, #36]	; (8014d80 <ip_reass_free_complete_datagram+0x12c>)
 8014d5c:	22d2      	movs	r2, #210	; 0xd2
 8014d5e:	490e      	ldr	r1, [pc, #56]	; (8014d98 <ip_reass_free_complete_datagram+0x144>)
 8014d60:	4809      	ldr	r0, [pc, #36]	; (8014d88 <ip_reass_free_complete_datagram+0x134>)
 8014d62:	f001 fa0f 	bl	8016184 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014d66:	4b0b      	ldr	r3, [pc, #44]	; (8014d94 <ip_reass_free_complete_datagram+0x140>)
 8014d68:	881a      	ldrh	r2, [r3, #0]
 8014d6a:	8bfb      	ldrh	r3, [r7, #30]
 8014d6c:	1ad3      	subs	r3, r2, r3
 8014d6e:	b29a      	uxth	r2, r3
 8014d70:	4b08      	ldr	r3, [pc, #32]	; (8014d94 <ip_reass_free_complete_datagram+0x140>)
 8014d72:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014d74:	8bfb      	ldrh	r3, [r7, #30]
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	3720      	adds	r7, #32
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bd80      	pop	{r7, pc}
 8014d7e:	bf00      	nop
 8014d80:	08019960 	.word	0x08019960
 8014d84:	0801999c 	.word	0x0801999c
 8014d88:	080199a8 	.word	0x080199a8
 8014d8c:	080199d0 	.word	0x080199d0
 8014d90:	080199e4 	.word	0x080199e4
 8014d94:	20009078 	.word	0x20009078
 8014d98:	08019a04 	.word	0x08019a04

08014d9c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b08a      	sub	sp, #40	; 0x28
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014da6:	2300      	movs	r3, #0
 8014da8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014daa:	2300      	movs	r3, #0
 8014dac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014dae:	2300      	movs	r3, #0
 8014db0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014db2:	2300      	movs	r3, #0
 8014db4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014db6:	2300      	movs	r3, #0
 8014db8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014dba:	4b28      	ldr	r3, [pc, #160]	; (8014e5c <ip_reass_remove_oldest_datagram+0xc0>)
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014dc0:	e030      	b.n	8014e24 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc4:	695a      	ldr	r2, [r3, #20]
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	68db      	ldr	r3, [r3, #12]
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	d10c      	bne.n	8014de8 <ip_reass_remove_oldest_datagram+0x4c>
 8014dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd0:	699a      	ldr	r2, [r3, #24]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	691b      	ldr	r3, [r3, #16]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d106      	bne.n	8014de8 <ip_reass_remove_oldest_datagram+0x4c>
 8014dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ddc:	899a      	ldrh	r2, [r3, #12]
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	889b      	ldrh	r3, [r3, #4]
 8014de2:	b29b      	uxth	r3, r3
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d014      	beq.n	8014e12 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014de8:	693b      	ldr	r3, [r7, #16]
 8014dea:	3301      	adds	r3, #1
 8014dec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014dee:	6a3b      	ldr	r3, [r7, #32]
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d104      	bne.n	8014dfe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014df6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014df8:	69fb      	ldr	r3, [r7, #28]
 8014dfa:	61bb      	str	r3, [r7, #24]
 8014dfc:	e009      	b.n	8014e12 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e00:	7fda      	ldrb	r2, [r3, #31]
 8014e02:	6a3b      	ldr	r3, [r7, #32]
 8014e04:	7fdb      	ldrb	r3, [r3, #31]
 8014e06:	429a      	cmp	r2, r3
 8014e08:	d803      	bhi.n	8014e12 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e0c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014e0e:	69fb      	ldr	r3, [r7, #28]
 8014e10:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d001      	beq.n	8014e1e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e1c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d1cb      	bne.n	8014dc2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014e2a:	6a3b      	ldr	r3, [r7, #32]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d008      	beq.n	8014e42 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014e30:	69b9      	ldr	r1, [r7, #24]
 8014e32:	6a38      	ldr	r0, [r7, #32]
 8014e34:	f7ff ff0e 	bl	8014c54 <ip_reass_free_complete_datagram>
 8014e38:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014e3a:	697a      	ldr	r2, [r7, #20]
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	4413      	add	r3, r2
 8014e40:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014e42:	697a      	ldr	r2, [r7, #20]
 8014e44:	683b      	ldr	r3, [r7, #0]
 8014e46:	429a      	cmp	r2, r3
 8014e48:	da02      	bge.n	8014e50 <ip_reass_remove_oldest_datagram+0xb4>
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	2b01      	cmp	r3, #1
 8014e4e:	dcac      	bgt.n	8014daa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014e50:	697b      	ldr	r3, [r7, #20]
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	3728      	adds	r7, #40	; 0x28
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	20009074 	.word	0x20009074

08014e60 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b084      	sub	sp, #16
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014e6a:	2004      	movs	r0, #4
 8014e6c:	f7f7 f90c 	bl	800c088 <memp_malloc>
 8014e70:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d110      	bne.n	8014e9a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014e78:	6839      	ldr	r1, [r7, #0]
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f7ff ff8e 	bl	8014d9c <ip_reass_remove_oldest_datagram>
 8014e80:	4602      	mov	r2, r0
 8014e82:	683b      	ldr	r3, [r7, #0]
 8014e84:	4293      	cmp	r3, r2
 8014e86:	dc03      	bgt.n	8014e90 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014e88:	2004      	movs	r0, #4
 8014e8a:	f7f7 f8fd 	bl	800c088 <memp_malloc>
 8014e8e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014e90:	68fb      	ldr	r3, [r7, #12]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d101      	bne.n	8014e9a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014e96:	2300      	movs	r3, #0
 8014e98:	e016      	b.n	8014ec8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014e9a:	2220      	movs	r2, #32
 8014e9c:	2100      	movs	r1, #0
 8014e9e:	68f8      	ldr	r0, [r7, #12]
 8014ea0:	f001 f968 	bl	8016174 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	220f      	movs	r2, #15
 8014ea8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014eaa:	4b09      	ldr	r3, [pc, #36]	; (8014ed0 <ip_reass_enqueue_new_datagram+0x70>)
 8014eac:	681a      	ldr	r2, [r3, #0]
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014eb2:	4a07      	ldr	r2, [pc, #28]	; (8014ed0 <ip_reass_enqueue_new_datagram+0x70>)
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	3308      	adds	r3, #8
 8014ebc:	2214      	movs	r2, #20
 8014ebe:	6879      	ldr	r1, [r7, #4]
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f001 f949 	bl	8016158 <memcpy>
  return ipr;
 8014ec6:	68fb      	ldr	r3, [r7, #12]
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3710      	adds	r7, #16
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	20009074 	.word	0x20009074

08014ed4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b082      	sub	sp, #8
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
 8014edc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014ede:	4b10      	ldr	r3, [pc, #64]	; (8014f20 <ip_reass_dequeue_datagram+0x4c>)
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	687a      	ldr	r2, [r7, #4]
 8014ee4:	429a      	cmp	r2, r3
 8014ee6:	d104      	bne.n	8014ef2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	4a0c      	ldr	r2, [pc, #48]	; (8014f20 <ip_reass_dequeue_datagram+0x4c>)
 8014eee:	6013      	str	r3, [r2, #0]
 8014ef0:	e00d      	b.n	8014f0e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d106      	bne.n	8014f06 <ip_reass_dequeue_datagram+0x32>
 8014ef8:	4b0a      	ldr	r3, [pc, #40]	; (8014f24 <ip_reass_dequeue_datagram+0x50>)
 8014efa:	f240 1245 	movw	r2, #325	; 0x145
 8014efe:	490a      	ldr	r1, [pc, #40]	; (8014f28 <ip_reass_dequeue_datagram+0x54>)
 8014f00:	480a      	ldr	r0, [pc, #40]	; (8014f2c <ip_reass_dequeue_datagram+0x58>)
 8014f02:	f001 f93f 	bl	8016184 <iprintf>
    prev->next = ipr->next;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	681a      	ldr	r2, [r3, #0]
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014f0e:	6879      	ldr	r1, [r7, #4]
 8014f10:	2004      	movs	r0, #4
 8014f12:	f7f7 f929 	bl	800c168 <memp_free>
}
 8014f16:	bf00      	nop
 8014f18:	3708      	adds	r7, #8
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}
 8014f1e:	bf00      	nop
 8014f20:	20009074 	.word	0x20009074
 8014f24:	08019960 	.word	0x08019960
 8014f28:	08019a28 	.word	0x08019a28
 8014f2c:	080199a8 	.word	0x080199a8

08014f30 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	b08c      	sub	sp, #48	; 0x30
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	60f8      	str	r0, [r7, #12]
 8014f38:	60b9      	str	r1, [r7, #8]
 8014f3a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014f40:	2301      	movs	r3, #1
 8014f42:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	685b      	ldr	r3, [r3, #4]
 8014f48:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014f4a:	69fb      	ldr	r3, [r7, #28]
 8014f4c:	885b      	ldrh	r3, [r3, #2]
 8014f4e:	b29b      	uxth	r3, r3
 8014f50:	4618      	mov	r0, r3
 8014f52:	f7f6 fc21 	bl	800b798 <lwip_htons>
 8014f56:	4603      	mov	r3, r0
 8014f58:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014f5a:	69fb      	ldr	r3, [r7, #28]
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	f003 030f 	and.w	r3, r3, #15
 8014f62:	b2db      	uxtb	r3, r3
 8014f64:	009b      	lsls	r3, r3, #2
 8014f66:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014f68:	7e7b      	ldrb	r3, [r7, #25]
 8014f6a:	b29b      	uxth	r3, r3
 8014f6c:	8b7a      	ldrh	r2, [r7, #26]
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d202      	bcs.n	8014f78 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f76:	e135      	b.n	80151e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014f78:	7e7b      	ldrb	r3, [r7, #25]
 8014f7a:	b29b      	uxth	r3, r3
 8014f7c:	8b7a      	ldrh	r2, [r7, #26]
 8014f7e:	1ad3      	subs	r3, r2, r3
 8014f80:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014f82:	69fb      	ldr	r3, [r7, #28]
 8014f84:	88db      	ldrh	r3, [r3, #6]
 8014f86:	b29b      	uxth	r3, r3
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7f6 fc05 	bl	800b798 <lwip_htons>
 8014f8e:	4603      	mov	r3, r0
 8014f90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f94:	b29b      	uxth	r3, r3
 8014f96:	00db      	lsls	r3, r3, #3
 8014f98:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	701a      	strb	r2, [r3, #0]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	705a      	strb	r2, [r3, #1]
 8014faa:	2200      	movs	r2, #0
 8014fac:	709a      	strb	r2, [r3, #2]
 8014fae:	2200      	movs	r2, #0
 8014fb0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fb4:	8afa      	ldrh	r2, [r7, #22]
 8014fb6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014fb8:	8afa      	ldrh	r2, [r7, #22]
 8014fba:	8b7b      	ldrh	r3, [r7, #26]
 8014fbc:	4413      	add	r3, r2
 8014fbe:	b29a      	uxth	r2, r3
 8014fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc6:	88db      	ldrh	r3, [r3, #6]
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	8afa      	ldrh	r2, [r7, #22]
 8014fcc:	429a      	cmp	r2, r3
 8014fce:	d902      	bls.n	8014fd6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014fd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014fd4:	e106      	b.n	80151e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	685b      	ldr	r3, [r3, #4]
 8014fda:	627b      	str	r3, [r7, #36]	; 0x24
 8014fdc:	e068      	b.n	80150b0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe6:	889b      	ldrh	r3, [r3, #4]
 8014fe8:	b29a      	uxth	r2, r3
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	889b      	ldrh	r3, [r3, #4]
 8014fee:	b29b      	uxth	r3, r3
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d235      	bcs.n	8015060 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ff8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d020      	beq.n	8015042 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015002:	889b      	ldrh	r3, [r3, #4]
 8015004:	b29a      	uxth	r2, r3
 8015006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015008:	88db      	ldrh	r3, [r3, #6]
 801500a:	b29b      	uxth	r3, r3
 801500c:	429a      	cmp	r2, r3
 801500e:	d307      	bcc.n	8015020 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015012:	88db      	ldrh	r3, [r3, #6]
 8015014:	b29a      	uxth	r2, r3
 8015016:	693b      	ldr	r3, [r7, #16]
 8015018:	889b      	ldrh	r3, [r3, #4]
 801501a:	b29b      	uxth	r3, r3
 801501c:	429a      	cmp	r2, r3
 801501e:	d902      	bls.n	8015026 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015024:	e0de      	b.n	80151e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015028:	68ba      	ldr	r2, [r7, #8]
 801502a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801502e:	88db      	ldrh	r3, [r3, #6]
 8015030:	b29a      	uxth	r2, r3
 8015032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015034:	889b      	ldrh	r3, [r3, #4]
 8015036:	b29b      	uxth	r3, r3
 8015038:	429a      	cmp	r2, r3
 801503a:	d03d      	beq.n	80150b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801503c:	2300      	movs	r3, #0
 801503e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015040:	e03a      	b.n	80150b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015044:	88db      	ldrh	r3, [r3, #6]
 8015046:	b29a      	uxth	r2, r3
 8015048:	693b      	ldr	r3, [r7, #16]
 801504a:	889b      	ldrh	r3, [r3, #4]
 801504c:	b29b      	uxth	r3, r3
 801504e:	429a      	cmp	r2, r3
 8015050:	d902      	bls.n	8015058 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015056:	e0c5      	b.n	80151e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	68ba      	ldr	r2, [r7, #8]
 801505c:	605a      	str	r2, [r3, #4]
      break;
 801505e:	e02b      	b.n	80150b8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015062:	889b      	ldrh	r3, [r3, #4]
 8015064:	b29a      	uxth	r2, r3
 8015066:	693b      	ldr	r3, [r7, #16]
 8015068:	889b      	ldrh	r3, [r3, #4]
 801506a:	b29b      	uxth	r3, r3
 801506c:	429a      	cmp	r2, r3
 801506e:	d102      	bne.n	8015076 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015070:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015074:	e0b6      	b.n	80151e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015078:	889b      	ldrh	r3, [r3, #4]
 801507a:	b29a      	uxth	r2, r3
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	88db      	ldrh	r3, [r3, #6]
 8015080:	b29b      	uxth	r3, r3
 8015082:	429a      	cmp	r2, r3
 8015084:	d202      	bcs.n	801508c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801508a:	e0ab      	b.n	80151e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801508e:	2b00      	cmp	r3, #0
 8015090:	d009      	beq.n	80150a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015094:	88db      	ldrh	r3, [r3, #6]
 8015096:	b29a      	uxth	r2, r3
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	889b      	ldrh	r3, [r3, #4]
 801509c:	b29b      	uxth	r3, r3
 801509e:	429a      	cmp	r2, r3
 80150a0:	d001      	beq.n	80150a6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80150a2:	2300      	movs	r3, #0
 80150a4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80150a6:	693b      	ldr	r3, [r7, #16]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80150ac:	693b      	ldr	r3, [r7, #16]
 80150ae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80150b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d193      	bne.n	8014fde <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80150b6:	e000      	b.n	80150ba <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80150b8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80150ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d12d      	bne.n	801511c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80150c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d01c      	beq.n	8015100 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80150c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150c8:	88db      	ldrh	r3, [r3, #6]
 80150ca:	b29a      	uxth	r2, r3
 80150cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ce:	889b      	ldrh	r3, [r3, #4]
 80150d0:	b29b      	uxth	r3, r3
 80150d2:	429a      	cmp	r2, r3
 80150d4:	d906      	bls.n	80150e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80150d6:	4b45      	ldr	r3, [pc, #276]	; (80151ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80150d8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80150dc:	4944      	ldr	r1, [pc, #272]	; (80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80150de:	4845      	ldr	r0, [pc, #276]	; (80151f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80150e0:	f001 f850 	bl	8016184 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80150e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e6:	68ba      	ldr	r2, [r7, #8]
 80150e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80150ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ec:	88db      	ldrh	r3, [r3, #6]
 80150ee:	b29a      	uxth	r2, r3
 80150f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150f2:	889b      	ldrh	r3, [r3, #4]
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	429a      	cmp	r2, r3
 80150f8:	d010      	beq.n	801511c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80150fa:	2300      	movs	r3, #0
 80150fc:	623b      	str	r3, [r7, #32]
 80150fe:	e00d      	b.n	801511c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	685b      	ldr	r3, [r3, #4]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d006      	beq.n	8015116 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015108:	4b38      	ldr	r3, [pc, #224]	; (80151ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801510a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801510e:	493a      	ldr	r1, [pc, #232]	; (80151f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015110:	4838      	ldr	r0, [pc, #224]	; (80151f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015112:	f001 f837 	bl	8016184 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	68ba      	ldr	r2, [r7, #8]
 801511a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d105      	bne.n	801512e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015122:	68fb      	ldr	r3, [r7, #12]
 8015124:	7f9b      	ldrb	r3, [r3, #30]
 8015126:	f003 0301 	and.w	r3, r3, #1
 801512a:	2b00      	cmp	r3, #0
 801512c:	d059      	beq.n	80151e2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801512e:	6a3b      	ldr	r3, [r7, #32]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d04f      	beq.n	80151d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015134:	68fb      	ldr	r3, [r7, #12]
 8015136:	685b      	ldr	r3, [r3, #4]
 8015138:	2b00      	cmp	r3, #0
 801513a:	d006      	beq.n	801514a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	685b      	ldr	r3, [r3, #4]
 8015140:	685b      	ldr	r3, [r3, #4]
 8015142:	889b      	ldrh	r3, [r3, #4]
 8015144:	b29b      	uxth	r3, r3
 8015146:	2b00      	cmp	r3, #0
 8015148:	d002      	beq.n	8015150 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801514a:	2300      	movs	r3, #0
 801514c:	623b      	str	r3, [r7, #32]
 801514e:	e041      	b.n	80151d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015152:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801515a:	e012      	b.n	8015182 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801515c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801515e:	685b      	ldr	r3, [r3, #4]
 8015160:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015164:	88db      	ldrh	r3, [r3, #6]
 8015166:	b29a      	uxth	r2, r3
 8015168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801516a:	889b      	ldrh	r3, [r3, #4]
 801516c:	b29b      	uxth	r3, r3
 801516e:	429a      	cmp	r2, r3
 8015170:	d002      	beq.n	8015178 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015172:	2300      	movs	r3, #0
 8015174:	623b      	str	r3, [r7, #32]
            break;
 8015176:	e007      	b.n	8015188 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801517a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801517c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801517e:	681b      	ldr	r3, [r3, #0]
 8015180:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015184:	2b00      	cmp	r3, #0
 8015186:	d1e9      	bne.n	801515c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015188:	6a3b      	ldr	r3, [r7, #32]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d022      	beq.n	80151d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	685b      	ldr	r3, [r3, #4]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d106      	bne.n	80151a4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015196:	4b15      	ldr	r3, [pc, #84]	; (80151ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015198:	f240 12df 	movw	r2, #479	; 0x1df
 801519c:	4917      	ldr	r1, [pc, #92]	; (80151fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801519e:	4815      	ldr	r0, [pc, #84]	; (80151f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80151a0:	f000 fff0 	bl	8016184 <iprintf>
          LWIP_ASSERT("sanity check",
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	685b      	ldr	r3, [r3, #4]
 80151a8:	685b      	ldr	r3, [r3, #4]
 80151aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80151ac:	429a      	cmp	r2, r3
 80151ae:	d106      	bne.n	80151be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80151b0:	4b0e      	ldr	r3, [pc, #56]	; (80151ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80151b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80151b6:	4911      	ldr	r1, [pc, #68]	; (80151fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80151b8:	480e      	ldr	r0, [pc, #56]	; (80151f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80151ba:	f000 ffe3 	bl	8016184 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80151be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d006      	beq.n	80151d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80151c6:	4b09      	ldr	r3, [pc, #36]	; (80151ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80151c8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80151cc:	490c      	ldr	r1, [pc, #48]	; (8015200 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80151ce:	4809      	ldr	r0, [pc, #36]	; (80151f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80151d0:	f000 ffd8 	bl	8016184 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80151d4:	6a3b      	ldr	r3, [r7, #32]
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	bf14      	ite	ne
 80151da:	2301      	movne	r3, #1
 80151dc:	2300      	moveq	r3, #0
 80151de:	b2db      	uxtb	r3, r3
 80151e0:	e000      	b.n	80151e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80151e2:	2300      	movs	r3, #0
}
 80151e4:	4618      	mov	r0, r3
 80151e6:	3730      	adds	r7, #48	; 0x30
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd80      	pop	{r7, pc}
 80151ec:	08019960 	.word	0x08019960
 80151f0:	08019a44 	.word	0x08019a44
 80151f4:	080199a8 	.word	0x080199a8
 80151f8:	08019a64 	.word	0x08019a64
 80151fc:	08019a9c 	.word	0x08019a9c
 8015200:	08019aac 	.word	0x08019aac

08015204 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b08e      	sub	sp, #56	; 0x38
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	685b      	ldr	r3, [r3, #4]
 8015210:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015214:	781b      	ldrb	r3, [r3, #0]
 8015216:	f003 030f 	and.w	r3, r3, #15
 801521a:	b2db      	uxtb	r3, r3
 801521c:	009b      	lsls	r3, r3, #2
 801521e:	b2db      	uxtb	r3, r3
 8015220:	2b14      	cmp	r3, #20
 8015222:	f040 8171 	bne.w	8015508 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015228:	88db      	ldrh	r3, [r3, #6]
 801522a:	b29b      	uxth	r3, r3
 801522c:	4618      	mov	r0, r3
 801522e:	f7f6 fab3 	bl	800b798 <lwip_htons>
 8015232:	4603      	mov	r3, r0
 8015234:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015238:	b29b      	uxth	r3, r3
 801523a:	00db      	lsls	r3, r3, #3
 801523c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801523e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015240:	885b      	ldrh	r3, [r3, #2]
 8015242:	b29b      	uxth	r3, r3
 8015244:	4618      	mov	r0, r3
 8015246:	f7f6 faa7 	bl	800b798 <lwip_htons>
 801524a:	4603      	mov	r3, r0
 801524c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015250:	781b      	ldrb	r3, [r3, #0]
 8015252:	f003 030f 	and.w	r3, r3, #15
 8015256:	b2db      	uxtb	r3, r3
 8015258:	009b      	lsls	r3, r3, #2
 801525a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801525e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015262:	b29b      	uxth	r3, r3
 8015264:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015266:	429a      	cmp	r2, r3
 8015268:	f0c0 8150 	bcc.w	801550c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801526c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015270:	b29b      	uxth	r3, r3
 8015272:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015274:	1ad3      	subs	r3, r2, r3
 8015276:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015278:	6878      	ldr	r0, [r7, #4]
 801527a:	f7f7 fe73 	bl	800cf64 <pbuf_clen>
 801527e:	4603      	mov	r3, r0
 8015280:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015282:	4b8c      	ldr	r3, [pc, #560]	; (80154b4 <ip4_reass+0x2b0>)
 8015284:	881b      	ldrh	r3, [r3, #0]
 8015286:	461a      	mov	r2, r3
 8015288:	8c3b      	ldrh	r3, [r7, #32]
 801528a:	4413      	add	r3, r2
 801528c:	2b0a      	cmp	r3, #10
 801528e:	dd10      	ble.n	80152b2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015290:	8c3b      	ldrh	r3, [r7, #32]
 8015292:	4619      	mov	r1, r3
 8015294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015296:	f7ff fd81 	bl	8014d9c <ip_reass_remove_oldest_datagram>
 801529a:	4603      	mov	r3, r0
 801529c:	2b00      	cmp	r3, #0
 801529e:	f000 8137 	beq.w	8015510 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80152a2:	4b84      	ldr	r3, [pc, #528]	; (80154b4 <ip4_reass+0x2b0>)
 80152a4:	881b      	ldrh	r3, [r3, #0]
 80152a6:	461a      	mov	r2, r3
 80152a8:	8c3b      	ldrh	r3, [r7, #32]
 80152aa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80152ac:	2b0a      	cmp	r3, #10
 80152ae:	f300 812f 	bgt.w	8015510 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80152b2:	4b81      	ldr	r3, [pc, #516]	; (80154b8 <ip4_reass+0x2b4>)
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	633b      	str	r3, [r7, #48]	; 0x30
 80152b8:	e015      	b.n	80152e6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80152ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152bc:	695a      	ldr	r2, [r3, #20]
 80152be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152c0:	68db      	ldr	r3, [r3, #12]
 80152c2:	429a      	cmp	r2, r3
 80152c4:	d10c      	bne.n	80152e0 <ip4_reass+0xdc>
 80152c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152c8:	699a      	ldr	r2, [r3, #24]
 80152ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152cc:	691b      	ldr	r3, [r3, #16]
 80152ce:	429a      	cmp	r2, r3
 80152d0:	d106      	bne.n	80152e0 <ip4_reass+0xdc>
 80152d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d4:	899a      	ldrh	r2, [r3, #12]
 80152d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152d8:	889b      	ldrh	r3, [r3, #4]
 80152da:	b29b      	uxth	r3, r3
 80152dc:	429a      	cmp	r2, r3
 80152de:	d006      	beq.n	80152ee <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80152e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	633b      	str	r3, [r7, #48]	; 0x30
 80152e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d1e6      	bne.n	80152ba <ip4_reass+0xb6>
 80152ec:	e000      	b.n	80152f0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80152ee:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80152f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d109      	bne.n	801530a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80152f6:	8c3b      	ldrh	r3, [r7, #32]
 80152f8:	4619      	mov	r1, r3
 80152fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152fc:	f7ff fdb0 	bl	8014e60 <ip_reass_enqueue_new_datagram>
 8015300:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015304:	2b00      	cmp	r3, #0
 8015306:	d11c      	bne.n	8015342 <ip4_reass+0x13e>
      goto nullreturn;
 8015308:	e105      	b.n	8015516 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801530c:	88db      	ldrh	r3, [r3, #6]
 801530e:	b29b      	uxth	r3, r3
 8015310:	4618      	mov	r0, r3
 8015312:	f7f6 fa41 	bl	800b798 <lwip_htons>
 8015316:	4603      	mov	r3, r0
 8015318:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801531c:	2b00      	cmp	r3, #0
 801531e:	d110      	bne.n	8015342 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015322:	89db      	ldrh	r3, [r3, #14]
 8015324:	4618      	mov	r0, r3
 8015326:	f7f6 fa37 	bl	800b798 <lwip_htons>
 801532a:	4603      	mov	r3, r0
 801532c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015330:	2b00      	cmp	r3, #0
 8015332:	d006      	beq.n	8015342 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015336:	3308      	adds	r3, #8
 8015338:	2214      	movs	r2, #20
 801533a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801533c:	4618      	mov	r0, r3
 801533e:	f000 ff0b 	bl	8016158 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015344:	88db      	ldrh	r3, [r3, #6]
 8015346:	b29b      	uxth	r3, r3
 8015348:	f003 0320 	and.w	r3, r3, #32
 801534c:	2b00      	cmp	r3, #0
 801534e:	bf0c      	ite	eq
 8015350:	2301      	moveq	r3, #1
 8015352:	2300      	movne	r3, #0
 8015354:	b2db      	uxtb	r3, r3
 8015356:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015358:	69fb      	ldr	r3, [r7, #28]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d00e      	beq.n	801537c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801535e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015360:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015362:	4413      	add	r3, r2
 8015364:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015366:	8b7a      	ldrh	r2, [r7, #26]
 8015368:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801536a:	429a      	cmp	r2, r3
 801536c:	f0c0 80a0 	bcc.w	80154b0 <ip4_reass+0x2ac>
 8015370:	8b7b      	ldrh	r3, [r7, #26]
 8015372:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015376:	4293      	cmp	r3, r2
 8015378:	f200 809a 	bhi.w	80154b0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801537c:	69fa      	ldr	r2, [r7, #28]
 801537e:	6879      	ldr	r1, [r7, #4]
 8015380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015382:	f7ff fdd5 	bl	8014f30 <ip_reass_chain_frag_into_datagram_and_validate>
 8015386:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801538e:	f000 809b 	beq.w	80154c8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015392:	4b48      	ldr	r3, [pc, #288]	; (80154b4 <ip4_reass+0x2b0>)
 8015394:	881a      	ldrh	r2, [r3, #0]
 8015396:	8c3b      	ldrh	r3, [r7, #32]
 8015398:	4413      	add	r3, r2
 801539a:	b29a      	uxth	r2, r3
 801539c:	4b45      	ldr	r3, [pc, #276]	; (80154b4 <ip4_reass+0x2b0>)
 801539e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80153a0:	69fb      	ldr	r3, [r7, #28]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d00d      	beq.n	80153c2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80153a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80153a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80153aa:	4413      	add	r3, r2
 80153ac:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80153ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b0:	8a7a      	ldrh	r2, [r7, #18]
 80153b2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80153b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b6:	7f9b      	ldrb	r3, [r3, #30]
 80153b8:	f043 0301 	orr.w	r3, r3, #1
 80153bc:	b2da      	uxtb	r2, r3
 80153be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153c0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	2b01      	cmp	r3, #1
 80153c6:	d171      	bne.n	80154ac <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80153c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ca:	8b9b      	ldrh	r3, [r3, #28]
 80153cc:	3314      	adds	r3, #20
 80153ce:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80153d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d2:	685b      	ldr	r3, [r3, #4]
 80153d4:	685b      	ldr	r3, [r3, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80153da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153dc:	685b      	ldr	r3, [r3, #4]
 80153de:	685b      	ldr	r3, [r3, #4]
 80153e0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80153e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e4:	3308      	adds	r3, #8
 80153e6:	2214      	movs	r2, #20
 80153e8:	4619      	mov	r1, r3
 80153ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153ec:	f000 feb4 	bl	8016158 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80153f0:	8a3b      	ldrh	r3, [r7, #16]
 80153f2:	4618      	mov	r0, r3
 80153f4:	f7f6 f9d0 	bl	800b798 <lwip_htons>
 80153f8:	4603      	mov	r3, r0
 80153fa:	461a      	mov	r2, r3
 80153fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153fe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015402:	2200      	movs	r2, #0
 8015404:	719a      	strb	r2, [r3, #6]
 8015406:	2200      	movs	r2, #0
 8015408:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801540a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801540c:	2200      	movs	r2, #0
 801540e:	729a      	strb	r2, [r3, #10]
 8015410:	2200      	movs	r2, #0
 8015412:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015416:	685b      	ldr	r3, [r3, #4]
 8015418:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801541a:	e00d      	b.n	8015438 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801541c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801541e:	685b      	ldr	r3, [r3, #4]
 8015420:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015422:	2114      	movs	r1, #20
 8015424:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015426:	f7f7 fc8f 	bl	800cd48 <pbuf_remove_header>
      pbuf_cat(p, r);
 801542a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801542c:	6878      	ldr	r0, [r7, #4]
 801542e:	f7f7 fdd3 	bl	800cfd8 <pbuf_cat>
      r = iprh->next_pbuf;
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801543a:	2b00      	cmp	r3, #0
 801543c:	d1ee      	bne.n	801541c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801543e:	4b1e      	ldr	r3, [pc, #120]	; (80154b8 <ip4_reass+0x2b4>)
 8015440:	681b      	ldr	r3, [r3, #0]
 8015442:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015444:	429a      	cmp	r2, r3
 8015446:	d102      	bne.n	801544e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015448:	2300      	movs	r3, #0
 801544a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801544c:	e010      	b.n	8015470 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801544e:	4b1a      	ldr	r3, [pc, #104]	; (80154b8 <ip4_reass+0x2b4>)
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015454:	e007      	b.n	8015466 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801545c:	429a      	cmp	r2, r3
 801545e:	d006      	beq.n	801546e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015468:	2b00      	cmp	r3, #0
 801546a:	d1f4      	bne.n	8015456 <ip4_reass+0x252>
 801546c:	e000      	b.n	8015470 <ip4_reass+0x26c>
          break;
 801546e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015470:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015474:	f7ff fd2e 	bl	8014ed4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f7f7 fd73 	bl	800cf64 <pbuf_clen>
 801547e:	4603      	mov	r3, r0
 8015480:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015482:	4b0c      	ldr	r3, [pc, #48]	; (80154b4 <ip4_reass+0x2b0>)
 8015484:	881b      	ldrh	r3, [r3, #0]
 8015486:	8c3a      	ldrh	r2, [r7, #32]
 8015488:	429a      	cmp	r2, r3
 801548a:	d906      	bls.n	801549a <ip4_reass+0x296>
 801548c:	4b0b      	ldr	r3, [pc, #44]	; (80154bc <ip4_reass+0x2b8>)
 801548e:	f240 229b 	movw	r2, #667	; 0x29b
 8015492:	490b      	ldr	r1, [pc, #44]	; (80154c0 <ip4_reass+0x2bc>)
 8015494:	480b      	ldr	r0, [pc, #44]	; (80154c4 <ip4_reass+0x2c0>)
 8015496:	f000 fe75 	bl	8016184 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801549a:	4b06      	ldr	r3, [pc, #24]	; (80154b4 <ip4_reass+0x2b0>)
 801549c:	881a      	ldrh	r2, [r3, #0]
 801549e:	8c3b      	ldrh	r3, [r7, #32]
 80154a0:	1ad3      	subs	r3, r2, r3
 80154a2:	b29a      	uxth	r2, r3
 80154a4:	4b03      	ldr	r3, [pc, #12]	; (80154b4 <ip4_reass+0x2b0>)
 80154a6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	e038      	b.n	801551e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80154ac:	2300      	movs	r3, #0
 80154ae:	e036      	b.n	801551e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80154b0:	bf00      	nop
 80154b2:	e00a      	b.n	80154ca <ip4_reass+0x2c6>
 80154b4:	20009078 	.word	0x20009078
 80154b8:	20009074 	.word	0x20009074
 80154bc:	08019960 	.word	0x08019960
 80154c0:	08019ad0 	.word	0x08019ad0
 80154c4:	080199a8 	.word	0x080199a8
    goto nullreturn_ipr;
 80154c8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80154ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d106      	bne.n	80154de <ip4_reass+0x2da>
 80154d0:	4b15      	ldr	r3, [pc, #84]	; (8015528 <ip4_reass+0x324>)
 80154d2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80154d6:	4915      	ldr	r1, [pc, #84]	; (801552c <ip4_reass+0x328>)
 80154d8:	4815      	ldr	r0, [pc, #84]	; (8015530 <ip4_reass+0x32c>)
 80154da:	f000 fe53 	bl	8016184 <iprintf>
  if (ipr->p == NULL) {
 80154de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154e0:	685b      	ldr	r3, [r3, #4]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d116      	bne.n	8015514 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80154e6:	4b13      	ldr	r3, [pc, #76]	; (8015534 <ip4_reass+0x330>)
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154ec:	429a      	cmp	r2, r3
 80154ee:	d006      	beq.n	80154fe <ip4_reass+0x2fa>
 80154f0:	4b0d      	ldr	r3, [pc, #52]	; (8015528 <ip4_reass+0x324>)
 80154f2:	f240 22ab 	movw	r2, #683	; 0x2ab
 80154f6:	4910      	ldr	r1, [pc, #64]	; (8015538 <ip4_reass+0x334>)
 80154f8:	480d      	ldr	r0, [pc, #52]	; (8015530 <ip4_reass+0x32c>)
 80154fa:	f000 fe43 	bl	8016184 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80154fe:	2100      	movs	r1, #0
 8015500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015502:	f7ff fce7 	bl	8014ed4 <ip_reass_dequeue_datagram>
 8015506:	e006      	b.n	8015516 <ip4_reass+0x312>
    goto nullreturn;
 8015508:	bf00      	nop
 801550a:	e004      	b.n	8015516 <ip4_reass+0x312>
    goto nullreturn;
 801550c:	bf00      	nop
 801550e:	e002      	b.n	8015516 <ip4_reass+0x312>
      goto nullreturn;
 8015510:	bf00      	nop
 8015512:	e000      	b.n	8015516 <ip4_reass+0x312>
  }

nullreturn:
 8015514:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015516:	6878      	ldr	r0, [r7, #4]
 8015518:	f7f7 fc9c 	bl	800ce54 <pbuf_free>
  return NULL;
 801551c:	2300      	movs	r3, #0
}
 801551e:	4618      	mov	r0, r3
 8015520:	3738      	adds	r7, #56	; 0x38
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}
 8015526:	bf00      	nop
 8015528:	08019960 	.word	0x08019960
 801552c:	08019aec 	.word	0x08019aec
 8015530:	080199a8 	.word	0x080199a8
 8015534:	20009074 	.word	0x20009074
 8015538:	08019af8 	.word	0x08019af8

0801553c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801553c:	b580      	push	{r7, lr}
 801553e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015540:	2005      	movs	r0, #5
 8015542:	f7f6 fda1 	bl	800c088 <memp_malloc>
 8015546:	4603      	mov	r3, r0
}
 8015548:	4618      	mov	r0, r3
 801554a:	bd80      	pop	{r7, pc}

0801554c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b082      	sub	sp, #8
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d106      	bne.n	8015568 <ip_frag_free_pbuf_custom_ref+0x1c>
 801555a:	4b07      	ldr	r3, [pc, #28]	; (8015578 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801555c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015560:	4906      	ldr	r1, [pc, #24]	; (801557c <ip_frag_free_pbuf_custom_ref+0x30>)
 8015562:	4807      	ldr	r0, [pc, #28]	; (8015580 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015564:	f000 fe0e 	bl	8016184 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015568:	6879      	ldr	r1, [r7, #4]
 801556a:	2005      	movs	r0, #5
 801556c:	f7f6 fdfc 	bl	800c168 <memp_free>
}
 8015570:	bf00      	nop
 8015572:	3708      	adds	r7, #8
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}
 8015578:	08019960 	.word	0x08019960
 801557c:	08019b18 	.word	0x08019b18
 8015580:	080199a8 	.word	0x080199a8

08015584 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b084      	sub	sp, #16
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d106      	bne.n	80155a4 <ipfrag_free_pbuf_custom+0x20>
 8015596:	4b11      	ldr	r3, [pc, #68]	; (80155dc <ipfrag_free_pbuf_custom+0x58>)
 8015598:	f240 22ce 	movw	r2, #718	; 0x2ce
 801559c:	4910      	ldr	r1, [pc, #64]	; (80155e0 <ipfrag_free_pbuf_custom+0x5c>)
 801559e:	4811      	ldr	r0, [pc, #68]	; (80155e4 <ipfrag_free_pbuf_custom+0x60>)
 80155a0:	f000 fdf0 	bl	8016184 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80155a4:	68fa      	ldr	r2, [r7, #12]
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	429a      	cmp	r2, r3
 80155aa:	d006      	beq.n	80155ba <ipfrag_free_pbuf_custom+0x36>
 80155ac:	4b0b      	ldr	r3, [pc, #44]	; (80155dc <ipfrag_free_pbuf_custom+0x58>)
 80155ae:	f240 22cf 	movw	r2, #719	; 0x2cf
 80155b2:	490d      	ldr	r1, [pc, #52]	; (80155e8 <ipfrag_free_pbuf_custom+0x64>)
 80155b4:	480b      	ldr	r0, [pc, #44]	; (80155e4 <ipfrag_free_pbuf_custom+0x60>)
 80155b6:	f000 fde5 	bl	8016184 <iprintf>
  if (pcr->original != NULL) {
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	695b      	ldr	r3, [r3, #20]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d004      	beq.n	80155cc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	695b      	ldr	r3, [r3, #20]
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7f7 fc44 	bl	800ce54 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80155cc:	68f8      	ldr	r0, [r7, #12]
 80155ce:	f7ff ffbd 	bl	801554c <ip_frag_free_pbuf_custom_ref>
}
 80155d2:	bf00      	nop
 80155d4:	3710      	adds	r7, #16
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}
 80155da:	bf00      	nop
 80155dc:	08019960 	.word	0x08019960
 80155e0:	08019b24 	.word	0x08019b24
 80155e4:	080199a8 	.word	0x080199a8
 80155e8:	08019b30 	.word	0x08019b30

080155ec <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b094      	sub	sp, #80	; 0x50
 80155f0:	af02      	add	r7, sp, #8
 80155f2:	60f8      	str	r0, [r7, #12]
 80155f4:	60b9      	str	r1, [r7, #8]
 80155f6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80155f8:	2300      	movs	r3, #0
 80155fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80155fe:	68bb      	ldr	r3, [r7, #8]
 8015600:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015602:	3b14      	subs	r3, #20
 8015604:	2b00      	cmp	r3, #0
 8015606:	da00      	bge.n	801560a <ip4_frag+0x1e>
 8015608:	3307      	adds	r3, #7
 801560a:	10db      	asrs	r3, r3, #3
 801560c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801560e:	2314      	movs	r3, #20
 8015610:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801561a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801561e:	781b      	ldrb	r3, [r3, #0]
 8015620:	f003 030f 	and.w	r3, r3, #15
 8015624:	b2db      	uxtb	r3, r3
 8015626:	009b      	lsls	r3, r3, #2
 8015628:	b2db      	uxtb	r3, r3
 801562a:	2b14      	cmp	r3, #20
 801562c:	d002      	beq.n	8015634 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801562e:	f06f 0305 	mvn.w	r3, #5
 8015632:	e110      	b.n	8015856 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	895b      	ldrh	r3, [r3, #10]
 8015638:	2b13      	cmp	r3, #19
 801563a:	d809      	bhi.n	8015650 <ip4_frag+0x64>
 801563c:	4b88      	ldr	r3, [pc, #544]	; (8015860 <ip4_frag+0x274>)
 801563e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015642:	4988      	ldr	r1, [pc, #544]	; (8015864 <ip4_frag+0x278>)
 8015644:	4888      	ldr	r0, [pc, #544]	; (8015868 <ip4_frag+0x27c>)
 8015646:	f000 fd9d 	bl	8016184 <iprintf>
 801564a:	f06f 0305 	mvn.w	r3, #5
 801564e:	e102      	b.n	8015856 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015652:	88db      	ldrh	r3, [r3, #6]
 8015654:	b29b      	uxth	r3, r3
 8015656:	4618      	mov	r0, r3
 8015658:	f7f6 f89e 	bl	800b798 <lwip_htons>
 801565c:	4603      	mov	r3, r0
 801565e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015660:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015662:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015666:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801566a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801566c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015670:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	891b      	ldrh	r3, [r3, #8]
 8015676:	3b14      	subs	r3, #20
 8015678:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801567c:	e0e1      	b.n	8015842 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801567e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015680:	00db      	lsls	r3, r3, #3
 8015682:	b29b      	uxth	r3, r3
 8015684:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015688:	4293      	cmp	r3, r2
 801568a:	bf28      	it	cs
 801568c:	4613      	movcs	r3, r2
 801568e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015690:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015694:	2114      	movs	r1, #20
 8015696:	200e      	movs	r0, #14
 8015698:	f7f7 f8f8 	bl	800c88c <pbuf_alloc>
 801569c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	f000 80d5 	beq.w	8015850 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80156a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a8:	895b      	ldrh	r3, [r3, #10]
 80156aa:	2b13      	cmp	r3, #19
 80156ac:	d806      	bhi.n	80156bc <ip4_frag+0xd0>
 80156ae:	4b6c      	ldr	r3, [pc, #432]	; (8015860 <ip4_frag+0x274>)
 80156b0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80156b4:	496d      	ldr	r1, [pc, #436]	; (801586c <ip4_frag+0x280>)
 80156b6:	486c      	ldr	r0, [pc, #432]	; (8015868 <ip4_frag+0x27c>)
 80156b8:	f000 fd64 	bl	8016184 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80156bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156be:	685b      	ldr	r3, [r3, #4]
 80156c0:	2214      	movs	r2, #20
 80156c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80156c4:	4618      	mov	r0, r3
 80156c6:	f000 fd47 	bl	8016158 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80156ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156cc:	685b      	ldr	r3, [r3, #4]
 80156ce:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80156d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80156d2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80156d6:	e064      	b.n	80157a2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	895a      	ldrh	r2, [r3, #10]
 80156dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80156de:	1ad3      	subs	r3, r2, r3
 80156e0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	895b      	ldrh	r3, [r3, #10]
 80156e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80156e8:	429a      	cmp	r2, r3
 80156ea:	d906      	bls.n	80156fa <ip4_frag+0x10e>
 80156ec:	4b5c      	ldr	r3, [pc, #368]	; (8015860 <ip4_frag+0x274>)
 80156ee:	f240 322d 	movw	r2, #813	; 0x32d
 80156f2:	495f      	ldr	r1, [pc, #380]	; (8015870 <ip4_frag+0x284>)
 80156f4:	485c      	ldr	r0, [pc, #368]	; (8015868 <ip4_frag+0x27c>)
 80156f6:	f000 fd45 	bl	8016184 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80156fa:	8bfa      	ldrh	r2, [r7, #30]
 80156fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015700:	4293      	cmp	r3, r2
 8015702:	bf28      	it	cs
 8015704:	4613      	movcs	r3, r2
 8015706:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801570a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801570e:	2b00      	cmp	r3, #0
 8015710:	d105      	bne.n	801571e <ip4_frag+0x132>
        poff = 0;
 8015712:	2300      	movs	r3, #0
 8015714:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	60fb      	str	r3, [r7, #12]
        continue;
 801571c:	e041      	b.n	80157a2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801571e:	f7ff ff0d 	bl	801553c <ip_frag_alloc_pbuf_custom_ref>
 8015722:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015724:	69bb      	ldr	r3, [r7, #24]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d103      	bne.n	8015732 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801572a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801572c:	f7f7 fb92 	bl	800ce54 <pbuf_free>
        goto memerr;
 8015730:	e08f      	b.n	8015852 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015732:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015738:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801573a:	4413      	add	r3, r2
 801573c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015740:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015744:	9201      	str	r2, [sp, #4]
 8015746:	9300      	str	r3, [sp, #0]
 8015748:	4603      	mov	r3, r0
 801574a:	2241      	movs	r2, #65	; 0x41
 801574c:	2000      	movs	r0, #0
 801574e:	f7f7 f9c7 	bl	800cae0 <pbuf_alloced_custom>
 8015752:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015754:	697b      	ldr	r3, [r7, #20]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d106      	bne.n	8015768 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801575a:	69b8      	ldr	r0, [r7, #24]
 801575c:	f7ff fef6 	bl	801554c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015760:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015762:	f7f7 fb77 	bl	800ce54 <pbuf_free>
        goto memerr;
 8015766:	e074      	b.n	8015852 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015768:	68f8      	ldr	r0, [r7, #12]
 801576a:	f7f7 fc13 	bl	800cf94 <pbuf_ref>
      pcr->original = p;
 801576e:	69bb      	ldr	r3, [r7, #24]
 8015770:	68fa      	ldr	r2, [r7, #12]
 8015772:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015774:	69bb      	ldr	r3, [r7, #24]
 8015776:	4a3f      	ldr	r2, [pc, #252]	; (8015874 <ip4_frag+0x288>)
 8015778:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801577a:	6979      	ldr	r1, [r7, #20]
 801577c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801577e:	f7f7 fc2b 	bl	800cfd8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015782:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015786:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801578a:	1ad3      	subs	r3, r2, r3
 801578c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015790:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015794:	2b00      	cmp	r3, #0
 8015796:	d004      	beq.n	80157a2 <ip4_frag+0x1b6>
        poff = 0;
 8015798:	2300      	movs	r3, #0
 801579a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80157a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d196      	bne.n	80156d8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80157aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80157ac:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80157b0:	4413      	add	r3, r2
 80157b2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80157b4:	68bb      	ldr	r3, [r7, #8]
 80157b6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80157b8:	f1a3 0213 	sub.w	r2, r3, #19
 80157bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80157c0:	429a      	cmp	r2, r3
 80157c2:	bfcc      	ite	gt
 80157c4:	2301      	movgt	r3, #1
 80157c6:	2300      	movle	r3, #0
 80157c8:	b2db      	uxtb	r3, r3
 80157ca:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80157cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80157d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80157d4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80157d6:	6a3b      	ldr	r3, [r7, #32]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d002      	beq.n	80157e2 <ip4_frag+0x1f6>
 80157dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d003      	beq.n	80157ea <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80157e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80157e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80157e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80157ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80157ec:	4618      	mov	r0, r3
 80157ee:	f7f5 ffd3 	bl	800b798 <lwip_htons>
 80157f2:	4603      	mov	r3, r0
 80157f4:	461a      	mov	r2, r3
 80157f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157f8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80157fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80157fc:	3314      	adds	r3, #20
 80157fe:	b29b      	uxth	r3, r3
 8015800:	4618      	mov	r0, r3
 8015802:	f7f5 ffc9 	bl	800b798 <lwip_htons>
 8015806:	4603      	mov	r3, r0
 8015808:	461a      	mov	r2, r3
 801580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801580c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801580e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015810:	2200      	movs	r2, #0
 8015812:	729a      	strb	r2, [r3, #10]
 8015814:	2200      	movs	r2, #0
 8015816:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	695b      	ldr	r3, [r3, #20]
 801581c:	687a      	ldr	r2, [r7, #4]
 801581e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015820:	68b8      	ldr	r0, [r7, #8]
 8015822:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015826:	f7f7 fb15 	bl	800ce54 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801582a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801582e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015830:	1ad3      	subs	r3, r2, r3
 8015832:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015836:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801583a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801583c:	4413      	add	r3, r2
 801583e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015842:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015846:	2b00      	cmp	r3, #0
 8015848:	f47f af19 	bne.w	801567e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801584c:	2300      	movs	r3, #0
 801584e:	e002      	b.n	8015856 <ip4_frag+0x26a>
      goto memerr;
 8015850:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015856:	4618      	mov	r0, r3
 8015858:	3748      	adds	r7, #72	; 0x48
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	08019960 	.word	0x08019960
 8015864:	08019b3c 	.word	0x08019b3c
 8015868:	080199a8 	.word	0x080199a8
 801586c:	08019b58 	.word	0x08019b58
 8015870:	08019b78 	.word	0x08019b78
 8015874:	08015585 	.word	0x08015585

08015878 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b086      	sub	sp, #24
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
 8015880:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015882:	230e      	movs	r3, #14
 8015884:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	895b      	ldrh	r3, [r3, #10]
 801588a:	2b0e      	cmp	r3, #14
 801588c:	d96e      	bls.n	801596c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	7bdb      	ldrb	r3, [r3, #15]
 8015892:	2b00      	cmp	r3, #0
 8015894:	d106      	bne.n	80158a4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015896:	683b      	ldr	r3, [r7, #0]
 8015898:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801589c:	3301      	adds	r3, #1
 801589e:	b2da      	uxtb	r2, r3
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	685b      	ldr	r3, [r3, #4]
 80158a8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80158aa:	693b      	ldr	r3, [r7, #16]
 80158ac:	7b1a      	ldrb	r2, [r3, #12]
 80158ae:	7b5b      	ldrb	r3, [r3, #13]
 80158b0:	021b      	lsls	r3, r3, #8
 80158b2:	4313      	orrs	r3, r2
 80158b4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80158b6:	693b      	ldr	r3, [r7, #16]
 80158b8:	781b      	ldrb	r3, [r3, #0]
 80158ba:	f003 0301 	and.w	r3, r3, #1
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d023      	beq.n	801590a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	781b      	ldrb	r3, [r3, #0]
 80158c6:	2b01      	cmp	r3, #1
 80158c8:	d10f      	bne.n	80158ea <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80158ca:	693b      	ldr	r3, [r7, #16]
 80158cc:	785b      	ldrb	r3, [r3, #1]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d11b      	bne.n	801590a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80158d6:	2b5e      	cmp	r3, #94	; 0x5e
 80158d8:	d117      	bne.n	801590a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	7b5b      	ldrb	r3, [r3, #13]
 80158de:	f043 0310 	orr.w	r3, r3, #16
 80158e2:	b2da      	uxtb	r2, r3
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	735a      	strb	r2, [r3, #13]
 80158e8:	e00f      	b.n	801590a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	2206      	movs	r2, #6
 80158ee:	4928      	ldr	r1, [pc, #160]	; (8015990 <ethernet_input+0x118>)
 80158f0:	4618      	mov	r0, r3
 80158f2:	f000 fc21 	bl	8016138 <memcmp>
 80158f6:	4603      	mov	r3, r0
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d106      	bne.n	801590a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	7b5b      	ldrb	r3, [r3, #13]
 8015900:	f043 0308 	orr.w	r3, r3, #8
 8015904:	b2da      	uxtb	r2, r3
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801590a:	89fb      	ldrh	r3, [r7, #14]
 801590c:	2b08      	cmp	r3, #8
 801590e:	d003      	beq.n	8015918 <ethernet_input+0xa0>
 8015910:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015914:	d014      	beq.n	8015940 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015916:	e032      	b.n	801597e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015918:	683b      	ldr	r3, [r7, #0]
 801591a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801591e:	f003 0308 	and.w	r3, r3, #8
 8015922:	2b00      	cmp	r3, #0
 8015924:	d024      	beq.n	8015970 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015926:	8afb      	ldrh	r3, [r7, #22]
 8015928:	4619      	mov	r1, r3
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	f7f7 fa0c 	bl	800cd48 <pbuf_remove_header>
 8015930:	4603      	mov	r3, r0
 8015932:	2b00      	cmp	r3, #0
 8015934:	d11e      	bne.n	8015974 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015936:	6839      	ldr	r1, [r7, #0]
 8015938:	6878      	ldr	r0, [r7, #4]
 801593a:	f7fe ff21 	bl	8014780 <ip4_input>
      break;
 801593e:	e013      	b.n	8015968 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015946:	f003 0308 	and.w	r3, r3, #8
 801594a:	2b00      	cmp	r3, #0
 801594c:	d014      	beq.n	8015978 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801594e:	8afb      	ldrh	r3, [r7, #22]
 8015950:	4619      	mov	r1, r3
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f7f7 f9f8 	bl	800cd48 <pbuf_remove_header>
 8015958:	4603      	mov	r3, r0
 801595a:	2b00      	cmp	r3, #0
 801595c:	d10e      	bne.n	801597c <ethernet_input+0x104>
        etharp_input(p, netif);
 801595e:	6839      	ldr	r1, [r7, #0]
 8015960:	6878      	ldr	r0, [r7, #4]
 8015962:	f7fe f8c1 	bl	8013ae8 <etharp_input>
      break;
 8015966:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015968:	2300      	movs	r3, #0
 801596a:	e00c      	b.n	8015986 <ethernet_input+0x10e>
    goto free_and_return;
 801596c:	bf00      	nop
 801596e:	e006      	b.n	801597e <ethernet_input+0x106>
        goto free_and_return;
 8015970:	bf00      	nop
 8015972:	e004      	b.n	801597e <ethernet_input+0x106>
        goto free_and_return;
 8015974:	bf00      	nop
 8015976:	e002      	b.n	801597e <ethernet_input+0x106>
        goto free_and_return;
 8015978:	bf00      	nop
 801597a:	e000      	b.n	801597e <ethernet_input+0x106>
        goto free_and_return;
 801597c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801597e:	6878      	ldr	r0, [r7, #4]
 8015980:	f7f7 fa68 	bl	800ce54 <pbuf_free>
  return ERR_OK;
 8015984:	2300      	movs	r3, #0
}
 8015986:	4618      	mov	r0, r3
 8015988:	3718      	adds	r7, #24
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}
 801598e:	bf00      	nop
 8015990:	08019d40 	.word	0x08019d40

08015994 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015994:	b580      	push	{r7, lr}
 8015996:	b086      	sub	sp, #24
 8015998:	af00      	add	r7, sp, #0
 801599a:	60f8      	str	r0, [r7, #12]
 801599c:	60b9      	str	r1, [r7, #8]
 801599e:	607a      	str	r2, [r7, #4]
 80159a0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80159a2:	8c3b      	ldrh	r3, [r7, #32]
 80159a4:	4618      	mov	r0, r3
 80159a6:	f7f5 fef7 	bl	800b798 <lwip_htons>
 80159aa:	4603      	mov	r3, r0
 80159ac:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80159ae:	210e      	movs	r1, #14
 80159b0:	68b8      	ldr	r0, [r7, #8]
 80159b2:	f7f7 f9b9 	bl	800cd28 <pbuf_add_header>
 80159b6:	4603      	mov	r3, r0
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d125      	bne.n	8015a08 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80159bc:	68bb      	ldr	r3, [r7, #8]
 80159be:	685b      	ldr	r3, [r3, #4]
 80159c0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80159c2:	693b      	ldr	r3, [r7, #16]
 80159c4:	8afa      	ldrh	r2, [r7, #22]
 80159c6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80159c8:	693b      	ldr	r3, [r7, #16]
 80159ca:	2206      	movs	r2, #6
 80159cc:	6839      	ldr	r1, [r7, #0]
 80159ce:	4618      	mov	r0, r3
 80159d0:	f000 fbc2 	bl	8016158 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	3306      	adds	r3, #6
 80159d8:	2206      	movs	r2, #6
 80159da:	6879      	ldr	r1, [r7, #4]
 80159dc:	4618      	mov	r0, r3
 80159de:	f000 fbbb 	bl	8016158 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80159e8:	2b06      	cmp	r3, #6
 80159ea:	d006      	beq.n	80159fa <ethernet_output+0x66>
 80159ec:	4b0a      	ldr	r3, [pc, #40]	; (8015a18 <ethernet_output+0x84>)
 80159ee:	f44f 7299 	mov.w	r2, #306	; 0x132
 80159f2:	490a      	ldr	r1, [pc, #40]	; (8015a1c <ethernet_output+0x88>)
 80159f4:	480a      	ldr	r0, [pc, #40]	; (8015a20 <ethernet_output+0x8c>)
 80159f6:	f000 fbc5 	bl	8016184 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	699b      	ldr	r3, [r3, #24]
 80159fe:	68b9      	ldr	r1, [r7, #8]
 8015a00:	68f8      	ldr	r0, [r7, #12]
 8015a02:	4798      	blx	r3
 8015a04:	4603      	mov	r3, r0
 8015a06:	e002      	b.n	8015a0e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015a08:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015a0a:	f06f 0301 	mvn.w	r3, #1
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	3718      	adds	r7, #24
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}
 8015a16:	bf00      	nop
 8015a18:	08019b88 	.word	0x08019b88
 8015a1c:	08019bc0 	.word	0x08019bc0
 8015a20:	08019bf4 	.word	0x08019bf4

08015a24 <_write>:
	return ch;
}

/**@brief used for printf from the the terminal that connected to the port of the USB redirect printf*/
int _write(int file, char *ptr, int len)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	60f8      	str	r0, [r7, #12]
 8015a2c:	60b9      	str	r1, [r7, #8]
 8015a2e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, len, 0xFFFF);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	b29a      	uxth	r2, r3
 8015a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a38:	68b9      	ldr	r1, [r7, #8]
 8015a3a:	4804      	ldr	r0, [pc, #16]	; (8015a4c <_write+0x28>)
 8015a3c:	f7f3 fad6 	bl	8008fec <HAL_UART_Transmit>
	return len;
 8015a40:	687b      	ldr	r3, [r7, #4]
}
 8015a42:	4618      	mov	r0, r3
 8015a44:	3710      	adds	r7, #16
 8015a46:	46bd      	mov	sp, r7
 8015a48:	bd80      	pop	{r7, pc}
 8015a4a:	bf00      	nop
 8015a4c:	20000730 	.word	0x20000730

08015a50 <_read>:

/**@brief used for scanf from the the terminal that connected to the port of the USB redirect scanf*/
int _read(int file, char *ptr, int len)
{
 8015a50:	b580      	push	{r7, lr}
 8015a52:	b086      	sub	sp, #24
 8015a54:	af00      	add	r7, sp, #0
 8015a56:	60f8      	str	r0, [r7, #12]
 8015a58:	60b9      	str	r1, [r7, #8]
 8015a5a:	607a      	str	r2, [r7, #4]
	int ch=0;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUG, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8015a60:	f107 0114 	add.w	r1, r7, #20
 8015a64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a68:	2201      	movs	r2, #1
 8015a6a:	4817      	ldr	r0, [pc, #92]	; (8015ac8 <_read+0x78>)
 8015a6c:	f7f3 fb41 	bl	80090f2 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8015a70:	f107 0114 	add.w	r1, r7, #20
 8015a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a78:	2201      	movs	r2, #1
 8015a7a:	4813      	ldr	r0, [pc, #76]	; (8015ac8 <_read+0x78>)
 8015a7c:	f7f3 fab6 	bl	8008fec <HAL_UART_Transmit>
	if(ch==13)
 8015a80:	697b      	ldr	r3, [r7, #20]
 8015a82:	2b0d      	cmp	r3, #13
 8015a84:	d10a      	bne.n	8015a9c <_read+0x4c>
	{
		ch=10;
 8015a86:	230a      	movs	r3, #10
 8015a88:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8015a8a:	f107 0114 	add.w	r1, r7, #20
 8015a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a92:	2201      	movs	r2, #1
 8015a94:	480c      	ldr	r0, [pc, #48]	; (8015ac8 <_read+0x78>)
 8015a96:	f7f3 faa9 	bl	8008fec <HAL_UART_Transmit>
 8015a9a:	e00c      	b.n	8015ab6 <_read+0x66>
	}
	else if(ch==8)
 8015a9c:	697b      	ldr	r3, [r7, #20]
 8015a9e:	2b08      	cmp	r3, #8
 8015aa0:	d109      	bne.n	8015ab6 <_read+0x66>
	{
		ch=0x30;
 8015aa2:	2330      	movs	r3, #48	; 0x30
 8015aa4:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8015aa6:	f107 0114 	add.w	r1, r7, #20
 8015aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015aae:	2201      	movs	r2, #1
 8015ab0:	4805      	ldr	r0, [pc, #20]	; (8015ac8 <_read+0x78>)
 8015ab2:	f7f3 fa9b 	bl	8008fec <HAL_UART_Transmit>
	}

	*ptr=ch;
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	b2da      	uxtb	r2, r3
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	701a      	strb	r2, [r3, #0]

	return 1;
 8015abe:	2301      	movs	r3, #1
}
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	3718      	adds	r7, #24
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}
 8015ac8:	20000730 	.word	0x20000730

08015acc <I2C_UUT_DMA>:
 * @param iterations			running tests number of iterations.
 * @return number of iterations will be run, each iteration if bit pattern at start of the communication
 * 		   equals to the same as in the end RETURN 0xff TEST_FAILED, otherwise  0X01 TEST_SUCCEED.
 */
uint8_t I2C_UUT_DMA(uint8_t *bit_pattern, uint8_t bit_pattern_length, uint8_t iterations)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8015ad2:	af00      	add	r7, sp, #0
 8015ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015ad8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8015adc:	6018      	str	r0, [r3, #0]
 8015ade:	4608      	mov	r0, r1
 8015ae0:	4611      	mov	r1, r2
 8015ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015ae6:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015aea:	4602      	mov	r2, r0
 8015aec:	701a      	strb	r2, [r3, #0]
 8015aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015af2:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8015af6:	460a      	mov	r2, r1
 8015af8:	701a      	strb	r2, [r3, #0]
	/* define and declare local buffers for slave and master */
	uint8_t local_buffer_slave[MAX_I2C_SLAVE_BUFFER_SIZE] = INIT_ALL_ZERO;
 8015afa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015afe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015b02:	2200      	movs	r2, #0
 8015b04:	601a      	str	r2, [r3, #0]
 8015b06:	3304      	adds	r3, #4
 8015b08:	22fb      	movs	r2, #251	; 0xfb
 8015b0a:	2100      	movs	r1, #0
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f000 fb31 	bl	8016174 <memset>
	uint8_t local_buffer_master[MAX_I2C_MASTER_BUFFER_SIZE] = INIT_ALL_ZERO;
 8015b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015b16:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8015b1a:	2200      	movs	r2, #0
 8015b1c:	601a      	str	r2, [r3, #0]
 8015b1e:	3304      	adds	r3, #4
 8015b20:	22fb      	movs	r2, #251	; 0xfb
 8015b22:	2100      	movs	r1, #0
 8015b24:	4618      	mov	r0, r3
 8015b26:	f000 fb25 	bl	8016174 <memset>

	/* check status of receive transmit, error detection. (maby wire disconnected) */
	HAL_StatusTypeDef status = HAL_ERROR;
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	while(iterations)
 8015b30:	e076      	b.n	8015c20 <I2C_UUT_DMA+0x154>
	{
		/* Master -> Slave */
		status = HAL_I2C_Slave_Receive_DMA(I2C_SLAVE, local_buffer_slave, bit_pattern_length);
 8015b32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015b36:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015b3a:	781b      	ldrb	r3, [r3, #0]
 8015b3c:	b29a      	uxth	r2, r3
 8015b3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015b42:	4619      	mov	r1, r3
 8015b44:	483d      	ldr	r0, [pc, #244]	; (8015c3c <I2C_UUT_DMA+0x170>)
 8015b46:	f7ef f943 	bl	8004dd0 <HAL_I2C_Slave_Receive_DMA>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015b50:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d001      	beq.n	8015b5c <I2C_UUT_DMA+0x90>
		{
			return TEST_FAILED;
 8015b58:	23ff      	movs	r3, #255	; 0xff
 8015b5a:	e069      	b.n	8015c30 <I2C_UUT_DMA+0x164>
		}

		status = HAL_I2C_Master_Transmit_DMA(I2C_MASTER, I2C_SLAVE_ADDRESS, (uint8_t *)bit_pattern, bit_pattern_length);
 8015b5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015b60:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015b64:	781b      	ldrb	r3, [r3, #0]
 8015b66:	b29b      	uxth	r3, r3
 8015b68:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8015b6c:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 8015b70:	6812      	ldr	r2, [r2, #0]
 8015b72:	210f      	movs	r1, #15
 8015b74:	4832      	ldr	r0, [pc, #200]	; (8015c40 <I2C_UUT_DMA+0x174>)
 8015b76:	f7ee fe95 	bl	80048a4 <HAL_I2C_Master_Transmit_DMA>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015b80:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d001      	beq.n	8015b8c <I2C_UUT_DMA+0xc0>
		{
			return TEST_FAILED;
 8015b88:	23ff      	movs	r3, #255	; 0xff
 8015b8a:	e051      	b.n	8015c30 <I2C_UUT_DMA+0x164>
		}
		/* end commands Master -> Slave */

		/* Delay between DMA transmissions **too fast, data may not be send back properly */
		I2C_HAL_DELAY_2MS;
 8015b8c:	2002      	movs	r0, #2
 8015b8e:	f7ec fde7 	bl	8002760 <HAL_Delay>

		/* Slave -> Master */
		status = HAL_I2C_Master_Receive_DMA(I2C_MASTER, I2C_SLAVE_ADDRESS, local_buffer_master, bit_pattern_length);
 8015b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015b96:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015b9a:	781b      	ldrb	r3, [r3, #0]
 8015b9c:	b29b      	uxth	r3, r3
 8015b9e:	f107 0208 	add.w	r2, r7, #8
 8015ba2:	210f      	movs	r1, #15
 8015ba4:	4826      	ldr	r0, [pc, #152]	; (8015c40 <I2C_UUT_DMA+0x174>)
 8015ba6:	f7ee ff6d 	bl	8004a84 <HAL_I2C_Master_Receive_DMA>
 8015baa:	4603      	mov	r3, r0
 8015bac:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015bb0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d001      	beq.n	8015bbc <I2C_UUT_DMA+0xf0>
		{
			return TEST_FAILED;
 8015bb8:	23ff      	movs	r3, #255	; 0xff
 8015bba:	e039      	b.n	8015c30 <I2C_UUT_DMA+0x164>
		}

		status = HAL_I2C_Slave_Transmit_DMA(I2C_SLAVE, local_buffer_slave, bit_pattern_length);
 8015bbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015bc0:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015bc4:	781b      	ldrb	r3, [r3, #0]
 8015bc6:	b29a      	uxth	r2, r3
 8015bc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015bcc:	4619      	mov	r1, r3
 8015bce:	481b      	ldr	r0, [pc, #108]	; (8015c3c <I2C_UUT_DMA+0x170>)
 8015bd0:	f7ef f848 	bl	8004c64 <HAL_I2C_Slave_Transmit_DMA>
 8015bd4:	4603      	mov	r3, r0
 8015bd6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015bda:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d001      	beq.n	8015be6 <I2C_UUT_DMA+0x11a>
		{
			return TEST_FAILED;
 8015be2:	23ff      	movs	r3, #255	; 0xff
 8015be4:	e024      	b.n	8015c30 <I2C_UUT_DMA+0x164>
		}
		/* end commands Slave -> Master */

		/* Delay between DMA transmission to strcmp **too fast, data may not be send back properly */
		I2C_HAL_DELAY_2MS;
 8015be6:	2002      	movs	r0, #2
 8015be8:	f7ec fdba 	bl	8002760 <HAL_Delay>

		/* compare the data results at the end of communication with data given by the functions parameters */
		if(strcmp((char*)local_buffer_master, (char*)bit_pattern)!=STRCMP_EQUALS)
 8015bec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015bf0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8015bf4:	f107 0208 	add.w	r2, r7, #8
 8015bf8:	6819      	ldr	r1, [r3, #0]
 8015bfa:	4610      	mov	r0, r2
 8015bfc:	f7ea fb08 	bl	8000210 <strcmp>
 8015c00:	4603      	mov	r3, r0
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d001      	beq.n	8015c0a <I2C_UUT_DMA+0x13e>
		{
			/* test did not pass, test failed */
			return TEST_FAILED;
 8015c06:	23ff      	movs	r3, #255	; 0xff
 8015c08:	e012      	b.n	8015c30 <I2C_UUT_DMA+0x164>
		}

		--iterations;
 8015c0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015c0e:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8015c12:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8015c16:	f2a2 2206 	subw	r2, r2, #518	; 0x206
 8015c1a:	7812      	ldrb	r2, [r2, #0]
 8015c1c:	3a01      	subs	r2, #1
 8015c1e:	701a      	strb	r2, [r3, #0]
	while(iterations)
 8015c20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015c24:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8015c28:	781b      	ldrb	r3, [r3, #0]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d181      	bne.n	8015b32 <I2C_UUT_DMA+0x66>
	}

	/* test passed successfuly*/
	return TEST_SUCCEED;
 8015c2e:	2301      	movs	r3, #1
}
 8015c30:	4618      	mov	r0, r3
 8015c32:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}
 8015c3a:	bf00      	nop
 8015c3c:	200001ec 	.word	0x200001ec
 8015c40:	20000240 	.word	0x20000240

08015c44 <UUT_main>:
 */
uint8_t test_status = INIT_TO_ZERO;

/**@brief the main function to run the tests, the life of the program*/
void UUT_main(void)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	af00      	add	r7, sp, #0

	/* ******* INIT PHASE ******* */
	UDP_Client_Init();
 8015c48:	f000 f9f2 	bl	8016030 <UDP_Client_Init>
		/**
		 * @brief 	function that should be called when the Ethernet interface identify a coming packet
		 * 			because this client need to constantly receives some packets to tell it to do some tests
		 * 			its inside the while(TRUE), e.g. life loop.
		 */
		ethernetif_input(GNETIF_ADDR);
 8015c4c:	481c      	ldr	r0, [pc, #112]	; (8015cc0 <UUT_main+0x7c>)
 8015c4e:	f7f5 fb2f 	bl	800b2b0 <ethernetif_input>
		/**@brief check connection timeouts*/
		sys_check_timeouts();
 8015c52:	f7fc fe93 	bl	801297c <sys_check_timeouts>
		if(udp_packet_is_received == PACKET_RECEIVED)
 8015c56:	4b1b      	ldr	r3, [pc, #108]	; (8015cc4 <UUT_main+0x80>)
 8015c58:	781b      	ldrb	r3, [r3, #0]
 8015c5a:	2b01      	cmp	r3, #1
 8015c5c:	d1f6      	bne.n	8015c4c <UUT_main+0x8>
		{
			test_status = (UART_DMA_UUT((uint8_t*)"ShacharIsTheKing\r\n", 18,5));
 8015c5e:	2205      	movs	r2, #5
 8015c60:	2112      	movs	r1, #18
 8015c62:	4819      	ldr	r0, [pc, #100]	; (8015cc8 <UUT_main+0x84>)
 8015c64:	f000 f8e4 	bl	8015e30 <UART_DMA_UUT>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	461a      	mov	r2, r3
 8015c6c:	4b17      	ldr	r3, [pc, #92]	; (8015ccc <UUT_main+0x88>)
 8015c6e:	701a      	strb	r2, [r3, #0]
			test_status = (I2C_UUT_DMA((uint8_t*)"ShacharIsTheKing\r\n", 18,5));
 8015c70:	2205      	movs	r2, #5
 8015c72:	2112      	movs	r1, #18
 8015c74:	4814      	ldr	r0, [pc, #80]	; (8015cc8 <UUT_main+0x84>)
 8015c76:	f7ff ff29 	bl	8015acc <I2C_UUT_DMA>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	461a      	mov	r2, r3
 8015c7e:	4b13      	ldr	r3, [pc, #76]	; (8015ccc <UUT_main+0x88>)
 8015c80:	701a      	strb	r2, [r3, #0]
			test_status = (SPI_UUT_DMA((uint8_t*)"ShacharIsTheKing\r\n", 18,5));
 8015c82:	2205      	movs	r2, #5
 8015c84:	2112      	movs	r1, #18
 8015c86:	4810      	ldr	r0, [pc, #64]	; (8015cc8 <UUT_main+0x84>)
 8015c88:	f000 f826 	bl	8015cd8 <SPI_UUT_DMA>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	461a      	mov	r2, r3
 8015c90:	4b0e      	ldr	r3, [pc, #56]	; (8015ccc <UUT_main+0x88>)
 8015c92:	701a      	strb	r2, [r3, #0]

			test_status = TIMER_UUT(/*7199,9999,*/2);
 8015c94:	2002      	movs	r0, #2
 8015c96:	f000 f87f 	bl	8015d98 <TIMER_UUT>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	461a      	mov	r2, r3
 8015c9e:	4b0b      	ldr	r3, [pc, #44]	; (8015ccc <UUT_main+0x88>)
 8015ca0:	701a      	strb	r2, [r3, #0]
			buildResProtocol(*(uint32_t*)"1523\n", TEST_SUCCEED);
 8015ca2:	4b0b      	ldr	r3, [pc, #44]	; (8015cd0 <UUT_main+0x8c>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	2101      	movs	r1, #1
 8015ca8:	4618      	mov	r0, r3
 8015caa:	f000 fa0d 	bl	80160c8 <buildResProtocol>
			udpClient_send(&sentPacketData,sizeof(sentPacketData));
 8015cae:	2105      	movs	r1, #5
 8015cb0:	4808      	ldr	r0, [pc, #32]	; (8015cd4 <UUT_main+0x90>)
 8015cb2:	f000 f995 	bl	8015fe0 <udpClient_send>
			udp_packet_is_received = PACKET_NOT_RECEIVED;
 8015cb6:	4b03      	ldr	r3, [pc, #12]	; (8015cc4 <UUT_main+0x80>)
 8015cb8:	2200      	movs	r2, #0
 8015cba:	701a      	strb	r2, [r3, #0]
		ethernetif_input(GNETIF_ADDR);
 8015cbc:	e7c6      	b.n	8015c4c <UUT_main+0x8>
 8015cbe:	bf00      	nop
 8015cc0:	20000ed0 	.word	0x20000ed0
 8015cc4:	20009389 	.word	0x20009389
 8015cc8:	08019c1c 	.word	0x08019c1c
 8015ccc:	2000907a 	.word	0x2000907a
 8015cd0:	08019c30 	.word	0x08019c30
 8015cd4:	20009384 	.word	0x20009384

08015cd8 <SPI_UUT_DMA>:
uint8_t local_master_buffer[MAX_SPI_MASTER_BUFFER_SIZE] = INIT_ALL_ZERO;

uint8_t local_slave_buffer[MAX_SPI_SLAVE_BUFFER_SIZE] = INIT_ALL_ZERO;

uint8_t SPI_UUT_DMA( uint8_t *bit_pattern,  uint8_t bit_pattern_length, uint8_t iterations)
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b084      	sub	sp, #16
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
 8015ce0:	460b      	mov	r3, r1
 8015ce2:	70fb      	strb	r3, [r7, #3]
 8015ce4:	4613      	mov	r3, r2
 8015ce6:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_ERROR;
 8015ce8:	2301      	movs	r3, #1
 8015cea:	73fb      	strb	r3, [r7, #15]

	while(iterations)
 8015cec:	e02d      	b.n	8015d4a <SPI_UUT_DMA+0x72>
	{

		HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, local_slave_buffer, local_slave_buffer, bit_pattern_length);
 8015cee:	78fb      	ldrb	r3, [r7, #3]
 8015cf0:	b29b      	uxth	r3, r3
 8015cf2:	4a1a      	ldr	r2, [pc, #104]	; (8015d5c <SPI_UUT_DMA+0x84>)
 8015cf4:	4919      	ldr	r1, [pc, #100]	; (8015d5c <SPI_UUT_DMA+0x84>)
 8015cf6:	481a      	ldr	r0, [pc, #104]	; (8015d60 <SPI_UUT_DMA+0x88>)
 8015cf8:	f7f1 ffe6 	bl	8007cc8 <HAL_SPI_TransmitReceive_DMA>

		HAL_SPI_TransmitReceive_DMA(SPI_MASTER, bit_pattern, local_master_buffer, bit_pattern_length);
 8015cfc:	78fb      	ldrb	r3, [r7, #3]
 8015cfe:	b29b      	uxth	r3, r3
 8015d00:	4a18      	ldr	r2, [pc, #96]	; (8015d64 <SPI_UUT_DMA+0x8c>)
 8015d02:	6879      	ldr	r1, [r7, #4]
 8015d04:	4818      	ldr	r0, [pc, #96]	; (8015d68 <SPI_UUT_DMA+0x90>)
 8015d06:	f7f1 ffdf 	bl	8007cc8 <HAL_SPI_TransmitReceive_DMA>

		HAL_Delay(2);
 8015d0a:	2002      	movs	r0, #2
 8015d0c:	f7ec fd28 	bl	8002760 <HAL_Delay>

		HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, local_slave_buffer, local_master_buffer, bit_pattern_length);
 8015d10:	78fb      	ldrb	r3, [r7, #3]
 8015d12:	b29b      	uxth	r3, r3
 8015d14:	4a13      	ldr	r2, [pc, #76]	; (8015d64 <SPI_UUT_DMA+0x8c>)
 8015d16:	4911      	ldr	r1, [pc, #68]	; (8015d5c <SPI_UUT_DMA+0x84>)
 8015d18:	4811      	ldr	r0, [pc, #68]	; (8015d60 <SPI_UUT_DMA+0x88>)
 8015d1a:	f7f1 ffd5 	bl	8007cc8 <HAL_SPI_TransmitReceive_DMA>

		HAL_SPI_TransmitReceive_DMA(SPI_MASTER, local_master_buffer, local_master_buffer, bit_pattern_length);
 8015d1e:	78fb      	ldrb	r3, [r7, #3]
 8015d20:	b29b      	uxth	r3, r3
 8015d22:	4a10      	ldr	r2, [pc, #64]	; (8015d64 <SPI_UUT_DMA+0x8c>)
 8015d24:	490f      	ldr	r1, [pc, #60]	; (8015d64 <SPI_UUT_DMA+0x8c>)
 8015d26:	4810      	ldr	r0, [pc, #64]	; (8015d68 <SPI_UUT_DMA+0x90>)
 8015d28:	f7f1 ffce 	bl	8007cc8 <HAL_SPI_TransmitReceive_DMA>

		HAL_Delay(2);
 8015d2c:	2002      	movs	r0, #2
 8015d2e:	f7ec fd17 	bl	8002760 <HAL_Delay>

		if(strcmp((char*)local_master_buffer, (char*)bit_pattern)!=STRCMP_EQUALS)
 8015d32:	6879      	ldr	r1, [r7, #4]
 8015d34:	480b      	ldr	r0, [pc, #44]	; (8015d64 <SPI_UUT_DMA+0x8c>)
 8015d36:	f7ea fa6b 	bl	8000210 <strcmp>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d001      	beq.n	8015d44 <SPI_UUT_DMA+0x6c>
		{
			return TEST_FAILED;
 8015d40:	23ff      	movs	r3, #255	; 0xff
 8015d42:	e006      	b.n	8015d52 <SPI_UUT_DMA+0x7a>
		}

		--iterations;
 8015d44:	78bb      	ldrb	r3, [r7, #2]
 8015d46:	3b01      	subs	r3, #1
 8015d48:	70bb      	strb	r3, [r7, #2]
	while(iterations)
 8015d4a:	78bb      	ldrb	r3, [r7, #2]
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d1ce      	bne.n	8015cee <SPI_UUT_DMA+0x16>
	}

	return TEST_SUCCEED;
 8015d50:	2301      	movs	r3, #1
}
 8015d52:	4618      	mov	r0, r3
 8015d54:	3710      	adds	r7, #16
 8015d56:	46bd      	mov	sp, r7
 8015d58:	bd80      	pop	{r7, pc}
 8015d5a:	bf00      	nop
 8015d5c:	2000917c 	.word	0x2000917c
 8015d60:	20000478 	.word	0x20000478
 8015d64:	2000907c 	.word	0x2000907c
 8015d68:	20000414 	.word	0x20000414

08015d6c <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief elapsed timer callback function implementation, turn on timer flag.
 * 		  which indicates the timer ends.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015d6c:	b480      	push	{r7}
 8015d6e:	b083      	sub	sp, #12
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
	if(htim == BASIC_TIMER1_HANDLE)
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	4a06      	ldr	r2, [pc, #24]	; (8015d90 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8015d78:	4293      	cmp	r3, r2
 8015d7a:	d102      	bne.n	8015d82 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_end = TIMER_END;
 8015d7c:	4b05      	ldr	r3, [pc, #20]	; (8015d94 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8015d7e:	2201      	movs	r2, #1
 8015d80:	701a      	strb	r2, [r3, #0]
	}
}
 8015d82:	bf00      	nop
 8015d84:	370c      	adds	r7, #12
 8015d86:	46bd      	mov	sp, r7
 8015d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8c:	4770      	bx	lr
 8015d8e:	bf00      	nop
 8015d90:	2000065c 	.word	0x2000065c
 8015d94:	2000927b 	.word	0x2000927b

08015d98 <TIMER_UUT>:
 * @param 	period			the period value.
 * @param 	iterations		running the test number of iterations.
 * @return	running it number of iterations to if one of them fails return TEST_FAILED 0xff, otherwise TEST_SUCCEED 0x01
 */
uint8_t TIMER_UUT(/*uint32_t prescalar, uint32_t period,*/ uint8_t iterations)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b084      	sub	sp, #16
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	4603      	mov	r3, r0
 8015da0:	71fb      	strb	r3, [r7, #7]
//	//TIM master configurations
//	TIM_MasterConfigTypeDef sMasterConfig = INIT_ALL_ZERO;
	double timer_elaps_time = (double)(((*BASIC_TIMER1_HANDLE).Init.Prescaler+PRESCALAR_ADDED_VAL)*((*BASIC_TIMER1_HANDLE).Init.Period+PERIOD_ADDED_VAL))/SYS_CLK_FREQ;
 8015da2:	4b21      	ldr	r3, [pc, #132]	; (8015e28 <TIMER_UUT+0x90>)
 8015da4:	685b      	ldr	r3, [r3, #4]
 8015da6:	3301      	adds	r3, #1
 8015da8:	4a1f      	ldr	r2, [pc, #124]	; (8015e28 <TIMER_UUT+0x90>)
 8015daa:	68d2      	ldr	r2, [r2, #12]
 8015dac:	3201      	adds	r2, #1
 8015dae:	fb02 f303 	mul.w	r3, r2, r3
 8015db2:	4618      	mov	r0, r3
 8015db4:	f7ea fbce 	bl	8000554 <__aeabi_ui2d>
 8015db8:	a319      	add	r3, pc, #100	; (adr r3, 8015e20 <TIMER_UUT+0x88>)
 8015dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dbe:	f7ea fd6d 	bl	800089c <__aeabi_ddiv>
 8015dc2:	4602      	mov	r2, r0
 8015dc4:	460b      	mov	r3, r1
 8015dc6:	e9c7 2302 	strd	r2, r3, [r7, #8]
//		Error_Handler();
//	}


	/* test phase */
	while(iterations)
 8015dca:	e01f      	b.n	8015e0c <TIMER_UUT+0x74>
	{
		/* start timer*/
		HAL_TIM_Base_Start_IT(BASIC_TIMER1_HANDLE);
 8015dcc:	4816      	ldr	r0, [pc, #88]	; (8015e28 <TIMER_UUT+0x90>)
 8015dce:	f7f2 fd85 	bl	80088dc <HAL_TIM_Base_Start_IT>

		/* delay for checking the elapsing time of the timer. */
		HAL_Delay(timer_elaps_time);
 8015dd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8015dd6:	f7ea fe49 	bl	8000a6c <__aeabi_d2uiz>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	4618      	mov	r0, r3
 8015dde:	f7ec fcbf 	bl	8002760 <HAL_Delay>

		if(timer_end != TIMER_END)
 8015de2:	4b12      	ldr	r3, [pc, #72]	; (8015e2c <TIMER_UUT+0x94>)
 8015de4:	781b      	ldrb	r3, [r3, #0]
 8015de6:	2b01      	cmp	r3, #1
 8015de8:	d007      	beq.n	8015dfa <TIMER_UUT+0x62>
		{
			/* stops the timer */
			HAL_TIM_Base_Stop_IT(BASIC_TIMER1_HANDLE);
 8015dea:	480f      	ldr	r0, [pc, #60]	; (8015e28 <TIMER_UUT+0x90>)
 8015dec:	f7f2 fdee 	bl	80089cc <HAL_TIM_Base_Stop_IT>

			timer_end = TIMER_NOT_END;
 8015df0:	4b0e      	ldr	r3, [pc, #56]	; (8015e2c <TIMER_UUT+0x94>)
 8015df2:	2200      	movs	r2, #0
 8015df4:	701a      	strb	r2, [r3, #0]

			return TEST_FAILED;
 8015df6:	23ff      	movs	r3, #255	; 0xff
 8015df8:	e00c      	b.n	8015e14 <TIMER_UUT+0x7c>
		}

		/* stops the timer */
		HAL_TIM_Base_Stop_IT(BASIC_TIMER1_HANDLE);
 8015dfa:	480b      	ldr	r0, [pc, #44]	; (8015e28 <TIMER_UUT+0x90>)
 8015dfc:	f7f2 fde6 	bl	80089cc <HAL_TIM_Base_Stop_IT>

		timer_end = TIMER_NOT_END;
 8015e00:	4b0a      	ldr	r3, [pc, #40]	; (8015e2c <TIMER_UUT+0x94>)
 8015e02:	2200      	movs	r2, #0
 8015e04:	701a      	strb	r2, [r3, #0]

		--iterations;
 8015e06:	79fb      	ldrb	r3, [r7, #7]
 8015e08:	3b01      	subs	r3, #1
 8015e0a:	71fb      	strb	r3, [r7, #7]
	while(iterations)
 8015e0c:	79fb      	ldrb	r3, [r7, #7]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d1dc      	bne.n	8015dcc <TIMER_UUT+0x34>
	}
	return TEST_SUCCEED;
 8015e12:	2301      	movs	r3, #1
}
 8015e14:	4618      	mov	r0, r3
 8015e16:	3710      	adds	r7, #16
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bd80      	pop	{r7, pc}
 8015e1c:	f3af 8000 	nop.w
 8015e20:	00000000 	.word	0x00000000
 8015e24:	41912a88 	.word	0x41912a88
 8015e28:	2000065c 	.word	0x2000065c
 8015e2c:	2000927b 	.word	0x2000927b

08015e30 <UART_DMA_UUT>:
 * @param iterations			running tests number of iterations.
 * @return number of iterations will be run, each iteration if bit pattern at start of the communication
 * 		   equals to the same as in the end RETURN 0xff TEST_FAILED, otherwise  0X01 TEST_SUCCEED.
 */
uint8_t UART_DMA_UUT(uint8_t *bit_pattern, uint8_t bit_pattern_length, uint8_t iterations)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8015e36:	af00      	add	r7, sp, #0
 8015e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015e3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8015e40:	6018      	str	r0, [r3, #0]
 8015e42:	4608      	mov	r0, r1
 8015e44:	4611      	mov	r1, r2
 8015e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015e4a:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015e4e:	4602      	mov	r2, r0
 8015e50:	701a      	strb	r2, [r3, #0]
 8015e52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015e56:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8015e5a:	460a      	mov	r2, r1
 8015e5c:	701a      	strb	r2, [r3, #0]
	/* define and declare local buffers for device 1 and device 0 */
	uint8_t local_buffer_dev_1[MAX_UART_DEV1_BUFFER_SIZE] = INIT_ALL_ZERO;
 8015e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015e62:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015e66:	2200      	movs	r2, #0
 8015e68:	601a      	str	r2, [r3, #0]
 8015e6a:	3304      	adds	r3, #4
 8015e6c:	22fb      	movs	r2, #251	; 0xfb
 8015e6e:	2100      	movs	r1, #0
 8015e70:	4618      	mov	r0, r3
 8015e72:	f000 f97f 	bl	8016174 <memset>
	uint8_t local_buffer_dev_0[MAX_UART_DEV0_BUFFER_SIZE] = INIT_ALL_ZERO;
 8015e76:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015e7a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8015e7e:	2200      	movs	r2, #0
 8015e80:	601a      	str	r2, [r3, #0]
 8015e82:	3304      	adds	r3, #4
 8015e84:	22fb      	movs	r2, #251	; 0xfb
 8015e86:	2100      	movs	r1, #0
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f000 f973 	bl	8016174 <memset>

	/* check status of receive transmit, error detection. (maby wire disconnected) */
	HAL_StatusTypeDef status = HAL_ERROR;
 8015e8e:	2301      	movs	r3, #1
 8015e90:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	while(iterations)
 8015e94:	e075      	b.n	8015f82 <UART_DMA_UUT+0x152>
	{
		/* DEVICE 1 -> DEVICE 0 */
		status = HAL_UART_Receive_DMA(UART_DEVICE_0, local_buffer_dev_0, bit_pattern_length);
 8015e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015e9a:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015e9e:	781b      	ldrb	r3, [r3, #0]
 8015ea0:	b29a      	uxth	r2, r3
 8015ea2:	f107 0308 	add.w	r3, r7, #8
 8015ea6:	4619      	mov	r1, r3
 8015ea8:	483c      	ldr	r0, [pc, #240]	; (8015f9c <UART_DMA_UUT+0x16c>)
 8015eaa:	f7f3 fa63 	bl	8009374 <HAL_UART_Receive_DMA>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015eb4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d001      	beq.n	8015ec0 <UART_DMA_UUT+0x90>
		{
			return TEST_FAILED;
 8015ebc:	23ff      	movs	r3, #255	; 0xff
 8015ebe:	e068      	b.n	8015f92 <UART_DMA_UUT+0x162>
		}

		status = HAL_UART_Transmit_DMA(UART_DEVICE_1, bit_pattern, bit_pattern_length);
 8015ec0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015ec4:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015ec8:	781b      	ldrb	r3, [r3, #0]
 8015eca:	b29a      	uxth	r2, r3
 8015ecc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015ed0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8015ed4:	6819      	ldr	r1, [r3, #0]
 8015ed6:	4832      	ldr	r0, [pc, #200]	; (8015fa0 <UART_DMA_UUT+0x170>)
 8015ed8:	f7f3 f9d0 	bl	800927c <HAL_UART_Transmit_DMA>
 8015edc:	4603      	mov	r3, r0
 8015ede:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015ee2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d001      	beq.n	8015eee <UART_DMA_UUT+0xbe>
		{
			return TEST_FAILED;
 8015eea:	23ff      	movs	r3, #255	; 0xff
 8015eec:	e051      	b.n	8015f92 <UART_DMA_UUT+0x162>
		}
		/* end commands DEVICE 1 -> DEVICE 0 */

		/* Delay between DMA transmissions **too fast, data may be send back properly */
		UART_HAL_DELAY_1MS;
 8015eee:	2001      	movs	r0, #1
 8015ef0:	f7ec fc36 	bl	8002760 <HAL_Delay>

		/* DEVICE 0 -> DEVICE 1 */
		status = HAL_UART_Receive_DMA(UART_DEVICE_1, local_buffer_dev_1, bit_pattern_length);
 8015ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015ef8:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	b29a      	uxth	r2, r3
 8015f00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015f04:	4619      	mov	r1, r3
 8015f06:	4826      	ldr	r0, [pc, #152]	; (8015fa0 <UART_DMA_UUT+0x170>)
 8015f08:	f7f3 fa34 	bl	8009374 <HAL_UART_Receive_DMA>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015f12:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d001      	beq.n	8015f1e <UART_DMA_UUT+0xee>
		{
			return TEST_FAILED;
 8015f1a:	23ff      	movs	r3, #255	; 0xff
 8015f1c:	e039      	b.n	8015f92 <UART_DMA_UUT+0x162>
		}

		status = HAL_UART_Transmit_DMA(UART_DEVICE_0, local_buffer_dev_0, bit_pattern_length);
 8015f1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015f22:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015f26:	781b      	ldrb	r3, [r3, #0]
 8015f28:	b29a      	uxth	r2, r3
 8015f2a:	f107 0308 	add.w	r3, r7, #8
 8015f2e:	4619      	mov	r1, r3
 8015f30:	481a      	ldr	r0, [pc, #104]	; (8015f9c <UART_DMA_UUT+0x16c>)
 8015f32:	f7f3 f9a3 	bl	800927c <HAL_UART_Transmit_DMA>
 8015f36:	4603      	mov	r3, r0
 8015f38:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015f3c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d001      	beq.n	8015f48 <UART_DMA_UUT+0x118>
		{
			return TEST_FAILED;
 8015f44:	23ff      	movs	r3, #255	; 0xff
 8015f46:	e024      	b.n	8015f92 <UART_DMA_UUT+0x162>
		}
		/* end commands DEVICE 0 -> DEVICE 1 */

		/* Delay between DMA transmission to strcmp **too fast, data may not be send back properly */
		UART_HAL_DELAY_1MS;
 8015f48:	2001      	movs	r0, #1
 8015f4a:	f7ec fc09 	bl	8002760 <HAL_Delay>

		/* compare the data results at the end of communication with data given by the functions parameters */
		if(strcmp((char*)local_buffer_dev_1, (char*)bit_pattern)!=STRCMP_EQUALS)
 8015f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015f52:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8015f56:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8015f5a:	6819      	ldr	r1, [r3, #0]
 8015f5c:	4610      	mov	r0, r2
 8015f5e:	f7ea f957 	bl	8000210 <strcmp>
 8015f62:	4603      	mov	r3, r0
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d001      	beq.n	8015f6c <UART_DMA_UUT+0x13c>
		{
			/* test did not pass, test failed */
			return TEST_FAILED;
 8015f68:	23ff      	movs	r3, #255	; 0xff
 8015f6a:	e012      	b.n	8015f92 <UART_DMA_UUT+0x162>
		}

		--iterations;
 8015f6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015f70:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8015f74:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8015f78:	f2a2 2206 	subw	r2, r2, #518	; 0x206
 8015f7c:	7812      	ldrb	r2, [r2, #0]
 8015f7e:	3a01      	subs	r2, #1
 8015f80:	701a      	strb	r2, [r3, #0]
	while(iterations)
 8015f82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015f86:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8015f8a:	781b      	ldrb	r3, [r3, #0]
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d182      	bne.n	8015e96 <UART_DMA_UUT+0x66>
	}

	/* test passed successfuly*/
	return TEST_SUCCEED;
 8015f90:	2301      	movs	r3, #1
}
 8015f92:	4618      	mov	r0, r3
 8015f94:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd80      	pop	{r7, pc}
 8015f9c:	200007b8 	.word	0x200007b8
 8015fa0:	200006a8 	.word	0x200006a8

08015fa4 <udp_receive_callback>:
* @param p		the packet buffer that was received
* @param addr	the remote IP address from which the packet was received
* @param port	the remote port from which the packet was received
*/
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b084      	sub	sp, #16
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	60f8      	str	r0, [r7, #12]
 8015fac:	60b9      	str	r1, [r7, #8]
 8015fae:	607a      	str	r2, [r7, #4]
 8015fb0:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	memcpy((char*)&receivedPacketData, (char *)p->payload, p->len);
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	6859      	ldr	r1, [r3, #4]
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	895b      	ldrh	r3, [r3, #10]
 8015fba:	461a      	mov	r2, r3
 8015fbc:	4806      	ldr	r0, [pc, #24]	; (8015fd8 <udp_receive_callback+0x34>)
 8015fbe:	f000 f8cb 	bl	8016158 <memcpy>

	udp_packet_is_received = PACKET_RECEIVED;
 8015fc2:	4b06      	ldr	r3, [pc, #24]	; (8015fdc <udp_receive_callback+0x38>)
 8015fc4:	2201      	movs	r2, #1
 8015fc6:	701a      	strb	r2, [r3, #0]

	/* Free receive pbuf */
	pbuf_free(p);
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f7f6 ff43 	bl	800ce54 <pbuf_free>
}
 8015fce:	bf00      	nop
 8015fd0:	3710      	adds	r7, #16
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	2000927c 	.word	0x2000927c
 8015fdc:	20009389 	.word	0x20009389

08015fe0 <udpClient_send>:
 * @param [in] pdata	 - pointer to the resultProtocol structure variable (sentPacketData)
 * 		 			 	   to send to the server via UDP
 * @param [in] data_size - the size of the data to send back to the server via UDP.
 */
void udpClient_send(res_prtcl *pdata, size_t data_size)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b084      	sub	sp, #16
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
 8015fe8:	6039      	str	r1, [r7, #0]
  /* allocate pbuf from pool*/
  struct pbuf *txBuf = pbuf_alloc(PBUF_TRANSPORT, data_size, PBUF_RAM);
 8015fea:	683b      	ldr	r3, [r7, #0]
 8015fec:	b29b      	uxth	r3, r3
 8015fee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ff2:	4619      	mov	r1, r3
 8015ff4:	2036      	movs	r0, #54	; 0x36
 8015ff6:	f7f6 fc49 	bl	800c88c <pbuf_alloc>
 8015ffa:	60f8      	str	r0, [r7, #12]

  if (txBuf != NULL)
 8015ffc:	68fb      	ldr	r3, [r7, #12]
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d00f      	beq.n	8016022 <udpClient_send+0x42>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, (char*)pdata, data_size);
 8016002:	683b      	ldr	r3, [r7, #0]
 8016004:	b29b      	uxth	r3, r3
 8016006:	461a      	mov	r2, r3
 8016008:	6879      	ldr	r1, [r7, #4]
 801600a:	68f8      	ldr	r0, [r7, #12]
 801600c:	f7f7 f98e 	bl	800d32c <pbuf_take>

    /* send udp data */
    udp_send(my_upcb, txBuf);
 8016010:	4b06      	ldr	r3, [pc, #24]	; (801602c <udpClient_send+0x4c>)
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	68f9      	ldr	r1, [r7, #12]
 8016016:	4618      	mov	r0, r3
 8016018:	f7fc feb4 	bl	8012d84 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 801601c:	68f8      	ldr	r0, [r7, #12]
 801601e:	f7f6 ff19 	bl	800ce54 <pbuf_free>
  }
}
 8016022:	bf00      	nop
 8016024:	3710      	adds	r7, #16
 8016026:	46bd      	mov	sp, r7
 8016028:	bd80      	pop	{r7, pc}
 801602a:	bf00      	nop
 801602c:	2000938c 	.word	0x2000938c

08016030 <UDP_Client_Init>:
/**
 * @fn 		void UDP_Client_Init(void)
 * @brief	initialize a UDP connection
 */
void UDP_Client_Init(void)
{
 8016030:	b580      	push	{r7, lr}
 8016032:	b084      	sub	sp, #16
 8016034:	af00      	add	r7, sp, #0

	err_t err;

	/* 1. Create a new UDP control block  */
	my_upcb = udp_new();
 8016036:	f7fd f9e7 	bl	8013408 <udp_new>
 801603a:	4603      	mov	r3, r0
 801603c:	4a1c      	ldr	r2, [pc, #112]	; (80160b0 <UDP_Client_Init+0x80>)
 801603e:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	CONVERTED_SRC_IP_ADDR(myIPaddr);
 8016040:	4b1c      	ldr	r3, [pc, #112]	; (80160b4 <UDP_Client_Init+0x84>)
 8016042:	60bb      	str	r3, [r7, #8]
	udp_bind(my_upcb, &myIPaddr, SRC_PORT);
 8016044:	4b1a      	ldr	r3, [pc, #104]	; (80160b0 <UDP_Client_Init+0x80>)
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	f107 0108 	add.w	r1, r7, #8
 801604c:	f64c 3220 	movw	r2, #52000	; 0xcb20
 8016050:	4618      	mov	r0, r3
 8016052:	f7fd f881 	bl	8013158 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	CONVERTED_DST_IP_ADDR(DestIPaddr);
 8016056:	4b18      	ldr	r3, [pc, #96]	; (80160b8 <UDP_Client_Init+0x88>)
 8016058:	607b      	str	r3, [r7, #4]
	err= udp_connect(my_upcb, &DestIPaddr, DST_PORT);
 801605a:	4b15      	ldr	r3, [pc, #84]	; (80160b0 <UDP_Client_Init+0x80>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	1d39      	adds	r1, r7, #4
 8016060:	f24e 2290 	movw	r2, #58000	; 0xe290
 8016064:	4618      	mov	r0, r3
 8016066:	f7fd f8ff 	bl	8013268 <udp_connect>
 801606a:	4603      	mov	r3, r0
 801606c:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 801606e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d113      	bne.n	801609e <UDP_Client_Init+0x6e>
	{
		/* 2. Send message to server */
		/* the first data to send via UDP*/
		buildResProtocol(*(uint32_t*)"Test\r", *(uint8_t*)'\n');
 8016076:	4b11      	ldr	r3, [pc, #68]	; (80160bc <UDP_Client_Init+0x8c>)
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	220a      	movs	r2, #10
 801607c:	7812      	ldrb	r2, [r2, #0]
 801607e:	4611      	mov	r1, r2
 8016080:	4618      	mov	r0, r3
 8016082:	f000 f821 	bl	80160c8 <buildResProtocol>

		udpClient_send(&sentPacketData,sizeof(sentPacketData));
 8016086:	2105      	movs	r1, #5
 8016088:	480d      	ldr	r0, [pc, #52]	; (80160c0 <UDP_Client_Init+0x90>)
 801608a:	f7ff ffa9 	bl	8015fe0 <udpClient_send>

		/* 3. Set a receive callback for the upcb */
		udp_recv(my_upcb, udp_receive_callback, NULL);
 801608e:	4b08      	ldr	r3, [pc, #32]	; (80160b0 <UDP_Client_Init+0x80>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	2200      	movs	r2, #0
 8016094:	490b      	ldr	r1, [pc, #44]	; (80160c4 <UDP_Client_Init+0x94>)
 8016096:	4618      	mov	r0, r3
 8016098:	f7fd f954 	bl	8013344 <udp_recv>
	}
	else
	{
		udp_remove(my_upcb);
	}
}
 801609c:	e004      	b.n	80160a8 <UDP_Client_Init+0x78>
		udp_remove(my_upcb);
 801609e:	4b04      	ldr	r3, [pc, #16]	; (80160b0 <UDP_Client_Init+0x80>)
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	4618      	mov	r0, r3
 80160a4:	f7fd f96e 	bl	8013384 <udp_remove>
}
 80160a8:	bf00      	nop
 80160aa:	3710      	adds	r7, #16
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}
 80160b0:	2000938c 	.word	0x2000938c
 80160b4:	0201a8c0 	.word	0x0201a8c0
 80160b8:	0101a8c0 	.word	0x0101a8c0
 80160bc:	08019c38 	.word	0x08019c38
 80160c0:	20009384 	.word	0x20009384
 80160c4:	08015fa5 	.word	0x08015fa5

080160c8 <buildResProtocol>:
 * @brief build resultProtocol structure variable (sentPacketData) to send via UDP
 * @param [in] test_id 			- the test identifier.
 * @param [in] is_test_succeed 	- the result of the test 0x01 if the passed successfully, 0xff otherwise.
 */
void buildResProtocol(uint32_t test_id, uint8_t is_test_succeed)
{
 80160c8:	b480      	push	{r7}
 80160ca:	b083      	sub	sp, #12
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
 80160d0:	460b      	mov	r3, r1
 80160d2:	70fb      	strb	r3, [r7, #3]
	sentPacketData.testId = test_id;
 80160d4:	4a05      	ldr	r2, [pc, #20]	; (80160ec <buildResProtocol+0x24>)
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	6013      	str	r3, [r2, #0]
	sentPacketData.testResult = is_test_succeed;
 80160da:	4a04      	ldr	r2, [pc, #16]	; (80160ec <buildResProtocol+0x24>)
 80160dc:	78fb      	ldrb	r3, [r7, #3]
 80160de:	7113      	strb	r3, [r2, #4]
}
 80160e0:	bf00      	nop
 80160e2:	370c      	adds	r7, #12
 80160e4:	46bd      	mov	sp, r7
 80160e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160ea:	4770      	bx	lr
 80160ec:	20009384 	.word	0x20009384

080160f0 <__libc_init_array>:
 80160f0:	b570      	push	{r4, r5, r6, lr}
 80160f2:	4d0d      	ldr	r5, [pc, #52]	; (8016128 <__libc_init_array+0x38>)
 80160f4:	4c0d      	ldr	r4, [pc, #52]	; (801612c <__libc_init_array+0x3c>)
 80160f6:	1b64      	subs	r4, r4, r5
 80160f8:	10a4      	asrs	r4, r4, #2
 80160fa:	2600      	movs	r6, #0
 80160fc:	42a6      	cmp	r6, r4
 80160fe:	d109      	bne.n	8016114 <__libc_init_array+0x24>
 8016100:	4d0b      	ldr	r5, [pc, #44]	; (8016130 <__libc_init_array+0x40>)
 8016102:	4c0c      	ldr	r4, [pc, #48]	; (8016134 <__libc_init_array+0x44>)
 8016104:	f001 f88e 	bl	8017224 <_init>
 8016108:	1b64      	subs	r4, r4, r5
 801610a:	10a4      	asrs	r4, r4, #2
 801610c:	2600      	movs	r6, #0
 801610e:	42a6      	cmp	r6, r4
 8016110:	d105      	bne.n	801611e <__libc_init_array+0x2e>
 8016112:	bd70      	pop	{r4, r5, r6, pc}
 8016114:	f855 3b04 	ldr.w	r3, [r5], #4
 8016118:	4798      	blx	r3
 801611a:	3601      	adds	r6, #1
 801611c:	e7ee      	b.n	80160fc <__libc_init_array+0xc>
 801611e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016122:	4798      	blx	r3
 8016124:	3601      	adds	r6, #1
 8016126:	e7f2      	b.n	801610e <__libc_init_array+0x1e>
 8016128:	08019ea0 	.word	0x08019ea0
 801612c:	08019ea0 	.word	0x08019ea0
 8016130:	08019ea0 	.word	0x08019ea0
 8016134:	08019ea4 	.word	0x08019ea4

08016138 <memcmp>:
 8016138:	b510      	push	{r4, lr}
 801613a:	3901      	subs	r1, #1
 801613c:	4402      	add	r2, r0
 801613e:	4290      	cmp	r0, r2
 8016140:	d101      	bne.n	8016146 <memcmp+0xe>
 8016142:	2000      	movs	r0, #0
 8016144:	e005      	b.n	8016152 <memcmp+0x1a>
 8016146:	7803      	ldrb	r3, [r0, #0]
 8016148:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801614c:	42a3      	cmp	r3, r4
 801614e:	d001      	beq.n	8016154 <memcmp+0x1c>
 8016150:	1b18      	subs	r0, r3, r4
 8016152:	bd10      	pop	{r4, pc}
 8016154:	3001      	adds	r0, #1
 8016156:	e7f2      	b.n	801613e <memcmp+0x6>

08016158 <memcpy>:
 8016158:	440a      	add	r2, r1
 801615a:	4291      	cmp	r1, r2
 801615c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016160:	d100      	bne.n	8016164 <memcpy+0xc>
 8016162:	4770      	bx	lr
 8016164:	b510      	push	{r4, lr}
 8016166:	f811 4b01 	ldrb.w	r4, [r1], #1
 801616a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801616e:	4291      	cmp	r1, r2
 8016170:	d1f9      	bne.n	8016166 <memcpy+0xe>
 8016172:	bd10      	pop	{r4, pc}

08016174 <memset>:
 8016174:	4402      	add	r2, r0
 8016176:	4603      	mov	r3, r0
 8016178:	4293      	cmp	r3, r2
 801617a:	d100      	bne.n	801617e <memset+0xa>
 801617c:	4770      	bx	lr
 801617e:	f803 1b01 	strb.w	r1, [r3], #1
 8016182:	e7f9      	b.n	8016178 <memset+0x4>

08016184 <iprintf>:
 8016184:	b40f      	push	{r0, r1, r2, r3}
 8016186:	4b0a      	ldr	r3, [pc, #40]	; (80161b0 <iprintf+0x2c>)
 8016188:	b513      	push	{r0, r1, r4, lr}
 801618a:	681c      	ldr	r4, [r3, #0]
 801618c:	b124      	cbz	r4, 8016198 <iprintf+0x14>
 801618e:	69a3      	ldr	r3, [r4, #24]
 8016190:	b913      	cbnz	r3, 8016198 <iprintf+0x14>
 8016192:	4620      	mov	r0, r4
 8016194:	f000 f8c2 	bl	801631c <__sinit>
 8016198:	ab05      	add	r3, sp, #20
 801619a:	9a04      	ldr	r2, [sp, #16]
 801619c:	68a1      	ldr	r1, [r4, #8]
 801619e:	9301      	str	r3, [sp, #4]
 80161a0:	4620      	mov	r0, r4
 80161a2:	f000 fa7f 	bl	80166a4 <_vfiprintf_r>
 80161a6:	b002      	add	sp, #8
 80161a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161ac:	b004      	add	sp, #16
 80161ae:	4770      	bx	lr
 80161b0:	2000002c 	.word	0x2000002c

080161b4 <rand>:
 80161b4:	4b16      	ldr	r3, [pc, #88]	; (8016210 <rand+0x5c>)
 80161b6:	b510      	push	{r4, lr}
 80161b8:	681c      	ldr	r4, [r3, #0]
 80161ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80161bc:	b9b3      	cbnz	r3, 80161ec <rand+0x38>
 80161be:	2018      	movs	r0, #24
 80161c0:	f000 f95e 	bl	8016480 <malloc>
 80161c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80161c6:	b928      	cbnz	r0, 80161d4 <rand+0x20>
 80161c8:	4602      	mov	r2, r0
 80161ca:	4b12      	ldr	r3, [pc, #72]	; (8016214 <rand+0x60>)
 80161cc:	4812      	ldr	r0, [pc, #72]	; (8016218 <rand+0x64>)
 80161ce:	214e      	movs	r1, #78	; 0x4e
 80161d0:	f000 f82e 	bl	8016230 <__assert_func>
 80161d4:	4a11      	ldr	r2, [pc, #68]	; (801621c <rand+0x68>)
 80161d6:	4b12      	ldr	r3, [pc, #72]	; (8016220 <rand+0x6c>)
 80161d8:	e9c0 2300 	strd	r2, r3, [r0]
 80161dc:	4b11      	ldr	r3, [pc, #68]	; (8016224 <rand+0x70>)
 80161de:	6083      	str	r3, [r0, #8]
 80161e0:	230b      	movs	r3, #11
 80161e2:	8183      	strh	r3, [r0, #12]
 80161e4:	2201      	movs	r2, #1
 80161e6:	2300      	movs	r3, #0
 80161e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80161ec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80161ee:	4a0e      	ldr	r2, [pc, #56]	; (8016228 <rand+0x74>)
 80161f0:	6920      	ldr	r0, [r4, #16]
 80161f2:	6963      	ldr	r3, [r4, #20]
 80161f4:	490d      	ldr	r1, [pc, #52]	; (801622c <rand+0x78>)
 80161f6:	4342      	muls	r2, r0
 80161f8:	fb01 2203 	mla	r2, r1, r3, r2
 80161fc:	fba0 0101 	umull	r0, r1, r0, r1
 8016200:	1c43      	adds	r3, r0, #1
 8016202:	eb42 0001 	adc.w	r0, r2, r1
 8016206:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801620a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801620e:	bd10      	pop	{r4, pc}
 8016210:	2000002c 	.word	0x2000002c
 8016214:	08019d54 	.word	0x08019d54
 8016218:	08019d6b 	.word	0x08019d6b
 801621c:	abcd330e 	.word	0xabcd330e
 8016220:	e66d1234 	.word	0xe66d1234
 8016224:	0005deec 	.word	0x0005deec
 8016228:	5851f42d 	.word	0x5851f42d
 801622c:	4c957f2d 	.word	0x4c957f2d

08016230 <__assert_func>:
 8016230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016232:	4614      	mov	r4, r2
 8016234:	461a      	mov	r2, r3
 8016236:	4b09      	ldr	r3, [pc, #36]	; (801625c <__assert_func+0x2c>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	4605      	mov	r5, r0
 801623c:	68d8      	ldr	r0, [r3, #12]
 801623e:	b14c      	cbz	r4, 8016254 <__assert_func+0x24>
 8016240:	4b07      	ldr	r3, [pc, #28]	; (8016260 <__assert_func+0x30>)
 8016242:	9100      	str	r1, [sp, #0]
 8016244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016248:	4906      	ldr	r1, [pc, #24]	; (8016264 <__assert_func+0x34>)
 801624a:	462b      	mov	r3, r5
 801624c:	f000 f8e4 	bl	8016418 <fiprintf>
 8016250:	f000 fe12 	bl	8016e78 <abort>
 8016254:	4b04      	ldr	r3, [pc, #16]	; (8016268 <__assert_func+0x38>)
 8016256:	461c      	mov	r4, r3
 8016258:	e7f3      	b.n	8016242 <__assert_func+0x12>
 801625a:	bf00      	nop
 801625c:	2000002c 	.word	0x2000002c
 8016260:	08019dc6 	.word	0x08019dc6
 8016264:	08019dd3 	.word	0x08019dd3
 8016268:	08019e01 	.word	0x08019e01

0801626c <std>:
 801626c:	2300      	movs	r3, #0
 801626e:	b510      	push	{r4, lr}
 8016270:	4604      	mov	r4, r0
 8016272:	e9c0 3300 	strd	r3, r3, [r0]
 8016276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801627a:	6083      	str	r3, [r0, #8]
 801627c:	8181      	strh	r1, [r0, #12]
 801627e:	6643      	str	r3, [r0, #100]	; 0x64
 8016280:	81c2      	strh	r2, [r0, #14]
 8016282:	6183      	str	r3, [r0, #24]
 8016284:	4619      	mov	r1, r3
 8016286:	2208      	movs	r2, #8
 8016288:	305c      	adds	r0, #92	; 0x5c
 801628a:	f7ff ff73 	bl	8016174 <memset>
 801628e:	4b05      	ldr	r3, [pc, #20]	; (80162a4 <std+0x38>)
 8016290:	6263      	str	r3, [r4, #36]	; 0x24
 8016292:	4b05      	ldr	r3, [pc, #20]	; (80162a8 <std+0x3c>)
 8016294:	62a3      	str	r3, [r4, #40]	; 0x28
 8016296:	4b05      	ldr	r3, [pc, #20]	; (80162ac <std+0x40>)
 8016298:	62e3      	str	r3, [r4, #44]	; 0x2c
 801629a:	4b05      	ldr	r3, [pc, #20]	; (80162b0 <std+0x44>)
 801629c:	6224      	str	r4, [r4, #32]
 801629e:	6323      	str	r3, [r4, #48]	; 0x30
 80162a0:	bd10      	pop	{r4, pc}
 80162a2:	bf00      	nop
 80162a4:	08016c4d 	.word	0x08016c4d
 80162a8:	08016c6f 	.word	0x08016c6f
 80162ac:	08016ca7 	.word	0x08016ca7
 80162b0:	08016ccb 	.word	0x08016ccb

080162b4 <_cleanup_r>:
 80162b4:	4901      	ldr	r1, [pc, #4]	; (80162bc <_cleanup_r+0x8>)
 80162b6:	f000 b8c1 	b.w	801643c <_fwalk_reent>
 80162ba:	bf00      	nop
 80162bc:	08016fb5 	.word	0x08016fb5

080162c0 <__sfmoreglue>:
 80162c0:	b570      	push	{r4, r5, r6, lr}
 80162c2:	2268      	movs	r2, #104	; 0x68
 80162c4:	1e4d      	subs	r5, r1, #1
 80162c6:	4355      	muls	r5, r2
 80162c8:	460e      	mov	r6, r1
 80162ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80162ce:	f000 f94b 	bl	8016568 <_malloc_r>
 80162d2:	4604      	mov	r4, r0
 80162d4:	b140      	cbz	r0, 80162e8 <__sfmoreglue+0x28>
 80162d6:	2100      	movs	r1, #0
 80162d8:	e9c0 1600 	strd	r1, r6, [r0]
 80162dc:	300c      	adds	r0, #12
 80162de:	60a0      	str	r0, [r4, #8]
 80162e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80162e4:	f7ff ff46 	bl	8016174 <memset>
 80162e8:	4620      	mov	r0, r4
 80162ea:	bd70      	pop	{r4, r5, r6, pc}

080162ec <__sfp_lock_acquire>:
 80162ec:	4801      	ldr	r0, [pc, #4]	; (80162f4 <__sfp_lock_acquire+0x8>)
 80162ee:	f000 b8c5 	b.w	801647c <__retarget_lock_acquire_recursive>
 80162f2:	bf00      	nop
 80162f4:	20009395 	.word	0x20009395

080162f8 <__sfp_lock_release>:
 80162f8:	4801      	ldr	r0, [pc, #4]	; (8016300 <__sfp_lock_release+0x8>)
 80162fa:	f000 b8c0 	b.w	801647e <__retarget_lock_release_recursive>
 80162fe:	bf00      	nop
 8016300:	20009395 	.word	0x20009395

08016304 <__sinit_lock_acquire>:
 8016304:	4801      	ldr	r0, [pc, #4]	; (801630c <__sinit_lock_acquire+0x8>)
 8016306:	f000 b8b9 	b.w	801647c <__retarget_lock_acquire_recursive>
 801630a:	bf00      	nop
 801630c:	20009396 	.word	0x20009396

08016310 <__sinit_lock_release>:
 8016310:	4801      	ldr	r0, [pc, #4]	; (8016318 <__sinit_lock_release+0x8>)
 8016312:	f000 b8b4 	b.w	801647e <__retarget_lock_release_recursive>
 8016316:	bf00      	nop
 8016318:	20009396 	.word	0x20009396

0801631c <__sinit>:
 801631c:	b510      	push	{r4, lr}
 801631e:	4604      	mov	r4, r0
 8016320:	f7ff fff0 	bl	8016304 <__sinit_lock_acquire>
 8016324:	69a3      	ldr	r3, [r4, #24]
 8016326:	b11b      	cbz	r3, 8016330 <__sinit+0x14>
 8016328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801632c:	f7ff bff0 	b.w	8016310 <__sinit_lock_release>
 8016330:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016334:	6523      	str	r3, [r4, #80]	; 0x50
 8016336:	4b13      	ldr	r3, [pc, #76]	; (8016384 <__sinit+0x68>)
 8016338:	4a13      	ldr	r2, [pc, #76]	; (8016388 <__sinit+0x6c>)
 801633a:	681b      	ldr	r3, [r3, #0]
 801633c:	62a2      	str	r2, [r4, #40]	; 0x28
 801633e:	42a3      	cmp	r3, r4
 8016340:	bf04      	itt	eq
 8016342:	2301      	moveq	r3, #1
 8016344:	61a3      	streq	r3, [r4, #24]
 8016346:	4620      	mov	r0, r4
 8016348:	f000 f820 	bl	801638c <__sfp>
 801634c:	6060      	str	r0, [r4, #4]
 801634e:	4620      	mov	r0, r4
 8016350:	f000 f81c 	bl	801638c <__sfp>
 8016354:	60a0      	str	r0, [r4, #8]
 8016356:	4620      	mov	r0, r4
 8016358:	f000 f818 	bl	801638c <__sfp>
 801635c:	2200      	movs	r2, #0
 801635e:	60e0      	str	r0, [r4, #12]
 8016360:	2104      	movs	r1, #4
 8016362:	6860      	ldr	r0, [r4, #4]
 8016364:	f7ff ff82 	bl	801626c <std>
 8016368:	68a0      	ldr	r0, [r4, #8]
 801636a:	2201      	movs	r2, #1
 801636c:	2109      	movs	r1, #9
 801636e:	f7ff ff7d 	bl	801626c <std>
 8016372:	68e0      	ldr	r0, [r4, #12]
 8016374:	2202      	movs	r2, #2
 8016376:	2112      	movs	r1, #18
 8016378:	f7ff ff78 	bl	801626c <std>
 801637c:	2301      	movs	r3, #1
 801637e:	61a3      	str	r3, [r4, #24]
 8016380:	e7d2      	b.n	8016328 <__sinit+0xc>
 8016382:	bf00      	nop
 8016384:	08019d50 	.word	0x08019d50
 8016388:	080162b5 	.word	0x080162b5

0801638c <__sfp>:
 801638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801638e:	4607      	mov	r7, r0
 8016390:	f7ff ffac 	bl	80162ec <__sfp_lock_acquire>
 8016394:	4b1e      	ldr	r3, [pc, #120]	; (8016410 <__sfp+0x84>)
 8016396:	681e      	ldr	r6, [r3, #0]
 8016398:	69b3      	ldr	r3, [r6, #24]
 801639a:	b913      	cbnz	r3, 80163a2 <__sfp+0x16>
 801639c:	4630      	mov	r0, r6
 801639e:	f7ff ffbd 	bl	801631c <__sinit>
 80163a2:	3648      	adds	r6, #72	; 0x48
 80163a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80163a8:	3b01      	subs	r3, #1
 80163aa:	d503      	bpl.n	80163b4 <__sfp+0x28>
 80163ac:	6833      	ldr	r3, [r6, #0]
 80163ae:	b30b      	cbz	r3, 80163f4 <__sfp+0x68>
 80163b0:	6836      	ldr	r6, [r6, #0]
 80163b2:	e7f7      	b.n	80163a4 <__sfp+0x18>
 80163b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80163b8:	b9d5      	cbnz	r5, 80163f0 <__sfp+0x64>
 80163ba:	4b16      	ldr	r3, [pc, #88]	; (8016414 <__sfp+0x88>)
 80163bc:	60e3      	str	r3, [r4, #12]
 80163be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80163c2:	6665      	str	r5, [r4, #100]	; 0x64
 80163c4:	f000 f859 	bl	801647a <__retarget_lock_init_recursive>
 80163c8:	f7ff ff96 	bl	80162f8 <__sfp_lock_release>
 80163cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80163d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80163d4:	6025      	str	r5, [r4, #0]
 80163d6:	61a5      	str	r5, [r4, #24]
 80163d8:	2208      	movs	r2, #8
 80163da:	4629      	mov	r1, r5
 80163dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80163e0:	f7ff fec8 	bl	8016174 <memset>
 80163e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80163e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80163ec:	4620      	mov	r0, r4
 80163ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80163f0:	3468      	adds	r4, #104	; 0x68
 80163f2:	e7d9      	b.n	80163a8 <__sfp+0x1c>
 80163f4:	2104      	movs	r1, #4
 80163f6:	4638      	mov	r0, r7
 80163f8:	f7ff ff62 	bl	80162c0 <__sfmoreglue>
 80163fc:	4604      	mov	r4, r0
 80163fe:	6030      	str	r0, [r6, #0]
 8016400:	2800      	cmp	r0, #0
 8016402:	d1d5      	bne.n	80163b0 <__sfp+0x24>
 8016404:	f7ff ff78 	bl	80162f8 <__sfp_lock_release>
 8016408:	230c      	movs	r3, #12
 801640a:	603b      	str	r3, [r7, #0]
 801640c:	e7ee      	b.n	80163ec <__sfp+0x60>
 801640e:	bf00      	nop
 8016410:	08019d50 	.word	0x08019d50
 8016414:	ffff0001 	.word	0xffff0001

08016418 <fiprintf>:
 8016418:	b40e      	push	{r1, r2, r3}
 801641a:	b503      	push	{r0, r1, lr}
 801641c:	4601      	mov	r1, r0
 801641e:	ab03      	add	r3, sp, #12
 8016420:	4805      	ldr	r0, [pc, #20]	; (8016438 <fiprintf+0x20>)
 8016422:	f853 2b04 	ldr.w	r2, [r3], #4
 8016426:	6800      	ldr	r0, [r0, #0]
 8016428:	9301      	str	r3, [sp, #4]
 801642a:	f000 f93b 	bl	80166a4 <_vfiprintf_r>
 801642e:	b002      	add	sp, #8
 8016430:	f85d eb04 	ldr.w	lr, [sp], #4
 8016434:	b003      	add	sp, #12
 8016436:	4770      	bx	lr
 8016438:	2000002c 	.word	0x2000002c

0801643c <_fwalk_reent>:
 801643c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016440:	4606      	mov	r6, r0
 8016442:	4688      	mov	r8, r1
 8016444:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016448:	2700      	movs	r7, #0
 801644a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801644e:	f1b9 0901 	subs.w	r9, r9, #1
 8016452:	d505      	bpl.n	8016460 <_fwalk_reent+0x24>
 8016454:	6824      	ldr	r4, [r4, #0]
 8016456:	2c00      	cmp	r4, #0
 8016458:	d1f7      	bne.n	801644a <_fwalk_reent+0xe>
 801645a:	4638      	mov	r0, r7
 801645c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016460:	89ab      	ldrh	r3, [r5, #12]
 8016462:	2b01      	cmp	r3, #1
 8016464:	d907      	bls.n	8016476 <_fwalk_reent+0x3a>
 8016466:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801646a:	3301      	adds	r3, #1
 801646c:	d003      	beq.n	8016476 <_fwalk_reent+0x3a>
 801646e:	4629      	mov	r1, r5
 8016470:	4630      	mov	r0, r6
 8016472:	47c0      	blx	r8
 8016474:	4307      	orrs	r7, r0
 8016476:	3568      	adds	r5, #104	; 0x68
 8016478:	e7e9      	b.n	801644e <_fwalk_reent+0x12>

0801647a <__retarget_lock_init_recursive>:
 801647a:	4770      	bx	lr

0801647c <__retarget_lock_acquire_recursive>:
 801647c:	4770      	bx	lr

0801647e <__retarget_lock_release_recursive>:
 801647e:	4770      	bx	lr

08016480 <malloc>:
 8016480:	4b02      	ldr	r3, [pc, #8]	; (801648c <malloc+0xc>)
 8016482:	4601      	mov	r1, r0
 8016484:	6818      	ldr	r0, [r3, #0]
 8016486:	f000 b86f 	b.w	8016568 <_malloc_r>
 801648a:	bf00      	nop
 801648c:	2000002c 	.word	0x2000002c

08016490 <_free_r>:
 8016490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016492:	2900      	cmp	r1, #0
 8016494:	d044      	beq.n	8016520 <_free_r+0x90>
 8016496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801649a:	9001      	str	r0, [sp, #4]
 801649c:	2b00      	cmp	r3, #0
 801649e:	f1a1 0404 	sub.w	r4, r1, #4
 80164a2:	bfb8      	it	lt
 80164a4:	18e4      	addlt	r4, r4, r3
 80164a6:	f000 fe39 	bl	801711c <__malloc_lock>
 80164aa:	4a1e      	ldr	r2, [pc, #120]	; (8016524 <_free_r+0x94>)
 80164ac:	9801      	ldr	r0, [sp, #4]
 80164ae:	6813      	ldr	r3, [r2, #0]
 80164b0:	b933      	cbnz	r3, 80164c0 <_free_r+0x30>
 80164b2:	6063      	str	r3, [r4, #4]
 80164b4:	6014      	str	r4, [r2, #0]
 80164b6:	b003      	add	sp, #12
 80164b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164bc:	f000 be34 	b.w	8017128 <__malloc_unlock>
 80164c0:	42a3      	cmp	r3, r4
 80164c2:	d908      	bls.n	80164d6 <_free_r+0x46>
 80164c4:	6825      	ldr	r5, [r4, #0]
 80164c6:	1961      	adds	r1, r4, r5
 80164c8:	428b      	cmp	r3, r1
 80164ca:	bf01      	itttt	eq
 80164cc:	6819      	ldreq	r1, [r3, #0]
 80164ce:	685b      	ldreq	r3, [r3, #4]
 80164d0:	1949      	addeq	r1, r1, r5
 80164d2:	6021      	streq	r1, [r4, #0]
 80164d4:	e7ed      	b.n	80164b2 <_free_r+0x22>
 80164d6:	461a      	mov	r2, r3
 80164d8:	685b      	ldr	r3, [r3, #4]
 80164da:	b10b      	cbz	r3, 80164e0 <_free_r+0x50>
 80164dc:	42a3      	cmp	r3, r4
 80164de:	d9fa      	bls.n	80164d6 <_free_r+0x46>
 80164e0:	6811      	ldr	r1, [r2, #0]
 80164e2:	1855      	adds	r5, r2, r1
 80164e4:	42a5      	cmp	r5, r4
 80164e6:	d10b      	bne.n	8016500 <_free_r+0x70>
 80164e8:	6824      	ldr	r4, [r4, #0]
 80164ea:	4421      	add	r1, r4
 80164ec:	1854      	adds	r4, r2, r1
 80164ee:	42a3      	cmp	r3, r4
 80164f0:	6011      	str	r1, [r2, #0]
 80164f2:	d1e0      	bne.n	80164b6 <_free_r+0x26>
 80164f4:	681c      	ldr	r4, [r3, #0]
 80164f6:	685b      	ldr	r3, [r3, #4]
 80164f8:	6053      	str	r3, [r2, #4]
 80164fa:	4421      	add	r1, r4
 80164fc:	6011      	str	r1, [r2, #0]
 80164fe:	e7da      	b.n	80164b6 <_free_r+0x26>
 8016500:	d902      	bls.n	8016508 <_free_r+0x78>
 8016502:	230c      	movs	r3, #12
 8016504:	6003      	str	r3, [r0, #0]
 8016506:	e7d6      	b.n	80164b6 <_free_r+0x26>
 8016508:	6825      	ldr	r5, [r4, #0]
 801650a:	1961      	adds	r1, r4, r5
 801650c:	428b      	cmp	r3, r1
 801650e:	bf04      	itt	eq
 8016510:	6819      	ldreq	r1, [r3, #0]
 8016512:	685b      	ldreq	r3, [r3, #4]
 8016514:	6063      	str	r3, [r4, #4]
 8016516:	bf04      	itt	eq
 8016518:	1949      	addeq	r1, r1, r5
 801651a:	6021      	streq	r1, [r4, #0]
 801651c:	6054      	str	r4, [r2, #4]
 801651e:	e7ca      	b.n	80164b6 <_free_r+0x26>
 8016520:	b003      	add	sp, #12
 8016522:	bd30      	pop	{r4, r5, pc}
 8016524:	20009398 	.word	0x20009398

08016528 <sbrk_aligned>:
 8016528:	b570      	push	{r4, r5, r6, lr}
 801652a:	4e0e      	ldr	r6, [pc, #56]	; (8016564 <sbrk_aligned+0x3c>)
 801652c:	460c      	mov	r4, r1
 801652e:	6831      	ldr	r1, [r6, #0]
 8016530:	4605      	mov	r5, r0
 8016532:	b911      	cbnz	r1, 801653a <sbrk_aligned+0x12>
 8016534:	f000 fb7a 	bl	8016c2c <_sbrk_r>
 8016538:	6030      	str	r0, [r6, #0]
 801653a:	4621      	mov	r1, r4
 801653c:	4628      	mov	r0, r5
 801653e:	f000 fb75 	bl	8016c2c <_sbrk_r>
 8016542:	1c43      	adds	r3, r0, #1
 8016544:	d00a      	beq.n	801655c <sbrk_aligned+0x34>
 8016546:	1cc4      	adds	r4, r0, #3
 8016548:	f024 0403 	bic.w	r4, r4, #3
 801654c:	42a0      	cmp	r0, r4
 801654e:	d007      	beq.n	8016560 <sbrk_aligned+0x38>
 8016550:	1a21      	subs	r1, r4, r0
 8016552:	4628      	mov	r0, r5
 8016554:	f000 fb6a 	bl	8016c2c <_sbrk_r>
 8016558:	3001      	adds	r0, #1
 801655a:	d101      	bne.n	8016560 <sbrk_aligned+0x38>
 801655c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8016560:	4620      	mov	r0, r4
 8016562:	bd70      	pop	{r4, r5, r6, pc}
 8016564:	2000939c 	.word	0x2000939c

08016568 <_malloc_r>:
 8016568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801656c:	1ccd      	adds	r5, r1, #3
 801656e:	f025 0503 	bic.w	r5, r5, #3
 8016572:	3508      	adds	r5, #8
 8016574:	2d0c      	cmp	r5, #12
 8016576:	bf38      	it	cc
 8016578:	250c      	movcc	r5, #12
 801657a:	2d00      	cmp	r5, #0
 801657c:	4607      	mov	r7, r0
 801657e:	db01      	blt.n	8016584 <_malloc_r+0x1c>
 8016580:	42a9      	cmp	r1, r5
 8016582:	d905      	bls.n	8016590 <_malloc_r+0x28>
 8016584:	230c      	movs	r3, #12
 8016586:	603b      	str	r3, [r7, #0]
 8016588:	2600      	movs	r6, #0
 801658a:	4630      	mov	r0, r6
 801658c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016590:	4e2e      	ldr	r6, [pc, #184]	; (801664c <_malloc_r+0xe4>)
 8016592:	f000 fdc3 	bl	801711c <__malloc_lock>
 8016596:	6833      	ldr	r3, [r6, #0]
 8016598:	461c      	mov	r4, r3
 801659a:	bb34      	cbnz	r4, 80165ea <_malloc_r+0x82>
 801659c:	4629      	mov	r1, r5
 801659e:	4638      	mov	r0, r7
 80165a0:	f7ff ffc2 	bl	8016528 <sbrk_aligned>
 80165a4:	1c43      	adds	r3, r0, #1
 80165a6:	4604      	mov	r4, r0
 80165a8:	d14d      	bne.n	8016646 <_malloc_r+0xde>
 80165aa:	6834      	ldr	r4, [r6, #0]
 80165ac:	4626      	mov	r6, r4
 80165ae:	2e00      	cmp	r6, #0
 80165b0:	d140      	bne.n	8016634 <_malloc_r+0xcc>
 80165b2:	6823      	ldr	r3, [r4, #0]
 80165b4:	4631      	mov	r1, r6
 80165b6:	4638      	mov	r0, r7
 80165b8:	eb04 0803 	add.w	r8, r4, r3
 80165bc:	f000 fb36 	bl	8016c2c <_sbrk_r>
 80165c0:	4580      	cmp	r8, r0
 80165c2:	d13a      	bne.n	801663a <_malloc_r+0xd2>
 80165c4:	6821      	ldr	r1, [r4, #0]
 80165c6:	3503      	adds	r5, #3
 80165c8:	1a6d      	subs	r5, r5, r1
 80165ca:	f025 0503 	bic.w	r5, r5, #3
 80165ce:	3508      	adds	r5, #8
 80165d0:	2d0c      	cmp	r5, #12
 80165d2:	bf38      	it	cc
 80165d4:	250c      	movcc	r5, #12
 80165d6:	4629      	mov	r1, r5
 80165d8:	4638      	mov	r0, r7
 80165da:	f7ff ffa5 	bl	8016528 <sbrk_aligned>
 80165de:	3001      	adds	r0, #1
 80165e0:	d02b      	beq.n	801663a <_malloc_r+0xd2>
 80165e2:	6823      	ldr	r3, [r4, #0]
 80165e4:	442b      	add	r3, r5
 80165e6:	6023      	str	r3, [r4, #0]
 80165e8:	e00e      	b.n	8016608 <_malloc_r+0xa0>
 80165ea:	6822      	ldr	r2, [r4, #0]
 80165ec:	1b52      	subs	r2, r2, r5
 80165ee:	d41e      	bmi.n	801662e <_malloc_r+0xc6>
 80165f0:	2a0b      	cmp	r2, #11
 80165f2:	d916      	bls.n	8016622 <_malloc_r+0xba>
 80165f4:	1961      	adds	r1, r4, r5
 80165f6:	42a3      	cmp	r3, r4
 80165f8:	6025      	str	r5, [r4, #0]
 80165fa:	bf18      	it	ne
 80165fc:	6059      	strne	r1, [r3, #4]
 80165fe:	6863      	ldr	r3, [r4, #4]
 8016600:	bf08      	it	eq
 8016602:	6031      	streq	r1, [r6, #0]
 8016604:	5162      	str	r2, [r4, r5]
 8016606:	604b      	str	r3, [r1, #4]
 8016608:	4638      	mov	r0, r7
 801660a:	f104 060b 	add.w	r6, r4, #11
 801660e:	f000 fd8b 	bl	8017128 <__malloc_unlock>
 8016612:	f026 0607 	bic.w	r6, r6, #7
 8016616:	1d23      	adds	r3, r4, #4
 8016618:	1af2      	subs	r2, r6, r3
 801661a:	d0b6      	beq.n	801658a <_malloc_r+0x22>
 801661c:	1b9b      	subs	r3, r3, r6
 801661e:	50a3      	str	r3, [r4, r2]
 8016620:	e7b3      	b.n	801658a <_malloc_r+0x22>
 8016622:	6862      	ldr	r2, [r4, #4]
 8016624:	42a3      	cmp	r3, r4
 8016626:	bf0c      	ite	eq
 8016628:	6032      	streq	r2, [r6, #0]
 801662a:	605a      	strne	r2, [r3, #4]
 801662c:	e7ec      	b.n	8016608 <_malloc_r+0xa0>
 801662e:	4623      	mov	r3, r4
 8016630:	6864      	ldr	r4, [r4, #4]
 8016632:	e7b2      	b.n	801659a <_malloc_r+0x32>
 8016634:	4634      	mov	r4, r6
 8016636:	6876      	ldr	r6, [r6, #4]
 8016638:	e7b9      	b.n	80165ae <_malloc_r+0x46>
 801663a:	230c      	movs	r3, #12
 801663c:	603b      	str	r3, [r7, #0]
 801663e:	4638      	mov	r0, r7
 8016640:	f000 fd72 	bl	8017128 <__malloc_unlock>
 8016644:	e7a1      	b.n	801658a <_malloc_r+0x22>
 8016646:	6025      	str	r5, [r4, #0]
 8016648:	e7de      	b.n	8016608 <_malloc_r+0xa0>
 801664a:	bf00      	nop
 801664c:	20009398 	.word	0x20009398

08016650 <__sfputc_r>:
 8016650:	6893      	ldr	r3, [r2, #8]
 8016652:	3b01      	subs	r3, #1
 8016654:	2b00      	cmp	r3, #0
 8016656:	b410      	push	{r4}
 8016658:	6093      	str	r3, [r2, #8]
 801665a:	da08      	bge.n	801666e <__sfputc_r+0x1e>
 801665c:	6994      	ldr	r4, [r2, #24]
 801665e:	42a3      	cmp	r3, r4
 8016660:	db01      	blt.n	8016666 <__sfputc_r+0x16>
 8016662:	290a      	cmp	r1, #10
 8016664:	d103      	bne.n	801666e <__sfputc_r+0x1e>
 8016666:	f85d 4b04 	ldr.w	r4, [sp], #4
 801666a:	f000 bb33 	b.w	8016cd4 <__swbuf_r>
 801666e:	6813      	ldr	r3, [r2, #0]
 8016670:	1c58      	adds	r0, r3, #1
 8016672:	6010      	str	r0, [r2, #0]
 8016674:	7019      	strb	r1, [r3, #0]
 8016676:	4608      	mov	r0, r1
 8016678:	f85d 4b04 	ldr.w	r4, [sp], #4
 801667c:	4770      	bx	lr

0801667e <__sfputs_r>:
 801667e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016680:	4606      	mov	r6, r0
 8016682:	460f      	mov	r7, r1
 8016684:	4614      	mov	r4, r2
 8016686:	18d5      	adds	r5, r2, r3
 8016688:	42ac      	cmp	r4, r5
 801668a:	d101      	bne.n	8016690 <__sfputs_r+0x12>
 801668c:	2000      	movs	r0, #0
 801668e:	e007      	b.n	80166a0 <__sfputs_r+0x22>
 8016690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016694:	463a      	mov	r2, r7
 8016696:	4630      	mov	r0, r6
 8016698:	f7ff ffda 	bl	8016650 <__sfputc_r>
 801669c:	1c43      	adds	r3, r0, #1
 801669e:	d1f3      	bne.n	8016688 <__sfputs_r+0xa>
 80166a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080166a4 <_vfiprintf_r>:
 80166a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166a8:	460d      	mov	r5, r1
 80166aa:	b09d      	sub	sp, #116	; 0x74
 80166ac:	4614      	mov	r4, r2
 80166ae:	4698      	mov	r8, r3
 80166b0:	4606      	mov	r6, r0
 80166b2:	b118      	cbz	r0, 80166bc <_vfiprintf_r+0x18>
 80166b4:	6983      	ldr	r3, [r0, #24]
 80166b6:	b90b      	cbnz	r3, 80166bc <_vfiprintf_r+0x18>
 80166b8:	f7ff fe30 	bl	801631c <__sinit>
 80166bc:	4b89      	ldr	r3, [pc, #548]	; (80168e4 <_vfiprintf_r+0x240>)
 80166be:	429d      	cmp	r5, r3
 80166c0:	d11b      	bne.n	80166fa <_vfiprintf_r+0x56>
 80166c2:	6875      	ldr	r5, [r6, #4]
 80166c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80166c6:	07d9      	lsls	r1, r3, #31
 80166c8:	d405      	bmi.n	80166d6 <_vfiprintf_r+0x32>
 80166ca:	89ab      	ldrh	r3, [r5, #12]
 80166cc:	059a      	lsls	r2, r3, #22
 80166ce:	d402      	bmi.n	80166d6 <_vfiprintf_r+0x32>
 80166d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80166d2:	f7ff fed3 	bl	801647c <__retarget_lock_acquire_recursive>
 80166d6:	89ab      	ldrh	r3, [r5, #12]
 80166d8:	071b      	lsls	r3, r3, #28
 80166da:	d501      	bpl.n	80166e0 <_vfiprintf_r+0x3c>
 80166dc:	692b      	ldr	r3, [r5, #16]
 80166de:	b9eb      	cbnz	r3, 801671c <_vfiprintf_r+0x78>
 80166e0:	4629      	mov	r1, r5
 80166e2:	4630      	mov	r0, r6
 80166e4:	f000 fb5a 	bl	8016d9c <__swsetup_r>
 80166e8:	b1c0      	cbz	r0, 801671c <_vfiprintf_r+0x78>
 80166ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80166ec:	07dc      	lsls	r4, r3, #31
 80166ee:	d50e      	bpl.n	801670e <_vfiprintf_r+0x6a>
 80166f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80166f4:	b01d      	add	sp, #116	; 0x74
 80166f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166fa:	4b7b      	ldr	r3, [pc, #492]	; (80168e8 <_vfiprintf_r+0x244>)
 80166fc:	429d      	cmp	r5, r3
 80166fe:	d101      	bne.n	8016704 <_vfiprintf_r+0x60>
 8016700:	68b5      	ldr	r5, [r6, #8]
 8016702:	e7df      	b.n	80166c4 <_vfiprintf_r+0x20>
 8016704:	4b79      	ldr	r3, [pc, #484]	; (80168ec <_vfiprintf_r+0x248>)
 8016706:	429d      	cmp	r5, r3
 8016708:	bf08      	it	eq
 801670a:	68f5      	ldreq	r5, [r6, #12]
 801670c:	e7da      	b.n	80166c4 <_vfiprintf_r+0x20>
 801670e:	89ab      	ldrh	r3, [r5, #12]
 8016710:	0598      	lsls	r0, r3, #22
 8016712:	d4ed      	bmi.n	80166f0 <_vfiprintf_r+0x4c>
 8016714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016716:	f7ff feb2 	bl	801647e <__retarget_lock_release_recursive>
 801671a:	e7e9      	b.n	80166f0 <_vfiprintf_r+0x4c>
 801671c:	2300      	movs	r3, #0
 801671e:	9309      	str	r3, [sp, #36]	; 0x24
 8016720:	2320      	movs	r3, #32
 8016722:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016726:	f8cd 800c 	str.w	r8, [sp, #12]
 801672a:	2330      	movs	r3, #48	; 0x30
 801672c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80168f0 <_vfiprintf_r+0x24c>
 8016730:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016734:	f04f 0901 	mov.w	r9, #1
 8016738:	4623      	mov	r3, r4
 801673a:	469a      	mov	sl, r3
 801673c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016740:	b10a      	cbz	r2, 8016746 <_vfiprintf_r+0xa2>
 8016742:	2a25      	cmp	r2, #37	; 0x25
 8016744:	d1f9      	bne.n	801673a <_vfiprintf_r+0x96>
 8016746:	ebba 0b04 	subs.w	fp, sl, r4
 801674a:	d00b      	beq.n	8016764 <_vfiprintf_r+0xc0>
 801674c:	465b      	mov	r3, fp
 801674e:	4622      	mov	r2, r4
 8016750:	4629      	mov	r1, r5
 8016752:	4630      	mov	r0, r6
 8016754:	f7ff ff93 	bl	801667e <__sfputs_r>
 8016758:	3001      	adds	r0, #1
 801675a:	f000 80aa 	beq.w	80168b2 <_vfiprintf_r+0x20e>
 801675e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016760:	445a      	add	r2, fp
 8016762:	9209      	str	r2, [sp, #36]	; 0x24
 8016764:	f89a 3000 	ldrb.w	r3, [sl]
 8016768:	2b00      	cmp	r3, #0
 801676a:	f000 80a2 	beq.w	80168b2 <_vfiprintf_r+0x20e>
 801676e:	2300      	movs	r3, #0
 8016770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016774:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016778:	f10a 0a01 	add.w	sl, sl, #1
 801677c:	9304      	str	r3, [sp, #16]
 801677e:	9307      	str	r3, [sp, #28]
 8016780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016784:	931a      	str	r3, [sp, #104]	; 0x68
 8016786:	4654      	mov	r4, sl
 8016788:	2205      	movs	r2, #5
 801678a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801678e:	4858      	ldr	r0, [pc, #352]	; (80168f0 <_vfiprintf_r+0x24c>)
 8016790:	f7e9 fd4e 	bl	8000230 <memchr>
 8016794:	9a04      	ldr	r2, [sp, #16]
 8016796:	b9d8      	cbnz	r0, 80167d0 <_vfiprintf_r+0x12c>
 8016798:	06d1      	lsls	r1, r2, #27
 801679a:	bf44      	itt	mi
 801679c:	2320      	movmi	r3, #32
 801679e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167a2:	0713      	lsls	r3, r2, #28
 80167a4:	bf44      	itt	mi
 80167a6:	232b      	movmi	r3, #43	; 0x2b
 80167a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167ac:	f89a 3000 	ldrb.w	r3, [sl]
 80167b0:	2b2a      	cmp	r3, #42	; 0x2a
 80167b2:	d015      	beq.n	80167e0 <_vfiprintf_r+0x13c>
 80167b4:	9a07      	ldr	r2, [sp, #28]
 80167b6:	4654      	mov	r4, sl
 80167b8:	2000      	movs	r0, #0
 80167ba:	f04f 0c0a 	mov.w	ip, #10
 80167be:	4621      	mov	r1, r4
 80167c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80167c4:	3b30      	subs	r3, #48	; 0x30
 80167c6:	2b09      	cmp	r3, #9
 80167c8:	d94e      	bls.n	8016868 <_vfiprintf_r+0x1c4>
 80167ca:	b1b0      	cbz	r0, 80167fa <_vfiprintf_r+0x156>
 80167cc:	9207      	str	r2, [sp, #28]
 80167ce:	e014      	b.n	80167fa <_vfiprintf_r+0x156>
 80167d0:	eba0 0308 	sub.w	r3, r0, r8
 80167d4:	fa09 f303 	lsl.w	r3, r9, r3
 80167d8:	4313      	orrs	r3, r2
 80167da:	9304      	str	r3, [sp, #16]
 80167dc:	46a2      	mov	sl, r4
 80167de:	e7d2      	b.n	8016786 <_vfiprintf_r+0xe2>
 80167e0:	9b03      	ldr	r3, [sp, #12]
 80167e2:	1d19      	adds	r1, r3, #4
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	9103      	str	r1, [sp, #12]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	bfbb      	ittet	lt
 80167ec:	425b      	neglt	r3, r3
 80167ee:	f042 0202 	orrlt.w	r2, r2, #2
 80167f2:	9307      	strge	r3, [sp, #28]
 80167f4:	9307      	strlt	r3, [sp, #28]
 80167f6:	bfb8      	it	lt
 80167f8:	9204      	strlt	r2, [sp, #16]
 80167fa:	7823      	ldrb	r3, [r4, #0]
 80167fc:	2b2e      	cmp	r3, #46	; 0x2e
 80167fe:	d10c      	bne.n	801681a <_vfiprintf_r+0x176>
 8016800:	7863      	ldrb	r3, [r4, #1]
 8016802:	2b2a      	cmp	r3, #42	; 0x2a
 8016804:	d135      	bne.n	8016872 <_vfiprintf_r+0x1ce>
 8016806:	9b03      	ldr	r3, [sp, #12]
 8016808:	1d1a      	adds	r2, r3, #4
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	9203      	str	r2, [sp, #12]
 801680e:	2b00      	cmp	r3, #0
 8016810:	bfb8      	it	lt
 8016812:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016816:	3402      	adds	r4, #2
 8016818:	9305      	str	r3, [sp, #20]
 801681a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016900 <_vfiprintf_r+0x25c>
 801681e:	7821      	ldrb	r1, [r4, #0]
 8016820:	2203      	movs	r2, #3
 8016822:	4650      	mov	r0, sl
 8016824:	f7e9 fd04 	bl	8000230 <memchr>
 8016828:	b140      	cbz	r0, 801683c <_vfiprintf_r+0x198>
 801682a:	2340      	movs	r3, #64	; 0x40
 801682c:	eba0 000a 	sub.w	r0, r0, sl
 8016830:	fa03 f000 	lsl.w	r0, r3, r0
 8016834:	9b04      	ldr	r3, [sp, #16]
 8016836:	4303      	orrs	r3, r0
 8016838:	3401      	adds	r4, #1
 801683a:	9304      	str	r3, [sp, #16]
 801683c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016840:	482c      	ldr	r0, [pc, #176]	; (80168f4 <_vfiprintf_r+0x250>)
 8016842:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016846:	2206      	movs	r2, #6
 8016848:	f7e9 fcf2 	bl	8000230 <memchr>
 801684c:	2800      	cmp	r0, #0
 801684e:	d03f      	beq.n	80168d0 <_vfiprintf_r+0x22c>
 8016850:	4b29      	ldr	r3, [pc, #164]	; (80168f8 <_vfiprintf_r+0x254>)
 8016852:	bb1b      	cbnz	r3, 801689c <_vfiprintf_r+0x1f8>
 8016854:	9b03      	ldr	r3, [sp, #12]
 8016856:	3307      	adds	r3, #7
 8016858:	f023 0307 	bic.w	r3, r3, #7
 801685c:	3308      	adds	r3, #8
 801685e:	9303      	str	r3, [sp, #12]
 8016860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016862:	443b      	add	r3, r7
 8016864:	9309      	str	r3, [sp, #36]	; 0x24
 8016866:	e767      	b.n	8016738 <_vfiprintf_r+0x94>
 8016868:	fb0c 3202 	mla	r2, ip, r2, r3
 801686c:	460c      	mov	r4, r1
 801686e:	2001      	movs	r0, #1
 8016870:	e7a5      	b.n	80167be <_vfiprintf_r+0x11a>
 8016872:	2300      	movs	r3, #0
 8016874:	3401      	adds	r4, #1
 8016876:	9305      	str	r3, [sp, #20]
 8016878:	4619      	mov	r1, r3
 801687a:	f04f 0c0a 	mov.w	ip, #10
 801687e:	4620      	mov	r0, r4
 8016880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016884:	3a30      	subs	r2, #48	; 0x30
 8016886:	2a09      	cmp	r2, #9
 8016888:	d903      	bls.n	8016892 <_vfiprintf_r+0x1ee>
 801688a:	2b00      	cmp	r3, #0
 801688c:	d0c5      	beq.n	801681a <_vfiprintf_r+0x176>
 801688e:	9105      	str	r1, [sp, #20]
 8016890:	e7c3      	b.n	801681a <_vfiprintf_r+0x176>
 8016892:	fb0c 2101 	mla	r1, ip, r1, r2
 8016896:	4604      	mov	r4, r0
 8016898:	2301      	movs	r3, #1
 801689a:	e7f0      	b.n	801687e <_vfiprintf_r+0x1da>
 801689c:	ab03      	add	r3, sp, #12
 801689e:	9300      	str	r3, [sp, #0]
 80168a0:	462a      	mov	r2, r5
 80168a2:	4b16      	ldr	r3, [pc, #88]	; (80168fc <_vfiprintf_r+0x258>)
 80168a4:	a904      	add	r1, sp, #16
 80168a6:	4630      	mov	r0, r6
 80168a8:	f3af 8000 	nop.w
 80168ac:	4607      	mov	r7, r0
 80168ae:	1c78      	adds	r0, r7, #1
 80168b0:	d1d6      	bne.n	8016860 <_vfiprintf_r+0x1bc>
 80168b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80168b4:	07d9      	lsls	r1, r3, #31
 80168b6:	d405      	bmi.n	80168c4 <_vfiprintf_r+0x220>
 80168b8:	89ab      	ldrh	r3, [r5, #12]
 80168ba:	059a      	lsls	r2, r3, #22
 80168bc:	d402      	bmi.n	80168c4 <_vfiprintf_r+0x220>
 80168be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80168c0:	f7ff fddd 	bl	801647e <__retarget_lock_release_recursive>
 80168c4:	89ab      	ldrh	r3, [r5, #12]
 80168c6:	065b      	lsls	r3, r3, #25
 80168c8:	f53f af12 	bmi.w	80166f0 <_vfiprintf_r+0x4c>
 80168cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80168ce:	e711      	b.n	80166f4 <_vfiprintf_r+0x50>
 80168d0:	ab03      	add	r3, sp, #12
 80168d2:	9300      	str	r3, [sp, #0]
 80168d4:	462a      	mov	r2, r5
 80168d6:	4b09      	ldr	r3, [pc, #36]	; (80168fc <_vfiprintf_r+0x258>)
 80168d8:	a904      	add	r1, sp, #16
 80168da:	4630      	mov	r0, r6
 80168dc:	f000 f880 	bl	80169e0 <_printf_i>
 80168e0:	e7e4      	b.n	80168ac <_vfiprintf_r+0x208>
 80168e2:	bf00      	nop
 80168e4:	08019e24 	.word	0x08019e24
 80168e8:	08019e44 	.word	0x08019e44
 80168ec:	08019e04 	.word	0x08019e04
 80168f0:	08019e64 	.word	0x08019e64
 80168f4:	08019e6e 	.word	0x08019e6e
 80168f8:	00000000 	.word	0x00000000
 80168fc:	0801667f 	.word	0x0801667f
 8016900:	08019e6a 	.word	0x08019e6a

08016904 <_printf_common>:
 8016904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016908:	4616      	mov	r6, r2
 801690a:	4699      	mov	r9, r3
 801690c:	688a      	ldr	r2, [r1, #8]
 801690e:	690b      	ldr	r3, [r1, #16]
 8016910:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016914:	4293      	cmp	r3, r2
 8016916:	bfb8      	it	lt
 8016918:	4613      	movlt	r3, r2
 801691a:	6033      	str	r3, [r6, #0]
 801691c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016920:	4607      	mov	r7, r0
 8016922:	460c      	mov	r4, r1
 8016924:	b10a      	cbz	r2, 801692a <_printf_common+0x26>
 8016926:	3301      	adds	r3, #1
 8016928:	6033      	str	r3, [r6, #0]
 801692a:	6823      	ldr	r3, [r4, #0]
 801692c:	0699      	lsls	r1, r3, #26
 801692e:	bf42      	ittt	mi
 8016930:	6833      	ldrmi	r3, [r6, #0]
 8016932:	3302      	addmi	r3, #2
 8016934:	6033      	strmi	r3, [r6, #0]
 8016936:	6825      	ldr	r5, [r4, #0]
 8016938:	f015 0506 	ands.w	r5, r5, #6
 801693c:	d106      	bne.n	801694c <_printf_common+0x48>
 801693e:	f104 0a19 	add.w	sl, r4, #25
 8016942:	68e3      	ldr	r3, [r4, #12]
 8016944:	6832      	ldr	r2, [r6, #0]
 8016946:	1a9b      	subs	r3, r3, r2
 8016948:	42ab      	cmp	r3, r5
 801694a:	dc26      	bgt.n	801699a <_printf_common+0x96>
 801694c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016950:	1e13      	subs	r3, r2, #0
 8016952:	6822      	ldr	r2, [r4, #0]
 8016954:	bf18      	it	ne
 8016956:	2301      	movne	r3, #1
 8016958:	0692      	lsls	r2, r2, #26
 801695a:	d42b      	bmi.n	80169b4 <_printf_common+0xb0>
 801695c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016960:	4649      	mov	r1, r9
 8016962:	4638      	mov	r0, r7
 8016964:	47c0      	blx	r8
 8016966:	3001      	adds	r0, #1
 8016968:	d01e      	beq.n	80169a8 <_printf_common+0xa4>
 801696a:	6823      	ldr	r3, [r4, #0]
 801696c:	68e5      	ldr	r5, [r4, #12]
 801696e:	6832      	ldr	r2, [r6, #0]
 8016970:	f003 0306 	and.w	r3, r3, #6
 8016974:	2b04      	cmp	r3, #4
 8016976:	bf08      	it	eq
 8016978:	1aad      	subeq	r5, r5, r2
 801697a:	68a3      	ldr	r3, [r4, #8]
 801697c:	6922      	ldr	r2, [r4, #16]
 801697e:	bf0c      	ite	eq
 8016980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016984:	2500      	movne	r5, #0
 8016986:	4293      	cmp	r3, r2
 8016988:	bfc4      	itt	gt
 801698a:	1a9b      	subgt	r3, r3, r2
 801698c:	18ed      	addgt	r5, r5, r3
 801698e:	2600      	movs	r6, #0
 8016990:	341a      	adds	r4, #26
 8016992:	42b5      	cmp	r5, r6
 8016994:	d11a      	bne.n	80169cc <_printf_common+0xc8>
 8016996:	2000      	movs	r0, #0
 8016998:	e008      	b.n	80169ac <_printf_common+0xa8>
 801699a:	2301      	movs	r3, #1
 801699c:	4652      	mov	r2, sl
 801699e:	4649      	mov	r1, r9
 80169a0:	4638      	mov	r0, r7
 80169a2:	47c0      	blx	r8
 80169a4:	3001      	adds	r0, #1
 80169a6:	d103      	bne.n	80169b0 <_printf_common+0xac>
 80169a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80169ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169b0:	3501      	adds	r5, #1
 80169b2:	e7c6      	b.n	8016942 <_printf_common+0x3e>
 80169b4:	18e1      	adds	r1, r4, r3
 80169b6:	1c5a      	adds	r2, r3, #1
 80169b8:	2030      	movs	r0, #48	; 0x30
 80169ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80169be:	4422      	add	r2, r4
 80169c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80169c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80169c8:	3302      	adds	r3, #2
 80169ca:	e7c7      	b.n	801695c <_printf_common+0x58>
 80169cc:	2301      	movs	r3, #1
 80169ce:	4622      	mov	r2, r4
 80169d0:	4649      	mov	r1, r9
 80169d2:	4638      	mov	r0, r7
 80169d4:	47c0      	blx	r8
 80169d6:	3001      	adds	r0, #1
 80169d8:	d0e6      	beq.n	80169a8 <_printf_common+0xa4>
 80169da:	3601      	adds	r6, #1
 80169dc:	e7d9      	b.n	8016992 <_printf_common+0x8e>
	...

080169e0 <_printf_i>:
 80169e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80169e4:	7e0f      	ldrb	r7, [r1, #24]
 80169e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80169e8:	2f78      	cmp	r7, #120	; 0x78
 80169ea:	4691      	mov	r9, r2
 80169ec:	4680      	mov	r8, r0
 80169ee:	460c      	mov	r4, r1
 80169f0:	469a      	mov	sl, r3
 80169f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80169f6:	d807      	bhi.n	8016a08 <_printf_i+0x28>
 80169f8:	2f62      	cmp	r7, #98	; 0x62
 80169fa:	d80a      	bhi.n	8016a12 <_printf_i+0x32>
 80169fc:	2f00      	cmp	r7, #0
 80169fe:	f000 80d8 	beq.w	8016bb2 <_printf_i+0x1d2>
 8016a02:	2f58      	cmp	r7, #88	; 0x58
 8016a04:	f000 80a3 	beq.w	8016b4e <_printf_i+0x16e>
 8016a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016a0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016a10:	e03a      	b.n	8016a88 <_printf_i+0xa8>
 8016a12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016a16:	2b15      	cmp	r3, #21
 8016a18:	d8f6      	bhi.n	8016a08 <_printf_i+0x28>
 8016a1a:	a101      	add	r1, pc, #4	; (adr r1, 8016a20 <_printf_i+0x40>)
 8016a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016a20:	08016a79 	.word	0x08016a79
 8016a24:	08016a8d 	.word	0x08016a8d
 8016a28:	08016a09 	.word	0x08016a09
 8016a2c:	08016a09 	.word	0x08016a09
 8016a30:	08016a09 	.word	0x08016a09
 8016a34:	08016a09 	.word	0x08016a09
 8016a38:	08016a8d 	.word	0x08016a8d
 8016a3c:	08016a09 	.word	0x08016a09
 8016a40:	08016a09 	.word	0x08016a09
 8016a44:	08016a09 	.word	0x08016a09
 8016a48:	08016a09 	.word	0x08016a09
 8016a4c:	08016b99 	.word	0x08016b99
 8016a50:	08016abd 	.word	0x08016abd
 8016a54:	08016b7b 	.word	0x08016b7b
 8016a58:	08016a09 	.word	0x08016a09
 8016a5c:	08016a09 	.word	0x08016a09
 8016a60:	08016bbb 	.word	0x08016bbb
 8016a64:	08016a09 	.word	0x08016a09
 8016a68:	08016abd 	.word	0x08016abd
 8016a6c:	08016a09 	.word	0x08016a09
 8016a70:	08016a09 	.word	0x08016a09
 8016a74:	08016b83 	.word	0x08016b83
 8016a78:	682b      	ldr	r3, [r5, #0]
 8016a7a:	1d1a      	adds	r2, r3, #4
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	602a      	str	r2, [r5, #0]
 8016a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016a84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016a88:	2301      	movs	r3, #1
 8016a8a:	e0a3      	b.n	8016bd4 <_printf_i+0x1f4>
 8016a8c:	6820      	ldr	r0, [r4, #0]
 8016a8e:	6829      	ldr	r1, [r5, #0]
 8016a90:	0606      	lsls	r6, r0, #24
 8016a92:	f101 0304 	add.w	r3, r1, #4
 8016a96:	d50a      	bpl.n	8016aae <_printf_i+0xce>
 8016a98:	680e      	ldr	r6, [r1, #0]
 8016a9a:	602b      	str	r3, [r5, #0]
 8016a9c:	2e00      	cmp	r6, #0
 8016a9e:	da03      	bge.n	8016aa8 <_printf_i+0xc8>
 8016aa0:	232d      	movs	r3, #45	; 0x2d
 8016aa2:	4276      	negs	r6, r6
 8016aa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016aa8:	485e      	ldr	r0, [pc, #376]	; (8016c24 <_printf_i+0x244>)
 8016aaa:	230a      	movs	r3, #10
 8016aac:	e019      	b.n	8016ae2 <_printf_i+0x102>
 8016aae:	680e      	ldr	r6, [r1, #0]
 8016ab0:	602b      	str	r3, [r5, #0]
 8016ab2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016ab6:	bf18      	it	ne
 8016ab8:	b236      	sxthne	r6, r6
 8016aba:	e7ef      	b.n	8016a9c <_printf_i+0xbc>
 8016abc:	682b      	ldr	r3, [r5, #0]
 8016abe:	6820      	ldr	r0, [r4, #0]
 8016ac0:	1d19      	adds	r1, r3, #4
 8016ac2:	6029      	str	r1, [r5, #0]
 8016ac4:	0601      	lsls	r1, r0, #24
 8016ac6:	d501      	bpl.n	8016acc <_printf_i+0xec>
 8016ac8:	681e      	ldr	r6, [r3, #0]
 8016aca:	e002      	b.n	8016ad2 <_printf_i+0xf2>
 8016acc:	0646      	lsls	r6, r0, #25
 8016ace:	d5fb      	bpl.n	8016ac8 <_printf_i+0xe8>
 8016ad0:	881e      	ldrh	r6, [r3, #0]
 8016ad2:	4854      	ldr	r0, [pc, #336]	; (8016c24 <_printf_i+0x244>)
 8016ad4:	2f6f      	cmp	r7, #111	; 0x6f
 8016ad6:	bf0c      	ite	eq
 8016ad8:	2308      	moveq	r3, #8
 8016ada:	230a      	movne	r3, #10
 8016adc:	2100      	movs	r1, #0
 8016ade:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016ae2:	6865      	ldr	r5, [r4, #4]
 8016ae4:	60a5      	str	r5, [r4, #8]
 8016ae6:	2d00      	cmp	r5, #0
 8016ae8:	bfa2      	ittt	ge
 8016aea:	6821      	ldrge	r1, [r4, #0]
 8016aec:	f021 0104 	bicge.w	r1, r1, #4
 8016af0:	6021      	strge	r1, [r4, #0]
 8016af2:	b90e      	cbnz	r6, 8016af8 <_printf_i+0x118>
 8016af4:	2d00      	cmp	r5, #0
 8016af6:	d04d      	beq.n	8016b94 <_printf_i+0x1b4>
 8016af8:	4615      	mov	r5, r2
 8016afa:	fbb6 f1f3 	udiv	r1, r6, r3
 8016afe:	fb03 6711 	mls	r7, r3, r1, r6
 8016b02:	5dc7      	ldrb	r7, [r0, r7]
 8016b04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016b08:	4637      	mov	r7, r6
 8016b0a:	42bb      	cmp	r3, r7
 8016b0c:	460e      	mov	r6, r1
 8016b0e:	d9f4      	bls.n	8016afa <_printf_i+0x11a>
 8016b10:	2b08      	cmp	r3, #8
 8016b12:	d10b      	bne.n	8016b2c <_printf_i+0x14c>
 8016b14:	6823      	ldr	r3, [r4, #0]
 8016b16:	07de      	lsls	r6, r3, #31
 8016b18:	d508      	bpl.n	8016b2c <_printf_i+0x14c>
 8016b1a:	6923      	ldr	r3, [r4, #16]
 8016b1c:	6861      	ldr	r1, [r4, #4]
 8016b1e:	4299      	cmp	r1, r3
 8016b20:	bfde      	ittt	le
 8016b22:	2330      	movle	r3, #48	; 0x30
 8016b24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016b28:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8016b2c:	1b52      	subs	r2, r2, r5
 8016b2e:	6122      	str	r2, [r4, #16]
 8016b30:	f8cd a000 	str.w	sl, [sp]
 8016b34:	464b      	mov	r3, r9
 8016b36:	aa03      	add	r2, sp, #12
 8016b38:	4621      	mov	r1, r4
 8016b3a:	4640      	mov	r0, r8
 8016b3c:	f7ff fee2 	bl	8016904 <_printf_common>
 8016b40:	3001      	adds	r0, #1
 8016b42:	d14c      	bne.n	8016bde <_printf_i+0x1fe>
 8016b44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b48:	b004      	add	sp, #16
 8016b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b4e:	4835      	ldr	r0, [pc, #212]	; (8016c24 <_printf_i+0x244>)
 8016b50:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016b54:	6829      	ldr	r1, [r5, #0]
 8016b56:	6823      	ldr	r3, [r4, #0]
 8016b58:	f851 6b04 	ldr.w	r6, [r1], #4
 8016b5c:	6029      	str	r1, [r5, #0]
 8016b5e:	061d      	lsls	r5, r3, #24
 8016b60:	d514      	bpl.n	8016b8c <_printf_i+0x1ac>
 8016b62:	07df      	lsls	r7, r3, #31
 8016b64:	bf44      	itt	mi
 8016b66:	f043 0320 	orrmi.w	r3, r3, #32
 8016b6a:	6023      	strmi	r3, [r4, #0]
 8016b6c:	b91e      	cbnz	r6, 8016b76 <_printf_i+0x196>
 8016b6e:	6823      	ldr	r3, [r4, #0]
 8016b70:	f023 0320 	bic.w	r3, r3, #32
 8016b74:	6023      	str	r3, [r4, #0]
 8016b76:	2310      	movs	r3, #16
 8016b78:	e7b0      	b.n	8016adc <_printf_i+0xfc>
 8016b7a:	6823      	ldr	r3, [r4, #0]
 8016b7c:	f043 0320 	orr.w	r3, r3, #32
 8016b80:	6023      	str	r3, [r4, #0]
 8016b82:	2378      	movs	r3, #120	; 0x78
 8016b84:	4828      	ldr	r0, [pc, #160]	; (8016c28 <_printf_i+0x248>)
 8016b86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016b8a:	e7e3      	b.n	8016b54 <_printf_i+0x174>
 8016b8c:	0659      	lsls	r1, r3, #25
 8016b8e:	bf48      	it	mi
 8016b90:	b2b6      	uxthmi	r6, r6
 8016b92:	e7e6      	b.n	8016b62 <_printf_i+0x182>
 8016b94:	4615      	mov	r5, r2
 8016b96:	e7bb      	b.n	8016b10 <_printf_i+0x130>
 8016b98:	682b      	ldr	r3, [r5, #0]
 8016b9a:	6826      	ldr	r6, [r4, #0]
 8016b9c:	6961      	ldr	r1, [r4, #20]
 8016b9e:	1d18      	adds	r0, r3, #4
 8016ba0:	6028      	str	r0, [r5, #0]
 8016ba2:	0635      	lsls	r5, r6, #24
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	d501      	bpl.n	8016bac <_printf_i+0x1cc>
 8016ba8:	6019      	str	r1, [r3, #0]
 8016baa:	e002      	b.n	8016bb2 <_printf_i+0x1d2>
 8016bac:	0670      	lsls	r0, r6, #25
 8016bae:	d5fb      	bpl.n	8016ba8 <_printf_i+0x1c8>
 8016bb0:	8019      	strh	r1, [r3, #0]
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	6123      	str	r3, [r4, #16]
 8016bb6:	4615      	mov	r5, r2
 8016bb8:	e7ba      	b.n	8016b30 <_printf_i+0x150>
 8016bba:	682b      	ldr	r3, [r5, #0]
 8016bbc:	1d1a      	adds	r2, r3, #4
 8016bbe:	602a      	str	r2, [r5, #0]
 8016bc0:	681d      	ldr	r5, [r3, #0]
 8016bc2:	6862      	ldr	r2, [r4, #4]
 8016bc4:	2100      	movs	r1, #0
 8016bc6:	4628      	mov	r0, r5
 8016bc8:	f7e9 fb32 	bl	8000230 <memchr>
 8016bcc:	b108      	cbz	r0, 8016bd2 <_printf_i+0x1f2>
 8016bce:	1b40      	subs	r0, r0, r5
 8016bd0:	6060      	str	r0, [r4, #4]
 8016bd2:	6863      	ldr	r3, [r4, #4]
 8016bd4:	6123      	str	r3, [r4, #16]
 8016bd6:	2300      	movs	r3, #0
 8016bd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016bdc:	e7a8      	b.n	8016b30 <_printf_i+0x150>
 8016bde:	6923      	ldr	r3, [r4, #16]
 8016be0:	462a      	mov	r2, r5
 8016be2:	4649      	mov	r1, r9
 8016be4:	4640      	mov	r0, r8
 8016be6:	47d0      	blx	sl
 8016be8:	3001      	adds	r0, #1
 8016bea:	d0ab      	beq.n	8016b44 <_printf_i+0x164>
 8016bec:	6823      	ldr	r3, [r4, #0]
 8016bee:	079b      	lsls	r3, r3, #30
 8016bf0:	d413      	bmi.n	8016c1a <_printf_i+0x23a>
 8016bf2:	68e0      	ldr	r0, [r4, #12]
 8016bf4:	9b03      	ldr	r3, [sp, #12]
 8016bf6:	4298      	cmp	r0, r3
 8016bf8:	bfb8      	it	lt
 8016bfa:	4618      	movlt	r0, r3
 8016bfc:	e7a4      	b.n	8016b48 <_printf_i+0x168>
 8016bfe:	2301      	movs	r3, #1
 8016c00:	4632      	mov	r2, r6
 8016c02:	4649      	mov	r1, r9
 8016c04:	4640      	mov	r0, r8
 8016c06:	47d0      	blx	sl
 8016c08:	3001      	adds	r0, #1
 8016c0a:	d09b      	beq.n	8016b44 <_printf_i+0x164>
 8016c0c:	3501      	adds	r5, #1
 8016c0e:	68e3      	ldr	r3, [r4, #12]
 8016c10:	9903      	ldr	r1, [sp, #12]
 8016c12:	1a5b      	subs	r3, r3, r1
 8016c14:	42ab      	cmp	r3, r5
 8016c16:	dcf2      	bgt.n	8016bfe <_printf_i+0x21e>
 8016c18:	e7eb      	b.n	8016bf2 <_printf_i+0x212>
 8016c1a:	2500      	movs	r5, #0
 8016c1c:	f104 0619 	add.w	r6, r4, #25
 8016c20:	e7f5      	b.n	8016c0e <_printf_i+0x22e>
 8016c22:	bf00      	nop
 8016c24:	08019e75 	.word	0x08019e75
 8016c28:	08019e86 	.word	0x08019e86

08016c2c <_sbrk_r>:
 8016c2c:	b538      	push	{r3, r4, r5, lr}
 8016c2e:	4d06      	ldr	r5, [pc, #24]	; (8016c48 <_sbrk_r+0x1c>)
 8016c30:	2300      	movs	r3, #0
 8016c32:	4604      	mov	r4, r0
 8016c34:	4608      	mov	r0, r1
 8016c36:	602b      	str	r3, [r5, #0]
 8016c38:	f7eb fb60 	bl	80022fc <_sbrk>
 8016c3c:	1c43      	adds	r3, r0, #1
 8016c3e:	d102      	bne.n	8016c46 <_sbrk_r+0x1a>
 8016c40:	682b      	ldr	r3, [r5, #0]
 8016c42:	b103      	cbz	r3, 8016c46 <_sbrk_r+0x1a>
 8016c44:	6023      	str	r3, [r4, #0]
 8016c46:	bd38      	pop	{r3, r4, r5, pc}
 8016c48:	20009390 	.word	0x20009390

08016c4c <__sread>:
 8016c4c:	b510      	push	{r4, lr}
 8016c4e:	460c      	mov	r4, r1
 8016c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c54:	f000 fa6e 	bl	8017134 <_read_r>
 8016c58:	2800      	cmp	r0, #0
 8016c5a:	bfab      	itete	ge
 8016c5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016c5e:	89a3      	ldrhlt	r3, [r4, #12]
 8016c60:	181b      	addge	r3, r3, r0
 8016c62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016c66:	bfac      	ite	ge
 8016c68:	6563      	strge	r3, [r4, #84]	; 0x54
 8016c6a:	81a3      	strhlt	r3, [r4, #12]
 8016c6c:	bd10      	pop	{r4, pc}

08016c6e <__swrite>:
 8016c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c72:	461f      	mov	r7, r3
 8016c74:	898b      	ldrh	r3, [r1, #12]
 8016c76:	05db      	lsls	r3, r3, #23
 8016c78:	4605      	mov	r5, r0
 8016c7a:	460c      	mov	r4, r1
 8016c7c:	4616      	mov	r6, r2
 8016c7e:	d505      	bpl.n	8016c8c <__swrite+0x1e>
 8016c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c84:	2302      	movs	r3, #2
 8016c86:	2200      	movs	r2, #0
 8016c88:	f000 f9d0 	bl	801702c <_lseek_r>
 8016c8c:	89a3      	ldrh	r3, [r4, #12]
 8016c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c96:	81a3      	strh	r3, [r4, #12]
 8016c98:	4632      	mov	r2, r6
 8016c9a:	463b      	mov	r3, r7
 8016c9c:	4628      	mov	r0, r5
 8016c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ca2:	f000 b869 	b.w	8016d78 <_write_r>

08016ca6 <__sseek>:
 8016ca6:	b510      	push	{r4, lr}
 8016ca8:	460c      	mov	r4, r1
 8016caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cae:	f000 f9bd 	bl	801702c <_lseek_r>
 8016cb2:	1c43      	adds	r3, r0, #1
 8016cb4:	89a3      	ldrh	r3, [r4, #12]
 8016cb6:	bf15      	itete	ne
 8016cb8:	6560      	strne	r0, [r4, #84]	; 0x54
 8016cba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016cbe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016cc2:	81a3      	strheq	r3, [r4, #12]
 8016cc4:	bf18      	it	ne
 8016cc6:	81a3      	strhne	r3, [r4, #12]
 8016cc8:	bd10      	pop	{r4, pc}

08016cca <__sclose>:
 8016cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cce:	f000 b8db 	b.w	8016e88 <_close_r>
	...

08016cd4 <__swbuf_r>:
 8016cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cd6:	460e      	mov	r6, r1
 8016cd8:	4614      	mov	r4, r2
 8016cda:	4605      	mov	r5, r0
 8016cdc:	b118      	cbz	r0, 8016ce6 <__swbuf_r+0x12>
 8016cde:	6983      	ldr	r3, [r0, #24]
 8016ce0:	b90b      	cbnz	r3, 8016ce6 <__swbuf_r+0x12>
 8016ce2:	f7ff fb1b 	bl	801631c <__sinit>
 8016ce6:	4b21      	ldr	r3, [pc, #132]	; (8016d6c <__swbuf_r+0x98>)
 8016ce8:	429c      	cmp	r4, r3
 8016cea:	d12b      	bne.n	8016d44 <__swbuf_r+0x70>
 8016cec:	686c      	ldr	r4, [r5, #4]
 8016cee:	69a3      	ldr	r3, [r4, #24]
 8016cf0:	60a3      	str	r3, [r4, #8]
 8016cf2:	89a3      	ldrh	r3, [r4, #12]
 8016cf4:	071a      	lsls	r2, r3, #28
 8016cf6:	d52f      	bpl.n	8016d58 <__swbuf_r+0x84>
 8016cf8:	6923      	ldr	r3, [r4, #16]
 8016cfa:	b36b      	cbz	r3, 8016d58 <__swbuf_r+0x84>
 8016cfc:	6923      	ldr	r3, [r4, #16]
 8016cfe:	6820      	ldr	r0, [r4, #0]
 8016d00:	1ac0      	subs	r0, r0, r3
 8016d02:	6963      	ldr	r3, [r4, #20]
 8016d04:	b2f6      	uxtb	r6, r6
 8016d06:	4283      	cmp	r3, r0
 8016d08:	4637      	mov	r7, r6
 8016d0a:	dc04      	bgt.n	8016d16 <__swbuf_r+0x42>
 8016d0c:	4621      	mov	r1, r4
 8016d0e:	4628      	mov	r0, r5
 8016d10:	f000 f950 	bl	8016fb4 <_fflush_r>
 8016d14:	bb30      	cbnz	r0, 8016d64 <__swbuf_r+0x90>
 8016d16:	68a3      	ldr	r3, [r4, #8]
 8016d18:	3b01      	subs	r3, #1
 8016d1a:	60a3      	str	r3, [r4, #8]
 8016d1c:	6823      	ldr	r3, [r4, #0]
 8016d1e:	1c5a      	adds	r2, r3, #1
 8016d20:	6022      	str	r2, [r4, #0]
 8016d22:	701e      	strb	r6, [r3, #0]
 8016d24:	6963      	ldr	r3, [r4, #20]
 8016d26:	3001      	adds	r0, #1
 8016d28:	4283      	cmp	r3, r0
 8016d2a:	d004      	beq.n	8016d36 <__swbuf_r+0x62>
 8016d2c:	89a3      	ldrh	r3, [r4, #12]
 8016d2e:	07db      	lsls	r3, r3, #31
 8016d30:	d506      	bpl.n	8016d40 <__swbuf_r+0x6c>
 8016d32:	2e0a      	cmp	r6, #10
 8016d34:	d104      	bne.n	8016d40 <__swbuf_r+0x6c>
 8016d36:	4621      	mov	r1, r4
 8016d38:	4628      	mov	r0, r5
 8016d3a:	f000 f93b 	bl	8016fb4 <_fflush_r>
 8016d3e:	b988      	cbnz	r0, 8016d64 <__swbuf_r+0x90>
 8016d40:	4638      	mov	r0, r7
 8016d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d44:	4b0a      	ldr	r3, [pc, #40]	; (8016d70 <__swbuf_r+0x9c>)
 8016d46:	429c      	cmp	r4, r3
 8016d48:	d101      	bne.n	8016d4e <__swbuf_r+0x7a>
 8016d4a:	68ac      	ldr	r4, [r5, #8]
 8016d4c:	e7cf      	b.n	8016cee <__swbuf_r+0x1a>
 8016d4e:	4b09      	ldr	r3, [pc, #36]	; (8016d74 <__swbuf_r+0xa0>)
 8016d50:	429c      	cmp	r4, r3
 8016d52:	bf08      	it	eq
 8016d54:	68ec      	ldreq	r4, [r5, #12]
 8016d56:	e7ca      	b.n	8016cee <__swbuf_r+0x1a>
 8016d58:	4621      	mov	r1, r4
 8016d5a:	4628      	mov	r0, r5
 8016d5c:	f000 f81e 	bl	8016d9c <__swsetup_r>
 8016d60:	2800      	cmp	r0, #0
 8016d62:	d0cb      	beq.n	8016cfc <__swbuf_r+0x28>
 8016d64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016d68:	e7ea      	b.n	8016d40 <__swbuf_r+0x6c>
 8016d6a:	bf00      	nop
 8016d6c:	08019e24 	.word	0x08019e24
 8016d70:	08019e44 	.word	0x08019e44
 8016d74:	08019e04 	.word	0x08019e04

08016d78 <_write_r>:
 8016d78:	b538      	push	{r3, r4, r5, lr}
 8016d7a:	4d07      	ldr	r5, [pc, #28]	; (8016d98 <_write_r+0x20>)
 8016d7c:	4604      	mov	r4, r0
 8016d7e:	4608      	mov	r0, r1
 8016d80:	4611      	mov	r1, r2
 8016d82:	2200      	movs	r2, #0
 8016d84:	602a      	str	r2, [r5, #0]
 8016d86:	461a      	mov	r2, r3
 8016d88:	f7fe fe4c 	bl	8015a24 <_write>
 8016d8c:	1c43      	adds	r3, r0, #1
 8016d8e:	d102      	bne.n	8016d96 <_write_r+0x1e>
 8016d90:	682b      	ldr	r3, [r5, #0]
 8016d92:	b103      	cbz	r3, 8016d96 <_write_r+0x1e>
 8016d94:	6023      	str	r3, [r4, #0]
 8016d96:	bd38      	pop	{r3, r4, r5, pc}
 8016d98:	20009390 	.word	0x20009390

08016d9c <__swsetup_r>:
 8016d9c:	4b32      	ldr	r3, [pc, #200]	; (8016e68 <__swsetup_r+0xcc>)
 8016d9e:	b570      	push	{r4, r5, r6, lr}
 8016da0:	681d      	ldr	r5, [r3, #0]
 8016da2:	4606      	mov	r6, r0
 8016da4:	460c      	mov	r4, r1
 8016da6:	b125      	cbz	r5, 8016db2 <__swsetup_r+0x16>
 8016da8:	69ab      	ldr	r3, [r5, #24]
 8016daa:	b913      	cbnz	r3, 8016db2 <__swsetup_r+0x16>
 8016dac:	4628      	mov	r0, r5
 8016dae:	f7ff fab5 	bl	801631c <__sinit>
 8016db2:	4b2e      	ldr	r3, [pc, #184]	; (8016e6c <__swsetup_r+0xd0>)
 8016db4:	429c      	cmp	r4, r3
 8016db6:	d10f      	bne.n	8016dd8 <__swsetup_r+0x3c>
 8016db8:	686c      	ldr	r4, [r5, #4]
 8016dba:	89a3      	ldrh	r3, [r4, #12]
 8016dbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016dc0:	0719      	lsls	r1, r3, #28
 8016dc2:	d42c      	bmi.n	8016e1e <__swsetup_r+0x82>
 8016dc4:	06dd      	lsls	r5, r3, #27
 8016dc6:	d411      	bmi.n	8016dec <__swsetup_r+0x50>
 8016dc8:	2309      	movs	r3, #9
 8016dca:	6033      	str	r3, [r6, #0]
 8016dcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016dd0:	81a3      	strh	r3, [r4, #12]
 8016dd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016dd6:	e03e      	b.n	8016e56 <__swsetup_r+0xba>
 8016dd8:	4b25      	ldr	r3, [pc, #148]	; (8016e70 <__swsetup_r+0xd4>)
 8016dda:	429c      	cmp	r4, r3
 8016ddc:	d101      	bne.n	8016de2 <__swsetup_r+0x46>
 8016dde:	68ac      	ldr	r4, [r5, #8]
 8016de0:	e7eb      	b.n	8016dba <__swsetup_r+0x1e>
 8016de2:	4b24      	ldr	r3, [pc, #144]	; (8016e74 <__swsetup_r+0xd8>)
 8016de4:	429c      	cmp	r4, r3
 8016de6:	bf08      	it	eq
 8016de8:	68ec      	ldreq	r4, [r5, #12]
 8016dea:	e7e6      	b.n	8016dba <__swsetup_r+0x1e>
 8016dec:	0758      	lsls	r0, r3, #29
 8016dee:	d512      	bpl.n	8016e16 <__swsetup_r+0x7a>
 8016df0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016df2:	b141      	cbz	r1, 8016e06 <__swsetup_r+0x6a>
 8016df4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016df8:	4299      	cmp	r1, r3
 8016dfa:	d002      	beq.n	8016e02 <__swsetup_r+0x66>
 8016dfc:	4630      	mov	r0, r6
 8016dfe:	f7ff fb47 	bl	8016490 <_free_r>
 8016e02:	2300      	movs	r3, #0
 8016e04:	6363      	str	r3, [r4, #52]	; 0x34
 8016e06:	89a3      	ldrh	r3, [r4, #12]
 8016e08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016e0c:	81a3      	strh	r3, [r4, #12]
 8016e0e:	2300      	movs	r3, #0
 8016e10:	6063      	str	r3, [r4, #4]
 8016e12:	6923      	ldr	r3, [r4, #16]
 8016e14:	6023      	str	r3, [r4, #0]
 8016e16:	89a3      	ldrh	r3, [r4, #12]
 8016e18:	f043 0308 	orr.w	r3, r3, #8
 8016e1c:	81a3      	strh	r3, [r4, #12]
 8016e1e:	6923      	ldr	r3, [r4, #16]
 8016e20:	b94b      	cbnz	r3, 8016e36 <__swsetup_r+0x9a>
 8016e22:	89a3      	ldrh	r3, [r4, #12]
 8016e24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e2c:	d003      	beq.n	8016e36 <__swsetup_r+0x9a>
 8016e2e:	4621      	mov	r1, r4
 8016e30:	4630      	mov	r0, r6
 8016e32:	f000 f933 	bl	801709c <__smakebuf_r>
 8016e36:	89a0      	ldrh	r0, [r4, #12]
 8016e38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e3c:	f010 0301 	ands.w	r3, r0, #1
 8016e40:	d00a      	beq.n	8016e58 <__swsetup_r+0xbc>
 8016e42:	2300      	movs	r3, #0
 8016e44:	60a3      	str	r3, [r4, #8]
 8016e46:	6963      	ldr	r3, [r4, #20]
 8016e48:	425b      	negs	r3, r3
 8016e4a:	61a3      	str	r3, [r4, #24]
 8016e4c:	6923      	ldr	r3, [r4, #16]
 8016e4e:	b943      	cbnz	r3, 8016e62 <__swsetup_r+0xc6>
 8016e50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016e54:	d1ba      	bne.n	8016dcc <__swsetup_r+0x30>
 8016e56:	bd70      	pop	{r4, r5, r6, pc}
 8016e58:	0781      	lsls	r1, r0, #30
 8016e5a:	bf58      	it	pl
 8016e5c:	6963      	ldrpl	r3, [r4, #20]
 8016e5e:	60a3      	str	r3, [r4, #8]
 8016e60:	e7f4      	b.n	8016e4c <__swsetup_r+0xb0>
 8016e62:	2000      	movs	r0, #0
 8016e64:	e7f7      	b.n	8016e56 <__swsetup_r+0xba>
 8016e66:	bf00      	nop
 8016e68:	2000002c 	.word	0x2000002c
 8016e6c:	08019e24 	.word	0x08019e24
 8016e70:	08019e44 	.word	0x08019e44
 8016e74:	08019e04 	.word	0x08019e04

08016e78 <abort>:
 8016e78:	b508      	push	{r3, lr}
 8016e7a:	2006      	movs	r0, #6
 8016e7c:	f000 f994 	bl	80171a8 <raise>
 8016e80:	2001      	movs	r0, #1
 8016e82:	f7eb f9fd 	bl	8002280 <_exit>
	...

08016e88 <_close_r>:
 8016e88:	b538      	push	{r3, r4, r5, lr}
 8016e8a:	4d06      	ldr	r5, [pc, #24]	; (8016ea4 <_close_r+0x1c>)
 8016e8c:	2300      	movs	r3, #0
 8016e8e:	4604      	mov	r4, r0
 8016e90:	4608      	mov	r0, r1
 8016e92:	602b      	str	r3, [r5, #0]
 8016e94:	f7eb f9fe 	bl	8002294 <_close>
 8016e98:	1c43      	adds	r3, r0, #1
 8016e9a:	d102      	bne.n	8016ea2 <_close_r+0x1a>
 8016e9c:	682b      	ldr	r3, [r5, #0]
 8016e9e:	b103      	cbz	r3, 8016ea2 <_close_r+0x1a>
 8016ea0:	6023      	str	r3, [r4, #0]
 8016ea2:	bd38      	pop	{r3, r4, r5, pc}
 8016ea4:	20009390 	.word	0x20009390

08016ea8 <__sflush_r>:
 8016ea8:	898a      	ldrh	r2, [r1, #12]
 8016eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eae:	4605      	mov	r5, r0
 8016eb0:	0710      	lsls	r0, r2, #28
 8016eb2:	460c      	mov	r4, r1
 8016eb4:	d458      	bmi.n	8016f68 <__sflush_r+0xc0>
 8016eb6:	684b      	ldr	r3, [r1, #4]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	dc05      	bgt.n	8016ec8 <__sflush_r+0x20>
 8016ebc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	dc02      	bgt.n	8016ec8 <__sflush_r+0x20>
 8016ec2:	2000      	movs	r0, #0
 8016ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ec8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016eca:	2e00      	cmp	r6, #0
 8016ecc:	d0f9      	beq.n	8016ec2 <__sflush_r+0x1a>
 8016ece:	2300      	movs	r3, #0
 8016ed0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016ed4:	682f      	ldr	r7, [r5, #0]
 8016ed6:	602b      	str	r3, [r5, #0]
 8016ed8:	d032      	beq.n	8016f40 <__sflush_r+0x98>
 8016eda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016edc:	89a3      	ldrh	r3, [r4, #12]
 8016ede:	075a      	lsls	r2, r3, #29
 8016ee0:	d505      	bpl.n	8016eee <__sflush_r+0x46>
 8016ee2:	6863      	ldr	r3, [r4, #4]
 8016ee4:	1ac0      	subs	r0, r0, r3
 8016ee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016ee8:	b10b      	cbz	r3, 8016eee <__sflush_r+0x46>
 8016eea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016eec:	1ac0      	subs	r0, r0, r3
 8016eee:	2300      	movs	r3, #0
 8016ef0:	4602      	mov	r2, r0
 8016ef2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ef4:	6a21      	ldr	r1, [r4, #32]
 8016ef6:	4628      	mov	r0, r5
 8016ef8:	47b0      	blx	r6
 8016efa:	1c43      	adds	r3, r0, #1
 8016efc:	89a3      	ldrh	r3, [r4, #12]
 8016efe:	d106      	bne.n	8016f0e <__sflush_r+0x66>
 8016f00:	6829      	ldr	r1, [r5, #0]
 8016f02:	291d      	cmp	r1, #29
 8016f04:	d82c      	bhi.n	8016f60 <__sflush_r+0xb8>
 8016f06:	4a2a      	ldr	r2, [pc, #168]	; (8016fb0 <__sflush_r+0x108>)
 8016f08:	40ca      	lsrs	r2, r1
 8016f0a:	07d6      	lsls	r6, r2, #31
 8016f0c:	d528      	bpl.n	8016f60 <__sflush_r+0xb8>
 8016f0e:	2200      	movs	r2, #0
 8016f10:	6062      	str	r2, [r4, #4]
 8016f12:	04d9      	lsls	r1, r3, #19
 8016f14:	6922      	ldr	r2, [r4, #16]
 8016f16:	6022      	str	r2, [r4, #0]
 8016f18:	d504      	bpl.n	8016f24 <__sflush_r+0x7c>
 8016f1a:	1c42      	adds	r2, r0, #1
 8016f1c:	d101      	bne.n	8016f22 <__sflush_r+0x7a>
 8016f1e:	682b      	ldr	r3, [r5, #0]
 8016f20:	b903      	cbnz	r3, 8016f24 <__sflush_r+0x7c>
 8016f22:	6560      	str	r0, [r4, #84]	; 0x54
 8016f24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f26:	602f      	str	r7, [r5, #0]
 8016f28:	2900      	cmp	r1, #0
 8016f2a:	d0ca      	beq.n	8016ec2 <__sflush_r+0x1a>
 8016f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f30:	4299      	cmp	r1, r3
 8016f32:	d002      	beq.n	8016f3a <__sflush_r+0x92>
 8016f34:	4628      	mov	r0, r5
 8016f36:	f7ff faab 	bl	8016490 <_free_r>
 8016f3a:	2000      	movs	r0, #0
 8016f3c:	6360      	str	r0, [r4, #52]	; 0x34
 8016f3e:	e7c1      	b.n	8016ec4 <__sflush_r+0x1c>
 8016f40:	6a21      	ldr	r1, [r4, #32]
 8016f42:	2301      	movs	r3, #1
 8016f44:	4628      	mov	r0, r5
 8016f46:	47b0      	blx	r6
 8016f48:	1c41      	adds	r1, r0, #1
 8016f4a:	d1c7      	bne.n	8016edc <__sflush_r+0x34>
 8016f4c:	682b      	ldr	r3, [r5, #0]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d0c4      	beq.n	8016edc <__sflush_r+0x34>
 8016f52:	2b1d      	cmp	r3, #29
 8016f54:	d001      	beq.n	8016f5a <__sflush_r+0xb2>
 8016f56:	2b16      	cmp	r3, #22
 8016f58:	d101      	bne.n	8016f5e <__sflush_r+0xb6>
 8016f5a:	602f      	str	r7, [r5, #0]
 8016f5c:	e7b1      	b.n	8016ec2 <__sflush_r+0x1a>
 8016f5e:	89a3      	ldrh	r3, [r4, #12]
 8016f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f64:	81a3      	strh	r3, [r4, #12]
 8016f66:	e7ad      	b.n	8016ec4 <__sflush_r+0x1c>
 8016f68:	690f      	ldr	r7, [r1, #16]
 8016f6a:	2f00      	cmp	r7, #0
 8016f6c:	d0a9      	beq.n	8016ec2 <__sflush_r+0x1a>
 8016f6e:	0793      	lsls	r3, r2, #30
 8016f70:	680e      	ldr	r6, [r1, #0]
 8016f72:	bf08      	it	eq
 8016f74:	694b      	ldreq	r3, [r1, #20]
 8016f76:	600f      	str	r7, [r1, #0]
 8016f78:	bf18      	it	ne
 8016f7a:	2300      	movne	r3, #0
 8016f7c:	eba6 0807 	sub.w	r8, r6, r7
 8016f80:	608b      	str	r3, [r1, #8]
 8016f82:	f1b8 0f00 	cmp.w	r8, #0
 8016f86:	dd9c      	ble.n	8016ec2 <__sflush_r+0x1a>
 8016f88:	6a21      	ldr	r1, [r4, #32]
 8016f8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016f8c:	4643      	mov	r3, r8
 8016f8e:	463a      	mov	r2, r7
 8016f90:	4628      	mov	r0, r5
 8016f92:	47b0      	blx	r6
 8016f94:	2800      	cmp	r0, #0
 8016f96:	dc06      	bgt.n	8016fa6 <__sflush_r+0xfe>
 8016f98:	89a3      	ldrh	r3, [r4, #12]
 8016f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f9e:	81a3      	strh	r3, [r4, #12]
 8016fa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016fa4:	e78e      	b.n	8016ec4 <__sflush_r+0x1c>
 8016fa6:	4407      	add	r7, r0
 8016fa8:	eba8 0800 	sub.w	r8, r8, r0
 8016fac:	e7e9      	b.n	8016f82 <__sflush_r+0xda>
 8016fae:	bf00      	nop
 8016fb0:	20400001 	.word	0x20400001

08016fb4 <_fflush_r>:
 8016fb4:	b538      	push	{r3, r4, r5, lr}
 8016fb6:	690b      	ldr	r3, [r1, #16]
 8016fb8:	4605      	mov	r5, r0
 8016fba:	460c      	mov	r4, r1
 8016fbc:	b913      	cbnz	r3, 8016fc4 <_fflush_r+0x10>
 8016fbe:	2500      	movs	r5, #0
 8016fc0:	4628      	mov	r0, r5
 8016fc2:	bd38      	pop	{r3, r4, r5, pc}
 8016fc4:	b118      	cbz	r0, 8016fce <_fflush_r+0x1a>
 8016fc6:	6983      	ldr	r3, [r0, #24]
 8016fc8:	b90b      	cbnz	r3, 8016fce <_fflush_r+0x1a>
 8016fca:	f7ff f9a7 	bl	801631c <__sinit>
 8016fce:	4b14      	ldr	r3, [pc, #80]	; (8017020 <_fflush_r+0x6c>)
 8016fd0:	429c      	cmp	r4, r3
 8016fd2:	d11b      	bne.n	801700c <_fflush_r+0x58>
 8016fd4:	686c      	ldr	r4, [r5, #4]
 8016fd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d0ef      	beq.n	8016fbe <_fflush_r+0xa>
 8016fde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016fe0:	07d0      	lsls	r0, r2, #31
 8016fe2:	d404      	bmi.n	8016fee <_fflush_r+0x3a>
 8016fe4:	0599      	lsls	r1, r3, #22
 8016fe6:	d402      	bmi.n	8016fee <_fflush_r+0x3a>
 8016fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016fea:	f7ff fa47 	bl	801647c <__retarget_lock_acquire_recursive>
 8016fee:	4628      	mov	r0, r5
 8016ff0:	4621      	mov	r1, r4
 8016ff2:	f7ff ff59 	bl	8016ea8 <__sflush_r>
 8016ff6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ff8:	07da      	lsls	r2, r3, #31
 8016ffa:	4605      	mov	r5, r0
 8016ffc:	d4e0      	bmi.n	8016fc0 <_fflush_r+0xc>
 8016ffe:	89a3      	ldrh	r3, [r4, #12]
 8017000:	059b      	lsls	r3, r3, #22
 8017002:	d4dd      	bmi.n	8016fc0 <_fflush_r+0xc>
 8017004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017006:	f7ff fa3a 	bl	801647e <__retarget_lock_release_recursive>
 801700a:	e7d9      	b.n	8016fc0 <_fflush_r+0xc>
 801700c:	4b05      	ldr	r3, [pc, #20]	; (8017024 <_fflush_r+0x70>)
 801700e:	429c      	cmp	r4, r3
 8017010:	d101      	bne.n	8017016 <_fflush_r+0x62>
 8017012:	68ac      	ldr	r4, [r5, #8]
 8017014:	e7df      	b.n	8016fd6 <_fflush_r+0x22>
 8017016:	4b04      	ldr	r3, [pc, #16]	; (8017028 <_fflush_r+0x74>)
 8017018:	429c      	cmp	r4, r3
 801701a:	bf08      	it	eq
 801701c:	68ec      	ldreq	r4, [r5, #12]
 801701e:	e7da      	b.n	8016fd6 <_fflush_r+0x22>
 8017020:	08019e24 	.word	0x08019e24
 8017024:	08019e44 	.word	0x08019e44
 8017028:	08019e04 	.word	0x08019e04

0801702c <_lseek_r>:
 801702c:	b538      	push	{r3, r4, r5, lr}
 801702e:	4d07      	ldr	r5, [pc, #28]	; (801704c <_lseek_r+0x20>)
 8017030:	4604      	mov	r4, r0
 8017032:	4608      	mov	r0, r1
 8017034:	4611      	mov	r1, r2
 8017036:	2200      	movs	r2, #0
 8017038:	602a      	str	r2, [r5, #0]
 801703a:	461a      	mov	r2, r3
 801703c:	f7eb f951 	bl	80022e2 <_lseek>
 8017040:	1c43      	adds	r3, r0, #1
 8017042:	d102      	bne.n	801704a <_lseek_r+0x1e>
 8017044:	682b      	ldr	r3, [r5, #0]
 8017046:	b103      	cbz	r3, 801704a <_lseek_r+0x1e>
 8017048:	6023      	str	r3, [r4, #0]
 801704a:	bd38      	pop	{r3, r4, r5, pc}
 801704c:	20009390 	.word	0x20009390

08017050 <__swhatbuf_r>:
 8017050:	b570      	push	{r4, r5, r6, lr}
 8017052:	460e      	mov	r6, r1
 8017054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017058:	2900      	cmp	r1, #0
 801705a:	b096      	sub	sp, #88	; 0x58
 801705c:	4614      	mov	r4, r2
 801705e:	461d      	mov	r5, r3
 8017060:	da08      	bge.n	8017074 <__swhatbuf_r+0x24>
 8017062:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017066:	2200      	movs	r2, #0
 8017068:	602a      	str	r2, [r5, #0]
 801706a:	061a      	lsls	r2, r3, #24
 801706c:	d410      	bmi.n	8017090 <__swhatbuf_r+0x40>
 801706e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017072:	e00e      	b.n	8017092 <__swhatbuf_r+0x42>
 8017074:	466a      	mov	r2, sp
 8017076:	f000 f8b3 	bl	80171e0 <_fstat_r>
 801707a:	2800      	cmp	r0, #0
 801707c:	dbf1      	blt.n	8017062 <__swhatbuf_r+0x12>
 801707e:	9a01      	ldr	r2, [sp, #4]
 8017080:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017084:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017088:	425a      	negs	r2, r3
 801708a:	415a      	adcs	r2, r3
 801708c:	602a      	str	r2, [r5, #0]
 801708e:	e7ee      	b.n	801706e <__swhatbuf_r+0x1e>
 8017090:	2340      	movs	r3, #64	; 0x40
 8017092:	2000      	movs	r0, #0
 8017094:	6023      	str	r3, [r4, #0]
 8017096:	b016      	add	sp, #88	; 0x58
 8017098:	bd70      	pop	{r4, r5, r6, pc}
	...

0801709c <__smakebuf_r>:
 801709c:	898b      	ldrh	r3, [r1, #12]
 801709e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80170a0:	079d      	lsls	r5, r3, #30
 80170a2:	4606      	mov	r6, r0
 80170a4:	460c      	mov	r4, r1
 80170a6:	d507      	bpl.n	80170b8 <__smakebuf_r+0x1c>
 80170a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80170ac:	6023      	str	r3, [r4, #0]
 80170ae:	6123      	str	r3, [r4, #16]
 80170b0:	2301      	movs	r3, #1
 80170b2:	6163      	str	r3, [r4, #20]
 80170b4:	b002      	add	sp, #8
 80170b6:	bd70      	pop	{r4, r5, r6, pc}
 80170b8:	ab01      	add	r3, sp, #4
 80170ba:	466a      	mov	r2, sp
 80170bc:	f7ff ffc8 	bl	8017050 <__swhatbuf_r>
 80170c0:	9900      	ldr	r1, [sp, #0]
 80170c2:	4605      	mov	r5, r0
 80170c4:	4630      	mov	r0, r6
 80170c6:	f7ff fa4f 	bl	8016568 <_malloc_r>
 80170ca:	b948      	cbnz	r0, 80170e0 <__smakebuf_r+0x44>
 80170cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170d0:	059a      	lsls	r2, r3, #22
 80170d2:	d4ef      	bmi.n	80170b4 <__smakebuf_r+0x18>
 80170d4:	f023 0303 	bic.w	r3, r3, #3
 80170d8:	f043 0302 	orr.w	r3, r3, #2
 80170dc:	81a3      	strh	r3, [r4, #12]
 80170de:	e7e3      	b.n	80170a8 <__smakebuf_r+0xc>
 80170e0:	4b0d      	ldr	r3, [pc, #52]	; (8017118 <__smakebuf_r+0x7c>)
 80170e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80170e4:	89a3      	ldrh	r3, [r4, #12]
 80170e6:	6020      	str	r0, [r4, #0]
 80170e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80170ec:	81a3      	strh	r3, [r4, #12]
 80170ee:	9b00      	ldr	r3, [sp, #0]
 80170f0:	6163      	str	r3, [r4, #20]
 80170f2:	9b01      	ldr	r3, [sp, #4]
 80170f4:	6120      	str	r0, [r4, #16]
 80170f6:	b15b      	cbz	r3, 8017110 <__smakebuf_r+0x74>
 80170f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80170fc:	4630      	mov	r0, r6
 80170fe:	f000 f881 	bl	8017204 <_isatty_r>
 8017102:	b128      	cbz	r0, 8017110 <__smakebuf_r+0x74>
 8017104:	89a3      	ldrh	r3, [r4, #12]
 8017106:	f023 0303 	bic.w	r3, r3, #3
 801710a:	f043 0301 	orr.w	r3, r3, #1
 801710e:	81a3      	strh	r3, [r4, #12]
 8017110:	89a0      	ldrh	r0, [r4, #12]
 8017112:	4305      	orrs	r5, r0
 8017114:	81a5      	strh	r5, [r4, #12]
 8017116:	e7cd      	b.n	80170b4 <__smakebuf_r+0x18>
 8017118:	080162b5 	.word	0x080162b5

0801711c <__malloc_lock>:
 801711c:	4801      	ldr	r0, [pc, #4]	; (8017124 <__malloc_lock+0x8>)
 801711e:	f7ff b9ad 	b.w	801647c <__retarget_lock_acquire_recursive>
 8017122:	bf00      	nop
 8017124:	20009394 	.word	0x20009394

08017128 <__malloc_unlock>:
 8017128:	4801      	ldr	r0, [pc, #4]	; (8017130 <__malloc_unlock+0x8>)
 801712a:	f7ff b9a8 	b.w	801647e <__retarget_lock_release_recursive>
 801712e:	bf00      	nop
 8017130:	20009394 	.word	0x20009394

08017134 <_read_r>:
 8017134:	b538      	push	{r3, r4, r5, lr}
 8017136:	4d07      	ldr	r5, [pc, #28]	; (8017154 <_read_r+0x20>)
 8017138:	4604      	mov	r4, r0
 801713a:	4608      	mov	r0, r1
 801713c:	4611      	mov	r1, r2
 801713e:	2200      	movs	r2, #0
 8017140:	602a      	str	r2, [r5, #0]
 8017142:	461a      	mov	r2, r3
 8017144:	f7fe fc84 	bl	8015a50 <_read>
 8017148:	1c43      	adds	r3, r0, #1
 801714a:	d102      	bne.n	8017152 <_read_r+0x1e>
 801714c:	682b      	ldr	r3, [r5, #0]
 801714e:	b103      	cbz	r3, 8017152 <_read_r+0x1e>
 8017150:	6023      	str	r3, [r4, #0]
 8017152:	bd38      	pop	{r3, r4, r5, pc}
 8017154:	20009390 	.word	0x20009390

08017158 <_raise_r>:
 8017158:	291f      	cmp	r1, #31
 801715a:	b538      	push	{r3, r4, r5, lr}
 801715c:	4604      	mov	r4, r0
 801715e:	460d      	mov	r5, r1
 8017160:	d904      	bls.n	801716c <_raise_r+0x14>
 8017162:	2316      	movs	r3, #22
 8017164:	6003      	str	r3, [r0, #0]
 8017166:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801716a:	bd38      	pop	{r3, r4, r5, pc}
 801716c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801716e:	b112      	cbz	r2, 8017176 <_raise_r+0x1e>
 8017170:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017174:	b94b      	cbnz	r3, 801718a <_raise_r+0x32>
 8017176:	4620      	mov	r0, r4
 8017178:	f000 f830 	bl	80171dc <_getpid_r>
 801717c:	462a      	mov	r2, r5
 801717e:	4601      	mov	r1, r0
 8017180:	4620      	mov	r0, r4
 8017182:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017186:	f000 b817 	b.w	80171b8 <_kill_r>
 801718a:	2b01      	cmp	r3, #1
 801718c:	d00a      	beq.n	80171a4 <_raise_r+0x4c>
 801718e:	1c59      	adds	r1, r3, #1
 8017190:	d103      	bne.n	801719a <_raise_r+0x42>
 8017192:	2316      	movs	r3, #22
 8017194:	6003      	str	r3, [r0, #0]
 8017196:	2001      	movs	r0, #1
 8017198:	e7e7      	b.n	801716a <_raise_r+0x12>
 801719a:	2400      	movs	r4, #0
 801719c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80171a0:	4628      	mov	r0, r5
 80171a2:	4798      	blx	r3
 80171a4:	2000      	movs	r0, #0
 80171a6:	e7e0      	b.n	801716a <_raise_r+0x12>

080171a8 <raise>:
 80171a8:	4b02      	ldr	r3, [pc, #8]	; (80171b4 <raise+0xc>)
 80171aa:	4601      	mov	r1, r0
 80171ac:	6818      	ldr	r0, [r3, #0]
 80171ae:	f7ff bfd3 	b.w	8017158 <_raise_r>
 80171b2:	bf00      	nop
 80171b4:	2000002c 	.word	0x2000002c

080171b8 <_kill_r>:
 80171b8:	b538      	push	{r3, r4, r5, lr}
 80171ba:	4d07      	ldr	r5, [pc, #28]	; (80171d8 <_kill_r+0x20>)
 80171bc:	2300      	movs	r3, #0
 80171be:	4604      	mov	r4, r0
 80171c0:	4608      	mov	r0, r1
 80171c2:	4611      	mov	r1, r2
 80171c4:	602b      	str	r3, [r5, #0]
 80171c6:	f7eb f849 	bl	800225c <_kill>
 80171ca:	1c43      	adds	r3, r0, #1
 80171cc:	d102      	bne.n	80171d4 <_kill_r+0x1c>
 80171ce:	682b      	ldr	r3, [r5, #0]
 80171d0:	b103      	cbz	r3, 80171d4 <_kill_r+0x1c>
 80171d2:	6023      	str	r3, [r4, #0]
 80171d4:	bd38      	pop	{r3, r4, r5, pc}
 80171d6:	bf00      	nop
 80171d8:	20009390 	.word	0x20009390

080171dc <_getpid_r>:
 80171dc:	f7eb b836 	b.w	800224c <_getpid>

080171e0 <_fstat_r>:
 80171e0:	b538      	push	{r3, r4, r5, lr}
 80171e2:	4d07      	ldr	r5, [pc, #28]	; (8017200 <_fstat_r+0x20>)
 80171e4:	2300      	movs	r3, #0
 80171e6:	4604      	mov	r4, r0
 80171e8:	4608      	mov	r0, r1
 80171ea:	4611      	mov	r1, r2
 80171ec:	602b      	str	r3, [r5, #0]
 80171ee:	f7eb f85d 	bl	80022ac <_fstat>
 80171f2:	1c43      	adds	r3, r0, #1
 80171f4:	d102      	bne.n	80171fc <_fstat_r+0x1c>
 80171f6:	682b      	ldr	r3, [r5, #0]
 80171f8:	b103      	cbz	r3, 80171fc <_fstat_r+0x1c>
 80171fa:	6023      	str	r3, [r4, #0]
 80171fc:	bd38      	pop	{r3, r4, r5, pc}
 80171fe:	bf00      	nop
 8017200:	20009390 	.word	0x20009390

08017204 <_isatty_r>:
 8017204:	b538      	push	{r3, r4, r5, lr}
 8017206:	4d06      	ldr	r5, [pc, #24]	; (8017220 <_isatty_r+0x1c>)
 8017208:	2300      	movs	r3, #0
 801720a:	4604      	mov	r4, r0
 801720c:	4608      	mov	r0, r1
 801720e:	602b      	str	r3, [r5, #0]
 8017210:	f7eb f85c 	bl	80022cc <_isatty>
 8017214:	1c43      	adds	r3, r0, #1
 8017216:	d102      	bne.n	801721e <_isatty_r+0x1a>
 8017218:	682b      	ldr	r3, [r5, #0]
 801721a:	b103      	cbz	r3, 801721e <_isatty_r+0x1a>
 801721c:	6023      	str	r3, [r4, #0]
 801721e:	bd38      	pop	{r3, r4, r5, pc}
 8017220:	20009390 	.word	0x20009390

08017224 <_init>:
 8017224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017226:	bf00      	nop
 8017228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801722a:	bc08      	pop	{r3}
 801722c:	469e      	mov	lr, r3
 801722e:	4770      	bx	lr

08017230 <_fini>:
 8017230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017232:	bf00      	nop
 8017234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017236:	bc08      	pop	{r3}
 8017238:	469e      	mov	lr, r3
 801723a:	4770      	bx	lr
