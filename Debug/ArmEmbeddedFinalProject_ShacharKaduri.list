
ArmEmbeddedFinalProject_ShacharKaduri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000180b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c38  08018280  08018280  00028280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801aeb8  0801aeb8  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801aeb8  0801aeb8  0002aeb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801aec0  0801aec0  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801aec0  0801aec0  0002aec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801aec4  0801aec4  0002aec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801aec8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  0801af58  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  0801aff8  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009280  200001d0  0801b098  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20009450  0801b098  00039450  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034240  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000789a  00000000  00000000  00064440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002668  00000000  00000000  0006bce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000024a8  00000000  00000000  0006e348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037c16  00000000  00000000  000707f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003d8b1  00000000  00000000  000a8406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011526e  00000000  00000000  000e5cb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001faf25  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a9d0  00000000  00000000  001faf78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018268 	.word	0x08018268

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08018268 	.word	0x08018268

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db4:	f001 fd62 	bl	800287c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db8:	f000 f820 	bl	8000dfc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8000dbc:	f000 fac4 	bl	8001348 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc0:	f000 fb4c 	bl	800145c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000dc4:	f000 fa32 	bl	800122c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dc8:	f000 fa90 	bl	80012ec <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000dcc:	f00a fed6 	bl	800bb7c <MX_LWIP_Init>
  MX_UART4_Init();
 8000dd0:	f000 f9fc 	bl	80011cc <MX_UART4_Init>
  MX_DMA_Init();
 8000dd4:	f000 fab8 	bl	8001348 <MX_DMA_Init>
  MX_I2C1_Init();
 8000dd8:	f000 f8ca 	bl	8000f70 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ddc:	f000 f908 	bl	8000ff0 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8000de0:	f000 fa54 	bl	800128c <MX_USART6_UART_Init>
  MX_SPI4_Init();
 8000de4:	f000 f982 	bl	80010ec <MX_SPI4_Init>
  MX_SPI1_Init();
 8000de8:	f000 f942 	bl	8001070 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000dec:	f000 f86e 	bl	8000ecc <MX_ADC1_Init>
  MX_TIM7_Init();
 8000df0:	f000 f9b4 	bl	800115c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  UUT_main();
 8000df4:	f015 fe80 	bl	8016af8 <UUT_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <main+0x48>
	...

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	; 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0320 	add.w	r3, r7, #32
 8000e06:	2230      	movs	r2, #48	; 0x30
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f016 f9d4 	bl	80171b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e20:	f006 fcde 	bl	80077e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <SystemClock_Config+0xc8>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	4a26      	ldr	r2, [pc, #152]	; (8000ec4 <SystemClock_Config+0xc8>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e30:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <SystemClock_Config+0xc8>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e38:	60bb      	str	r3, [r7, #8]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e44:	4a20      	ldr	r2, [pc, #128]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <SystemClock_Config+0xcc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e54:	607b      	str	r3, [r7, #4]
 8000e56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e62:	2302      	movs	r3, #2
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e6c:	2304      	movs	r3, #4
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000e70:	2348      	movs	r3, #72	; 0x48
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4618      	mov	r0, r3
 8000e82:	f006 fcbd 	bl	8007800 <HAL_RCC_OscConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e8c:	f000 fba4 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e90:	230f      	movs	r3, #15
 8000e92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e94:	2302      	movs	r3, #2
 8000e96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea6:	f107 030c 	add.w	r3, r7, #12
 8000eaa:	2102      	movs	r1, #2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 ff4b 	bl	8007d48 <HAL_RCC_ClockConfig>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eb8:	f000 fb8e 	bl	80015d8 <Error_Handler>
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	3750      	adds	r7, #80	; 0x50
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40007000 	.word	0x40007000

08000ecc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ede:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000ee0:	4a21      	ldr	r2, [pc, #132]	; (8000f68 <MX_ADC1_Init+0x9c>)
 8000ee2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000ee6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000eea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eec:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000efe:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f06:	4b17      	ldr	r3, [pc, #92]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f0e:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <MX_ADC1_Init+0xa0>)
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f2e:	f001 fd27 	bl	8002980 <HAL_ADC_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f38:	f000 fb4e 	bl	80015d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000f44:	2304      	movs	r3, #4
 8000f46:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_ADC1_Init+0x98>)
 8000f4e:	f002 f851 	bl	8002ff4 <HAL_ADC_ConfigChannel>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f58:	f000 fb3e 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	200001ec 	.word	0x200001ec
 8000f68:	40012000 	.word	0x40012000
 8000f6c:	0f000001 	.word	0x0f000001

08000f70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f76:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <MX_I2C1_Init+0x78>)
 8000f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <MX_I2C1_Init+0x7c>)
 8000f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 15;
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f82:	220f      	movs	r2, #15
 8000f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000faa:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fac:	f004 faec 	bl	8005588 <HAL_I2C_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fb6:	f000 fb0f 	bl	80015d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fbe:	f006 fa2f 	bl	8007420 <HAL_I2CEx_ConfigAnalogFilter>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fc8:	f000 fb06 	bl	80015d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fd0:	f006 fa71 	bl	80074b6 <HAL_I2CEx_ConfigDigitalFilter>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fda:	f000 fafd 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000294 	.word	0x20000294
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	00808cd2 	.word	0x00808cd2

08000ff0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <MX_I2C2_Init+0x74>)
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <MX_I2C2_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_I2C2_Init+0x74>)
 8000ffc:	4a1b      	ldr	r2, [pc, #108]	; (800106c <MX_I2C2_Init+0x7c>)
 8000ffe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <MX_I2C2_Init+0x74>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_I2C2_Init+0x74>)
 8001008:	2202      	movs	r2, #2
 800100a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_I2C2_Init+0x74>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_I2C2_Init+0x74>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_I2C2_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_I2C2_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_I2C2_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800102a:	480e      	ldr	r0, [pc, #56]	; (8001064 <MX_I2C2_Init+0x74>)
 800102c:	f004 faac 	bl	8005588 <HAL_I2C_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001036:	f000 facf 	bl	80015d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800103a:	2100      	movs	r1, #0
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <MX_I2C2_Init+0x74>)
 800103e:	f006 f9ef 	bl	8007420 <HAL_I2CEx_ConfigAnalogFilter>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001048:	f000 fac6 	bl	80015d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800104c:	2100      	movs	r1, #0
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_I2C2_Init+0x74>)
 8001050:	f006 fa31 	bl	80074b6 <HAL_I2CEx_ConfigDigitalFilter>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800105a:	f000 fabd 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200002e8 	.word	0x200002e8
 8001068:	40005800 	.word	0x40005800
 800106c:	00808cd2 	.word	0x00808cd2

08001070 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <MX_SPI1_Init+0x74>)
 8001076:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <MX_SPI1_Init+0x78>)
 8001078:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_SPI1_Init+0x74>)
 800107c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001080:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_SPI1_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001088:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <MX_SPI1_Init+0x74>)
 800108a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800108e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_SPI1_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001096:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <MX_SPI1_Init+0x74>)
 8001098:	2200      	movs	r2, #0
 800109a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_SPI1_Init+0x74>)
 800109e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010a6:	2218      	movs	r2, #24
 80010a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010be:	2207      	movs	r2, #7
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010ca:	2208      	movs	r2, #8
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_SPI1_Init+0x74>)
 80010d0:	f007 fc50 	bl	8008974 <HAL_SPI_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010da:	f000 fa7d 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200004bc 	.word	0x200004bc
 80010e8:	40013000 	.word	0x40013000

080010ec <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <MX_SPI4_Init+0x68>)
 80010f2:	4a19      	ldr	r2, [pc, #100]	; (8001158 <MX_SPI4_Init+0x6c>)
 80010f4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_SPI4_Init+0x68>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80010fc:	4b15      	ldr	r3, [pc, #84]	; (8001154 <MX_SPI4_Init+0x68>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_SPI4_Init+0x68>)
 8001104:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001108:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800110a:	4b12      	ldr	r3, [pc, #72]	; (8001154 <MX_SPI4_Init+0x68>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <MX_SPI4_Init+0x68>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <MX_SPI4_Init+0x68>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800111c:	4b0d      	ldr	r3, [pc, #52]	; (8001154 <MX_SPI4_Init+0x68>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <MX_SPI4_Init+0x68>)
 8001124:	2200      	movs	r2, #0
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_SPI4_Init+0x68>)
 800112a:	2200      	movs	r2, #0
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <MX_SPI4_Init+0x68>)
 8001130:	2207      	movs	r2, #7
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <MX_SPI4_Init+0x68>)
 8001136:	2200      	movs	r2, #0
 8001138:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MX_SPI4_Init+0x68>)
 800113c:	2200      	movs	r2, #0
 800113e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001140:	4804      	ldr	r0, [pc, #16]	; (8001154 <MX_SPI4_Init+0x68>)
 8001142:	f007 fc17 	bl	8008974 <HAL_SPI_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 800114c:	f000 fa44 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000520 	.word	0x20000520
 8001158:	40013400 	.word	0x40013400

0800115c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_TIM7_Init+0x68>)
 800116e:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <MX_TIM7_Init+0x6c>)
 8001170:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 3599;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_TIM7_Init+0x68>)
 8001174:	f640 620f 	movw	r2, #3599	; 0xe0f
 8001178:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_TIM7_Init+0x68>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <MX_TIM7_Init+0x68>)
 8001182:	f242 720f 	movw	r2, #9999	; 0x270f
 8001186:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <MX_TIM7_Init+0x68>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_TIM7_Init+0x68>)
 8001190:	f008 fa4e 	bl	8009630 <HAL_TIM_Base_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800119a:	f000 fa1d 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_TIM7_Init+0x68>)
 80011ac:	f008 fd26 	bl	8009bfc <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80011b6:	f000 fa0f 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000704 	.word	0x20000704
 80011c8:	40001400 	.word	0x40001400

080011cc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_UART4_Init+0x58>)
 80011d2:	4a15      	ldr	r2, [pc, #84]	; (8001228 <MX_UART4_Init+0x5c>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011d6:	4b13      	ldr	r3, [pc, #76]	; (8001224 <MX_UART4_Init+0x58>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_UART4_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_UART4_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_UART4_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_UART4_Init+0x58>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_UART4_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_UART4_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_UART4_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_UART4_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_UART4_Init+0x58>)
 8001210:	f008 fda0 	bl	8009d54 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800121a:	f000 f9dd 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000750 	.word	0x20000750
 8001228:	40004c00 	.word	0x40004c00

0800122c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001232:	4a15      	ldr	r2, [pc, #84]	; (8001288 <MX_USART3_UART_Init+0x5c>)
 8001234:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_USART3_UART_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_USART3_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_USART3_UART_Init+0x58>)
 800126a:	2200      	movs	r2, #0
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_USART3_UART_Init+0x58>)
 8001270:	f008 fd70 	bl	8009d54 <HAL_UART_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800127a:	f000 f9ad 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200007d8 	.word	0x200007d8
 8001288:	40004800 	.word	0x40004800

0800128c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <MX_USART6_UART_Init+0x58>)
 8001292:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <MX_USART6_UART_Init+0x5c>)
 8001294:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <MX_USART6_UART_Init+0x58>)
 8001298:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800129c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_USART6_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <MX_USART6_UART_Init+0x58>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_USART6_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_USART6_UART_Init+0x58>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_USART6_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_USART6_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_USART6_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_USART6_UART_Init+0x58>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_USART6_UART_Init+0x58>)
 80012d0:	f008 fd40 	bl	8009d54 <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80012da:	f000 f97d 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000860 	.word	0x20000860
 80012e8:	40011400 	.word	0x40011400

080012ec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fa:	2206      	movs	r2, #6
 80012fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012fe:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001300:	2202      	movs	r2, #2
 8001302:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001304:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130c:	2202      	movs	r2, #2
 800130e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001312:	2201      	movs	r2, #1
 8001314:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001324:	2201      	movs	r2, #1
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001330:	f006 f90d 	bl	800754e <HAL_PCD_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800133a:	f000 f94d 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000a68 	.word	0x20000a68

08001348 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134e:	4b42      	ldr	r3, [pc, #264]	; (8001458 <MX_DMA_Init+0x110>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a41      	ldr	r2, [pc, #260]	; (8001458 <MX_DMA_Init+0x110>)
 8001354:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <MX_DMA_Init+0x110>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001366:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <MX_DMA_Init+0x110>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a3b      	ldr	r2, [pc, #236]	; (8001458 <MX_DMA_Init+0x110>)
 800136c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <MX_DMA_Init+0x110>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	200d      	movs	r0, #13
 8001384:	f002 f9ed 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001388:	200d      	movs	r0, #13
 800138a:	f002 fa06 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800138e:	2200      	movs	r2, #0
 8001390:	2100      	movs	r1, #0
 8001392:	200e      	movs	r0, #14
 8001394:	f002 f9e5 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001398:	200e      	movs	r0, #14
 800139a:	f002 f9fe 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	200f      	movs	r0, #15
 80013a4:	f002 f9dd 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80013a8:	200f      	movs	r0, #15
 80013aa:	f002 f9f6 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2010      	movs	r0, #16
 80013b4:	f002 f9d5 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013b8:	2010      	movs	r0, #16
 80013ba:	f002 f9ee 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	2011      	movs	r0, #17
 80013c4:	f002 f9cd 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80013c8:	2011      	movs	r0, #17
 80013ca:	f002 f9e6 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	202f      	movs	r0, #47	; 0x2f
 80013d4:	f002 f9c5 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80013d8:	202f      	movs	r0, #47	; 0x2f
 80013da:	f002 f9de 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2038      	movs	r0, #56	; 0x38
 80013e4:	f002 f9bd 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013e8:	2038      	movs	r0, #56	; 0x38
 80013ea:	f002 f9d6 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	2039      	movs	r0, #57	; 0x39
 80013f4:	f002 f9b5 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80013f8:	2039      	movs	r0, #57	; 0x39
 80013fa:	f002 f9ce 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	203a      	movs	r0, #58	; 0x3a
 8001404:	f002 f9ad 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001408:	203a      	movs	r0, #58	; 0x3a
 800140a:	f002 f9c6 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	203b      	movs	r0, #59	; 0x3b
 8001414:	f002 f9a5 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001418:	203b      	movs	r0, #59	; 0x3b
 800141a:	f002 f9be 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	203c      	movs	r0, #60	; 0x3c
 8001424:	f002 f99d 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001428:	203c      	movs	r0, #60	; 0x3c
 800142a:	f002 f9b6 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2044      	movs	r0, #68	; 0x44
 8001434:	f002 f995 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001438:	2044      	movs	r0, #68	; 0x44
 800143a:	f002 f9ae 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	2045      	movs	r0, #69	; 0x45
 8001444:	f002 f98d 	bl	8003762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001448:	2045      	movs	r0, #69	; 0x45
 800144a:	f002 f9a6 	bl	800379a <HAL_NVIC_EnableIRQ>

}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08c      	sub	sp, #48	; 0x30
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	4b55      	ldr	r3, [pc, #340]	; (80015c8 <MX_GPIO_Init+0x16c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a54      	ldr	r2, [pc, #336]	; (80015c8 <MX_GPIO_Init+0x16c>)
 8001478:	f043 0304 	orr.w	r3, r3, #4
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b52      	ldr	r3, [pc, #328]	; (80015c8 <MX_GPIO_Init+0x16c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0304 	and.w	r3, r3, #4
 8001486:	61bb      	str	r3, [r7, #24]
 8001488:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148a:	4b4f      	ldr	r3, [pc, #316]	; (80015c8 <MX_GPIO_Init+0x16c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	4a4e      	ldr	r2, [pc, #312]	; (80015c8 <MX_GPIO_Init+0x16c>)
 8001490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
 8001496:	4b4c      	ldr	r3, [pc, #304]	; (80015c8 <MX_GPIO_Init+0x16c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b49      	ldr	r3, [pc, #292]	; (80015c8 <MX_GPIO_Init+0x16c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a48      	ldr	r2, [pc, #288]	; (80015c8 <MX_GPIO_Init+0x16c>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b46      	ldr	r3, [pc, #280]	; (80015c8 <MX_GPIO_Init+0x16c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
 80014b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4b43      	ldr	r3, [pc, #268]	; (80015c8 <MX_GPIO_Init+0x16c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a42      	ldr	r2, [pc, #264]	; (80015c8 <MX_GPIO_Init+0x16c>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b40      	ldr	r3, [pc, #256]	; (80015c8 <MX_GPIO_Init+0x16c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014d2:	4b3d      	ldr	r3, [pc, #244]	; (80015c8 <MX_GPIO_Init+0x16c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a3c      	ldr	r2, [pc, #240]	; (80015c8 <MX_GPIO_Init+0x16c>)
 80014d8:	f043 0310 	orr.w	r3, r3, #16
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <MX_GPIO_Init+0x16c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ea:	4b37      	ldr	r3, [pc, #220]	; (80015c8 <MX_GPIO_Init+0x16c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a36      	ldr	r2, [pc, #216]	; (80015c8 <MX_GPIO_Init+0x16c>)
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <MX_GPIO_Init+0x16c>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001502:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <MX_GPIO_Init+0x16c>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a30      	ldr	r2, [pc, #192]	; (80015c8 <MX_GPIO_Init+0x16c>)
 8001508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <MX_GPIO_Init+0x16c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800151a:	2200      	movs	r2, #0
 800151c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001520:	482a      	ldr	r0, [pc, #168]	; (80015cc <MX_GPIO_Init+0x170>)
 8001522:	f004 f817 	bl	8005554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2140      	movs	r1, #64	; 0x40
 800152a:	4829      	ldr	r0, [pc, #164]	; (80015d0 <MX_GPIO_Init+0x174>)
 800152c:	f004 f812 	bl	8005554 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001536:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800153a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001540:	f107 031c 	add.w	r3, r7, #28
 8001544:	4619      	mov	r1, r3
 8001546:	4823      	ldr	r0, [pc, #140]	; (80015d4 <MX_GPIO_Init+0x178>)
 8001548:	f003 fe58 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800154c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001550:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2301      	movs	r3, #1
 8001554:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	4619      	mov	r1, r3
 8001564:	4819      	ldr	r0, [pc, #100]	; (80015cc <MX_GPIO_Init+0x170>)
 8001566:	f003 fe49 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800156a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800156e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2303      	movs	r3, #3
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800157c:	2305      	movs	r3, #5
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	4811      	ldr	r0, [pc, #68]	; (80015cc <MX_GPIO_Init+0x170>)
 8001588:	f003 fe38 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800158c:	2340      	movs	r3, #64	; 0x40
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	480b      	ldr	r0, [pc, #44]	; (80015d0 <MX_GPIO_Init+0x174>)
 80015a4:	f003 fe2a 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	4619      	mov	r1, r3
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_GPIO_Init+0x174>)
 80015bc:	f003 fe1e 	bl	80051fc <HAL_GPIO_Init>

}
 80015c0:	bf00      	nop
 80015c2:	3730      	adds	r7, #48	; 0x30
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020400 	.word	0x40020400
 80015d0:	40021800 	.word	0x40021800
 80015d4:	40020800 	.word	0x40020800

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <Error_Handler+0x8>
	...

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <HAL_MspInit+0x44>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <HAL_MspInit+0x44>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_MspInit+0x44>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_MspInit+0x44>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a08      	ldr	r2, [pc, #32]	; (8001628 <HAL_MspInit+0x44>)
 8001608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_MspInit+0x44>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001616:	603b      	str	r3, [r7, #0]
 8001618:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800

0800162c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a31      	ldr	r2, [pc, #196]	; (8001710 <HAL_ADC_MspInit+0xe4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d15b      	bne.n	8001706 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800164e:	4b31      	ldr	r3, [pc, #196]	; (8001714 <HAL_ADC_MspInit+0xe8>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	4a30      	ldr	r2, [pc, #192]	; (8001714 <HAL_ADC_MspInit+0xe8>)
 8001654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001658:	6453      	str	r3, [r2, #68]	; 0x44
 800165a:	4b2e      	ldr	r3, [pc, #184]	; (8001714 <HAL_ADC_MspInit+0xe8>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <HAL_ADC_MspInit+0xe8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a2a      	ldr	r2, [pc, #168]	; (8001714 <HAL_ADC_MspInit+0xe8>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <HAL_ADC_MspInit+0xe8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800167e:	2308      	movs	r3, #8
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001682:	2303      	movs	r3, #3
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4821      	ldr	r0, [pc, #132]	; (8001718 <HAL_ADC_MspInit+0xec>)
 8001692:	f003 fdb3 	bl	80051fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <HAL_ADC_MspInit+0xf0>)
 8001698:	4a21      	ldr	r2, [pc, #132]	; (8001720 <HAL_ADC_MspInit+0xf4>)
 800169a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <HAL_ADC_MspInit+0xf0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016a2:	4b1e      	ldr	r3, [pc, #120]	; (800171c <HAL_ADC_MspInit+0xf0>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_ADC_MspInit+0xf0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_ADC_MspInit+0xf0>)
 80016b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_ADC_MspInit+0xf0>)
 80016b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_ADC_MspInit+0xf0>)
 80016c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_ADC_MspInit+0xf0>)
 80016c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_ADC_MspInit+0xf0>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <HAL_ADC_MspInit+0xf0>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016da:	4810      	ldr	r0, [pc, #64]	; (800171c <HAL_ADC_MspInit+0xf0>)
 80016dc:	f002 f878 	bl	80037d0 <HAL_DMA_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80016e6:	f7ff ff77 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a0b      	ldr	r2, [pc, #44]	; (800171c <HAL_ADC_MspInit+0xf0>)
 80016ee:	639a      	str	r2, [r3, #56]	; 0x38
 80016f0:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_ADC_MspInit+0xf0>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2012      	movs	r0, #18
 80016fc:	f002 f831 	bl	8003762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001700:	2012      	movs	r0, #18
 8001702:	f002 f84a 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40012000 	.word	0x40012000
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000
 800171c:	20000234 	.word	0x20000234
 8001720:	40026470 	.word	0x40026470

08001724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b0ac      	sub	sp, #176	; 0xb0
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800173c:	f107 0318 	add.w	r3, r7, #24
 8001740:	2284      	movs	r2, #132	; 0x84
 8001742:	2100      	movs	r1, #0
 8001744:	4618      	mov	r0, r3
 8001746:	f015 fd37 	bl	80171b8 <memset>
  if(hi2c->Instance==I2C1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a57      	ldr	r2, [pc, #348]	; (80018ac <HAL_I2C_MspInit+0x188>)
 8001750:	4293      	cmp	r3, r2
 8001752:	f040 80b9 	bne.w	80018c8 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001756:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800175a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800175c:	2300      	movs	r3, #0
 800175e:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001760:	f107 0318 	add.w	r3, r7, #24
 8001764:	4618      	mov	r0, r3
 8001766:	f006 fd15 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001770:	f7ff ff32 	bl	80015d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001774:	4b4e      	ldr	r3, [pc, #312]	; (80018b0 <HAL_I2C_MspInit+0x18c>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	4a4d      	ldr	r2, [pc, #308]	; (80018b0 <HAL_I2C_MspInit+0x18c>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	6313      	str	r3, [r2, #48]	; 0x30
 8001780:	4b4b      	ldr	r3, [pc, #300]	; (80018b0 <HAL_I2C_MspInit+0x18c>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_1_CLK_Slave_DMA_Pin|I2C_1_SDA_Slave_DMA_Pin;
 800178c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001794:	2312      	movs	r3, #18
 8001796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179a:	2301      	movs	r3, #1
 800179c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a6:	2304      	movs	r3, #4
 80017a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017b0:	4619      	mov	r1, r3
 80017b2:	4840      	ldr	r0, [pc, #256]	; (80018b4 <HAL_I2C_MspInit+0x190>)
 80017b4:	f003 fd22 	bl	80051fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b8:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <HAL_I2C_MspInit+0x18c>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a3c      	ldr	r2, [pc, #240]	; (80018b0 <HAL_I2C_MspInit+0x18c>)
 80017be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
 80017c4:	4b3a      	ldr	r3, [pc, #232]	; (80018b0 <HAL_I2C_MspInit+0x18c>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80017d0:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 80017d2:	4a3a      	ldr	r2, [pc, #232]	; (80018bc <HAL_I2C_MspInit+0x198>)
 80017d4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80017d6:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 80017d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017dc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017de:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017e4:	4b34      	ldr	r3, [pc, #208]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ea:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 80017ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017f0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f8:	4b2f      	ldr	r3, [pc, #188]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001804:	4b2c      	ldr	r3, [pc, #176]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800180a:	4b2b      	ldr	r3, [pc, #172]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 800180c:	2200      	movs	r2, #0
 800180e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001810:	4829      	ldr	r0, [pc, #164]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 8001812:	f001 ffdd 	bl	80037d0 <HAL_DMA_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 800181c:	f7ff fedc 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 8001824:	63da      	str	r2, [r3, #60]	; 0x3c
 8001826:	4a24      	ldr	r2, [pc, #144]	; (80018b8 <HAL_I2C_MspInit+0x194>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 800182e:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <HAL_I2C_MspInit+0x1a0>)
 8001830:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001832:	4b23      	ldr	r3, [pc, #140]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 8001834:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001838:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 800183c:	2240      	movs	r2, #64	; 0x40
 800183e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001840:	4b1f      	ldr	r3, [pc, #124]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 8001848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184e:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800185a:	4b19      	ldr	r3, [pc, #100]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 8001868:	2200      	movs	r2, #0
 800186a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800186c:	4814      	ldr	r0, [pc, #80]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 800186e:	f001 ffaf 	bl	80037d0 <HAL_DMA_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8001878:	f7ff feae 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	4a10      	ldr	r2, [pc, #64]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 8001880:	639a      	str	r2, [r3, #56]	; 0x38
 8001882:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_I2C_MspInit+0x19c>)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001888:	2200      	movs	r2, #0
 800188a:	2100      	movs	r1, #0
 800188c:	201f      	movs	r0, #31
 800188e:	f001 ff68 	bl	8003762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001892:	201f      	movs	r0, #31
 8001894:	f001 ff81 	bl	800379a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2100      	movs	r1, #0
 800189c:	2020      	movs	r0, #32
 800189e:	f001 ff60 	bl	8003762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80018a2:	2020      	movs	r0, #32
 80018a4:	f001 ff79 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018a8:	e0be      	b.n	8001a28 <HAL_I2C_MspInit+0x304>
 80018aa:	bf00      	nop
 80018ac:	40005400 	.word	0x40005400
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020400 	.word	0x40020400
 80018b8:	2000033c 	.word	0x2000033c
 80018bc:	40026088 	.word	0x40026088
 80018c0:	2000039c 	.word	0x2000039c
 80018c4:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <HAL_I2C_MspInit+0x30c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	f040 80aa 	bne.w	8001a28 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018d8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e0:	f107 0318 	add.w	r3, r7, #24
 80018e4:	4618      	mov	r0, r3
 80018e6:	f006 fc55 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 80018f0:	f7ff fe72 	bl	80015d8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f4:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <HAL_I2C_MspInit+0x310>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4a4e      	ldr	r2, [pc, #312]	; (8001a34 <HAL_I2C_MspInit+0x310>)
 80018fa:	f043 0302 	orr.w	r3, r3, #2
 80018fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001900:	4b4c      	ldr	r3, [pc, #304]	; (8001a34 <HAL_I2C_MspInit+0x310>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_2_CLK_Master_DMA_Pin|I2C_2_DATA_Master_DMA_Pin;
 800190c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001914:	2312      	movs	r3, #18
 8001916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191a:	2301      	movs	r3, #1
 800191c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001926:	2304      	movs	r3, #4
 8001928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800192c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001930:	4619      	mov	r1, r3
 8001932:	4841      	ldr	r0, [pc, #260]	; (8001a38 <HAL_I2C_MspInit+0x314>)
 8001934:	f003 fc62 	bl	80051fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001938:	4b3e      	ldr	r3, [pc, #248]	; (8001a34 <HAL_I2C_MspInit+0x310>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a3d      	ldr	r2, [pc, #244]	; (8001a34 <HAL_I2C_MspInit+0x310>)
 800193e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
 8001944:	4b3b      	ldr	r3, [pc, #236]	; (8001a34 <HAL_I2C_MspInit+0x310>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8001950:	4b3a      	ldr	r3, [pc, #232]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 8001952:	4a3b      	ldr	r2, [pc, #236]	; (8001a40 <HAL_I2C_MspInit+0x31c>)
 8001954:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001956:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 8001958:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800195c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800195e:	4b37      	ldr	r3, [pc, #220]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001964:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800196a:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 800196c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001970:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001972:	4b32      	ldr	r3, [pc, #200]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800197e:	4b2f      	ldr	r3, [pc, #188]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 8001980:	2200      	movs	r2, #0
 8001982:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001984:	4b2d      	ldr	r3, [pc, #180]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 8001986:	2200      	movs	r2, #0
 8001988:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800198a:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 800198c:	2200      	movs	r2, #0
 800198e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001990:	482a      	ldr	r0, [pc, #168]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 8001992:	f001 ff1d 	bl	80037d0 <HAL_DMA_Init>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 800199c:	f7ff fe1c 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a26      	ldr	r2, [pc, #152]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 80019a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80019a6:	4a25      	ldr	r2, [pc, #148]	; (8001a3c <HAL_I2C_MspInit+0x318>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 80019ae:	4a26      	ldr	r2, [pc, #152]	; (8001a48 <HAL_I2C_MspInit+0x324>)
 80019b0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 80019b4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80019b8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019ba:	4b22      	ldr	r3, [pc, #136]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 80019bc:	2240      	movs	r2, #64	; 0x40
 80019be:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019c6:	4b1f      	ldr	r3, [pc, #124]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 80019c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019cc:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 80019ec:	4815      	ldr	r0, [pc, #84]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 80019ee:	f001 feef 	bl	80037d0 <HAL_DMA_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 80019f8:	f7ff fdee 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 8001a00:	639a      	str	r2, [r3, #56]	; 0x38
 8001a02:	4a10      	ldr	r2, [pc, #64]	; (8001a44 <HAL_I2C_MspInit+0x320>)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2021      	movs	r0, #33	; 0x21
 8001a0e:	f001 fea8 	bl	8003762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001a12:	2021      	movs	r0, #33	; 0x21
 8001a14:	f001 fec1 	bl	800379a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2022      	movs	r0, #34	; 0x22
 8001a1e:	f001 fea0 	bl	8003762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001a22:	2022      	movs	r0, #34	; 0x22
 8001a24:	f001 feb9 	bl	800379a <HAL_NVIC_EnableIRQ>
}
 8001a28:	bf00      	nop
 8001a2a:	37b0      	adds	r7, #176	; 0xb0
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40005800 	.word	0x40005800
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	200003fc 	.word	0x200003fc
 8001a40:	40026058 	.word	0x40026058
 8001a44:	2000045c 	.word	0x2000045c
 8001a48:	400260b8 	.word	0x400260b8

08001a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	; 0x30
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a56      	ldr	r2, [pc, #344]	; (8001bc4 <HAL_SPI_MspInit+0x178>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	f040 80ba 	bne.w	8001be4 <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a70:	4b55      	ldr	r3, [pc, #340]	; (8001bc8 <HAL_SPI_MspInit+0x17c>)
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	4a54      	ldr	r2, [pc, #336]	; (8001bc8 <HAL_SPI_MspInit+0x17c>)
 8001a76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7c:	4b52      	ldr	r3, [pc, #328]	; (8001bc8 <HAL_SPI_MspInit+0x17c>)
 8001a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b4f      	ldr	r3, [pc, #316]	; (8001bc8 <HAL_SPI_MspInit+0x17c>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	4a4e      	ldr	r2, [pc, #312]	; (8001bc8 <HAL_SPI_MspInit+0x17c>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6313      	str	r3, [r2, #48]	; 0x30
 8001a94:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <HAL_SPI_MspInit+0x17c>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa0:	4b49      	ldr	r3, [pc, #292]	; (8001bc8 <HAL_SPI_MspInit+0x17c>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	4a48      	ldr	r2, [pc, #288]	; (8001bc8 <HAL_SPI_MspInit+0x17c>)
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001aac:	4b46      	ldr	r3, [pc, #280]	; (8001bc8 <HAL_SPI_MspInit+0x17c>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ab8:	2310      	movs	r3, #16
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ac8:	2305      	movs	r3, #5
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	483e      	ldr	r0, [pc, #248]	; (8001bcc <HAL_SPI_MspInit+0x180>)
 8001ad4:	f003 fb92 	bl	80051fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ad8:	2338      	movs	r3, #56	; 0x38
 8001ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ae8:	2305      	movs	r3, #5
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f107 031c 	add.w	r3, r7, #28
 8001af0:	4619      	mov	r1, r3
 8001af2:	4837      	ldr	r0, [pc, #220]	; (8001bd0 <HAL_SPI_MspInit+0x184>)
 8001af4:	f003 fb82 	bl	80051fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001af8:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001afa:	4a37      	ldr	r2, [pc, #220]	; (8001bd8 <HAL_SPI_MspInit+0x18c>)
 8001afc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001afe:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001b00:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001b04:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b06:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b0c:	4b31      	ldr	r3, [pc, #196]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b12:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001b14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b18:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b2c:	4b29      	ldr	r3, [pc, #164]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b32:	4b28      	ldr	r3, [pc, #160]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001b38:	4826      	ldr	r0, [pc, #152]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001b3a:	f001 fe49 	bl	80037d0 <HAL_DMA_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001b44:	f7ff fd48 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a22      	ldr	r2, [pc, #136]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001b4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001b4e:	4a21      	ldr	r2, [pc, #132]	; (8001bd4 <HAL_SPI_MspInit+0x188>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8001b54:	4b21      	ldr	r3, [pc, #132]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001b56:	4a22      	ldr	r2, [pc, #136]	; (8001be0 <HAL_SPI_MspInit+0x194>)
 8001b58:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001b5a:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001b5c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001b60:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b62:	4b1e      	ldr	r3, [pc, #120]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b68:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b74:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001b94:	4811      	ldr	r0, [pc, #68]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001b96:	f001 fe1b 	bl	80037d0 <HAL_DMA_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001ba0:	f7ff fd1a 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54
 8001baa:	4a0c      	ldr	r2, [pc, #48]	; (8001bdc <HAL_SPI_MspInit+0x190>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	2023      	movs	r0, #35	; 0x23
 8001bb6:	f001 fdd4 	bl	8003762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001bba:	2023      	movs	r0, #35	; 0x23
 8001bbc:	f001 fded 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001bc0:	e0a3      	b.n	8001d0a <HAL_SPI_MspInit+0x2be>
 8001bc2:	bf00      	nop
 8001bc4:	40013000 	.word	0x40013000
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	20000584 	.word	0x20000584
 8001bd8:	40026410 	.word	0x40026410
 8001bdc:	200005e4 	.word	0x200005e4
 8001be0:	40026488 	.word	0x40026488
  else if(hspi->Instance==SPI4)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a4a      	ldr	r2, [pc, #296]	; (8001d14 <HAL_SPI_MspInit+0x2c8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	f040 808d 	bne.w	8001d0a <HAL_SPI_MspInit+0x2be>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001bf0:	4b49      	ldr	r3, [pc, #292]	; (8001d18 <HAL_SPI_MspInit+0x2cc>)
 8001bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf4:	4a48      	ldr	r2, [pc, #288]	; (8001d18 <HAL_SPI_MspInit+0x2cc>)
 8001bf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfc:	4b46      	ldr	r3, [pc, #280]	; (8001d18 <HAL_SPI_MspInit+0x2cc>)
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c08:	4b43      	ldr	r3, [pc, #268]	; (8001d18 <HAL_SPI_MspInit+0x2cc>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	4a42      	ldr	r2, [pc, #264]	; (8001d18 <HAL_SPI_MspInit+0x2cc>)
 8001c0e:	f043 0310 	orr.w	r3, r3, #16
 8001c12:	6313      	str	r3, [r2, #48]	; 0x30
 8001c14:	4b40      	ldr	r3, [pc, #256]	; (8001d18 <HAL_SPI_MspInit+0x2cc>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001c20:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001c32:	2305      	movs	r3, #5
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4837      	ldr	r0, [pc, #220]	; (8001d1c <HAL_SPI_MspInit+0x2d0>)
 8001c3e:	f003 fadd 	bl	80051fc <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8001c42:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c44:	4a37      	ldr	r2, [pc, #220]	; (8001d24 <HAL_SPI_MspInit+0x2d8>)
 8001c46:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8001c48:	4b35      	ldr	r3, [pc, #212]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c4a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001c4e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c50:	4b33      	ldr	r3, [pc, #204]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c56:	4b32      	ldr	r3, [pc, #200]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c5c:	4b30      	ldr	r3, [pc, #192]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c62:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c64:	4b2e      	ldr	r3, [pc, #184]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001c70:	4b2b      	ldr	r3, [pc, #172]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c76:	4b2a      	ldr	r3, [pc, #168]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c7c:	4b28      	ldr	r3, [pc, #160]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001c82:	4827      	ldr	r0, [pc, #156]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c84:	f001 fda4 	bl	80037d0 <HAL_DMA_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_SPI_MspInit+0x246>
      Error_Handler();
 8001c8e:	f7ff fca3 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c96:	659a      	str	r2, [r3, #88]	; 0x58
 8001c98:	4a21      	ldr	r2, [pc, #132]	; (8001d20 <HAL_SPI_MspInit+0x2d4>)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001c9e:	4b22      	ldr	r3, [pc, #136]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001ca0:	4a22      	ldr	r2, [pc, #136]	; (8001d2c <HAL_SPI_MspInit+0x2e0>)
 8001ca2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001ca4:	4b20      	ldr	r3, [pc, #128]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001ca6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001caa:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cac:	4b1e      	ldr	r3, [pc, #120]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb8:	4b1b      	ldr	r3, [pc, #108]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cbe:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cc0:	4b19      	ldr	r3, [pc, #100]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001ccc:	4b16      	ldr	r3, [pc, #88]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001cde:	4812      	ldr	r0, [pc, #72]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001ce0:	f001 fd76 	bl	80037d0 <HAL_DMA_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_SPI_MspInit+0x2a2>
      Error_Handler();
 8001cea:	f7ff fc75 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001cf2:	655a      	str	r2, [r3, #84]	; 0x54
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <HAL_SPI_MspInit+0x2dc>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2054      	movs	r0, #84	; 0x54
 8001d00:	f001 fd2f 	bl	8003762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001d04:	2054      	movs	r0, #84	; 0x54
 8001d06:	f001 fd48 	bl	800379a <HAL_NVIC_EnableIRQ>
}
 8001d0a:	bf00      	nop
 8001d0c:	3730      	adds	r7, #48	; 0x30
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40013400 	.word	0x40013400
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	20000644 	.word	0x20000644
 8001d24:	40026458 	.word	0x40026458
 8001d28:	200006a4 	.word	0x200006a4
 8001d2c:	40026428 	.word	0x40026428

08001d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <HAL_TIM_Base_MspInit+0x44>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d113      	bne.n	8001d6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d42:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_TIM_Base_MspInit+0x48>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <HAL_TIM_Base_MspInit+0x48>)
 8001d48:	f043 0320 	orr.w	r3, r3, #32
 8001d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_TIM_Base_MspInit+0x48>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2037      	movs	r0, #55	; 0x37
 8001d60:	f001 fcff 	bl	8003762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d64:	2037      	movs	r0, #55	; 0x37
 8001d66:	f001 fd18 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40001400 	.word	0x40001400
 8001d78:	40023800 	.word	0x40023800

08001d7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b0ae      	sub	sp, #184	; 0xb8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d94:	f107 0320 	add.w	r3, r7, #32
 8001d98:	2284      	movs	r2, #132	; 0x84
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f015 fa0b 	bl	80171b8 <memset>
  if(huart->Instance==UART4)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a74      	ldr	r2, [pc, #464]	; (8001f78 <HAL_UART_MspInit+0x1fc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	f040 80a2 	bne.w	8001ef2 <HAL_UART_MspInit+0x176>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001db2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001db8:	f107 0320 	add.w	r3, r7, #32
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f006 f9e9 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001dc8:	f7ff fc06 	bl	80015d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001dcc:	4b6b      	ldr	r3, [pc, #428]	; (8001f7c <HAL_UART_MspInit+0x200>)
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	4a6a      	ldr	r2, [pc, #424]	; (8001f7c <HAL_UART_MspInit+0x200>)
 8001dd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd8:	4b68      	ldr	r3, [pc, #416]	; (8001f7c <HAL_UART_MspInit+0x200>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de4:	4b65      	ldr	r3, [pc, #404]	; (8001f7c <HAL_UART_MspInit+0x200>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	4a64      	ldr	r2, [pc, #400]	; (8001f7c <HAL_UART_MspInit+0x200>)
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	6313      	str	r3, [r2, #48]	; 0x30
 8001df0:	4b62      	ldr	r3, [pc, #392]	; (8001f7c <HAL_UART_MspInit+0x200>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	61bb      	str	r3, [r7, #24]
 8001dfa:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_DMA_Pin|UART4_RX_DMA_Pin;
 8001dfc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e04:	2302      	movs	r3, #2
 8001e06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e16:	2308      	movs	r3, #8
 8001e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e20:	4619      	mov	r1, r3
 8001e22:	4857      	ldr	r0, [pc, #348]	; (8001f80 <HAL_UART_MspInit+0x204>)
 8001e24:	f003 f9ea 	bl	80051fc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001e28:	4b56      	ldr	r3, [pc, #344]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e2a:	4a57      	ldr	r2, [pc, #348]	; (8001f88 <HAL_UART_MspInit+0x20c>)
 8001e2c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001e2e:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e34:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e36:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3c:	4b51      	ldr	r3, [pc, #324]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e42:	4b50      	ldr	r3, [pc, #320]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e48:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e4a:	4b4e      	ldr	r3, [pc, #312]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e50:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001e56:	4b4b      	ldr	r3, [pc, #300]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e62:	4b48      	ldr	r3, [pc, #288]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001e68:	4846      	ldr	r0, [pc, #280]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e6a:	f001 fcb1 	bl	80037d0 <HAL_DMA_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8001e74:	f7ff fbb0 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a42      	ldr	r2, [pc, #264]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e7c:	675a      	str	r2, [r3, #116]	; 0x74
 8001e7e:	4a41      	ldr	r2, [pc, #260]	; (8001f84 <HAL_UART_MspInit+0x208>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001e84:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001e86:	4a42      	ldr	r2, [pc, #264]	; (8001f90 <HAL_UART_MspInit+0x214>)
 8001e88:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001e8a:	4b40      	ldr	r3, [pc, #256]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001e8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e90:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e92:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e98:	4b3c      	ldr	r3, [pc, #240]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e9e:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ea4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ea6:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eac:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001eb2:	4b36      	ldr	r3, [pc, #216]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ebe:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001ec4:	4831      	ldr	r0, [pc, #196]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001ec6:	f001 fc83 	bl	80037d0 <HAL_DMA_Init>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8001ed0:	f7ff fb82 	bl	80015d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001ed8:	671a      	str	r2, [r3, #112]	; 0x70
 8001eda:	4a2c      	ldr	r2, [pc, #176]	; (8001f8c <HAL_UART_MspInit+0x210>)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	2034      	movs	r0, #52	; 0x34
 8001ee6:	f001 fc3c 	bl	8003762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001eea:	2034      	movs	r0, #52	; 0x34
 8001eec:	f001 fc55 	bl	800379a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ef0:	e0fb      	b.n	80020ea <HAL_UART_MspInit+0x36e>
  else if(huart->Instance==USART3)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <HAL_UART_MspInit+0x218>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d14f      	bne.n	8001f9c <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f00:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f02:	2300      	movs	r3, #0
 8001f04:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f06:	f107 0320 	add.w	r3, r7, #32
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f006 f942 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001f16:	f7ff fb5f 	bl	80015d8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_UART_MspInit+0x200>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_UART_MspInit+0x200>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_UART_MspInit+0x200>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_UART_MspInit+0x200>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a11      	ldr	r2, [pc, #68]	; (8001f7c <HAL_UART_MspInit+0x200>)
 8001f38:	f043 0308 	orr.w	r3, r3, #8
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <HAL_UART_MspInit+0x200>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f64:	2307      	movs	r3, #7
 8001f66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4809      	ldr	r0, [pc, #36]	; (8001f98 <HAL_UART_MspInit+0x21c>)
 8001f72:	f003 f943 	bl	80051fc <HAL_GPIO_Init>
}
 8001f76:	e0b8      	b.n	80020ea <HAL_UART_MspInit+0x36e>
 8001f78:	40004c00 	.word	0x40004c00
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020800 	.word	0x40020800
 8001f84:	200008e8 	.word	0x200008e8
 8001f88:	40026040 	.word	0x40026040
 8001f8c:	20000948 	.word	0x20000948
 8001f90:	40026070 	.word	0x40026070
 8001f94:	40004800 	.word	0x40004800
 8001f98:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART6)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a54      	ldr	r2, [pc, #336]	; (80020f4 <HAL_UART_MspInit+0x378>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	f040 80a1 	bne.w	80020ea <HAL_UART_MspInit+0x36e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001fa8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fac:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001fb2:	f107 0320 	add.w	r3, r7, #32
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f006 f8ec 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8001fc2:	f7ff fb09 	bl	80015d8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001fc6:	4b4c      	ldr	r3, [pc, #304]	; (80020f8 <HAL_UART_MspInit+0x37c>)
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4a4b      	ldr	r2, [pc, #300]	; (80020f8 <HAL_UART_MspInit+0x37c>)
 8001fcc:	f043 0320 	orr.w	r3, r3, #32
 8001fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001fd2:	4b49      	ldr	r3, [pc, #292]	; (80020f8 <HAL_UART_MspInit+0x37c>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fde:	4b46      	ldr	r3, [pc, #280]	; (80020f8 <HAL_UART_MspInit+0x37c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a45      	ldr	r2, [pc, #276]	; (80020f8 <HAL_UART_MspInit+0x37c>)
 8001fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_UART_MspInit+0x37c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART6_RX_DMA_Pin|USART6_TX_DMA_Pin;
 8001ff6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002004:	2301      	movs	r3, #1
 8002006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200a:	2303      	movs	r3, #3
 800200c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002010:	2308      	movs	r3, #8
 8002012:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002016:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800201a:	4619      	mov	r1, r3
 800201c:	4837      	ldr	r0, [pc, #220]	; (80020fc <HAL_UART_MspInit+0x380>)
 800201e:	f003 f8ed 	bl	80051fc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8002022:	4b37      	ldr	r3, [pc, #220]	; (8002100 <HAL_UART_MspInit+0x384>)
 8002024:	4a37      	ldr	r2, [pc, #220]	; (8002104 <HAL_UART_MspInit+0x388>)
 8002026:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002028:	4b35      	ldr	r3, [pc, #212]	; (8002100 <HAL_UART_MspInit+0x384>)
 800202a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800202e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002030:	4b33      	ldr	r3, [pc, #204]	; (8002100 <HAL_UART_MspInit+0x384>)
 8002032:	2200      	movs	r2, #0
 8002034:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002036:	4b32      	ldr	r3, [pc, #200]	; (8002100 <HAL_UART_MspInit+0x384>)
 8002038:	2200      	movs	r2, #0
 800203a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_UART_MspInit+0x384>)
 800203e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002042:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002044:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <HAL_UART_MspInit+0x384>)
 8002046:	2200      	movs	r2, #0
 8002048:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800204a:	4b2d      	ldr	r3, [pc, #180]	; (8002100 <HAL_UART_MspInit+0x384>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002050:	4b2b      	ldr	r3, [pc, #172]	; (8002100 <HAL_UART_MspInit+0x384>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002056:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_UART_MspInit+0x384>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800205c:	4b28      	ldr	r3, [pc, #160]	; (8002100 <HAL_UART_MspInit+0x384>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002062:	4827      	ldr	r0, [pc, #156]	; (8002100 <HAL_UART_MspInit+0x384>)
 8002064:	f001 fbb4 	bl	80037d0 <HAL_DMA_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 800206e:	f7ff fab3 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a22      	ldr	r2, [pc, #136]	; (8002100 <HAL_UART_MspInit+0x384>)
 8002076:	675a      	str	r2, [r3, #116]	; 0x74
 8002078:	4a21      	ldr	r2, [pc, #132]	; (8002100 <HAL_UART_MspInit+0x384>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800207e:	4b22      	ldr	r3, [pc, #136]	; (8002108 <HAL_UART_MspInit+0x38c>)
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_UART_MspInit+0x390>)
 8002082:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002084:	4b20      	ldr	r3, [pc, #128]	; (8002108 <HAL_UART_MspInit+0x38c>)
 8002086:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800208a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_UART_MspInit+0x38c>)
 800208e:	2240      	movs	r2, #64	; 0x40
 8002090:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <HAL_UART_MspInit+0x38c>)
 8002094:	2200      	movs	r2, #0
 8002096:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <HAL_UART_MspInit+0x38c>)
 800209a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800209e:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_UART_MspInit+0x38c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <HAL_UART_MspInit+0x38c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <HAL_UART_MspInit+0x38c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020b2:	4b15      	ldr	r3, [pc, #84]	; (8002108 <HAL_UART_MspInit+0x38c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_UART_MspInit+0x38c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80020be:	4812      	ldr	r0, [pc, #72]	; (8002108 <HAL_UART_MspInit+0x38c>)
 80020c0:	f001 fb86 	bl	80037d0 <HAL_DMA_Init>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_UART_MspInit+0x352>
      Error_Handler();
 80020ca:	f7ff fa85 	bl	80015d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <HAL_UART_MspInit+0x38c>)
 80020d2:	671a      	str	r2, [r3, #112]	; 0x70
 80020d4:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <HAL_UART_MspInit+0x38c>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	2047      	movs	r0, #71	; 0x47
 80020e0:	f001 fb3f 	bl	8003762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80020e4:	2047      	movs	r0, #71	; 0x47
 80020e6:	f001 fb58 	bl	800379a <HAL_NVIC_EnableIRQ>
}
 80020ea:	bf00      	nop
 80020ec:	37b8      	adds	r7, #184	; 0xb8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40011400 	.word	0x40011400
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40021800 	.word	0x40021800
 8002100:	200009a8 	.word	0x200009a8
 8002104:	40026440 	.word	0x40026440
 8002108:	20000a08 	.word	0x20000a08
 800210c:	400264a0 	.word	0x400264a0

08002110 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b0ac      	sub	sp, #176	; 0xb0
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002128:	f107 0318 	add.w	r3, r7, #24
 800212c:	2284      	movs	r2, #132	; 0x84
 800212e:	2100      	movs	r1, #0
 8002130:	4618      	mov	r0, r3
 8002132:	f015 f841 	bl	80171b8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800213e:	d159      	bne.n	80021f4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002140:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002144:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800214c:	f107 0318 	add.w	r3, r7, #24
 8002150:	4618      	mov	r0, r3
 8002152:	f006 f81f 	bl	8008194 <HAL_RCCEx_PeriphCLKConfig>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800215c:	f7ff fa3c 	bl	80015d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002160:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HAL_PCD_MspInit+0xec>)
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	4a25      	ldr	r2, [pc, #148]	; (80021fc <HAL_PCD_MspInit+0xec>)
 8002166:	f043 0301 	orr.w	r3, r3, #1
 800216a:	6313      	str	r3, [r2, #48]	; 0x30
 800216c:	4b23      	ldr	r3, [pc, #140]	; (80021fc <HAL_PCD_MspInit+0xec>)
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	f003 0301 	and.w	r3, r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002178:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800217c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218c:	2303      	movs	r3, #3
 800218e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002192:	230a      	movs	r3, #10
 8002194:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800219c:	4619      	mov	r1, r3
 800219e:	4818      	ldr	r0, [pc, #96]	; (8002200 <HAL_PCD_MspInit+0xf0>)
 80021a0:	f003 f82c 	bl	80051fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021bc:	4619      	mov	r1, r3
 80021be:	4810      	ldr	r0, [pc, #64]	; (8002200 <HAL_PCD_MspInit+0xf0>)
 80021c0:	f003 f81c 	bl	80051fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_PCD_MspInit+0xec>)
 80021c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c8:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <HAL_PCD_MspInit+0xec>)
 80021ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ce:	6353      	str	r3, [r2, #52]	; 0x34
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_PCD_MspInit+0xec>)
 80021d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <HAL_PCD_MspInit+0xec>)
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	4a06      	ldr	r2, [pc, #24]	; (80021fc <HAL_PCD_MspInit+0xec>)
 80021e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021e6:	6453      	str	r3, [r2, #68]	; 0x44
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <HAL_PCD_MspInit+0xec>)
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80021f4:	bf00      	nop
 80021f6:	37b0      	adds	r7, #176	; 0xb0
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40023800 	.word	0x40023800
 8002200:	40020000 	.word	0x40020000

08002204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002208:	e7fe      	b.n	8002208 <NMI_Handler+0x4>

0800220a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <HardFault_Handler+0x4>

08002210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <MemManage_Handler+0x4>

08002216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <BusFault_Handler+0x4>

0800221c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <UsageFault_Handler+0x4>

08002222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002250:	f000 fb52 	bl	80028f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <DMA1_Stream2_IRQHandler+0x10>)
 800225e:	f001 fc57 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200008e8 	.word	0x200008e8

0800226c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <DMA1_Stream3_IRQHandler+0x10>)
 8002272:	f001 fc4d 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200003fc 	.word	0x200003fc

08002280 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <DMA1_Stream4_IRQHandler+0x10>)
 8002286:	f001 fc43 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	20000948 	.word	0x20000948

08002294 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <DMA1_Stream5_IRQHandler+0x10>)
 800229a:	f001 fc39 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000033c 	.word	0x2000033c

080022a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <DMA1_Stream6_IRQHandler+0x10>)
 80022ae:	f001 fc2f 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	2000039c 	.word	0x2000039c

080022bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <ADC_IRQHandler+0x10>)
 80022c2:	f000 fc6f 	bl	8002ba4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	200001ec 	.word	0x200001ec

080022d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <I2C1_EV_IRQHandler+0x10>)
 80022d6:	f003 fd33 	bl	8005d40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000294 	.word	0x20000294

080022e4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <I2C1_ER_IRQHandler+0x10>)
 80022ea:	f003 fd43 	bl	8005d74 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000294 	.word	0x20000294

080022f8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <I2C2_EV_IRQHandler+0x10>)
 80022fe:	f003 fd1f 	bl	8005d40 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200002e8 	.word	0x200002e8

0800230c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <I2C2_ER_IRQHandler+0x10>)
 8002312:	f003 fd2f 	bl	8005d74 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200002e8 	.word	0x200002e8

08002320 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <SPI1_IRQHandler+0x10>)
 8002326:	f006 fd5d 	bl	8008de4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200004bc 	.word	0x200004bc

08002334 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <DMA1_Stream7_IRQHandler+0x10>)
 800233a:	f001 fbe9 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000045c 	.word	0x2000045c

08002348 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <UART4_IRQHandler+0x10>)
 800234e:	f007 ff57 	bl	800a200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000750 	.word	0x20000750

0800235c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <TIM7_IRQHandler+0x10>)
 8002362:	f007 fa64 	bl	800982e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000704 	.word	0x20000704

08002370 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <DMA2_Stream0_IRQHandler+0x10>)
 8002376:	f001 fbcb 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000584 	.word	0x20000584

08002384 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002388:	4802      	ldr	r0, [pc, #8]	; (8002394 <DMA2_Stream1_IRQHandler+0x10>)
 800238a:	f001 fbc1 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	200006a4 	.word	0x200006a4

08002398 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800239c:	4802      	ldr	r0, [pc, #8]	; (80023a8 <DMA2_Stream2_IRQHandler+0x10>)
 800239e:	f001 fbb7 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200009a8 	.word	0x200009a8

080023ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80023b0:	4802      	ldr	r0, [pc, #8]	; (80023bc <DMA2_Stream3_IRQHandler+0x10>)
 80023b2:	f001 fbad 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	20000644 	.word	0x20000644

080023c0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023c4:	4802      	ldr	r0, [pc, #8]	; (80023d0 <DMA2_Stream4_IRQHandler+0x10>)
 80023c6:	f001 fba3 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000234 	.word	0x20000234

080023d4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <DMA2_Stream5_IRQHandler+0x10>)
 80023da:	f001 fb99 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200005e4 	.word	0x200005e4

080023e8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <DMA2_Stream6_IRQHandler+0x10>)
 80023ee:	f001 fb8f 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000a08 	.word	0x20000a08

080023fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <USART6_IRQHandler+0x10>)
 8002402:	f007 fefd 	bl	800a200 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000860 	.word	0x20000860

08002410 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <SPI4_IRQHandler+0x10>)
 8002416:	f006 fce5 	bl	8008de4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000520 	.word	0x20000520

08002424 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
	return 1;
 8002428:	2301      	movs	r3, #1
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_kill>:

int _kill(int pid, int sig)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <_kill+0x20>)
 8002440:	2216      	movs	r2, #22
 8002442:	601a      	str	r2, [r3, #0]
	return -1;
 8002444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002448:	4618      	mov	r0, r3
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	20009440 	.word	0x20009440

08002458 <_exit>:

void _exit (int status)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002460:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f7ff ffe5 	bl	8002434 <_kill>
	while (1) {}		/* Make sure we hang here */
 800246a:	e7fe      	b.n	800246a <_exit+0x12>

0800246c <_close>:
	}
	return len;
}

int _close(int file)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	return -1;
 8002474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002494:	605a      	str	r2, [r3, #4]
	return 0;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <_isatty>:

int _isatty(int file)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	return 1;
 80024ac:	2301      	movs	r3, #1
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b085      	sub	sp, #20
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
	return 0;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024dc:	4a14      	ldr	r2, [pc, #80]	; (8002530 <_sbrk+0x5c>)
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <_sbrk+0x60>)
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e8:	4b13      	ldr	r3, [pc, #76]	; (8002538 <_sbrk+0x64>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d102      	bne.n	80024f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <_sbrk+0x64>)
 80024f2:	4a12      	ldr	r2, [pc, #72]	; (800253c <_sbrk+0x68>)
 80024f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f6:	4b10      	ldr	r3, [pc, #64]	; (8002538 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	429a      	cmp	r2, r3
 8002502:	d205      	bcs.n	8002510 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002504:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <_sbrk+0x6c>)
 8002506:	220c      	movs	r2, #12
 8002508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800250e:	e009      	b.n	8002524 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002510:	4b09      	ldr	r3, [pc, #36]	; (8002538 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002516:	4b08      	ldr	r3, [pc, #32]	; (8002538 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	4a06      	ldr	r2, [pc, #24]	; (8002538 <_sbrk+0x64>)
 8002520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002522:	68fb      	ldr	r3, [r7, #12]
}
 8002524:	4618      	mov	r0, r3
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	20050000 	.word	0x20050000
 8002534:	00000400 	.word	0x00000400
 8002538:	20000f70 	.word	0x20000f70
 800253c:	20009450 	.word	0x20009450
 8002540:	20009440 	.word	0x20009440

08002544 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <SystemInit+0x20>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <SystemInit+0x20>)
 8002550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800256c:	480d      	ldr	r0, [pc, #52]	; (80025a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800256e:	490e      	ldr	r1, [pc, #56]	; (80025a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002570:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002574:	e002      	b.n	800257c <LoopCopyDataInit>

08002576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800257a:	3304      	adds	r3, #4

0800257c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800257c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002580:	d3f9      	bcc.n	8002576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002582:	4a0b      	ldr	r2, [pc, #44]	; (80025b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002584:	4c0b      	ldr	r4, [pc, #44]	; (80025b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002588:	e001      	b.n	800258e <LoopFillZerobss>

0800258a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800258a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800258c:	3204      	adds	r2, #4

0800258e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002590:	d3fb      	bcc.n	800258a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002592:	f7ff ffd7 	bl	8002544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002596:	f014 fdcd 	bl	8017134 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800259a:	f7fe fc09 	bl	8000db0 <main>
  bx  lr    
 800259e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80025a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80025ac:	0801aec8 	.word	0x0801aec8
  ldr r2, =_sbss
 80025b0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80025b4:	20009450 	.word	0x20009450

080025b8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b8:	e7fe      	b.n	80025b8 <CAN1_RX0_IRQHandler>

080025ba <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <LAN8742_RegisterBusIO+0x28>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <LAN8742_RegisterBusIO+0x28>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <LAN8742_RegisterBusIO+0x28>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d102      	bne.n	80025e8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80025e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025e6:	e014      	b.n	8002612 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	2300      	movs	r3, #0
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d17c      	bne.n	8002738 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d002      	beq.n	800264c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2220      	movs	r2, #32
 8002650:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
 8002656:	e01c      	b.n	8002692 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f107 0208 	add.w	r2, r7, #8
 8002660:	2112      	movs	r1, #18
 8002662:	6978      	ldr	r0, [r7, #20]
 8002664:	4798      	blx	r3
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	da03      	bge.n	8002674 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800266c:	f06f 0304 	mvn.w	r3, #4
 8002670:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002672:	e00b      	b.n	800268c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f003 031f 	and.w	r3, r3, #31
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	429a      	cmp	r2, r3
 800267e:	d105      	bne.n	800268c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
         break;
 800268a:	e005      	b.n	8002698 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3301      	adds	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	2b1f      	cmp	r3, #31
 8002696:	d9df      	bls.n	8002658 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b1f      	cmp	r3, #31
 800269e:	d902      	bls.n	80026a6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80026a0:	f06f 0302 	mvn.w	r3, #2
 80026a4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d145      	bne.n	8002738 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6810      	ldr	r0, [r2, #0]
 80026b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026b8:	2100      	movs	r1, #0
 80026ba:	4798      	blx	r3
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db37      	blt.n	8002732 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6810      	ldr	r0, [r2, #0]
 80026ca:	f107 0208 	add.w	r2, r7, #8
 80026ce:	2100      	movs	r1, #0
 80026d0:	4798      	blx	r3
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	db28      	blt.n	800272a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4798      	blx	r3
 80026de:	4603      	mov	r3, r0
 80026e0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80026e2:	e01c      	b.n	800271e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	4798      	blx	r3
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026f6:	d80e      	bhi.n	8002716 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6810      	ldr	r0, [r2, #0]
 8002700:	f107 0208 	add.w	r2, r7, #8
 8002704:	2100      	movs	r1, #0
 8002706:	4798      	blx	r3
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	da07      	bge.n	800271e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800270e:	f06f 0304 	mvn.w	r3, #4
 8002712:	613b      	str	r3, [r7, #16]
                 break;
 8002714:	e010      	b.n	8002738 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002716:	f06f 0301 	mvn.w	r3, #1
 800271a:	613b      	str	r3, [r7, #16]
               break;
 800271c:	e00c      	b.n	8002738 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1dd      	bne.n	80026e4 <LAN8742_Init+0xc6>
 8002728:	e006      	b.n	8002738 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800272a:	f06f 0304 	mvn.w	r3, #4
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	e002      	b.n	8002738 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002732:	f06f 0303 	mvn.w	r3, #3
 8002736:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d112      	bne.n	8002764 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	4798      	blx	r3
 8002744:	4603      	mov	r3, r0
 8002746:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002748:	bf00      	nop
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	4798      	blx	r3
 8002750:	4603      	mov	r3, r0
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800275c:	d9f5      	bls.n	800274a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002764:	693b      	ldr	r3, [r7, #16]
 }
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6810      	ldr	r0, [r2, #0]
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	2101      	movs	r1, #1
 8002788:	4798      	blx	r3
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	da02      	bge.n	8002796 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002790:	f06f 0304 	mvn.w	r3, #4
 8002794:	e06e      	b.n	8002874 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6810      	ldr	r0, [r2, #0]
 800279e:	f107 020c 	add.w	r2, r7, #12
 80027a2:	2101      	movs	r1, #1
 80027a4:	4798      	blx	r3
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	da02      	bge.n	80027b2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80027ac:	f06f 0304 	mvn.w	r3, #4
 80027b0:	e060      	b.n	8002874 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80027bc:	2301      	movs	r3, #1
 80027be:	e059      	b.n	8002874 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6810      	ldr	r0, [r2, #0]
 80027c8:	f107 020c 	add.w	r2, r7, #12
 80027cc:	2100      	movs	r1, #0
 80027ce:	4798      	blx	r3
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	da02      	bge.n	80027dc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80027d6:	f06f 0304 	mvn.w	r3, #4
 80027da:	e04b      	b.n	8002874 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d11b      	bne.n	800281e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <LAN8742_GetLinkState+0x90>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80027fa:	2302      	movs	r3, #2
 80027fc:	e03a      	b.n	8002874 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002808:	2303      	movs	r3, #3
 800280a:	e033      	b.n	8002874 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002816:	2304      	movs	r3, #4
 8002818:	e02c      	b.n	8002874 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800281a:	2305      	movs	r3, #5
 800281c:	e02a      	b.n	8002874 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6810      	ldr	r0, [r2, #0]
 8002826:	f107 020c 	add.w	r2, r7, #12
 800282a:	211f      	movs	r1, #31
 800282c:	4798      	blx	r3
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	da02      	bge.n	800283a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002834:	f06f 0304 	mvn.w	r3, #4
 8002838:	e01c      	b.n	8002874 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002844:	2306      	movs	r3, #6
 8002846:	e015      	b.n	8002874 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f003 031c 	and.w	r3, r3, #28
 800284e:	2b18      	cmp	r3, #24
 8002850:	d101      	bne.n	8002856 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002852:	2302      	movs	r3, #2
 8002854:	e00e      	b.n	8002874 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f003 031c 	and.w	r3, r3, #28
 800285c:	2b08      	cmp	r3, #8
 800285e:	d101      	bne.n	8002864 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002860:	2303      	movs	r3, #3
 8002862:	e007      	b.n	8002874 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 031c 	and.w	r3, r3, #28
 800286a:	2b14      	cmp	r3, #20
 800286c:	d101      	bne.n	8002872 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800286e:	2304      	movs	r3, #4
 8002870:	e000      	b.n	8002874 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002872:	2305      	movs	r3, #5
    }				
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002880:	2003      	movs	r0, #3
 8002882:	f000 ff63 	bl	800374c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002886:	2000      	movs	r0, #0
 8002888:	f000 f806 	bl	8002898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800288c:	f7fe feaa 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_InitTick+0x54>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_InitTick+0x58>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4619      	mov	r1, r3
 80028aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 ff7d 	bl	80037b6 <HAL_SYSTICK_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00e      	b.n	80028e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b0f      	cmp	r3, #15
 80028ca:	d80a      	bhi.n	80028e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028cc:	2200      	movs	r2, #0
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028d4:	f000 ff45 	bl	8003762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_InitTick+0x5c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e000      	b.n	80028e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000000 	.word	0x20000000
 80028f0:	20000008 	.word	0x20000008
 80028f4:	20000004 	.word	0x20000004

080028f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <HAL_IncTick+0x20>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_IncTick+0x24>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4413      	add	r3, r2
 8002908:	4a04      	ldr	r2, [pc, #16]	; (800291c <HAL_IncTick+0x24>)
 800290a:	6013      	str	r3, [r2, #0]
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000008 	.word	0x20000008
 800291c:	20000f74 	.word	0x20000f74

08002920 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return uwTick;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <HAL_GetTick+0x14>)
 8002926:	681b      	ldr	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000f74 	.word	0x20000f74

08002938 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002940:	f7ff ffee 	bl	8002920 <HAL_GetTick>
 8002944:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002950:	d005      	beq.n	800295e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002952:	4b0a      	ldr	r3, [pc, #40]	; (800297c <HAL_Delay+0x44>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800295e:	bf00      	nop
 8002960:	f7ff ffde 	bl	8002920 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	429a      	cmp	r2, r3
 800296e:	d8f7      	bhi.n	8002960 <HAL_Delay+0x28>
  {
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000008 	.word	0x20000008

08002980 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e031      	b.n	80029fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f7fe fe44 	bl	800162c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d116      	bne.n	80029ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <HAL_ADC_Init+0x84>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	f043 0202 	orr.w	r2, r3, #2
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fc66 	bl	80032a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40
 80029ea:	e001      	b.n	80029f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	ffffeefd 	.word	0xffffeefd

08002a08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADC_Start+0x1a>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e0ad      	b.n	8002b7e <HAL_ADC_Start+0x176>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d018      	beq.n	8002a6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689a      	ldr	r2, [r3, #8]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0201 	orr.w	r2, r2, #1
 8002a46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_ADC_Start+0x184>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a50      	ldr	r2, [pc, #320]	; (8002b90 <HAL_ADC_Start+0x188>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0c9a      	lsrs	r2, r3, #18
 8002a54:	4613      	mov	r3, r2
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	4413      	add	r3, r2
 8002a5a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a5c:	e002      	b.n	8002a64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f9      	bne.n	8002a5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d175      	bne.n	8002b64 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a7c:	4b45      	ldr	r3, [pc, #276]	; (8002b94 <HAL_ADC_Start+0x18c>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab2:	d106      	bne.n	8002ac2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	f023 0206 	bic.w	r2, r3, #6
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	645a      	str	r2, [r3, #68]	; 0x44
 8002ac0:	e002      	b.n	8002ac8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ad8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002ada:	4b2f      	ldr	r3, [pc, #188]	; (8002b98 <HAL_ADC_Start+0x190>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10f      	bne.n	8002b06 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d143      	bne.n	8002b7c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	e03a      	b.n	8002b7c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a24      	ldr	r2, [pc, #144]	; (8002b9c <HAL_ADC_Start+0x194>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d10e      	bne.n	8002b2e <HAL_ADC_Start+0x126>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b2c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b2e:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <HAL_ADC_Start+0x190>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d120      	bne.n	8002b7c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_ADC_Start+0x198>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d11b      	bne.n	8002b7c <HAL_ADC_Start+0x174>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d114      	bne.n	8002b7c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b60:	609a      	str	r2, [r3, #8]
 8002b62:	e00b      	b.n	8002b7c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f043 0210 	orr.w	r2, r3, #16
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	f043 0201 	orr.w	r2, r3, #1
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	431bde83 	.word	0x431bde83
 8002b94:	fffff8fe 	.word	0xfffff8fe
 8002b98:	40012300 	.word	0x40012300
 8002b9c:	40012000 	.word	0x40012000
 8002ba0:	40012200 	.word	0x40012200

08002ba4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d049      	beq.n	8002c6e <HAL_ADC_IRQHandler+0xca>
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d046      	beq.n	8002c6e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d12b      	bne.n	8002c5e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d127      	bne.n	8002c5e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c14:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d006      	beq.n	8002c2a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d119      	bne.n	8002c5e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0220 	bic.w	r2, r2, #32
 8002c38:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d105      	bne.n	8002c5e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f013 fde2 	bl	8016828 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0212 	mvn.w	r2, #18
 8002c6c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d057      	beq.n	8002d34 <HAL_ADC_IRQHandler+0x190>
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d054      	beq.n	8002d34 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d105      	bne.n	8002ca2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d139      	bne.n	8002d24 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d12b      	bne.n	8002d24 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d124      	bne.n	8002d24 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d11d      	bne.n	8002d24 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d119      	bne.n	8002d24 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cfe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d105      	bne.n	8002d24 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f043 0201 	orr.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fc37 	bl	8003598 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f06f 020c 	mvn.w	r2, #12
 8002d32:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d017      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x1d6>
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d014      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d10d      	bne.n	8002d7a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f92e 	bl	8002fcc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 0201 	mvn.w	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d88:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d015      	beq.n	8002dbc <HAL_ADC_IRQHandler+0x218>
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d012      	beq.n	8002dbc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9a:	f043 0202 	orr.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f06f 0220 	mvn.w	r2, #32
 8002daa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f917 	bl	8002fe0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0220 	mvn.w	r2, #32
 8002dba:	601a      	str	r2, [r3, #0]
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_Start_DMA+0x1e>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e0d4      	b.n	8002f8c <HAL_ADC_Start_DMA+0x1c8>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d018      	beq.n	8002e2a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002e08:	4b62      	ldr	r3, [pc, #392]	; (8002f94 <HAL_ADC_Start_DMA+0x1d0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a62      	ldr	r2, [pc, #392]	; (8002f98 <HAL_ADC_Start_DMA+0x1d4>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	0c9a      	lsrs	r2, r3, #18
 8002e14:	4613      	mov	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4413      	add	r3, r2
 8002e1a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002e1c:	e002      	b.n	8002e24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d1f9      	bne.n	8002e1e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	f040 809c 	bne.w	8002f72 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e3e:	4b57      	ldr	r3, [pc, #348]	; (8002f9c <HAL_ADC_Start_DMA+0x1d8>)
 8002e40:	4013      	ands	r3, r2
 8002e42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e74:	d106      	bne.n	8002e84 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	f023 0206 	bic.w	r2, r3, #6
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	645a      	str	r2, [r3, #68]	; 0x44
 8002e82:	e002      	b.n	8002e8a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	4a42      	ldr	r2, [pc, #264]	; (8002fa0 <HAL_ADC_Start_DMA+0x1dc>)
 8002e98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	4a41      	ldr	r2, [pc, #260]	; (8002fa4 <HAL_ADC_Start_DMA+0x1e0>)
 8002ea0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	4a40      	ldr	r2, [pc, #256]	; (8002fa8 <HAL_ADC_Start_DMA+0x1e4>)
 8002ea8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002eb2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002ec2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ed2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	334c      	adds	r3, #76	; 0x4c
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f000 fd22 	bl	800392c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002ee8:	4b30      	ldr	r3, [pc, #192]	; (8002fac <HAL_ADC_Start_DMA+0x1e8>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 031f 	and.w	r3, r3, #31
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10f      	bne.n	8002f14 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d143      	bne.n	8002f8a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	e03a      	b.n	8002f8a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <HAL_ADC_Start_DMA+0x1ec>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d10e      	bne.n	8002f3c <HAL_ADC_Start_DMA+0x178>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d107      	bne.n	8002f3c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f3a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_ADC_Start_DMA+0x1e8>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f003 0310 	and.w	r3, r3, #16
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d120      	bne.n	8002f8a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a19      	ldr	r2, [pc, #100]	; (8002fb4 <HAL_ADC_Start_DMA+0x1f0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d11b      	bne.n	8002f8a <HAL_ADC_Start_DMA+0x1c6>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d114      	bne.n	8002f8a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	e00b      	b.n	8002f8a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f043 0210 	orr.w	r2, r3, #16
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000000 	.word	0x20000000
 8002f98:	431bde83 	.word	0x431bde83
 8002f9c:	fffff8fe 	.word	0xfffff8fe
 8002fa0:	08003495 	.word	0x08003495
 8002fa4:	0800354f 	.word	0x0800354f
 8002fa8:	0800356b 	.word	0x0800356b
 8002fac:	40012300 	.word	0x40012300
 8002fb0:	40012000 	.word	0x40012000
 8002fb4:	40012200 	.word	0x40012200

08002fb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003008:	2b01      	cmp	r3, #1
 800300a:	d101      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x1c>
 800300c:	2302      	movs	r3, #2
 800300e:	e136      	b.n	800327e <HAL_ADC_ConfigChannel+0x28a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2b09      	cmp	r3, #9
 800301e:	d93a      	bls.n	8003096 <HAL_ADC_ConfigChannel+0xa2>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003028:	d035      	beq.n	8003096 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68d9      	ldr	r1, [r3, #12]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b29b      	uxth	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	4613      	mov	r3, r2
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	4413      	add	r3, r2
 800303e:	3b1e      	subs	r3, #30
 8003040:	2207      	movs	r2, #7
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43da      	mvns	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	400a      	ands	r2, r1
 800304e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a8d      	ldr	r2, [pc, #564]	; (800328c <HAL_ADC_ConfigChannel+0x298>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d10a      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68d9      	ldr	r1, [r3, #12]
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	061a      	lsls	r2, r3, #24
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800306e:	e035      	b.n	80030dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68d9      	ldr	r1, [r3, #12]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	4618      	mov	r0, r3
 8003082:	4603      	mov	r3, r0
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	4403      	add	r3, r0
 8003088:	3b1e      	subs	r3, #30
 800308a:	409a      	lsls	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003094:	e022      	b.n	80030dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6919      	ldr	r1, [r3, #16]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	2207      	movs	r2, #7
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43da      	mvns	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	400a      	ands	r2, r1
 80030b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6919      	ldr	r1, [r3, #16]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	4618      	mov	r0, r3
 80030cc:	4603      	mov	r3, r0
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4403      	add	r3, r0
 80030d2:	409a      	lsls	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b06      	cmp	r3, #6
 80030e2:	d824      	bhi.n	800312e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	3b05      	subs	r3, #5
 80030f6:	221f      	movs	r2, #31
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43da      	mvns	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	400a      	ands	r2, r1
 8003104:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	4618      	mov	r0, r3
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	3b05      	subs	r3, #5
 8003120:	fa00 f203 	lsl.w	r2, r0, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	635a      	str	r2, [r3, #52]	; 0x34
 800312c:	e04c      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d824      	bhi.n	8003180 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	3b23      	subs	r3, #35	; 0x23
 8003148:	221f      	movs	r2, #31
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	43da      	mvns	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	400a      	ands	r2, r1
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	4618      	mov	r0, r3
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	3b23      	subs	r3, #35	; 0x23
 8003172:	fa00 f203 	lsl.w	r2, r0, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	631a      	str	r2, [r3, #48]	; 0x30
 800317e:	e023      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	3b41      	subs	r3, #65	; 0x41
 8003192:	221f      	movs	r2, #31
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43da      	mvns	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	400a      	ands	r2, r1
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	4618      	mov	r0, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4413      	add	r3, r2
 80031ba:	3b41      	subs	r3, #65	; 0x41
 80031bc:	fa00 f203 	lsl.w	r2, r0, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a30      	ldr	r2, [pc, #192]	; (8003290 <HAL_ADC_ConfigChannel+0x29c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d10a      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x1f4>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031da:	d105      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80031dc:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <HAL_ADC_ConfigChannel+0x2a0>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <HAL_ADC_ConfigChannel+0x2a0>)
 80031e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80031e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a28      	ldr	r2, [pc, #160]	; (8003290 <HAL_ADC_ConfigChannel+0x29c>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d10f      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x21e>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b12      	cmp	r3, #18
 80031f8:	d10b      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80031fa:	4b26      	ldr	r3, [pc, #152]	; (8003294 <HAL_ADC_ConfigChannel+0x2a0>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	4a25      	ldr	r2, [pc, #148]	; (8003294 <HAL_ADC_ConfigChannel+0x2a0>)
 8003200:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003204:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003206:	4b23      	ldr	r3, [pc, #140]	; (8003294 <HAL_ADC_ConfigChannel+0x2a0>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4a22      	ldr	r2, [pc, #136]	; (8003294 <HAL_ADC_ConfigChannel+0x2a0>)
 800320c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003210:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <HAL_ADC_ConfigChannel+0x29c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d12b      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x280>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1a      	ldr	r2, [pc, #104]	; (800328c <HAL_ADC_ConfigChannel+0x298>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <HAL_ADC_ConfigChannel+0x23a>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b11      	cmp	r3, #17
 800322c:	d122      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800322e:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_ADC_ConfigChannel+0x2a0>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4a18      	ldr	r2, [pc, #96]	; (8003294 <HAL_ADC_ConfigChannel+0x2a0>)
 8003234:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003238:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800323a:	4b16      	ldr	r3, [pc, #88]	; (8003294 <HAL_ADC_ConfigChannel+0x2a0>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	4a15      	ldr	r2, [pc, #84]	; (8003294 <HAL_ADC_ConfigChannel+0x2a0>)
 8003240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003244:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a10      	ldr	r2, [pc, #64]	; (800328c <HAL_ADC_ConfigChannel+0x298>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d111      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_ADC_ConfigChannel+0x2a4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a11      	ldr	r2, [pc, #68]	; (800329c <HAL_ADC_ConfigChannel+0x2a8>)
 8003256:	fba2 2303 	umull	r2, r3, r2, r3
 800325a:	0c9a      	lsrs	r2, r3, #18
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003266:	e002      	b.n	800326e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3b01      	subs	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1f9      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	10000012 	.word	0x10000012
 8003290:	40012000 	.word	0x40012000
 8003294:	40012300 	.word	0x40012300
 8003298:	20000000 	.word	0x20000000
 800329c:	431bde83 	.word	0x431bde83

080032a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80032a8:	4b78      	ldr	r3, [pc, #480]	; (800348c <ADC_Init+0x1ec>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	4a77      	ldr	r2, [pc, #476]	; (800348c <ADC_Init+0x1ec>)
 80032ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80032b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80032b4:	4b75      	ldr	r3, [pc, #468]	; (800348c <ADC_Init+0x1ec>)
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4973      	ldr	r1, [pc, #460]	; (800348c <ADC_Init+0x1ec>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	021a      	lsls	r2, r3, #8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003316:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6899      	ldr	r1, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	4a58      	ldr	r2, [pc, #352]	; (8003490 <ADC_Init+0x1f0>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d022      	beq.n	800337a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003342:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6899      	ldr	r1, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003364:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6899      	ldr	r1, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	609a      	str	r2, [r3, #8]
 8003378:	e00f      	b.n	800339a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003388:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689a      	ldr	r2, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003398:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0202 	bic.w	r2, r2, #2
 80033a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	005a      	lsls	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01b      	beq.n	8003400 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6859      	ldr	r1, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f2:	3b01      	subs	r3, #1
 80033f4:	035a      	lsls	r2, r3, #13
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	605a      	str	r2, [r3, #4]
 80033fe:	e007      	b.n	8003410 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800340e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	3b01      	subs	r3, #1
 800342c:	051a      	lsls	r2, r3, #20
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003452:	025a      	lsls	r2, r3, #9
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800346a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6899      	ldr	r1, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	029a      	lsls	r2, r3, #10
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	609a      	str	r2, [r3, #8]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40012300 	.word	0x40012300
 8003490:	0f000001 	.word	0x0f000001

08003494 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d13c      	bne.n	8003528 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d12b      	bne.n	8003520 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d127      	bne.n	8003520 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d006      	beq.n	80034ec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d119      	bne.n	8003520 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0220 	bic.w	r2, r2, #32
 80034fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d105      	bne.n	8003520 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	f043 0201 	orr.w	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f013 f981 	bl	8016828 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003526:	e00e      	b.n	8003546 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f7ff fd53 	bl	8002fe0 <HAL_ADC_ErrorCallback>
}
 800353a:	e004      	b.n	8003546 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
}
 8003546:	bf00      	nop
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b084      	sub	sp, #16
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800355c:	68f8      	ldr	r0, [r7, #12]
 800355e:	f7ff fd2b 	bl	8002fb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003562:	bf00      	nop
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003576:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2240      	movs	r2, #64	; 0x40
 800357c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f043 0204 	orr.w	r2, r3, #4
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff fd28 	bl	8002fe0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003590:	bf00      	nop
 8003592:	3710      	adds	r7, #16
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035bc:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <__NVIC_SetPriorityGrouping+0x40>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035c8:	4013      	ands	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <__NVIC_SetPriorityGrouping+0x44>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035da:	4a04      	ldr	r2, [pc, #16]	; (80035ec <__NVIC_SetPriorityGrouping+0x40>)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	60d3      	str	r3, [r2, #12]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000ed00 	.word	0xe000ed00
 80035f0:	05fa0000 	.word	0x05fa0000

080035f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <__NVIC_GetPriorityGrouping+0x18>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	f003 0307 	and.w	r3, r3, #7
}
 8003602:	4618      	mov	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	2b00      	cmp	r3, #0
 8003620:	db0b      	blt.n	800363a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	4907      	ldr	r1, [pc, #28]	; (8003648 <__NVIC_EnableIRQ+0x38>)
 800362a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	2001      	movs	r0, #1
 8003632:	fa00 f202 	lsl.w	r2, r0, r2
 8003636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	e000e100 	.word	0xe000e100

0800364c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	4603      	mov	r3, r0
 8003654:	6039      	str	r1, [r7, #0]
 8003656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365c:	2b00      	cmp	r3, #0
 800365e:	db0a      	blt.n	8003676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	490c      	ldr	r1, [pc, #48]	; (8003698 <__NVIC_SetPriority+0x4c>)
 8003666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800366a:	0112      	lsls	r2, r2, #4
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	440b      	add	r3, r1
 8003670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003674:	e00a      	b.n	800368c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	b2da      	uxtb	r2, r3
 800367a:	4908      	ldr	r1, [pc, #32]	; (800369c <__NVIC_SetPriority+0x50>)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	3b04      	subs	r3, #4
 8003684:	0112      	lsls	r2, r2, #4
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	440b      	add	r3, r1
 800368a:	761a      	strb	r2, [r3, #24]
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000e100 	.word	0xe000e100
 800369c:	e000ed00 	.word	0xe000ed00

080036a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f1c3 0307 	rsb	r3, r3, #7
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	bf28      	it	cs
 80036be:	2304      	movcs	r3, #4
 80036c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	3304      	adds	r3, #4
 80036c6:	2b06      	cmp	r3, #6
 80036c8:	d902      	bls.n	80036d0 <NVIC_EncodePriority+0x30>
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3b03      	subs	r3, #3
 80036ce:	e000      	b.n	80036d2 <NVIC_EncodePriority+0x32>
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	fa02 f303 	lsl.w	r3, r2, r3
 80036de:	43da      	mvns	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	401a      	ands	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	fa01 f303 	lsl.w	r3, r1, r3
 80036f2:	43d9      	mvns	r1, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f8:	4313      	orrs	r3, r2
         );
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3724      	adds	r7, #36	; 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3b01      	subs	r3, #1
 8003714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003718:	d301      	bcc.n	800371e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800371a:	2301      	movs	r3, #1
 800371c:	e00f      	b.n	800373e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <SysTick_Config+0x40>)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	3b01      	subs	r3, #1
 8003724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003726:	210f      	movs	r1, #15
 8003728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800372c:	f7ff ff8e 	bl	800364c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <SysTick_Config+0x40>)
 8003732:	2200      	movs	r2, #0
 8003734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003736:	4b04      	ldr	r3, [pc, #16]	; (8003748 <SysTick_Config+0x40>)
 8003738:	2207      	movs	r2, #7
 800373a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	e000e010 	.word	0xe000e010

0800374c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff29 	bl	80035ac <__NVIC_SetPriorityGrouping>
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003762:	b580      	push	{r7, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	4603      	mov	r3, r0
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	607a      	str	r2, [r7, #4]
 800376e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003770:	2300      	movs	r3, #0
 8003772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003774:	f7ff ff3e 	bl	80035f4 <__NVIC_GetPriorityGrouping>
 8003778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	6978      	ldr	r0, [r7, #20]
 8003780:	f7ff ff8e 	bl	80036a0 <NVIC_EncodePriority>
 8003784:	4602      	mov	r2, r0
 8003786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378a:	4611      	mov	r1, r2
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff5d 	bl	800364c <__NVIC_SetPriority>
}
 8003792:	bf00      	nop
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b082      	sub	sp, #8
 800379e:	af00      	add	r7, sp, #0
 80037a0:	4603      	mov	r3, r0
 80037a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff31 	bl	8003610 <__NVIC_EnableIRQ>
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b082      	sub	sp, #8
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7ff ffa2 	bl	8003708 <SysTick_Config>
 80037c4:	4603      	mov	r3, r0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037dc:	f7ff f8a0 	bl	8002920 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e099      	b.n	8003920 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800380c:	e00f      	b.n	800382e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800380e:	f7ff f887 	bl	8002920 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b05      	cmp	r3, #5
 800381a:	d908      	bls.n	800382e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2203      	movs	r2, #3
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e078      	b.n	8003920 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e8      	bne.n	800380e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4b38      	ldr	r3, [pc, #224]	; (8003928 <HAL_DMA_Init+0x158>)
 8003848:	4013      	ands	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800385a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
 8003878:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4313      	orrs	r3, r2
 800387e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	2b04      	cmp	r3, #4
 8003886:	d107      	bne.n	8003898 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003890:	4313      	orrs	r3, r2
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f023 0307 	bic.w	r3, r3, #7
 80038ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	697a      	ldr	r2, [r7, #20]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d117      	bne.n	80038f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00e      	beq.n	80038f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 fb23 	bl	8003f20 <DMA_CheckFifoParam>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d008      	beq.n	80038f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2240      	movs	r2, #64	; 0x40
 80038e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038ee:	2301      	movs	r3, #1
 80038f0:	e016      	b.n	8003920 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fada 	bl	8003eb4 <DMA_CalcBaseAndBitshift>
 8003900:	4603      	mov	r3, r0
 8003902:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003908:	223f      	movs	r2, #63	; 0x3f
 800390a:	409a      	lsls	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	f010803f 	.word	0xf010803f

0800392c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_DMA_Start_IT+0x26>
 800394e:	2302      	movs	r3, #2
 8003950:	e048      	b.n	80039e4 <HAL_DMA_Start_IT+0xb8>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b01      	cmp	r3, #1
 8003964:	d137      	bne.n	80039d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fa6c 	bl	8003e58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003984:	223f      	movs	r2, #63	; 0x3f
 8003986:	409a      	lsls	r2, r3
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f042 0216 	orr.w	r2, r2, #22
 800399a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d007      	beq.n	80039c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0208 	orr.w	r2, r2, #8
 80039c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	e005      	b.n	80039e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039de:	2302      	movs	r3, #2
 80039e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80039fa:	f7fe ff91 	bl	8002920 <HAL_GetTick>
 80039fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d008      	beq.n	8003a1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2280      	movs	r2, #128	; 0x80
 8003a10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e052      	b.n	8003ac4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0216 	bic.w	r2, r2, #22
 8003a2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695a      	ldr	r2, [r3, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d103      	bne.n	8003a4e <HAL_DMA_Abort+0x62>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d007      	beq.n	8003a5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0208 	bic.w	r2, r2, #8
 8003a5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0201 	bic.w	r2, r2, #1
 8003a6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a6e:	e013      	b.n	8003a98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a70:	f7fe ff56 	bl	8002920 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b05      	cmp	r3, #5
 8003a7c:	d90c      	bls.n	8003a98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2203      	movs	r2, #3
 8003a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e015      	b.n	8003ac4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e4      	bne.n	8003a70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aaa:	223f      	movs	r2, #63	; 0x3f
 8003aac:	409a      	lsls	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b02      	cmp	r3, #2
 8003ade:	d004      	beq.n	8003aea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2280      	movs	r2, #128	; 0x80
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e00c      	b.n	8003b04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2205      	movs	r2, #5
 8003aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0201 	bic.w	r2, r2, #1
 8003b00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003b1c:	4b8e      	ldr	r3, [pc, #568]	; (8003d58 <HAL_DMA_IRQHandler+0x248>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a8e      	ldr	r2, [pc, #568]	; (8003d5c <HAL_DMA_IRQHandler+0x24c>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0a9b      	lsrs	r3, r3, #10
 8003b28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01a      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d013      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0204 	bic.w	r2, r2, #4
 8003b62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b68:	2208      	movs	r2, #8
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	f043 0201 	orr.w	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	2201      	movs	r2, #1
 8003b82:	409a      	lsls	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d012      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	f043 0202 	orr.w	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d012      	beq.n	8003be8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	f043 0204 	orr.w	r2, r3, #4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bec:	2210      	movs	r2, #16
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d043      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d03c      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	2210      	movs	r2, #16
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d108      	bne.n	8003c40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d024      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
 8003c3e:	e01f      	b.n	8003c80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01b      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
 8003c50:	e016      	b.n	8003c80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d107      	bne.n	8003c70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0208 	bic.w	r2, r2, #8
 8003c6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	2220      	movs	r2, #32
 8003c86:	409a      	lsls	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 808f 	beq.w	8003db0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8087 	beq.w	8003db0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b05      	cmp	r3, #5
 8003cb8:	d136      	bne.n	8003d28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0216 	bic.w	r2, r2, #22
 8003cc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_DMA_IRQHandler+0x1da>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0208 	bic.w	r2, r2, #8
 8003cf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	223f      	movs	r2, #63	; 0x3f
 8003d00:	409a      	lsls	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d07e      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
        }
        return;
 8003d26:	e079      	b.n	8003e1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d01d      	beq.n	8003d72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10d      	bne.n	8003d60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d031      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4798      	blx	r3
 8003d54:	e02c      	b.n	8003db0 <HAL_DMA_IRQHandler+0x2a0>
 8003d56:	bf00      	nop
 8003d58:	20000000 	.word	0x20000000
 8003d5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d023      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	4798      	blx	r3
 8003d70:	e01e      	b.n	8003db0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10f      	bne.n	8003da0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f022 0210 	bic.w	r2, r2, #16
 8003d8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d032      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d022      	beq.n	8003e0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2205      	movs	r2, #5
 8003dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	3301      	adds	r3, #1
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d307      	bcc.n	8003df8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f2      	bne.n	8003ddc <HAL_DMA_IRQHandler+0x2cc>
 8003df6:	e000      	b.n	8003dfa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003df8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d005      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	4798      	blx	r3
 8003e1a:	e000      	b.n	8003e1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003e1c:	bf00      	nop
    }
  }
}
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e32:	b2db      	uxtb	r3, r3
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d108      	bne.n	8003e98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e96:	e007      	b.n	8003ea8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	60da      	str	r2, [r3, #12]
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	3b10      	subs	r3, #16
 8003ec4:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <DMA_CalcBaseAndBitshift+0x60>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ece:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <DMA_CalcBaseAndBitshift+0x64>)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d908      	bls.n	8003ef4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <DMA_CalcBaseAndBitshift+0x68>)
 8003eea:	4013      	ands	r3, r2
 8003eec:	1d1a      	adds	r2, r3, #4
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	659a      	str	r2, [r3, #88]	; 0x58
 8003ef2:	e006      	b.n	8003f02 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <DMA_CalcBaseAndBitshift+0x68>)
 8003efc:	4013      	ands	r3, r2
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	aaaaaaab 	.word	0xaaaaaaab
 8003f18:	0801ac78 	.word	0x0801ac78
 8003f1c:	fffffc00 	.word	0xfffffc00

08003f20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11f      	bne.n	8003f7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d856      	bhi.n	8003fee <DMA_CheckFifoParam+0xce>
 8003f40:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <DMA_CheckFifoParam+0x28>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f6b 	.word	0x08003f6b
 8003f50:	08003f59 	.word	0x08003f59
 8003f54:	08003fef 	.word	0x08003fef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d046      	beq.n	8003ff2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f68:	e043      	b.n	8003ff2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f72:	d140      	bne.n	8003ff6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f78:	e03d      	b.n	8003ff6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f82:	d121      	bne.n	8003fc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d837      	bhi.n	8003ffa <DMA_CheckFifoParam+0xda>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <DMA_CheckFifoParam+0x70>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fa1 	.word	0x08003fa1
 8003f94:	08003fa7 	.word	0x08003fa7
 8003f98:	08003fa1 	.word	0x08003fa1
 8003f9c:	08003fb9 	.word	0x08003fb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa4:	e030      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d025      	beq.n	8003ffe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb6:	e022      	b.n	8003ffe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fc0:	d11f      	bne.n	8004002 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fc6:	e01c      	b.n	8004002 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d903      	bls.n	8003fd6 <DMA_CheckFifoParam+0xb6>
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d003      	beq.n	8003fdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fd4:	e018      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
      break;
 8003fda:	e015      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00e      	beq.n	8004006 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
      break;
 8003fec:	e00b      	b.n	8004006 <DMA_CheckFifoParam+0xe6>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e00a      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e008      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e006      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      break;
 8003ffa:	bf00      	nop
 8003ffc:	e004      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      break;
 8003ffe:	bf00      	nop
 8004000:	e002      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      break;   
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <DMA_CheckFifoParam+0xe8>
      break;
 8004006:	bf00      	nop
    }
  } 
  
  return status; 
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop

08004018 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e06a      	b.n	8004100 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004030:	2b00      	cmp	r3, #0
 8004032:	d106      	bne.n	8004042 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2223      	movs	r2, #35	; 0x23
 8004038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f008 f8a9 	bl	800c194 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004042:	4b31      	ldr	r3, [pc, #196]	; (8004108 <HAL_ETH_Init+0xf0>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	4a30      	ldr	r2, [pc, #192]	; (8004108 <HAL_ETH_Init+0xf0>)
 8004048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800404c:	6453      	str	r3, [r2, #68]	; 0x44
 800404e:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <HAL_ETH_Init+0xf0>)
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800405a:	4b2c      	ldr	r3, [pc, #176]	; (800410c <HAL_ETH_Init+0xf4>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	4a2b      	ldr	r2, [pc, #172]	; (800410c <HAL_ETH_Init+0xf4>)
 8004060:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004064:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004066:	4b29      	ldr	r3, [pc, #164]	; (800410c <HAL_ETH_Init+0xf4>)
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	4927      	ldr	r1, [pc, #156]	; (800410c <HAL_ETH_Init+0xf4>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004074:	4b25      	ldr	r3, [pc, #148]	; (800410c <HAL_ETH_Init+0xf4>)
 8004076:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6812      	ldr	r2, [r2, #0]
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800408e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004090:	f7fe fc46 	bl	8002920 <HAL_GetTick>
 8004094:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004096:	e011      	b.n	80040bc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004098:	f7fe fc42 	bl	8002920 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040a6:	d909      	bls.n	80040bc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2204      	movs	r2, #4
 80040ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	22e0      	movs	r2, #224	; 0xe0
 80040b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e021      	b.n	8004100 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e4      	bne.n	8004098 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fdf0 	bl	8004cb4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fe97 	bl	8004e08 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 feed 	bl	8004eba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	461a      	mov	r2, r3
 80040e6:	2100      	movs	r1, #0
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 fe55 	bl	8004d98 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2210      	movs	r2, #16
 80040fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40023800 	.word	0x40023800
 800410c:	40013800 	.word	0x40013800

08004110 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800411e:	2b10      	cmp	r3, #16
 8004120:	d150      	bne.n	80041c4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2223      	movs	r2, #35	; 0x23
 8004126:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2204      	movs	r2, #4
 800412e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f9fd 	bl	8004530 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0208 	orr.w	r2, r2, #8
 8004144:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800414e:	2001      	movs	r0, #1
 8004150:	f7fe fbf2 	bl	8002938 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0204 	orr.w	r2, r2, #4
 800416a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004174:	2001      	movs	r0, #1
 8004176:	f7fe fbdf 	bl	8002938 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fc36 	bl	80049f4 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800419a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800419e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	f043 0302 	orr.w	r3, r3, #2
 80041b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041b6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2223      	movs	r2, #35	; 0x23
 80041bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	e000      	b.n	80041c6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
  }
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b084      	sub	sp, #16
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041dc:	2b23      	cmp	r3, #35	; 0x23
 80041de:	d14a      	bne.n	8004276 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2223      	movs	r2, #35	; 0x23
 80041e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6812      	ldr	r2, [r2, #0]
 80041f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041fe:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6812      	ldr	r2, [r2, #0]
 800420e:	f023 0302 	bic.w	r3, r3, #2
 8004212:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004216:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004230:	2001      	movs	r0, #1
 8004232:	f7fe fb81 	bl	8002938 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fbd8 	bl	80049f4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0208 	bic.w	r2, r2, #8
 8004252:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800425c:	2001      	movs	r0, #1
 800425e:	f7fe fb6b 	bl	8002938 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2210      	movs	r2, #16
 800426e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	e000      	b.n	8004278 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
  }
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	f043 0201 	orr.w	r2, r3, #1
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e07c      	b.n	80043a0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ac:	2b23      	cmp	r3, #35	; 0x23
 80042ae:	d176      	bne.n	800439e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80042b0:	2200      	movs	r2, #0
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fe6d 	bl	8004f94 <ETH_Prepare_Tx_Descriptors>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c6:	f043 0202 	orr.w	r2, r3, #2
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e065      	b.n	80043a0 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80042d4:	f3bf 8f4f 	dsb	sy
}
 80042d8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3206      	adds	r2, #6
 80042e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	1c5a      	adds	r2, r3, #1
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	629a      	str	r2, [r3, #40]	; 0x28
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d904      	bls.n	8004304 <HAL_ETH_Transmit+0x84>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	1f1a      	subs	r2, r3, #4
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	3106      	adds	r1, #6
 8004310:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004314:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004318:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800431a:	f7fe fb01 	bl	8002920 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004320:	e037      	b.n	8004392 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d011      	beq.n	8004358 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f043 0208 	orr.w	r2, r3, #8
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434c:	695a      	ldr	r2, [r3, #20]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e023      	b.n	80043a0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800435e:	d018      	beq.n	8004392 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004360:	f7fe fade 	bl	8002920 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	429a      	cmp	r2, r3
 800436e:	d302      	bcc.n	8004376 <HAL_ETH_Transmit+0xf6>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10d      	bne.n	8004392 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	f043 0204 	orr.w	r2, r3, #4
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800438c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e006      	b.n	80043a0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	dbc3      	blt.n	8004322 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e000      	b.n	80043a0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
  }
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b088      	sub	sp, #32
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d109      	bne.n	80043d4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f043 0201 	orr.w	r2, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0a8      	b.n	8004526 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043da:	2b23      	cmp	r3, #35	; 0x23
 80043dc:	d001      	beq.n	80043e2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e0a1      	b.n	8004526 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	3212      	adds	r2, #18
 80043ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f8:	f1c3 0304 	rsb	r3, r3, #4
 80043fc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80043fe:	e06a      	b.n	80044d6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	69da      	ldr	r2, [r3, #28]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004424:	2b00      	cmp	r3, #0
 8004426:	d103      	bne.n	8004430 <HAL_ETH_ReadData+0x88>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d040      	beq.n	80044b2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	0c1b      	lsrs	r3, r3, #16
 8004460:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004464:	3b04      	subs	r3, #4
 8004466:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004470:	2301      	movs	r3, #1
 8004472:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800448c:	461a      	mov	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	b29b      	uxth	r3, r3
 8004492:	f008 f841 	bl	800c518 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	441a      	add	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2200      	movs	r2, #0
 80044b0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3301      	adds	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d902      	bls.n	80044c4 <HAL_ETH_ReadData+0x11c>
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3b04      	subs	r3, #4
 80044c2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	3212      	adds	r2, #18
 80044ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ce:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	3301      	adds	r3, #1
 80044d4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	db06      	blt.n	80044ec <HAL_ETH_ReadData+0x144>
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d202      	bcs.n	80044ec <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80044e6:	7bfb      	ldrb	r3, [r7, #15]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d089      	beq.n	8004400 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	441a      	add	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f815 	bl	8004530 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69fa      	ldr	r2, [r7, #28]
 800450a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d108      	bne.n	8004524 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800453c:	2301      	movs	r3, #1
 800453e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004544:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	69fa      	ldr	r2, [r7, #28]
 800454a:	3212      	adds	r2, #18
 800454c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004550:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004556:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004558:	e040      	b.n	80045dc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d112      	bne.n	8004588 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004562:	f107 030c 	add.w	r3, r7, #12
 8004566:	4618      	mov	r0, r3
 8004568:	f007 ffa6 	bl	800c4b8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004572:	2300      	movs	r3, #0
 8004574:	74fb      	strb	r3, [r7, #19]
 8004576:	e007      	b.n	8004588 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	461a      	mov	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	461a      	mov	r2, r3
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004588:	7cfb      	ldrb	r3, [r7, #19]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d026      	beq.n	80045dc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004592:	2b00      	cmp	r3, #0
 8004594:	d103      	bne.n	800459e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	4a1e      	ldr	r2, [pc, #120]	; (8004614 <ETH_UpdateDescriptor+0xe4>)
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	e003      	b.n	80045a6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80045a4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80045a6:	f3bf 8f5f 	dmb	sy
}
 80045aa:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	3301      	adds	r3, #1
 80045bc:	61fb      	str	r3, [r7, #28]
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d902      	bls.n	80045ca <ETH_UpdateDescriptor+0x9a>
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	3b04      	subs	r3, #4
 80045c8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	3212      	adds	r2, #18
 80045d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d4:	617b      	str	r3, [r7, #20]
      desccount--;
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	3b01      	subs	r3, #1
 80045da:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <ETH_UpdateDescriptor+0xb8>
 80045e2:	7cfb      	ldrb	r3, [r7, #19]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1b8      	bne.n	800455a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d00c      	beq.n	800460c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fa:	461a      	mov	r2, r3
 80045fc:	2300      	movs	r3, #0
 80045fe:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69ba      	ldr	r2, [r7, #24]
 800460a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800460c:	bf00      	nop
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	800045f8 	.word	0x800045f8

08004618 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f003 031c 	and.w	r3, r3, #28
 8004634:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	02db      	lsls	r3, r3, #11
 800463a:	b29b      	uxth	r3, r3
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	4313      	orrs	r3, r2
 8004640:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	019b      	lsls	r3, r3, #6
 8004646:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0302 	bic.w	r3, r3, #2
 8004656:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004668:	f7fe f95a 	bl	8002920 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800466e:	e00d      	b.n	800468c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004670:	f7fe f956 	bl	8002920 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467e:	d301      	bcc.n	8004684 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e010      	b.n	80046a6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1ec      	bne.n	8004670 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	b29b      	uxth	r3, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f003 031c 	and.w	r3, r3, #28
 80046ca:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	02db      	lsls	r3, r3, #11
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	019b      	lsls	r3, r3, #6
 80046dc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f043 0302 	orr.w	r3, r3, #2
 80046ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004708:	f7fe f90a 	bl	8002920 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800470e:	e00d      	b.n	800472c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004710:	f7fe f906 	bl	8002920 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800471e:	d301      	bcc.n	8004724 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e009      	b.n	8004738 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1ec      	bne.n	8004710 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0d9      	b.n	8004908 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf14      	ite	ne
 8004762:	2301      	movne	r3, #1
 8004764:	2300      	moveq	r3, #0
 8004766:	b2db      	uxtb	r3, r3
 8004768:	461a      	mov	r2, r3
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004788:	2b00      	cmp	r3, #0
 800478a:	bf0c      	ite	eq
 800478c:	2301      	moveq	r3, #1
 800478e:	2300      	movne	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	461a      	mov	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	bf0c      	ite	eq
 80047c2:	2301      	moveq	r3, #1
 80047c4:	2300      	movne	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480e:	2b00      	cmp	r3, #0
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004828:	2b00      	cmp	r3, #0
 800482a:	bf0c      	ite	eq
 800482c:	2301      	moveq	r3, #1
 800482e:	2300      	movne	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004842:	2b00      	cmp	r3, #0
 8004844:	bf14      	ite	ne
 8004846:	2301      	movne	r3, #1
 8004848:	2300      	moveq	r3, #0
 800484a:	b2db      	uxtb	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486a:	2b00      	cmp	r3, #0
 800486c:	bf14      	ite	ne
 800486e:	2301      	movne	r3, #1
 8004870:	2300      	moveq	r3, #0
 8004872:	b2db      	uxtb	r3, r3
 8004874:	461a      	mov	r2, r3
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	461a      	mov	r2, r3
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	0c1b      	lsrs	r3, r3, #16
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf14      	ite	ne
 80048f8:	2301      	movne	r3, #1
 80048fa:	2300      	moveq	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e00b      	b.n	8004940 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492e:	2b10      	cmp	r3, #16
 8004930:	d105      	bne.n	800493e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004932:	6839      	ldr	r1, [r7, #0]
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f883 	bl	8004a40 <ETH_SetMACConfig>

    return HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	e000      	b.n	8004940 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
  }
}
 8004940:	4618      	mov	r0, r3
 8004942:	3708      	adds	r7, #8
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 031c 	bic.w	r3, r3, #28
 800495e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004960:	f003 fbe4 	bl	800812c <HAL_RCC_GetHCLKFreq>
 8004964:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d908      	bls.n	8004980 <HAL_ETH_SetMDIOClockRange+0x38>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4a1c      	ldr	r2, [pc, #112]	; (80049e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d804      	bhi.n	8004980 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f043 0308 	orr.w	r3, r3, #8
 800497c:	60fb      	str	r3, [r7, #12]
 800497e:	e027      	b.n	80049d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d908      	bls.n	800499a <HAL_ETH_SetMDIOClockRange+0x52>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4a17      	ldr	r2, [pc, #92]	; (80049e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d204      	bcs.n	800499a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f043 030c 	orr.w	r3, r3, #12
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	e01a      	b.n	80049d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	4a12      	ldr	r2, [pc, #72]	; (80049e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d303      	bcc.n	80049aa <HAL_ETH_SetMDIOClockRange+0x62>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4a11      	ldr	r2, [pc, #68]	; (80049ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d911      	bls.n	80049ce <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d908      	bls.n	80049c4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	4a0e      	ldr	r2, [pc, #56]	; (80049f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d804      	bhi.n	80049c4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f043 0304 	orr.w	r3, r3, #4
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	e005      	b.n	80049d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f043 0310 	orr.w	r3, r3, #16
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	e000      	b.n	80049d0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80049ce:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	611a      	str	r2, [r3, #16]
}
 80049d8:	bf00      	nop
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	01312cff 	.word	0x01312cff
 80049e4:	02160ebf 	.word	0x02160ebf
 80049e8:	03938700 	.word	0x03938700
 80049ec:	05f5e0ff 	.word	0x05f5e0ff
 80049f0:	08f0d17f 	.word	0x08f0d17f

080049f4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a16:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a24:	2001      	movs	r0, #1
 8004a26:	f7fd ff87 	bl	8002938 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a34:	6193      	str	r3, [r2, #24]
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
	...

08004a40 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4b51      	ldr	r3, [pc, #324]	; (8004b9c <ETH_SetMACConfig+0x15c>)
 8004a56:	4013      	ands	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	7c1b      	ldrb	r3, [r3, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d102      	bne.n	8004a68 <ETH_SetMACConfig+0x28>
 8004a62:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004a66:	e000      	b.n	8004a6a <ETH_SetMACConfig+0x2a>
 8004a68:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	7c5b      	ldrb	r3, [r3, #17]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d102      	bne.n	8004a78 <ETH_SetMACConfig+0x38>
 8004a72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004a76:	e000      	b.n	8004a7a <ETH_SetMACConfig+0x3a>
 8004a78:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004a7a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004a80:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	7fdb      	ldrb	r3, [r3, #31]
 8004a86:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004a88:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004a8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	7f92      	ldrb	r2, [r2, #30]
 8004a94:	2a00      	cmp	r2, #0
 8004a96:	d102      	bne.n	8004a9e <ETH_SetMACConfig+0x5e>
 8004a98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a9c:	e000      	b.n	8004aa0 <ETH_SetMACConfig+0x60>
 8004a9e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004aa0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	7f1b      	ldrb	r3, [r3, #28]
 8004aa6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004aa8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004aae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	791b      	ldrb	r3, [r3, #4]
 8004ab4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004ab6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004abe:	2a00      	cmp	r2, #0
 8004ac0:	d102      	bne.n	8004ac8 <ETH_SetMACConfig+0x88>
 8004ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ac6:	e000      	b.n	8004aca <ETH_SetMACConfig+0x8a>
 8004ac8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004aca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	7bdb      	ldrb	r3, [r3, #15]
 8004ad0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004ad2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004ad8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ae0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004afa:	2001      	movs	r0, #1
 8004afc:	f7fd ff1c 	bl	8002938 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004b16:	4013      	ands	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b1e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004b20:	683a      	ldr	r2, [r7, #0]
 8004b22:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004b26:	2a00      	cmp	r2, #0
 8004b28:	d101      	bne.n	8004b2e <ETH_SetMACConfig+0xee>
 8004b2a:	2280      	movs	r2, #128	; 0x80
 8004b2c:	e000      	b.n	8004b30 <ETH_SetMACConfig+0xf0>
 8004b2e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004b30:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004b36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004b3e:	2a01      	cmp	r2, #1
 8004b40:	d101      	bne.n	8004b46 <ETH_SetMACConfig+0x106>
 8004b42:	2208      	movs	r2, #8
 8004b44:	e000      	b.n	8004b48 <ETH_SetMACConfig+0x108>
 8004b46:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004b48:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004b50:	2a01      	cmp	r2, #1
 8004b52:	d101      	bne.n	8004b58 <ETH_SetMACConfig+0x118>
 8004b54:	2204      	movs	r2, #4
 8004b56:	e000      	b.n	8004b5a <ETH_SetMACConfig+0x11a>
 8004b58:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004b5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004b5c:	683a      	ldr	r2, [r7, #0]
 8004b5e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004b62:	2a01      	cmp	r2, #1
 8004b64:	d101      	bne.n	8004b6a <ETH_SetMACConfig+0x12a>
 8004b66:	2202      	movs	r2, #2
 8004b68:	e000      	b.n	8004b6c <ETH_SetMACConfig+0x12c>
 8004b6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b84:	2001      	movs	r0, #1
 8004b86:	f7fd fed7 	bl	8002938 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	619a      	str	r2, [r3, #24]
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	ff20810f 	.word	0xff20810f

08004ba0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	4b3d      	ldr	r3, [pc, #244]	; (8004cb0 <ETH_SetDMAConfig+0x110>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	7b1b      	ldrb	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <ETH_SetDMAConfig+0x2c>
 8004bc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004bca:	e000      	b.n	8004bce <ETH_SetDMAConfig+0x2e>
 8004bcc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	7b5b      	ldrb	r3, [r3, #13]
 8004bd2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004bd4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	7f52      	ldrb	r2, [r2, #29]
 8004bda:	2a00      	cmp	r2, #0
 8004bdc:	d102      	bne.n	8004be4 <ETH_SetDMAConfig+0x44>
 8004bde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004be2:	e000      	b.n	8004be6 <ETH_SetDMAConfig+0x46>
 8004be4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004be6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	7b9b      	ldrb	r3, [r3, #14]
 8004bec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004bee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004bf4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	7f1b      	ldrb	r3, [r3, #28]
 8004bfa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004bfc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	7f9b      	ldrb	r3, [r3, #30]
 8004c02:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004c04:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004c0a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c12:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004c14:	4313      	orrs	r3, r2
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c24:	461a      	mov	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c36:	2001      	movs	r0, #1
 8004c38:	f7fd fe7e 	bl	8002938 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c44:	461a      	mov	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	791b      	ldrb	r3, [r3, #4]
 8004c4e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004c54:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004c5a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004c60:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c68:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004c6a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004c72:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004c78:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c86:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c94:	2001      	movs	r0, #1
 8004c96:	f7fd fe4f 	bl	8002938 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6013      	str	r3, [r2, #0]
}
 8004ca8:	bf00      	nop
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	f8de3f23 	.word	0xf8de3f23

08004cb4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b0a6      	sub	sp, #152	; 0x98
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004d04:	2300      	movs	r3, #0
 8004d06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004d16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004d22:	2300      	movs	r3, #0
 8004d24:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004d28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fe86 	bl	8004a40 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004d42:	2301      	movs	r3, #1
 8004d44:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004d56:	2300      	movs	r3, #0
 8004d58:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004d60:	2301      	movs	r3, #1
 8004d62:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d68:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004d6e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d74:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004d80:	2300      	movs	r3, #0
 8004d82:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004d84:	f107 0308 	add.w	r3, r7, #8
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff ff08 	bl	8004ba0 <ETH_SetDMAConfig>
}
 8004d90:	bf00      	nop
 8004d92:	3798      	adds	r7, #152	; 0x98
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	3305      	adds	r3, #5
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	3204      	adds	r2, #4
 8004db0:	7812      	ldrb	r2, [r2, #0]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <ETH_MACAddressConfig+0x68>)
 8004dba:	4413      	add	r3, r2
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3303      	adds	r3, #3
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	061a      	lsls	r2, r3, #24
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3302      	adds	r3, #2
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	041b      	lsls	r3, r3, #16
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	7812      	ldrb	r2, [r2, #0]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <ETH_MACAddressConfig+0x6c>)
 8004dea:	4413      	add	r3, r2
 8004dec:	461a      	mov	r2, r3
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	6013      	str	r3, [r2, #0]
}
 8004df2:	bf00      	nop
 8004df4:	371c      	adds	r7, #28
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	40028040 	.word	0x40028040
 8004e04:	40028044 	.word	0x40028044

08004e08 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004e10:	2300      	movs	r3, #0
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e03e      	b.n	8004e94 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68d9      	ldr	r1, [r3, #12]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	440b      	add	r3, r1
 8004e26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2200      	movs	r2, #0
 8004e32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004e40:	68b9      	ldr	r1, [r7, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	3206      	adds	r2, #6
 8004e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d80c      	bhi.n	8004e78 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68d9      	ldr	r1, [r3, #12]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	4613      	mov	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	4413      	add	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	440b      	add	r3, r1
 8004e70:	461a      	mov	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	60da      	str	r2, [r3, #12]
 8004e76:	e004      	b.n	8004e82 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3301      	adds	r3, #1
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d9bd      	bls.n	8004e16 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eac:	611a      	str	r2, [r3, #16]
}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	e046      	b.n	8004f56 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6919      	ldr	r1, [r3, #16]
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	440b      	add	r3, r1
 8004ed8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2200      	movs	r2, #0
 8004ede:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	2200      	movs	r2, #0
 8004efc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f04:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004f0c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	3212      	adds	r2, #18
 8004f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d80c      	bhi.n	8004f46 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6919      	ldr	r1, [r3, #16]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	440b      	add	r3, r1
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	60da      	str	r2, [r3, #12]
 8004f44:	e004      	b.n	8004f50 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3301      	adds	r3, #1
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d9b5      	bls.n	8004ec8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2200      	movs	r2, #0
 8004f66:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f86:	60da      	str	r2, [r3, #12]
}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b08d      	sub	sp, #52	; 0x34
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3318      	adds	r3, #24
 8004fa4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fbe:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fd6:	d007      	beq.n	8004fe8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fdc:	3304      	adds	r3, #4
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e0ff      	b.n	80051ec <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	3301      	adds	r3, #1
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	4b7d      	ldr	r3, [pc, #500]	; (80051f8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8005002:	4013      	ands	r3, r2
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	6852      	ldr	r2, [r2, #4]
 8005008:	431a      	orrs	r2, r3
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d008      	beq.n	800502c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	431a      	orrs	r2, r3
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	431a      	orrs	r2, r3
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005062:	6a3b      	ldr	r3, [r7, #32]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800506e:	f3bf 8f5f 	dmb	sy
}
 8005072:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005080:	e082      	b.n	8005188 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d006      	beq.n	80050a2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	e005      	b.n	80050ae <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	3301      	adds	r3, #1
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d902      	bls.n	80050c0 <ETH_Prepare_Tx_Descriptors+0x12c>
 80050ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050bc:	3b04      	subs	r3, #4
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050e2:	d007      	beq.n	80050f4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80050e4:	697a      	ldr	r2, [r7, #20]
 80050e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e8:	3304      	adds	r3, #4
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d029      	beq.n	8005148 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005100:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005102:	2300      	movs	r3, #0
 8005104:	62bb      	str	r3, [r7, #40]	; 0x28
 8005106:	e019      	b.n	800513c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8005108:	f3bf 8f5f 	dmb	sy
}
 800510c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	3301      	adds	r3, #1
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005122:	2b03      	cmp	r3, #3
 8005124:	d902      	bls.n	800512c <ETH_Prepare_Tx_Descriptors+0x198>
 8005126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005128:	3b04      	subs	r3, #4
 800512a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005134:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	3301      	adds	r3, #1
 800513a:	62bb      	str	r3, [r7, #40]	; 0x28
 800513c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	429a      	cmp	r2, r3
 8005142:	d3e1      	bcc.n	8005108 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8005144:	2302      	movs	r3, #2
 8005146:	e051      	b.n	80051ec <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	3301      	adds	r3, #1
 800514c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	4b25      	ldr	r3, [pc, #148]	; (80051f8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8005164:	4013      	ands	r3, r2
 8005166:	69fa      	ldr	r2, [r7, #28]
 8005168:	6852      	ldr	r2, [r2, #4]
 800516a:	431a      	orrs	r2, r3
 800516c:	6a3b      	ldr	r3, [r7, #32]
 800516e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	3301      	adds	r3, #1
 8005174:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005176:	f3bf 8f5f 	dmb	sy
}
 800517a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	f47f af78 	bne.w	8005082 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d006      	beq.n	80051a6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e005      	b.n	80051b2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051c2:	6979      	ldr	r1, [r7, #20]
 80051c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c6:	3304      	adds	r3, #4
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	440b      	add	r3, r1
 80051cc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051d2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80051d4:	b672      	cpsid	i
}
 80051d6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	4413      	add	r3, r2
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80051e6:	b662      	cpsie	i
}
 80051e8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3734      	adds	r7, #52	; 0x34
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	ffffe000 	.word	0xffffe000

080051fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	; 0x24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800520a:	2300      	movs	r3, #0
 800520c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800520e:	2300      	movs	r3, #0
 8005210:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	e175      	b.n	8005508 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800521c:	2201      	movs	r2, #1
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	fa02 f303 	lsl.w	r3, r2, r3
 8005224:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	697a      	ldr	r2, [r7, #20]
 800522c:	4013      	ands	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	429a      	cmp	r2, r3
 8005236:	f040 8164 	bne.w	8005502 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d005      	beq.n	8005252 <HAL_GPIO_Init+0x56>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f003 0303 	and.w	r3, r3, #3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d130      	bne.n	80052b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	2203      	movs	r2, #3
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43db      	mvns	r3, r3
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4013      	ands	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005288:	2201      	movs	r2, #1
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	69ba      	ldr	r2, [r7, #24]
 8005294:	4013      	ands	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 0201 	and.w	r2, r3, #1
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	fa02 f303 	lsl.w	r3, r2, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d017      	beq.n	80052f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80052c6:	69fb      	ldr	r3, [r7, #28]
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	2203      	movs	r2, #3
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	43db      	mvns	r3, r3
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	4013      	ands	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	69ba      	ldr	r2, [r7, #24]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f003 0303 	and.w	r3, r3, #3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d123      	bne.n	8005344 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	08da      	lsrs	r2, r3, #3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3208      	adds	r2, #8
 8005304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	220f      	movs	r2, #15
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	43db      	mvns	r3, r3
 800531a:	69ba      	ldr	r2, [r7, #24]
 800531c:	4013      	ands	r3, r2
 800531e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	69ba      	ldr	r2, [r7, #24]
 8005332:	4313      	orrs	r3, r2
 8005334:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	08da      	lsrs	r2, r3, #3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3208      	adds	r2, #8
 800533e:	69b9      	ldr	r1, [r7, #24]
 8005340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	2203      	movs	r2, #3
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	69ba      	ldr	r2, [r7, #24]
 8005358:	4013      	ands	r3, r2
 800535a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 0203 	and.w	r2, r3, #3
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	69ba      	ldr	r2, [r7, #24]
 800536e:	4313      	orrs	r3, r2
 8005370:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80be 	beq.w	8005502 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005386:	4b66      	ldr	r3, [pc, #408]	; (8005520 <HAL_GPIO_Init+0x324>)
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	4a65      	ldr	r2, [pc, #404]	; (8005520 <HAL_GPIO_Init+0x324>)
 800538c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005390:	6453      	str	r3, [r2, #68]	; 0x44
 8005392:	4b63      	ldr	r3, [pc, #396]	; (8005520 <HAL_GPIO_Init+0x324>)
 8005394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800539e:	4a61      	ldr	r2, [pc, #388]	; (8005524 <HAL_GPIO_Init+0x328>)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	3302      	adds	r3, #2
 80053a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	220f      	movs	r2, #15
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	69ba      	ldr	r2, [r7, #24]
 80053be:	4013      	ands	r3, r2
 80053c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a58      	ldr	r2, [pc, #352]	; (8005528 <HAL_GPIO_Init+0x32c>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d037      	beq.n	800543a <HAL_GPIO_Init+0x23e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a57      	ldr	r2, [pc, #348]	; (800552c <HAL_GPIO_Init+0x330>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d031      	beq.n	8005436 <HAL_GPIO_Init+0x23a>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a56      	ldr	r2, [pc, #344]	; (8005530 <HAL_GPIO_Init+0x334>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d02b      	beq.n	8005432 <HAL_GPIO_Init+0x236>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a55      	ldr	r2, [pc, #340]	; (8005534 <HAL_GPIO_Init+0x338>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d025      	beq.n	800542e <HAL_GPIO_Init+0x232>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a54      	ldr	r2, [pc, #336]	; (8005538 <HAL_GPIO_Init+0x33c>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d01f      	beq.n	800542a <HAL_GPIO_Init+0x22e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a53      	ldr	r2, [pc, #332]	; (800553c <HAL_GPIO_Init+0x340>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d019      	beq.n	8005426 <HAL_GPIO_Init+0x22a>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a52      	ldr	r2, [pc, #328]	; (8005540 <HAL_GPIO_Init+0x344>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d013      	beq.n	8005422 <HAL_GPIO_Init+0x226>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a51      	ldr	r2, [pc, #324]	; (8005544 <HAL_GPIO_Init+0x348>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00d      	beq.n	800541e <HAL_GPIO_Init+0x222>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a50      	ldr	r2, [pc, #320]	; (8005548 <HAL_GPIO_Init+0x34c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <HAL_GPIO_Init+0x21e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a4f      	ldr	r2, [pc, #316]	; (800554c <HAL_GPIO_Init+0x350>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d101      	bne.n	8005416 <HAL_GPIO_Init+0x21a>
 8005412:	2309      	movs	r3, #9
 8005414:	e012      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005416:	230a      	movs	r3, #10
 8005418:	e010      	b.n	800543c <HAL_GPIO_Init+0x240>
 800541a:	2308      	movs	r3, #8
 800541c:	e00e      	b.n	800543c <HAL_GPIO_Init+0x240>
 800541e:	2307      	movs	r3, #7
 8005420:	e00c      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005422:	2306      	movs	r3, #6
 8005424:	e00a      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005426:	2305      	movs	r3, #5
 8005428:	e008      	b.n	800543c <HAL_GPIO_Init+0x240>
 800542a:	2304      	movs	r3, #4
 800542c:	e006      	b.n	800543c <HAL_GPIO_Init+0x240>
 800542e:	2303      	movs	r3, #3
 8005430:	e004      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005432:	2302      	movs	r3, #2
 8005434:	e002      	b.n	800543c <HAL_GPIO_Init+0x240>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <HAL_GPIO_Init+0x240>
 800543a:	2300      	movs	r3, #0
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	f002 0203 	and.w	r2, r2, #3
 8005442:	0092      	lsls	r2, r2, #2
 8005444:	4093      	lsls	r3, r2
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	4313      	orrs	r3, r2
 800544a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800544c:	4935      	ldr	r1, [pc, #212]	; (8005524 <HAL_GPIO_Init+0x328>)
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	089b      	lsrs	r3, r3, #2
 8005452:	3302      	adds	r3, #2
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800545a:	4b3d      	ldr	r3, [pc, #244]	; (8005550 <HAL_GPIO_Init+0x354>)
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005476:	69ba      	ldr	r2, [r7, #24]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800547e:	4a34      	ldr	r2, [pc, #208]	; (8005550 <HAL_GPIO_Init+0x354>)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005484:	4b32      	ldr	r3, [pc, #200]	; (8005550 <HAL_GPIO_Init+0x354>)
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	43db      	mvns	r3, r3
 800548e:	69ba      	ldr	r2, [r7, #24]
 8005490:	4013      	ands	r3, r2
 8005492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054a8:	4a29      	ldr	r2, [pc, #164]	; (8005550 <HAL_GPIO_Init+0x354>)
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054ae:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_GPIO_Init+0x354>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	43db      	mvns	r3, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	4013      	ands	r3, r2
 80054bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054d2:	4a1f      	ldr	r2, [pc, #124]	; (8005550 <HAL_GPIO_Init+0x354>)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054d8:	4b1d      	ldr	r3, [pc, #116]	; (8005550 <HAL_GPIO_Init+0x354>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	43db      	mvns	r3, r3
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	4013      	ands	r3, r2
 80054e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054fc:	4a14      	ldr	r2, [pc, #80]	; (8005550 <HAL_GPIO_Init+0x354>)
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	3301      	adds	r3, #1
 8005506:	61fb      	str	r3, [r7, #28]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b0f      	cmp	r3, #15
 800550c:	f67f ae86 	bls.w	800521c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	3724      	adds	r7, #36	; 0x24
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800
 8005524:	40013800 	.word	0x40013800
 8005528:	40020000 	.word	0x40020000
 800552c:	40020400 	.word	0x40020400
 8005530:	40020800 	.word	0x40020800
 8005534:	40020c00 	.word	0x40020c00
 8005538:	40021000 	.word	0x40021000
 800553c:	40021400 	.word	0x40021400
 8005540:	40021800 	.word	0x40021800
 8005544:	40021c00 	.word	0x40021c00
 8005548:	40022000 	.word	0x40022000
 800554c:	40022400 	.word	0x40022400
 8005550:	40013c00 	.word	0x40013c00

08005554 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	807b      	strh	r3, [r7, #2]
 8005560:	4613      	mov	r3, r2
 8005562:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005564:	787b      	ldrb	r3, [r7, #1]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800556a:	887a      	ldrh	r2, [r7, #2]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005570:	e003      	b.n	800557a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005572:	887b      	ldrh	r3, [r7, #2]
 8005574:	041a      	lsls	r2, r3, #16
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	619a      	str	r2, [r3, #24]
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
	...

08005588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e07f      	b.n	800569a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f7fc f8b8 	bl	8001724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2224      	movs	r2, #36	; 0x24
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80055d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d107      	bne.n	8005602 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055fe:	609a      	str	r2, [r3, #8]
 8005600:	e006      	b.n	8005610 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800560e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d104      	bne.n	8005622 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005620:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6859      	ldr	r1, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <HAL_I2C_Init+0x11c>)
 800562e:	430b      	orrs	r3, r1
 8005630:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68da      	ldr	r2, [r3, #12]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005640:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	691a      	ldr	r2, [r3, #16]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	430a      	orrs	r2, r1
 800565a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	69d9      	ldr	r1, [r3, #28]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1a      	ldr	r2, [r3, #32]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	430a      	orrs	r2, r1
 800566a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	02008000 	.word	0x02008000

080056a8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b088      	sub	sp, #32
 80056ac:	af02      	add	r7, sp, #8
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	461a      	mov	r2, r3
 80056b4:	460b      	mov	r3, r1
 80056b6:	817b      	strh	r3, [r7, #10]
 80056b8:	4613      	mov	r3, r2
 80056ba:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b20      	cmp	r3, #32
 80056c6:	f040 80cd 	bne.w	8005864 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d8:	d101      	bne.n	80056de <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 80056da:	2302      	movs	r3, #2
 80056dc:	e0c3      	b.n	8005866 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d101      	bne.n	80056ec <HAL_I2C_Master_Transmit_DMA+0x44>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e0bc      	b.n	8005866 <HAL_I2C_Master_Transmit_DMA+0x1be>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2221      	movs	r2, #33	; 0x21
 80056f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2210      	movs	r2, #16
 8005700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	893a      	ldrh	r2, [r7, #8]
 8005714:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a55      	ldr	r2, [pc, #340]	; (8005870 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 800571a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4a55      	ldr	r2, [pc, #340]	; (8005874 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8005720:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005726:	b29b      	uxth	r3, r3
 8005728:	2bff      	cmp	r3, #255	; 0xff
 800572a:	d906      	bls.n	800573a <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	22ff      	movs	r2, #255	; 0xff
 8005730:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005732:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	e007      	b.n	800574a <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573e:	b29a      	uxth	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005744:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005748:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800574e:	2b00      	cmp	r3, #0
 8005750:	d070      	beq.n	8005834 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005756:	2b00      	cmp	r3, #0
 8005758:	d020      	beq.n	800579c <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	4a46      	ldr	r2, [pc, #280]	; (8005878 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8005760:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	4a45      	ldr	r2, [pc, #276]	; (800587c <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8005768:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	2200      	movs	r2, #0
 8005770:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	2200      	movs	r2, #0
 8005778:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3328      	adds	r3, #40	; 0x28
 8005786:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800578c:	f7fe f8ce 	bl	800392c <HAL_DMA_Start_IT>
 8005790:	4603      	mov	r3, r0
 8005792:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005794:	7cfb      	ldrb	r3, [r7, #19]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d138      	bne.n	800580c <HAL_I2C_Master_Transmit_DMA+0x164>
 800579a:	e013      	b.n	80057c4 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e050      	b.n	8005866 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	8979      	ldrh	r1, [r7, #10]
 80057cc:	4b2c      	ldr	r3, [pc, #176]	; (8005880 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f001 fd2a 	bl	800722c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057dc:	b29a      	uxth	r2, r3
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80057f2:	2110      	movs	r1, #16
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f001 fd4b 	bl	8007290 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	e029      	b.n	8005860 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005820:	f043 0210 	orr.w	r2, r3, #16
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e018      	b.n	8005866 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4a13      	ldr	r2, [pc, #76]	; (8005884 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8005838:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800583e:	b2da      	uxtb	r2, r3
 8005840:	8979      	ldrh	r1, [r7, #10]
 8005842:	4b0f      	ldr	r3, [pc, #60]	; (8005880 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f001 fcee 	bl	800722c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005858:	2101      	movs	r1, #1
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f001 fd18 	bl	8007290 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005860:	2300      	movs	r3, #0
 8005862:	e000      	b.n	8005866 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005864:	2302      	movs	r3, #2
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	ffff0000 	.word	0xffff0000
 8005874:	0800635d 	.word	0x0800635d
 8005878:	08006fcb 	.word	0x08006fcb
 800587c:	0800717d 	.word	0x0800717d
 8005880:	80002000 	.word	0x80002000
 8005884:	08005f07 	.word	0x08005f07

08005888 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af02      	add	r7, sp, #8
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	607a      	str	r2, [r7, #4]
 8005892:	461a      	mov	r2, r3
 8005894:	460b      	mov	r3, r1
 8005896:	817b      	strh	r3, [r7, #10]
 8005898:	4613      	mov	r3, r2
 800589a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	f040 80cd 	bne.w	8005a44 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058b8:	d101      	bne.n	80058be <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80058ba:	2302      	movs	r3, #2
 80058bc:	e0c3      	b.n	8005a46 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_I2C_Master_Receive_DMA+0x44>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e0bc      	b.n	8005a46 <HAL_I2C_Master_Receive_DMA+0x1be>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2222      	movs	r2, #34	; 0x22
 80058d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2210      	movs	r2, #16
 80058e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	893a      	ldrh	r2, [r7, #8]
 80058f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	4a55      	ldr	r2, [pc, #340]	; (8005a50 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80058fa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4a55      	ldr	r2, [pc, #340]	; (8005a54 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8005900:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005906:	b29b      	uxth	r3, r3
 8005908:	2bff      	cmp	r3, #255	; 0xff
 800590a:	d906      	bls.n	800591a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	22ff      	movs	r2, #255	; 0xff
 8005910:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005912:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	e007      	b.n	800592a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005924:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005928:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800592e:	2b00      	cmp	r3, #0
 8005930:	d070      	beq.n	8005a14 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005936:	2b00      	cmp	r3, #0
 8005938:	d020      	beq.n	800597c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593e:	4a46      	ldr	r2, [pc, #280]	; (8005a58 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005940:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	4a45      	ldr	r2, [pc, #276]	; (8005a5c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005948:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594e:	2200      	movs	r2, #0
 8005950:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	2200      	movs	r2, #0
 8005958:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3324      	adds	r3, #36	; 0x24
 8005964:	4619      	mov	r1, r3
 8005966:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800596c:	f7fd ffde 	bl	800392c <HAL_DMA_Start_IT>
 8005970:	4603      	mov	r3, r0
 8005972:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005974:	7cfb      	ldrb	r3, [r7, #19]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d138      	bne.n	80059ec <HAL_I2C_Master_Receive_DMA+0x164>
 800597a:	e013      	b.n	80059a4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005990:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e050      	b.n	8005a46 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	8979      	ldrh	r1, [r7, #10]
 80059ac:	4b2c      	ldr	r3, [pc, #176]	; (8005a60 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f001 fc3a 	bl	800722c <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059bc:	b29a      	uxth	r2, r3
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80059d2:	2110      	movs	r1, #16
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f001 fc5b 	bl	8007290 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	e029      	b.n	8005a40 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a00:	f043 0210 	orr.w	r2, r3, #16
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e018      	b.n	8005a46 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005a18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	8979      	ldrh	r1, [r7, #10]
 8005a22:	4b0f      	ldr	r3, [pc, #60]	; (8005a60 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f001 fbfe 	bl	800722c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a38:	2101      	movs	r1, #1
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f001 fc28 	bl	8007290 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	e000      	b.n	8005a46 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005a44:	2302      	movs	r3, #2
  }
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	ffff0000 	.word	0xffff0000
 8005a54:	0800635d 	.word	0x0800635d
 8005a58:	080070a1 	.word	0x080070a1
 8005a5c:	0800717d 	.word	0x0800717d
 8005a60:	80002400 	.word	0x80002400
 8005a64:	08005f07 	.word	0x08005f07

08005a68 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	f040 809b 	bne.w	8005bba <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d002      	beq.n	8005a90 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005a8a:	88fb      	ldrh	r3, [r7, #6]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d105      	bne.n	8005a9c <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a96:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e08f      	b.n	8005bbc <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e088      	b.n	8005bbc <HAL_I2C_Slave_Transmit_DMA+0x154>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2221      	movs	r2, #33	; 0x21
 8005ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	88fa      	ldrh	r2, [r7, #6]
 8005ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a38      	ldr	r2, [pc, #224]	; (8005bc4 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 8005ae2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a38      	ldr	r2, [pc, #224]	; (8005bc8 <HAL_I2C_Slave_Transmit_DMA+0x160>)
 8005ae8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d020      	beq.n	8005b34 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	4a35      	ldr	r2, [pc, #212]	; (8005bcc <HAL_I2C_Slave_Transmit_DMA+0x164>)
 8005af8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	4a34      	ldr	r2, [pc, #208]	; (8005bd0 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 8005b00:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b06:	2200      	movs	r2, #0
 8005b08:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0e:	2200      	movs	r2, #0
 8005b10:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005b16:	68b9      	ldr	r1, [r7, #8]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3328      	adds	r3, #40	; 0x28
 8005b1e:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005b24:	f7fd ff02 	bl	800392c <HAL_DMA_Start_IT>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005b2c:	7dfb      	ldrb	r3, [r7, #23]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d12f      	bne.n	8005b92 <HAL_I2C_Slave_Transmit_DMA+0x12a>
 8005b32:	e013      	b.n	8005b5c <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2228      	movs	r2, #40	; 0x28
 8005b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e02f      	b.n	8005bbc <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685a      	ldr	r2, [r3, #4]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b6a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f001 fb89 	bl	8007290 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b8c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	e014      	b.n	8005bbc <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2228      	movs	r2, #40	; 0x28
 8005b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ba6:	f043 0210 	orr.w	r2, r3, #16
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005bba:	2302      	movs	r3, #2
  }
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	ffff0000 	.word	0xffff0000
 8005bc8:	08006543 	.word	0x08006543
 8005bcc:	08007061 	.word	0x08007061
 8005bd0:	0800717d 	.word	0x0800717d

08005bd4 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b20      	cmp	r3, #32
 8005bec:	f040 809b 	bne.w	8005d26 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d002      	beq.n	8005bfc <HAL_I2C_Slave_Receive_DMA+0x28>
 8005bf6:	88fb      	ldrh	r3, [r7, #6]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d105      	bne.n	8005c08 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e08f      	b.n	8005d28 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_I2C_Slave_Receive_DMA+0x42>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e088      	b.n	8005d28 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2222      	movs	r2, #34	; 0x22
 8005c22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	4a38      	ldr	r2, [pc, #224]	; (8005d30 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4a38      	ldr	r2, [pc, #224]	; (8005d34 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005c54:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d020      	beq.n	8005ca0 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c62:	4a35      	ldr	r2, [pc, #212]	; (8005d38 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005c64:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6a:	4a34      	ldr	r2, [pc, #208]	; (8005d3c <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005c6c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	2200      	movs	r2, #0
 8005c74:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3324      	adds	r3, #36	; 0x24
 8005c88:	4619      	mov	r1, r3
 8005c8a:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005c90:	f7fd fe4c 	bl	800392c <HAL_DMA_Start_IT>
 8005c94:	4603      	mov	r3, r0
 8005c96:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d12f      	bne.n	8005cfe <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005c9e:	e013      	b.n	8005cc8 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2228      	movs	r2, #40	; 0x28
 8005ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e02f      	b.n	8005d28 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005cd6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ce0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f001 fad3 	bl	8007290 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cf8:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	e014      	b.n	8005d28 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2228      	movs	r2, #40	; 0x28
 8005d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d12:	f043 0210 	orr.w	r2, r3, #16
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e000      	b.n	8005d28 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005d26:	2302      	movs	r3, #2
  }
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	ffff0000 	.word	0xffff0000
 8005d34:	08006543 	.word	0x08006543
 8005d38:	08007137 	.word	0x08007137
 8005d3c:	0800717d 	.word	0x0800717d

08005d40 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d005      	beq.n	8005d6c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	4798      	blx	r3
  }
}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	0a1b      	lsrs	r3, r3, #8
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d010      	beq.n	8005dba <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	09db      	lsrs	r3, r3, #7
 8005d9c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00a      	beq.n	8005dba <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da8:	f043 0201 	orr.w	r2, r3, #1
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005db8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	0a9b      	lsrs	r3, r3, #10
 8005dbe:	f003 0301 	and.w	r3, r3, #1
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d010      	beq.n	8005de8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	09db      	lsrs	r3, r3, #7
 8005dca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd6:	f043 0208 	orr.w	r2, r3, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005de6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	0a5b      	lsrs	r3, r3, #9
 8005dec:	f003 0301 	and.w	r3, r3, #1
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d010      	beq.n	8005e16 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	09db      	lsrs	r3, r3, #7
 8005df8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e04:	f043 0202 	orr.w	r2, r3, #2
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e14:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f003 030b 	and.w	r3, r3, #11
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005e26:	68f9      	ldr	r1, [r7, #12]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f000 ffb3 	bl	8006d94 <I2C_ITError>
  }
}
 8005e2e:	bf00      	nop
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
 8005e92:	4613      	mov	r3, r2
 8005e94:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005eaa:	bf00      	nop
 8005eac:	370c      	adds	r7, #12
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr

08005eb6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b083      	sub	sp, #12
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005ebe:	bf00      	nop
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b083      	sub	sp, #12
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b083      	sub	sp, #12
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005efa:	bf00      	nop
 8005efc:	370c      	adds	r7, #12
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr

08005f06 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b088      	sub	sp, #32
 8005f0a:	af02      	add	r7, sp, #8
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <I2C_Master_ISR_IT+0x1e>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e114      	b.n	800614e <I2C_Master_ISR_IT+0x248>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	091b      	lsrs	r3, r3, #4
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d013      	beq.n	8005f60 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	091b      	lsrs	r3, r3, #4
 8005f3c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00d      	beq.n	8005f60 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2210      	movs	r2, #16
 8005f4a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f50:	f043 0204 	orr.w	r2, r3, #4
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f001 f812 	bl	8006f82 <I2C_Flush_TXDR>
 8005f5e:	e0e1      	b.n	8006124 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	089b      	lsrs	r3, r3, #2
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d023      	beq.n	8005fb4 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	089b      	lsrs	r3, r3, #2
 8005f70:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d01d      	beq.n	8005fb4 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f023 0304 	bic.w	r3, r3, #4
 8005f7e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fb2:	e0b7      	b.n	8006124 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	085b      	lsrs	r3, r3, #1
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01e      	beq.n	8005ffe <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	085b      	lsrs	r3, r3, #1
 8005fc4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d018      	beq.n	8005ffe <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd0:	781a      	ldrb	r2, [r3, #0]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	b29a      	uxth	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ffc:	e092      	b.n	8006124 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	09db      	lsrs	r3, r3, #7
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d05d      	beq.n	80060c6 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	099b      	lsrs	r3, r3, #6
 800600e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006012:	2b00      	cmp	r3, #0
 8006014:	d057      	beq.n	80060c6 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601a:	b29b      	uxth	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d040      	beq.n	80060a2 <I2C_Master_ISR_IT+0x19c>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006024:	2b00      	cmp	r3, #0
 8006026:	d13c      	bne.n	80060a2 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006034:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603a:	b29b      	uxth	r3, r3
 800603c:	2bff      	cmp	r3, #255	; 0xff
 800603e:	d90e      	bls.n	800605e <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	22ff      	movs	r2, #255	; 0xff
 8006044:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604a:	b2da      	uxtb	r2, r3
 800604c:	8a79      	ldrh	r1, [r7, #18]
 800604e:	2300      	movs	r3, #0
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f001 f8e8 	bl	800722c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800605c:	e032      	b.n	80060c4 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006070:	d00b      	beq.n	800608a <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006076:	b2da      	uxtb	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	8a79      	ldrh	r1, [r7, #18]
 800607e:	2000      	movs	r0, #0
 8006080:	9000      	str	r0, [sp, #0]
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f001 f8d2 	bl	800722c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006088:	e01c      	b.n	80060c4 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608e:	b2da      	uxtb	r2, r3
 8006090:	8a79      	ldrh	r1, [r7, #18]
 8006092:	2300      	movs	r3, #0
 8006094:	9300      	str	r3, [sp, #0]
 8006096:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f001 f8c6 	bl	800722c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060a0:	e010      	b.n	80060c4 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060b0:	d003      	beq.n	80060ba <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fba9 	bl	800680a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060b8:	e034      	b.n	8006124 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80060ba:	2140      	movs	r1, #64	; 0x40
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 fe69 	bl	8006d94 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060c2:	e02f      	b.n	8006124 <I2C_Master_ISR_IT+0x21e>
 80060c4:	e02e      	b.n	8006124 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	099b      	lsrs	r3, r3, #6
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d028      	beq.n	8006124 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	099b      	lsrs	r3, r3, #6
 80060d6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d022      	beq.n	8006124 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d119      	bne.n	800611c <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060f6:	d015      	beq.n	8006124 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006100:	d108      	bne.n	8006114 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685a      	ldr	r2, [r3, #4]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006110:	605a      	str	r2, [r3, #4]
 8006112:	e007      	b.n	8006124 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 fb78 	bl	800680a <I2C_ITMasterSeqCplt>
 800611a:	e003      	b.n	8006124 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800611c:	2140      	movs	r1, #64	; 0x40
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f000 fe38 	bl	8006d94 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	095b      	lsrs	r3, r3, #5
 8006128:	f003 0301 	and.w	r3, r3, #1
 800612c:	2b00      	cmp	r3, #0
 800612e:	d009      	beq.n	8006144 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	095b      	lsrs	r3, r3, #5
 8006134:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006138:	2b00      	cmp	r3, #0
 800613a:	d003      	beq.n	8006144 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800613c:	6979      	ldr	r1, [r7, #20]
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 fbfe 	bl	8006940 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b086      	sub	sp, #24
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006172:	2b01      	cmp	r3, #1
 8006174:	d101      	bne.n	800617a <I2C_Slave_ISR_IT+0x24>
 8006176:	2302      	movs	r3, #2
 8006178:	e0ec      	b.n	8006354 <I2C_Slave_ISR_IT+0x1fe>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d009      	beq.n	80061a2 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	095b      	lsrs	r3, r3, #5
 8006192:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006196:	2b00      	cmp	r3, #0
 8006198:	d003      	beq.n	80061a2 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800619a:	6939      	ldr	r1, [r7, #16]
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fc99 	bl	8006ad4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	091b      	lsrs	r3, r3, #4
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d04d      	beq.n	800624a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	091b      	lsrs	r3, r3, #4
 80061b2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d047      	beq.n	800624a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061be:	b29b      	uxth	r3, r3
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d128      	bne.n	8006216 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b28      	cmp	r3, #40	; 0x28
 80061ce:	d108      	bne.n	80061e2 <I2C_Slave_ISR_IT+0x8c>
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061d6:	d104      	bne.n	80061e2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80061d8:	6939      	ldr	r1, [r7, #16]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fd84 	bl	8006ce8 <I2C_ITListenCplt>
 80061e0:	e032      	b.n	8006248 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b29      	cmp	r3, #41	; 0x29
 80061ec:	d10e      	bne.n	800620c <I2C_Slave_ISR_IT+0xb6>
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061f4:	d00a      	beq.n	800620c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2210      	movs	r2, #16
 80061fc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 febf 	bl	8006f82 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f000 fb3d 	bl	8006884 <I2C_ITSlaveSeqCplt>
 800620a:	e01d      	b.n	8006248 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2210      	movs	r2, #16
 8006212:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006214:	e096      	b.n	8006344 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2210      	movs	r2, #16
 800621c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006222:	f043 0204 	orr.w	r2, r3, #4
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d004      	beq.n	800623a <I2C_Slave_ISR_IT+0xe4>
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006236:	f040 8085 	bne.w	8006344 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623e:	4619      	mov	r1, r3
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 fda7 	bl	8006d94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006246:	e07d      	b.n	8006344 <I2C_Slave_ISR_IT+0x1ee>
 8006248:	e07c      	b.n	8006344 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	089b      	lsrs	r3, r3, #2
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d030      	beq.n	80062b8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	089b      	lsrs	r3, r3, #2
 800625a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800625e:	2b00      	cmp	r3, #0
 8006260:	d02a      	beq.n	80062b8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006266:	b29b      	uxth	r3, r3
 8006268:	2b00      	cmp	r3, #0
 800626a:	d018      	beq.n	800629e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	1c5a      	adds	r2, r3, #1
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006288:	3b01      	subs	r3, #1
 800628a:	b29a      	uxth	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	3b01      	subs	r3, #1
 8006298:	b29a      	uxth	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d14f      	bne.n	8006348 <I2C_Slave_ISR_IT+0x1f2>
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062ae:	d04b      	beq.n	8006348 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f000 fae7 	bl	8006884 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80062b6:	e047      	b.n	8006348 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	08db      	lsrs	r3, r3, #3
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	08db      	lsrs	r3, r3, #3
 80062c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80062d0:	6939      	ldr	r1, [r7, #16]
 80062d2:	68f8      	ldr	r0, [r7, #12]
 80062d4:	f000 fa15 	bl	8006702 <I2C_ITAddrCplt>
 80062d8:	e037      	b.n	800634a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	085b      	lsrs	r3, r3, #1
 80062de:	f003 0301 	and.w	r3, r3, #1
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d031      	beq.n	800634a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d02b      	beq.n	800634a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d018      	beq.n	800632e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	781a      	ldrb	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006324:	3b01      	subs	r3, #1
 8006326:	b29a      	uxth	r2, r3
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	851a      	strh	r2, [r3, #40]	; 0x28
 800632c:	e00d      	b.n	800634a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006334:	d002      	beq.n	800633c <I2C_Slave_ISR_IT+0x1e6>
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d106      	bne.n	800634a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 faa1 	bl	8006884 <I2C_ITSlaveSeqCplt>
 8006342:	e002      	b.n	800634a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8006344:	bf00      	nop
 8006346:	e000      	b.n	800634a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8006348:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <I2C_Master_ISR_DMA+0x1a>
 8006372:	2302      	movs	r3, #2
 8006374:	e0e1      	b.n	800653a <I2C_Master_ISR_DMA+0x1de>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	091b      	lsrs	r3, r3, #4
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d017      	beq.n	80063ba <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	091b      	lsrs	r3, r3, #4
 800638e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006392:	2b00      	cmp	r3, #0
 8006394:	d011      	beq.n	80063ba <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2210      	movs	r2, #16
 800639c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a2:	f043 0204 	orr.w	r2, r3, #4
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80063aa:	2120      	movs	r1, #32
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 ff6f 	bl	8007290 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 fde5 	bl	8006f82 <I2C_Flush_TXDR>
 80063b8:	e0ba      	b.n	8006530 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	09db      	lsrs	r3, r3, #7
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d072      	beq.n	80064ac <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	099b      	lsrs	r3, r3, #6
 80063ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d06c      	beq.n	80064ac <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d04e      	beq.n	800648a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063f8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2bff      	cmp	r3, #255	; 0xff
 8006402:	d906      	bls.n	8006412 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	22ff      	movs	r2, #255	; 0xff
 8006408:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800640a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e010      	b.n	8006434 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006416:	b29a      	uxth	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006424:	d003      	beq.n	800642e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	e002      	b.n	8006434 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800642e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006432:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006438:	b2da      	uxtb	r2, r3
 800643a:	8a79      	ldrh	r1, [r7, #18]
 800643c:	2300      	movs	r3, #0
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fef2 	bl	800722c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b22      	cmp	r3, #34	; 0x22
 8006464:	d108      	bne.n	8006478 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006474:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006476:	e05b      	b.n	8006530 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006486:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006488:	e052      	b.n	8006530 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006494:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006498:	d003      	beq.n	80064a2 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f9b5 	bl	800680a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80064a0:	e046      	b.n	8006530 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80064a2:	2140      	movs	r1, #64	; 0x40
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 fc75 	bl	8006d94 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80064aa:	e041      	b.n	8006530 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	099b      	lsrs	r3, r3, #6
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d029      	beq.n	800650c <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	099b      	lsrs	r3, r3, #6
 80064bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d023      	beq.n	800650c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d119      	bne.n	8006502 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064dc:	d027      	beq.n	800652e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064e6:	d108      	bne.n	80064fa <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064f6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80064f8:	e019      	b.n	800652e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f000 f985 	bl	800680a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006500:	e015      	b.n	800652e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006502:	2140      	movs	r1, #64	; 0x40
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	f000 fc45 	bl	8006d94 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800650a:	e010      	b.n	800652e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	095b      	lsrs	r3, r3, #5
 800651c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fa0a 	bl	8006940 <I2C_ITMasterCplt>
 800652c:	e000      	b.n	8006530 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800652e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b088      	sub	sp, #32
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
 800654a:	60b9      	str	r1, [r7, #8]
 800654c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006554:	2300      	movs	r3, #0
 8006556:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <I2C_Slave_ISR_DMA+0x24>
 8006562:	2302      	movs	r3, #2
 8006564:	e0c9      	b.n	80066fa <I2C_Slave_ISR_DMA+0x1b8>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	095b      	lsrs	r3, r3, #5
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	095b      	lsrs	r3, r3, #5
 800657e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006586:	68b9      	ldr	r1, [r7, #8]
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 faa3 	bl	8006ad4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	091b      	lsrs	r3, r3, #4
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 809a 	beq.w	80066d0 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	091b      	lsrs	r3, r3, #4
 80065a0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 8093 	beq.w	80066d0 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	0b9b      	lsrs	r3, r3, #14
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d105      	bne.n	80065c2 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	0bdb      	lsrs	r3, r3, #15
 80065ba:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d07f      	beq.n	80066c2 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00d      	beq.n	80065e6 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	0bdb      	lsrs	r3, r3, #15
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d007      	beq.n	80065e6 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80065e2:	2301      	movs	r3, #1
 80065e4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00d      	beq.n	800660a <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	0b9b      	lsrs	r3, r3, #14
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8006606:	2301      	movs	r3, #1
 8006608:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d128      	bne.n	8006662 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b28      	cmp	r3, #40	; 0x28
 800661a:	d108      	bne.n	800662e <I2C_Slave_ISR_DMA+0xec>
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006622:	d104      	bne.n	800662e <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fb5e 	bl	8006ce8 <I2C_ITListenCplt>
 800662c:	e048      	b.n	80066c0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b29      	cmp	r3, #41	; 0x29
 8006638:	d10e      	bne.n	8006658 <I2C_Slave_ISR_DMA+0x116>
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006640:	d00a      	beq.n	8006658 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2210      	movs	r2, #16
 8006648:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 fc99 	bl	8006f82 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f917 	bl	8006884 <I2C_ITSlaveSeqCplt>
 8006656:	e033      	b.n	80066c0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2210      	movs	r2, #16
 800665e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006660:	e034      	b.n	80066cc <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2210      	movs	r2, #16
 8006668:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	f043 0204 	orr.w	r2, r3, #4
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800667c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <I2C_Slave_ISR_DMA+0x14a>
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800668a:	d11f      	bne.n	80066cc <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800668c:	7dfb      	ldrb	r3, [r7, #23]
 800668e:	2b21      	cmp	r3, #33	; 0x21
 8006690:	d002      	beq.n	8006698 <I2C_Slave_ISR_DMA+0x156>
 8006692:	7dfb      	ldrb	r3, [r7, #23]
 8006694:	2b29      	cmp	r3, #41	; 0x29
 8006696:	d103      	bne.n	80066a0 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2221      	movs	r2, #33	; 0x21
 800669c:	631a      	str	r2, [r3, #48]	; 0x30
 800669e:	e008      	b.n	80066b2 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80066a0:	7dfb      	ldrb	r3, [r7, #23]
 80066a2:	2b22      	cmp	r3, #34	; 0x22
 80066a4:	d002      	beq.n	80066ac <I2C_Slave_ISR_DMA+0x16a>
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	2b2a      	cmp	r3, #42	; 0x2a
 80066aa:	d102      	bne.n	80066b2 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2222      	movs	r2, #34	; 0x22
 80066b0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b6:	4619      	mov	r1, r3
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 fb6b 	bl	8006d94 <I2C_ITError>
      if (treatdmanack == 1U)
 80066be:	e005      	b.n	80066cc <I2C_Slave_ISR_DMA+0x18a>
 80066c0:	e004      	b.n	80066cc <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2210      	movs	r2, #16
 80066c8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80066ca:	e011      	b.n	80066f0 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80066cc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80066ce:	e00f      	b.n	80066f0 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	08db      	lsrs	r3, r3, #3
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	08db      	lsrs	r3, r3, #3
 80066e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f000 f809 	bl	8006702 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3720      	adds	r7, #32
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006712:	b2db      	uxtb	r3, r3
 8006714:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006718:	2b28      	cmp	r3, #40	; 0x28
 800671a:	d16a      	bne.n	80067f2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	0c1b      	lsrs	r3, r3, #16
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	0c1b      	lsrs	r3, r3, #16
 8006734:	b29b      	uxth	r3, r3
 8006736:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800673a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006748:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	b29b      	uxth	r3, r3
 8006752:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006756:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	2b02      	cmp	r3, #2
 800675e:	d138      	bne.n	80067d2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006760:	897b      	ldrh	r3, [r7, #10]
 8006762:	09db      	lsrs	r3, r3, #7
 8006764:	b29a      	uxth	r2, r3
 8006766:	89bb      	ldrh	r3, [r7, #12]
 8006768:	4053      	eors	r3, r2
 800676a:	b29b      	uxth	r3, r3
 800676c:	f003 0306 	and.w	r3, r3, #6
 8006770:	2b00      	cmp	r3, #0
 8006772:	d11c      	bne.n	80067ae <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006774:	897b      	ldrh	r3, [r7, #10]
 8006776:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006786:	2b02      	cmp	r3, #2
 8006788:	d13b      	bne.n	8006802 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2208      	movs	r2, #8
 8006796:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80067a0:	89ba      	ldrh	r2, [r7, #12]
 80067a2:	7bfb      	ldrb	r3, [r7, #15]
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff fb6d 	bl	8005e86 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80067ac:	e029      	b.n	8006802 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80067ae:	893b      	ldrh	r3, [r7, #8]
 80067b0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80067b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fdd4 	bl	8007364 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80067c4:	89ba      	ldrh	r2, [r7, #12]
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fb5b 	bl	8005e86 <HAL_I2C_AddrCallback>
}
 80067d0:	e017      	b.n	8006802 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80067d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fdc4 	bl	8007364 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80067e4:	89ba      	ldrh	r2, [r7, #12]
 80067e6:	7bfb      	ldrb	r3, [r7, #15]
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff fb4b 	bl	8005e86 <HAL_I2C_AddrCallback>
}
 80067f0:	e007      	b.n	8006802 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2208      	movs	r2, #8
 80067f8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b21      	cmp	r3, #33	; 0x21
 8006824:	d115      	bne.n	8006852 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2220      	movs	r2, #32
 800682a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2211      	movs	r2, #17
 8006832:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800683a:	2101      	movs	r1, #1
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fd91 	bl	8007364 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7ff faf3 	bl	8005e36 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006850:	e014      	b.n	800687c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2220      	movs	r2, #32
 8006856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2212      	movs	r2, #18
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006866:	2102      	movs	r1, #2
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 fd7b 	bl	8007364 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7ff fae7 	bl	8005e4a <HAL_I2C_MasterRxCpltCallback>
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	0b9b      	lsrs	r3, r3, #14
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d008      	beq.n	80068ba <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e00d      	b.n	80068d6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	0bdb      	lsrs	r3, r3, #15
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d007      	beq.n	80068d6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068d4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b29      	cmp	r3, #41	; 0x29
 80068e0:	d112      	bne.n	8006908 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2228      	movs	r2, #40	; 0x28
 80068e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2221      	movs	r2, #33	; 0x21
 80068ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80068f0:	2101      	movs	r1, #1
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fd36 	bl	8007364 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff faac 	bl	8005e5e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006906:	e017      	b.n	8006938 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b2a      	cmp	r3, #42	; 0x2a
 8006912:	d111      	bne.n	8006938 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2228      	movs	r2, #40	; 0x28
 8006918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2222      	movs	r2, #34	; 0x22
 8006920:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006922:	2102      	movs	r1, #2
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fd1d 	bl	8007364 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f7ff fa9d 	bl	8005e72 <HAL_I2C_SlaveRxCpltCallback>
}
 8006938:	bf00      	nop
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2220      	movs	r2, #32
 8006954:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b21      	cmp	r3, #33	; 0x21
 8006960:	d107      	bne.n	8006972 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006962:	2101      	movs	r1, #1
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fcfd 	bl	8007364 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2211      	movs	r2, #17
 800696e:	631a      	str	r2, [r3, #48]	; 0x30
 8006970:	e00c      	b.n	800698c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b22      	cmp	r3, #34	; 0x22
 800697c:	d106      	bne.n	800698c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800697e:	2102      	movs	r1, #2
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 fcef 	bl	8007364 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2212      	movs	r2, #18
 800698a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6859      	ldr	r1, [r3, #4]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4b4d      	ldr	r3, [pc, #308]	; (8006acc <I2C_ITMasterCplt+0x18c>)
 8006998:	400b      	ands	r3, r1
 800699a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a4a      	ldr	r2, [pc, #296]	; (8006ad0 <I2C_ITMasterCplt+0x190>)
 80069a6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	091b      	lsrs	r3, r3, #4
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d009      	beq.n	80069c8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2210      	movs	r2, #16
 80069ba:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c0:	f043 0204 	orr.w	r2, r3, #4
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	2b60      	cmp	r3, #96	; 0x60
 80069d2:	d10b      	bne.n	80069ec <I2C_ITMasterCplt+0xac>
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	089b      	lsrs	r3, r3, #2
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80069ea:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fac8 	bl	8006f82 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b60      	cmp	r3, #96	; 0x60
 8006a02:	d002      	beq.n	8006a0a <I2C_ITMasterCplt+0xca>
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d006      	beq.n	8006a18 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f000 f9bf 	bl	8006d94 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a16:	e054      	b.n	8006ac2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	2b21      	cmp	r3, #33	; 0x21
 8006a22:	d124      	bne.n	8006a6e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b40      	cmp	r3, #64	; 0x40
 8006a3c:	d10b      	bne.n	8006a56 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7ff fa31 	bl	8005eb6 <HAL_I2C_MemTxCpltCallback>
}
 8006a54:	e035      	b.n	8006ac2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff f9e5 	bl	8005e36 <HAL_I2C_MasterTxCpltCallback>
}
 8006a6c:	e029      	b.n	8006ac2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b22      	cmp	r3, #34	; 0x22
 8006a78:	d123      	bne.n	8006ac2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b40      	cmp	r3, #64	; 0x40
 8006a92:	d10b      	bne.n	8006aac <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f7ff fa10 	bl	8005eca <HAL_I2C_MemRxCpltCallback>
}
 8006aaa:	e00a      	b.n	8006ac2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff f9c4 	bl	8005e4a <HAL_I2C_MasterRxCpltCallback>
}
 8006ac2:	bf00      	nop
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	fe00e800 	.word	0xfe00e800
 8006ad0:	ffff0000 	.word	0xffff0000

08006ad4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006af0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2220      	movs	r2, #32
 8006af8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006afa:	7bfb      	ldrb	r3, [r7, #15]
 8006afc:	2b21      	cmp	r3, #33	; 0x21
 8006afe:	d002      	beq.n	8006b06 <I2C_ITSlaveCplt+0x32>
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	2b29      	cmp	r3, #41	; 0x29
 8006b04:	d108      	bne.n	8006b18 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006b06:	f248 0101 	movw	r1, #32769	; 0x8001
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fc2a 	bl	8007364 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2221      	movs	r2, #33	; 0x21
 8006b14:	631a      	str	r2, [r3, #48]	; 0x30
 8006b16:	e00d      	b.n	8006b34 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2b22      	cmp	r3, #34	; 0x22
 8006b1c:	d002      	beq.n	8006b24 <I2C_ITSlaveCplt+0x50>
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	2b2a      	cmp	r3, #42	; 0x2a
 8006b22:	d107      	bne.n	8006b34 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006b24:	f248 0102 	movw	r1, #32770	; 0x8002
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fc1b 	bl	8007364 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2222      	movs	r2, #34	; 0x22
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b42:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6859      	ldr	r1, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	4b64      	ldr	r3, [pc, #400]	; (8006ce0 <I2C_ITSlaveCplt+0x20c>)
 8006b50:	400b      	ands	r3, r1
 8006b52:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fa14 	bl	8006f82 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	0b9b      	lsrs	r3, r3, #14
 8006b5e:	f003 0301 	and.w	r3, r3, #1
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d013      	beq.n	8006b8e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d020      	beq.n	8006bc0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b8c:	e018      	b.n	8006bc0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	0bdb      	lsrs	r3, r3, #15
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d012      	beq.n	8006bc0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ba8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d006      	beq.n	8006bc0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	089b      	lsrs	r3, r3, #2
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d020      	beq.n	8006c0e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f023 0304 	bic.w	r3, r3, #4
 8006bd2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	1c5a      	adds	r2, r3, #1
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00c      	beq.n	8006c0e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1c:	f043 0204 	orr.w	r2, r3, #4
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d010      	beq.n	8006c5c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 f8a7 	bl	8006d94 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b28      	cmp	r3, #40	; 0x28
 8006c50:	d141      	bne.n	8006cd6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006c52:	6979      	ldr	r1, [r7, #20]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f847 	bl	8006ce8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006c5a:	e03c      	b.n	8006cd6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c64:	d014      	beq.n	8006c90 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7ff fe0c 	bl	8006884 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a1d      	ldr	r2, [pc, #116]	; (8006ce4 <I2C_ITSlaveCplt+0x210>)
 8006c70:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2220      	movs	r2, #32
 8006c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f7ff f90a 	bl	8005ea2 <HAL_I2C_ListenCpltCallback>
}
 8006c8e:	e022      	b.n	8006cd6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b22      	cmp	r3, #34	; 0x22
 8006c9a:	d10e      	bne.n	8006cba <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2220      	movs	r2, #32
 8006ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff f8dd 	bl	8005e72 <HAL_I2C_SlaveRxCpltCallback>
}
 8006cb8:	e00d      	b.n	8006cd6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7ff f8c4 	bl	8005e5e <HAL_I2C_SlaveTxCpltCallback>
}
 8006cd6:	bf00      	nop
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	fe00e800 	.word	0xfe00e800
 8006ce4:	ffff0000 	.word	0xffff0000

08006ce8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a26      	ldr	r2, [pc, #152]	; (8006d90 <I2C_ITListenCplt+0xa8>)
 8006cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	089b      	lsrs	r3, r3, #2
 8006d18:	f003 0301 	and.w	r3, r3, #1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d022      	beq.n	8006d66 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d012      	beq.n	8006d66 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d44:	3b01      	subs	r3, #1
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3b01      	subs	r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5e:	f043 0204 	orr.w	r2, r3, #4
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006d66:	f248 0103 	movw	r1, #32771	; 0x8003
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 fafa 	bl	8007364 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2210      	movs	r2, #16
 8006d76:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff f88e 	bl	8005ea2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	ffff0000 	.word	0xffff0000

08006d94 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006da4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a5d      	ldr	r2, [pc, #372]	; (8006f28 <I2C_ITError+0x194>)
 8006db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	2b28      	cmp	r3, #40	; 0x28
 8006dca:	d005      	beq.n	8006dd8 <I2C_ITError+0x44>
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	2b29      	cmp	r3, #41	; 0x29
 8006dd0:	d002      	beq.n	8006dd8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd6:	d10b      	bne.n	8006df0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006dd8:	2103      	movs	r1, #3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fac2 	bl	8007364 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2228      	movs	r2, #40	; 0x28
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a50      	ldr	r2, [pc, #320]	; (8006f2c <I2C_ITError+0x198>)
 8006dec:	635a      	str	r2, [r3, #52]	; 0x34
 8006dee:	e011      	b.n	8006e14 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006df0:	f248 0103 	movw	r1, #32771	; 0x8003
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fab5 	bl	8007364 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b60      	cmp	r3, #96	; 0x60
 8006e04:	d003      	beq.n	8006e0e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2220      	movs	r2, #32
 8006e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e18:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d039      	beq.n	8006e96 <I2C_ITError+0x102>
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b11      	cmp	r3, #17
 8006e26:	d002      	beq.n	8006e2e <I2C_ITError+0x9a>
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b21      	cmp	r3, #33	; 0x21
 8006e2c:	d133      	bne.n	8006e96 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e3c:	d107      	bne.n	8006e4e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e4c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fc ffe6 	bl	8003e24 <HAL_DMA_GetState>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d017      	beq.n	8006e8e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	4a33      	ldr	r2, [pc, #204]	; (8006f30 <I2C_ITError+0x19c>)
 8006e64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fc fe2a 	bl	8003acc <HAL_DMA_Abort_IT>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d04d      	beq.n	8006f1a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e8c:	e045      	b.n	8006f1a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f850 	bl	8006f34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006e94:	e041      	b.n	8006f1a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d039      	beq.n	8006f12 <I2C_ITError+0x17e>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b12      	cmp	r3, #18
 8006ea2:	d002      	beq.n	8006eaa <I2C_ITError+0x116>
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	2b22      	cmp	r3, #34	; 0x22
 8006ea8:	d133      	bne.n	8006f12 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb8:	d107      	bne.n	8006eca <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ec8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fc ffa8 	bl	8003e24 <HAL_DMA_GetState>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d017      	beq.n	8006f0a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ede:	4a14      	ldr	r2, [pc, #80]	; (8006f30 <I2C_ITError+0x19c>)
 8006ee0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fc fdec 	bl	8003acc <HAL_DMA_Abort_IT>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d011      	beq.n	8006f1e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f08:	e009      	b.n	8006f1e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f812 	bl	8006f34 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f10:	e005      	b.n	8006f1e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f80e 	bl	8006f34 <I2C_TreatErrorCallback>
  }
}
 8006f18:	e002      	b.n	8006f20 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f1a:	bf00      	nop
 8006f1c:	e000      	b.n	8006f20 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006f1e:	bf00      	nop
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	ffff0000 	.word	0xffff0000
 8006f2c:	08006157 	.word	0x08006157
 8006f30:	080071f1 	.word	0x080071f1

08006f34 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b60      	cmp	r3, #96	; 0x60
 8006f46:	d10e      	bne.n	8006f66 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7fe ffc7 	bl	8005ef2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f64:	e009      	b.n	8006f7a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7fe ffb2 	bl	8005ede <HAL_I2C_ErrorCallback>
}
 8006f7a:	bf00      	nop
 8006f7c:	3708      	adds	r7, #8
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d103      	bne.n	8006fa0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d007      	beq.n	8006fbe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	699a      	ldr	r2, [r3, #24]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f042 0201 	orr.w	r2, r2, #1
 8006fbc:	619a      	str	r2, [r3, #24]
  }
}
 8006fbe:	bf00      	nop
 8006fc0:	370c      	adds	r7, #12
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr

08006fca <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b084      	sub	sp, #16
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fe6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d104      	bne.n	8006ffc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006ff2:	2120      	movs	r1, #32
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 f94b 	bl	8007290 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8006ffa:	e02d      	b.n	8007058 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007004:	441a      	add	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700e:	b29b      	uxth	r3, r3
 8007010:	2bff      	cmp	r3, #255	; 0xff
 8007012:	d903      	bls.n	800701c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	22ff      	movs	r2, #255	; 0xff
 8007018:	851a      	strh	r2, [r3, #40]	; 0x28
 800701a:	e004      	b.n	8007026 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	4619      	mov	r1, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3328      	adds	r3, #40	; 0x28
 8007036:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800703c:	f7fc fc76 	bl	800392c <HAL_DMA_Start_IT>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007046:	2110      	movs	r1, #16
 8007048:	68f8      	ldr	r0, [r7, #12]
 800704a:	f7ff fea3 	bl	8006d94 <I2C_ITError>
}
 800704e:	e003      	b.n	8007058 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007050:	2140      	movs	r1, #64	; 0x40
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f000 f91c 	bl	8007290 <I2C_Enable_IRQ>
}
 8007058:	bf00      	nop
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007072:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800707a:	d002      	beq.n	8007082 <I2C_DMASlaveTransmitCplt+0x22>
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10a      	bne.n	8007098 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007090:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff fbf6 	bl	8006884 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070bc:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d104      	bne.n	80070d2 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80070c8:	2120      	movs	r1, #32
 80070ca:	68f8      	ldr	r0, [r7, #12]
 80070cc:	f000 f8e0 	bl	8007290 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80070d0:	e02d      	b.n	800712e <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80070da:	441a      	add	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	2bff      	cmp	r3, #255	; 0xff
 80070e8:	d903      	bls.n	80070f2 <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	22ff      	movs	r2, #255	; 0xff
 80070ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80070f0:	e004      	b.n	80070fc <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3324      	adds	r3, #36	; 0x24
 8007106:	4619      	mov	r1, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007112:	f7fc fc0b 	bl	800392c <HAL_DMA_Start_IT>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800711c:	2110      	movs	r1, #16
 800711e:	68f8      	ldr	r0, [r7, #12]
 8007120:	f7ff fe38 	bl	8006d94 <I2C_ITError>
}
 8007124:	e003      	b.n	800712e <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007126:	2140      	movs	r1, #64	; 0x40
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 f8b1 	bl	8007290 <I2C_Enable_IRQ>
}
 800712e:	bf00      	nop
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b084      	sub	sp, #16
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007148:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10e      	bne.n	8007174 <I2C_DMASlaveReceiveCplt+0x3e>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800715c:	d00a      	beq.n	8007174 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800716c:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f7ff fb88 	bl	8006884 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007192:	2b00      	cmp	r3, #0
 8007194:	d007      	beq.n	80071a6 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80071a2:	2301      	movs	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d007      	beq.n	80071be <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80071ba:	2301      	movs	r3, #1
 80071bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fc fe3e 	bl	8003e40 <HAL_DMA_GetError>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d00e      	beq.n	80071e8 <I2C_DMAError+0x6c>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071de:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80071e0:	2110      	movs	r1, #16
 80071e2:	68b8      	ldr	r0, [r7, #8]
 80071e4:	f7ff fdd6 	bl	8006d94 <I2C_ITError>
  }
}
 80071e8:	bf00      	nop
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	2200      	movs	r2, #0
 800720c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721a:	2200      	movs	r2, #0
 800721c:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7ff fe88 	bl	8006f34 <I2C_TreatErrorCallback>
}
 8007224:	bf00      	nop
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800722c:	b480      	push	{r7}
 800722e:	b087      	sub	sp, #28
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	607b      	str	r3, [r7, #4]
 8007236:	460b      	mov	r3, r1
 8007238:	817b      	strh	r3, [r7, #10]
 800723a:	4613      	mov	r3, r2
 800723c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800723e:	897b      	ldrh	r3, [r7, #10]
 8007240:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007244:	7a7b      	ldrb	r3, [r7, #9]
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800724c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	4313      	orrs	r3, r2
 8007256:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800725a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	6a3b      	ldr	r3, [r7, #32]
 8007264:	0d5b      	lsrs	r3, r3, #21
 8007266:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800726a:	4b08      	ldr	r3, [pc, #32]	; (800728c <I2C_TransferConfig+0x60>)
 800726c:	430b      	orrs	r3, r1
 800726e:	43db      	mvns	r3, r3
 8007270:	ea02 0103 	and.w	r1, r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	430a      	orrs	r2, r1
 800727c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800727e:	bf00      	nop
 8007280:	371c      	adds	r7, #28
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	03ff63ff 	.word	0x03ff63ff

08007290 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800729c:	2300      	movs	r3, #0
 800729e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a4:	4a2d      	ldr	r2, [pc, #180]	; (800735c <I2C_Enable_IRQ+0xcc>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80072ae:	4a2c      	ldr	r2, [pc, #176]	; (8007360 <I2C_Enable_IRQ+0xd0>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d11d      	bne.n	80072f0 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80072b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	da03      	bge.n	80072c4 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80072c2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80072c4:	887b      	ldrh	r3, [r7, #2]
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	d103      	bne.n	80072d2 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80072d0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80072d2:	887b      	ldrh	r3, [r7, #2]
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d103      	bne.n	80072e0 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80072de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80072e0:	887b      	ldrh	r3, [r7, #2]
 80072e2:	2b40      	cmp	r3, #64	; 0x40
 80072e4:	d12c      	bne.n	8007340 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80072ee:	e027      	b.n	8007340 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80072f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	da03      	bge.n	8007300 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80072fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007300:	887b      	ldrh	r3, [r7, #2]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007310:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007312:	887b      	ldrh	r3, [r7, #2]
 8007314:	f003 0302 	and.w	r3, r3, #2
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007322:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007324:	887b      	ldrh	r3, [r7, #2]
 8007326:	2b10      	cmp	r3, #16
 8007328:	d103      	bne.n	8007332 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007330:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007332:	887b      	ldrh	r3, [r7, #2]
 8007334:	2b20      	cmp	r3, #32
 8007336:	d103      	bne.n	8007340 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f043 0320 	orr.w	r3, r3, #32
 800733e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6819      	ldr	r1, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	430a      	orrs	r2, r1
 800734e:	601a      	str	r2, [r3, #0]
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	0800635d 	.word	0x0800635d
 8007360:	08006543 	.word	0x08006543

08007364 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007374:	887b      	ldrh	r3, [r7, #2]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00f      	beq.n	800739e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007384:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800738c:	b2db      	uxtb	r3, r3
 800738e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007392:	2b28      	cmp	r3, #40	; 0x28
 8007394:	d003      	beq.n	800739e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800739c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800739e:	887b      	ldrh	r3, [r7, #2]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00f      	beq.n	80073c8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80073ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80073bc:	2b28      	cmp	r3, #40	; 0x28
 80073be:	d003      	beq.n	80073c8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80073c6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80073c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	da03      	bge.n	80073d8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80073d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80073d8:	887b      	ldrh	r3, [r7, #2]
 80073da:	2b10      	cmp	r3, #16
 80073dc:	d103      	bne.n	80073e6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80073e4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80073e6:	887b      	ldrh	r3, [r7, #2]
 80073e8:	2b20      	cmp	r3, #32
 80073ea:	d103      	bne.n	80073f4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f043 0320 	orr.w	r3, r3, #32
 80073f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80073f4:	887b      	ldrh	r3, [r7, #2]
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	d103      	bne.n	8007402 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007400:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6819      	ldr	r1, [r3, #0]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	43da      	mvns	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	400a      	ands	r2, r1
 8007412:	601a      	str	r2, [r3, #0]
}
 8007414:	bf00      	nop
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007430:	b2db      	uxtb	r3, r3
 8007432:	2b20      	cmp	r3, #32
 8007434:	d138      	bne.n	80074a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007440:	2302      	movs	r3, #2
 8007442:	e032      	b.n	80074aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2224      	movs	r2, #36	; 0x24
 8007450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f022 0201 	bic.w	r2, r2, #1
 8007462:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007472:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6819      	ldr	r1, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	430a      	orrs	r2, r1
 8007482:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0201 	orr.w	r2, r2, #1
 8007492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2220      	movs	r2, #32
 8007498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074a4:	2300      	movs	r3, #0
 80074a6:	e000      	b.n	80074aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074a8:	2302      	movs	r3, #2
  }
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074c6:	b2db      	uxtb	r3, r3
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d139      	bne.n	8007540 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e033      	b.n	8007542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2224      	movs	r2, #36	; 0x24
 80074e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0201 	bic.w	r2, r2, #1
 80074f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007508:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	021b      	lsls	r3, r3, #8
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f042 0201 	orr.w	r2, r2, #1
 800752a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	e000      	b.n	8007542 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007540:	2302      	movs	r3, #2
  }
}
 8007542:	4618      	mov	r0, r3
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800754e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007550:	b08f      	sub	sp, #60	; 0x3c
 8007552:	af0a      	add	r7, sp, #40	; 0x28
 8007554:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e116      	b.n	800778e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d106      	bne.n	8007580 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7fa fdc8 	bl	8002110 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2203      	movs	r2, #3
 8007584:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007590:	2b00      	cmp	r3, #0
 8007592:	d102      	bne.n	800759a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4618      	mov	r0, r3
 80075a0:	f004 f850 	bl	800b644 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	603b      	str	r3, [r7, #0]
 80075aa:	687e      	ldr	r6, [r7, #4]
 80075ac:	466d      	mov	r5, sp
 80075ae:	f106 0410 	add.w	r4, r6, #16
 80075b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80075b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80075ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80075be:	e885 0003 	stmia.w	r5, {r0, r1}
 80075c2:	1d33      	adds	r3, r6, #4
 80075c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80075c6:	6838      	ldr	r0, [r7, #0]
 80075c8:	f003 ffe4 	bl	800b594 <USB_CoreInit>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d005      	beq.n	80075de <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2202      	movs	r2, #2
 80075d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e0d7      	b.n	800778e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2100      	movs	r1, #0
 80075e4:	4618      	mov	r0, r3
 80075e6:	f004 f83e 	bl	800b666 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80075ea:	2300      	movs	r3, #0
 80075ec:	73fb      	strb	r3, [r7, #15]
 80075ee:	e04a      	b.n	8007686 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80075f0:	7bfa      	ldrb	r2, [r7, #15]
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	4613      	mov	r3, r2
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	333d      	adds	r3, #61	; 0x3d
 8007600:	2201      	movs	r2, #1
 8007602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007604:	7bfa      	ldrb	r2, [r7, #15]
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	4613      	mov	r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	4413      	add	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	440b      	add	r3, r1
 8007612:	333c      	adds	r3, #60	; 0x3c
 8007614:	7bfa      	ldrb	r2, [r7, #15]
 8007616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007618:	7bfa      	ldrb	r2, [r7, #15]
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	b298      	uxth	r0, r3
 800761e:	6879      	ldr	r1, [r7, #4]
 8007620:	4613      	mov	r3, r2
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	3344      	adds	r3, #68	; 0x44
 800762c:	4602      	mov	r2, r0
 800762e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007630:	7bfa      	ldrb	r2, [r7, #15]
 8007632:	6879      	ldr	r1, [r7, #4]
 8007634:	4613      	mov	r3, r2
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	440b      	add	r3, r1
 800763e:	3340      	adds	r3, #64	; 0x40
 8007640:	2200      	movs	r2, #0
 8007642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007644:	7bfa      	ldrb	r2, [r7, #15]
 8007646:	6879      	ldr	r1, [r7, #4]
 8007648:	4613      	mov	r3, r2
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	440b      	add	r3, r1
 8007652:	3348      	adds	r3, #72	; 0x48
 8007654:	2200      	movs	r2, #0
 8007656:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007658:	7bfa      	ldrb	r2, [r7, #15]
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	4613      	mov	r3, r2
 800765e:	00db      	lsls	r3, r3, #3
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	440b      	add	r3, r1
 8007666:	334c      	adds	r3, #76	; 0x4c
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800766c:	7bfa      	ldrb	r2, [r7, #15]
 800766e:	6879      	ldr	r1, [r7, #4]
 8007670:	4613      	mov	r3, r2
 8007672:	00db      	lsls	r3, r3, #3
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	440b      	add	r3, r1
 800767a:	3354      	adds	r3, #84	; 0x54
 800767c:	2200      	movs	r2, #0
 800767e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	3301      	adds	r3, #1
 8007684:	73fb      	strb	r3, [r7, #15]
 8007686:	7bfa      	ldrb	r2, [r7, #15]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	429a      	cmp	r2, r3
 800768e:	d3af      	bcc.n	80075f0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007690:	2300      	movs	r3, #0
 8007692:	73fb      	strb	r3, [r7, #15]
 8007694:	e044      	b.n	8007720 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007696:	7bfa      	ldrb	r2, [r7, #15]
 8007698:	6879      	ldr	r1, [r7, #4]
 800769a:	4613      	mov	r3, r2
 800769c:	00db      	lsls	r3, r3, #3
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	440b      	add	r3, r1
 80076a4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80076a8:	2200      	movs	r2, #0
 80076aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80076ac:	7bfa      	ldrb	r2, [r7, #15]
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	4413      	add	r3, r2
 80076b6:	009b      	lsls	r3, r3, #2
 80076b8:	440b      	add	r3, r1
 80076ba:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80076be:	7bfa      	ldrb	r2, [r7, #15]
 80076c0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80076c2:	7bfa      	ldrb	r2, [r7, #15]
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	4613      	mov	r3, r2
 80076c8:	00db      	lsls	r3, r3, #3
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	440b      	add	r3, r1
 80076d0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80076d4:	2200      	movs	r2, #0
 80076d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80076d8:	7bfa      	ldrb	r2, [r7, #15]
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	4613      	mov	r3, r2
 80076de:	00db      	lsls	r3, r3, #3
 80076e0:	4413      	add	r3, r2
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	440b      	add	r3, r1
 80076e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80076ee:	7bfa      	ldrb	r2, [r7, #15]
 80076f0:	6879      	ldr	r1, [r7, #4]
 80076f2:	4613      	mov	r3, r2
 80076f4:	00db      	lsls	r3, r3, #3
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	440b      	add	r3, r1
 80076fc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007700:	2200      	movs	r2, #0
 8007702:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007704:	7bfa      	ldrb	r2, [r7, #15]
 8007706:	6879      	ldr	r1, [r7, #4]
 8007708:	4613      	mov	r3, r2
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	4413      	add	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	440b      	add	r3, r1
 8007712:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800771a:	7bfb      	ldrb	r3, [r7, #15]
 800771c:	3301      	adds	r3, #1
 800771e:	73fb      	strb	r3, [r7, #15]
 8007720:	7bfa      	ldrb	r2, [r7, #15]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	d3b5      	bcc.n	8007696 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	603b      	str	r3, [r7, #0]
 8007730:	687e      	ldr	r6, [r7, #4]
 8007732:	466d      	mov	r5, sp
 8007734:	f106 0410 	add.w	r4, r6, #16
 8007738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800773a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800773c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800773e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007740:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007744:	e885 0003 	stmia.w	r5, {r0, r1}
 8007748:	1d33      	adds	r3, r6, #4
 800774a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800774c:	6838      	ldr	r0, [r7, #0]
 800774e:	f003 ffd7 	bl	800b700 <USB_DevInit>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e014      	b.n	800778e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007778:	2b01      	cmp	r3, #1
 800777a:	d102      	bne.n	8007782 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f80b 	bl	8007798 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4618      	mov	r0, r3
 8007788:	f004 f995 	bl	800bab6 <USB_DevDisconnect>

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007798 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077c6:	4b05      	ldr	r3, [pc, #20]	; (80077dc <HAL_PCDEx_ActivateLPM+0x44>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	10000003 	.word	0x10000003

080077e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077e4:	4b05      	ldr	r3, [pc, #20]	; (80077fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a04      	ldr	r2, [pc, #16]	; (80077fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077ee:	6013      	str	r3, [r2, #0]
}
 80077f0:	bf00      	nop
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40007000 	.word	0x40007000

08007800 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007808:	2300      	movs	r3, #0
 800780a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e291      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	f000 8087 	beq.w	8007932 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007824:	4b96      	ldr	r3, [pc, #600]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	f003 030c 	and.w	r3, r3, #12
 800782c:	2b04      	cmp	r3, #4
 800782e:	d00c      	beq.n	800784a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007830:	4b93      	ldr	r3, [pc, #588]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f003 030c 	and.w	r3, r3, #12
 8007838:	2b08      	cmp	r3, #8
 800783a:	d112      	bne.n	8007862 <HAL_RCC_OscConfig+0x62>
 800783c:	4b90      	ldr	r3, [pc, #576]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007848:	d10b      	bne.n	8007862 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800784a:	4b8d      	ldr	r3, [pc, #564]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007852:	2b00      	cmp	r3, #0
 8007854:	d06c      	beq.n	8007930 <HAL_RCC_OscConfig+0x130>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d168      	bne.n	8007930 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e26b      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800786a:	d106      	bne.n	800787a <HAL_RCC_OscConfig+0x7a>
 800786c:	4b84      	ldr	r3, [pc, #528]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a83      	ldr	r2, [pc, #524]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	e02e      	b.n	80078d8 <HAL_RCC_OscConfig+0xd8>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10c      	bne.n	800789c <HAL_RCC_OscConfig+0x9c>
 8007882:	4b7f      	ldr	r3, [pc, #508]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a7e      	ldr	r2, [pc, #504]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	4b7c      	ldr	r3, [pc, #496]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a7b      	ldr	r2, [pc, #492]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	e01d      	b.n	80078d8 <HAL_RCC_OscConfig+0xd8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078a4:	d10c      	bne.n	80078c0 <HAL_RCC_OscConfig+0xc0>
 80078a6:	4b76      	ldr	r3, [pc, #472]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a75      	ldr	r2, [pc, #468]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078b0:	6013      	str	r3, [r2, #0]
 80078b2:	4b73      	ldr	r3, [pc, #460]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a72      	ldr	r2, [pc, #456]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	e00b      	b.n	80078d8 <HAL_RCC_OscConfig+0xd8>
 80078c0:	4b6f      	ldr	r3, [pc, #444]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a6e      	ldr	r2, [pc, #440]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	4b6c      	ldr	r3, [pc, #432]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a6b      	ldr	r2, [pc, #428]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d013      	beq.n	8007908 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e0:	f7fb f81e 	bl	8002920 <HAL_GetTick>
 80078e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078e8:	f7fb f81a 	bl	8002920 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b64      	cmp	r3, #100	; 0x64
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e21f      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078fa:	4b61      	ldr	r3, [pc, #388]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0f0      	beq.n	80078e8 <HAL_RCC_OscConfig+0xe8>
 8007906:	e014      	b.n	8007932 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007908:	f7fb f80a 	bl	8002920 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007910:	f7fb f806 	bl	8002920 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b64      	cmp	r3, #100	; 0x64
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e20b      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007922:	4b57      	ldr	r3, [pc, #348]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f0      	bne.n	8007910 <HAL_RCC_OscConfig+0x110>
 800792e:	e000      	b.n	8007932 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0302 	and.w	r3, r3, #2
 800793a:	2b00      	cmp	r3, #0
 800793c:	d069      	beq.n	8007a12 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800793e:	4b50      	ldr	r3, [pc, #320]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 030c 	and.w	r3, r3, #12
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00b      	beq.n	8007962 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800794a:	4b4d      	ldr	r3, [pc, #308]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 030c 	and.w	r3, r3, #12
 8007952:	2b08      	cmp	r3, #8
 8007954:	d11c      	bne.n	8007990 <HAL_RCC_OscConfig+0x190>
 8007956:	4b4a      	ldr	r3, [pc, #296]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d116      	bne.n	8007990 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007962:	4b47      	ldr	r3, [pc, #284]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d005      	beq.n	800797a <HAL_RCC_OscConfig+0x17a>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d001      	beq.n	800797a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e1df      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797a:	4b41      	ldr	r3, [pc, #260]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	00db      	lsls	r3, r3, #3
 8007988:	493d      	ldr	r1, [pc, #244]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800798a:	4313      	orrs	r3, r2
 800798c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800798e:	e040      	b.n	8007a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d023      	beq.n	80079e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007998:	4b39      	ldr	r3, [pc, #228]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a38      	ldr	r2, [pc, #224]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 800799e:	f043 0301 	orr.w	r3, r3, #1
 80079a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a4:	f7fa ffbc 	bl	8002920 <HAL_GetTick>
 80079a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079ac:	f7fa ffb8 	bl	8002920 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e1bd      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079be:	4b30      	ldr	r3, [pc, #192]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0f0      	beq.n	80079ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ca:	4b2d      	ldr	r3, [pc, #180]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	4929      	ldr	r1, [pc, #164]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	600b      	str	r3, [r1, #0]
 80079de:	e018      	b.n	8007a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079e0:	4b27      	ldr	r3, [pc, #156]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a26      	ldr	r2, [pc, #152]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 80079e6:	f023 0301 	bic.w	r3, r3, #1
 80079ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ec:	f7fa ff98 	bl	8002920 <HAL_GetTick>
 80079f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079f2:	e008      	b.n	8007a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079f4:	f7fa ff94 	bl	8002920 <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d901      	bls.n	8007a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e199      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a06:	4b1e      	ldr	r3, [pc, #120]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1f0      	bne.n	80079f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 0308 	and.w	r3, r3, #8
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d038      	beq.n	8007a90 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d019      	beq.n	8007a5a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a26:	4b16      	ldr	r3, [pc, #88]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a2a:	4a15      	ldr	r2, [pc, #84]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007a2c:	f043 0301 	orr.w	r3, r3, #1
 8007a30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a32:	f7fa ff75 	bl	8002920 <HAL_GetTick>
 8007a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a38:	e008      	b.n	8007a4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a3a:	f7fa ff71 	bl	8002920 <HAL_GetTick>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	1ad3      	subs	r3, r2, r3
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d901      	bls.n	8007a4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	e176      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a4c:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0f0      	beq.n	8007a3a <HAL_RCC_OscConfig+0x23a>
 8007a58:	e01a      	b.n	8007a90 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a5a:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a5e:	4a08      	ldr	r2, [pc, #32]	; (8007a80 <HAL_RCC_OscConfig+0x280>)
 8007a60:	f023 0301 	bic.w	r3, r3, #1
 8007a64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a66:	f7fa ff5b 	bl	8002920 <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a6c:	e00a      	b.n	8007a84 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a6e:	f7fa ff57 	bl	8002920 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d903      	bls.n	8007a84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e15c      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
 8007a80:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a84:	4b91      	ldr	r3, [pc, #580]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1ee      	bne.n	8007a6e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 0304 	and.w	r3, r3, #4
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 80a4 	beq.w	8007be6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a9e:	4b8b      	ldr	r3, [pc, #556]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d10d      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007aaa:	4b88      	ldr	r3, [pc, #544]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	4a87      	ldr	r2, [pc, #540]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ab6:	4b85      	ldr	r3, [pc, #532]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007abe:	60bb      	str	r3, [r7, #8]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ac6:	4b82      	ldr	r3, [pc, #520]	; (8007cd0 <HAL_RCC_OscConfig+0x4d0>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d118      	bne.n	8007b04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007ad2:	4b7f      	ldr	r3, [pc, #508]	; (8007cd0 <HAL_RCC_OscConfig+0x4d0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a7e      	ldr	r2, [pc, #504]	; (8007cd0 <HAL_RCC_OscConfig+0x4d0>)
 8007ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ade:	f7fa ff1f 	bl	8002920 <HAL_GetTick>
 8007ae2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ae4:	e008      	b.n	8007af8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ae6:	f7fa ff1b 	bl	8002920 <HAL_GetTick>
 8007aea:	4602      	mov	r2, r0
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	2b64      	cmp	r3, #100	; 0x64
 8007af2:	d901      	bls.n	8007af8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007af4:	2303      	movs	r3, #3
 8007af6:	e120      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007af8:	4b75      	ldr	r3, [pc, #468]	; (8007cd0 <HAL_RCC_OscConfig+0x4d0>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d0f0      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d106      	bne.n	8007b1a <HAL_RCC_OscConfig+0x31a>
 8007b0c:	4b6f      	ldr	r3, [pc, #444]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b10:	4a6e      	ldr	r2, [pc, #440]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b12:	f043 0301 	orr.w	r3, r3, #1
 8007b16:	6713      	str	r3, [r2, #112]	; 0x70
 8007b18:	e02d      	b.n	8007b76 <HAL_RCC_OscConfig+0x376>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	689b      	ldr	r3, [r3, #8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10c      	bne.n	8007b3c <HAL_RCC_OscConfig+0x33c>
 8007b22:	4b6a      	ldr	r3, [pc, #424]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b26:	4a69      	ldr	r2, [pc, #420]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007b2e:	4b67      	ldr	r3, [pc, #412]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b32:	4a66      	ldr	r2, [pc, #408]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b34:	f023 0304 	bic.w	r3, r3, #4
 8007b38:	6713      	str	r3, [r2, #112]	; 0x70
 8007b3a:	e01c      	b.n	8007b76 <HAL_RCC_OscConfig+0x376>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	2b05      	cmp	r3, #5
 8007b42:	d10c      	bne.n	8007b5e <HAL_RCC_OscConfig+0x35e>
 8007b44:	4b61      	ldr	r3, [pc, #388]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b48:	4a60      	ldr	r2, [pc, #384]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b4a:	f043 0304 	orr.w	r3, r3, #4
 8007b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b50:	4b5e      	ldr	r3, [pc, #376]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b54:	4a5d      	ldr	r2, [pc, #372]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b56:	f043 0301 	orr.w	r3, r3, #1
 8007b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8007b5c:	e00b      	b.n	8007b76 <HAL_RCC_OscConfig+0x376>
 8007b5e:	4b5b      	ldr	r3, [pc, #364]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b62:	4a5a      	ldr	r2, [pc, #360]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b64:	f023 0301 	bic.w	r3, r3, #1
 8007b68:	6713      	str	r3, [r2, #112]	; 0x70
 8007b6a:	4b58      	ldr	r3, [pc, #352]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6e:	4a57      	ldr	r2, [pc, #348]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b70:	f023 0304 	bic.w	r3, r3, #4
 8007b74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d015      	beq.n	8007baa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7e:	f7fa fecf 	bl	8002920 <HAL_GetTick>
 8007b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b84:	e00a      	b.n	8007b9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b86:	f7fa fecb 	bl	8002920 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d901      	bls.n	8007b9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e0ce      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b9c:	4b4b      	ldr	r3, [pc, #300]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba0:	f003 0302 	and.w	r3, r3, #2
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0ee      	beq.n	8007b86 <HAL_RCC_OscConfig+0x386>
 8007ba8:	e014      	b.n	8007bd4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007baa:	f7fa feb9 	bl	8002920 <HAL_GetTick>
 8007bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bb0:	e00a      	b.n	8007bc8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bb2:	f7fa feb5 	bl	8002920 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e0b8      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007bc8:	4b40      	ldr	r3, [pc, #256]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1ee      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d105      	bne.n	8007be6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bda:	4b3c      	ldr	r3, [pc, #240]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	4a3b      	ldr	r2, [pc, #236]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007be4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	699b      	ldr	r3, [r3, #24]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 80a4 	beq.w	8007d38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bf0:	4b36      	ldr	r3, [pc, #216]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f003 030c 	and.w	r3, r3, #12
 8007bf8:	2b08      	cmp	r3, #8
 8007bfa:	d06b      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	699b      	ldr	r3, [r3, #24]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d149      	bne.n	8007c98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c04:	4b31      	ldr	r3, [pc, #196]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a30      	ldr	r2, [pc, #192]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c10:	f7fa fe86 	bl	8002920 <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c18:	f7fa fe82 	bl	8002920 <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e087      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c2a:	4b28      	ldr	r3, [pc, #160]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f0      	bne.n	8007c18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69da      	ldr	r2, [r3, #28]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6a1b      	ldr	r3, [r3, #32]
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	019b      	lsls	r3, r3, #6
 8007c46:	431a      	orrs	r2, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	085b      	lsrs	r3, r3, #1
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	041b      	lsls	r3, r3, #16
 8007c52:	431a      	orrs	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c58:	061b      	lsls	r3, r3, #24
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	4a1b      	ldr	r2, [pc, #108]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c64:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a18      	ldr	r2, [pc, #96]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c70:	f7fa fe56 	bl	8002920 <HAL_GetTick>
 8007c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c76:	e008      	b.n	8007c8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c78:	f7fa fe52 	bl	8002920 <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d901      	bls.n	8007c8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e057      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c8a:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0f0      	beq.n	8007c78 <HAL_RCC_OscConfig+0x478>
 8007c96:	e04f      	b.n	8007d38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c98:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a0b      	ldr	r2, [pc, #44]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007c9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca4:	f7fa fe3c 	bl	8002920 <HAL_GetTick>
 8007ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007caa:	e008      	b.n	8007cbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cac:	f7fa fe38 	bl	8002920 <HAL_GetTick>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d901      	bls.n	8007cbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	e03d      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cbe:	4b03      	ldr	r3, [pc, #12]	; (8007ccc <HAL_RCC_OscConfig+0x4cc>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1f0      	bne.n	8007cac <HAL_RCC_OscConfig+0x4ac>
 8007cca:	e035      	b.n	8007d38 <HAL_RCC_OscConfig+0x538>
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007cd4:	4b1b      	ldr	r3, [pc, #108]	; (8007d44 <HAL_RCC_OscConfig+0x544>)
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d028      	beq.n	8007d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d121      	bne.n	8007d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d11a      	bne.n	8007d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007cfe:	68fa      	ldr	r2, [r7, #12]
 8007d00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d04:	4013      	ands	r3, r2
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d111      	bne.n	8007d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d1a:	085b      	lsrs	r3, r3, #1
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d107      	bne.n	8007d34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d001      	beq.n	8007d38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e000      	b.n	8007d3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	40023800 	.word	0x40023800

08007d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e0d0      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d60:	4b6a      	ldr	r3, [pc, #424]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 030f 	and.w	r3, r3, #15
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d910      	bls.n	8007d90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d6e:	4b67      	ldr	r3, [pc, #412]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f023 020f 	bic.w	r2, r3, #15
 8007d76:	4965      	ldr	r1, [pc, #404]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d7e:	4b63      	ldr	r3, [pc, #396]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d001      	beq.n	8007d90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e0b8      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0302 	and.w	r3, r3, #2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d020      	beq.n	8007dde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 0304 	and.w	r3, r3, #4
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007da8:	4b59      	ldr	r3, [pc, #356]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	4a58      	ldr	r2, [pc, #352]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007dae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007db2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f003 0308 	and.w	r3, r3, #8
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d005      	beq.n	8007dcc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007dc0:	4b53      	ldr	r3, [pc, #332]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	4a52      	ldr	r2, [pc, #328]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007dc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007dca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dcc:	4b50      	ldr	r3, [pc, #320]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	494d      	ldr	r1, [pc, #308]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0301 	and.w	r3, r3, #1
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d040      	beq.n	8007e6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d107      	bne.n	8007e02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007df2:	4b47      	ldr	r3, [pc, #284]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d115      	bne.n	8007e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e07f      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d107      	bne.n	8007e1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e0a:	4b41      	ldr	r3, [pc, #260]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d109      	bne.n	8007e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e073      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e1a:	4b3d      	ldr	r3, [pc, #244]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e06b      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e2a:	4b39      	ldr	r3, [pc, #228]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f023 0203 	bic.w	r2, r3, #3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	4936      	ldr	r1, [pc, #216]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e3c:	f7fa fd70 	bl	8002920 <HAL_GetTick>
 8007e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e42:	e00a      	b.n	8007e5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e44:	f7fa fd6c 	bl	8002920 <HAL_GetTick>
 8007e48:	4602      	mov	r2, r0
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	1ad3      	subs	r3, r2, r3
 8007e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d901      	bls.n	8007e5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e053      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e5a:	4b2d      	ldr	r3, [pc, #180]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 020c 	and.w	r2, r3, #12
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d1eb      	bne.n	8007e44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e6c:	4b27      	ldr	r3, [pc, #156]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 030f 	and.w	r3, r3, #15
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d210      	bcs.n	8007e9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e7a:	4b24      	ldr	r3, [pc, #144]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f023 020f 	bic.w	r2, r3, #15
 8007e82:	4922      	ldr	r1, [pc, #136]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e8a:	4b20      	ldr	r3, [pc, #128]	; (8007f0c <HAL_RCC_ClockConfig+0x1c4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d001      	beq.n	8007e9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e032      	b.n	8007f02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d008      	beq.n	8007eba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ea8:	4b19      	ldr	r3, [pc, #100]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	4916      	ldr	r1, [pc, #88]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0308 	and.w	r3, r3, #8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d009      	beq.n	8007eda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007ec6:	4b12      	ldr	r3, [pc, #72]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	00db      	lsls	r3, r3, #3
 8007ed4:	490e      	ldr	r1, [pc, #56]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007eda:	f000 f821 	bl	8007f20 <HAL_RCC_GetSysClockFreq>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	4b0b      	ldr	r3, [pc, #44]	; (8007f10 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	091b      	lsrs	r3, r3, #4
 8007ee6:	f003 030f 	and.w	r3, r3, #15
 8007eea:	490a      	ldr	r1, [pc, #40]	; (8007f14 <HAL_RCC_ClockConfig+0x1cc>)
 8007eec:	5ccb      	ldrb	r3, [r1, r3]
 8007eee:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef2:	4a09      	ldr	r2, [pc, #36]	; (8007f18 <HAL_RCC_ClockConfig+0x1d0>)
 8007ef4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007ef6:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <HAL_RCC_ClockConfig+0x1d4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7fa fccc 	bl	8002898 <HAL_InitTick>

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	40023c00 	.word	0x40023c00
 8007f10:	40023800 	.word	0x40023800
 8007f14:	0801ac60 	.word	0x0801ac60
 8007f18:	20000000 	.word	0x20000000
 8007f1c:	20000004 	.word	0x20000004

08007f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f24:	b094      	sub	sp, #80	; 0x50
 8007f26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f30:	2300      	movs	r3, #0
 8007f32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f38:	4b79      	ldr	r3, [pc, #484]	; (8008120 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f003 030c 	and.w	r3, r3, #12
 8007f40:	2b08      	cmp	r3, #8
 8007f42:	d00d      	beq.n	8007f60 <HAL_RCC_GetSysClockFreq+0x40>
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	f200 80e1 	bhi.w	800810c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d002      	beq.n	8007f54 <HAL_RCC_GetSysClockFreq+0x34>
 8007f4e:	2b04      	cmp	r3, #4
 8007f50:	d003      	beq.n	8007f5a <HAL_RCC_GetSysClockFreq+0x3a>
 8007f52:	e0db      	b.n	800810c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f54:	4b73      	ldr	r3, [pc, #460]	; (8008124 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f56:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f58:	e0db      	b.n	8008112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f5a:	4b73      	ldr	r3, [pc, #460]	; (8008128 <HAL_RCC_GetSysClockFreq+0x208>)
 8007f5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f5e:	e0d8      	b.n	8008112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f60:	4b6f      	ldr	r3, [pc, #444]	; (8008120 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f68:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007f6a:	4b6d      	ldr	r3, [pc, #436]	; (8008120 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d063      	beq.n	800803e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f76:	4b6a      	ldr	r3, [pc, #424]	; (8008120 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	099b      	lsrs	r3, r3, #6
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f88:	633b      	str	r3, [r7, #48]	; 0x30
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007f92:	4622      	mov	r2, r4
 8007f94:	462b      	mov	r3, r5
 8007f96:	f04f 0000 	mov.w	r0, #0
 8007f9a:	f04f 0100 	mov.w	r1, #0
 8007f9e:	0159      	lsls	r1, r3, #5
 8007fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007fa4:	0150      	lsls	r0, r2, #5
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4621      	mov	r1, r4
 8007fac:	1a51      	subs	r1, r2, r1
 8007fae:	6139      	str	r1, [r7, #16]
 8007fb0:	4629      	mov	r1, r5
 8007fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8007fb6:	617b      	str	r3, [r7, #20]
 8007fb8:	f04f 0200 	mov.w	r2, #0
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fc4:	4659      	mov	r1, fp
 8007fc6:	018b      	lsls	r3, r1, #6
 8007fc8:	4651      	mov	r1, sl
 8007fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007fce:	4651      	mov	r1, sl
 8007fd0:	018a      	lsls	r2, r1, #6
 8007fd2:	4651      	mov	r1, sl
 8007fd4:	ebb2 0801 	subs.w	r8, r2, r1
 8007fd8:	4659      	mov	r1, fp
 8007fda:	eb63 0901 	sbc.w	r9, r3, r1
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	f04f 0300 	mov.w	r3, #0
 8007fe6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007fea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007fee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ff2:	4690      	mov	r8, r2
 8007ff4:	4699      	mov	r9, r3
 8007ff6:	4623      	mov	r3, r4
 8007ff8:	eb18 0303 	adds.w	r3, r8, r3
 8007ffc:	60bb      	str	r3, [r7, #8]
 8007ffe:	462b      	mov	r3, r5
 8008000:	eb49 0303 	adc.w	r3, r9, r3
 8008004:	60fb      	str	r3, [r7, #12]
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008012:	4629      	mov	r1, r5
 8008014:	024b      	lsls	r3, r1, #9
 8008016:	4621      	mov	r1, r4
 8008018:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800801c:	4621      	mov	r1, r4
 800801e:	024a      	lsls	r2, r1, #9
 8008020:	4610      	mov	r0, r2
 8008022:	4619      	mov	r1, r3
 8008024:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008026:	2200      	movs	r2, #0
 8008028:	62bb      	str	r3, [r7, #40]	; 0x28
 800802a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800802c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008030:	f7f8 fd3c 	bl	8000aac <__aeabi_uldivmod>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	4613      	mov	r3, r2
 800803a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800803c:	e058      	b.n	80080f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800803e:	4b38      	ldr	r3, [pc, #224]	; (8008120 <HAL_RCC_GetSysClockFreq+0x200>)
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	099b      	lsrs	r3, r3, #6
 8008044:	2200      	movs	r2, #0
 8008046:	4618      	mov	r0, r3
 8008048:	4611      	mov	r1, r2
 800804a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800804e:	623b      	str	r3, [r7, #32]
 8008050:	2300      	movs	r3, #0
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
 8008054:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008058:	4642      	mov	r2, r8
 800805a:	464b      	mov	r3, r9
 800805c:	f04f 0000 	mov.w	r0, #0
 8008060:	f04f 0100 	mov.w	r1, #0
 8008064:	0159      	lsls	r1, r3, #5
 8008066:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800806a:	0150      	lsls	r0, r2, #5
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4641      	mov	r1, r8
 8008072:	ebb2 0a01 	subs.w	sl, r2, r1
 8008076:	4649      	mov	r1, r9
 8008078:	eb63 0b01 	sbc.w	fp, r3, r1
 800807c:	f04f 0200 	mov.w	r2, #0
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008088:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800808c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008090:	ebb2 040a 	subs.w	r4, r2, sl
 8008094:	eb63 050b 	sbc.w	r5, r3, fp
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	00eb      	lsls	r3, r5, #3
 80080a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080a6:	00e2      	lsls	r2, r4, #3
 80080a8:	4614      	mov	r4, r2
 80080aa:	461d      	mov	r5, r3
 80080ac:	4643      	mov	r3, r8
 80080ae:	18e3      	adds	r3, r4, r3
 80080b0:	603b      	str	r3, [r7, #0]
 80080b2:	464b      	mov	r3, r9
 80080b4:	eb45 0303 	adc.w	r3, r5, r3
 80080b8:	607b      	str	r3, [r7, #4]
 80080ba:	f04f 0200 	mov.w	r2, #0
 80080be:	f04f 0300 	mov.w	r3, #0
 80080c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080c6:	4629      	mov	r1, r5
 80080c8:	028b      	lsls	r3, r1, #10
 80080ca:	4621      	mov	r1, r4
 80080cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80080d0:	4621      	mov	r1, r4
 80080d2:	028a      	lsls	r2, r1, #10
 80080d4:	4610      	mov	r0, r2
 80080d6:	4619      	mov	r1, r3
 80080d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080da:	2200      	movs	r2, #0
 80080dc:	61bb      	str	r3, [r7, #24]
 80080de:	61fa      	str	r2, [r7, #28]
 80080e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080e4:	f7f8 fce2 	bl	8000aac <__aeabi_uldivmod>
 80080e8:	4602      	mov	r2, r0
 80080ea:	460b      	mov	r3, r1
 80080ec:	4613      	mov	r3, r2
 80080ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80080f0:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <HAL_RCC_GetSysClockFreq+0x200>)
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	0c1b      	lsrs	r3, r3, #16
 80080f6:	f003 0303 	and.w	r3, r3, #3
 80080fa:	3301      	adds	r3, #1
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8008100:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008104:	fbb2 f3f3 	udiv	r3, r2, r3
 8008108:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800810a:	e002      	b.n	8008112 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800810c:	4b05      	ldr	r3, [pc, #20]	; (8008124 <HAL_RCC_GetSysClockFreq+0x204>)
 800810e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008114:	4618      	mov	r0, r3
 8008116:	3750      	adds	r7, #80	; 0x50
 8008118:	46bd      	mov	sp, r7
 800811a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800811e:	bf00      	nop
 8008120:	40023800 	.word	0x40023800
 8008124:	00f42400 	.word	0x00f42400
 8008128:	007a1200 	.word	0x007a1200

0800812c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800812c:	b480      	push	{r7}
 800812e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008130:	4b03      	ldr	r3, [pc, #12]	; (8008140 <HAL_RCC_GetHCLKFreq+0x14>)
 8008132:	681b      	ldr	r3, [r3, #0]
}
 8008134:	4618      	mov	r0, r3
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20000000 	.word	0x20000000

08008144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008148:	f7ff fff0 	bl	800812c <HAL_RCC_GetHCLKFreq>
 800814c:	4602      	mov	r2, r0
 800814e:	4b05      	ldr	r3, [pc, #20]	; (8008164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	0a9b      	lsrs	r3, r3, #10
 8008154:	f003 0307 	and.w	r3, r3, #7
 8008158:	4903      	ldr	r1, [pc, #12]	; (8008168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800815a:	5ccb      	ldrb	r3, [r1, r3]
 800815c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008160:	4618      	mov	r0, r3
 8008162:	bd80      	pop	{r7, pc}
 8008164:	40023800 	.word	0x40023800
 8008168:	0801ac70 	.word	0x0801ac70

0800816c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008170:	f7ff ffdc 	bl	800812c <HAL_RCC_GetHCLKFreq>
 8008174:	4602      	mov	r2, r0
 8008176:	4b05      	ldr	r3, [pc, #20]	; (800818c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	0b5b      	lsrs	r3, r3, #13
 800817c:	f003 0307 	and.w	r3, r3, #7
 8008180:	4903      	ldr	r1, [pc, #12]	; (8008190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008182:	5ccb      	ldrb	r3, [r1, r3]
 8008184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008188:	4618      	mov	r0, r3
 800818a:	bd80      	pop	{r7, pc}
 800818c:	40023800 	.word	0x40023800
 8008190:	0801ac70 	.word	0x0801ac70

08008194 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b088      	sub	sp, #32
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80081a4:	2300      	movs	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80081ac:	2300      	movs	r3, #0
 80081ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d012      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80081bc:	4b69      	ldr	r3, [pc, #420]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	4a68      	ldr	r2, [pc, #416]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80081c6:	6093      	str	r3, [r2, #8]
 80081c8:	4b66      	ldr	r3, [pc, #408]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ca:	689a      	ldr	r2, [r3, #8]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d0:	4964      	ldr	r1, [pc, #400]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081d2:	4313      	orrs	r3, r2
 80081d4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80081de:	2301      	movs	r3, #1
 80081e0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d017      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081ee:	4b5d      	ldr	r3, [pc, #372]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fc:	4959      	ldr	r1, [pc, #356]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800820c:	d101      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800820e:	2301      	movs	r3, #1
 8008210:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800821a:	2301      	movs	r3, #1
 800821c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d017      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800822a:	4b4e      	ldr	r3, [pc, #312]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800822c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008230:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	494a      	ldr	r1, [pc, #296]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800823a:	4313      	orrs	r3, r2
 800823c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008248:	d101      	bne.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800824a:	2301      	movs	r3, #1
 800824c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	2b00      	cmp	r3, #0
 8008254:	d101      	bne.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008256:	2301      	movs	r3, #1
 8008258:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008266:	2301      	movs	r3, #1
 8008268:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0320 	and.w	r3, r3, #32
 8008272:	2b00      	cmp	r3, #0
 8008274:	f000 808b 	beq.w	800838e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008278:	4b3a      	ldr	r3, [pc, #232]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827c:	4a39      	ldr	r2, [pc, #228]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008282:	6413      	str	r3, [r2, #64]	; 0x40
 8008284:	4b37      	ldr	r3, [pc, #220]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800828c:	60bb      	str	r3, [r7, #8]
 800828e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008290:	4b35      	ldr	r3, [pc, #212]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a34      	ldr	r2, [pc, #208]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800829a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800829c:	f7fa fb40 	bl	8002920 <HAL_GetTick>
 80082a0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80082a2:	e008      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082a4:	f7fa fb3c 	bl	8002920 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	2b64      	cmp	r3, #100	; 0x64
 80082b0:	d901      	bls.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80082b2:	2303      	movs	r3, #3
 80082b4:	e357      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80082b6:	4b2c      	ldr	r3, [pc, #176]	; (8008368 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0f0      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80082c2:	4b28      	ldr	r3, [pc, #160]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d035      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d02e      	beq.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082e0:	4b20      	ldr	r3, [pc, #128]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082e8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80082ea:	4b1e      	ldr	r3, [pc, #120]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ee:	4a1d      	ldr	r2, [pc, #116]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082f4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80082f6:	4b1b      	ldr	r3, [pc, #108]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fa:	4a1a      	ldr	r2, [pc, #104]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008300:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008302:	4a18      	ldr	r2, [pc, #96]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008308:	4b16      	ldr	r3, [pc, #88]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800830a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800830c:	f003 0301 	and.w	r3, r3, #1
 8008310:	2b01      	cmp	r3, #1
 8008312:	d114      	bne.n	800833e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008314:	f7fa fb04 	bl	8002920 <HAL_GetTick>
 8008318:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800831a:	e00a      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800831c:	f7fa fb00 	bl	8002920 <HAL_GetTick>
 8008320:	4602      	mov	r2, r0
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	f241 3288 	movw	r2, #5000	; 0x1388
 800832a:	4293      	cmp	r3, r2
 800832c:	d901      	bls.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e319      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008332:	4b0c      	ldr	r3, [pc, #48]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d0ee      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800834a:	d111      	bne.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800834c:	4b05      	ldr	r3, [pc, #20]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008358:	4b04      	ldr	r3, [pc, #16]	; (800836c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800835a:	400b      	ands	r3, r1
 800835c:	4901      	ldr	r1, [pc, #4]	; (8008364 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800835e:	4313      	orrs	r3, r2
 8008360:	608b      	str	r3, [r1, #8]
 8008362:	e00b      	b.n	800837c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008364:	40023800 	.word	0x40023800
 8008368:	40007000 	.word	0x40007000
 800836c:	0ffffcff 	.word	0x0ffffcff
 8008370:	4baa      	ldr	r3, [pc, #680]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	4aa9      	ldr	r2, [pc, #676]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008376:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800837a:	6093      	str	r3, [r2, #8]
 800837c:	4ba7      	ldr	r3, [pc, #668]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800837e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008388:	49a4      	ldr	r1, [pc, #656]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800838a:	4313      	orrs	r3, r2
 800838c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b00      	cmp	r3, #0
 8008398:	d010      	beq.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800839a:	4ba0      	ldr	r3, [pc, #640]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800839c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083a0:	4a9e      	ldr	r2, [pc, #632]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083a6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80083aa:	4b9c      	ldr	r3, [pc, #624]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b4:	4999      	ldr	r1, [pc, #612]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083b6:	4313      	orrs	r3, r2
 80083b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00a      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083c8:	4b94      	ldr	r3, [pc, #592]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083d6:	4991      	ldr	r1, [pc, #580]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083d8:	4313      	orrs	r3, r2
 80083da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80083ea:	4b8c      	ldr	r3, [pc, #560]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083f8:	4988      	ldr	r1, [pc, #544]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00a      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800840c:	4b83      	ldr	r3, [pc, #524]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800840e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008412:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800841a:	4980      	ldr	r1, [pc, #512]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800841c:	4313      	orrs	r3, r2
 800841e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00a      	beq.n	8008444 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800842e:	4b7b      	ldr	r3, [pc, #492]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008434:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800843c:	4977      	ldr	r1, [pc, #476]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008450:	4b72      	ldr	r3, [pc, #456]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008456:	f023 0203 	bic.w	r2, r3, #3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845e:	496f      	ldr	r1, [pc, #444]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008460:	4313      	orrs	r3, r2
 8008462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008472:	4b6a      	ldr	r3, [pc, #424]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008478:	f023 020c 	bic.w	r2, r3, #12
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008480:	4966      	ldr	r1, [pc, #408]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008482:	4313      	orrs	r3, r2
 8008484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008494:	4b61      	ldr	r3, [pc, #388]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800849a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084a2:	495e      	ldr	r1, [pc, #376]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084b6:	4b59      	ldr	r3, [pc, #356]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084bc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c4:	4955      	ldr	r1, [pc, #340]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80084d8:	4b50      	ldr	r3, [pc, #320]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e6:	494d      	ldr	r1, [pc, #308]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e8:	4313      	orrs	r3, r2
 80084ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80084fa:	4b48      	ldr	r3, [pc, #288]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008500:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008508:	4944      	ldr	r1, [pc, #272]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850a:	4313      	orrs	r3, r2
 800850c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800851c:	4b3f      	ldr	r3, [pc, #252]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800851e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008522:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800852a:	493c      	ldr	r1, [pc, #240]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852c:	4313      	orrs	r3, r2
 800852e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d00a      	beq.n	8008554 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800853e:	4b37      	ldr	r3, [pc, #220]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008544:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854c:	4933      	ldr	r1, [pc, #204]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854e:	4313      	orrs	r3, r2
 8008550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008560:	4b2e      	ldr	r3, [pc, #184]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008566:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800856e:	492b      	ldr	r1, [pc, #172]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d011      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008582:	4b26      	ldr	r3, [pc, #152]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008588:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008590:	4922      	ldr	r1, [pc, #136]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008592:	4313      	orrs	r3, r2
 8008594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800859c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085a0:	d101      	bne.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80085a2:	2301      	movs	r3, #1
 80085a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d001      	beq.n	80085b6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80085b2:	2301      	movs	r3, #1
 80085b4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085c2:	4b16      	ldr	r3, [pc, #88]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085d0:	4912      	ldr	r1, [pc, #72]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80085e4:	4b0d      	ldr	r3, [pc, #52]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085f4:	4909      	ldr	r1, [pc, #36]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d006      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800860a:	2b00      	cmp	r3, #0
 800860c:	f000 80d9 	beq.w	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008610:	4b02      	ldr	r3, [pc, #8]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a01      	ldr	r2, [pc, #4]	; (800861c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800861a:	e001      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800861c:	40023800 	.word	0x40023800
 8008620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008622:	f7fa f97d 	bl	8002920 <HAL_GetTick>
 8008626:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008628:	e008      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800862a:	f7fa f979 	bl	8002920 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	2b64      	cmp	r3, #100	; 0x64
 8008636:	d901      	bls.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e194      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800863c:	4b6c      	ldr	r3, [pc, #432]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1f0      	bne.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	2b00      	cmp	r3, #0
 8008652:	d021      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008658:	2b00      	cmp	r3, #0
 800865a:	d11d      	bne.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800865c:	4b64      	ldr	r3, [pc, #400]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800865e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008662:	0c1b      	lsrs	r3, r3, #16
 8008664:	f003 0303 	and.w	r3, r3, #3
 8008668:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800866a:	4b61      	ldr	r3, [pc, #388]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800866c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008670:	0e1b      	lsrs	r3, r3, #24
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	019a      	lsls	r2, r3, #6
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	041b      	lsls	r3, r3, #16
 8008682:	431a      	orrs	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	061b      	lsls	r3, r3, #24
 8008688:	431a      	orrs	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	071b      	lsls	r3, r3, #28
 8008690:	4957      	ldr	r1, [pc, #348]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008692:	4313      	orrs	r3, r2
 8008694:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086ac:	d00a      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d02e      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086c2:	d129      	bne.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80086c4:	4b4a      	ldr	r3, [pc, #296]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ca:	0c1b      	lsrs	r3, r3, #16
 80086cc:	f003 0303 	and.w	r3, r3, #3
 80086d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80086d2:	4b47      	ldr	r3, [pc, #284]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086d8:	0f1b      	lsrs	r3, r3, #28
 80086da:	f003 0307 	and.w	r3, r3, #7
 80086de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	019a      	lsls	r2, r3, #6
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	041b      	lsls	r3, r3, #16
 80086ea:	431a      	orrs	r2, r3
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	061b      	lsls	r3, r3, #24
 80086f2:	431a      	orrs	r2, r3
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	071b      	lsls	r3, r3, #28
 80086f8:	493d      	ldr	r1, [pc, #244]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008700:	4b3b      	ldr	r3, [pc, #236]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008706:	f023 021f 	bic.w	r2, r3, #31
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	3b01      	subs	r3, #1
 8008710:	4937      	ldr	r1, [pc, #220]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008712:	4313      	orrs	r3, r2
 8008714:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d01d      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008724:	4b32      	ldr	r3, [pc, #200]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800872a:	0e1b      	lsrs	r3, r3, #24
 800872c:	f003 030f 	and.w	r3, r3, #15
 8008730:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008732:	4b2f      	ldr	r3, [pc, #188]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008738:	0f1b      	lsrs	r3, r3, #28
 800873a:	f003 0307 	and.w	r3, r3, #7
 800873e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	019a      	lsls	r2, r3, #6
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	041b      	lsls	r3, r3, #16
 800874c:	431a      	orrs	r2, r3
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	061b      	lsls	r3, r3, #24
 8008752:	431a      	orrs	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	071b      	lsls	r3, r3, #28
 8008758:	4925      	ldr	r1, [pc, #148]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800875a:	4313      	orrs	r3, r2
 800875c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d011      	beq.n	8008790 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	019a      	lsls	r2, r3, #6
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	041b      	lsls	r3, r3, #16
 8008778:	431a      	orrs	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	061b      	lsls	r3, r3, #24
 8008780:	431a      	orrs	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	071b      	lsls	r3, r3, #28
 8008788:	4919      	ldr	r1, [pc, #100]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800878a:	4313      	orrs	r3, r2
 800878c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008790:	4b17      	ldr	r3, [pc, #92]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a16      	ldr	r2, [pc, #88]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800879a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800879c:	f7fa f8c0 	bl	8002920 <HAL_GetTick>
 80087a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087a2:	e008      	b.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087a4:	f7fa f8bc 	bl	8002920 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	2b64      	cmp	r3, #100	; 0x64
 80087b0:	d901      	bls.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e0d7      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087b6:	4b0e      	ldr	r3, [pc, #56]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d0f0      	beq.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	f040 80cd 	bne.w	8008964 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80087ca:	4b09      	ldr	r3, [pc, #36]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a08      	ldr	r2, [pc, #32]	; (80087f0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087d6:	f7fa f8a3 	bl	8002920 <HAL_GetTick>
 80087da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087dc:	e00a      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80087de:	f7fa f89f 	bl	8002920 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	2b64      	cmp	r3, #100	; 0x64
 80087ea:	d903      	bls.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e0ba      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80087f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087f4:	4b5e      	ldr	r3, [pc, #376]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008800:	d0ed      	beq.n	80087de <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d009      	beq.n	800882a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800881e:	2b00      	cmp	r3, #0
 8008820:	d02e      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	2b00      	cmp	r3, #0
 8008828:	d12a      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800882a:	4b51      	ldr	r3, [pc, #324]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800882c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008830:	0c1b      	lsrs	r3, r3, #16
 8008832:	f003 0303 	and.w	r3, r3, #3
 8008836:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008838:	4b4d      	ldr	r3, [pc, #308]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800883a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800883e:	0f1b      	lsrs	r3, r3, #28
 8008840:	f003 0307 	and.w	r3, r3, #7
 8008844:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	019a      	lsls	r2, r3, #6
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	041b      	lsls	r3, r3, #16
 8008850:	431a      	orrs	r2, r3
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	699b      	ldr	r3, [r3, #24]
 8008856:	061b      	lsls	r3, r3, #24
 8008858:	431a      	orrs	r2, r3
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	071b      	lsls	r3, r3, #28
 800885e:	4944      	ldr	r1, [pc, #272]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008860:	4313      	orrs	r3, r2
 8008862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008866:	4b42      	ldr	r3, [pc, #264]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800886c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008874:	3b01      	subs	r3, #1
 8008876:	021b      	lsls	r3, r3, #8
 8008878:	493d      	ldr	r1, [pc, #244]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800887a:	4313      	orrs	r3, r2
 800887c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d022      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008890:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008894:	d11d      	bne.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008896:	4b36      	ldr	r3, [pc, #216]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800889c:	0e1b      	lsrs	r3, r3, #24
 800889e:	f003 030f 	and.w	r3, r3, #15
 80088a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80088a4:	4b32      	ldr	r3, [pc, #200]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088aa:	0f1b      	lsrs	r3, r3, #28
 80088ac:	f003 0307 	and.w	r3, r3, #7
 80088b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	019a      	lsls	r2, r3, #6
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a1b      	ldr	r3, [r3, #32]
 80088bc:	041b      	lsls	r3, r3, #16
 80088be:	431a      	orrs	r2, r3
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	061b      	lsls	r3, r3, #24
 80088c4:	431a      	orrs	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	071b      	lsls	r3, r3, #28
 80088ca:	4929      	ldr	r1, [pc, #164]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0308 	and.w	r3, r3, #8
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d028      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80088de:	4b24      	ldr	r3, [pc, #144]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e4:	0e1b      	lsrs	r3, r3, #24
 80088e6:	f003 030f 	and.w	r3, r3, #15
 80088ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80088ec:	4b20      	ldr	r3, [pc, #128]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f2:	0c1b      	lsrs	r3, r3, #16
 80088f4:	f003 0303 	and.w	r3, r3, #3
 80088f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	019a      	lsls	r2, r3, #6
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	041b      	lsls	r3, r3, #16
 8008904:	431a      	orrs	r2, r3
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	061b      	lsls	r3, r3, #24
 800890a:	431a      	orrs	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	071b      	lsls	r3, r3, #28
 8008912:	4917      	ldr	r1, [pc, #92]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008914:	4313      	orrs	r3, r2
 8008916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800891a:	4b15      	ldr	r3, [pc, #84]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800891c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008920:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008928:	4911      	ldr	r1, [pc, #68]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800892a:	4313      	orrs	r3, r2
 800892c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008930:	4b0f      	ldr	r3, [pc, #60]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a0e      	ldr	r2, [pc, #56]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800893a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800893c:	f7f9 fff0 	bl	8002920 <HAL_GetTick>
 8008940:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008942:	e008      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008944:	f7f9 ffec 	bl	8002920 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b64      	cmp	r3, #100	; 0x64
 8008950:	d901      	bls.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e007      	b.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008956:	4b06      	ldr	r3, [pc, #24]	; (8008970 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800895e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008962:	d1ef      	bne.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3720      	adds	r7, #32
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	40023800 	.word	0x40023800

08008974 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	e09d      	b.n	8008ac2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898a:	2b00      	cmp	r3, #0
 800898c:	d108      	bne.n	80089a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008996:	d009      	beq.n	80089ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	61da      	str	r2, [r3, #28]
 800899e:	e005      	b.n	80089ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d106      	bne.n	80089cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7f9 f840 	bl	8001a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2202      	movs	r2, #2
 80089d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089ec:	d902      	bls.n	80089f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60fb      	str	r3, [r7, #12]
 80089f2:	e002      	b.n	80089fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80089f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008a02:	d007      	beq.n	8008a14 <HAL_SPI_Init+0xa0>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008a0c:	d002      	beq.n	8008a14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a24:	431a      	orrs	r2, r3
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a42:	431a      	orrs	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	69db      	ldr	r3, [r3, #28]
 8008a48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a4c:	431a      	orrs	r2, r3
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6a1b      	ldr	r3, [r3, #32]
 8008a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a56:	ea42 0103 	orr.w	r1, r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	0c1b      	lsrs	r3, r3, #16
 8008a70:	f003 0204 	and.w	r2, r3, #4
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	f003 0310 	and.w	r3, r3, #16
 8008a7c:	431a      	orrs	r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a82:	f003 0308 	and.w	r3, r3, #8
 8008a86:	431a      	orrs	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a90:	ea42 0103 	orr.w	r1, r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	430a      	orrs	r2, r1
 8008aa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69da      	ldr	r2, [r3, #28]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ab0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d101      	bne.n	8008aec <HAL_SPI_TransmitReceive_DMA+0x20>
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e16c      	b.n	8008dc6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008afa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008b02:	7dbb      	ldrb	r3, [r7, #22]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d00d      	beq.n	8008b24 <HAL_SPI_TransmitReceive_DMA+0x58>
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b0e:	d106      	bne.n	8008b1e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d102      	bne.n	8008b1e <HAL_SPI_TransmitReceive_DMA+0x52>
 8008b18:	7dbb      	ldrb	r3, [r7, #22]
 8008b1a:	2b04      	cmp	r3, #4
 8008b1c:	d002      	beq.n	8008b24 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008b1e:	2302      	movs	r3, #2
 8008b20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b22:	e14b      	b.n	8008dbc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d005      	beq.n	8008b36 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d002      	beq.n	8008b36 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008b30:	887b      	ldrh	r3, [r7, #2]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d102      	bne.n	8008b3c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b3a:	e13f      	b.n	8008dbc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	d003      	beq.n	8008b50 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2205      	movs	r2, #5
 8008b4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	68ba      	ldr	r2, [r7, #8]
 8008b5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	887a      	ldrh	r2, [r7, #2]
 8008b60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	887a      	ldrh	r2, [r7, #2]
 8008b66:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	887a      	ldrh	r2, [r7, #2]
 8008b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	887a      	ldrh	r2, [r7, #2]
 8008b7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	2200      	movs	r2, #0
 8008b82:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2200      	movs	r2, #0
 8008b88:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8008b98:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	68db      	ldr	r3, [r3, #12]
 8008b9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ba2:	d908      	bls.n	8008bb6 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008bb2:	605a      	str	r2, [r3, #4]
 8008bb4:	e06f      	b.n	8008c96 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bc4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bd0:	d126      	bne.n	8008c20 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10f      	bne.n	8008bfe <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	685a      	ldr	r2, [r3, #4]
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008bec:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	085b      	lsrs	r3, r3, #1
 8008bf6:	b29a      	uxth	r2, r3
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008bfc:	e010      	b.n	8008c20 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c0c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	085b      	lsrs	r3, r3, #1
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	3301      	adds	r3, #1
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c24:	699b      	ldr	r3, [r3, #24]
 8008c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c2a:	d134      	bne.n	8008c96 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	685a      	ldr	r2, [r3, #4]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c3a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d111      	bne.n	8008c70 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c5a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	085b      	lsrs	r3, r3, #1
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008c6e:	e012      	b.n	8008c96 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c7e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	085b      	lsrs	r3, r3, #1
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c9c:	b2db      	uxtb	r3, r3
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	d108      	bne.n	8008cb4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca6:	4a4a      	ldr	r2, [pc, #296]	; (8008dd0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008ca8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cae:	4a49      	ldr	r2, [pc, #292]	; (8008dd4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008cb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8008cb2:	e007      	b.n	8008cc4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb8:	4a47      	ldr	r2, [pc, #284]	; (8008dd8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8008cba:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc0:	4a46      	ldr	r2, [pc, #280]	; (8008ddc <HAL_SPI_TransmitReceive_DMA+0x310>)
 8008cc2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc8:	4a45      	ldr	r2, [pc, #276]	; (8008de0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8008cca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	330c      	adds	r3, #12
 8008cde:	4619      	mov	r1, r3
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cec:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008cee:	f7fa fe1d 	bl	800392c <HAL_DMA_Start_IT>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00c      	beq.n	8008d12 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cfc:	f043 0210 	orr.w	r2, r3, #16
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008d10:	e054      	b.n	8008dbc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	685a      	ldr	r2, [r3, #4]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f042 0201 	orr.w	r2, r2, #1
 8008d20:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d26:	2200      	movs	r2, #0
 8008d28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d2e:	2200      	movs	r2, #0
 8008d30:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d36:	2200      	movs	r2, #0
 8008d38:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3e:	2200      	movs	r2, #0
 8008d40:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	330c      	adds	r3, #12
 8008d52:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008d58:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d5a:	f7fa fde7 	bl	800392c <HAL_DMA_Start_IT>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00c      	beq.n	8008d7e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d68:	f043 0210 	orr.w	r2, r3, #16
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008d70:	2301      	movs	r3, #1
 8008d72:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008d7c:	e01e      	b.n	8008dbc <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d88:	2b40      	cmp	r3, #64	; 0x40
 8008d8a:	d007      	beq.n	8008d9c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d9a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0220 	orr.w	r2, r2, #32
 8008daa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f042 0202 	orr.w	r2, r2, #2
 8008dba:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	08009185 	.word	0x08009185
 8008dd4:	08009049 	.word	0x08009049
 8008dd8:	080091a1 	.word	0x080091a1
 8008ddc:	080090f3 	.word	0x080090f3
 8008de0:	080091bd 	.word	0x080091bd

08008de4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b088      	sub	sp, #32
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	099b      	lsrs	r3, r3, #6
 8008e00:	f003 0301 	and.w	r3, r3, #1
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10f      	bne.n	8008e28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00a      	beq.n	8008e28 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	099b      	lsrs	r3, r3, #6
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d004      	beq.n	8008e28 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	4798      	blx	r3
    return;
 8008e26:	e0d7      	b.n	8008fd8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	085b      	lsrs	r3, r3, #1
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00a      	beq.n	8008e4a <HAL_SPI_IRQHandler+0x66>
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	09db      	lsrs	r3, r3, #7
 8008e38:	f003 0301 	and.w	r3, r3, #1
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d004      	beq.n	8008e4a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	4798      	blx	r3
    return;
 8008e48:	e0c6      	b.n	8008fd8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	095b      	lsrs	r3, r3, #5
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d10c      	bne.n	8008e70 <HAL_SPI_IRQHandler+0x8c>
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	099b      	lsrs	r3, r3, #6
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d106      	bne.n	8008e70 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	0a1b      	lsrs	r3, r3, #8
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 80b4 	beq.w	8008fd8 <HAL_SPI_IRQHandler+0x1f4>
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	095b      	lsrs	r3, r3, #5
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	f000 80ad 	beq.w	8008fd8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	099b      	lsrs	r3, r3, #6
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d023      	beq.n	8008ed2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b03      	cmp	r3, #3
 8008e94:	d011      	beq.n	8008eba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e9a:	f043 0204 	orr.w	r2, r3, #4
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	617b      	str	r3, [r7, #20]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	617b      	str	r3, [r7, #20]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	617b      	str	r3, [r7, #20]
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	e00b      	b.n	8008ed2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008eba:	2300      	movs	r3, #0
 8008ebc:	613b      	str	r3, [r7, #16]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	613b      	str	r3, [r7, #16]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	613b      	str	r3, [r7, #16]
 8008ece:	693b      	ldr	r3, [r7, #16]
        return;
 8008ed0:	e082      	b.n	8008fd8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	095b      	lsrs	r3, r3, #5
 8008ed6:	f003 0301 	and.w	r3, r3, #1
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d014      	beq.n	8008f08 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ee2:	f043 0201 	orr.w	r2, r3, #1
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008eea:	2300      	movs	r3, #0
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	0a1b      	lsrs	r3, r3, #8
 8008f0c:	f003 0301 	and.w	r3, r3, #1
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00c      	beq.n	8008f2e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f18:	f043 0208 	orr.w	r2, r3, #8
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008f20:	2300      	movs	r3, #0
 8008f22:	60bb      	str	r3, [r7, #8]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	60bb      	str	r3, [r7, #8]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d04f      	beq.n	8008fd6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008f44:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d104      	bne.n	8008f62 <HAL_SPI_IRQHandler+0x17e>
 8008f58:	69fb      	ldr	r3, [r7, #28]
 8008f5a:	f003 0301 	and.w	r3, r3, #1
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d034      	beq.n	8008fcc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	685a      	ldr	r2, [r3, #4]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0203 	bic.w	r2, r2, #3
 8008f70:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d011      	beq.n	8008f9e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f7e:	4a18      	ldr	r2, [pc, #96]	; (8008fe0 <HAL_SPI_IRQHandler+0x1fc>)
 8008f80:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fa fda0 	bl	8003acc <HAL_DMA_Abort_IT>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d005      	beq.n	8008f9e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d016      	beq.n	8008fd4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008faa:	4a0d      	ldr	r2, [pc, #52]	; (8008fe0 <HAL_SPI_IRQHandler+0x1fc>)
 8008fac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fa fd8a 	bl	8003acc <HAL_DMA_Abort_IT>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008fca:	e003      	b.n	8008fd4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f831 	bl	8009034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008fd2:	e000      	b.n	8008fd6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008fd4:	bf00      	nop
    return;
 8008fd6:	bf00      	nop
  }
}
 8008fd8:	3720      	adds	r7, #32
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	080091fd 	.word	0x080091fd

08008fe4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009054:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009056:	f7f9 fc63 	bl	8002920 <HAL_GetTick>
 800905a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800906a:	d03c      	beq.n	80090e6 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685a      	ldr	r2, [r3, #4]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 0220 	bic.w	r2, r2, #32
 800907a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10d      	bne.n	80090a0 <SPI_DMAReceiveCplt+0x58>
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800908c:	d108      	bne.n	80090a0 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	685a      	ldr	r2, [r3, #4]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f022 0203 	bic.w	r2, r2, #3
 800909c:	605a      	str	r2, [r3, #4]
 800909e:	e007      	b.n	80090b0 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685a      	ldr	r2, [r3, #4]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f022 0201 	bic.w	r2, r2, #1
 80090ae:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	2164      	movs	r1, #100	; 0x64
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f000 f9d5 	bl	8009464 <SPI_EndRxTransaction>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2220      	movs	r2, #32
 80090c4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2201      	movs	r2, #1
 80090d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d003      	beq.n	80090e6 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80090de:	68f8      	ldr	r0, [r7, #12]
 80090e0:	f7ff ffa8 	bl	8009034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80090e4:	e002      	b.n	80090ec <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80090e6:	68f8      	ldr	r0, [r7, #12]
 80090e8:	f7ff ff7c 	bl	8008fe4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b084      	sub	sp, #16
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fe:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009100:	f7f9 fc0e 	bl	8002920 <HAL_GetTick>
 8009104:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009110:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009114:	d030      	beq.n	8009178 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	685a      	ldr	r2, [r3, #4]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f022 0220 	bic.w	r2, r2, #32
 8009124:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	2164      	movs	r1, #100	; 0x64
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fa16 	bl	800955c <SPI_EndRxTxTransaction>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d005      	beq.n	8009142 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800913a:	f043 0220 	orr.w	r2, r3, #32
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	685a      	ldr	r2, [r3, #4]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 0203 	bic.w	r2, r2, #3
 8009150:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2201      	movs	r2, #1
 8009164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800916c:	2b00      	cmp	r3, #0
 800916e:	d003      	beq.n	8009178 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f7ff ff5f 	bl	8009034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009176:	e002      	b.n	800917e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009178:	68f8      	ldr	r0, [r7, #12]
 800917a:	f7ff ff3d 	bl	8008ff8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009190:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f7ff ff3a 	bl	800900c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009198:	bf00      	nop
 800919a:	3710      	adds	r7, #16
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ac:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f7ff ff36 	bl	8009020 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091b4:	bf00      	nop
 80091b6:	3710      	adds	r7, #16
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}

080091bc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	685a      	ldr	r2, [r3, #4]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f022 0203 	bic.w	r2, r2, #3
 80091d8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091de:	f043 0210 	orr.w	r2, r3, #16
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f7ff ff20 	bl	8009034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091f4:	bf00      	nop
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009208:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f7ff ff0b 	bl	8009034 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800921e:	bf00      	nop
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
	...

08009228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b088      	sub	sp, #32
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	60b9      	str	r1, [r7, #8]
 8009232:	603b      	str	r3, [r7, #0]
 8009234:	4613      	mov	r3, r2
 8009236:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009238:	f7f9 fb72 	bl	8002920 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009240:	1a9b      	subs	r3, r3, r2
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	4413      	add	r3, r2
 8009246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009248:	f7f9 fb6a 	bl	8002920 <HAL_GetTick>
 800924c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800924e:	4b39      	ldr	r3, [pc, #228]	; (8009334 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	015b      	lsls	r3, r3, #5
 8009254:	0d1b      	lsrs	r3, r3, #20
 8009256:	69fa      	ldr	r2, [r7, #28]
 8009258:	fb02 f303 	mul.w	r3, r2, r3
 800925c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800925e:	e054      	b.n	800930a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009266:	d050      	beq.n	800930a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009268:	f7f9 fb5a 	bl	8002920 <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	429a      	cmp	r2, r3
 8009276:	d902      	bls.n	800927e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d13d      	bne.n	80092fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685a      	ldr	r2, [r3, #4]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800928c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009296:	d111      	bne.n	80092bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092a0:	d004      	beq.n	80092ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092aa:	d107      	bne.n	80092bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092c4:	d10f      	bne.n	80092e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80092e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e017      	b.n	800932a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80092fa:	697b      	ldr	r3, [r7, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d101      	bne.n	8009304 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	3b01      	subs	r3, #1
 8009308:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	689a      	ldr	r2, [r3, #8]
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	4013      	ands	r3, r2
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	429a      	cmp	r2, r3
 8009318:	bf0c      	ite	eq
 800931a:	2301      	moveq	r3, #1
 800931c:	2300      	movne	r3, #0
 800931e:	b2db      	uxtb	r3, r3
 8009320:	461a      	mov	r2, r3
 8009322:	79fb      	ldrb	r3, [r7, #7]
 8009324:	429a      	cmp	r2, r3
 8009326:	d19b      	bne.n	8009260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3720      	adds	r7, #32
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000000 	.word	0x20000000

08009338 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	; 0x28
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
 8009344:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800934a:	f7f9 fae9 	bl	8002920 <HAL_GetTick>
 800934e:	4602      	mov	r2, r0
 8009350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009352:	1a9b      	subs	r3, r3, r2
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	4413      	add	r3, r2
 8009358:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800935a:	f7f9 fae1 	bl	8002920 <HAL_GetTick>
 800935e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	330c      	adds	r3, #12
 8009366:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009368:	4b3d      	ldr	r3, [pc, #244]	; (8009460 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	4613      	mov	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	4413      	add	r3, r2
 8009372:	00da      	lsls	r2, r3, #3
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	0d1b      	lsrs	r3, r3, #20
 8009378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800937a:	fb02 f303 	mul.w	r3, r2, r3
 800937e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009380:	e060      	b.n	8009444 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009388:	d107      	bne.n	800939a <SPI_WaitFifoStateUntilTimeout+0x62>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d104      	bne.n	800939a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	b2db      	uxtb	r3, r3
 8009396:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009398:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093a0:	d050      	beq.n	8009444 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093a2:	f7f9 fabd 	bl	8002920 <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	6a3b      	ldr	r3, [r7, #32]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ae:	429a      	cmp	r2, r3
 80093b0:	d902      	bls.n	80093b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80093b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d13d      	bne.n	8009434 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80093c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80093d0:	d111      	bne.n	80093f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093da:	d004      	beq.n	80093e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093e4:	d107      	bne.n	80093f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	681a      	ldr	r2, [r3, #0]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093fe:	d10f      	bne.n	8009420 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800940e:	601a      	str	r2, [r3, #0]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800941e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	2200      	movs	r2, #0
 800942c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009430:	2303      	movs	r3, #3
 8009432:	e010      	b.n	8009456 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800943a:	2300      	movs	r3, #0
 800943c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	3b01      	subs	r3, #1
 8009442:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	689a      	ldr	r2, [r3, #8]
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	4013      	ands	r3, r2
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	429a      	cmp	r2, r3
 8009452:	d196      	bne.n	8009382 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3728      	adds	r7, #40	; 0x28
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20000000 	.word	0x20000000

08009464 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af02      	add	r7, sp, #8
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009478:	d111      	bne.n	800949e <SPI_EndRxTransaction+0x3a>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009482:	d004      	beq.n	800948e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800948c:	d107      	bne.n	800949e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800949c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094a6:	d112      	bne.n	80094ce <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2200      	movs	r2, #0
 80094b0:	2180      	movs	r1, #128	; 0x80
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f7ff feb8 	bl	8009228 <SPI_WaitFlagStateUntilTimeout>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d021      	beq.n	8009502 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094c2:	f043 0220 	orr.w	r2, r3, #32
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e03d      	b.n	800954a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80094ce:	4b21      	ldr	r3, [pc, #132]	; (8009554 <SPI_EndRxTransaction+0xf0>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a21      	ldr	r2, [pc, #132]	; (8009558 <SPI_EndRxTransaction+0xf4>)
 80094d4:	fba2 2303 	umull	r2, r3, r2, r3
 80094d8:	0d5b      	lsrs	r3, r3, #21
 80094da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094de:	fb02 f303 	mul.w	r3, r2, r3
 80094e2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d00a      	beq.n	8009500 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	3b01      	subs	r3, #1
 80094ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094fa:	2b80      	cmp	r3, #128	; 0x80
 80094fc:	d0f2      	beq.n	80094e4 <SPI_EndRxTransaction+0x80>
 80094fe:	e000      	b.n	8009502 <SPI_EndRxTransaction+0x9e>
        break;
 8009500:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800950a:	d11d      	bne.n	8009548 <SPI_EndRxTransaction+0xe4>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009514:	d004      	beq.n	8009520 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800951e:	d113      	bne.n	8009548 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2200      	movs	r2, #0
 8009528:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f7ff ff03 	bl	8009338 <SPI_WaitFifoStateUntilTimeout>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d007      	beq.n	8009548 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800953c:	f043 0220 	orr.w	r2, r3, #32
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009544:	2303      	movs	r3, #3
 8009546:	e000      	b.n	800954a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20000000 	.word	0x20000000
 8009558:	165e9f81 	.word	0x165e9f81

0800955c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b088      	sub	sp, #32
 8009560:	af02      	add	r7, sp, #8
 8009562:	60f8      	str	r0, [r7, #12]
 8009564:	60b9      	str	r1, [r7, #8]
 8009566:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	9300      	str	r3, [sp, #0]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2200      	movs	r2, #0
 8009570:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009574:	68f8      	ldr	r0, [r7, #12]
 8009576:	f7ff fedf 	bl	8009338 <SPI_WaitFifoStateUntilTimeout>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d007      	beq.n	8009590 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009584:	f043 0220 	orr.w	r2, r3, #32
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800958c:	2303      	movs	r3, #3
 800958e:	e046      	b.n	800961e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009590:	4b25      	ldr	r3, [pc, #148]	; (8009628 <SPI_EndRxTxTransaction+0xcc>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a25      	ldr	r2, [pc, #148]	; (800962c <SPI_EndRxTxTransaction+0xd0>)
 8009596:	fba2 2303 	umull	r2, r3, r2, r3
 800959a:	0d5b      	lsrs	r3, r3, #21
 800959c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095a0:	fb02 f303 	mul.w	r3, r2, r3
 80095a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095ae:	d112      	bne.n	80095d6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	2200      	movs	r2, #0
 80095b8:	2180      	movs	r1, #128	; 0x80
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f7ff fe34 	bl	8009228 <SPI_WaitFlagStateUntilTimeout>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d016      	beq.n	80095f4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ca:	f043 0220 	orr.w	r2, r3, #32
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e023      	b.n	800961e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00a      	beq.n	80095f2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	3b01      	subs	r3, #1
 80095e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ec:	2b80      	cmp	r3, #128	; 0x80
 80095ee:	d0f2      	beq.n	80095d6 <SPI_EndRxTxTransaction+0x7a>
 80095f0:	e000      	b.n	80095f4 <SPI_EndRxTxTransaction+0x98>
        break;
 80095f2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	9300      	str	r3, [sp, #0]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7ff fe99 	bl	8009338 <SPI_WaitFifoStateUntilTimeout>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d007      	beq.n	800961c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009610:	f043 0220 	orr.w	r2, r3, #32
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009618:	2303      	movs	r3, #3
 800961a:	e000      	b.n	800961e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3718      	adds	r7, #24
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20000000 	.word	0x20000000
 800962c:	165e9f81 	.word	0x165e9f81

08009630 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e049      	b.n	80096d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b00      	cmp	r3, #0
 800964c:	d106      	bne.n	800965c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7f8 fb6a 	bl	8001d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2202      	movs	r2, #2
 8009660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	3304      	adds	r3, #4
 800966c:	4619      	mov	r1, r3
 800966e:	4610      	mov	r0, r2
 8009670:	f000 fa24 	bl	8009abc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2201      	movs	r2, #1
 80096d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d001      	beq.n	80096f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e054      	b.n	80097a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2202      	movs	r2, #2
 80096fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68da      	ldr	r2, [r3, #12]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f042 0201 	orr.w	r2, r2, #1
 800970e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a26      	ldr	r2, [pc, #152]	; (80097b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d022      	beq.n	8009760 <HAL_TIM_Base_Start_IT+0x80>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009722:	d01d      	beq.n	8009760 <HAL_TIM_Base_Start_IT+0x80>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a22      	ldr	r2, [pc, #136]	; (80097b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d018      	beq.n	8009760 <HAL_TIM_Base_Start_IT+0x80>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a21      	ldr	r2, [pc, #132]	; (80097b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d013      	beq.n	8009760 <HAL_TIM_Base_Start_IT+0x80>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a1f      	ldr	r2, [pc, #124]	; (80097bc <HAL_TIM_Base_Start_IT+0xdc>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d00e      	beq.n	8009760 <HAL_TIM_Base_Start_IT+0x80>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a1e      	ldr	r2, [pc, #120]	; (80097c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d009      	beq.n	8009760 <HAL_TIM_Base_Start_IT+0x80>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a1c      	ldr	r2, [pc, #112]	; (80097c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d004      	beq.n	8009760 <HAL_TIM_Base_Start_IT+0x80>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a1b      	ldr	r2, [pc, #108]	; (80097c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d115      	bne.n	800978c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	689a      	ldr	r2, [r3, #8]
 8009766:	4b19      	ldr	r3, [pc, #100]	; (80097cc <HAL_TIM_Base_Start_IT+0xec>)
 8009768:	4013      	ands	r3, r2
 800976a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b06      	cmp	r3, #6
 8009770:	d015      	beq.n	800979e <HAL_TIM_Base_Start_IT+0xbe>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009778:	d011      	beq.n	800979e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681a      	ldr	r2, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f042 0201 	orr.w	r2, r2, #1
 8009788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800978a:	e008      	b.n	800979e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f042 0201 	orr.w	r2, r2, #1
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	e000      	b.n	80097a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800979e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3714      	adds	r7, #20
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	40010000 	.word	0x40010000
 80097b4:	40000400 	.word	0x40000400
 80097b8:	40000800 	.word	0x40000800
 80097bc:	40000c00 	.word	0x40000c00
 80097c0:	40010400 	.word	0x40010400
 80097c4:	40014000 	.word	0x40014000
 80097c8:	40001800 	.word	0x40001800
 80097cc:	00010007 	.word	0x00010007

080097d0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68da      	ldr	r2, [r3, #12]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0201 	bic.w	r2, r2, #1
 80097e6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6a1a      	ldr	r2, [r3, #32]
 80097ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80097f2:	4013      	ands	r3, r2
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10f      	bne.n	8009818 <HAL_TIM_Base_Stop_IT+0x48>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6a1a      	ldr	r2, [r3, #32]
 80097fe:	f240 4344 	movw	r3, #1092	; 0x444
 8009802:	4013      	ands	r3, r2
 8009804:	2b00      	cmp	r3, #0
 8009806:	d107      	bne.n	8009818 <HAL_TIM_Base_Stop_IT+0x48>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f022 0201 	bic.w	r2, r2, #1
 8009816:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	370c      	adds	r7, #12
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b082      	sub	sp, #8
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	f003 0302 	and.w	r3, r3, #2
 8009840:	2b02      	cmp	r3, #2
 8009842:	d122      	bne.n	800988a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f003 0302 	and.w	r3, r3, #2
 800984e:	2b02      	cmp	r3, #2
 8009850:	d11b      	bne.n	800988a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f06f 0202 	mvn.w	r2, #2
 800985a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	f003 0303 	and.w	r3, r3, #3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d003      	beq.n	8009878 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f905 	bl	8009a80 <HAL_TIM_IC_CaptureCallback>
 8009876:	e005      	b.n	8009884 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f8f7 	bl	8009a6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f908 	bl	8009a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	f003 0304 	and.w	r3, r3, #4
 8009894:	2b04      	cmp	r3, #4
 8009896:	d122      	bne.n	80098de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68db      	ldr	r3, [r3, #12]
 800989e:	f003 0304 	and.w	r3, r3, #4
 80098a2:	2b04      	cmp	r3, #4
 80098a4:	d11b      	bne.n	80098de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f06f 0204 	mvn.w	r2, #4
 80098ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	699b      	ldr	r3, [r3, #24]
 80098bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d003      	beq.n	80098cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f8db 	bl	8009a80 <HAL_TIM_IC_CaptureCallback>
 80098ca:	e005      	b.n	80098d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f8cd 	bl	8009a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 f8de 	bl	8009a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	f003 0308 	and.w	r3, r3, #8
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	d122      	bne.n	8009932 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	f003 0308 	and.w	r3, r3, #8
 80098f6:	2b08      	cmp	r3, #8
 80098f8:	d11b      	bne.n	8009932 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f06f 0208 	mvn.w	r2, #8
 8009902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2204      	movs	r2, #4
 8009908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	f003 0303 	and.w	r3, r3, #3
 8009914:	2b00      	cmp	r3, #0
 8009916:	d003      	beq.n	8009920 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f000 f8b1 	bl	8009a80 <HAL_TIM_IC_CaptureCallback>
 800991e:	e005      	b.n	800992c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f000 f8a3 	bl	8009a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 f8b4 	bl	8009a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	f003 0310 	and.w	r3, r3, #16
 800993c:	2b10      	cmp	r3, #16
 800993e:	d122      	bne.n	8009986 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f003 0310 	and.w	r3, r3, #16
 800994a:	2b10      	cmp	r3, #16
 800994c:	d11b      	bne.n	8009986 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f06f 0210 	mvn.w	r2, #16
 8009956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2208      	movs	r2, #8
 800995c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f887 	bl	8009a80 <HAL_TIM_IC_CaptureCallback>
 8009972:	e005      	b.n	8009980 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f879 	bl	8009a6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f000 f88a 	bl	8009a94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	691b      	ldr	r3, [r3, #16]
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b01      	cmp	r3, #1
 8009992:	d10e      	bne.n	80099b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f003 0301 	and.w	r3, r3, #1
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d107      	bne.n	80099b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f06f 0201 	mvn.w	r2, #1
 80099aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f00d f9f1 	bl	8016d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	691b      	ldr	r3, [r3, #16]
 80099b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099bc:	2b80      	cmp	r3, #128	; 0x80
 80099be:	d10e      	bne.n	80099de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	68db      	ldr	r3, [r3, #12]
 80099c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ca:	2b80      	cmp	r3, #128	; 0x80
 80099cc:	d107      	bne.n	80099de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80099d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f9a7 	bl	8009d2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	691b      	ldr	r3, [r3, #16]
 80099e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ec:	d10e      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099f8:	2b80      	cmp	r3, #128	; 0x80
 80099fa:	d107      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f99a 	bl	8009d40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a16:	2b40      	cmp	r3, #64	; 0x40
 8009a18:	d10e      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a24:	2b40      	cmp	r3, #64	; 0x40
 8009a26:	d107      	bne.n	8009a38 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 f838 	bl	8009aa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f003 0320 	and.w	r3, r3, #32
 8009a42:	2b20      	cmp	r3, #32
 8009a44:	d10e      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	f003 0320 	and.w	r3, r3, #32
 8009a50:	2b20      	cmp	r3, #32
 8009a52:	d107      	bne.n	8009a64 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f06f 0220 	mvn.w	r2, #32
 8009a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 f95a 	bl	8009d18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a64:	bf00      	nop
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a40      	ldr	r2, [pc, #256]	; (8009bd0 <TIM_Base_SetConfig+0x114>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d013      	beq.n	8009afc <TIM_Base_SetConfig+0x40>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ada:	d00f      	beq.n	8009afc <TIM_Base_SetConfig+0x40>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a3d      	ldr	r2, [pc, #244]	; (8009bd4 <TIM_Base_SetConfig+0x118>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d00b      	beq.n	8009afc <TIM_Base_SetConfig+0x40>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a3c      	ldr	r2, [pc, #240]	; (8009bd8 <TIM_Base_SetConfig+0x11c>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d007      	beq.n	8009afc <TIM_Base_SetConfig+0x40>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a3b      	ldr	r2, [pc, #236]	; (8009bdc <TIM_Base_SetConfig+0x120>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d003      	beq.n	8009afc <TIM_Base_SetConfig+0x40>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a3a      	ldr	r2, [pc, #232]	; (8009be0 <TIM_Base_SetConfig+0x124>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d108      	bne.n	8009b0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a2f      	ldr	r2, [pc, #188]	; (8009bd0 <TIM_Base_SetConfig+0x114>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d02b      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b1c:	d027      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a2c      	ldr	r2, [pc, #176]	; (8009bd4 <TIM_Base_SetConfig+0x118>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d023      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a2b      	ldr	r2, [pc, #172]	; (8009bd8 <TIM_Base_SetConfig+0x11c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d01f      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a2a      	ldr	r2, [pc, #168]	; (8009bdc <TIM_Base_SetConfig+0x120>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d01b      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a29      	ldr	r2, [pc, #164]	; (8009be0 <TIM_Base_SetConfig+0x124>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d017      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a28      	ldr	r2, [pc, #160]	; (8009be4 <TIM_Base_SetConfig+0x128>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d013      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4a27      	ldr	r2, [pc, #156]	; (8009be8 <TIM_Base_SetConfig+0x12c>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d00f      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a26      	ldr	r2, [pc, #152]	; (8009bec <TIM_Base_SetConfig+0x130>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d00b      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a25      	ldr	r2, [pc, #148]	; (8009bf0 <TIM_Base_SetConfig+0x134>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d007      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a24      	ldr	r2, [pc, #144]	; (8009bf4 <TIM_Base_SetConfig+0x138>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d003      	beq.n	8009b6e <TIM_Base_SetConfig+0xb2>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a23      	ldr	r2, [pc, #140]	; (8009bf8 <TIM_Base_SetConfig+0x13c>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d108      	bne.n	8009b80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	689a      	ldr	r2, [r3, #8]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a0a      	ldr	r2, [pc, #40]	; (8009bd0 <TIM_Base_SetConfig+0x114>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d003      	beq.n	8009bb4 <TIM_Base_SetConfig+0xf8>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a0c      	ldr	r2, [pc, #48]	; (8009be0 <TIM_Base_SetConfig+0x124>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d103      	bne.n	8009bbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	691a      	ldr	r2, [r3, #16]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	615a      	str	r2, [r3, #20]
}
 8009bc2:	bf00      	nop
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	40010000 	.word	0x40010000
 8009bd4:	40000400 	.word	0x40000400
 8009bd8:	40000800 	.word	0x40000800
 8009bdc:	40000c00 	.word	0x40000c00
 8009be0:	40010400 	.word	0x40010400
 8009be4:	40014000 	.word	0x40014000
 8009be8:	40014400 	.word	0x40014400
 8009bec:	40014800 	.word	0x40014800
 8009bf0:	40001800 	.word	0x40001800
 8009bf4:	40001c00 	.word	0x40001c00
 8009bf8:	40002000 	.word	0x40002000

08009bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b085      	sub	sp, #20
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d101      	bne.n	8009c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c10:	2302      	movs	r3, #2
 8009c12:	e06d      	b.n	8009cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2201      	movs	r2, #1
 8009c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2202      	movs	r2, #2
 8009c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a30      	ldr	r2, [pc, #192]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d004      	beq.n	8009c48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a2f      	ldr	r2, [pc, #188]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d108      	bne.n	8009c5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	68fa      	ldr	r2, [r7, #12]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a20      	ldr	r2, [pc, #128]	; (8009cfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d022      	beq.n	8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c86:	d01d      	beq.n	8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a1d      	ldr	r2, [pc, #116]	; (8009d04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d018      	beq.n	8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a1c      	ldr	r2, [pc, #112]	; (8009d08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d013      	beq.n	8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a1a      	ldr	r2, [pc, #104]	; (8009d0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d00e      	beq.n	8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a15      	ldr	r2, [pc, #84]	; (8009d00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d009      	beq.n	8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a16      	ldr	r2, [pc, #88]	; (8009d10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d004      	beq.n	8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a15      	ldr	r2, [pc, #84]	; (8009d14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d10c      	bne.n	8009cde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009cca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	68ba      	ldr	r2, [r7, #8]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3714      	adds	r7, #20
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr
 8009cfc:	40010000 	.word	0x40010000
 8009d00:	40010400 	.word	0x40010400
 8009d04:	40000400 	.word	0x40000400
 8009d08:	40000800 	.word	0x40000800
 8009d0c:	40000c00 	.word	0x40000c00
 8009d10:	40014000 	.word	0x40014000
 8009d14:	40001800 	.word	0x40001800

08009d18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d20:	bf00      	nop
 8009d22:	370c      	adds	r7, #12
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d34:	bf00      	nop
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d48:	bf00      	nop
 8009d4a:	370c      	adds	r7, #12
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e040      	b.n	8009de8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d106      	bne.n	8009d7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f7f8 f800 	bl	8001d7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2224      	movs	r2, #36	; 0x24
 8009d80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	681a      	ldr	r2, [r3, #0]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 0201 	bic.w	r2, r2, #1
 8009d90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fd44 	bl	800a820 <UART_SetConfig>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d101      	bne.n	8009da2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e022      	b.n	8009de8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d002      	beq.n	8009db0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 ff9c 	bl	800ace8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009dbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	689a      	ldr	r2, [r3, #8]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009dce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f042 0201 	orr.w	r2, r2, #1
 8009dde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 f823 	bl	800ae2c <UART_CheckIdleState>
 8009de6:	4603      	mov	r3, r0
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3708      	adds	r7, #8
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b08a      	sub	sp, #40	; 0x28
 8009df4:	af02      	add	r7, sp, #8
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	60b9      	str	r1, [r7, #8]
 8009dfa:	603b      	str	r3, [r7, #0]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e04:	2b20      	cmp	r3, #32
 8009e06:	d171      	bne.n	8009eec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <HAL_UART_Transmit+0x24>
 8009e0e:	88fb      	ldrh	r3, [r7, #6]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d101      	bne.n	8009e18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e06a      	b.n	8009eee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2221      	movs	r2, #33	; 0x21
 8009e24:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e26:	f7f8 fd7b 	bl	8002920 <HAL_GetTick>
 8009e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	88fa      	ldrh	r2, [r7, #6]
 8009e30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	88fa      	ldrh	r2, [r7, #6]
 8009e38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	689b      	ldr	r3, [r3, #8]
 8009e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e44:	d108      	bne.n	8009e58 <HAL_UART_Transmit+0x68>
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d104      	bne.n	8009e58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	61bb      	str	r3, [r7, #24]
 8009e56:	e003      	b.n	8009e60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009e60:	e02c      	b.n	8009ebc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	2180      	movs	r1, #128	; 0x80
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f001 f814 	bl	800ae9a <UART_WaitOnFlagUntilTimeout>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009e78:	2303      	movs	r3, #3
 8009e7a:	e038      	b.n	8009eee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10b      	bne.n	8009e9a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	881b      	ldrh	r3, [r3, #0]
 8009e86:	461a      	mov	r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e90:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009e92:	69bb      	ldr	r3, [r7, #24]
 8009e94:	3302      	adds	r3, #2
 8009e96:	61bb      	str	r3, [r7, #24]
 8009e98:	e007      	b.n	8009eaa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	781a      	ldrb	r2, [r3, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	3b01      	subs	r3, #1
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1cc      	bne.n	8009e62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	2140      	movs	r1, #64	; 0x40
 8009ed2:	68f8      	ldr	r0, [r7, #12]
 8009ed4:	f000 ffe1 	bl	800ae9a <UART_WaitOnFlagUntilTimeout>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d001      	beq.n	8009ee2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e005      	b.n	8009eee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2220      	movs	r2, #32
 8009ee6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	e000      	b.n	8009eee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009eec:	2302      	movs	r3, #2
  }
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3720      	adds	r7, #32
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b08a      	sub	sp, #40	; 0x28
 8009efa:	af02      	add	r7, sp, #8
 8009efc:	60f8      	str	r0, [r7, #12]
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	603b      	str	r3, [r7, #0]
 8009f02:	4613      	mov	r3, r2
 8009f04:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f0c:	2b20      	cmp	r3, #32
 8009f0e:	f040 80b1 	bne.w	800a074 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d002      	beq.n	8009f1e <HAL_UART_Receive+0x28>
 8009f18:	88fb      	ldrh	r3, [r7, #6]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d101      	bne.n	8009f22 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e0a9      	b.n	800a076 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2222      	movs	r2, #34	; 0x22
 8009f2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2200      	movs	r2, #0
 8009f36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f38:	f7f8 fcf2 	bl	8002920 <HAL_GetTick>
 8009f3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	88fa      	ldrh	r2, [r7, #6]
 8009f42:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	88fa      	ldrh	r2, [r7, #6]
 8009f4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	689b      	ldr	r3, [r3, #8]
 8009f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f56:	d10e      	bne.n	8009f76 <HAL_UART_Receive+0x80>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d105      	bne.n	8009f6c <HAL_UART_Receive+0x76>
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009f66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f6a:	e02d      	b.n	8009fc8 <HAL_UART_Receive+0xd2>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	22ff      	movs	r2, #255	; 0xff
 8009f70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f74:	e028      	b.n	8009fc8 <HAL_UART_Receive+0xd2>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10d      	bne.n	8009f9a <HAL_UART_Receive+0xa4>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d104      	bne.n	8009f90 <HAL_UART_Receive+0x9a>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	22ff      	movs	r2, #255	; 0xff
 8009f8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f8e:	e01b      	b.n	8009fc8 <HAL_UART_Receive+0xd2>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	227f      	movs	r2, #127	; 0x7f
 8009f94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009f98:	e016      	b.n	8009fc8 <HAL_UART_Receive+0xd2>
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fa2:	d10d      	bne.n	8009fc0 <HAL_UART_Receive+0xca>
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d104      	bne.n	8009fb6 <HAL_UART_Receive+0xc0>
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	227f      	movs	r2, #127	; 0x7f
 8009fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009fb4:	e008      	b.n	8009fc8 <HAL_UART_Receive+0xd2>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	223f      	movs	r2, #63	; 0x3f
 8009fba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009fbe:	e003      	b.n	8009fc8 <HAL_UART_Receive+0xd2>
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009fce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd8:	d108      	bne.n	8009fec <HAL_UART_Receive+0xf6>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d104      	bne.n	8009fec <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	61bb      	str	r3, [r7, #24]
 8009fea:	e003      	b.n	8009ff4 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8009fec:	68bb      	ldr	r3, [r7, #8]
 8009fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009ff4:	e032      	b.n	800a05c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	2120      	movs	r1, #32
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 ff4a 	bl	800ae9a <UART_WaitOnFlagUntilTimeout>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800a00c:	2303      	movs	r3, #3
 800a00e:	e032      	b.n	800a076 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800a010:	69fb      	ldr	r3, [r7, #28]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d10c      	bne.n	800a030 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	8a7b      	ldrh	r3, [r7, #18]
 800a020:	4013      	ands	r3, r2
 800a022:	b29a      	uxth	r2, r3
 800a024:	69bb      	ldr	r3, [r7, #24]
 800a026:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a028:	69bb      	ldr	r3, [r7, #24]
 800a02a:	3302      	adds	r3, #2
 800a02c:	61bb      	str	r3, [r7, #24]
 800a02e:	e00c      	b.n	800a04a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a036:	b2da      	uxtb	r2, r3
 800a038:	8a7b      	ldrh	r3, [r7, #18]
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	4013      	ands	r3, r2
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	3301      	adds	r3, #1
 800a048:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a050:	b29b      	uxth	r3, r3
 800a052:	3b01      	subs	r3, #1
 800a054:	b29a      	uxth	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a062:	b29b      	uxth	r3, r3
 800a064:	2b00      	cmp	r3, #0
 800a066:	d1c6      	bne.n	8009ff6 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2220      	movs	r2, #32
 800a06c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800a070:	2300      	movs	r3, #0
 800a072:	e000      	b.n	800a076 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800a074:	2302      	movs	r3, #2
  }
}
 800a076:	4618      	mov	r0, r3
 800a078:	3720      	adds	r7, #32
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
	...

0800a080 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08a      	sub	sp, #40	; 0x28
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	4613      	mov	r3, r2
 800a08c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a092:	2b20      	cmp	r3, #32
 800a094:	d165      	bne.n	800a162 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d002      	beq.n	800a0a2 <HAL_UART_Transmit_DMA+0x22>
 800a09c:	88fb      	ldrh	r3, [r7, #6]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e05e      	b.n	800a164 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	88fa      	ldrh	r2, [r7, #6]
 800a0b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	88fa      	ldrh	r2, [r7, #6]
 800a0b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2221      	movs	r2, #33	; 0x21
 800a0c8:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d027      	beq.n	800a122 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d6:	4a25      	ldr	r2, [pc, #148]	; (800a16c <HAL_UART_Transmit_DMA+0xec>)
 800a0d8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0de:	4a24      	ldr	r2, [pc, #144]	; (800a170 <HAL_UART_Transmit_DMA+0xf0>)
 800a0e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e6:	4a23      	ldr	r2, [pc, #140]	; (800a174 <HAL_UART_Transmit_DMA+0xf4>)
 800a0e8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	3328      	adds	r3, #40	; 0x28
 800a102:	461a      	mov	r2, r3
 800a104:	88fb      	ldrh	r3, [r7, #6]
 800a106:	f7f9 fc11 	bl	800392c <HAL_DMA_Start_IT>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d008      	beq.n	800a122 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2210      	movs	r2, #16
 800a114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2220      	movs	r2, #32
 800a11c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e020      	b.n	800a164 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2240      	movs	r2, #64	; 0x40
 800a128:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3308      	adds	r3, #8
 800a130:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	e853 3f00 	ldrex	r3, [r3]
 800a138:	613b      	str	r3, [r7, #16]
   return(result);
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3308      	adds	r3, #8
 800a148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14a:	623a      	str	r2, [r7, #32]
 800a14c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14e:	69f9      	ldr	r1, [r7, #28]
 800a150:	6a3a      	ldr	r2, [r7, #32]
 800a152:	e841 2300 	strex	r3, r2, [r1]
 800a156:	61bb      	str	r3, [r7, #24]
   return(result);
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1e5      	bne.n	800a12a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800a15e:	2300      	movs	r3, #0
 800a160:	e000      	b.n	800a164 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800a162:	2302      	movs	r3, #2
  }
}
 800a164:	4618      	mov	r0, r3
 800a166:	3728      	adds	r7, #40	; 0x28
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	0800b27d 	.word	0x0800b27d
 800a170:	0800b313 	.word	0x0800b313
 800a174:	0800b495 	.word	0x0800b495

0800a178 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08a      	sub	sp, #40	; 0x28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	4613      	mov	r3, r2
 800a184:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a18c:	2b20      	cmp	r3, #32
 800a18e:	d132      	bne.n	800a1f6 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d002      	beq.n	800a19c <HAL_UART_Receive_DMA+0x24>
 800a196:	88fb      	ldrh	r3, [r7, #6]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e02b      	b.n	800a1f8 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d018      	beq.n	800a1e6 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	e853 3f00 	ldrex	r3, [r3]
 800a1c0:	613b      	str	r3, [r7, #16]
   return(result);
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	623b      	str	r3, [r7, #32]
 800a1d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d6:	69f9      	ldr	r1, [r7, #28]
 800a1d8:	6a3a      	ldr	r2, [r7, #32]
 800a1da:	e841 2300 	strex	r3, r2, [r1]
 800a1de:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1e6      	bne.n	800a1b4 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a1e6:	88fb      	ldrh	r3, [r7, #6]
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	68b9      	ldr	r1, [r7, #8]
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f000 ff1b 	bl	800b028 <UART_Start_Receive_DMA>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	e000      	b.n	800a1f8 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a1f6:	2302      	movs	r3, #2
  }
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3728      	adds	r7, #40	; 0x28
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b0ba      	sub	sp, #232	; 0xe8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a226:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a22a:	f640 030f 	movw	r3, #2063	; 0x80f
 800a22e:	4013      	ands	r3, r2
 800a230:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a234:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d115      	bne.n	800a268 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a23c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a240:	f003 0320 	and.w	r3, r3, #32
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00f      	beq.n	800a268 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a24c:	f003 0320 	and.w	r3, r3, #32
 800a250:	2b00      	cmp	r3, #0
 800a252:	d009      	beq.n	800a268 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 8297 	beq.w	800a78c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	4798      	blx	r3
      }
      return;
 800a266:	e291      	b.n	800a78c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a268:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 8117 	beq.w	800a4a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d106      	bne.n	800a28c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a27e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a282:	4b85      	ldr	r3, [pc, #532]	; (800a498 <HAL_UART_IRQHandler+0x298>)
 800a284:	4013      	ands	r3, r2
 800a286:	2b00      	cmp	r3, #0
 800a288:	f000 810a 	beq.w	800a4a0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a28c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a290:	f003 0301 	and.w	r3, r3, #1
 800a294:	2b00      	cmp	r3, #0
 800a296:	d011      	beq.n	800a2bc <HAL_UART_IRQHandler+0xbc>
 800a298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00b      	beq.n	800a2bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2b2:	f043 0201 	orr.w	r2, r3, #1
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2c0:	f003 0302 	and.w	r3, r3, #2
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d011      	beq.n	800a2ec <HAL_UART_IRQHandler+0xec>
 800a2c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2cc:	f003 0301 	and.w	r3, r3, #1
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00b      	beq.n	800a2ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2202      	movs	r2, #2
 800a2da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2e2:	f043 0204 	orr.w	r2, r3, #4
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a2ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2f0:	f003 0304 	and.w	r3, r3, #4
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d011      	beq.n	800a31c <HAL_UART_IRQHandler+0x11c>
 800a2f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2fc:	f003 0301 	and.w	r3, r3, #1
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00b      	beq.n	800a31c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2204      	movs	r2, #4
 800a30a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a312:	f043 0202 	orr.w	r2, r3, #2
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a320:	f003 0308 	and.w	r3, r3, #8
 800a324:	2b00      	cmp	r3, #0
 800a326:	d017      	beq.n	800a358 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a32c:	f003 0320 	and.w	r3, r3, #32
 800a330:	2b00      	cmp	r3, #0
 800a332:	d105      	bne.n	800a340 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a338:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00b      	beq.n	800a358 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2208      	movs	r2, #8
 800a346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a34e:	f043 0208 	orr.w	r2, r3, #8
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a35c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a360:	2b00      	cmp	r3, #0
 800a362:	d012      	beq.n	800a38a <HAL_UART_IRQHandler+0x18a>
 800a364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a368:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00c      	beq.n	800a38a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a378:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a380:	f043 0220 	orr.w	r2, r3, #32
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 81fd 	beq.w	800a790 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a39a:	f003 0320 	and.w	r3, r3, #32
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00d      	beq.n	800a3be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a3a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3a6:	f003 0320 	and.w	r3, r3, #32
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d007      	beq.n	800a3be <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d2:	2b40      	cmp	r3, #64	; 0x40
 800a3d4:	d005      	beq.n	800a3e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a3d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a3da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d04f      	beq.n	800a482 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fee6 	bl	800b1b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3f2:	2b40      	cmp	r3, #64	; 0x40
 800a3f4:	d141      	bne.n	800a47a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a400:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a404:	e853 3f00 	ldrex	r3, [r3]
 800a408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a40c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a414:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	3308      	adds	r3, #8
 800a41e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a422:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a42a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a42e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a432:	e841 2300 	strex	r3, r2, [r1]
 800a436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a43a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1d9      	bne.n	800a3f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a446:	2b00      	cmp	r3, #0
 800a448:	d013      	beq.n	800a472 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a44e:	4a13      	ldr	r2, [pc, #76]	; (800a49c <HAL_UART_IRQHandler+0x29c>)
 800a450:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a456:	4618      	mov	r0, r3
 800a458:	f7f9 fb38 	bl	8003acc <HAL_DMA_Abort_IT>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d017      	beq.n	800a492 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a46c:	4610      	mov	r0, r2
 800a46e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a470:	e00f      	b.n	800a492 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 f9be 	bl	800a7f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a478:	e00b      	b.n	800a492 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f9ba 	bl	800a7f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a480:	e007      	b.n	800a492 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 f9b6 	bl	800a7f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a490:	e17e      	b.n	800a790 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a492:	bf00      	nop
    return;
 800a494:	e17c      	b.n	800a790 <HAL_UART_IRQHandler+0x590>
 800a496:	bf00      	nop
 800a498:	04000120 	.word	0x04000120
 800a49c:	0800b513 	.word	0x0800b513

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	f040 814c 	bne.w	800a742 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a4aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a4ae:	f003 0310 	and.w	r3, r3, #16
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 8145 	beq.w	800a742 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a4b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4bc:	f003 0310 	and.w	r3, r3, #16
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f000 813e 	beq.w	800a742 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2210      	movs	r2, #16
 800a4cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4d8:	2b40      	cmp	r3, #64	; 0x40
 800a4da:	f040 80b6 	bne.w	800a64a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a4ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	f000 8150 	beq.w	800a794 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a4fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4fe:	429a      	cmp	r2, r3
 800a500:	f080 8148 	bcs.w	800a794 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a50a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a512:	69db      	ldr	r3, [r3, #28]
 800a514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a518:	f000 8086 	beq.w	800a628 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a524:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a528:	e853 3f00 	ldrex	r3, [r3]
 800a52c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a530:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a534:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a538:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	461a      	mov	r2, r3
 800a542:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a54a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a552:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a556:	e841 2300 	strex	r3, r2, [r1]
 800a55a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a55e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1da      	bne.n	800a51c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	3308      	adds	r3, #8
 800a56c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a570:	e853 3f00 	ldrex	r3, [r3]
 800a574:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a578:	f023 0301 	bic.w	r3, r3, #1
 800a57c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	3308      	adds	r3, #8
 800a586:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a58a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a58e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a590:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a592:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a59c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e1      	bne.n	800a566 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5ac:	e853 3f00 	ldrex	r3, [r3]
 800a5b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a5b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	3308      	adds	r3, #8
 800a5c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a5c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a5c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a5cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a5ce:	e841 2300 	strex	r3, r2, [r1]
 800a5d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a5d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1e3      	bne.n	800a5a2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2220      	movs	r2, #32
 800a5de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5f0:	e853 3f00 	ldrex	r3, [r3]
 800a5f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a5f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5f8:	f023 0310 	bic.w	r3, r3, #16
 800a5fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	461a      	mov	r2, r3
 800a606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a60a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a60c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a610:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a612:	e841 2300 	strex	r3, r2, [r1]
 800a616:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a618:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1e4      	bne.n	800a5e8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a622:	4618      	mov	r0, r3
 800a624:	f7f9 f9e2 	bl	80039ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2202      	movs	r2, #2
 800a62c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	b29b      	uxth	r3, r3
 800a640:	4619      	mov	r1, r3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f8e0 	bl	800a808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a648:	e0a4      	b.n	800a794 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a656:	b29b      	uxth	r3, r3
 800a658:	1ad3      	subs	r3, r2, r3
 800a65a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a664:	b29b      	uxth	r3, r3
 800a666:	2b00      	cmp	r3, #0
 800a668:	f000 8096 	beq.w	800a798 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800a66c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a670:	2b00      	cmp	r3, #0
 800a672:	f000 8091 	beq.w	800a798 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67e:	e853 3f00 	ldrex	r3, [r3]
 800a682:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a686:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a68a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a698:	647b      	str	r3, [r7, #68]	; 0x44
 800a69a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a69e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6a0:	e841 2300 	strex	r3, r2, [r1]
 800a6a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1e4      	bne.n	800a676 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	3308      	adds	r3, #8
 800a6b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	e853 3f00 	ldrex	r3, [r3]
 800a6ba:	623b      	str	r3, [r7, #32]
   return(result);
 800a6bc:	6a3b      	ldr	r3, [r7, #32]
 800a6be:	f023 0301 	bic.w	r3, r3, #1
 800a6c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	3308      	adds	r3, #8
 800a6cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a6d0:	633a      	str	r2, [r7, #48]	; 0x30
 800a6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d8:	e841 2300 	strex	r3, r2, [r1]
 800a6dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e3      	bne.n	800a6ac <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	e853 3f00 	ldrex	r3, [r3]
 800a704:	60fb      	str	r3, [r7, #12]
   return(result);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f023 0310 	bic.w	r3, r3, #16
 800a70c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	461a      	mov	r2, r3
 800a716:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a71a:	61fb      	str	r3, [r7, #28]
 800a71c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a71e:	69b9      	ldr	r1, [r7, #24]
 800a720:	69fa      	ldr	r2, [r7, #28]
 800a722:	e841 2300 	strex	r3, r2, [r1]
 800a726:	617b      	str	r3, [r7, #20]
   return(result);
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d1e4      	bne.n	800a6f8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2202      	movs	r2, #2
 800a732:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a734:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a738:	4619      	mov	r1, r3
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f864 	bl	800a808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a740:	e02a      	b.n	800a798 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00e      	beq.n	800a76c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a74e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a756:	2b00      	cmp	r3, #0
 800a758:	d008      	beq.n	800a76c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d01c      	beq.n	800a79c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	4798      	blx	r3
    }
    return;
 800a76a:	e017      	b.n	800a79c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a774:	2b00      	cmp	r3, #0
 800a776:	d012      	beq.n	800a79e <HAL_UART_IRQHandler+0x59e>
 800a778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00c      	beq.n	800a79e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 feda 	bl	800b53e <UART_EndTransmit_IT>
    return;
 800a78a:	e008      	b.n	800a79e <HAL_UART_IRQHandler+0x59e>
      return;
 800a78c:	bf00      	nop
 800a78e:	e006      	b.n	800a79e <HAL_UART_IRQHandler+0x59e>
    return;
 800a790:	bf00      	nop
 800a792:	e004      	b.n	800a79e <HAL_UART_IRQHandler+0x59e>
      return;
 800a794:	bf00      	nop
 800a796:	e002      	b.n	800a79e <HAL_UART_IRQHandler+0x59e>
      return;
 800a798:	bf00      	nop
 800a79a:	e000      	b.n	800a79e <HAL_UART_IRQHandler+0x59e>
    return;
 800a79c:	bf00      	nop
  }

}
 800a79e:	37e8      	adds	r7, #232	; 0xe8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a7ac:	bf00      	nop
 800a7ae:	370c      	adds	r7, #12
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a7c0:	bf00      	nop
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800a7d4:	bf00      	nop
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	460b      	mov	r3, r1
 800a812:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b088      	sub	sp, #32
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a828:	2300      	movs	r3, #0
 800a82a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	689a      	ldr	r2, [r3, #8]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	431a      	orrs	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	431a      	orrs	r2, r3
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	69db      	ldr	r3, [r3, #28]
 800a840:	4313      	orrs	r3, r2
 800a842:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	4ba6      	ldr	r3, [pc, #664]	; (800aae4 <UART_SetConfig+0x2c4>)
 800a84c:	4013      	ands	r3, r2
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	6812      	ldr	r2, [r2, #0]
 800a852:	6979      	ldr	r1, [r7, #20]
 800a854:	430b      	orrs	r3, r1
 800a856:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	68da      	ldr	r2, [r3, #12]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	430a      	orrs	r2, r1
 800a86c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6a1b      	ldr	r3, [r3, #32]
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	4313      	orrs	r3, r2
 800a87c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	697a      	ldr	r2, [r7, #20]
 800a88e:	430a      	orrs	r2, r1
 800a890:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a94      	ldr	r2, [pc, #592]	; (800aae8 <UART_SetConfig+0x2c8>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d120      	bne.n	800a8de <UART_SetConfig+0xbe>
 800a89c:	4b93      	ldr	r3, [pc, #588]	; (800aaec <UART_SetConfig+0x2cc>)
 800a89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8a2:	f003 0303 	and.w	r3, r3, #3
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	d816      	bhi.n	800a8d8 <UART_SetConfig+0xb8>
 800a8aa:	a201      	add	r2, pc, #4	; (adr r2, 800a8b0 <UART_SetConfig+0x90>)
 800a8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b0:	0800a8c1 	.word	0x0800a8c1
 800a8b4:	0800a8cd 	.word	0x0800a8cd
 800a8b8:	0800a8c7 	.word	0x0800a8c7
 800a8bc:	0800a8d3 	.word	0x0800a8d3
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	77fb      	strb	r3, [r7, #31]
 800a8c4:	e150      	b.n	800ab68 <UART_SetConfig+0x348>
 800a8c6:	2302      	movs	r3, #2
 800a8c8:	77fb      	strb	r3, [r7, #31]
 800a8ca:	e14d      	b.n	800ab68 <UART_SetConfig+0x348>
 800a8cc:	2304      	movs	r3, #4
 800a8ce:	77fb      	strb	r3, [r7, #31]
 800a8d0:	e14a      	b.n	800ab68 <UART_SetConfig+0x348>
 800a8d2:	2308      	movs	r3, #8
 800a8d4:	77fb      	strb	r3, [r7, #31]
 800a8d6:	e147      	b.n	800ab68 <UART_SetConfig+0x348>
 800a8d8:	2310      	movs	r3, #16
 800a8da:	77fb      	strb	r3, [r7, #31]
 800a8dc:	e144      	b.n	800ab68 <UART_SetConfig+0x348>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a83      	ldr	r2, [pc, #524]	; (800aaf0 <UART_SetConfig+0x2d0>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d132      	bne.n	800a94e <UART_SetConfig+0x12e>
 800a8e8:	4b80      	ldr	r3, [pc, #512]	; (800aaec <UART_SetConfig+0x2cc>)
 800a8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8ee:	f003 030c 	and.w	r3, r3, #12
 800a8f2:	2b0c      	cmp	r3, #12
 800a8f4:	d828      	bhi.n	800a948 <UART_SetConfig+0x128>
 800a8f6:	a201      	add	r2, pc, #4	; (adr r2, 800a8fc <UART_SetConfig+0xdc>)
 800a8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8fc:	0800a931 	.word	0x0800a931
 800a900:	0800a949 	.word	0x0800a949
 800a904:	0800a949 	.word	0x0800a949
 800a908:	0800a949 	.word	0x0800a949
 800a90c:	0800a93d 	.word	0x0800a93d
 800a910:	0800a949 	.word	0x0800a949
 800a914:	0800a949 	.word	0x0800a949
 800a918:	0800a949 	.word	0x0800a949
 800a91c:	0800a937 	.word	0x0800a937
 800a920:	0800a949 	.word	0x0800a949
 800a924:	0800a949 	.word	0x0800a949
 800a928:	0800a949 	.word	0x0800a949
 800a92c:	0800a943 	.word	0x0800a943
 800a930:	2300      	movs	r3, #0
 800a932:	77fb      	strb	r3, [r7, #31]
 800a934:	e118      	b.n	800ab68 <UART_SetConfig+0x348>
 800a936:	2302      	movs	r3, #2
 800a938:	77fb      	strb	r3, [r7, #31]
 800a93a:	e115      	b.n	800ab68 <UART_SetConfig+0x348>
 800a93c:	2304      	movs	r3, #4
 800a93e:	77fb      	strb	r3, [r7, #31]
 800a940:	e112      	b.n	800ab68 <UART_SetConfig+0x348>
 800a942:	2308      	movs	r3, #8
 800a944:	77fb      	strb	r3, [r7, #31]
 800a946:	e10f      	b.n	800ab68 <UART_SetConfig+0x348>
 800a948:	2310      	movs	r3, #16
 800a94a:	77fb      	strb	r3, [r7, #31]
 800a94c:	e10c      	b.n	800ab68 <UART_SetConfig+0x348>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a68      	ldr	r2, [pc, #416]	; (800aaf4 <UART_SetConfig+0x2d4>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d120      	bne.n	800a99a <UART_SetConfig+0x17a>
 800a958:	4b64      	ldr	r3, [pc, #400]	; (800aaec <UART_SetConfig+0x2cc>)
 800a95a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a95e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a962:	2b30      	cmp	r3, #48	; 0x30
 800a964:	d013      	beq.n	800a98e <UART_SetConfig+0x16e>
 800a966:	2b30      	cmp	r3, #48	; 0x30
 800a968:	d814      	bhi.n	800a994 <UART_SetConfig+0x174>
 800a96a:	2b20      	cmp	r3, #32
 800a96c:	d009      	beq.n	800a982 <UART_SetConfig+0x162>
 800a96e:	2b20      	cmp	r3, #32
 800a970:	d810      	bhi.n	800a994 <UART_SetConfig+0x174>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d002      	beq.n	800a97c <UART_SetConfig+0x15c>
 800a976:	2b10      	cmp	r3, #16
 800a978:	d006      	beq.n	800a988 <UART_SetConfig+0x168>
 800a97a:	e00b      	b.n	800a994 <UART_SetConfig+0x174>
 800a97c:	2300      	movs	r3, #0
 800a97e:	77fb      	strb	r3, [r7, #31]
 800a980:	e0f2      	b.n	800ab68 <UART_SetConfig+0x348>
 800a982:	2302      	movs	r3, #2
 800a984:	77fb      	strb	r3, [r7, #31]
 800a986:	e0ef      	b.n	800ab68 <UART_SetConfig+0x348>
 800a988:	2304      	movs	r3, #4
 800a98a:	77fb      	strb	r3, [r7, #31]
 800a98c:	e0ec      	b.n	800ab68 <UART_SetConfig+0x348>
 800a98e:	2308      	movs	r3, #8
 800a990:	77fb      	strb	r3, [r7, #31]
 800a992:	e0e9      	b.n	800ab68 <UART_SetConfig+0x348>
 800a994:	2310      	movs	r3, #16
 800a996:	77fb      	strb	r3, [r7, #31]
 800a998:	e0e6      	b.n	800ab68 <UART_SetConfig+0x348>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4a56      	ldr	r2, [pc, #344]	; (800aaf8 <UART_SetConfig+0x2d8>)
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d120      	bne.n	800a9e6 <UART_SetConfig+0x1c6>
 800a9a4:	4b51      	ldr	r3, [pc, #324]	; (800aaec <UART_SetConfig+0x2cc>)
 800a9a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a9ae:	2bc0      	cmp	r3, #192	; 0xc0
 800a9b0:	d013      	beq.n	800a9da <UART_SetConfig+0x1ba>
 800a9b2:	2bc0      	cmp	r3, #192	; 0xc0
 800a9b4:	d814      	bhi.n	800a9e0 <UART_SetConfig+0x1c0>
 800a9b6:	2b80      	cmp	r3, #128	; 0x80
 800a9b8:	d009      	beq.n	800a9ce <UART_SetConfig+0x1ae>
 800a9ba:	2b80      	cmp	r3, #128	; 0x80
 800a9bc:	d810      	bhi.n	800a9e0 <UART_SetConfig+0x1c0>
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <UART_SetConfig+0x1a8>
 800a9c2:	2b40      	cmp	r3, #64	; 0x40
 800a9c4:	d006      	beq.n	800a9d4 <UART_SetConfig+0x1b4>
 800a9c6:	e00b      	b.n	800a9e0 <UART_SetConfig+0x1c0>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	77fb      	strb	r3, [r7, #31]
 800a9cc:	e0cc      	b.n	800ab68 <UART_SetConfig+0x348>
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	77fb      	strb	r3, [r7, #31]
 800a9d2:	e0c9      	b.n	800ab68 <UART_SetConfig+0x348>
 800a9d4:	2304      	movs	r3, #4
 800a9d6:	77fb      	strb	r3, [r7, #31]
 800a9d8:	e0c6      	b.n	800ab68 <UART_SetConfig+0x348>
 800a9da:	2308      	movs	r3, #8
 800a9dc:	77fb      	strb	r3, [r7, #31]
 800a9de:	e0c3      	b.n	800ab68 <UART_SetConfig+0x348>
 800a9e0:	2310      	movs	r3, #16
 800a9e2:	77fb      	strb	r3, [r7, #31]
 800a9e4:	e0c0      	b.n	800ab68 <UART_SetConfig+0x348>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a44      	ldr	r2, [pc, #272]	; (800aafc <UART_SetConfig+0x2dc>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d125      	bne.n	800aa3c <UART_SetConfig+0x21c>
 800a9f0:	4b3e      	ldr	r3, [pc, #248]	; (800aaec <UART_SetConfig+0x2cc>)
 800a9f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a9fe:	d017      	beq.n	800aa30 <UART_SetConfig+0x210>
 800aa00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa04:	d817      	bhi.n	800aa36 <UART_SetConfig+0x216>
 800aa06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa0a:	d00b      	beq.n	800aa24 <UART_SetConfig+0x204>
 800aa0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa10:	d811      	bhi.n	800aa36 <UART_SetConfig+0x216>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d003      	beq.n	800aa1e <UART_SetConfig+0x1fe>
 800aa16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa1a:	d006      	beq.n	800aa2a <UART_SetConfig+0x20a>
 800aa1c:	e00b      	b.n	800aa36 <UART_SetConfig+0x216>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	77fb      	strb	r3, [r7, #31]
 800aa22:	e0a1      	b.n	800ab68 <UART_SetConfig+0x348>
 800aa24:	2302      	movs	r3, #2
 800aa26:	77fb      	strb	r3, [r7, #31]
 800aa28:	e09e      	b.n	800ab68 <UART_SetConfig+0x348>
 800aa2a:	2304      	movs	r3, #4
 800aa2c:	77fb      	strb	r3, [r7, #31]
 800aa2e:	e09b      	b.n	800ab68 <UART_SetConfig+0x348>
 800aa30:	2308      	movs	r3, #8
 800aa32:	77fb      	strb	r3, [r7, #31]
 800aa34:	e098      	b.n	800ab68 <UART_SetConfig+0x348>
 800aa36:	2310      	movs	r3, #16
 800aa38:	77fb      	strb	r3, [r7, #31]
 800aa3a:	e095      	b.n	800ab68 <UART_SetConfig+0x348>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a2f      	ldr	r2, [pc, #188]	; (800ab00 <UART_SetConfig+0x2e0>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d125      	bne.n	800aa92 <UART_SetConfig+0x272>
 800aa46:	4b29      	ldr	r3, [pc, #164]	; (800aaec <UART_SetConfig+0x2cc>)
 800aa48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa54:	d017      	beq.n	800aa86 <UART_SetConfig+0x266>
 800aa56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa5a:	d817      	bhi.n	800aa8c <UART_SetConfig+0x26c>
 800aa5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa60:	d00b      	beq.n	800aa7a <UART_SetConfig+0x25a>
 800aa62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa66:	d811      	bhi.n	800aa8c <UART_SetConfig+0x26c>
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d003      	beq.n	800aa74 <UART_SetConfig+0x254>
 800aa6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa70:	d006      	beq.n	800aa80 <UART_SetConfig+0x260>
 800aa72:	e00b      	b.n	800aa8c <UART_SetConfig+0x26c>
 800aa74:	2301      	movs	r3, #1
 800aa76:	77fb      	strb	r3, [r7, #31]
 800aa78:	e076      	b.n	800ab68 <UART_SetConfig+0x348>
 800aa7a:	2302      	movs	r3, #2
 800aa7c:	77fb      	strb	r3, [r7, #31]
 800aa7e:	e073      	b.n	800ab68 <UART_SetConfig+0x348>
 800aa80:	2304      	movs	r3, #4
 800aa82:	77fb      	strb	r3, [r7, #31]
 800aa84:	e070      	b.n	800ab68 <UART_SetConfig+0x348>
 800aa86:	2308      	movs	r3, #8
 800aa88:	77fb      	strb	r3, [r7, #31]
 800aa8a:	e06d      	b.n	800ab68 <UART_SetConfig+0x348>
 800aa8c:	2310      	movs	r3, #16
 800aa8e:	77fb      	strb	r3, [r7, #31]
 800aa90:	e06a      	b.n	800ab68 <UART_SetConfig+0x348>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a1b      	ldr	r2, [pc, #108]	; (800ab04 <UART_SetConfig+0x2e4>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d138      	bne.n	800ab0e <UART_SetConfig+0x2ee>
 800aa9c:	4b13      	ldr	r3, [pc, #76]	; (800aaec <UART_SetConfig+0x2cc>)
 800aa9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaa2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aaa6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aaaa:	d017      	beq.n	800aadc <UART_SetConfig+0x2bc>
 800aaac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aab0:	d82a      	bhi.n	800ab08 <UART_SetConfig+0x2e8>
 800aab2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aab6:	d00b      	beq.n	800aad0 <UART_SetConfig+0x2b0>
 800aab8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aabc:	d824      	bhi.n	800ab08 <UART_SetConfig+0x2e8>
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d003      	beq.n	800aaca <UART_SetConfig+0x2aa>
 800aac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aac6:	d006      	beq.n	800aad6 <UART_SetConfig+0x2b6>
 800aac8:	e01e      	b.n	800ab08 <UART_SetConfig+0x2e8>
 800aaca:	2300      	movs	r3, #0
 800aacc:	77fb      	strb	r3, [r7, #31]
 800aace:	e04b      	b.n	800ab68 <UART_SetConfig+0x348>
 800aad0:	2302      	movs	r3, #2
 800aad2:	77fb      	strb	r3, [r7, #31]
 800aad4:	e048      	b.n	800ab68 <UART_SetConfig+0x348>
 800aad6:	2304      	movs	r3, #4
 800aad8:	77fb      	strb	r3, [r7, #31]
 800aada:	e045      	b.n	800ab68 <UART_SetConfig+0x348>
 800aadc:	2308      	movs	r3, #8
 800aade:	77fb      	strb	r3, [r7, #31]
 800aae0:	e042      	b.n	800ab68 <UART_SetConfig+0x348>
 800aae2:	bf00      	nop
 800aae4:	efff69f3 	.word	0xefff69f3
 800aae8:	40011000 	.word	0x40011000
 800aaec:	40023800 	.word	0x40023800
 800aaf0:	40004400 	.word	0x40004400
 800aaf4:	40004800 	.word	0x40004800
 800aaf8:	40004c00 	.word	0x40004c00
 800aafc:	40005000 	.word	0x40005000
 800ab00:	40011400 	.word	0x40011400
 800ab04:	40007800 	.word	0x40007800
 800ab08:	2310      	movs	r3, #16
 800ab0a:	77fb      	strb	r3, [r7, #31]
 800ab0c:	e02c      	b.n	800ab68 <UART_SetConfig+0x348>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a72      	ldr	r2, [pc, #456]	; (800acdc <UART_SetConfig+0x4bc>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d125      	bne.n	800ab64 <UART_SetConfig+0x344>
 800ab18:	4b71      	ldr	r3, [pc, #452]	; (800ace0 <UART_SetConfig+0x4c0>)
 800ab1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab1e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ab22:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ab26:	d017      	beq.n	800ab58 <UART_SetConfig+0x338>
 800ab28:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ab2c:	d817      	bhi.n	800ab5e <UART_SetConfig+0x33e>
 800ab2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab32:	d00b      	beq.n	800ab4c <UART_SetConfig+0x32c>
 800ab34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab38:	d811      	bhi.n	800ab5e <UART_SetConfig+0x33e>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d003      	beq.n	800ab46 <UART_SetConfig+0x326>
 800ab3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab42:	d006      	beq.n	800ab52 <UART_SetConfig+0x332>
 800ab44:	e00b      	b.n	800ab5e <UART_SetConfig+0x33e>
 800ab46:	2300      	movs	r3, #0
 800ab48:	77fb      	strb	r3, [r7, #31]
 800ab4a:	e00d      	b.n	800ab68 <UART_SetConfig+0x348>
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	77fb      	strb	r3, [r7, #31]
 800ab50:	e00a      	b.n	800ab68 <UART_SetConfig+0x348>
 800ab52:	2304      	movs	r3, #4
 800ab54:	77fb      	strb	r3, [r7, #31]
 800ab56:	e007      	b.n	800ab68 <UART_SetConfig+0x348>
 800ab58:	2308      	movs	r3, #8
 800ab5a:	77fb      	strb	r3, [r7, #31]
 800ab5c:	e004      	b.n	800ab68 <UART_SetConfig+0x348>
 800ab5e:	2310      	movs	r3, #16
 800ab60:	77fb      	strb	r3, [r7, #31]
 800ab62:	e001      	b.n	800ab68 <UART_SetConfig+0x348>
 800ab64:	2310      	movs	r3, #16
 800ab66:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	69db      	ldr	r3, [r3, #28]
 800ab6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab70:	d15b      	bne.n	800ac2a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800ab72:	7ffb      	ldrb	r3, [r7, #31]
 800ab74:	2b08      	cmp	r3, #8
 800ab76:	d828      	bhi.n	800abca <UART_SetConfig+0x3aa>
 800ab78:	a201      	add	r2, pc, #4	; (adr r2, 800ab80 <UART_SetConfig+0x360>)
 800ab7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab7e:	bf00      	nop
 800ab80:	0800aba5 	.word	0x0800aba5
 800ab84:	0800abad 	.word	0x0800abad
 800ab88:	0800abb5 	.word	0x0800abb5
 800ab8c:	0800abcb 	.word	0x0800abcb
 800ab90:	0800abbb 	.word	0x0800abbb
 800ab94:	0800abcb 	.word	0x0800abcb
 800ab98:	0800abcb 	.word	0x0800abcb
 800ab9c:	0800abcb 	.word	0x0800abcb
 800aba0:	0800abc3 	.word	0x0800abc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aba4:	f7fd face 	bl	8008144 <HAL_RCC_GetPCLK1Freq>
 800aba8:	61b8      	str	r0, [r7, #24]
        break;
 800abaa:	e013      	b.n	800abd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800abac:	f7fd fade 	bl	800816c <HAL_RCC_GetPCLK2Freq>
 800abb0:	61b8      	str	r0, [r7, #24]
        break;
 800abb2:	e00f      	b.n	800abd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800abb4:	4b4b      	ldr	r3, [pc, #300]	; (800ace4 <UART_SetConfig+0x4c4>)
 800abb6:	61bb      	str	r3, [r7, #24]
        break;
 800abb8:	e00c      	b.n	800abd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800abba:	f7fd f9b1 	bl	8007f20 <HAL_RCC_GetSysClockFreq>
 800abbe:	61b8      	str	r0, [r7, #24]
        break;
 800abc0:	e008      	b.n	800abd4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800abc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abc6:	61bb      	str	r3, [r7, #24]
        break;
 800abc8:	e004      	b.n	800abd4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800abca:	2300      	movs	r3, #0
 800abcc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	77bb      	strb	r3, [r7, #30]
        break;
 800abd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d074      	beq.n	800acc4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	005a      	lsls	r2, r3, #1
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685b      	ldr	r3, [r3, #4]
 800abe2:	085b      	lsrs	r3, r3, #1
 800abe4:	441a      	add	r2, r3
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	fbb2 f3f3 	udiv	r3, r2, r3
 800abee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b0f      	cmp	r3, #15
 800abf4:	d916      	bls.n	800ac24 <UART_SetConfig+0x404>
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abfc:	d212      	bcs.n	800ac24 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	f023 030f 	bic.w	r3, r3, #15
 800ac06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	085b      	lsrs	r3, r3, #1
 800ac0c:	b29b      	uxth	r3, r3
 800ac0e:	f003 0307 	and.w	r3, r3, #7
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	89fb      	ldrh	r3, [r7, #14]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	89fa      	ldrh	r2, [r7, #14]
 800ac20:	60da      	str	r2, [r3, #12]
 800ac22:	e04f      	b.n	800acc4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	77bb      	strb	r3, [r7, #30]
 800ac28:	e04c      	b.n	800acc4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ac2a:	7ffb      	ldrb	r3, [r7, #31]
 800ac2c:	2b08      	cmp	r3, #8
 800ac2e:	d828      	bhi.n	800ac82 <UART_SetConfig+0x462>
 800ac30:	a201      	add	r2, pc, #4	; (adr r2, 800ac38 <UART_SetConfig+0x418>)
 800ac32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac36:	bf00      	nop
 800ac38:	0800ac5d 	.word	0x0800ac5d
 800ac3c:	0800ac65 	.word	0x0800ac65
 800ac40:	0800ac6d 	.word	0x0800ac6d
 800ac44:	0800ac83 	.word	0x0800ac83
 800ac48:	0800ac73 	.word	0x0800ac73
 800ac4c:	0800ac83 	.word	0x0800ac83
 800ac50:	0800ac83 	.word	0x0800ac83
 800ac54:	0800ac83 	.word	0x0800ac83
 800ac58:	0800ac7b 	.word	0x0800ac7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac5c:	f7fd fa72 	bl	8008144 <HAL_RCC_GetPCLK1Freq>
 800ac60:	61b8      	str	r0, [r7, #24]
        break;
 800ac62:	e013      	b.n	800ac8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac64:	f7fd fa82 	bl	800816c <HAL_RCC_GetPCLK2Freq>
 800ac68:	61b8      	str	r0, [r7, #24]
        break;
 800ac6a:	e00f      	b.n	800ac8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac6c:	4b1d      	ldr	r3, [pc, #116]	; (800ace4 <UART_SetConfig+0x4c4>)
 800ac6e:	61bb      	str	r3, [r7, #24]
        break;
 800ac70:	e00c      	b.n	800ac8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac72:	f7fd f955 	bl	8007f20 <HAL_RCC_GetSysClockFreq>
 800ac76:	61b8      	str	r0, [r7, #24]
        break;
 800ac78:	e008      	b.n	800ac8c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac7e:	61bb      	str	r3, [r7, #24]
        break;
 800ac80:	e004      	b.n	800ac8c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ac82:	2300      	movs	r3, #0
 800ac84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	77bb      	strb	r3, [r7, #30]
        break;
 800ac8a:	bf00      	nop
    }

    if (pclk != 0U)
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d018      	beq.n	800acc4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	085a      	lsrs	r2, r3, #1
 800ac98:	69bb      	ldr	r3, [r7, #24]
 800ac9a:	441a      	add	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	2b0f      	cmp	r3, #15
 800acaa:	d909      	bls.n	800acc0 <UART_SetConfig+0x4a0>
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acb2:	d205      	bcs.n	800acc0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	b29a      	uxth	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	60da      	str	r2, [r3, #12]
 800acbe:	e001      	b.n	800acc4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800acd0:	7fbb      	ldrb	r3, [r7, #30]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3720      	adds	r7, #32
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	40007c00 	.word	0x40007c00
 800ace0:	40023800 	.word	0x40023800
 800ace4:	00f42400 	.word	0x00f42400

0800ace8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00a      	beq.n	800ad12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad16:	f003 0302 	and.w	r3, r3, #2
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00a      	beq.n	800ad34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	430a      	orrs	r2, r1
 800ad32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad38:	f003 0304 	and.w	r3, r3, #4
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00a      	beq.n	800ad56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	430a      	orrs	r2, r1
 800ad54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5a:	f003 0308 	and.w	r3, r3, #8
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d00a      	beq.n	800ad78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	430a      	orrs	r2, r1
 800ad76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7c:	f003 0310 	and.w	r3, r3, #16
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d00a      	beq.n	800ad9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	430a      	orrs	r2, r1
 800ad98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9e:	f003 0320 	and.w	r3, r3, #32
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00a      	beq.n	800adbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	430a      	orrs	r2, r1
 800adba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d01a      	beq.n	800adfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	430a      	orrs	r2, r1
 800addc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ade6:	d10a      	bne.n	800adfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	430a      	orrs	r2, r1
 800adfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00a      	beq.n	800ae20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	430a      	orrs	r2, r1
 800ae1e:	605a      	str	r2, [r3, #4]
  }
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b086      	sub	sp, #24
 800ae30:	af02      	add	r7, sp, #8
 800ae32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ae3c:	f7f7 fd70 	bl	8002920 <HAL_GetTick>
 800ae40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 0308 	and.w	r3, r3, #8
 800ae4c:	2b08      	cmp	r3, #8
 800ae4e:	d10e      	bne.n	800ae6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ae50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ae54:	9300      	str	r3, [sp, #0]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f81b 	bl	800ae9a <UART_WaitOnFlagUntilTimeout>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	e011      	b.n	800ae92 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2220      	movs	r2, #32
 800ae72:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2220      	movs	r2, #32
 800ae78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3710      	adds	r7, #16
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b09c      	sub	sp, #112	; 0x70
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	60b9      	str	r1, [r7, #8]
 800aea4:	603b      	str	r3, [r7, #0]
 800aea6:	4613      	mov	r3, r2
 800aea8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aeaa:	e0a7      	b.n	800affc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aeae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeb2:	f000 80a3 	beq.w	800affc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeb6:	f7f7 fd33 	bl	8002920 <HAL_GetTick>
 800aeba:	4602      	mov	r2, r0
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	1ad3      	subs	r3, r2, r3
 800aec0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d302      	bcc.n	800aecc <UART_WaitOnFlagUntilTimeout+0x32>
 800aec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d13f      	bne.n	800af4c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aed4:	e853 3f00 	ldrex	r3, [r3]
 800aed8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aeda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aedc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aee0:	667b      	str	r3, [r7, #100]	; 0x64
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	461a      	mov	r2, r3
 800aee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aeec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aef0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aef2:	e841 2300 	strex	r3, r2, [r1]
 800aef6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1e6      	bne.n	800aecc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	3308      	adds	r3, #8
 800af04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af08:	e853 3f00 	ldrex	r3, [r3]
 800af0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800af0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af10:	f023 0301 	bic.w	r3, r3, #1
 800af14:	663b      	str	r3, [r7, #96]	; 0x60
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	3308      	adds	r3, #8
 800af1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af1e:	64ba      	str	r2, [r7, #72]	; 0x48
 800af20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800af24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af26:	e841 2300 	strex	r3, r2, [r1]
 800af2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800af2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1e5      	bne.n	800aefe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2220      	movs	r2, #32
 800af36:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2220      	movs	r2, #32
 800af3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800af48:	2303      	movs	r3, #3
 800af4a:	e068      	b.n	800b01e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 0304 	and.w	r3, r3, #4
 800af56:	2b00      	cmp	r3, #0
 800af58:	d050      	beq.n	800affc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	69db      	ldr	r3, [r3, #28]
 800af60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800af64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af68:	d148      	bne.n	800affc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800af72:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7c:	e853 3f00 	ldrex	r3, [r3]
 800af80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af88:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	461a      	mov	r2, r3
 800af90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af92:	637b      	str	r3, [r7, #52]	; 0x34
 800af94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af9a:	e841 2300 	strex	r3, r2, [r1]
 800af9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800afa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1e6      	bne.n	800af74 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	3308      	adds	r3, #8
 800afac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	e853 3f00 	ldrex	r3, [r3]
 800afb4:	613b      	str	r3, [r7, #16]
   return(result);
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f023 0301 	bic.w	r3, r3, #1
 800afbc:	66bb      	str	r3, [r7, #104]	; 0x68
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3308      	adds	r3, #8
 800afc4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800afc6:	623a      	str	r2, [r7, #32]
 800afc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afca:	69f9      	ldr	r1, [r7, #28]
 800afcc:	6a3a      	ldr	r2, [r7, #32]
 800afce:	e841 2300 	strex	r3, r2, [r1]
 800afd2:	61bb      	str	r3, [r7, #24]
   return(result);
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1e5      	bne.n	800afa6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2220      	movs	r2, #32
 800afde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2220      	movs	r2, #32
 800afe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2220      	movs	r2, #32
 800afec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800aff8:	2303      	movs	r3, #3
 800affa:	e010      	b.n	800b01e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	69da      	ldr	r2, [r3, #28]
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	4013      	ands	r3, r2
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	429a      	cmp	r2, r3
 800b00a:	bf0c      	ite	eq
 800b00c:	2301      	moveq	r3, #1
 800b00e:	2300      	movne	r3, #0
 800b010:	b2db      	uxtb	r3, r3
 800b012:	461a      	mov	r2, r3
 800b014:	79fb      	ldrb	r3, [r7, #7]
 800b016:	429a      	cmp	r2, r3
 800b018:	f43f af48 	beq.w	800aeac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b01c:	2300      	movs	r3, #0
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3770      	adds	r7, #112	; 0x70
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
	...

0800b028 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b096      	sub	sp, #88	; 0x58
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	60f8      	str	r0, [r7, #12]
 800b030:	60b9      	str	r1, [r7, #8]
 800b032:	4613      	mov	r3, r2
 800b034:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	68ba      	ldr	r2, [r7, #8]
 800b03a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	88fa      	ldrh	r2, [r7, #6]
 800b040:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2222      	movs	r2, #34	; 0x22
 800b050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d028      	beq.n	800b0ae <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b060:	4a3e      	ldr	r2, [pc, #248]	; (800b15c <UART_Start_Receive_DMA+0x134>)
 800b062:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b068:	4a3d      	ldr	r2, [pc, #244]	; (800b160 <UART_Start_Receive_DMA+0x138>)
 800b06a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b070:	4a3c      	ldr	r2, [pc, #240]	; (800b164 <UART_Start_Receive_DMA+0x13c>)
 800b072:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b078:	2200      	movs	r2, #0
 800b07a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3324      	adds	r3, #36	; 0x24
 800b086:	4619      	mov	r1, r3
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08c:	461a      	mov	r2, r3
 800b08e:	88fb      	ldrh	r3, [r7, #6]
 800b090:	f7f8 fc4c 	bl	800392c <HAL_DMA_Start_IT>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d009      	beq.n	800b0ae <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2210      	movs	r2, #16
 800b09e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2220      	movs	r2, #32
 800b0a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	e051      	b.n	800b152 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d018      	beq.n	800b0e8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0be:	e853 3f00 	ldrex	r3, [r3]
 800b0c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0ca:	657b      	str	r3, [r7, #84]	; 0x54
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0d6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b0da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0dc:	e841 2300 	strex	r3, r2, [r1]
 800b0e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b0e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d1e6      	bne.n	800b0b6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	3308      	adds	r3, #8
 800b0ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f2:	e853 3f00 	ldrex	r3, [r3]
 800b0f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fa:	f043 0301 	orr.w	r3, r3, #1
 800b0fe:	653b      	str	r3, [r7, #80]	; 0x50
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	3308      	adds	r3, #8
 800b106:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b108:	637a      	str	r2, [r7, #52]	; 0x34
 800b10a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b10e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b110:	e841 2300 	strex	r3, r2, [r1]
 800b114:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1e5      	bne.n	800b0e8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3308      	adds	r3, #8
 800b122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	e853 3f00 	ldrex	r3, [r3]
 800b12a:	613b      	str	r3, [r7, #16]
   return(result);
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b132:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	3308      	adds	r3, #8
 800b13a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b13c:	623a      	str	r2, [r7, #32]
 800b13e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b140:	69f9      	ldr	r1, [r7, #28]
 800b142:	6a3a      	ldr	r2, [r7, #32]
 800b144:	e841 2300 	strex	r3, r2, [r1]
 800b148:	61bb      	str	r3, [r7, #24]
   return(result);
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e5      	bne.n	800b11c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3758      	adds	r7, #88	; 0x58
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	0800b32f 	.word	0x0800b32f
 800b160:	0800b457 	.word	0x0800b457
 800b164:	0800b495 	.word	0x0800b495

0800b168 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b168:	b480      	push	{r7}
 800b16a:	b089      	sub	sp, #36	; 0x24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	e853 3f00 	ldrex	r3, [r3]
 800b17c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b184:	61fb      	str	r3, [r7, #28]
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	461a      	mov	r2, r3
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	61bb      	str	r3, [r7, #24]
 800b190:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b192:	6979      	ldr	r1, [r7, #20]
 800b194:	69ba      	ldr	r2, [r7, #24]
 800b196:	e841 2300 	strex	r3, r2, [r1]
 800b19a:	613b      	str	r3, [r7, #16]
   return(result);
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1e6      	bne.n	800b170 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2220      	movs	r2, #32
 800b1a6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b1a8:	bf00      	nop
 800b1aa:	3724      	adds	r7, #36	; 0x24
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b095      	sub	sp, #84	; 0x54
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c4:	e853 3f00 	ldrex	r3, [r3]
 800b1c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1da:	643b      	str	r3, [r7, #64]	; 0x40
 800b1dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1e2:	e841 2300 	strex	r3, r2, [r1]
 800b1e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1e6      	bne.n	800b1bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3308      	adds	r3, #8
 800b1f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	e853 3f00 	ldrex	r3, [r3]
 800b1fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1fe:	69fb      	ldr	r3, [r7, #28]
 800b200:	f023 0301 	bic.w	r3, r3, #1
 800b204:	64bb      	str	r3, [r7, #72]	; 0x48
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	3308      	adds	r3, #8
 800b20c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b20e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b210:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b214:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b216:	e841 2300 	strex	r3, r2, [r1]
 800b21a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d1e5      	bne.n	800b1ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b226:	2b01      	cmp	r3, #1
 800b228:	d118      	bne.n	800b25c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	e853 3f00 	ldrex	r3, [r3]
 800b236:	60bb      	str	r3, [r7, #8]
   return(result);
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	f023 0310 	bic.w	r3, r3, #16
 800b23e:	647b      	str	r3, [r7, #68]	; 0x44
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	461a      	mov	r2, r3
 800b246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b248:	61bb      	str	r3, [r7, #24]
 800b24a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b24c:	6979      	ldr	r1, [r7, #20]
 800b24e:	69ba      	ldr	r2, [r7, #24]
 800b250:	e841 2300 	strex	r3, r2, [r1]
 800b254:	613b      	str	r3, [r7, #16]
   return(result);
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d1e6      	bne.n	800b22a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2220      	movs	r2, #32
 800b260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b270:	bf00      	nop
 800b272:	3754      	adds	r7, #84	; 0x54
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b090      	sub	sp, #64	; 0x40
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b288:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	69db      	ldr	r3, [r3, #28]
 800b28e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b292:	d037      	beq.n	800b304 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b296:	2200      	movs	r2, #0
 800b298:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b29c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	3308      	adds	r3, #8
 800b2a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a6:	e853 3f00 	ldrex	r3, [r3]
 800b2aa:	623b      	str	r3, [r7, #32]
   return(result);
 800b2ac:	6a3b      	ldr	r3, [r7, #32]
 800b2ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	3308      	adds	r3, #8
 800b2ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2bc:	633a      	str	r2, [r7, #48]	; 0x30
 800b2be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b2c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2c4:	e841 2300 	strex	r3, r2, [r1]
 800b2c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1e5      	bne.n	800b29c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	e853 3f00 	ldrex	r3, [r3]
 800b2dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b2e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2ee:	61fb      	str	r3, [r7, #28]
 800b2f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f2:	69b9      	ldr	r1, [r7, #24]
 800b2f4:	69fa      	ldr	r2, [r7, #28]
 800b2f6:	e841 2300 	strex	r3, r2, [r1]
 800b2fa:	617b      	str	r3, [r7, #20]
   return(result);
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d1e6      	bne.n	800b2d0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b302:	e002      	b.n	800b30a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b304:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b306:	f7ff fa4d 	bl	800a7a4 <HAL_UART_TxCpltCallback>
}
 800b30a:	bf00      	nop
 800b30c:	3740      	adds	r7, #64	; 0x40
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b084      	sub	sp, #16
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	f7ff fa49 	bl	800a7b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b326:	bf00      	nop
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}

0800b32e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b32e:	b580      	push	{r7, lr}
 800b330:	b09c      	sub	sp, #112	; 0x70
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	69db      	ldr	r3, [r3, #28]
 800b340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b344:	d071      	beq.n	800b42a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b348:	2200      	movs	r2, #0
 800b34a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b34e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b356:	e853 3f00 	ldrex	r3, [r3]
 800b35a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b35c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b35e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b362:	66bb      	str	r3, [r7, #104]	; 0x68
 800b364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	461a      	mov	r2, r3
 800b36a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b36c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b36e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b370:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b372:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b374:	e841 2300 	strex	r3, r2, [r1]
 800b378:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b37a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1e6      	bne.n	800b34e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	3308      	adds	r3, #8
 800b386:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38a:	e853 3f00 	ldrex	r3, [r3]
 800b38e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b392:	f023 0301 	bic.w	r3, r3, #1
 800b396:	667b      	str	r3, [r7, #100]	; 0x64
 800b398:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	3308      	adds	r3, #8
 800b39e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b3a0:	647a      	str	r2, [r7, #68]	; 0x44
 800b3a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b3a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3a8:	e841 2300 	strex	r3, r2, [r1]
 800b3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b3ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1e5      	bne.n	800b380 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b3b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	3308      	adds	r3, #8
 800b3ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	e853 3f00 	ldrex	r3, [r3]
 800b3c2:	623b      	str	r3, [r7, #32]
   return(result);
 800b3c4:	6a3b      	ldr	r3, [r7, #32]
 800b3c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3ca:	663b      	str	r3, [r7, #96]	; 0x60
 800b3cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b3d4:	633a      	str	r2, [r7, #48]	; 0x30
 800b3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3dc:	e841 2300 	strex	r3, r2, [r1]
 800b3e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1e5      	bne.n	800b3b4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b3e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3ea:	2220      	movs	r2, #32
 800b3ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d118      	bne.n	800b42a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	e853 3f00 	ldrex	r3, [r3]
 800b404:	60fb      	str	r3, [r7, #12]
   return(result);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f023 0310 	bic.w	r3, r3, #16
 800b40c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b40e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b416:	61fb      	str	r3, [r7, #28]
 800b418:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41a:	69b9      	ldr	r1, [r7, #24]
 800b41c:	69fa      	ldr	r2, [r7, #28]
 800b41e:	e841 2300 	strex	r3, r2, [r1]
 800b422:	617b      	str	r3, [r7, #20]
   return(result);
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1e6      	bne.n	800b3f8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b42a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b42c:	2200      	movs	r2, #0
 800b42e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b434:	2b01      	cmp	r3, #1
 800b436:	d107      	bne.n	800b448 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b43a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b43e:	4619      	mov	r1, r3
 800b440:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b442:	f7ff f9e1 	bl	800a808 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b446:	e002      	b.n	800b44e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b448:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b44a:	f7ff f9bf 	bl	800a7cc <HAL_UART_RxCpltCallback>
}
 800b44e:	bf00      	nop
 800b450:	3770      	adds	r7, #112	; 0x70
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}

0800b456 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b456:	b580      	push	{r7, lr}
 800b458:	b084      	sub	sp, #16
 800b45a:	af00      	add	r7, sp, #0
 800b45c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b462:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2201      	movs	r2, #1
 800b468:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d109      	bne.n	800b486 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b478:	085b      	lsrs	r3, r3, #1
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	4619      	mov	r1, r3
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f7ff f9c2 	bl	800a808 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b484:	e002      	b.n	800b48c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f7ff f9aa 	bl	800a7e0 <HAL_UART_RxHalfCpltCallback>
}
 800b48c:	bf00      	nop
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4a6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4ae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ba:	2b80      	cmp	r3, #128	; 0x80
 800b4bc:	d109      	bne.n	800b4d2 <UART_DMAError+0x3e>
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	2b21      	cmp	r3, #33	; 0x21
 800b4c2:	d106      	bne.n	800b4d2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b4cc:	6978      	ldr	r0, [r7, #20]
 800b4ce:	f7ff fe4b 	bl	800b168 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4dc:	2b40      	cmp	r3, #64	; 0x40
 800b4de:	d109      	bne.n	800b4f4 <UART_DMAError+0x60>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2b22      	cmp	r3, #34	; 0x22
 800b4e4:	d106      	bne.n	800b4f4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b4ee:	6978      	ldr	r0, [r7, #20]
 800b4f0:	f7ff fe60 	bl	800b1b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4fa:	f043 0210 	orr.w	r2, r3, #16
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b504:	6978      	ldr	r0, [r7, #20]
 800b506:	f7ff f975 	bl	800a7f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b50a:	bf00      	nop
 800b50c:	3718      	adds	r7, #24
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b084      	sub	sp, #16
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	2200      	movs	r2, #0
 800b52c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f7ff f95f 	bl	800a7f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b536:	bf00      	nop
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b088      	sub	sp, #32
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	e853 3f00 	ldrex	r3, [r3]
 800b552:	60bb      	str	r3, [r7, #8]
   return(result);
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b55a:	61fb      	str	r3, [r7, #28]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	461a      	mov	r2, r3
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	61bb      	str	r3, [r7, #24]
 800b566:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b568:	6979      	ldr	r1, [r7, #20]
 800b56a:	69ba      	ldr	r2, [r7, #24]
 800b56c:	e841 2300 	strex	r3, r2, [r1]
 800b570:	613b      	str	r3, [r7, #16]
   return(result);
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d1e6      	bne.n	800b546 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2220      	movs	r2, #32
 800b57c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2200      	movs	r2, #0
 800b582:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f7ff f90d 	bl	800a7a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b58a:	bf00      	nop
 800b58c:	3720      	adds	r7, #32
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
	...

0800b594 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b594:	b084      	sub	sp, #16
 800b596:	b580      	push	{r7, lr}
 800b598:	b084      	sub	sp, #16
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	f107 001c 	add.w	r0, r7, #28
 800b5a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d120      	bne.n	800b5ee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	68da      	ldr	r2, [r3, #12]
 800b5bc:	4b20      	ldr	r3, [pc, #128]	; (800b640 <USB_CoreInit+0xac>)
 800b5be:	4013      	ands	r3, r2
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b5d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d105      	bne.n	800b5e2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f000 fa96 	bl	800bb14 <USB_CoreReset>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	73fb      	strb	r3, [r7, #15]
 800b5ec:	e010      	b.n	800b610 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 fa8a 	bl	800bb14 <USB_CoreReset>
 800b600:	4603      	mov	r3, r0
 800b602:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b608:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b612:	2b01      	cmp	r3, #1
 800b614:	d10b      	bne.n	800b62e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	f043 0206 	orr.w	r2, r3, #6
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	f043 0220 	orr.w	r2, r3, #32
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b63a:	b004      	add	sp, #16
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	ffbdffbf 	.word	0xffbdffbf

0800b644 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	f023 0201 	bic.w	r2, r3, #1
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b084      	sub	sp, #16
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	460b      	mov	r3, r1
 800b670:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b672:	2300      	movs	r3, #0
 800b674:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b682:	78fb      	ldrb	r3, [r7, #3]
 800b684:	2b01      	cmp	r3, #1
 800b686:	d115      	bne.n	800b6b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	68db      	ldr	r3, [r3, #12]
 800b68c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b694:	2001      	movs	r0, #1
 800b696:	f7f7 f94f 	bl	8002938 <HAL_Delay>
      ms++;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	3301      	adds	r3, #1
 800b69e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fa29 	bl	800baf8 <USB_GetMode>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d01e      	beq.n	800b6ea <USB_SetCurrentMode+0x84>
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2b31      	cmp	r3, #49	; 0x31
 800b6b0:	d9f0      	bls.n	800b694 <USB_SetCurrentMode+0x2e>
 800b6b2:	e01a      	b.n	800b6ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b6b4:	78fb      	ldrb	r3, [r7, #3]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d115      	bne.n	800b6e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b6c6:	2001      	movs	r0, #1
 800b6c8:	f7f7 f936 	bl	8002938 <HAL_Delay>
      ms++;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f000 fa10 	bl	800baf8 <USB_GetMode>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d005      	beq.n	800b6ea <USB_SetCurrentMode+0x84>
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2b31      	cmp	r3, #49	; 0x31
 800b6e2:	d9f0      	bls.n	800b6c6 <USB_SetCurrentMode+0x60>
 800b6e4:	e001      	b.n	800b6ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e005      	b.n	800b6f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	2b32      	cmp	r3, #50	; 0x32
 800b6ee:	d101      	bne.n	800b6f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e000      	b.n	800b6f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b700:	b084      	sub	sp, #16
 800b702:	b580      	push	{r7, lr}
 800b704:	b086      	sub	sp, #24
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b70e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b712:	2300      	movs	r3, #0
 800b714:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b71a:	2300      	movs	r3, #0
 800b71c:	613b      	str	r3, [r7, #16]
 800b71e:	e009      	b.n	800b734 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	3340      	adds	r3, #64	; 0x40
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	4413      	add	r3, r2
 800b72a:	2200      	movs	r2, #0
 800b72c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	3301      	adds	r3, #1
 800b732:	613b      	str	r3, [r7, #16]
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	2b0e      	cmp	r3, #14
 800b738:	d9f2      	bls.n	800b720 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b73a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d11c      	bne.n	800b77a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	68fa      	ldr	r2, [r7, #12]
 800b74a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b74e:	f043 0302 	orr.w	r3, r3, #2
 800b752:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b758:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	e005      	b.n	800b786 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b77e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b78c:	461a      	mov	r2, r3
 800b78e:	2300      	movs	r3, #0
 800b790:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b798:	4619      	mov	r1, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	680b      	ldr	r3, [r1, #0]
 800b7a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d10c      	bne.n	800b7c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d104      	bne.n	800b7bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f965 	bl	800ba84 <USB_SetDevSpeed>
 800b7ba:	e008      	b.n	800b7ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b7bc:	2101      	movs	r1, #1
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f960 	bl	800ba84 <USB_SetDevSpeed>
 800b7c4:	e003      	b.n	800b7ce <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b7c6:	2103      	movs	r1, #3
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 f95b 	bl	800ba84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b7ce:	2110      	movs	r1, #16
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f8f3 	bl	800b9bc <USB_FlushTxFifo>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b7dc:	2301      	movs	r3, #1
 800b7de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 f91f 	bl	800ba24 <USB_FlushRxFifo>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b802:	461a      	mov	r2, r3
 800b804:	2300      	movs	r3, #0
 800b806:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b80e:	461a      	mov	r2, r3
 800b810:	2300      	movs	r3, #0
 800b812:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b814:	2300      	movs	r3, #0
 800b816:	613b      	str	r3, [r7, #16]
 800b818:	e043      	b.n	800b8a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	015a      	lsls	r2, r3, #5
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	4413      	add	r3, r2
 800b822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b82c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b830:	d118      	bne.n	800b864 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d10a      	bne.n	800b84e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	015a      	lsls	r2, r3, #5
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	4413      	add	r3, r2
 800b840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b844:	461a      	mov	r2, r3
 800b846:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	e013      	b.n	800b876 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	015a      	lsls	r2, r3, #5
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	4413      	add	r3, r2
 800b856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b85a:	461a      	mov	r2, r3
 800b85c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b860:	6013      	str	r3, [r2, #0]
 800b862:	e008      	b.n	800b876 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	015a      	lsls	r2, r3, #5
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	4413      	add	r3, r2
 800b86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b870:	461a      	mov	r2, r3
 800b872:	2300      	movs	r3, #0
 800b874:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	015a      	lsls	r2, r3, #5
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	4413      	add	r3, r2
 800b87e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b882:	461a      	mov	r2, r3
 800b884:	2300      	movs	r3, #0
 800b886:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	015a      	lsls	r2, r3, #5
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	4413      	add	r3, r2
 800b890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b894:	461a      	mov	r2, r3
 800b896:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b89a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	3301      	adds	r3, #1
 800b8a0:	613b      	str	r3, [r7, #16]
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a4:	693a      	ldr	r2, [r7, #16]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d3b7      	bcc.n	800b81a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	613b      	str	r3, [r7, #16]
 800b8ae:	e043      	b.n	800b938 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	015a      	lsls	r2, r3, #5
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b8c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b8c6:	d118      	bne.n	800b8fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10a      	bne.n	800b8e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	015a      	lsls	r2, r3, #5
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8da:	461a      	mov	r2, r3
 800b8dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b8e0:	6013      	str	r3, [r2, #0]
 800b8e2:	e013      	b.n	800b90c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	015a      	lsls	r2, r3, #5
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b8f6:	6013      	str	r3, [r2, #0]
 800b8f8:	e008      	b.n	800b90c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	015a      	lsls	r2, r3, #5
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	4413      	add	r3, r2
 800b902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b906:	461a      	mov	r2, r3
 800b908:	2300      	movs	r3, #0
 800b90a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	015a      	lsls	r2, r3, #5
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4413      	add	r3, r2
 800b914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b918:	461a      	mov	r2, r3
 800b91a:	2300      	movs	r3, #0
 800b91c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	015a      	lsls	r2, r3, #5
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	4413      	add	r3, r2
 800b926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b92a:	461a      	mov	r2, r3
 800b92c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b930:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	3301      	adds	r3, #1
 800b936:	613b      	str	r3, [r7, #16]
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	693a      	ldr	r2, [r7, #16]
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d3b7      	bcc.n	800b8b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b94e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b952:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b960:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b964:	2b00      	cmp	r3, #0
 800b966:	d105      	bne.n	800b974 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	f043 0210 	orr.w	r2, r3, #16
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	699a      	ldr	r2, [r3, #24]
 800b978:	4b0e      	ldr	r3, [pc, #56]	; (800b9b4 <USB_DevInit+0x2b4>)
 800b97a:	4313      	orrs	r3, r2
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b982:	2b00      	cmp	r3, #0
 800b984:	d005      	beq.n	800b992 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	f043 0208 	orr.w	r2, r3, #8
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b994:	2b01      	cmp	r3, #1
 800b996:	d105      	bne.n	800b9a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	699a      	ldr	r2, [r3, #24]
 800b99c:	4b06      	ldr	r3, [pc, #24]	; (800b9b8 <USB_DevInit+0x2b8>)
 800b99e:	4313      	orrs	r3, r2
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3718      	adds	r7, #24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9b0:	b004      	add	sp, #16
 800b9b2:	4770      	bx	lr
 800b9b4:	803c3800 	.word	0x803c3800
 800b9b8:	40000004 	.word	0x40000004

0800b9bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	4a13      	ldr	r2, [pc, #76]	; (800ba20 <USB_FlushTxFifo+0x64>)
 800b9d4:	4293      	cmp	r3, r2
 800b9d6:	d901      	bls.n	800b9dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b9d8:	2303      	movs	r3, #3
 800b9da:	e01b      	b.n	800ba14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	daf2      	bge.n	800b9ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	019b      	lsls	r3, r3, #6
 800b9ec:	f043 0220 	orr.w	r2, r3, #32
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	4a08      	ldr	r2, [pc, #32]	; (800ba20 <USB_FlushTxFifo+0x64>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d901      	bls.n	800ba06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ba02:	2303      	movs	r3, #3
 800ba04:	e006      	b.n	800ba14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	f003 0320 	and.w	r3, r3, #32
 800ba0e:	2b20      	cmp	r3, #32
 800ba10:	d0f0      	beq.n	800b9f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ba12:	2300      	movs	r3, #0
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	3714      	adds	r7, #20
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr
 800ba20:	00030d40 	.word	0x00030d40

0800ba24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	3301      	adds	r3, #1
 800ba34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	4a11      	ldr	r2, [pc, #68]	; (800ba80 <USB_FlushRxFifo+0x5c>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d901      	bls.n	800ba42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ba3e:	2303      	movs	r3, #3
 800ba40:	e018      	b.n	800ba74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	daf2      	bge.n	800ba30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2210      	movs	r2, #16
 800ba52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	3301      	adds	r3, #1
 800ba58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	4a08      	ldr	r2, [pc, #32]	; (800ba80 <USB_FlushRxFifo+0x5c>)
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d901      	bls.n	800ba66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e006      	b.n	800ba74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	f003 0310 	and.w	r3, r3, #16
 800ba6e:	2b10      	cmp	r3, #16
 800ba70:	d0f0      	beq.n	800ba54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3714      	adds	r7, #20
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	00030d40 	.word	0x00030d40

0800ba84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	78fb      	ldrb	r3, [r7, #3]
 800ba9e:	68f9      	ldr	r1, [r7, #12]
 800baa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800baa4:	4313      	orrs	r3, r2
 800baa6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3714      	adds	r7, #20
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b085      	sub	sp, #20
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bad0:	f023 0303 	bic.w	r3, r3, #3
 800bad4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bae4:	f043 0302 	orr.w	r3, r3, #2
 800bae8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	f003 0301 	and.w	r3, r3, #1
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	370c      	adds	r7, #12
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr

0800bb14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb14:	b480      	push	{r7}
 800bb16:	b085      	sub	sp, #20
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3301      	adds	r3, #1
 800bb24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	4a13      	ldr	r2, [pc, #76]	; (800bb78 <USB_CoreReset+0x64>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d901      	bls.n	800bb32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb2e:	2303      	movs	r3, #3
 800bb30:	e01b      	b.n	800bb6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	daf2      	bge.n	800bb20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	f043 0201 	orr.w	r2, r3, #1
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	4a09      	ldr	r2, [pc, #36]	; (800bb78 <USB_CoreReset+0x64>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d901      	bls.n	800bb5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb58:	2303      	movs	r3, #3
 800bb5a:	e006      	b.n	800bb6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	f003 0301 	and.w	r3, r3, #1
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d0f0      	beq.n	800bb4a <USB_CoreReset+0x36>

  return HAL_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3714      	adds	r7, #20
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb74:	4770      	bx	lr
 800bb76:	bf00      	nop
 800bb78:	00030d40 	.word	0x00030d40

0800bb7c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800bb82:	4b8d      	ldr	r3, [pc, #564]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bb84:	22c0      	movs	r2, #192	; 0xc0
 800bb86:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800bb88:	4b8b      	ldr	r3, [pc, #556]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bb8a:	22a8      	movs	r2, #168	; 0xa8
 800bb8c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800bb8e:	4b8a      	ldr	r3, [pc, #552]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bb90:	2201      	movs	r2, #1
 800bb92:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800bb94:	4b88      	ldr	r3, [pc, #544]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bb96:	2202      	movs	r2, #2
 800bb98:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800bb9a:	4b88      	ldr	r3, [pc, #544]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bb9c:	22ff      	movs	r2, #255	; 0xff
 800bb9e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800bba0:	4b86      	ldr	r3, [pc, #536]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bba2:	22ff      	movs	r2, #255	; 0xff
 800bba4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800bba6:	4b85      	ldr	r3, [pc, #532]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bba8:	22ff      	movs	r2, #255	; 0xff
 800bbaa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800bbac:	4b83      	ldr	r3, [pc, #524]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bbae:	2200      	movs	r2, #0
 800bbb0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800bbb2:	4b83      	ldr	r3, [pc, #524]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800bbb8:	4b81      	ldr	r3, [pc, #516]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bbba:	2200      	movs	r2, #0
 800bbbc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800bbbe:	4b80      	ldr	r3, [pc, #512]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800bbc4:	4b7e      	ldr	r3, [pc, #504]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800bbca:	f000 fd15 	bl	800c5f8 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800bbce:	4b7a      	ldr	r3, [pc, #488]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	061a      	lsls	r2, r3, #24
 800bbd4:	4b78      	ldr	r3, [pc, #480]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bbd6:	785b      	ldrb	r3, [r3, #1]
 800bbd8:	041b      	lsls	r3, r3, #16
 800bbda:	431a      	orrs	r2, r3
 800bbdc:	4b76      	ldr	r3, [pc, #472]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bbde:	789b      	ldrb	r3, [r3, #2]
 800bbe0:	021b      	lsls	r3, r3, #8
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	4a74      	ldr	r2, [pc, #464]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bbe6:	78d2      	ldrb	r2, [r2, #3]
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	061a      	lsls	r2, r3, #24
 800bbec:	4b72      	ldr	r3, [pc, #456]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	0619      	lsls	r1, r3, #24
 800bbf2:	4b71      	ldr	r3, [pc, #452]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bbf4:	785b      	ldrb	r3, [r3, #1]
 800bbf6:	041b      	lsls	r3, r3, #16
 800bbf8:	4319      	orrs	r1, r3
 800bbfa:	4b6f      	ldr	r3, [pc, #444]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bbfc:	789b      	ldrb	r3, [r3, #2]
 800bbfe:	021b      	lsls	r3, r3, #8
 800bc00:	430b      	orrs	r3, r1
 800bc02:	496d      	ldr	r1, [pc, #436]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bc04:	78c9      	ldrb	r1, [r1, #3]
 800bc06:	430b      	orrs	r3, r1
 800bc08:	021b      	lsls	r3, r3, #8
 800bc0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc0e:	431a      	orrs	r2, r3
 800bc10:	4b69      	ldr	r3, [pc, #420]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	0619      	lsls	r1, r3, #24
 800bc16:	4b68      	ldr	r3, [pc, #416]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bc18:	785b      	ldrb	r3, [r3, #1]
 800bc1a:	041b      	lsls	r3, r3, #16
 800bc1c:	4319      	orrs	r1, r3
 800bc1e:	4b66      	ldr	r3, [pc, #408]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bc20:	789b      	ldrb	r3, [r3, #2]
 800bc22:	021b      	lsls	r3, r3, #8
 800bc24:	430b      	orrs	r3, r1
 800bc26:	4964      	ldr	r1, [pc, #400]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bc28:	78c9      	ldrb	r1, [r1, #3]
 800bc2a:	430b      	orrs	r3, r1
 800bc2c:	0a1b      	lsrs	r3, r3, #8
 800bc2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bc32:	431a      	orrs	r2, r3
 800bc34:	4b60      	ldr	r3, [pc, #384]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	0619      	lsls	r1, r3, #24
 800bc3a:	4b5f      	ldr	r3, [pc, #380]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bc3c:	785b      	ldrb	r3, [r3, #1]
 800bc3e:	041b      	lsls	r3, r3, #16
 800bc40:	4319      	orrs	r1, r3
 800bc42:	4b5d      	ldr	r3, [pc, #372]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bc44:	789b      	ldrb	r3, [r3, #2]
 800bc46:	021b      	lsls	r3, r3, #8
 800bc48:	430b      	orrs	r3, r1
 800bc4a:	495b      	ldr	r1, [pc, #364]	; (800bdb8 <MX_LWIP_Init+0x23c>)
 800bc4c:	78c9      	ldrb	r1, [r1, #3]
 800bc4e:	430b      	orrs	r3, r1
 800bc50:	0e1b      	lsrs	r3, r3, #24
 800bc52:	4313      	orrs	r3, r2
 800bc54:	4a5b      	ldr	r2, [pc, #364]	; (800bdc4 <MX_LWIP_Init+0x248>)
 800bc56:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800bc58:	4b58      	ldr	r3, [pc, #352]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	061a      	lsls	r2, r3, #24
 800bc5e:	4b57      	ldr	r3, [pc, #348]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bc60:	785b      	ldrb	r3, [r3, #1]
 800bc62:	041b      	lsls	r3, r3, #16
 800bc64:	431a      	orrs	r2, r3
 800bc66:	4b55      	ldr	r3, [pc, #340]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bc68:	789b      	ldrb	r3, [r3, #2]
 800bc6a:	021b      	lsls	r3, r3, #8
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	4a53      	ldr	r2, [pc, #332]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bc70:	78d2      	ldrb	r2, [r2, #3]
 800bc72:	4313      	orrs	r3, r2
 800bc74:	061a      	lsls	r2, r3, #24
 800bc76:	4b51      	ldr	r3, [pc, #324]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	0619      	lsls	r1, r3, #24
 800bc7c:	4b4f      	ldr	r3, [pc, #316]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bc7e:	785b      	ldrb	r3, [r3, #1]
 800bc80:	041b      	lsls	r3, r3, #16
 800bc82:	4319      	orrs	r1, r3
 800bc84:	4b4d      	ldr	r3, [pc, #308]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bc86:	789b      	ldrb	r3, [r3, #2]
 800bc88:	021b      	lsls	r3, r3, #8
 800bc8a:	430b      	orrs	r3, r1
 800bc8c:	494b      	ldr	r1, [pc, #300]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bc8e:	78c9      	ldrb	r1, [r1, #3]
 800bc90:	430b      	orrs	r3, r1
 800bc92:	021b      	lsls	r3, r3, #8
 800bc94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc98:	431a      	orrs	r2, r3
 800bc9a:	4b48      	ldr	r3, [pc, #288]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	0619      	lsls	r1, r3, #24
 800bca0:	4b46      	ldr	r3, [pc, #280]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bca2:	785b      	ldrb	r3, [r3, #1]
 800bca4:	041b      	lsls	r3, r3, #16
 800bca6:	4319      	orrs	r1, r3
 800bca8:	4b44      	ldr	r3, [pc, #272]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bcaa:	789b      	ldrb	r3, [r3, #2]
 800bcac:	021b      	lsls	r3, r3, #8
 800bcae:	430b      	orrs	r3, r1
 800bcb0:	4942      	ldr	r1, [pc, #264]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bcb2:	78c9      	ldrb	r1, [r1, #3]
 800bcb4:	430b      	orrs	r3, r1
 800bcb6:	0a1b      	lsrs	r3, r3, #8
 800bcb8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bcbc:	431a      	orrs	r2, r3
 800bcbe:	4b3f      	ldr	r3, [pc, #252]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	0619      	lsls	r1, r3, #24
 800bcc4:	4b3d      	ldr	r3, [pc, #244]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bcc6:	785b      	ldrb	r3, [r3, #1]
 800bcc8:	041b      	lsls	r3, r3, #16
 800bcca:	4319      	orrs	r1, r3
 800bccc:	4b3b      	ldr	r3, [pc, #236]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bcce:	789b      	ldrb	r3, [r3, #2]
 800bcd0:	021b      	lsls	r3, r3, #8
 800bcd2:	430b      	orrs	r3, r1
 800bcd4:	4939      	ldr	r1, [pc, #228]	; (800bdbc <MX_LWIP_Init+0x240>)
 800bcd6:	78c9      	ldrb	r1, [r1, #3]
 800bcd8:	430b      	orrs	r3, r1
 800bcda:	0e1b      	lsrs	r3, r3, #24
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	4a3a      	ldr	r2, [pc, #232]	; (800bdc8 <MX_LWIP_Init+0x24c>)
 800bce0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bce2:	4b37      	ldr	r3, [pc, #220]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	061a      	lsls	r2, r3, #24
 800bce8:	4b35      	ldr	r3, [pc, #212]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bcea:	785b      	ldrb	r3, [r3, #1]
 800bcec:	041b      	lsls	r3, r3, #16
 800bcee:	431a      	orrs	r2, r3
 800bcf0:	4b33      	ldr	r3, [pc, #204]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bcf2:	789b      	ldrb	r3, [r3, #2]
 800bcf4:	021b      	lsls	r3, r3, #8
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	4a31      	ldr	r2, [pc, #196]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bcfa:	78d2      	ldrb	r2, [r2, #3]
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	061a      	lsls	r2, r3, #24
 800bd00:	4b2f      	ldr	r3, [pc, #188]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	0619      	lsls	r1, r3, #24
 800bd06:	4b2e      	ldr	r3, [pc, #184]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bd08:	785b      	ldrb	r3, [r3, #1]
 800bd0a:	041b      	lsls	r3, r3, #16
 800bd0c:	4319      	orrs	r1, r3
 800bd0e:	4b2c      	ldr	r3, [pc, #176]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bd10:	789b      	ldrb	r3, [r3, #2]
 800bd12:	021b      	lsls	r3, r3, #8
 800bd14:	430b      	orrs	r3, r1
 800bd16:	492a      	ldr	r1, [pc, #168]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bd18:	78c9      	ldrb	r1, [r1, #3]
 800bd1a:	430b      	orrs	r3, r1
 800bd1c:	021b      	lsls	r3, r3, #8
 800bd1e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bd22:	431a      	orrs	r2, r3
 800bd24:	4b26      	ldr	r3, [pc, #152]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	0619      	lsls	r1, r3, #24
 800bd2a:	4b25      	ldr	r3, [pc, #148]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bd2c:	785b      	ldrb	r3, [r3, #1]
 800bd2e:	041b      	lsls	r3, r3, #16
 800bd30:	4319      	orrs	r1, r3
 800bd32:	4b23      	ldr	r3, [pc, #140]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bd34:	789b      	ldrb	r3, [r3, #2]
 800bd36:	021b      	lsls	r3, r3, #8
 800bd38:	430b      	orrs	r3, r1
 800bd3a:	4921      	ldr	r1, [pc, #132]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bd3c:	78c9      	ldrb	r1, [r1, #3]
 800bd3e:	430b      	orrs	r3, r1
 800bd40:	0a1b      	lsrs	r3, r3, #8
 800bd42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bd46:	431a      	orrs	r2, r3
 800bd48:	4b1d      	ldr	r3, [pc, #116]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	0619      	lsls	r1, r3, #24
 800bd4e:	4b1c      	ldr	r3, [pc, #112]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bd50:	785b      	ldrb	r3, [r3, #1]
 800bd52:	041b      	lsls	r3, r3, #16
 800bd54:	4319      	orrs	r1, r3
 800bd56:	4b1a      	ldr	r3, [pc, #104]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bd58:	789b      	ldrb	r3, [r3, #2]
 800bd5a:	021b      	lsls	r3, r3, #8
 800bd5c:	430b      	orrs	r3, r1
 800bd5e:	4918      	ldr	r1, [pc, #96]	; (800bdc0 <MX_LWIP_Init+0x244>)
 800bd60:	78c9      	ldrb	r1, [r1, #3]
 800bd62:	430b      	orrs	r3, r1
 800bd64:	0e1b      	lsrs	r3, r3, #24
 800bd66:	4313      	orrs	r3, r2
 800bd68:	4a18      	ldr	r2, [pc, #96]	; (800bdcc <MX_LWIP_Init+0x250>)
 800bd6a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800bd6c:	4b18      	ldr	r3, [pc, #96]	; (800bdd0 <MX_LWIP_Init+0x254>)
 800bd6e:	9302      	str	r3, [sp, #8]
 800bd70:	4b18      	ldr	r3, [pc, #96]	; (800bdd4 <MX_LWIP_Init+0x258>)
 800bd72:	9301      	str	r3, [sp, #4]
 800bd74:	2300      	movs	r3, #0
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	4b14      	ldr	r3, [pc, #80]	; (800bdcc <MX_LWIP_Init+0x250>)
 800bd7a:	4a13      	ldr	r2, [pc, #76]	; (800bdc8 <MX_LWIP_Init+0x24c>)
 800bd7c:	4911      	ldr	r1, [pc, #68]	; (800bdc4 <MX_LWIP_Init+0x248>)
 800bd7e:	4816      	ldr	r0, [pc, #88]	; (800bdd8 <MX_LWIP_Init+0x25c>)
 800bd80:	f001 f926 	bl	800cfd0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bd84:	4814      	ldr	r0, [pc, #80]	; (800bdd8 <MX_LWIP_Init+0x25c>)
 800bd86:	f001 fad5 	bl	800d334 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800bd8a:	4b13      	ldr	r3, [pc, #76]	; (800bdd8 <MX_LWIP_Init+0x25c>)
 800bd8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bd90:	089b      	lsrs	r3, r3, #2
 800bd92:	f003 0301 	and.w	r3, r3, #1
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d003      	beq.n	800bda4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800bd9c:	480e      	ldr	r0, [pc, #56]	; (800bdd8 <MX_LWIP_Init+0x25c>)
 800bd9e:	f001 fad9 	bl	800d354 <netif_set_up>
 800bda2:	e002      	b.n	800bdaa <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800bda4:	480c      	ldr	r0, [pc, #48]	; (800bdd8 <MX_LWIP_Init+0x25c>)
 800bda6:	f001 fb41 	bl	800d42c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800bdaa:	490c      	ldr	r1, [pc, #48]	; (800bddc <MX_LWIP_Init+0x260>)
 800bdac:	480a      	ldr	r0, [pc, #40]	; (800bdd8 <MX_LWIP_Init+0x25c>)
 800bdae:	f001 fbd3 	bl	800d558 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bdb2:	bf00      	nop
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	20000fb8 	.word	0x20000fb8
 800bdbc:	20000fbc 	.word	0x20000fbc
 800bdc0:	20000fc0 	.word	0x20000fc0
 800bdc4:	20000fac 	.word	0x20000fac
 800bdc8:	20000fb0 	.word	0x20000fb0
 800bdcc:	20000fb4 	.word	0x20000fb4
 800bdd0:	0801667d 	.word	0x0801667d
 800bdd4:	0800c0f5 	.word	0x0800c0f5
 800bdd8:	20000f78 	.word	0x20000f78
 800bddc:	0800bde1 	.word	0x0800bde1

0800bde0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <SCB_InvalidateDCache_by_Addr>:
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b087      	sub	sp, #28
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800be06:	2320      	movs	r3, #32
 800be08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800be0a:	f3bf 8f4f 	dsb	sy
}
 800be0e:	bf00      	nop
    while (op_size > 0) {
 800be10:	e00b      	b.n	800be2a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800be12:	4a0d      	ldr	r2, [pc, #52]	; (800be48 <SCB_InvalidateDCache_by_Addr+0x54>)
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	693a      	ldr	r2, [r7, #16]
 800be1e:	4413      	add	r3, r2
 800be20:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	1ad3      	subs	r3, r2, r3
 800be28:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dcf0      	bgt.n	800be12 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800be30:	f3bf 8f4f 	dsb	sy
}
 800be34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800be36:	f3bf 8f6f 	isb	sy
}
 800be3a:	bf00      	nop
}
 800be3c:	bf00      	nop
 800be3e:	371c      	adds	r7, #28
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr
 800be48:	e000ed00 	.word	0xe000ed00

0800be4c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800be58:	4b40      	ldr	r3, [pc, #256]	; (800bf5c <low_level_init+0x110>)
 800be5a:	4a41      	ldr	r2, [pc, #260]	; (800bf60 <low_level_init+0x114>)
 800be5c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800be5e:	2300      	movs	r3, #0
 800be60:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800be62:	2380      	movs	r3, #128	; 0x80
 800be64:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800be66:	23e1      	movs	r3, #225	; 0xe1
 800be68:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800be6a:	2300      	movs	r3, #0
 800be6c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800be6e:	2300      	movs	r3, #0
 800be70:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800be72:	2300      	movs	r3, #0
 800be74:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800be76:	4a39      	ldr	r2, [pc, #228]	; (800bf5c <low_level_init+0x110>)
 800be78:	f107 0308 	add.w	r3, r7, #8
 800be7c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800be7e:	4b37      	ldr	r3, [pc, #220]	; (800bf5c <low_level_init+0x110>)
 800be80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800be84:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800be86:	4b35      	ldr	r3, [pc, #212]	; (800bf5c <low_level_init+0x110>)
 800be88:	4a36      	ldr	r2, [pc, #216]	; (800bf64 <low_level_init+0x118>)
 800be8a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800be8c:	4b33      	ldr	r3, [pc, #204]	; (800bf5c <low_level_init+0x110>)
 800be8e:	4a36      	ldr	r2, [pc, #216]	; (800bf68 <low_level_init+0x11c>)
 800be90:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800be92:	4b32      	ldr	r3, [pc, #200]	; (800bf5c <low_level_init+0x110>)
 800be94:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800be98:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800be9a:	4830      	ldr	r0, [pc, #192]	; (800bf5c <low_level_init+0x110>)
 800be9c:	f7f8 f8bc 	bl	8004018 <HAL_ETH_Init>
 800bea0:	4603      	mov	r3, r0
 800bea2:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800bea4:	2238      	movs	r2, #56	; 0x38
 800bea6:	2100      	movs	r1, #0
 800bea8:	4830      	ldr	r0, [pc, #192]	; (800bf6c <low_level_init+0x120>)
 800beaa:	f00b f985 	bl	80171b8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800beae:	4b2f      	ldr	r3, [pc, #188]	; (800bf6c <low_level_init+0x120>)
 800beb0:	2221      	movs	r2, #33	; 0x21
 800beb2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800beb4:	4b2d      	ldr	r3, [pc, #180]	; (800bf6c <low_level_init+0x120>)
 800beb6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800beba:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800bebc:	4b2b      	ldr	r3, [pc, #172]	; (800bf6c <low_level_init+0x120>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800bec2:	482b      	ldr	r0, [pc, #172]	; (800bf70 <low_level_init+0x124>)
 800bec4:	f000 ff4c 	bl	800cd60 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2206      	movs	r2, #6
 800becc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800bed0:	4b22      	ldr	r3, [pc, #136]	; (800bf5c <low_level_init+0x110>)
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	781a      	ldrb	r2, [r3, #0]
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bedc:	4b1f      	ldr	r3, [pc, #124]	; (800bf5c <low_level_init+0x110>)
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	785a      	ldrb	r2, [r3, #1]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bee8:	4b1c      	ldr	r3, [pc, #112]	; (800bf5c <low_level_init+0x110>)
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	789a      	ldrb	r2, [r3, #2]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bef4:	4b19      	ldr	r3, [pc, #100]	; (800bf5c <low_level_init+0x110>)
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	78da      	ldrb	r2, [r3, #3]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800bf00:	4b16      	ldr	r3, [pc, #88]	; (800bf5c <low_level_init+0x110>)
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	791a      	ldrb	r2, [r3, #4]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800bf0c:	4b13      	ldr	r3, [pc, #76]	; (800bf5c <low_level_init+0x110>)
 800bf0e:	685b      	ldr	r3, [r3, #4]
 800bf10:	795a      	ldrb	r2, [r3, #5]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bf1e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bf26:	f043 030a 	orr.w	r3, r3, #10
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bf32:	4910      	ldr	r1, [pc, #64]	; (800bf74 <low_level_init+0x128>)
 800bf34:	4810      	ldr	r0, [pc, #64]	; (800bf78 <low_level_init+0x12c>)
 800bf36:	f7f6 fb40 	bl	80025ba <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800bf3a:	480f      	ldr	r0, [pc, #60]	; (800bf78 <low_level_init+0x12c>)
 800bf3c:	f7f6 fb6f 	bl	800261e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800bf40:	7bfb      	ldrb	r3, [r7, #15]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d103      	bne.n	800bf4e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fa2a 	bl	800c3a0 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bf4c:	e001      	b.n	800bf52 <low_level_init+0x106>
    Error_Handler();
 800bf4e:	f7f5 fb43 	bl	80015d8 <Error_Handler>
}
 800bf52:	bf00      	nop
 800bf54:	3710      	adds	r7, #16
 800bf56:	46bd      	mov	sp, r7
 800bf58:	bd80      	pop	{r7, pc}
 800bf5a:	bf00      	nop
 800bf5c:	20005950 	.word	0x20005950
 800bf60:	40028000 	.word	0x40028000
 800bf64:	20000130 	.word	0x20000130
 800bf68:	20000090 	.word	0x20000090
 800bf6c:	20005a00 	.word	0x20005a00
 800bf70:	0801ac80 	.word	0x0801ac80
 800bf74:	2000000c 	.word	0x2000000c
 800bf78:	20005a38 	.word	0x20005a38

0800bf7c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b092      	sub	sp, #72	; 0x48
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800bf86:	2300      	movs	r3, #0
 800bf88:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800bf94:	f107 030c 	add.w	r3, r7, #12
 800bf98:	2230      	movs	r2, #48	; 0x30
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f00b f90b 	bl	80171b8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800bfa2:	f107 030c 	add.w	r3, r7, #12
 800bfa6:	2230      	movs	r2, #48	; 0x30
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f00b f904 	bl	80171b8 <memset>

  for(q = p; q != NULL; q = q->next)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	643b      	str	r3, [r7, #64]	; 0x40
 800bfb4:	e045      	b.n	800c042 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800bfb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfb8:	2b03      	cmp	r3, #3
 800bfba:	d902      	bls.n	800bfc2 <low_level_output+0x46>
      return ERR_IF;
 800bfbc:	f06f 030b 	mvn.w	r3, #11
 800bfc0:	e055      	b.n	800c06e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800bfc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc4:	6859      	ldr	r1, [r3, #4]
 800bfc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfc8:	4613      	mov	r3, r2
 800bfca:	005b      	lsls	r3, r3, #1
 800bfcc:	4413      	add	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	3348      	adds	r3, #72	; 0x48
 800bfd2:	443b      	add	r3, r7
 800bfd4:	3b3c      	subs	r3, #60	; 0x3c
 800bfd6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800bfd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfda:	895b      	ldrh	r3, [r3, #10]
 800bfdc:	4619      	mov	r1, r3
 800bfde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	4413      	add	r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	3348      	adds	r3, #72	; 0x48
 800bfea:	443b      	add	r3, r7
 800bfec:	3b38      	subs	r3, #56	; 0x38
 800bfee:	6019      	str	r1, [r3, #0]

    if(i>0)
 800bff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d011      	beq.n	800c01a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800bff6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bff8:	1e5a      	subs	r2, r3, #1
 800bffa:	f107 000c 	add.w	r0, r7, #12
 800bffe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c000:	460b      	mov	r3, r1
 800c002:	005b      	lsls	r3, r3, #1
 800c004:	440b      	add	r3, r1
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	18c1      	adds	r1, r0, r3
 800c00a:	4613      	mov	r3, r2
 800c00c:	005b      	lsls	r3, r3, #1
 800c00e:	4413      	add	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	3348      	adds	r3, #72	; 0x48
 800c014:	443b      	add	r3, r7
 800c016:	3b34      	subs	r3, #52	; 0x34
 800c018:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c01a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d109      	bne.n	800c036 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c022:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c024:	4613      	mov	r3, r2
 800c026:	005b      	lsls	r3, r3, #1
 800c028:	4413      	add	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	3348      	adds	r3, #72	; 0x48
 800c02e:	443b      	add	r3, r7
 800c030:	3b34      	subs	r3, #52	; 0x34
 800c032:	2200      	movs	r2, #0
 800c034:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c038:	3301      	adds	r3, #1
 800c03a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800c03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	643b      	str	r3, [r7, #64]	; 0x40
 800c042:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c044:	2b00      	cmp	r3, #0
 800c046:	d1b6      	bne.n	800bfb6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	891b      	ldrh	r3, [r3, #8]
 800c04c:	461a      	mov	r2, r3
 800c04e:	4b0a      	ldr	r3, [pc, #40]	; (800c078 <low_level_output+0xfc>)
 800c050:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c052:	4a09      	ldr	r2, [pc, #36]	; (800c078 <low_level_output+0xfc>)
 800c054:	f107 030c 	add.w	r3, r7, #12
 800c058:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c05a:	4a07      	ldr	r2, [pc, #28]	; (800c078 <low_level_output+0xfc>)
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800c060:	2214      	movs	r2, #20
 800c062:	4905      	ldr	r1, [pc, #20]	; (800c078 <low_level_output+0xfc>)
 800c064:	4805      	ldr	r0, [pc, #20]	; (800c07c <low_level_output+0x100>)
 800c066:	f7f8 f90b 	bl	8004280 <HAL_ETH_Transmit>

  return errval;
 800c06a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3748      	adds	r7, #72	; 0x48
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	20005a00 	.word	0x20005a00
 800c07c:	20005950 	.word	0x20005950

0800c080 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b084      	sub	sp, #16
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c088:	2300      	movs	r3, #0
 800c08a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c08c:	4b07      	ldr	r3, [pc, #28]	; (800c0ac <low_level_input+0x2c>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d105      	bne.n	800c0a0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c094:	f107 030c 	add.w	r3, r7, #12
 800c098:	4619      	mov	r1, r3
 800c09a:	4805      	ldr	r0, [pc, #20]	; (800c0b0 <low_level_input+0x30>)
 800c09c:	f7f8 f984 	bl	80043a8 <HAL_ETH_ReadData>
  }

  return p;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	2000594c 	.word	0x2000594c
 800c0b0:	20005950 	.word	0x20005950

0800c0b4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f7ff ffdd 	bl	800c080 <low_level_input>
 800c0c6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d00a      	beq.n	800c0e4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	691b      	ldr	r3, [r3, #16]
 800c0d2:	6879      	ldr	r1, [r7, #4]
 800c0d4:	68f8      	ldr	r0, [r7, #12]
 800c0d6:	4798      	blx	r3
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d002      	beq.n	800c0e4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f001 fdba 	bl	800dc58 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d1ea      	bne.n	800c0c0 <ethernetif_input+0xc>
}
 800c0ea:	bf00      	nop
 800c0ec:	bf00      	nop
 800c0ee:	3710      	adds	r7, #16
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b082      	sub	sp, #8
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <ethernetif_init+0x1c>
 800c102:	4b0e      	ldr	r3, [pc, #56]	; (800c13c <ethernetif_init+0x48>)
 800c104:	f240 127b 	movw	r2, #379	; 0x17b
 800c108:	490d      	ldr	r1, [pc, #52]	; (800c140 <ethernetif_init+0x4c>)
 800c10a:	480e      	ldr	r0, [pc, #56]	; (800c144 <ethernetif_init+0x50>)
 800c10c:	f00b f85c 	bl	80171c8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2273      	movs	r2, #115	; 0x73
 800c114:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2274      	movs	r2, #116	; 0x74
 800c11c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a09      	ldr	r2, [pc, #36]	; (800c148 <ethernetif_init+0x54>)
 800c124:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a08      	ldr	r2, [pc, #32]	; (800c14c <ethernetif_init+0x58>)
 800c12a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f7ff fe8d 	bl	800be4c <low_level_init>

  return ERR_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}
 800c13c:	08018280 	.word	0x08018280
 800c140:	0801829c 	.word	0x0801829c
 800c144:	080182ac 	.word	0x080182ac
 800c148:	08014b35 	.word	0x08014b35
 800c14c:	0800bf7d 	.word	0x0800bf7d

0800c150 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c15c:	68f9      	ldr	r1, [r7, #12]
 800c15e:	4807      	ldr	r0, [pc, #28]	; (800c17c <pbuf_free_custom+0x2c>)
 800c160:	f000 fee0 	bl	800cf24 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c164:	4b06      	ldr	r3, [pc, #24]	; (800c180 <pbuf_free_custom+0x30>)
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d102      	bne.n	800c172 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c16c:	4b04      	ldr	r3, [pc, #16]	; (800c180 <pbuf_free_custom+0x30>)
 800c16e:	2200      	movs	r2, #0
 800c170:	701a      	strb	r2, [r3, #0]
  }
}
 800c172:	bf00      	nop
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	0801ac80 	.word	0x0801ac80
 800c180:	2000594c 	.word	0x2000594c

0800c184 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c188:	f7f6 fbca 	bl	8002920 <HAL_GetTick>
 800c18c:	4603      	mov	r3, r0
}
 800c18e:	4618      	mov	r0, r3
 800c190:	bd80      	pop	{r7, pc}
	...

0800c194 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b08e      	sub	sp, #56	; 0x38
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c19c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	605a      	str	r2, [r3, #4]
 800c1a6:	609a      	str	r2, [r3, #8]
 800c1a8:	60da      	str	r2, [r3, #12]
 800c1aa:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a4e      	ldr	r2, [pc, #312]	; (800c2ec <HAL_ETH_MspInit+0x158>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	f040 8096 	bne.w	800c2e4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c1b8:	4b4d      	ldr	r3, [pc, #308]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c1ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1bc:	4a4c      	ldr	r2, [pc, #304]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c1be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c1c2:	6313      	str	r3, [r2, #48]	; 0x30
 800c1c4:	4b4a      	ldr	r3, [pc, #296]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1cc:	623b      	str	r3, [r7, #32]
 800c1ce:	6a3b      	ldr	r3, [r7, #32]
 800c1d0:	4b47      	ldr	r3, [pc, #284]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d4:	4a46      	ldr	r2, [pc, #280]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c1d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c1da:	6313      	str	r3, [r2, #48]	; 0x30
 800c1dc:	4b44      	ldr	r3, [pc, #272]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c1de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1e4:	61fb      	str	r3, [r7, #28]
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	4b41      	ldr	r3, [pc, #260]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1ec:	4a40      	ldr	r2, [pc, #256]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c1ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c1f2:	6313      	str	r3, [r2, #48]	; 0x30
 800c1f4:	4b3e      	ldr	r3, [pc, #248]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1fc:	61bb      	str	r3, [r7, #24]
 800c1fe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c200:	4b3b      	ldr	r3, [pc, #236]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c204:	4a3a      	ldr	r2, [pc, #232]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c206:	f043 0304 	orr.w	r3, r3, #4
 800c20a:	6313      	str	r3, [r2, #48]	; 0x30
 800c20c:	4b38      	ldr	r3, [pc, #224]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c210:	f003 0304 	and.w	r3, r3, #4
 800c214:	617b      	str	r3, [r7, #20]
 800c216:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c218:	4b35      	ldr	r3, [pc, #212]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c21c:	4a34      	ldr	r2, [pc, #208]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c21e:	f043 0301 	orr.w	r3, r3, #1
 800c222:	6313      	str	r3, [r2, #48]	; 0x30
 800c224:	4b32      	ldr	r3, [pc, #200]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c228:	f003 0301 	and.w	r3, r3, #1
 800c22c:	613b      	str	r3, [r7, #16]
 800c22e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c230:	4b2f      	ldr	r3, [pc, #188]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c234:	4a2e      	ldr	r2, [pc, #184]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c236:	f043 0302 	orr.w	r3, r3, #2
 800c23a:	6313      	str	r3, [r2, #48]	; 0x30
 800c23c:	4b2c      	ldr	r3, [pc, #176]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c23e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c240:	f003 0302 	and.w	r3, r3, #2
 800c244:	60fb      	str	r3, [r7, #12]
 800c246:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c248:	4b29      	ldr	r3, [pc, #164]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c24c:	4a28      	ldr	r2, [pc, #160]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c24e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c252:	6313      	str	r3, [r2, #48]	; 0x30
 800c254:	4b26      	ldr	r3, [pc, #152]	; (800c2f0 <HAL_ETH_MspInit+0x15c>)
 800c256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c25c:	60bb      	str	r3, [r7, #8]
 800c25e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800c260:	2332      	movs	r3, #50	; 0x32
 800c262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c264:	2302      	movs	r3, #2
 800c266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c268:	2300      	movs	r3, #0
 800c26a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c26c:	2303      	movs	r3, #3
 800c26e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c270:	230b      	movs	r3, #11
 800c272:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c274:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c278:	4619      	mov	r1, r3
 800c27a:	481e      	ldr	r0, [pc, #120]	; (800c2f4 <HAL_ETH_MspInit+0x160>)
 800c27c:	f7f8 ffbe 	bl	80051fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800c280:	2386      	movs	r3, #134	; 0x86
 800c282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c284:	2302      	movs	r3, #2
 800c286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c288:	2300      	movs	r3, #0
 800c28a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c28c:	2303      	movs	r3, #3
 800c28e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c290:	230b      	movs	r3, #11
 800c292:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c298:	4619      	mov	r1, r3
 800c29a:	4817      	ldr	r0, [pc, #92]	; (800c2f8 <HAL_ETH_MspInit+0x164>)
 800c29c:	f7f8 ffae 	bl	80051fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800c2a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c2a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2a6:	2302      	movs	r3, #2
 800c2a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2ae:	2303      	movs	r3, #3
 800c2b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c2b2:	230b      	movs	r3, #11
 800c2b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c2b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	480f      	ldr	r0, [pc, #60]	; (800c2fc <HAL_ETH_MspInit+0x168>)
 800c2be:	f7f8 ff9d 	bl	80051fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c2c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c2c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2c8:	2302      	movs	r3, #2
 800c2ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c2d4:	230b      	movs	r3, #11
 800c2d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c2d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2dc:	4619      	mov	r1, r3
 800c2de:	4808      	ldr	r0, [pc, #32]	; (800c300 <HAL_ETH_MspInit+0x16c>)
 800c2e0:	f7f8 ff8c 	bl	80051fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c2e4:	bf00      	nop
 800c2e6:	3738      	adds	r7, #56	; 0x38
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	40028000 	.word	0x40028000
 800c2f0:	40023800 	.word	0x40023800
 800c2f4:	40020800 	.word	0x40020800
 800c2f8:	40020000 	.word	0x40020000
 800c2fc:	40020400 	.word	0x40020400
 800c300:	40021800 	.word	0x40021800

0800c304 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c308:	4802      	ldr	r0, [pc, #8]	; (800c314 <ETH_PHY_IO_Init+0x10>)
 800c30a:	f7f8 fb1d 	bl	8004948 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c30e:	2300      	movs	r3, #0
}
 800c310:	4618      	mov	r0, r3
 800c312:	bd80      	pop	{r7, pc}
 800c314:	20005950 	.word	0x20005950

0800c318 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c318:	b480      	push	{r7}
 800c31a:	af00      	add	r7, sp, #0
  return 0;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b084      	sub	sp, #16
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	68f9      	ldr	r1, [r7, #12]
 800c33a:	4807      	ldr	r0, [pc, #28]	; (800c358 <ETH_PHY_IO_ReadReg+0x30>)
 800c33c:	f7f8 f96c 	bl	8004618 <HAL_ETH_ReadPHYRegister>
 800c340:	4603      	mov	r3, r0
 800c342:	2b00      	cmp	r3, #0
 800c344:	d002      	beq.n	800c34c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c34a:	e000      	b.n	800c34e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	20005950 	.word	0x20005950

0800c35c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	68ba      	ldr	r2, [r7, #8]
 800c36c:	68f9      	ldr	r1, [r7, #12]
 800c36e:	4807      	ldr	r0, [pc, #28]	; (800c38c <ETH_PHY_IO_WriteReg+0x30>)
 800c370:	f7f8 f99d 	bl	80046ae <HAL_ETH_WritePHYRegister>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d002      	beq.n	800c380 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c37a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c37e:	e000      	b.n	800c382 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	20005950 	.word	0x20005950

0800c390 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c394:	f7f6 fac4 	bl	8002920 <HAL_GetTick>
 800c398:	4603      	mov	r3, r0
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	bd80      	pop	{r7, pc}
	...

0800c3a0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b0a0      	sub	sp, #128	; 0x80
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c3a8:	f107 030c 	add.w	r3, r7, #12
 800c3ac:	2264      	movs	r2, #100	; 0x64
 800c3ae:	2100      	movs	r1, #0
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f00a ff01 	bl	80171b8 <memset>
  int32_t PHYLinkState = 0;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3be:	2300      	movs	r3, #0
 800c3c0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c3c6:	483a      	ldr	r0, [pc, #232]	; (800c4b0 <ethernet_link_check_state+0x110>)
 800c3c8:	f7f6 f9d1 	bl	800276e <LAN8742_GetLinkState>
 800c3cc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c3d4:	089b      	lsrs	r3, r3, #2
 800c3d6:	f003 0301 	and.w	r3, r3, #1
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00c      	beq.n	800c3fa <ethernet_link_check_state+0x5a>
 800c3e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	dc09      	bgt.n	800c3fa <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800c3e6:	4833      	ldr	r0, [pc, #204]	; (800c4b4 <ethernet_link_check_state+0x114>)
 800c3e8:	f7f7 fef1 	bl	80041ce <HAL_ETH_Stop>
    netif_set_down(netif);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f001 f81d 	bl	800d42c <netif_set_down>
    netif_set_link_down(netif);
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f001 f880 	bl	800d4f8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800c3f8:	e055      	b.n	800c4a6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b00      	cmp	r3, #0
 800c406:	d14e      	bne.n	800c4a6 <ethernet_link_check_state+0x106>
 800c408:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	dd4b      	ble.n	800c4a6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800c40e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c410:	3b02      	subs	r3, #2
 800c412:	2b03      	cmp	r3, #3
 800c414:	d82a      	bhi.n	800c46c <ethernet_link_check_state+0xcc>
 800c416:	a201      	add	r2, pc, #4	; (adr r2, 800c41c <ethernet_link_check_state+0x7c>)
 800c418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c41c:	0800c42d 	.word	0x0800c42d
 800c420:	0800c43f 	.word	0x0800c43f
 800c424:	0800c44f 	.word	0x0800c44f
 800c428:	0800c45f 	.word	0x0800c45f
      duplex = ETH_FULLDUPLEX_MODE;
 800c42c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c430:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c432:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c436:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c438:	2301      	movs	r3, #1
 800c43a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c43c:	e017      	b.n	800c46e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c43e:	2300      	movs	r3, #0
 800c440:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c442:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c446:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c448:	2301      	movs	r3, #1
 800c44a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c44c:	e00f      	b.n	800c46e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800c44e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c452:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c454:	2300      	movs	r3, #0
 800c456:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c458:	2301      	movs	r3, #1
 800c45a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c45c:	e007      	b.n	800c46e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c45e:	2300      	movs	r3, #0
 800c460:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c462:	2300      	movs	r3, #0
 800c464:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c466:	2301      	movs	r3, #1
 800c468:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c46a:	e000      	b.n	800c46e <ethernet_link_check_state+0xce>
      break;
 800c46c:	bf00      	nop
    if(linkchanged)
 800c46e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c470:	2b00      	cmp	r3, #0
 800c472:	d018      	beq.n	800c4a6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c474:	f107 030c 	add.w	r3, r7, #12
 800c478:	4619      	mov	r1, r3
 800c47a:	480e      	ldr	r0, [pc, #56]	; (800c4b4 <ethernet_link_check_state+0x114>)
 800c47c:	f7f8 f960 	bl	8004740 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c482:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800c484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c486:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c488:	f107 030c 	add.w	r3, r7, #12
 800c48c:	4619      	mov	r1, r3
 800c48e:	4809      	ldr	r0, [pc, #36]	; (800c4b4 <ethernet_link_check_state+0x114>)
 800c490:	f7f8 fa40 	bl	8004914 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800c494:	4807      	ldr	r0, [pc, #28]	; (800c4b4 <ethernet_link_check_state+0x114>)
 800c496:	f7f7 fe3b 	bl	8004110 <HAL_ETH_Start>
      netif_set_up(netif);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 ff5a 	bl	800d354 <netif_set_up>
      netif_set_link_up(netif);
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f000 fff5 	bl	800d490 <netif_set_link_up>
}
 800c4a6:	bf00      	nop
 800c4a8:	3780      	adds	r7, #128	; 0x80
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	20005a38 	.word	0x20005a38
 800c4b4:	20005950 	.word	0x20005950

0800c4b8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b086      	sub	sp, #24
 800c4bc:	af02      	add	r7, sp, #8
 800c4be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c4c0:	4812      	ldr	r0, [pc, #72]	; (800c50c <HAL_ETH_RxAllocateCallback+0x54>)
 800c4c2:	f000 fcc1 	bl	800ce48 <memp_malloc_pool>
 800c4c6:	60f8      	str	r0, [r7, #12]
  if (p)
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d014      	beq.n	800c4f8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	f103 0220 	add.w	r2, r3, #32
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	4a0d      	ldr	r2, [pc, #52]	; (800c510 <HAL_ETH_RxAllocateCallback+0x58>)
 800c4dc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800c4e6:	9201      	str	r2, [sp, #4]
 800c4e8:	9300      	str	r3, [sp, #0]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2241      	movs	r2, #65	; 0x41
 800c4ee:	2100      	movs	r1, #0
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	f001 f9f7 	bl	800d8e4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c4f6:	e005      	b.n	800c504 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c4f8:	4b06      	ldr	r3, [pc, #24]	; (800c514 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2200      	movs	r2, #0
 800c502:	601a      	str	r2, [r3, #0]
}
 800c504:	bf00      	nop
 800c506:	3710      	adds	r7, #16
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	0801ac80 	.word	0x0801ac80
 800c510:	0800c151 	.word	0x0800c151
 800c514:	2000594c 	.word	0x2000594c

0800c518 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b088      	sub	sp, #32
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	60b9      	str	r1, [r7, #8]
 800c522:	607a      	str	r2, [r7, #4]
 800c524:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c52e:	2300      	movs	r3, #0
 800c530:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	3b20      	subs	r3, #32
 800c536:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	2200      	movs	r2, #0
 800c53c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	2200      	movs	r2, #0
 800c542:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c544:	69fb      	ldr	r3, [r7, #28]
 800c546:	887a      	ldrh	r2, [r7, #2]
 800c548:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d103      	bne.n	800c55a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	69fa      	ldr	r2, [r7, #28]
 800c556:	601a      	str	r2, [r3, #0]
 800c558:	e003      	b.n	800c562 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	69fa      	ldr	r2, [r7, #28]
 800c560:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	69fa      	ldr	r2, [r7, #28]
 800c566:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	61fb      	str	r3, [r7, #28]
 800c56e:	e009      	b.n	800c584 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c570:	69fb      	ldr	r3, [r7, #28]
 800c572:	891a      	ldrh	r2, [r3, #8]
 800c574:	887b      	ldrh	r3, [r7, #2]
 800c576:	4413      	add	r3, r2
 800c578:	b29a      	uxth	r2, r3
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c57e:	69fb      	ldr	r3, [r7, #28]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	61fb      	str	r3, [r7, #28]
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d1f2      	bne.n	800c570 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c58a:	887b      	ldrh	r3, [r7, #2]
 800c58c:	4619      	mov	r1, r3
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f7ff fc30 	bl	800bdf4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c594:	bf00      	nop
 800c596:	3720      	adds	r7, #32
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c5a6:	88fb      	ldrh	r3, [r7, #6]
 800c5a8:	021b      	lsls	r3, r3, #8
 800c5aa:	b21a      	sxth	r2, r3
 800c5ac:	88fb      	ldrh	r3, [r7, #6]
 800c5ae:	0a1b      	lsrs	r3, r3, #8
 800c5b0:	b29b      	uxth	r3, r3
 800c5b2:	b21b      	sxth	r3, r3
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	b21b      	sxth	r3, r3
 800c5b8:	b29b      	uxth	r3, r3
}
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	370c      	adds	r7, #12
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	b083      	sub	sp, #12
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	061a      	lsls	r2, r3, #24
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	021b      	lsls	r3, r3, #8
 800c5d6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c5da:	431a      	orrs	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	0a1b      	lsrs	r3, r3, #8
 800c5e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c5e4:	431a      	orrs	r2, r3
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	0e1b      	lsrs	r3, r3, #24
 800c5ea:	4313      	orrs	r3, r2
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b082      	sub	sp, #8
 800c5fc:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c5fe:	2300      	movs	r3, #0
 800c600:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c602:	f000 f8d5 	bl	800c7b0 <mem_init>
  memp_init();
 800c606:	f000 fbdb 	bl	800cdc0 <memp_init>
  pbuf_init();
  netif_init();
 800c60a:	f000 fcd9 	bl	800cfc0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c60e:	f007 f8f9 	bl	8013804 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c612:	f001 fe51 	bl	800e2b8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c616:	f007 f86b 	bl	80136f0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c61a:	bf00      	nop
 800c61c:	3708      	adds	r7, #8
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}
	...

0800c624 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c62e:	4b05      	ldr	r3, [pc, #20]	; (800c644 <ptr_to_mem+0x20>)
 800c630:	681a      	ldr	r2, [r3, #0]
 800c632:	88fb      	ldrh	r3, [r7, #6]
 800c634:	4413      	add	r3, r2
}
 800c636:	4618      	mov	r0, r3
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	200060c4 	.word	0x200060c4

0800c648 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c648:	b480      	push	{r7}
 800c64a:	b083      	sub	sp, #12
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c650:	4b05      	ldr	r3, [pc, #20]	; (800c668 <mem_to_ptr+0x20>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	1ad3      	subs	r3, r2, r3
 800c658:	b29b      	uxth	r3, r3
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	370c      	adds	r7, #12
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
 800c666:	bf00      	nop
 800c668:	200060c4 	.word	0x200060c4

0800c66c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c66c:	b590      	push	{r4, r7, lr}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c674:	4b45      	ldr	r3, [pc, #276]	; (800c78c <plug_holes+0x120>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	687a      	ldr	r2, [r7, #4]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d206      	bcs.n	800c68c <plug_holes+0x20>
 800c67e:	4b44      	ldr	r3, [pc, #272]	; (800c790 <plug_holes+0x124>)
 800c680:	f240 12df 	movw	r2, #479	; 0x1df
 800c684:	4943      	ldr	r1, [pc, #268]	; (800c794 <plug_holes+0x128>)
 800c686:	4844      	ldr	r0, [pc, #272]	; (800c798 <plug_holes+0x12c>)
 800c688:	f00a fd9e 	bl	80171c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c68c:	4b43      	ldr	r3, [pc, #268]	; (800c79c <plug_holes+0x130>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	429a      	cmp	r2, r3
 800c694:	d306      	bcc.n	800c6a4 <plug_holes+0x38>
 800c696:	4b3e      	ldr	r3, [pc, #248]	; (800c790 <plug_holes+0x124>)
 800c698:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c69c:	4940      	ldr	r1, [pc, #256]	; (800c7a0 <plug_holes+0x134>)
 800c69e:	483e      	ldr	r0, [pc, #248]	; (800c798 <plug_holes+0x12c>)
 800c6a0:	f00a fd92 	bl	80171c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	791b      	ldrb	r3, [r3, #4]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d006      	beq.n	800c6ba <plug_holes+0x4e>
 800c6ac:	4b38      	ldr	r3, [pc, #224]	; (800c790 <plug_holes+0x124>)
 800c6ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c6b2:	493c      	ldr	r1, [pc, #240]	; (800c7a4 <plug_holes+0x138>)
 800c6b4:	4838      	ldr	r0, [pc, #224]	; (800c798 <plug_holes+0x12c>)
 800c6b6:	f00a fd87 	bl	80171c8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	881b      	ldrh	r3, [r3, #0]
 800c6be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c6c2:	d906      	bls.n	800c6d2 <plug_holes+0x66>
 800c6c4:	4b32      	ldr	r3, [pc, #200]	; (800c790 <plug_holes+0x124>)
 800c6c6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c6ca:	4937      	ldr	r1, [pc, #220]	; (800c7a8 <plug_holes+0x13c>)
 800c6cc:	4832      	ldr	r0, [pc, #200]	; (800c798 <plug_holes+0x12c>)
 800c6ce:	f00a fd7b 	bl	80171c8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	881b      	ldrh	r3, [r3, #0]
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7ff ffa4 	bl	800c624 <ptr_to_mem>
 800c6dc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	429a      	cmp	r2, r3
 800c6e4:	d024      	beq.n	800c730 <plug_holes+0xc4>
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	791b      	ldrb	r3, [r3, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d120      	bne.n	800c730 <plug_holes+0xc4>
 800c6ee:	4b2b      	ldr	r3, [pc, #172]	; (800c79c <plug_holes+0x130>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d01b      	beq.n	800c730 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c6f8:	4b2c      	ldr	r3, [pc, #176]	; (800c7ac <plug_holes+0x140>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d102      	bne.n	800c708 <plug_holes+0x9c>
      lfree = mem;
 800c702:	4a2a      	ldr	r2, [pc, #168]	; (800c7ac <plug_holes+0x140>)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	881a      	ldrh	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	881b      	ldrh	r3, [r3, #0]
 800c714:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c718:	d00a      	beq.n	800c730 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7ff ff80 	bl	800c624 <ptr_to_mem>
 800c724:	4604      	mov	r4, r0
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f7ff ff8e 	bl	800c648 <mem_to_ptr>
 800c72c:	4603      	mov	r3, r0
 800c72e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	885b      	ldrh	r3, [r3, #2]
 800c734:	4618      	mov	r0, r3
 800c736:	f7ff ff75 	bl	800c624 <ptr_to_mem>
 800c73a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	429a      	cmp	r2, r3
 800c742:	d01f      	beq.n	800c784 <plug_holes+0x118>
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	791b      	ldrb	r3, [r3, #4]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d11b      	bne.n	800c784 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c74c:	4b17      	ldr	r3, [pc, #92]	; (800c7ac <plug_holes+0x140>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	429a      	cmp	r2, r3
 800c754:	d102      	bne.n	800c75c <plug_holes+0xf0>
      lfree = pmem;
 800c756:	4a15      	ldr	r2, [pc, #84]	; (800c7ac <plug_holes+0x140>)
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	881a      	ldrh	r2, [r3, #0]
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c76c:	d00a      	beq.n	800c784 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	881b      	ldrh	r3, [r3, #0]
 800c772:	4618      	mov	r0, r3
 800c774:	f7ff ff56 	bl	800c624 <ptr_to_mem>
 800c778:	4604      	mov	r4, r0
 800c77a:	68b8      	ldr	r0, [r7, #8]
 800c77c:	f7ff ff64 	bl	800c648 <mem_to_ptr>
 800c780:	4603      	mov	r3, r0
 800c782:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c784:	bf00      	nop
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	bd90      	pop	{r4, r7, pc}
 800c78c:	200060c4 	.word	0x200060c4
 800c790:	080182d4 	.word	0x080182d4
 800c794:	08018304 	.word	0x08018304
 800c798:	0801831c 	.word	0x0801831c
 800c79c:	200060c8 	.word	0x200060c8
 800c7a0:	08018344 	.word	0x08018344
 800c7a4:	08018360 	.word	0x08018360
 800c7a8:	0801837c 	.word	0x0801837c
 800c7ac:	200060cc 	.word	0x200060cc

0800c7b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c7b6:	4b18      	ldr	r3, [pc, #96]	; (800c818 <mem_init+0x68>)
 800c7b8:	3303      	adds	r3, #3
 800c7ba:	f023 0303 	bic.w	r3, r3, #3
 800c7be:	461a      	mov	r2, r3
 800c7c0:	4b16      	ldr	r3, [pc, #88]	; (800c81c <mem_init+0x6c>)
 800c7c2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c7c4:	4b15      	ldr	r3, [pc, #84]	; (800c81c <mem_init+0x6c>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c7d0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c7de:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c7e2:	f7ff ff1f 	bl	800c624 <ptr_to_mem>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	4a0d      	ldr	r2, [pc, #52]	; (800c820 <mem_init+0x70>)
 800c7ea:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c7ec:	4b0c      	ldr	r3, [pc, #48]	; (800c820 <mem_init+0x70>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c7f4:	4b0a      	ldr	r3, [pc, #40]	; (800c820 <mem_init+0x70>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c7fc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c7fe:	4b08      	ldr	r3, [pc, #32]	; (800c820 <mem_init+0x70>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c806:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c808:	4b04      	ldr	r3, [pc, #16]	; (800c81c <mem_init+0x6c>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4a05      	ldr	r2, [pc, #20]	; (800c824 <mem_init+0x74>)
 800c80e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800c810:	bf00      	nop
 800c812:	3708      	adds	r7, #8
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	20005a70 	.word	0x20005a70
 800c81c:	200060c4 	.word	0x200060c4
 800c820:	200060c8 	.word	0x200060c8
 800c824:	200060cc 	.word	0x200060cc

0800c828 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7ff ff09 	bl	800c648 <mem_to_ptr>
 800c836:	4603      	mov	r3, r0
 800c838:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	881b      	ldrh	r3, [r3, #0]
 800c83e:	4618      	mov	r0, r3
 800c840:	f7ff fef0 	bl	800c624 <ptr_to_mem>
 800c844:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	885b      	ldrh	r3, [r3, #2]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7ff feea 	bl	800c624 <ptr_to_mem>
 800c850:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c85a:	d818      	bhi.n	800c88e <mem_link_valid+0x66>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	885b      	ldrh	r3, [r3, #2]
 800c860:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c864:	d813      	bhi.n	800c88e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c86a:	8afa      	ldrh	r2, [r7, #22]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d004      	beq.n	800c87a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	881b      	ldrh	r3, [r3, #0]
 800c874:	8afa      	ldrh	r2, [r7, #22]
 800c876:	429a      	cmp	r2, r3
 800c878:	d109      	bne.n	800c88e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c87a:	4b08      	ldr	r3, [pc, #32]	; (800c89c <mem_link_valid+0x74>)
 800c87c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c87e:	693a      	ldr	r2, [r7, #16]
 800c880:	429a      	cmp	r2, r3
 800c882:	d006      	beq.n	800c892 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	885b      	ldrh	r3, [r3, #2]
 800c888:	8afa      	ldrh	r2, [r7, #22]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d001      	beq.n	800c892 <mem_link_valid+0x6a>
    return 0;
 800c88e:	2300      	movs	r3, #0
 800c890:	e000      	b.n	800c894 <mem_link_valid+0x6c>
  }
  return 1;
 800c892:	2301      	movs	r3, #1
}
 800c894:	4618      	mov	r0, r3
 800c896:	3718      	adds	r7, #24
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	200060c8 	.word	0x200060c8

0800c8a0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d04c      	beq.n	800c948 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f003 0303 	and.w	r3, r3, #3
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d007      	beq.n	800c8c8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c8b8:	4b25      	ldr	r3, [pc, #148]	; (800c950 <mem_free+0xb0>)
 800c8ba:	f240 2273 	movw	r2, #627	; 0x273
 800c8be:	4925      	ldr	r1, [pc, #148]	; (800c954 <mem_free+0xb4>)
 800c8c0:	4825      	ldr	r0, [pc, #148]	; (800c958 <mem_free+0xb8>)
 800c8c2:	f00a fc81 	bl	80171c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c8c6:	e040      	b.n	800c94a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	3b08      	subs	r3, #8
 800c8cc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c8ce:	4b23      	ldr	r3, [pc, #140]	; (800c95c <mem_free+0xbc>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d306      	bcc.n	800c8e6 <mem_free+0x46>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f103 020c 	add.w	r2, r3, #12
 800c8de:	4b20      	ldr	r3, [pc, #128]	; (800c960 <mem_free+0xc0>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d907      	bls.n	800c8f6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c8e6:	4b1a      	ldr	r3, [pc, #104]	; (800c950 <mem_free+0xb0>)
 800c8e8:	f240 227f 	movw	r2, #639	; 0x27f
 800c8ec:	491d      	ldr	r1, [pc, #116]	; (800c964 <mem_free+0xc4>)
 800c8ee:	481a      	ldr	r0, [pc, #104]	; (800c958 <mem_free+0xb8>)
 800c8f0:	f00a fc6a 	bl	80171c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c8f4:	e029      	b.n	800c94a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	791b      	ldrb	r3, [r3, #4]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d107      	bne.n	800c90e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c8fe:	4b14      	ldr	r3, [pc, #80]	; (800c950 <mem_free+0xb0>)
 800c900:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c904:	4918      	ldr	r1, [pc, #96]	; (800c968 <mem_free+0xc8>)
 800c906:	4814      	ldr	r0, [pc, #80]	; (800c958 <mem_free+0xb8>)
 800c908:	f00a fc5e 	bl	80171c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c90c:	e01d      	b.n	800c94a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800c90e:	68f8      	ldr	r0, [r7, #12]
 800c910:	f7ff ff8a 	bl	800c828 <mem_link_valid>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d107      	bne.n	800c92a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c91a:	4b0d      	ldr	r3, [pc, #52]	; (800c950 <mem_free+0xb0>)
 800c91c:	f240 2295 	movw	r2, #661	; 0x295
 800c920:	4912      	ldr	r1, [pc, #72]	; (800c96c <mem_free+0xcc>)
 800c922:	480d      	ldr	r0, [pc, #52]	; (800c958 <mem_free+0xb8>)
 800c924:	f00a fc50 	bl	80171c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800c928:	e00f      	b.n	800c94a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2200      	movs	r2, #0
 800c92e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c930:	4b0f      	ldr	r3, [pc, #60]	; (800c970 <mem_free+0xd0>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	68fa      	ldr	r2, [r7, #12]
 800c936:	429a      	cmp	r2, r3
 800c938:	d202      	bcs.n	800c940 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c93a:	4a0d      	ldr	r2, [pc, #52]	; (800c970 <mem_free+0xd0>)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f7ff fe93 	bl	800c66c <plug_holes>
 800c946:	e000      	b.n	800c94a <mem_free+0xaa>
    return;
 800c948:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}
 800c950:	080182d4 	.word	0x080182d4
 800c954:	080183a8 	.word	0x080183a8
 800c958:	0801831c 	.word	0x0801831c
 800c95c:	200060c4 	.word	0x200060c4
 800c960:	200060c8 	.word	0x200060c8
 800c964:	080183cc 	.word	0x080183cc
 800c968:	080183e8 	.word	0x080183e8
 800c96c:	08018410 	.word	0x08018410
 800c970:	200060cc 	.word	0x200060cc

0800c974 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b088      	sub	sp, #32
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	460b      	mov	r3, r1
 800c97e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c980:	887b      	ldrh	r3, [r7, #2]
 800c982:	3303      	adds	r3, #3
 800c984:	b29b      	uxth	r3, r3
 800c986:	f023 0303 	bic.w	r3, r3, #3
 800c98a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c98c:	8bfb      	ldrh	r3, [r7, #30]
 800c98e:	2b0b      	cmp	r3, #11
 800c990:	d801      	bhi.n	800c996 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c992:	230c      	movs	r3, #12
 800c994:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c996:	8bfb      	ldrh	r3, [r7, #30]
 800c998:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c99c:	d803      	bhi.n	800c9a6 <mem_trim+0x32>
 800c99e:	8bfa      	ldrh	r2, [r7, #30]
 800c9a0:	887b      	ldrh	r3, [r7, #2]
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d201      	bcs.n	800c9aa <mem_trim+0x36>
    return NULL;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	e0cc      	b.n	800cb44 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c9aa:	4b68      	ldr	r3, [pc, #416]	; (800cb4c <mem_trim+0x1d8>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d304      	bcc.n	800c9be <mem_trim+0x4a>
 800c9b4:	4b66      	ldr	r3, [pc, #408]	; (800cb50 <mem_trim+0x1dc>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	687a      	ldr	r2, [r7, #4]
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d306      	bcc.n	800c9cc <mem_trim+0x58>
 800c9be:	4b65      	ldr	r3, [pc, #404]	; (800cb54 <mem_trim+0x1e0>)
 800c9c0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c9c4:	4964      	ldr	r1, [pc, #400]	; (800cb58 <mem_trim+0x1e4>)
 800c9c6:	4865      	ldr	r0, [pc, #404]	; (800cb5c <mem_trim+0x1e8>)
 800c9c8:	f00a fbfe 	bl	80171c8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c9cc:	4b5f      	ldr	r3, [pc, #380]	; (800cb4c <mem_trim+0x1d8>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d304      	bcc.n	800c9e0 <mem_trim+0x6c>
 800c9d6:	4b5e      	ldr	r3, [pc, #376]	; (800cb50 <mem_trim+0x1dc>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	429a      	cmp	r2, r3
 800c9de:	d301      	bcc.n	800c9e4 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	e0af      	b.n	800cb44 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	3b08      	subs	r3, #8
 800c9e8:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c9ea:	69b8      	ldr	r0, [r7, #24]
 800c9ec:	f7ff fe2c 	bl	800c648 <mem_to_ptr>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	881a      	ldrh	r2, [r3, #0]
 800c9f8:	8afb      	ldrh	r3, [r7, #22]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	b29b      	uxth	r3, r3
 800c9fe:	3b08      	subs	r3, #8
 800ca00:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ca02:	8bfa      	ldrh	r2, [r7, #30]
 800ca04:	8abb      	ldrh	r3, [r7, #20]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d906      	bls.n	800ca18 <mem_trim+0xa4>
 800ca0a:	4b52      	ldr	r3, [pc, #328]	; (800cb54 <mem_trim+0x1e0>)
 800ca0c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ca10:	4953      	ldr	r1, [pc, #332]	; (800cb60 <mem_trim+0x1ec>)
 800ca12:	4852      	ldr	r0, [pc, #328]	; (800cb5c <mem_trim+0x1e8>)
 800ca14:	f00a fbd8 	bl	80171c8 <iprintf>
  if (newsize > size) {
 800ca18:	8bfa      	ldrh	r2, [r7, #30]
 800ca1a:	8abb      	ldrh	r3, [r7, #20]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d901      	bls.n	800ca24 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800ca20:	2300      	movs	r3, #0
 800ca22:	e08f      	b.n	800cb44 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800ca24:	8bfa      	ldrh	r2, [r7, #30]
 800ca26:	8abb      	ldrh	r3, [r7, #20]
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d101      	bne.n	800ca30 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	e089      	b.n	800cb44 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	881b      	ldrh	r3, [r3, #0]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7ff fdf5 	bl	800c624 <ptr_to_mem>
 800ca3a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	791b      	ldrb	r3, [r3, #4]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d13f      	bne.n	800cac4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ca44:	69bb      	ldr	r3, [r7, #24]
 800ca46:	881b      	ldrh	r3, [r3, #0]
 800ca48:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca4c:	d106      	bne.n	800ca5c <mem_trim+0xe8>
 800ca4e:	4b41      	ldr	r3, [pc, #260]	; (800cb54 <mem_trim+0x1e0>)
 800ca50:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ca54:	4943      	ldr	r1, [pc, #268]	; (800cb64 <mem_trim+0x1f0>)
 800ca56:	4841      	ldr	r0, [pc, #260]	; (800cb5c <mem_trim+0x1e8>)
 800ca58:	f00a fbb6 	bl	80171c8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	881b      	ldrh	r3, [r3, #0]
 800ca60:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ca62:	8afa      	ldrh	r2, [r7, #22]
 800ca64:	8bfb      	ldrh	r3, [r7, #30]
 800ca66:	4413      	add	r3, r2
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	3308      	adds	r3, #8
 800ca6c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ca6e:	4b3e      	ldr	r3, [pc, #248]	; (800cb68 <mem_trim+0x1f4>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	693a      	ldr	r2, [r7, #16]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d106      	bne.n	800ca86 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800ca78:	89fb      	ldrh	r3, [r7, #14]
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7ff fdd2 	bl	800c624 <ptr_to_mem>
 800ca80:	4603      	mov	r3, r0
 800ca82:	4a39      	ldr	r2, [pc, #228]	; (800cb68 <mem_trim+0x1f4>)
 800ca84:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ca86:	89fb      	ldrh	r3, [r7, #14]
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7ff fdcb 	bl	800c624 <ptr_to_mem>
 800ca8e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	2200      	movs	r2, #0
 800ca94:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ca96:	693b      	ldr	r3, [r7, #16]
 800ca98:	89ba      	ldrh	r2, [r7, #12]
 800ca9a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	8afa      	ldrh	r2, [r7, #22]
 800caa0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800caa2:	69bb      	ldr	r3, [r7, #24]
 800caa4:	89fa      	ldrh	r2, [r7, #14]
 800caa6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	881b      	ldrh	r3, [r3, #0]
 800caac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cab0:	d047      	beq.n	800cb42 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cab2:	693b      	ldr	r3, [r7, #16]
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7ff fdb4 	bl	800c624 <ptr_to_mem>
 800cabc:	4602      	mov	r2, r0
 800cabe:	89fb      	ldrh	r3, [r7, #14]
 800cac0:	8053      	strh	r3, [r2, #2]
 800cac2:	e03e      	b.n	800cb42 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800cac4:	8bfb      	ldrh	r3, [r7, #30]
 800cac6:	f103 0214 	add.w	r2, r3, #20
 800caca:	8abb      	ldrh	r3, [r7, #20]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d838      	bhi.n	800cb42 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cad0:	8afa      	ldrh	r2, [r7, #22]
 800cad2:	8bfb      	ldrh	r3, [r7, #30]
 800cad4:	4413      	add	r3, r2
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	3308      	adds	r3, #8
 800cada:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	881b      	ldrh	r3, [r3, #0]
 800cae0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cae4:	d106      	bne.n	800caf4 <mem_trim+0x180>
 800cae6:	4b1b      	ldr	r3, [pc, #108]	; (800cb54 <mem_trim+0x1e0>)
 800cae8:	f240 3216 	movw	r2, #790	; 0x316
 800caec:	491d      	ldr	r1, [pc, #116]	; (800cb64 <mem_trim+0x1f0>)
 800caee:	481b      	ldr	r0, [pc, #108]	; (800cb5c <mem_trim+0x1e8>)
 800caf0:	f00a fb6a 	bl	80171c8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800caf4:	89fb      	ldrh	r3, [r7, #14]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7ff fd94 	bl	800c624 <ptr_to_mem>
 800cafc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800cafe:	4b1a      	ldr	r3, [pc, #104]	; (800cb68 <mem_trim+0x1f4>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	693a      	ldr	r2, [r7, #16]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d202      	bcs.n	800cb0e <mem_trim+0x19a>
      lfree = mem2;
 800cb08:	4a17      	ldr	r2, [pc, #92]	; (800cb68 <mem_trim+0x1f4>)
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	2200      	movs	r2, #0
 800cb12:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cb14:	69bb      	ldr	r3, [r7, #24]
 800cb16:	881a      	ldrh	r2, [r3, #0]
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	8afa      	ldrh	r2, [r7, #22]
 800cb20:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	89fa      	ldrh	r2, [r7, #14]
 800cb26:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	881b      	ldrh	r3, [r3, #0]
 800cb2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb30:	d007      	beq.n	800cb42 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7ff fd74 	bl	800c624 <ptr_to_mem>
 800cb3c:	4602      	mov	r2, r0
 800cb3e:	89fb      	ldrh	r3, [r7, #14]
 800cb40:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800cb42:	687b      	ldr	r3, [r7, #4]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3720      	adds	r7, #32
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	200060c4 	.word	0x200060c4
 800cb50:	200060c8 	.word	0x200060c8
 800cb54:	080182d4 	.word	0x080182d4
 800cb58:	08018444 	.word	0x08018444
 800cb5c:	0801831c 	.word	0x0801831c
 800cb60:	0801845c 	.word	0x0801845c
 800cb64:	0801847c 	.word	0x0801847c
 800cb68:	200060cc 	.word	0x200060cc

0800cb6c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b088      	sub	sp, #32
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	4603      	mov	r3, r0
 800cb74:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cb76:	88fb      	ldrh	r3, [r7, #6]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d101      	bne.n	800cb80 <mem_malloc+0x14>
    return NULL;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	e0d9      	b.n	800cd34 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cb80:	88fb      	ldrh	r3, [r7, #6]
 800cb82:	3303      	adds	r3, #3
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	f023 0303 	bic.w	r3, r3, #3
 800cb8a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cb8c:	8bbb      	ldrh	r3, [r7, #28]
 800cb8e:	2b0b      	cmp	r3, #11
 800cb90:	d801      	bhi.n	800cb96 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cb92:	230c      	movs	r3, #12
 800cb94:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cb96:	8bbb      	ldrh	r3, [r7, #28]
 800cb98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cb9c:	d803      	bhi.n	800cba6 <mem_malloc+0x3a>
 800cb9e:	8bba      	ldrh	r2, [r7, #28]
 800cba0:	88fb      	ldrh	r3, [r7, #6]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d201      	bcs.n	800cbaa <mem_malloc+0x3e>
    return NULL;
 800cba6:	2300      	movs	r3, #0
 800cba8:	e0c4      	b.n	800cd34 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cbaa:	4b64      	ldr	r3, [pc, #400]	; (800cd3c <mem_malloc+0x1d0>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7ff fd4a 	bl	800c648 <mem_to_ptr>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	83fb      	strh	r3, [r7, #30]
 800cbb8:	e0b4      	b.n	800cd24 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cbba:	8bfb      	ldrh	r3, [r7, #30]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f7ff fd31 	bl	800c624 <ptr_to_mem>
 800cbc2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	791b      	ldrb	r3, [r3, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	f040 80a4 	bne.w	800cd16 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	881b      	ldrh	r3, [r3, #0]
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	8bfb      	ldrh	r3, [r7, #30]
 800cbd6:	1ad3      	subs	r3, r2, r3
 800cbd8:	f1a3 0208 	sub.w	r2, r3, #8
 800cbdc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	f0c0 8099 	bcc.w	800cd16 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	881b      	ldrh	r3, [r3, #0]
 800cbe8:	461a      	mov	r2, r3
 800cbea:	8bfb      	ldrh	r3, [r7, #30]
 800cbec:	1ad3      	subs	r3, r2, r3
 800cbee:	f1a3 0208 	sub.w	r2, r3, #8
 800cbf2:	8bbb      	ldrh	r3, [r7, #28]
 800cbf4:	3314      	adds	r3, #20
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d333      	bcc.n	800cc62 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cbfa:	8bfa      	ldrh	r2, [r7, #30]
 800cbfc:	8bbb      	ldrh	r3, [r7, #28]
 800cbfe:	4413      	add	r3, r2
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	3308      	adds	r3, #8
 800cc04:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cc06:	8a7b      	ldrh	r3, [r7, #18]
 800cc08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc0c:	d106      	bne.n	800cc1c <mem_malloc+0xb0>
 800cc0e:	4b4c      	ldr	r3, [pc, #304]	; (800cd40 <mem_malloc+0x1d4>)
 800cc10:	f240 3287 	movw	r2, #903	; 0x387
 800cc14:	494b      	ldr	r1, [pc, #300]	; (800cd44 <mem_malloc+0x1d8>)
 800cc16:	484c      	ldr	r0, [pc, #304]	; (800cd48 <mem_malloc+0x1dc>)
 800cc18:	f00a fad6 	bl	80171c8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cc1c:	8a7b      	ldrh	r3, [r7, #18]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7ff fd00 	bl	800c624 <ptr_to_mem>
 800cc24:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	881a      	ldrh	r2, [r3, #0]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	8bfa      	ldrh	r2, [r7, #30]
 800cc38:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	8a7a      	ldrh	r2, [r7, #18]
 800cc3e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	2201      	movs	r2, #1
 800cc44:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	881b      	ldrh	r3, [r3, #0]
 800cc4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cc4e:	d00b      	beq.n	800cc68 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	881b      	ldrh	r3, [r3, #0]
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7ff fce5 	bl	800c624 <ptr_to_mem>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	8a7b      	ldrh	r3, [r7, #18]
 800cc5e:	8053      	strh	r3, [r2, #2]
 800cc60:	e002      	b.n	800cc68 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	2201      	movs	r2, #1
 800cc66:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cc68:	4b34      	ldr	r3, [pc, #208]	; (800cd3c <mem_malloc+0x1d0>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	697a      	ldr	r2, [r7, #20]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d127      	bne.n	800ccc2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 800cc72:	4b32      	ldr	r3, [pc, #200]	; (800cd3c <mem_malloc+0x1d0>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cc78:	e005      	b.n	800cc86 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cc7a:	69bb      	ldr	r3, [r7, #24]
 800cc7c:	881b      	ldrh	r3, [r3, #0]
 800cc7e:	4618      	mov	r0, r3
 800cc80:	f7ff fcd0 	bl	800c624 <ptr_to_mem>
 800cc84:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	791b      	ldrb	r3, [r3, #4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d004      	beq.n	800cc98 <mem_malloc+0x12c>
 800cc8e:	4b2f      	ldr	r3, [pc, #188]	; (800cd4c <mem_malloc+0x1e0>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	69ba      	ldr	r2, [r7, #24]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d1f0      	bne.n	800cc7a <mem_malloc+0x10e>
          }
          lfree = cur;
 800cc98:	4a28      	ldr	r2, [pc, #160]	; (800cd3c <mem_malloc+0x1d0>)
 800cc9a:	69bb      	ldr	r3, [r7, #24]
 800cc9c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cc9e:	4b27      	ldr	r3, [pc, #156]	; (800cd3c <mem_malloc+0x1d0>)
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	4b2a      	ldr	r3, [pc, #168]	; (800cd4c <mem_malloc+0x1e0>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d00b      	beq.n	800ccc2 <mem_malloc+0x156>
 800ccaa:	4b24      	ldr	r3, [pc, #144]	; (800cd3c <mem_malloc+0x1d0>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	791b      	ldrb	r3, [r3, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d006      	beq.n	800ccc2 <mem_malloc+0x156>
 800ccb4:	4b22      	ldr	r3, [pc, #136]	; (800cd40 <mem_malloc+0x1d4>)
 800ccb6:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ccba:	4925      	ldr	r1, [pc, #148]	; (800cd50 <mem_malloc+0x1e4>)
 800ccbc:	4822      	ldr	r0, [pc, #136]	; (800cd48 <mem_malloc+0x1dc>)
 800ccbe:	f00a fa83 	bl	80171c8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ccc2:	8bba      	ldrh	r2, [r7, #28]
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	3308      	adds	r3, #8
 800ccca:	4a20      	ldr	r2, [pc, #128]	; (800cd4c <mem_malloc+0x1e0>)
 800cccc:	6812      	ldr	r2, [r2, #0]
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d906      	bls.n	800cce0 <mem_malloc+0x174>
 800ccd2:	4b1b      	ldr	r3, [pc, #108]	; (800cd40 <mem_malloc+0x1d4>)
 800ccd4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ccd8:	491e      	ldr	r1, [pc, #120]	; (800cd54 <mem_malloc+0x1e8>)
 800ccda:	481b      	ldr	r0, [pc, #108]	; (800cd48 <mem_malloc+0x1dc>)
 800ccdc:	f00a fa74 	bl	80171c8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	f003 0303 	and.w	r3, r3, #3
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d006      	beq.n	800ccf8 <mem_malloc+0x18c>
 800ccea:	4b15      	ldr	r3, [pc, #84]	; (800cd40 <mem_malloc+0x1d4>)
 800ccec:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ccf0:	4919      	ldr	r1, [pc, #100]	; (800cd58 <mem_malloc+0x1ec>)
 800ccf2:	4815      	ldr	r0, [pc, #84]	; (800cd48 <mem_malloc+0x1dc>)
 800ccf4:	f00a fa68 	bl	80171c8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	f003 0303 	and.w	r3, r3, #3
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d006      	beq.n	800cd10 <mem_malloc+0x1a4>
 800cd02:	4b0f      	ldr	r3, [pc, #60]	; (800cd40 <mem_malloc+0x1d4>)
 800cd04:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cd08:	4914      	ldr	r1, [pc, #80]	; (800cd5c <mem_malloc+0x1f0>)
 800cd0a:	480f      	ldr	r0, [pc, #60]	; (800cd48 <mem_malloc+0x1dc>)
 800cd0c:	f00a fa5c 	bl	80171c8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	3308      	adds	r3, #8
 800cd14:	e00e      	b.n	800cd34 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800cd16:	8bfb      	ldrh	r3, [r7, #30]
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7ff fc83 	bl	800c624 <ptr_to_mem>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	881b      	ldrh	r3, [r3, #0]
 800cd22:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cd24:	8bfa      	ldrh	r2, [r7, #30]
 800cd26:	8bbb      	ldrh	r3, [r7, #28]
 800cd28:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	f4ff af44 	bcc.w	800cbba <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3720      	adds	r7, #32
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}
 800cd3c:	200060cc 	.word	0x200060cc
 800cd40:	080182d4 	.word	0x080182d4
 800cd44:	0801847c 	.word	0x0801847c
 800cd48:	0801831c 	.word	0x0801831c
 800cd4c:	200060c8 	.word	0x200060c8
 800cd50:	08018490 	.word	0x08018490
 800cd54:	080184ac 	.word	0x080184ac
 800cd58:	080184dc 	.word	0x080184dc
 800cd5c:	0801850c 	.word	0x0801850c

0800cd60 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b085      	sub	sp, #20
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	685b      	ldr	r3, [r3, #4]
 800cd74:	3303      	adds	r3, #3
 800cd76:	f023 0303 	bic.w	r3, r3, #3
 800cd7a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	60fb      	str	r3, [r7, #12]
 800cd80:	e011      	b.n	800cda6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	681a      	ldr	r2, [r3, #0]
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	881b      	ldrh	r3, [r3, #0]
 800cd98:	461a      	mov	r2, r3
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	4413      	add	r3, r2
 800cd9e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	3301      	adds	r3, #1
 800cda4:	60fb      	str	r3, [r7, #12]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	885b      	ldrh	r3, [r3, #2]
 800cdaa:	461a      	mov	r2, r3
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	dbe7      	blt.n	800cd82 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cdb2:	bf00      	nop
 800cdb4:	bf00      	nop
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	80fb      	strh	r3, [r7, #6]
 800cdca:	e009      	b.n	800cde0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cdcc:	88fb      	ldrh	r3, [r7, #6]
 800cdce:	4a08      	ldr	r2, [pc, #32]	; (800cdf0 <memp_init+0x30>)
 800cdd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f7ff ffc3 	bl	800cd60 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cdda:	88fb      	ldrh	r3, [r7, #6]
 800cddc:	3301      	adds	r3, #1
 800cdde:	80fb      	strh	r3, [r7, #6]
 800cde0:	88fb      	ldrh	r3, [r7, #6]
 800cde2:	2b08      	cmp	r3, #8
 800cde4:	d9f2      	bls.n	800cdcc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cde6:	bf00      	nop
 800cde8:	bf00      	nop
 800cdea:	3708      	adds	r7, #8
 800cdec:	46bd      	mov	sp, r7
 800cdee:	bd80      	pop	{r7, pc}
 800cdf0:	0801acf8 	.word	0x0801acf8

0800cdf4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	689b      	ldr	r3, [r3, #8]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d012      	beq.n	800ce30 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	689b      	ldr	r3, [r3, #8]
 800ce0e:	68fa      	ldr	r2, [r7, #12]
 800ce10:	6812      	ldr	r2, [r2, #0]
 800ce12:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f003 0303 	and.w	r3, r3, #3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d006      	beq.n	800ce2c <do_memp_malloc_pool+0x38>
 800ce1e:	4b07      	ldr	r3, [pc, #28]	; (800ce3c <do_memp_malloc_pool+0x48>)
 800ce20:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ce24:	4906      	ldr	r1, [pc, #24]	; (800ce40 <do_memp_malloc_pool+0x4c>)
 800ce26:	4807      	ldr	r0, [pc, #28]	; (800ce44 <do_memp_malloc_pool+0x50>)
 800ce28:	f00a f9ce 	bl	80171c8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	e000      	b.n	800ce32 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ce30:	2300      	movs	r3, #0
}
 800ce32:	4618      	mov	r0, r3
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	08018530 	.word	0x08018530
 800ce40:	08018560 	.word	0x08018560
 800ce44:	08018584 	.word	0x08018584

0800ce48 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d106      	bne.n	800ce64 <memp_malloc_pool+0x1c>
 800ce56:	4b0a      	ldr	r3, [pc, #40]	; (800ce80 <memp_malloc_pool+0x38>)
 800ce58:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ce5c:	4909      	ldr	r1, [pc, #36]	; (800ce84 <memp_malloc_pool+0x3c>)
 800ce5e:	480a      	ldr	r0, [pc, #40]	; (800ce88 <memp_malloc_pool+0x40>)
 800ce60:	f00a f9b2 	bl	80171c8 <iprintf>
  if (desc == NULL) {
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d101      	bne.n	800ce6e <memp_malloc_pool+0x26>
    return NULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	e003      	b.n	800ce76 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ce6e:	6878      	ldr	r0, [r7, #4]
 800ce70:	f7ff ffc0 	bl	800cdf4 <do_memp_malloc_pool>
 800ce74:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3708      	adds	r7, #8
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	08018530 	.word	0x08018530
 800ce84:	080185ac 	.word	0x080185ac
 800ce88:	08018584 	.word	0x08018584

0800ce8c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	4603      	mov	r3, r0
 800ce94:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ce96:	79fb      	ldrb	r3, [r7, #7]
 800ce98:	2b08      	cmp	r3, #8
 800ce9a:	d908      	bls.n	800ceae <memp_malloc+0x22>
 800ce9c:	4b0a      	ldr	r3, [pc, #40]	; (800cec8 <memp_malloc+0x3c>)
 800ce9e:	f240 1257 	movw	r2, #343	; 0x157
 800cea2:	490a      	ldr	r1, [pc, #40]	; (800cecc <memp_malloc+0x40>)
 800cea4:	480a      	ldr	r0, [pc, #40]	; (800ced0 <memp_malloc+0x44>)
 800cea6:	f00a f98f 	bl	80171c8 <iprintf>
 800ceaa:	2300      	movs	r3, #0
 800ceac:	e008      	b.n	800cec0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ceae:	79fb      	ldrb	r3, [r7, #7]
 800ceb0:	4a08      	ldr	r2, [pc, #32]	; (800ced4 <memp_malloc+0x48>)
 800ceb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7ff ff9c 	bl	800cdf4 <do_memp_malloc_pool>
 800cebc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cebe:	68fb      	ldr	r3, [r7, #12]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3710      	adds	r7, #16
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}
 800cec8:	08018530 	.word	0x08018530
 800cecc:	080185c0 	.word	0x080185c0
 800ced0:	08018584 	.word	0x08018584
 800ced4:	0801acf8 	.word	0x0801acf8

0800ced8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	f003 0303 	and.w	r3, r3, #3
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d006      	beq.n	800cefa <do_memp_free_pool+0x22>
 800ceec:	4b0a      	ldr	r3, [pc, #40]	; (800cf18 <do_memp_free_pool+0x40>)
 800ceee:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800cef2:	490a      	ldr	r1, [pc, #40]	; (800cf1c <do_memp_free_pool+0x44>)
 800cef4:	480a      	ldr	r0, [pc, #40]	; (800cf20 <do_memp_free_pool+0x48>)
 800cef6:	f00a f967 	bl	80171c8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	689b      	ldr	r3, [r3, #8]
 800cf02:	681a      	ldr	r2, [r3, #0]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800cf10:	bf00      	nop
 800cf12:	3710      	adds	r7, #16
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	08018530 	.word	0x08018530
 800cf1c:	080185e0 	.word	0x080185e0
 800cf20:	08018584 	.word	0x08018584

0800cf24 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
 800cf2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d106      	bne.n	800cf42 <memp_free_pool+0x1e>
 800cf34:	4b0a      	ldr	r3, [pc, #40]	; (800cf60 <memp_free_pool+0x3c>)
 800cf36:	f240 1295 	movw	r2, #405	; 0x195
 800cf3a:	490a      	ldr	r1, [pc, #40]	; (800cf64 <memp_free_pool+0x40>)
 800cf3c:	480a      	ldr	r0, [pc, #40]	; (800cf68 <memp_free_pool+0x44>)
 800cf3e:	f00a f943 	bl	80171c8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d007      	beq.n	800cf58 <memp_free_pool+0x34>
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d004      	beq.n	800cf58 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cf4e:	6839      	ldr	r1, [r7, #0]
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f7ff ffc1 	bl	800ced8 <do_memp_free_pool>
 800cf56:	e000      	b.n	800cf5a <memp_free_pool+0x36>
    return;
 800cf58:	bf00      	nop
}
 800cf5a:	3708      	adds	r7, #8
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	08018530 	.word	0x08018530
 800cf64:	080185ac 	.word	0x080185ac
 800cf68:	08018584 	.word	0x08018584

0800cf6c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	4603      	mov	r3, r0
 800cf74:	6039      	str	r1, [r7, #0]
 800cf76:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cf78:	79fb      	ldrb	r3, [r7, #7]
 800cf7a:	2b08      	cmp	r3, #8
 800cf7c:	d907      	bls.n	800cf8e <memp_free+0x22>
 800cf7e:	4b0c      	ldr	r3, [pc, #48]	; (800cfb0 <memp_free+0x44>)
 800cf80:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cf84:	490b      	ldr	r1, [pc, #44]	; (800cfb4 <memp_free+0x48>)
 800cf86:	480c      	ldr	r0, [pc, #48]	; (800cfb8 <memp_free+0x4c>)
 800cf88:	f00a f91e 	bl	80171c8 <iprintf>
 800cf8c:	e00c      	b.n	800cfa8 <memp_free+0x3c>

  if (mem == NULL) {
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d008      	beq.n	800cfa6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800cf94:	79fb      	ldrb	r3, [r7, #7]
 800cf96:	4a09      	ldr	r2, [pc, #36]	; (800cfbc <memp_free+0x50>)
 800cf98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf9c:	6839      	ldr	r1, [r7, #0]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7ff ff9a 	bl	800ced8 <do_memp_free_pool>
 800cfa4:	e000      	b.n	800cfa8 <memp_free+0x3c>
    return;
 800cfa6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cfa8:	3708      	adds	r7, #8
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	08018530 	.word	0x08018530
 800cfb4:	08018600 	.word	0x08018600
 800cfb8:	08018584 	.word	0x08018584
 800cfbc:	0801acf8 	.word	0x0801acf8

0800cfc0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cfc4:	bf00      	nop
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
	...

0800cfd0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
 800cfdc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d108      	bne.n	800cff6 <netif_add+0x26>
 800cfe4:	4b57      	ldr	r3, [pc, #348]	; (800d144 <netif_add+0x174>)
 800cfe6:	f240 1227 	movw	r2, #295	; 0x127
 800cfea:	4957      	ldr	r1, [pc, #348]	; (800d148 <netif_add+0x178>)
 800cfec:	4857      	ldr	r0, [pc, #348]	; (800d14c <netif_add+0x17c>)
 800cfee:	f00a f8eb 	bl	80171c8 <iprintf>
 800cff2:	2300      	movs	r3, #0
 800cff4:	e0a2      	b.n	800d13c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800cff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d108      	bne.n	800d00e <netif_add+0x3e>
 800cffc:	4b51      	ldr	r3, [pc, #324]	; (800d144 <netif_add+0x174>)
 800cffe:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d002:	4953      	ldr	r1, [pc, #332]	; (800d150 <netif_add+0x180>)
 800d004:	4851      	ldr	r0, [pc, #324]	; (800d14c <netif_add+0x17c>)
 800d006:	f00a f8df 	bl	80171c8 <iprintf>
 800d00a:	2300      	movs	r3, #0
 800d00c:	e096      	b.n	800d13c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d101      	bne.n	800d018 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d014:	4b4f      	ldr	r3, [pc, #316]	; (800d154 <netif_add+0x184>)
 800d016:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d101      	bne.n	800d022 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d01e:	4b4d      	ldr	r3, [pc, #308]	; (800d154 <netif_add+0x184>)
 800d020:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d101      	bne.n	800d02c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d028:	4b4a      	ldr	r3, [pc, #296]	; (800d154 <netif_add+0x184>)
 800d02a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2200      	movs	r2, #0
 800d03c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	4a45      	ldr	r2, [pc, #276]	; (800d158 <netif_add+0x188>)
 800d042:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2200      	movs	r2, #0
 800d04e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2200      	movs	r2, #0
 800d056:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6a3a      	ldr	r2, [r7, #32]
 800d05c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d05e:	4b3f      	ldr	r3, [pc, #252]	; (800d15c <netif_add+0x18c>)
 800d060:	781a      	ldrb	r2, [r3, #0]
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d06c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	687a      	ldr	r2, [r7, #4]
 800d072:	68b9      	ldr	r1, [r7, #8]
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f000 f913 	bl	800d2a0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07c:	68f8      	ldr	r0, [r7, #12]
 800d07e:	4798      	blx	r3
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d001      	beq.n	800d08a <netif_add+0xba>
    return NULL;
 800d086:	2300      	movs	r3, #0
 800d088:	e058      	b.n	800d13c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d090:	2bff      	cmp	r3, #255	; 0xff
 800d092:	d103      	bne.n	800d09c <netif_add+0xcc>
        netif->num = 0;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d09c:	2300      	movs	r3, #0
 800d09e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d0a0:	4b2f      	ldr	r3, [pc, #188]	; (800d160 <netif_add+0x190>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	617b      	str	r3, [r7, #20]
 800d0a6:	e02b      	b.n	800d100 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d0a8:	697a      	ldr	r2, [r7, #20]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	429a      	cmp	r2, r3
 800d0ae:	d106      	bne.n	800d0be <netif_add+0xee>
 800d0b0:	4b24      	ldr	r3, [pc, #144]	; (800d144 <netif_add+0x174>)
 800d0b2:	f240 128b 	movw	r2, #395	; 0x18b
 800d0b6:	492b      	ldr	r1, [pc, #172]	; (800d164 <netif_add+0x194>)
 800d0b8:	4824      	ldr	r0, [pc, #144]	; (800d14c <netif_add+0x17c>)
 800d0ba:	f00a f885 	bl	80171c8 <iprintf>
        num_netifs++;
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	2bff      	cmp	r3, #255	; 0xff
 800d0c8:	dd06      	ble.n	800d0d8 <netif_add+0x108>
 800d0ca:	4b1e      	ldr	r3, [pc, #120]	; (800d144 <netif_add+0x174>)
 800d0cc:	f240 128d 	movw	r2, #397	; 0x18d
 800d0d0:	4925      	ldr	r1, [pc, #148]	; (800d168 <netif_add+0x198>)
 800d0d2:	481e      	ldr	r0, [pc, #120]	; (800d14c <netif_add+0x17c>)
 800d0d4:	f00a f878 	bl	80171c8 <iprintf>
        if (netif2->num == netif->num) {
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d108      	bne.n	800d0fa <netif_add+0x12a>
          netif->num++;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	b2da      	uxtb	r2, r3
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d0f8:	e005      	b.n	800d106 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	617b      	str	r3, [r7, #20]
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1d0      	bne.n	800d0a8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d1be      	bne.n	800d08a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d112:	2bfe      	cmp	r3, #254	; 0xfe
 800d114:	d103      	bne.n	800d11e <netif_add+0x14e>
    netif_num = 0;
 800d116:	4b11      	ldr	r3, [pc, #68]	; (800d15c <netif_add+0x18c>)
 800d118:	2200      	movs	r2, #0
 800d11a:	701a      	strb	r2, [r3, #0]
 800d11c:	e006      	b.n	800d12c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d124:	3301      	adds	r3, #1
 800d126:	b2da      	uxtb	r2, r3
 800d128:	4b0c      	ldr	r3, [pc, #48]	; (800d15c <netif_add+0x18c>)
 800d12a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d12c:	4b0c      	ldr	r3, [pc, #48]	; (800d160 <netif_add+0x190>)
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d134:	4a0a      	ldr	r2, [pc, #40]	; (800d160 <netif_add+0x190>)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d13a:	68fb      	ldr	r3, [r7, #12]
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3718      	adds	r7, #24
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	0801861c 	.word	0x0801861c
 800d148:	080186b0 	.word	0x080186b0
 800d14c:	0801866c 	.word	0x0801866c
 800d150:	080186cc 	.word	0x080186cc
 800d154:	0801ad5c 	.word	0x0801ad5c
 800d158:	0800d57b 	.word	0x0800d57b
 800d15c:	20008fc4 	.word	0x20008fc4
 800d160:	20008fbc 	.word	0x20008fbc
 800d164:	080186f0 	.word	0x080186f0
 800d168:	08018704 	.word	0x08018704

0800d16c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d176:	6839      	ldr	r1, [r7, #0]
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f002 fbe5 	bl	800f948 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d17e:	6839      	ldr	r1, [r7, #0]
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f007 f85b 	bl	801423c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d186:	bf00      	nop
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
	...

0800d190 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b086      	sub	sp, #24
 800d194:	af00      	add	r7, sp, #0
 800d196:	60f8      	str	r0, [r7, #12]
 800d198:	60b9      	str	r1, [r7, #8]
 800d19a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d106      	bne.n	800d1b0 <netif_do_set_ipaddr+0x20>
 800d1a2:	4b1d      	ldr	r3, [pc, #116]	; (800d218 <netif_do_set_ipaddr+0x88>)
 800d1a4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d1a8:	491c      	ldr	r1, [pc, #112]	; (800d21c <netif_do_set_ipaddr+0x8c>)
 800d1aa:	481d      	ldr	r0, [pc, #116]	; (800d220 <netif_do_set_ipaddr+0x90>)
 800d1ac:	f00a f80c 	bl	80171c8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d106      	bne.n	800d1c4 <netif_do_set_ipaddr+0x34>
 800d1b6:	4b18      	ldr	r3, [pc, #96]	; (800d218 <netif_do_set_ipaddr+0x88>)
 800d1b8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d1bc:	4917      	ldr	r1, [pc, #92]	; (800d21c <netif_do_set_ipaddr+0x8c>)
 800d1be:	4818      	ldr	r0, [pc, #96]	; (800d220 <netif_do_set_ipaddr+0x90>)
 800d1c0:	f00a f802 	bl	80171c8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d1c4:	68bb      	ldr	r3, [r7, #8]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d01c      	beq.n	800d20c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	3304      	adds	r3, #4
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d1e2:	f107 0314 	add.w	r3, r7, #20
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f7ff ffbf 	bl	800d16c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d002      	beq.n	800d1fa <netif_do_set_ipaddr+0x6a>
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	e000      	b.n	800d1fc <netif_do_set_ipaddr+0x6c>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d200:	2101      	movs	r1, #1
 800d202:	68f8      	ldr	r0, [r7, #12]
 800d204:	f000 f8d2 	bl	800d3ac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d208:	2301      	movs	r3, #1
 800d20a:	e000      	b.n	800d20e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d20c:	2300      	movs	r3, #0
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3718      	adds	r7, #24
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	0801861c 	.word	0x0801861c
 800d21c:	08018734 	.word	0x08018734
 800d220:	0801866c 	.word	0x0801866c

0800d224 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	3308      	adds	r3, #8
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d00a      	beq.n	800d254 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d002      	beq.n	800d24a <netif_do_set_netmask+0x26>
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	e000      	b.n	800d24c <netif_do_set_netmask+0x28>
 800d24a:	2300      	movs	r3, #0
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d250:	2301      	movs	r3, #1
 800d252:	e000      	b.n	800d256 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3714      	adds	r7, #20
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr

0800d262 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d262:	b480      	push	{r7}
 800d264:	b085      	sub	sp, #20
 800d266:	af00      	add	r7, sp, #0
 800d268:	60f8      	str	r0, [r7, #12]
 800d26a:	60b9      	str	r1, [r7, #8]
 800d26c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	330c      	adds	r3, #12
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d00a      	beq.n	800d292 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d002      	beq.n	800d288 <netif_do_set_gw+0x26>
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	e000      	b.n	800d28a <netif_do_set_gw+0x28>
 800d288:	2300      	movs	r3, #0
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d28e:	2301      	movs	r3, #1
 800d290:	e000      	b.n	800d294 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b088      	sub	sp, #32
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
 800d2ac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d101      	bne.n	800d2c0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d2bc:	4b1c      	ldr	r3, [pc, #112]	; (800d330 <netif_set_addr+0x90>)
 800d2be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d101      	bne.n	800d2ca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d2c6:	4b1a      	ldr	r3, [pc, #104]	; (800d330 <netif_set_addr+0x90>)
 800d2c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d101      	bne.n	800d2d4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d2d0:	4b17      	ldr	r3, [pc, #92]	; (800d330 <netif_set_addr+0x90>)
 800d2d2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d003      	beq.n	800d2e2 <netif_set_addr+0x42>
 800d2da:	68bb      	ldr	r3, [r7, #8]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <netif_set_addr+0x46>
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e000      	b.n	800d2e8 <netif_set_addr+0x48>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d006      	beq.n	800d2fe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d2f0:	f107 0310 	add.w	r3, r7, #16
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	68b9      	ldr	r1, [r7, #8]
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f7ff ff49 	bl	800d190 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d2fe:	69fa      	ldr	r2, [r7, #28]
 800d300:	6879      	ldr	r1, [r7, #4]
 800d302:	68f8      	ldr	r0, [r7, #12]
 800d304:	f7ff ff8e 	bl	800d224 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d308:	69ba      	ldr	r2, [r7, #24]
 800d30a:	6839      	ldr	r1, [r7, #0]
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f7ff ffa8 	bl	800d262 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d312:	697b      	ldr	r3, [r7, #20]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d106      	bne.n	800d326 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d318:	f107 0310 	add.w	r3, r7, #16
 800d31c:	461a      	mov	r2, r3
 800d31e:	68b9      	ldr	r1, [r7, #8]
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f7ff ff35 	bl	800d190 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d326:	bf00      	nop
 800d328:	3720      	adds	r7, #32
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}
 800d32e:	bf00      	nop
 800d330:	0801ad5c 	.word	0x0801ad5c

0800d334 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d334:	b480      	push	{r7}
 800d336:	b083      	sub	sp, #12
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d33c:	4a04      	ldr	r2, [pc, #16]	; (800d350 <netif_set_default+0x1c>)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d342:	bf00      	nop
 800d344:	370c      	adds	r7, #12
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	20008fc0 	.word	0x20008fc0

0800d354 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b082      	sub	sp, #8
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d107      	bne.n	800d372 <netif_set_up+0x1e>
 800d362:	4b0f      	ldr	r3, [pc, #60]	; (800d3a0 <netif_set_up+0x4c>)
 800d364:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d368:	490e      	ldr	r1, [pc, #56]	; (800d3a4 <netif_set_up+0x50>)
 800d36a:	480f      	ldr	r0, [pc, #60]	; (800d3a8 <netif_set_up+0x54>)
 800d36c:	f009 ff2c 	bl	80171c8 <iprintf>
 800d370:	e013      	b.n	800d39a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d378:	f003 0301 	and.w	r3, r3, #1
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d10c      	bne.n	800d39a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d386:	f043 0301 	orr.w	r3, r3, #1
 800d38a:	b2da      	uxtb	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d392:	2103      	movs	r1, #3
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f000 f809 	bl	800d3ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	0801861c 	.word	0x0801861c
 800d3a4:	080187a4 	.word	0x080187a4
 800d3a8:	0801866c 	.word	0x0801866c

0800d3ac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b082      	sub	sp, #8
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d106      	bne.n	800d3cc <netif_issue_reports+0x20>
 800d3be:	4b18      	ldr	r3, [pc, #96]	; (800d420 <netif_issue_reports+0x74>)
 800d3c0:	f240 326d 	movw	r2, #877	; 0x36d
 800d3c4:	4917      	ldr	r1, [pc, #92]	; (800d424 <netif_issue_reports+0x78>)
 800d3c6:	4818      	ldr	r0, [pc, #96]	; (800d428 <netif_issue_reports+0x7c>)
 800d3c8:	f009 fefe 	bl	80171c8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3d2:	f003 0304 	and.w	r3, r3, #4
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d01e      	beq.n	800d418 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d3e0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d017      	beq.n	800d418 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d3e8:	78fb      	ldrb	r3, [r7, #3]
 800d3ea:	f003 0301 	and.w	r3, r3, #1
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d013      	beq.n	800d41a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	3304      	adds	r3, #4
 800d3f6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00e      	beq.n	800d41a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d402:	f003 0308 	and.w	r3, r3, #8
 800d406:	2b00      	cmp	r3, #0
 800d408:	d007      	beq.n	800d41a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	3304      	adds	r3, #4
 800d40e:	4619      	mov	r1, r3
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f007 fe7d 	bl	8015110 <etharp_request>
 800d416:	e000      	b.n	800d41a <netif_issue_reports+0x6e>
    return;
 800d418:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d41a:	3708      	adds	r7, #8
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	0801861c 	.word	0x0801861c
 800d424:	080187c0 	.word	0x080187c0
 800d428:	0801866c 	.word	0x0801866c

0800d42c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d107      	bne.n	800d44a <netif_set_down+0x1e>
 800d43a:	4b12      	ldr	r3, [pc, #72]	; (800d484 <netif_set_down+0x58>)
 800d43c:	f240 329b 	movw	r2, #923	; 0x39b
 800d440:	4911      	ldr	r1, [pc, #68]	; (800d488 <netif_set_down+0x5c>)
 800d442:	4812      	ldr	r0, [pc, #72]	; (800d48c <netif_set_down+0x60>)
 800d444:	f009 fec0 	bl	80171c8 <iprintf>
 800d448:	e019      	b.n	800d47e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d450:	f003 0301 	and.w	r3, r3, #1
 800d454:	2b00      	cmp	r3, #0
 800d456:	d012      	beq.n	800d47e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d45e:	f023 0301 	bic.w	r3, r3, #1
 800d462:	b2da      	uxtb	r2, r3
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d470:	f003 0308 	and.w	r3, r3, #8
 800d474:	2b00      	cmp	r3, #0
 800d476:	d002      	beq.n	800d47e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f007 fa07 	bl	801488c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	0801861c 	.word	0x0801861c
 800d488:	080187e4 	.word	0x080187e4
 800d48c:	0801866c 	.word	0x0801866c

0800d490 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d107      	bne.n	800d4ae <netif_set_link_up+0x1e>
 800d49e:	4b13      	ldr	r3, [pc, #76]	; (800d4ec <netif_set_link_up+0x5c>)
 800d4a0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d4a4:	4912      	ldr	r1, [pc, #72]	; (800d4f0 <netif_set_link_up+0x60>)
 800d4a6:	4813      	ldr	r0, [pc, #76]	; (800d4f4 <netif_set_link_up+0x64>)
 800d4a8:	f009 fe8e 	bl	80171c8 <iprintf>
 800d4ac:	e01b      	b.n	800d4e6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4b4:	f003 0304 	and.w	r3, r3, #4
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d114      	bne.n	800d4e6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4c2:	f043 0304 	orr.w	r3, r3, #4
 800d4c6:	b2da      	uxtb	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d4ce:	2103      	movs	r1, #3
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f7ff ff6b 	bl	800d3ac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	69db      	ldr	r3, [r3, #28]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d003      	beq.n	800d4e6 <netif_set_link_up+0x56>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	69db      	ldr	r3, [r3, #28]
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}
 800d4ec:	0801861c 	.word	0x0801861c
 800d4f0:	08018804 	.word	0x08018804
 800d4f4:	0801866c 	.word	0x0801866c

0800d4f8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2b00      	cmp	r3, #0
 800d504:	d107      	bne.n	800d516 <netif_set_link_down+0x1e>
 800d506:	4b11      	ldr	r3, [pc, #68]	; (800d54c <netif_set_link_down+0x54>)
 800d508:	f240 4206 	movw	r2, #1030	; 0x406
 800d50c:	4910      	ldr	r1, [pc, #64]	; (800d550 <netif_set_link_down+0x58>)
 800d50e:	4811      	ldr	r0, [pc, #68]	; (800d554 <netif_set_link_down+0x5c>)
 800d510:	f009 fe5a 	bl	80171c8 <iprintf>
 800d514:	e017      	b.n	800d546 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d51c:	f003 0304 	and.w	r3, r3, #4
 800d520:	2b00      	cmp	r3, #0
 800d522:	d010      	beq.n	800d546 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d52a:	f023 0304 	bic.w	r3, r3, #4
 800d52e:	b2da      	uxtb	r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	69db      	ldr	r3, [r3, #28]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d003      	beq.n	800d546 <netif_set_link_down+0x4e>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	69db      	ldr	r3, [r3, #28]
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d546:	3708      	adds	r7, #8
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}
 800d54c:	0801861c 	.word	0x0801861c
 800d550:	08018828 	.word	0x08018828
 800d554:	0801866c 	.word	0x0801866c

0800d558 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d558:	b480      	push	{r7}
 800d55a:	b083      	sub	sp, #12
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d002      	beq.n	800d56e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	683a      	ldr	r2, [r7, #0]
 800d56c:	61da      	str	r2, [r3, #28]
  }
}
 800d56e:	bf00      	nop
 800d570:	370c      	adds	r7, #12
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr

0800d57a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d57a:	b480      	push	{r7}
 800d57c:	b085      	sub	sp, #20
 800d57e:	af00      	add	r7, sp, #0
 800d580:	60f8      	str	r0, [r7, #12]
 800d582:	60b9      	str	r1, [r7, #8]
 800d584:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d586:	f06f 030b 	mvn.w	r3, #11
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3714      	adds	r7, #20
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr
	...

0800d598 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d598:	b480      	push	{r7}
 800d59a:	b085      	sub	sp, #20
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	4603      	mov	r3, r0
 800d5a0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d5a2:	79fb      	ldrb	r3, [r7, #7]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d013      	beq.n	800d5d0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d5a8:	4b0d      	ldr	r3, [pc, #52]	; (800d5e0 <netif_get_by_index+0x48>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	60fb      	str	r3, [r7, #12]
 800d5ae:	e00c      	b.n	800d5ca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	79fa      	ldrb	r2, [r7, #7]
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d101      	bne.n	800d5c4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	e006      	b.n	800d5d2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	60fb      	str	r3, [r7, #12]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d1ef      	bne.n	800d5b0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d5d0:	2300      	movs	r3, #0
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3714      	adds	r7, #20
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr
 800d5de:	bf00      	nop
 800d5e0:	20008fbc 	.word	0x20008fbc

0800d5e4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d5ea:	4b0c      	ldr	r3, [pc, #48]	; (800d61c <pbuf_free_ooseq+0x38>)
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d5f0:	4b0b      	ldr	r3, [pc, #44]	; (800d620 <pbuf_free_ooseq+0x3c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	607b      	str	r3, [r7, #4]
 800d5f6:	e00a      	b.n	800d60e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d003      	beq.n	800d608 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f002 f9df 	bl	800f9c4 <tcp_free_ooseq>
      return;
 800d606:	e005      	b.n	800d614 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	68db      	ldr	r3, [r3, #12]
 800d60c:	607b      	str	r3, [r7, #4]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d1f1      	bne.n	800d5f8 <pbuf_free_ooseq+0x14>
    }
  }
}
 800d614:	3708      	adds	r7, #8
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	20008fc5 	.word	0x20008fc5
 800d620:	20008fd4 	.word	0x20008fd4

0800d624 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d624:	b480      	push	{r7}
 800d626:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d628:	4b03      	ldr	r3, [pc, #12]	; (800d638 <pbuf_pool_is_empty+0x14>)
 800d62a:	2201      	movs	r2, #1
 800d62c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d62e:	bf00      	nop
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr
 800d638:	20008fc5 	.word	0x20008fc5

0800d63c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	4611      	mov	r1, r2
 800d648:	461a      	mov	r2, r3
 800d64a:	460b      	mov	r3, r1
 800d64c:	80fb      	strh	r3, [r7, #6]
 800d64e:	4613      	mov	r3, r2
 800d650:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2200      	movs	r2, #0
 800d656:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	88fa      	ldrh	r2, [r7, #6]
 800d662:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	88ba      	ldrh	r2, [r7, #4]
 800d668:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d66a:	8b3b      	ldrh	r3, [r7, #24]
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	7f3a      	ldrb	r2, [r7, #28]
 800d676:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2201      	movs	r2, #1
 800d67c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2200      	movs	r2, #0
 800d682:	73da      	strb	r2, [r3, #15]
}
 800d684:	bf00      	nop
 800d686:	3714      	adds	r7, #20
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b08c      	sub	sp, #48	; 0x30
 800d694:	af02      	add	r7, sp, #8
 800d696:	4603      	mov	r3, r0
 800d698:	71fb      	strb	r3, [r7, #7]
 800d69a:	460b      	mov	r3, r1
 800d69c:	80bb      	strh	r3, [r7, #4]
 800d69e:	4613      	mov	r3, r2
 800d6a0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d6a2:	79fb      	ldrb	r3, [r7, #7]
 800d6a4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d6a6:	887b      	ldrh	r3, [r7, #2]
 800d6a8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d6ac:	d07f      	beq.n	800d7ae <pbuf_alloc+0x11e>
 800d6ae:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d6b2:	f300 80c8 	bgt.w	800d846 <pbuf_alloc+0x1b6>
 800d6b6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d6ba:	d010      	beq.n	800d6de <pbuf_alloc+0x4e>
 800d6bc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d6c0:	f300 80c1 	bgt.w	800d846 <pbuf_alloc+0x1b6>
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d002      	beq.n	800d6ce <pbuf_alloc+0x3e>
 800d6c8:	2b41      	cmp	r3, #65	; 0x41
 800d6ca:	f040 80bc 	bne.w	800d846 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d6ce:	887a      	ldrh	r2, [r7, #2]
 800d6d0:	88bb      	ldrh	r3, [r7, #4]
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	f000 f8d1 	bl	800d87c <pbuf_alloc_reference>
 800d6da:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d6dc:	e0bd      	b.n	800d85a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d6e6:	88bb      	ldrh	r3, [r7, #4]
 800d6e8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d6ea:	2008      	movs	r0, #8
 800d6ec:	f7ff fbce 	bl	800ce8c <memp_malloc>
 800d6f0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d109      	bne.n	800d70c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d6f8:	f7ff ff94 	bl	800d624 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d002      	beq.n	800d708 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d702:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d704:	f000 faa8 	bl	800dc58 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d708:	2300      	movs	r3, #0
 800d70a:	e0a7      	b.n	800d85c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d70c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d70e:	3303      	adds	r3, #3
 800d710:	b29b      	uxth	r3, r3
 800d712:	f023 0303 	bic.w	r3, r3, #3
 800d716:	b29b      	uxth	r3, r3
 800d718:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	8b7a      	ldrh	r2, [r7, #26]
 800d720:	4293      	cmp	r3, r2
 800d722:	bf28      	it	cs
 800d724:	4613      	movcs	r3, r2
 800d726:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d728:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d72a:	3310      	adds	r3, #16
 800d72c:	693a      	ldr	r2, [r7, #16]
 800d72e:	4413      	add	r3, r2
 800d730:	3303      	adds	r3, #3
 800d732:	f023 0303 	bic.w	r3, r3, #3
 800d736:	4618      	mov	r0, r3
 800d738:	89f9      	ldrh	r1, [r7, #14]
 800d73a:	8b7a      	ldrh	r2, [r7, #26]
 800d73c:	2300      	movs	r3, #0
 800d73e:	9301      	str	r3, [sp, #4]
 800d740:	887b      	ldrh	r3, [r7, #2]
 800d742:	9300      	str	r3, [sp, #0]
 800d744:	460b      	mov	r3, r1
 800d746:	4601      	mov	r1, r0
 800d748:	6938      	ldr	r0, [r7, #16]
 800d74a:	f7ff ff77 	bl	800d63c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	f003 0303 	and.w	r3, r3, #3
 800d756:	2b00      	cmp	r3, #0
 800d758:	d006      	beq.n	800d768 <pbuf_alloc+0xd8>
 800d75a:	4b42      	ldr	r3, [pc, #264]	; (800d864 <pbuf_alloc+0x1d4>)
 800d75c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d760:	4941      	ldr	r1, [pc, #260]	; (800d868 <pbuf_alloc+0x1d8>)
 800d762:	4842      	ldr	r0, [pc, #264]	; (800d86c <pbuf_alloc+0x1dc>)
 800d764:	f009 fd30 	bl	80171c8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d768:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d76a:	3303      	adds	r3, #3
 800d76c:	f023 0303 	bic.w	r3, r3, #3
 800d770:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d774:	d106      	bne.n	800d784 <pbuf_alloc+0xf4>
 800d776:	4b3b      	ldr	r3, [pc, #236]	; (800d864 <pbuf_alloc+0x1d4>)
 800d778:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d77c:	493c      	ldr	r1, [pc, #240]	; (800d870 <pbuf_alloc+0x1e0>)
 800d77e:	483b      	ldr	r0, [pc, #236]	; (800d86c <pbuf_alloc+0x1dc>)
 800d780:	f009 fd22 	bl	80171c8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d786:	2b00      	cmp	r3, #0
 800d788:	d102      	bne.n	800d790 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	627b      	str	r3, [r7, #36]	; 0x24
 800d78e:	e002      	b.n	800d796 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	693a      	ldr	r2, [r7, #16]
 800d794:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d79a:	8b7a      	ldrh	r2, [r7, #26]
 800d79c:	89fb      	ldrh	r3, [r7, #14]
 800d79e:	1ad3      	subs	r3, r2, r3
 800d7a0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d7a6:	8b7b      	ldrh	r3, [r7, #26]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d19e      	bne.n	800d6ea <pbuf_alloc+0x5a>
      break;
 800d7ac:	e055      	b.n	800d85a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d7ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7b0:	3303      	adds	r3, #3
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	f023 0303 	bic.w	r3, r3, #3
 800d7b8:	b29a      	uxth	r2, r3
 800d7ba:	88bb      	ldrh	r3, [r7, #4]
 800d7bc:	3303      	adds	r3, #3
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	f023 0303 	bic.w	r3, r3, #3
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	4413      	add	r3, r2
 800d7c8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d7ca:	8b3b      	ldrh	r3, [r7, #24]
 800d7cc:	3310      	adds	r3, #16
 800d7ce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d7d0:	8b3a      	ldrh	r2, [r7, #24]
 800d7d2:	88bb      	ldrh	r3, [r7, #4]
 800d7d4:	3303      	adds	r3, #3
 800d7d6:	f023 0303 	bic.w	r3, r3, #3
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d306      	bcc.n	800d7ec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d7de:	8afa      	ldrh	r2, [r7, #22]
 800d7e0:	88bb      	ldrh	r3, [r7, #4]
 800d7e2:	3303      	adds	r3, #3
 800d7e4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d201      	bcs.n	800d7f0 <pbuf_alloc+0x160>
        return NULL;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	e035      	b.n	800d85c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d7f0:	8afb      	ldrh	r3, [r7, #22]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f7ff f9ba 	bl	800cb6c <mem_malloc>
 800d7f8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d101      	bne.n	800d804 <pbuf_alloc+0x174>
        return NULL;
 800d800:	2300      	movs	r3, #0
 800d802:	e02b      	b.n	800d85c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d804:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d806:	3310      	adds	r3, #16
 800d808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d80a:	4413      	add	r3, r2
 800d80c:	3303      	adds	r3, #3
 800d80e:	f023 0303 	bic.w	r3, r3, #3
 800d812:	4618      	mov	r0, r3
 800d814:	88b9      	ldrh	r1, [r7, #4]
 800d816:	88ba      	ldrh	r2, [r7, #4]
 800d818:	2300      	movs	r3, #0
 800d81a:	9301      	str	r3, [sp, #4]
 800d81c:	887b      	ldrh	r3, [r7, #2]
 800d81e:	9300      	str	r3, [sp, #0]
 800d820:	460b      	mov	r3, r1
 800d822:	4601      	mov	r1, r0
 800d824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d826:	f7ff ff09 	bl	800d63c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	f003 0303 	and.w	r3, r3, #3
 800d832:	2b00      	cmp	r3, #0
 800d834:	d010      	beq.n	800d858 <pbuf_alloc+0x1c8>
 800d836:	4b0b      	ldr	r3, [pc, #44]	; (800d864 <pbuf_alloc+0x1d4>)
 800d838:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d83c:	490d      	ldr	r1, [pc, #52]	; (800d874 <pbuf_alloc+0x1e4>)
 800d83e:	480b      	ldr	r0, [pc, #44]	; (800d86c <pbuf_alloc+0x1dc>)
 800d840:	f009 fcc2 	bl	80171c8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d844:	e008      	b.n	800d858 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d846:	4b07      	ldr	r3, [pc, #28]	; (800d864 <pbuf_alloc+0x1d4>)
 800d848:	f240 1227 	movw	r2, #295	; 0x127
 800d84c:	490a      	ldr	r1, [pc, #40]	; (800d878 <pbuf_alloc+0x1e8>)
 800d84e:	4807      	ldr	r0, [pc, #28]	; (800d86c <pbuf_alloc+0x1dc>)
 800d850:	f009 fcba 	bl	80171c8 <iprintf>
      return NULL;
 800d854:	2300      	movs	r3, #0
 800d856:	e001      	b.n	800d85c <pbuf_alloc+0x1cc>
      break;
 800d858:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3728      	adds	r7, #40	; 0x28
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}
 800d864:	0801884c 	.word	0x0801884c
 800d868:	0801887c 	.word	0x0801887c
 800d86c:	080188ac 	.word	0x080188ac
 800d870:	080188d4 	.word	0x080188d4
 800d874:	08018908 	.word	0x08018908
 800d878:	08018934 	.word	0x08018934

0800d87c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b086      	sub	sp, #24
 800d880:	af02      	add	r7, sp, #8
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	460b      	mov	r3, r1
 800d886:	807b      	strh	r3, [r7, #2]
 800d888:	4613      	mov	r3, r2
 800d88a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d88c:	883b      	ldrh	r3, [r7, #0]
 800d88e:	2b41      	cmp	r3, #65	; 0x41
 800d890:	d009      	beq.n	800d8a6 <pbuf_alloc_reference+0x2a>
 800d892:	883b      	ldrh	r3, [r7, #0]
 800d894:	2b01      	cmp	r3, #1
 800d896:	d006      	beq.n	800d8a6 <pbuf_alloc_reference+0x2a>
 800d898:	4b0f      	ldr	r3, [pc, #60]	; (800d8d8 <pbuf_alloc_reference+0x5c>)
 800d89a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d89e:	490f      	ldr	r1, [pc, #60]	; (800d8dc <pbuf_alloc_reference+0x60>)
 800d8a0:	480f      	ldr	r0, [pc, #60]	; (800d8e0 <pbuf_alloc_reference+0x64>)
 800d8a2:	f009 fc91 	bl	80171c8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d8a6:	2007      	movs	r0, #7
 800d8a8:	f7ff faf0 	bl	800ce8c <memp_malloc>
 800d8ac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d101      	bne.n	800d8b8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	e00b      	b.n	800d8d0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d8b8:	8879      	ldrh	r1, [r7, #2]
 800d8ba:	887a      	ldrh	r2, [r7, #2]
 800d8bc:	2300      	movs	r3, #0
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	883b      	ldrh	r3, [r7, #0]
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	6879      	ldr	r1, [r7, #4]
 800d8c8:	68f8      	ldr	r0, [r7, #12]
 800d8ca:	f7ff feb7 	bl	800d63c <pbuf_init_alloced_pbuf>
  return p;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3710      	adds	r7, #16
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	0801884c 	.word	0x0801884c
 800d8dc:	08018950 	.word	0x08018950
 800d8e0:	080188ac 	.word	0x080188ac

0800d8e4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b088      	sub	sp, #32
 800d8e8:	af02      	add	r7, sp, #8
 800d8ea:	607b      	str	r3, [r7, #4]
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	73fb      	strb	r3, [r7, #15]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	81bb      	strh	r3, [r7, #12]
 800d8f4:	4613      	mov	r3, r2
 800d8f6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d8f8:	7bfb      	ldrb	r3, [r7, #15]
 800d8fa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d8fc:	8a7b      	ldrh	r3, [r7, #18]
 800d8fe:	3303      	adds	r3, #3
 800d900:	f023 0203 	bic.w	r2, r3, #3
 800d904:	89bb      	ldrh	r3, [r7, #12]
 800d906:	441a      	add	r2, r3
 800d908:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d901      	bls.n	800d912 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d90e:	2300      	movs	r3, #0
 800d910:	e018      	b.n	800d944 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d912:	6a3b      	ldr	r3, [r7, #32]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d007      	beq.n	800d928 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d918:	8a7b      	ldrh	r3, [r7, #18]
 800d91a:	3303      	adds	r3, #3
 800d91c:	f023 0303 	bic.w	r3, r3, #3
 800d920:	6a3a      	ldr	r2, [r7, #32]
 800d922:	4413      	add	r3, r2
 800d924:	617b      	str	r3, [r7, #20]
 800d926:	e001      	b.n	800d92c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d928:	2300      	movs	r3, #0
 800d92a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	89b9      	ldrh	r1, [r7, #12]
 800d930:	89ba      	ldrh	r2, [r7, #12]
 800d932:	2302      	movs	r3, #2
 800d934:	9301      	str	r3, [sp, #4]
 800d936:	897b      	ldrh	r3, [r7, #10]
 800d938:	9300      	str	r3, [sp, #0]
 800d93a:	460b      	mov	r3, r1
 800d93c:	6979      	ldr	r1, [r7, #20]
 800d93e:	f7ff fe7d 	bl	800d63c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d942:	687b      	ldr	r3, [r7, #4]
}
 800d944:	4618      	mov	r0, r3
 800d946:	3718      	adds	r7, #24
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	460b      	mov	r3, r1
 800d956:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d106      	bne.n	800d96c <pbuf_realloc+0x20>
 800d95e:	4b3a      	ldr	r3, [pc, #232]	; (800da48 <pbuf_realloc+0xfc>)
 800d960:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d964:	4939      	ldr	r1, [pc, #228]	; (800da4c <pbuf_realloc+0x100>)
 800d966:	483a      	ldr	r0, [pc, #232]	; (800da50 <pbuf_realloc+0x104>)
 800d968:	f009 fc2e 	bl	80171c8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	891b      	ldrh	r3, [r3, #8]
 800d970:	887a      	ldrh	r2, [r7, #2]
 800d972:	429a      	cmp	r2, r3
 800d974:	d263      	bcs.n	800da3e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	891a      	ldrh	r2, [r3, #8]
 800d97a:	887b      	ldrh	r3, [r7, #2]
 800d97c:	1ad3      	subs	r3, r2, r3
 800d97e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d980:	887b      	ldrh	r3, [r7, #2]
 800d982:	817b      	strh	r3, [r7, #10]
  q = p;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d988:	e018      	b.n	800d9bc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	895b      	ldrh	r3, [r3, #10]
 800d98e:	897a      	ldrh	r2, [r7, #10]
 800d990:	1ad3      	subs	r3, r2, r3
 800d992:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	891a      	ldrh	r2, [r3, #8]
 800d998:	893b      	ldrh	r3, [r7, #8]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d106      	bne.n	800d9bc <pbuf_realloc+0x70>
 800d9ae:	4b26      	ldr	r3, [pc, #152]	; (800da48 <pbuf_realloc+0xfc>)
 800d9b0:	f240 12af 	movw	r2, #431	; 0x1af
 800d9b4:	4927      	ldr	r1, [pc, #156]	; (800da54 <pbuf_realloc+0x108>)
 800d9b6:	4826      	ldr	r0, [pc, #152]	; (800da50 <pbuf_realloc+0x104>)
 800d9b8:	f009 fc06 	bl	80171c8 <iprintf>
  while (rem_len > q->len) {
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	895b      	ldrh	r3, [r3, #10]
 800d9c0:	897a      	ldrh	r2, [r7, #10]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d8e1      	bhi.n	800d98a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	7b1b      	ldrb	r3, [r3, #12]
 800d9ca:	f003 030f 	and.w	r3, r3, #15
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d121      	bne.n	800da16 <pbuf_realloc+0xca>
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	895b      	ldrh	r3, [r3, #10]
 800d9d6:	897a      	ldrh	r2, [r7, #10]
 800d9d8:	429a      	cmp	r2, r3
 800d9da:	d01c      	beq.n	800da16 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	7b5b      	ldrb	r3, [r3, #13]
 800d9e0:	f003 0302 	and.w	r3, r3, #2
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d116      	bne.n	800da16 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	685a      	ldr	r2, [r3, #4]
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	b29a      	uxth	r2, r3
 800d9f2:	897b      	ldrh	r3, [r7, #10]
 800d9f4:	4413      	add	r3, r2
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f7fe ffba 	bl	800c974 <mem_trim>
 800da00:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d106      	bne.n	800da16 <pbuf_realloc+0xca>
 800da08:	4b0f      	ldr	r3, [pc, #60]	; (800da48 <pbuf_realloc+0xfc>)
 800da0a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800da0e:	4912      	ldr	r1, [pc, #72]	; (800da58 <pbuf_realloc+0x10c>)
 800da10:	480f      	ldr	r0, [pc, #60]	; (800da50 <pbuf_realloc+0x104>)
 800da12:	f009 fbd9 	bl	80171c8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	897a      	ldrh	r2, [r7, #10]
 800da1a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	895a      	ldrh	r2, [r3, #10]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d004      	beq.n	800da36 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4618      	mov	r0, r3
 800da32:	f000 f911 	bl	800dc58 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	2200      	movs	r2, #0
 800da3a:	601a      	str	r2, [r3, #0]
 800da3c:	e000      	b.n	800da40 <pbuf_realloc+0xf4>
    return;
 800da3e:	bf00      	nop

}
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	0801884c 	.word	0x0801884c
 800da4c:	08018964 	.word	0x08018964
 800da50:	080188ac 	.word	0x080188ac
 800da54:	0801897c 	.word	0x0801897c
 800da58:	08018994 	.word	0x08018994

0800da5c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b086      	sub	sp, #24
 800da60:	af00      	add	r7, sp, #0
 800da62:	60f8      	str	r0, [r7, #12]
 800da64:	60b9      	str	r1, [r7, #8]
 800da66:	4613      	mov	r3, r2
 800da68:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d106      	bne.n	800da7e <pbuf_add_header_impl+0x22>
 800da70:	4b2b      	ldr	r3, [pc, #172]	; (800db20 <pbuf_add_header_impl+0xc4>)
 800da72:	f240 12df 	movw	r2, #479	; 0x1df
 800da76:	492b      	ldr	r1, [pc, #172]	; (800db24 <pbuf_add_header_impl+0xc8>)
 800da78:	482b      	ldr	r0, [pc, #172]	; (800db28 <pbuf_add_header_impl+0xcc>)
 800da7a:	f009 fba5 	bl	80171c8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d003      	beq.n	800da8c <pbuf_add_header_impl+0x30>
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da8a:	d301      	bcc.n	800da90 <pbuf_add_header_impl+0x34>
    return 1;
 800da8c:	2301      	movs	r3, #1
 800da8e:	e043      	b.n	800db18 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d101      	bne.n	800da9a <pbuf_add_header_impl+0x3e>
    return 0;
 800da96:	2300      	movs	r3, #0
 800da98:	e03e      	b.n	800db18 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	891a      	ldrh	r2, [r3, #8]
 800daa2:	8a7b      	ldrh	r3, [r7, #18]
 800daa4:	4413      	add	r3, r2
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	8a7a      	ldrh	r2, [r7, #18]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d901      	bls.n	800dab2 <pbuf_add_header_impl+0x56>
    return 1;
 800daae:	2301      	movs	r3, #1
 800dab0:	e032      	b.n	800db18 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	7b1b      	ldrb	r3, [r3, #12]
 800dab6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800dab8:	8a3b      	ldrh	r3, [r7, #16]
 800daba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00c      	beq.n	800dadc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	685a      	ldr	r2, [r3, #4]
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	425b      	negs	r3, r3
 800daca:	4413      	add	r3, r2
 800dacc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	3310      	adds	r3, #16
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d20d      	bcs.n	800daf4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800dad8:	2301      	movs	r3, #1
 800dada:	e01d      	b.n	800db18 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800dadc:	79fb      	ldrb	r3, [r7, #7]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d006      	beq.n	800daf0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	685a      	ldr	r2, [r3, #4]
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	425b      	negs	r3, r3
 800daea:	4413      	add	r3, r2
 800daec:	617b      	str	r3, [r7, #20]
 800daee:	e001      	b.n	800daf4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800daf0:	2301      	movs	r3, #1
 800daf2:	e011      	b.n	800db18 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	697a      	ldr	r2, [r7, #20]
 800daf8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	895a      	ldrh	r2, [r3, #10]
 800dafe:	8a7b      	ldrh	r3, [r7, #18]
 800db00:	4413      	add	r3, r2
 800db02:	b29a      	uxth	r2, r3
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	891a      	ldrh	r2, [r3, #8]
 800db0c:	8a7b      	ldrh	r3, [r7, #18]
 800db0e:	4413      	add	r3, r2
 800db10:	b29a      	uxth	r2, r3
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	811a      	strh	r2, [r3, #8]


  return 0;
 800db16:	2300      	movs	r3, #0
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3718      	adds	r7, #24
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bd80      	pop	{r7, pc}
 800db20:	0801884c 	.word	0x0801884c
 800db24:	080189b0 	.word	0x080189b0
 800db28:	080188ac 	.word	0x080188ac

0800db2c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b082      	sub	sp, #8
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800db36:	2200      	movs	r2, #0
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7ff ff8e 	bl	800da5c <pbuf_add_header_impl>
 800db40:	4603      	mov	r3, r0
}
 800db42:	4618      	mov	r0, r3
 800db44:	3708      	adds	r7, #8
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
	...

0800db4c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b084      	sub	sp, #16
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d106      	bne.n	800db6a <pbuf_remove_header+0x1e>
 800db5c:	4b20      	ldr	r3, [pc, #128]	; (800dbe0 <pbuf_remove_header+0x94>)
 800db5e:	f240 224b 	movw	r2, #587	; 0x24b
 800db62:	4920      	ldr	r1, [pc, #128]	; (800dbe4 <pbuf_remove_header+0x98>)
 800db64:	4820      	ldr	r0, [pc, #128]	; (800dbe8 <pbuf_remove_header+0x9c>)
 800db66:	f009 fb2f 	bl	80171c8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d003      	beq.n	800db78 <pbuf_remove_header+0x2c>
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db76:	d301      	bcc.n	800db7c <pbuf_remove_header+0x30>
    return 1;
 800db78:	2301      	movs	r3, #1
 800db7a:	e02c      	b.n	800dbd6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d101      	bne.n	800db86 <pbuf_remove_header+0x3a>
    return 0;
 800db82:	2300      	movs	r3, #0
 800db84:	e027      	b.n	800dbd6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	895b      	ldrh	r3, [r3, #10]
 800db8e:	89fa      	ldrh	r2, [r7, #14]
 800db90:	429a      	cmp	r2, r3
 800db92:	d908      	bls.n	800dba6 <pbuf_remove_header+0x5a>
 800db94:	4b12      	ldr	r3, [pc, #72]	; (800dbe0 <pbuf_remove_header+0x94>)
 800db96:	f240 2255 	movw	r2, #597	; 0x255
 800db9a:	4914      	ldr	r1, [pc, #80]	; (800dbec <pbuf_remove_header+0xa0>)
 800db9c:	4812      	ldr	r0, [pc, #72]	; (800dbe8 <pbuf_remove_header+0x9c>)
 800db9e:	f009 fb13 	bl	80171c8 <iprintf>
 800dba2:	2301      	movs	r3, #1
 800dba4:	e017      	b.n	800dbd6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	685a      	ldr	r2, [r3, #4]
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	441a      	add	r2, r3
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	895a      	ldrh	r2, [r3, #10]
 800dbbc:	89fb      	ldrh	r3, [r7, #14]
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	b29a      	uxth	r2, r3
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	891a      	ldrh	r2, [r3, #8]
 800dbca:	89fb      	ldrh	r3, [r7, #14]
 800dbcc:	1ad3      	subs	r3, r2, r3
 800dbce:	b29a      	uxth	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dbd4:	2300      	movs	r3, #0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}
 800dbde:	bf00      	nop
 800dbe0:	0801884c 	.word	0x0801884c
 800dbe4:	080189b0 	.word	0x080189b0
 800dbe8:	080188ac 	.word	0x080188ac
 800dbec:	080189bc 	.word	0x080189bc

0800dbf0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	807b      	strh	r3, [r7, #2]
 800dbfc:	4613      	mov	r3, r2
 800dbfe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dc00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	da08      	bge.n	800dc1a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dc08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc0c:	425b      	negs	r3, r3
 800dc0e:	4619      	mov	r1, r3
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f7ff ff9b 	bl	800db4c <pbuf_remove_header>
 800dc16:	4603      	mov	r3, r0
 800dc18:	e007      	b.n	800dc2a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dc1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc1e:	787a      	ldrb	r2, [r7, #1]
 800dc20:	4619      	mov	r1, r3
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7ff ff1a 	bl	800da5c <pbuf_add_header_impl>
 800dc28:	4603      	mov	r3, r0
  }
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b082      	sub	sp, #8
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	6078      	str	r0, [r7, #4]
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dc3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dc42:	2201      	movs	r2, #1
 800dc44:	4619      	mov	r1, r3
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f7ff ffd2 	bl	800dbf0 <pbuf_header_impl>
 800dc4c:	4603      	mov	r3, r0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	3708      	adds	r7, #8
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
	...

0800dc58 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d10b      	bne.n	800dc7e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d106      	bne.n	800dc7a <pbuf_free+0x22>
 800dc6c:	4b38      	ldr	r3, [pc, #224]	; (800dd50 <pbuf_free+0xf8>)
 800dc6e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800dc72:	4938      	ldr	r1, [pc, #224]	; (800dd54 <pbuf_free+0xfc>)
 800dc74:	4838      	ldr	r0, [pc, #224]	; (800dd58 <pbuf_free+0x100>)
 800dc76:	f009 faa7 	bl	80171c8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	e063      	b.n	800dd46 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800dc82:	e05c      	b.n	800dd3e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	7b9b      	ldrb	r3, [r3, #14]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d106      	bne.n	800dc9a <pbuf_free+0x42>
 800dc8c:	4b30      	ldr	r3, [pc, #192]	; (800dd50 <pbuf_free+0xf8>)
 800dc8e:	f240 22f1 	movw	r2, #753	; 0x2f1
 800dc92:	4932      	ldr	r1, [pc, #200]	; (800dd5c <pbuf_free+0x104>)
 800dc94:	4830      	ldr	r0, [pc, #192]	; (800dd58 <pbuf_free+0x100>)
 800dc96:	f009 fa97 	bl	80171c8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	7b9b      	ldrb	r3, [r3, #14]
 800dc9e:	3b01      	subs	r3, #1
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	739a      	strb	r2, [r3, #14]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	7b9b      	ldrb	r3, [r3, #14]
 800dcaa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800dcac:	7dbb      	ldrb	r3, [r7, #22]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d143      	bne.n	800dd3a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	7b1b      	ldrb	r3, [r3, #12]
 800dcbc:	f003 030f 	and.w	r3, r3, #15
 800dcc0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	7b5b      	ldrb	r3, [r3, #13]
 800dcc6:	f003 0302 	and.w	r3, r3, #2
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d011      	beq.n	800dcf2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	691b      	ldr	r3, [r3, #16]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d106      	bne.n	800dce8 <pbuf_free+0x90>
 800dcda:	4b1d      	ldr	r3, [pc, #116]	; (800dd50 <pbuf_free+0xf8>)
 800dcdc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800dce0:	491f      	ldr	r1, [pc, #124]	; (800dd60 <pbuf_free+0x108>)
 800dce2:	481d      	ldr	r0, [pc, #116]	; (800dd58 <pbuf_free+0x100>)
 800dce4:	f009 fa70 	bl	80171c8 <iprintf>
        pc->custom_free_function(p);
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	691b      	ldr	r3, [r3, #16]
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	4798      	blx	r3
 800dcf0:	e01d      	b.n	800dd2e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
 800dcf4:	2b02      	cmp	r3, #2
 800dcf6:	d104      	bne.n	800dd02 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800dcf8:	6879      	ldr	r1, [r7, #4]
 800dcfa:	2008      	movs	r0, #8
 800dcfc:	f7ff f936 	bl	800cf6c <memp_free>
 800dd00:	e015      	b.n	800dd2e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dd02:	7bfb      	ldrb	r3, [r7, #15]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d104      	bne.n	800dd12 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800dd08:	6879      	ldr	r1, [r7, #4]
 800dd0a:	2007      	movs	r0, #7
 800dd0c:	f7ff f92e 	bl	800cf6c <memp_free>
 800dd10:	e00d      	b.n	800dd2e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dd12:	7bfb      	ldrb	r3, [r7, #15]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d103      	bne.n	800dd20 <pbuf_free+0xc8>
          mem_free(p);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7fe fdc1 	bl	800c8a0 <mem_free>
 800dd1e:	e006      	b.n	800dd2e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800dd20:	4b0b      	ldr	r3, [pc, #44]	; (800dd50 <pbuf_free+0xf8>)
 800dd22:	f240 320f 	movw	r2, #783	; 0x30f
 800dd26:	490f      	ldr	r1, [pc, #60]	; (800dd64 <pbuf_free+0x10c>)
 800dd28:	480b      	ldr	r0, [pc, #44]	; (800dd58 <pbuf_free+0x100>)
 800dd2a:	f009 fa4d 	bl	80171c8 <iprintf>
        }
      }
      count++;
 800dd2e:	7dfb      	ldrb	r3, [r7, #23]
 800dd30:	3301      	adds	r3, #1
 800dd32:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	607b      	str	r3, [r7, #4]
 800dd38:	e001      	b.n	800dd3e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d19f      	bne.n	800dc84 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dd44:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	3718      	adds	r7, #24
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	0801884c 	.word	0x0801884c
 800dd54:	080189b0 	.word	0x080189b0
 800dd58:	080188ac 	.word	0x080188ac
 800dd5c:	080189dc 	.word	0x080189dc
 800dd60:	080189f4 	.word	0x080189f4
 800dd64:	08018a18 	.word	0x08018a18

0800dd68 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b085      	sub	sp, #20
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800dd70:	2300      	movs	r3, #0
 800dd72:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dd74:	e005      	b.n	800dd82 <pbuf_clen+0x1a>
    ++len;
 800dd76:	89fb      	ldrh	r3, [r7, #14]
 800dd78:	3301      	adds	r3, #1
 800dd7a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d1f6      	bne.n	800dd76 <pbuf_clen+0xe>
  }
  return len;
 800dd88:	89fb      	ldrh	r3, [r7, #14]
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3714      	adds	r7, #20
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
	...

0800dd98 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d010      	beq.n	800ddc8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	7b9b      	ldrb	r3, [r3, #14]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	b2da      	uxtb	r2, r3
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	7b9b      	ldrb	r3, [r3, #14]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d106      	bne.n	800ddc8 <pbuf_ref+0x30>
 800ddba:	4b05      	ldr	r3, [pc, #20]	; (800ddd0 <pbuf_ref+0x38>)
 800ddbc:	f240 3242 	movw	r2, #834	; 0x342
 800ddc0:	4904      	ldr	r1, [pc, #16]	; (800ddd4 <pbuf_ref+0x3c>)
 800ddc2:	4805      	ldr	r0, [pc, #20]	; (800ddd8 <pbuf_ref+0x40>)
 800ddc4:	f009 fa00 	bl	80171c8 <iprintf>
  }
}
 800ddc8:	bf00      	nop
 800ddca:	3708      	adds	r7, #8
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	0801884c 	.word	0x0801884c
 800ddd4:	08018a2c 	.word	0x08018a2c
 800ddd8:	080188ac 	.word	0x080188ac

0800dddc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d002      	beq.n	800ddf2 <pbuf_cat+0x16>
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d107      	bne.n	800de02 <pbuf_cat+0x26>
 800ddf2:	4b20      	ldr	r3, [pc, #128]	; (800de74 <pbuf_cat+0x98>)
 800ddf4:	f240 3259 	movw	r2, #857	; 0x359
 800ddf8:	491f      	ldr	r1, [pc, #124]	; (800de78 <pbuf_cat+0x9c>)
 800ddfa:	4820      	ldr	r0, [pc, #128]	; (800de7c <pbuf_cat+0xa0>)
 800ddfc:	f009 f9e4 	bl	80171c8 <iprintf>
 800de00:	e034      	b.n	800de6c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	60fb      	str	r3, [r7, #12]
 800de06:	e00a      	b.n	800de1e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	891a      	ldrh	r2, [r3, #8]
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	891b      	ldrh	r3, [r3, #8]
 800de10:	4413      	add	r3, r2
 800de12:	b29a      	uxth	r2, r3
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	60fb      	str	r3, [r7, #12]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d1f0      	bne.n	800de08 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	891a      	ldrh	r2, [r3, #8]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	895b      	ldrh	r3, [r3, #10]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d006      	beq.n	800de40 <pbuf_cat+0x64>
 800de32:	4b10      	ldr	r3, [pc, #64]	; (800de74 <pbuf_cat+0x98>)
 800de34:	f240 3262 	movw	r2, #866	; 0x362
 800de38:	4911      	ldr	r1, [pc, #68]	; (800de80 <pbuf_cat+0xa4>)
 800de3a:	4810      	ldr	r0, [pc, #64]	; (800de7c <pbuf_cat+0xa0>)
 800de3c:	f009 f9c4 	bl	80171c8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d006      	beq.n	800de56 <pbuf_cat+0x7a>
 800de48:	4b0a      	ldr	r3, [pc, #40]	; (800de74 <pbuf_cat+0x98>)
 800de4a:	f240 3263 	movw	r2, #867	; 0x363
 800de4e:	490d      	ldr	r1, [pc, #52]	; (800de84 <pbuf_cat+0xa8>)
 800de50:	480a      	ldr	r0, [pc, #40]	; (800de7c <pbuf_cat+0xa0>)
 800de52:	f009 f9b9 	bl	80171c8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	891a      	ldrh	r2, [r3, #8]
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	891b      	ldrh	r3, [r3, #8]
 800de5e:	4413      	add	r3, r2
 800de60:	b29a      	uxth	r2, r3
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	683a      	ldr	r2, [r7, #0]
 800de6a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800de6c:	3710      	adds	r7, #16
 800de6e:	46bd      	mov	sp, r7
 800de70:	bd80      	pop	{r7, pc}
 800de72:	bf00      	nop
 800de74:	0801884c 	.word	0x0801884c
 800de78:	08018a40 	.word	0x08018a40
 800de7c:	080188ac 	.word	0x080188ac
 800de80:	08018a78 	.word	0x08018a78
 800de84:	08018aa8 	.word	0x08018aa8

0800de88 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800de92:	6839      	ldr	r1, [r7, #0]
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f7ff ffa1 	bl	800dddc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800de9a:	6838      	ldr	r0, [r7, #0]
 800de9c:	f7ff ff7c 	bl	800dd98 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800dea0:	bf00      	nop
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b086      	sub	sp, #24
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800deb2:	2300      	movs	r3, #0
 800deb4:	617b      	str	r3, [r7, #20]
 800deb6:	2300      	movs	r3, #0
 800deb8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d008      	beq.n	800ded2 <pbuf_copy+0x2a>
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d005      	beq.n	800ded2 <pbuf_copy+0x2a>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	891a      	ldrh	r2, [r3, #8]
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	891b      	ldrh	r3, [r3, #8]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d209      	bcs.n	800dee6 <pbuf_copy+0x3e>
 800ded2:	4b57      	ldr	r3, [pc, #348]	; (800e030 <pbuf_copy+0x188>)
 800ded4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ded8:	4956      	ldr	r1, [pc, #344]	; (800e034 <pbuf_copy+0x18c>)
 800deda:	4857      	ldr	r0, [pc, #348]	; (800e038 <pbuf_copy+0x190>)
 800dedc:	f009 f974 	bl	80171c8 <iprintf>
 800dee0:	f06f 030f 	mvn.w	r3, #15
 800dee4:	e09f      	b.n	800e026 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	895b      	ldrh	r3, [r3, #10]
 800deea:	461a      	mov	r2, r3
 800deec:	697b      	ldr	r3, [r7, #20]
 800deee:	1ad2      	subs	r2, r2, r3
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	895b      	ldrh	r3, [r3, #10]
 800def4:	4619      	mov	r1, r3
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	1acb      	subs	r3, r1, r3
 800defa:	429a      	cmp	r2, r3
 800defc:	d306      	bcc.n	800df0c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	895b      	ldrh	r3, [r3, #10]
 800df02:	461a      	mov	r2, r3
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	60fb      	str	r3, [r7, #12]
 800df0a:	e005      	b.n	800df18 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	895b      	ldrh	r3, [r3, #10]
 800df10:	461a      	mov	r2, r3
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	685a      	ldr	r2, [r3, #4]
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	18d0      	adds	r0, r2, r3
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	685a      	ldr	r2, [r3, #4]
 800df24:	693b      	ldr	r3, [r7, #16]
 800df26:	4413      	add	r3, r2
 800df28:	68fa      	ldr	r2, [r7, #12]
 800df2a:	4619      	mov	r1, r3
 800df2c:	f009 f936 	bl	801719c <memcpy>
    offset_to += len;
 800df30:	697a      	ldr	r2, [r7, #20]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	4413      	add	r3, r2
 800df36:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800df38:	693a      	ldr	r2, [r7, #16]
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	4413      	add	r3, r2
 800df3e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	895b      	ldrh	r3, [r3, #10]
 800df44:	461a      	mov	r2, r3
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	4293      	cmp	r3, r2
 800df4a:	d906      	bls.n	800df5a <pbuf_copy+0xb2>
 800df4c:	4b38      	ldr	r3, [pc, #224]	; (800e030 <pbuf_copy+0x188>)
 800df4e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800df52:	493a      	ldr	r1, [pc, #232]	; (800e03c <pbuf_copy+0x194>)
 800df54:	4838      	ldr	r0, [pc, #224]	; (800e038 <pbuf_copy+0x190>)
 800df56:	f009 f937 	bl	80171c8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	895b      	ldrh	r3, [r3, #10]
 800df5e:	461a      	mov	r2, r3
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	4293      	cmp	r3, r2
 800df64:	d906      	bls.n	800df74 <pbuf_copy+0xcc>
 800df66:	4b32      	ldr	r3, [pc, #200]	; (800e030 <pbuf_copy+0x188>)
 800df68:	f240 32da 	movw	r2, #986	; 0x3da
 800df6c:	4934      	ldr	r1, [pc, #208]	; (800e040 <pbuf_copy+0x198>)
 800df6e:	4832      	ldr	r0, [pc, #200]	; (800e038 <pbuf_copy+0x190>)
 800df70:	f009 f92a 	bl	80171c8 <iprintf>
    if (offset_from >= p_from->len) {
 800df74:	683b      	ldr	r3, [r7, #0]
 800df76:	895b      	ldrh	r3, [r3, #10]
 800df78:	461a      	mov	r2, r3
 800df7a:	693b      	ldr	r3, [r7, #16]
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d304      	bcc.n	800df8a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800df80:	2300      	movs	r3, #0
 800df82:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	895b      	ldrh	r3, [r3, #10]
 800df8e:	461a      	mov	r2, r3
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	4293      	cmp	r3, r2
 800df94:	d114      	bne.n	800dfc0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800df96:	2300      	movs	r3, #0
 800df98:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d10c      	bne.n	800dfc0 <pbuf_copy+0x118>
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d009      	beq.n	800dfc0 <pbuf_copy+0x118>
 800dfac:	4b20      	ldr	r3, [pc, #128]	; (800e030 <pbuf_copy+0x188>)
 800dfae:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800dfb2:	4924      	ldr	r1, [pc, #144]	; (800e044 <pbuf_copy+0x19c>)
 800dfb4:	4820      	ldr	r0, [pc, #128]	; (800e038 <pbuf_copy+0x190>)
 800dfb6:	f009 f907 	bl	80171c8 <iprintf>
 800dfba:	f06f 030f 	mvn.w	r3, #15
 800dfbe:	e032      	b.n	800e026 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d013      	beq.n	800dfee <pbuf_copy+0x146>
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	895a      	ldrh	r2, [r3, #10]
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	891b      	ldrh	r3, [r3, #8]
 800dfce:	429a      	cmp	r2, r3
 800dfd0:	d10d      	bne.n	800dfee <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d009      	beq.n	800dfee <pbuf_copy+0x146>
 800dfda:	4b15      	ldr	r3, [pc, #84]	; (800e030 <pbuf_copy+0x188>)
 800dfdc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800dfe0:	4919      	ldr	r1, [pc, #100]	; (800e048 <pbuf_copy+0x1a0>)
 800dfe2:	4815      	ldr	r0, [pc, #84]	; (800e038 <pbuf_copy+0x190>)
 800dfe4:	f009 f8f0 	bl	80171c8 <iprintf>
 800dfe8:	f06f 0305 	mvn.w	r3, #5
 800dfec:	e01b      	b.n	800e026 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d013      	beq.n	800e01c <pbuf_copy+0x174>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	895a      	ldrh	r2, [r3, #10]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	891b      	ldrh	r3, [r3, #8]
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d10d      	bne.n	800e01c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d009      	beq.n	800e01c <pbuf_copy+0x174>
 800e008:	4b09      	ldr	r3, [pc, #36]	; (800e030 <pbuf_copy+0x188>)
 800e00a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e00e:	490e      	ldr	r1, [pc, #56]	; (800e048 <pbuf_copy+0x1a0>)
 800e010:	4809      	ldr	r0, [pc, #36]	; (800e038 <pbuf_copy+0x190>)
 800e012:	f009 f8d9 	bl	80171c8 <iprintf>
 800e016:	f06f 0305 	mvn.w	r3, #5
 800e01a:	e004      	b.n	800e026 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f47f af61 	bne.w	800dee6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3718      	adds	r7, #24
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
 800e02e:	bf00      	nop
 800e030:	0801884c 	.word	0x0801884c
 800e034:	08018af4 	.word	0x08018af4
 800e038:	080188ac 	.word	0x080188ac
 800e03c:	08018b24 	.word	0x08018b24
 800e040:	08018b3c 	.word	0x08018b3c
 800e044:	08018b58 	.word	0x08018b58
 800e048:	08018b68 	.word	0x08018b68

0800e04c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b088      	sub	sp, #32
 800e050:	af00      	add	r7, sp, #0
 800e052:	60f8      	str	r0, [r7, #12]
 800e054:	60b9      	str	r1, [r7, #8]
 800e056:	4611      	mov	r1, r2
 800e058:	461a      	mov	r2, r3
 800e05a:	460b      	mov	r3, r1
 800e05c:	80fb      	strh	r3, [r7, #6]
 800e05e:	4613      	mov	r3, r2
 800e060:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e062:	2300      	movs	r3, #0
 800e064:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e066:	2300      	movs	r3, #0
 800e068:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d108      	bne.n	800e082 <pbuf_copy_partial+0x36>
 800e070:	4b2b      	ldr	r3, [pc, #172]	; (800e120 <pbuf_copy_partial+0xd4>)
 800e072:	f240 420a 	movw	r2, #1034	; 0x40a
 800e076:	492b      	ldr	r1, [pc, #172]	; (800e124 <pbuf_copy_partial+0xd8>)
 800e078:	482b      	ldr	r0, [pc, #172]	; (800e128 <pbuf_copy_partial+0xdc>)
 800e07a:	f009 f8a5 	bl	80171c8 <iprintf>
 800e07e:	2300      	movs	r3, #0
 800e080:	e04a      	b.n	800e118 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d108      	bne.n	800e09a <pbuf_copy_partial+0x4e>
 800e088:	4b25      	ldr	r3, [pc, #148]	; (800e120 <pbuf_copy_partial+0xd4>)
 800e08a:	f240 420b 	movw	r2, #1035	; 0x40b
 800e08e:	4927      	ldr	r1, [pc, #156]	; (800e12c <pbuf_copy_partial+0xe0>)
 800e090:	4825      	ldr	r0, [pc, #148]	; (800e128 <pbuf_copy_partial+0xdc>)
 800e092:	f009 f899 	bl	80171c8 <iprintf>
 800e096:	2300      	movs	r3, #0
 800e098:	e03e      	b.n	800e118 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	61fb      	str	r3, [r7, #28]
 800e09e:	e034      	b.n	800e10a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e0a0:	88bb      	ldrh	r3, [r7, #4]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d00a      	beq.n	800e0bc <pbuf_copy_partial+0x70>
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	895b      	ldrh	r3, [r3, #10]
 800e0aa:	88ba      	ldrh	r2, [r7, #4]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d305      	bcc.n	800e0bc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e0b0:	69fb      	ldr	r3, [r7, #28]
 800e0b2:	895b      	ldrh	r3, [r3, #10]
 800e0b4:	88ba      	ldrh	r2, [r7, #4]
 800e0b6:	1ad3      	subs	r3, r2, r3
 800e0b8:	80bb      	strh	r3, [r7, #4]
 800e0ba:	e023      	b.n	800e104 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	895a      	ldrh	r2, [r3, #10]
 800e0c0:	88bb      	ldrh	r3, [r7, #4]
 800e0c2:	1ad3      	subs	r3, r2, r3
 800e0c4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e0c6:	8b3a      	ldrh	r2, [r7, #24]
 800e0c8:	88fb      	ldrh	r3, [r7, #6]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d901      	bls.n	800e0d2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e0ce:	88fb      	ldrh	r3, [r7, #6]
 800e0d0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e0d2:	8b7b      	ldrh	r3, [r7, #26]
 800e0d4:	68ba      	ldr	r2, [r7, #8]
 800e0d6:	18d0      	adds	r0, r2, r3
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	685a      	ldr	r2, [r3, #4]
 800e0dc:	88bb      	ldrh	r3, [r7, #4]
 800e0de:	4413      	add	r3, r2
 800e0e0:	8b3a      	ldrh	r2, [r7, #24]
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	f009 f85a 	bl	801719c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e0e8:	8afa      	ldrh	r2, [r7, #22]
 800e0ea:	8b3b      	ldrh	r3, [r7, #24]
 800e0ec:	4413      	add	r3, r2
 800e0ee:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e0f0:	8b7a      	ldrh	r2, [r7, #26]
 800e0f2:	8b3b      	ldrh	r3, [r7, #24]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e0f8:	88fa      	ldrh	r2, [r7, #6]
 800e0fa:	8b3b      	ldrh	r3, [r7, #24]
 800e0fc:	1ad3      	subs	r3, r2, r3
 800e0fe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e100:	2300      	movs	r3, #0
 800e102:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e104:	69fb      	ldr	r3, [r7, #28]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	61fb      	str	r3, [r7, #28]
 800e10a:	88fb      	ldrh	r3, [r7, #6]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d002      	beq.n	800e116 <pbuf_copy_partial+0xca>
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1c4      	bne.n	800e0a0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e116:	8afb      	ldrh	r3, [r7, #22]
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3720      	adds	r7, #32
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}
 800e120:	0801884c 	.word	0x0801884c
 800e124:	08018b94 	.word	0x08018b94
 800e128:	080188ac 	.word	0x080188ac
 800e12c:	08018bb4 	.word	0x08018bb4

0800e130 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b088      	sub	sp, #32
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	4613      	mov	r3, r2
 800e13c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800e13e:	88fb      	ldrh	r3, [r7, #6]
 800e140:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800e142:	2300      	movs	r3, #0
 800e144:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d109      	bne.n	800e160 <pbuf_take+0x30>
 800e14c:	4b3a      	ldr	r3, [pc, #232]	; (800e238 <pbuf_take+0x108>)
 800e14e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800e152:	493a      	ldr	r1, [pc, #232]	; (800e23c <pbuf_take+0x10c>)
 800e154:	483a      	ldr	r0, [pc, #232]	; (800e240 <pbuf_take+0x110>)
 800e156:	f009 f837 	bl	80171c8 <iprintf>
 800e15a:	f06f 030f 	mvn.w	r3, #15
 800e15e:	e067      	b.n	800e230 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d109      	bne.n	800e17a <pbuf_take+0x4a>
 800e166:	4b34      	ldr	r3, [pc, #208]	; (800e238 <pbuf_take+0x108>)
 800e168:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800e16c:	4935      	ldr	r1, [pc, #212]	; (800e244 <pbuf_take+0x114>)
 800e16e:	4834      	ldr	r0, [pc, #208]	; (800e240 <pbuf_take+0x110>)
 800e170:	f009 f82a 	bl	80171c8 <iprintf>
 800e174:	f06f 030f 	mvn.w	r3, #15
 800e178:	e05a      	b.n	800e230 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	891b      	ldrh	r3, [r3, #8]
 800e17e:	88fa      	ldrh	r2, [r7, #6]
 800e180:	429a      	cmp	r2, r3
 800e182:	d909      	bls.n	800e198 <pbuf_take+0x68>
 800e184:	4b2c      	ldr	r3, [pc, #176]	; (800e238 <pbuf_take+0x108>)
 800e186:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800e18a:	492f      	ldr	r1, [pc, #188]	; (800e248 <pbuf_take+0x118>)
 800e18c:	482c      	ldr	r0, [pc, #176]	; (800e240 <pbuf_take+0x110>)
 800e18e:	f009 f81b 	bl	80171c8 <iprintf>
 800e192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e196:	e04b      	b.n	800e230 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d007      	beq.n	800e1ae <pbuf_take+0x7e>
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d004      	beq.n	800e1ae <pbuf_take+0x7e>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	891b      	ldrh	r3, [r3, #8]
 800e1a8:	88fa      	ldrh	r2, [r7, #6]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d902      	bls.n	800e1b4 <pbuf_take+0x84>
    return ERR_ARG;
 800e1ae:	f06f 030f 	mvn.w	r3, #15
 800e1b2:	e03d      	b.n	800e230 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	61fb      	str	r3, [r7, #28]
 800e1b8:	e028      	b.n	800e20c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d106      	bne.n	800e1ce <pbuf_take+0x9e>
 800e1c0:	4b1d      	ldr	r3, [pc, #116]	; (800e238 <pbuf_take+0x108>)
 800e1c2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800e1c6:	4921      	ldr	r1, [pc, #132]	; (800e24c <pbuf_take+0x11c>)
 800e1c8:	481d      	ldr	r0, [pc, #116]	; (800e240 <pbuf_take+0x110>)
 800e1ca:	f008 fffd 	bl	80171c8 <iprintf>
    buf_copy_len = total_copy_len;
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	895b      	ldrh	r3, [r3, #10]
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d902      	bls.n	800e1e4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	895b      	ldrh	r3, [r3, #10]
 800e1e2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	6858      	ldr	r0, [r3, #4]
 800e1e8:	68ba      	ldr	r2, [r7, #8]
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	4413      	add	r3, r2
 800e1ee:	69ba      	ldr	r2, [r7, #24]
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	f008 ffd3 	bl	801719c <memcpy>
    total_copy_len -= buf_copy_len;
 800e1f6:	697a      	ldr	r2, [r7, #20]
 800e1f8:	69bb      	ldr	r3, [r7, #24]
 800e1fa:	1ad3      	subs	r3, r2, r3
 800e1fc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800e1fe:	693a      	ldr	r2, [r7, #16]
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	4413      	add	r3, r2
 800e204:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	61fb      	str	r3, [r7, #28]
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d1d3      	bne.n	800e1ba <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d103      	bne.n	800e220 <pbuf_take+0xf0>
 800e218:	88fb      	ldrh	r3, [r7, #6]
 800e21a:	693a      	ldr	r2, [r7, #16]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d006      	beq.n	800e22e <pbuf_take+0xfe>
 800e220:	4b05      	ldr	r3, [pc, #20]	; (800e238 <pbuf_take+0x108>)
 800e222:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800e226:	490a      	ldr	r1, [pc, #40]	; (800e250 <pbuf_take+0x120>)
 800e228:	4805      	ldr	r0, [pc, #20]	; (800e240 <pbuf_take+0x110>)
 800e22a:	f008 ffcd 	bl	80171c8 <iprintf>
  return ERR_OK;
 800e22e:	2300      	movs	r3, #0
}
 800e230:	4618      	mov	r0, r3
 800e232:	3720      	adds	r7, #32
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	0801884c 	.word	0x0801884c
 800e23c:	08018c24 	.word	0x08018c24
 800e240:	080188ac 	.word	0x080188ac
 800e244:	08018c3c 	.word	0x08018c3c
 800e248:	08018c58 	.word	0x08018c58
 800e24c:	08018c78 	.word	0x08018c78
 800e250:	08018c90 	.word	0x08018c90

0800e254 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	4603      	mov	r3, r0
 800e25c:	603a      	str	r2, [r7, #0]
 800e25e:	71fb      	strb	r3, [r7, #7]
 800e260:	460b      	mov	r3, r1
 800e262:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	8919      	ldrh	r1, [r3, #8]
 800e268:	88ba      	ldrh	r2, [r7, #4]
 800e26a:	79fb      	ldrb	r3, [r7, #7]
 800e26c:	4618      	mov	r0, r3
 800e26e:	f7ff fa0f 	bl	800d690 <pbuf_alloc>
 800e272:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d101      	bne.n	800e27e <pbuf_clone+0x2a>
    return NULL;
 800e27a:	2300      	movs	r3, #0
 800e27c:	e011      	b.n	800e2a2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e27e:	6839      	ldr	r1, [r7, #0]
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f7ff fe11 	bl	800dea8 <pbuf_copy>
 800e286:	4603      	mov	r3, r0
 800e288:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e28a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d006      	beq.n	800e2a0 <pbuf_clone+0x4c>
 800e292:	4b06      	ldr	r3, [pc, #24]	; (800e2ac <pbuf_clone+0x58>)
 800e294:	f240 5224 	movw	r2, #1316	; 0x524
 800e298:	4905      	ldr	r1, [pc, #20]	; (800e2b0 <pbuf_clone+0x5c>)
 800e29a:	4806      	ldr	r0, [pc, #24]	; (800e2b4 <pbuf_clone+0x60>)
 800e29c:	f008 ff94 	bl	80171c8 <iprintf>
  return q;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3710      	adds	r7, #16
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	0801884c 	.word	0x0801884c
 800e2b0:	08018cc0 	.word	0x08018cc0
 800e2b4:	080188ac 	.word	0x080188ac

0800e2b8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e2bc:	f008 ff9c 	bl	80171f8 <rand>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e2ce:	b29a      	uxth	r2, r3
 800e2d0:	4b01      	ldr	r3, [pc, #4]	; (800e2d8 <tcp_init+0x20>)
 800e2d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e2d4:	bf00      	nop
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	20000020 	.word	0x20000020

0800e2dc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	7d1b      	ldrb	r3, [r3, #20]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d105      	bne.n	800e2f8 <tcp_free+0x1c>
 800e2ec:	4b06      	ldr	r3, [pc, #24]	; (800e308 <tcp_free+0x2c>)
 800e2ee:	22d4      	movs	r2, #212	; 0xd4
 800e2f0:	4906      	ldr	r1, [pc, #24]	; (800e30c <tcp_free+0x30>)
 800e2f2:	4807      	ldr	r0, [pc, #28]	; (800e310 <tcp_free+0x34>)
 800e2f4:	f008 ff68 	bl	80171c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e2f8:	6879      	ldr	r1, [r7, #4]
 800e2fa:	2001      	movs	r0, #1
 800e2fc:	f7fe fe36 	bl	800cf6c <memp_free>
}
 800e300:	bf00      	nop
 800e302:	3708      	adds	r7, #8
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	08018d4c 	.word	0x08018d4c
 800e30c:	08018d7c 	.word	0x08018d7c
 800e310:	08018d90 	.word	0x08018d90

0800e314 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	7d1b      	ldrb	r3, [r3, #20]
 800e320:	2b01      	cmp	r3, #1
 800e322:	d105      	bne.n	800e330 <tcp_free_listen+0x1c>
 800e324:	4b06      	ldr	r3, [pc, #24]	; (800e340 <tcp_free_listen+0x2c>)
 800e326:	22df      	movs	r2, #223	; 0xdf
 800e328:	4906      	ldr	r1, [pc, #24]	; (800e344 <tcp_free_listen+0x30>)
 800e32a:	4807      	ldr	r0, [pc, #28]	; (800e348 <tcp_free_listen+0x34>)
 800e32c:	f008 ff4c 	bl	80171c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e330:	6879      	ldr	r1, [r7, #4]
 800e332:	2002      	movs	r0, #2
 800e334:	f7fe fe1a 	bl	800cf6c <memp_free>
}
 800e338:	bf00      	nop
 800e33a:	3708      	adds	r7, #8
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	08018d4c 	.word	0x08018d4c
 800e344:	08018db8 	.word	0x08018db8
 800e348:	08018d90 	.word	0x08018d90

0800e34c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e350:	f000 fea2 	bl	800f098 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e354:	4b07      	ldr	r3, [pc, #28]	; (800e374 <tcp_tmr+0x28>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	3301      	adds	r3, #1
 800e35a:	b2da      	uxtb	r2, r3
 800e35c:	4b05      	ldr	r3, [pc, #20]	; (800e374 <tcp_tmr+0x28>)
 800e35e:	701a      	strb	r2, [r3, #0]
 800e360:	4b04      	ldr	r3, [pc, #16]	; (800e374 <tcp_tmr+0x28>)
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	f003 0301 	and.w	r3, r3, #1
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d001      	beq.n	800e370 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e36c:	f000 fb54 	bl	800ea18 <tcp_slowtmr>
  }
}
 800e370:	bf00      	nop
 800e372:	bd80      	pop	{r7, pc}
 800e374:	20008fdd 	.word	0x20008fdd

0800e378 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d105      	bne.n	800e394 <tcp_remove_listener+0x1c>
 800e388:	4b0d      	ldr	r3, [pc, #52]	; (800e3c0 <tcp_remove_listener+0x48>)
 800e38a:	22ff      	movs	r2, #255	; 0xff
 800e38c:	490d      	ldr	r1, [pc, #52]	; (800e3c4 <tcp_remove_listener+0x4c>)
 800e38e:	480e      	ldr	r0, [pc, #56]	; (800e3c8 <tcp_remove_listener+0x50>)
 800e390:	f008 ff1a 	bl	80171c8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	60fb      	str	r3, [r7, #12]
 800e398:	e00a      	b.n	800e3b0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e39e:	683a      	ldr	r2, [r7, #0]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d102      	bne.n	800e3aa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	60fb      	str	r3, [r7, #12]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d1f1      	bne.n	800e39a <tcp_remove_listener+0x22>
    }
  }
}
 800e3b6:	bf00      	nop
 800e3b8:	bf00      	nop
 800e3ba:	3710      	adds	r7, #16
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	08018d4c 	.word	0x08018d4c
 800e3c4:	08018dd4 	.word	0x08018dd4
 800e3c8:	08018d90 	.word	0x08018d90

0800e3cc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d106      	bne.n	800e3e8 <tcp_listen_closed+0x1c>
 800e3da:	4b14      	ldr	r3, [pc, #80]	; (800e42c <tcp_listen_closed+0x60>)
 800e3dc:	f240 1211 	movw	r2, #273	; 0x111
 800e3e0:	4913      	ldr	r1, [pc, #76]	; (800e430 <tcp_listen_closed+0x64>)
 800e3e2:	4814      	ldr	r0, [pc, #80]	; (800e434 <tcp_listen_closed+0x68>)
 800e3e4:	f008 fef0 	bl	80171c8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	7d1b      	ldrb	r3, [r3, #20]
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d006      	beq.n	800e3fe <tcp_listen_closed+0x32>
 800e3f0:	4b0e      	ldr	r3, [pc, #56]	; (800e42c <tcp_listen_closed+0x60>)
 800e3f2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e3f6:	4910      	ldr	r1, [pc, #64]	; (800e438 <tcp_listen_closed+0x6c>)
 800e3f8:	480e      	ldr	r0, [pc, #56]	; (800e434 <tcp_listen_closed+0x68>)
 800e3fa:	f008 fee5 	bl	80171c8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e3fe:	2301      	movs	r3, #1
 800e400:	60fb      	str	r3, [r7, #12]
 800e402:	e00b      	b.n	800e41c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e404:	4a0d      	ldr	r2, [pc, #52]	; (800e43c <tcp_listen_closed+0x70>)
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	6879      	ldr	r1, [r7, #4]
 800e410:	4618      	mov	r0, r3
 800e412:	f7ff ffb1 	bl	800e378 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	3301      	adds	r3, #1
 800e41a:	60fb      	str	r3, [r7, #12]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	2b03      	cmp	r3, #3
 800e420:	d9f0      	bls.n	800e404 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e422:	bf00      	nop
 800e424:	bf00      	nop
 800e426:	3710      	adds	r7, #16
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	08018d4c 	.word	0x08018d4c
 800e430:	08018dfc 	.word	0x08018dfc
 800e434:	08018d90 	.word	0x08018d90
 800e438:	08018e08 	.word	0x08018e08
 800e43c:	0801ad34 	.word	0x0801ad34

0800e440 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e440:	b5b0      	push	{r4, r5, r7, lr}
 800e442:	b088      	sub	sp, #32
 800e444:	af04      	add	r7, sp, #16
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	460b      	mov	r3, r1
 800e44a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d106      	bne.n	800e460 <tcp_close_shutdown+0x20>
 800e452:	4b63      	ldr	r3, [pc, #396]	; (800e5e0 <tcp_close_shutdown+0x1a0>)
 800e454:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e458:	4962      	ldr	r1, [pc, #392]	; (800e5e4 <tcp_close_shutdown+0x1a4>)
 800e45a:	4863      	ldr	r0, [pc, #396]	; (800e5e8 <tcp_close_shutdown+0x1a8>)
 800e45c:	f008 feb4 	bl	80171c8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e460:	78fb      	ldrb	r3, [r7, #3]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d066      	beq.n	800e534 <tcp_close_shutdown+0xf4>
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	7d1b      	ldrb	r3, [r3, #20]
 800e46a:	2b04      	cmp	r3, #4
 800e46c:	d003      	beq.n	800e476 <tcp_close_shutdown+0x36>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	7d1b      	ldrb	r3, [r3, #20]
 800e472:	2b07      	cmp	r3, #7
 800e474:	d15e      	bne.n	800e534 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d104      	bne.n	800e488 <tcp_close_shutdown+0x48>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e482:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e486:	d055      	beq.n	800e534 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	8b5b      	ldrh	r3, [r3, #26]
 800e48c:	f003 0310 	and.w	r3, r3, #16
 800e490:	2b00      	cmp	r3, #0
 800e492:	d106      	bne.n	800e4a2 <tcp_close_shutdown+0x62>
 800e494:	4b52      	ldr	r3, [pc, #328]	; (800e5e0 <tcp_close_shutdown+0x1a0>)
 800e496:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e49a:	4954      	ldr	r1, [pc, #336]	; (800e5ec <tcp_close_shutdown+0x1ac>)
 800e49c:	4852      	ldr	r0, [pc, #328]	; (800e5e8 <tcp_close_shutdown+0x1a8>)
 800e49e:	f008 fe93 	bl	80171c8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e4aa:	687d      	ldr	r5, [r7, #4]
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	3304      	adds	r3, #4
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	8ad2      	ldrh	r2, [r2, #22]
 800e4b4:	6879      	ldr	r1, [r7, #4]
 800e4b6:	8b09      	ldrh	r1, [r1, #24]
 800e4b8:	9102      	str	r1, [sp, #8]
 800e4ba:	9201      	str	r2, [sp, #4]
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	462b      	mov	r3, r5
 800e4c0:	4622      	mov	r2, r4
 800e4c2:	4601      	mov	r1, r0
 800e4c4:	6878      	ldr	r0, [r7, #4]
 800e4c6:	f004 fe91 	bl	80131ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f001 f8c6 	bl	800f65c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e4d0:	4b47      	ldr	r3, [pc, #284]	; (800e5f0 <tcp_close_shutdown+0x1b0>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	d105      	bne.n	800e4e6 <tcp_close_shutdown+0xa6>
 800e4da:	4b45      	ldr	r3, [pc, #276]	; (800e5f0 <tcp_close_shutdown+0x1b0>)
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	68db      	ldr	r3, [r3, #12]
 800e4e0:	4a43      	ldr	r2, [pc, #268]	; (800e5f0 <tcp_close_shutdown+0x1b0>)
 800e4e2:	6013      	str	r3, [r2, #0]
 800e4e4:	e013      	b.n	800e50e <tcp_close_shutdown+0xce>
 800e4e6:	4b42      	ldr	r3, [pc, #264]	; (800e5f0 <tcp_close_shutdown+0x1b0>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	60fb      	str	r3, [r7, #12]
 800e4ec:	e00c      	b.n	800e508 <tcp_close_shutdown+0xc8>
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	d104      	bne.n	800e502 <tcp_close_shutdown+0xc2>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	68da      	ldr	r2, [r3, #12]
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	60da      	str	r2, [r3, #12]
 800e500:	e005      	b.n	800e50e <tcp_close_shutdown+0xce>
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	60fb      	str	r3, [r7, #12]
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d1ef      	bne.n	800e4ee <tcp_close_shutdown+0xae>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2200      	movs	r2, #0
 800e512:	60da      	str	r2, [r3, #12]
 800e514:	4b37      	ldr	r3, [pc, #220]	; (800e5f4 <tcp_close_shutdown+0x1b4>)
 800e516:	2201      	movs	r2, #1
 800e518:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e51a:	4b37      	ldr	r3, [pc, #220]	; (800e5f8 <tcp_close_shutdown+0x1b8>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	687a      	ldr	r2, [r7, #4]
 800e520:	429a      	cmp	r2, r3
 800e522:	d102      	bne.n	800e52a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e524:	f003 fd5e 	bl	8011fe4 <tcp_trigger_input_pcb_close>
 800e528:	e002      	b.n	800e530 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7ff fed6 	bl	800e2dc <tcp_free>
      }
      return ERR_OK;
 800e530:	2300      	movs	r3, #0
 800e532:	e050      	b.n	800e5d6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	7d1b      	ldrb	r3, [r3, #20]
 800e538:	2b02      	cmp	r3, #2
 800e53a:	d03b      	beq.n	800e5b4 <tcp_close_shutdown+0x174>
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	dc44      	bgt.n	800e5ca <tcp_close_shutdown+0x18a>
 800e540:	2b00      	cmp	r3, #0
 800e542:	d002      	beq.n	800e54a <tcp_close_shutdown+0x10a>
 800e544:	2b01      	cmp	r3, #1
 800e546:	d02a      	beq.n	800e59e <tcp_close_shutdown+0x15e>
 800e548:	e03f      	b.n	800e5ca <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	8adb      	ldrh	r3, [r3, #22]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d021      	beq.n	800e596 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e552:	4b2a      	ldr	r3, [pc, #168]	; (800e5fc <tcp_close_shutdown+0x1bc>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d105      	bne.n	800e568 <tcp_close_shutdown+0x128>
 800e55c:	4b27      	ldr	r3, [pc, #156]	; (800e5fc <tcp_close_shutdown+0x1bc>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	4a26      	ldr	r2, [pc, #152]	; (800e5fc <tcp_close_shutdown+0x1bc>)
 800e564:	6013      	str	r3, [r2, #0]
 800e566:	e013      	b.n	800e590 <tcp_close_shutdown+0x150>
 800e568:	4b24      	ldr	r3, [pc, #144]	; (800e5fc <tcp_close_shutdown+0x1bc>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	60bb      	str	r3, [r7, #8]
 800e56e:	e00c      	b.n	800e58a <tcp_close_shutdown+0x14a>
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	429a      	cmp	r2, r3
 800e578:	d104      	bne.n	800e584 <tcp_close_shutdown+0x144>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	68da      	ldr	r2, [r3, #12]
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	60da      	str	r2, [r3, #12]
 800e582:	e005      	b.n	800e590 <tcp_close_shutdown+0x150>
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	68db      	ldr	r3, [r3, #12]
 800e588:	60bb      	str	r3, [r7, #8]
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1ef      	bne.n	800e570 <tcp_close_shutdown+0x130>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2200      	movs	r2, #0
 800e594:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f7ff fea0 	bl	800e2dc <tcp_free>
      break;
 800e59c:	e01a      	b.n	800e5d4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff ff14 	bl	800e3cc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e5a4:	6879      	ldr	r1, [r7, #4]
 800e5a6:	4816      	ldr	r0, [pc, #88]	; (800e600 <tcp_close_shutdown+0x1c0>)
 800e5a8:	f001 f8a8 	bl	800f6fc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f7ff feb1 	bl	800e314 <tcp_free_listen>
      break;
 800e5b2:	e00f      	b.n	800e5d4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e5b4:	6879      	ldr	r1, [r7, #4]
 800e5b6:	480e      	ldr	r0, [pc, #56]	; (800e5f0 <tcp_close_shutdown+0x1b0>)
 800e5b8:	f001 f8a0 	bl	800f6fc <tcp_pcb_remove>
 800e5bc:	4b0d      	ldr	r3, [pc, #52]	; (800e5f4 <tcp_close_shutdown+0x1b4>)
 800e5be:	2201      	movs	r2, #1
 800e5c0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e5c2:	6878      	ldr	r0, [r7, #4]
 800e5c4:	f7ff fe8a 	bl	800e2dc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e5c8:	e004      	b.n	800e5d4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f000 f81a 	bl	800e604 <tcp_close_shutdown_fin>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	e000      	b.n	800e5d6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e5d4:	2300      	movs	r3, #0
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3710      	adds	r7, #16
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bdb0      	pop	{r4, r5, r7, pc}
 800e5de:	bf00      	nop
 800e5e0:	08018d4c 	.word	0x08018d4c
 800e5e4:	08018e20 	.word	0x08018e20
 800e5e8:	08018d90 	.word	0x08018d90
 800e5ec:	08018e40 	.word	0x08018e40
 800e5f0:	20008fd4 	.word	0x20008fd4
 800e5f4:	20008fdc 	.word	0x20008fdc
 800e5f8:	20009014 	.word	0x20009014
 800e5fc:	20008fcc 	.word	0x20008fcc
 800e600:	20008fd0 	.word	0x20008fd0

0800e604 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d106      	bne.n	800e620 <tcp_close_shutdown_fin+0x1c>
 800e612:	4b2e      	ldr	r3, [pc, #184]	; (800e6cc <tcp_close_shutdown_fin+0xc8>)
 800e614:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e618:	492d      	ldr	r1, [pc, #180]	; (800e6d0 <tcp_close_shutdown_fin+0xcc>)
 800e61a:	482e      	ldr	r0, [pc, #184]	; (800e6d4 <tcp_close_shutdown_fin+0xd0>)
 800e61c:	f008 fdd4 	bl	80171c8 <iprintf>

  switch (pcb->state) {
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	7d1b      	ldrb	r3, [r3, #20]
 800e624:	2b07      	cmp	r3, #7
 800e626:	d020      	beq.n	800e66a <tcp_close_shutdown_fin+0x66>
 800e628:	2b07      	cmp	r3, #7
 800e62a:	dc2b      	bgt.n	800e684 <tcp_close_shutdown_fin+0x80>
 800e62c:	2b03      	cmp	r3, #3
 800e62e:	d002      	beq.n	800e636 <tcp_close_shutdown_fin+0x32>
 800e630:	2b04      	cmp	r3, #4
 800e632:	d00d      	beq.n	800e650 <tcp_close_shutdown_fin+0x4c>
 800e634:	e026      	b.n	800e684 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f003 fee6 	bl	8012408 <tcp_send_fin>
 800e63c:	4603      	mov	r3, r0
 800e63e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d11f      	bne.n	800e688 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2205      	movs	r2, #5
 800e64c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e64e:	e01b      	b.n	800e688 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f003 fed9 	bl	8012408 <tcp_send_fin>
 800e656:	4603      	mov	r3, r0
 800e658:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e65a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d114      	bne.n	800e68c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	2205      	movs	r2, #5
 800e666:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e668:	e010      	b.n	800e68c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f003 fecc 	bl	8012408 <tcp_send_fin>
 800e670:	4603      	mov	r3, r0
 800e672:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d109      	bne.n	800e690 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2209      	movs	r2, #9
 800e680:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e682:	e005      	b.n	800e690 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e684:	2300      	movs	r3, #0
 800e686:	e01c      	b.n	800e6c2 <tcp_close_shutdown_fin+0xbe>
      break;
 800e688:	bf00      	nop
 800e68a:	e002      	b.n	800e692 <tcp_close_shutdown_fin+0x8e>
      break;
 800e68c:	bf00      	nop
 800e68e:	e000      	b.n	800e692 <tcp_close_shutdown_fin+0x8e>
      break;
 800e690:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d103      	bne.n	800e6a2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f003 fff2 	bl	8012684 <tcp_output>
 800e6a0:	e00d      	b.n	800e6be <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6aa:	d108      	bne.n	800e6be <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	8b5b      	ldrh	r3, [r3, #26]
 800e6b0:	f043 0308 	orr.w	r3, r3, #8
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	e001      	b.n	800e6c2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	08018d4c 	.word	0x08018d4c
 800e6d0:	08018dfc 	.word	0x08018dfc
 800e6d4:	08018d90 	.word	0x08018d90

0800e6d8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d109      	bne.n	800e6fa <tcp_close+0x22>
 800e6e6:	4b0f      	ldr	r3, [pc, #60]	; (800e724 <tcp_close+0x4c>)
 800e6e8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e6ec:	490e      	ldr	r1, [pc, #56]	; (800e728 <tcp_close+0x50>)
 800e6ee:	480f      	ldr	r0, [pc, #60]	; (800e72c <tcp_close+0x54>)
 800e6f0:	f008 fd6a 	bl	80171c8 <iprintf>
 800e6f4:	f06f 030f 	mvn.w	r3, #15
 800e6f8:	e00f      	b.n	800e71a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	7d1b      	ldrb	r3, [r3, #20]
 800e6fe:	2b01      	cmp	r3, #1
 800e700:	d006      	beq.n	800e710 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	8b5b      	ldrh	r3, [r3, #26]
 800e706:	f043 0310 	orr.w	r3, r3, #16
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e710:	2101      	movs	r1, #1
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f7ff fe94 	bl	800e440 <tcp_close_shutdown>
 800e718:	4603      	mov	r3, r0
}
 800e71a:	4618      	mov	r0, r3
 800e71c:	3708      	adds	r7, #8
 800e71e:	46bd      	mov	sp, r7
 800e720:	bd80      	pop	{r7, pc}
 800e722:	bf00      	nop
 800e724:	08018d4c 	.word	0x08018d4c
 800e728:	08018e5c 	.word	0x08018e5c
 800e72c:	08018d90 	.word	0x08018d90

0800e730 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b08e      	sub	sp, #56	; 0x38
 800e734:	af04      	add	r7, sp, #16
 800e736:	6078      	str	r0, [r7, #4]
 800e738:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d107      	bne.n	800e750 <tcp_abandon+0x20>
 800e740:	4b52      	ldr	r3, [pc, #328]	; (800e88c <tcp_abandon+0x15c>)
 800e742:	f240 223d 	movw	r2, #573	; 0x23d
 800e746:	4952      	ldr	r1, [pc, #328]	; (800e890 <tcp_abandon+0x160>)
 800e748:	4852      	ldr	r0, [pc, #328]	; (800e894 <tcp_abandon+0x164>)
 800e74a:	f008 fd3d 	bl	80171c8 <iprintf>
 800e74e:	e099      	b.n	800e884 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	7d1b      	ldrb	r3, [r3, #20]
 800e754:	2b01      	cmp	r3, #1
 800e756:	d106      	bne.n	800e766 <tcp_abandon+0x36>
 800e758:	4b4c      	ldr	r3, [pc, #304]	; (800e88c <tcp_abandon+0x15c>)
 800e75a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e75e:	494e      	ldr	r1, [pc, #312]	; (800e898 <tcp_abandon+0x168>)
 800e760:	484c      	ldr	r0, [pc, #304]	; (800e894 <tcp_abandon+0x164>)
 800e762:	f008 fd31 	bl	80171c8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	7d1b      	ldrb	r3, [r3, #20]
 800e76a:	2b0a      	cmp	r3, #10
 800e76c:	d107      	bne.n	800e77e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e76e:	6879      	ldr	r1, [r7, #4]
 800e770:	484a      	ldr	r0, [pc, #296]	; (800e89c <tcp_abandon+0x16c>)
 800e772:	f000 ffc3 	bl	800f6fc <tcp_pcb_remove>
    tcp_free(pcb);
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7ff fdb0 	bl	800e2dc <tcp_free>
 800e77c:	e082      	b.n	800e884 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e77e:	2300      	movs	r3, #0
 800e780:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e782:	2300      	movs	r3, #0
 800e784:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e78a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e790:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e798:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	691b      	ldr	r3, [r3, #16]
 800e79e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	7d1b      	ldrb	r3, [r3, #20]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d126      	bne.n	800e7f6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	8adb      	ldrh	r3, [r3, #22]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d02e      	beq.n	800e80e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e7b0:	4b3b      	ldr	r3, [pc, #236]	; (800e8a0 <tcp_abandon+0x170>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d105      	bne.n	800e7c6 <tcp_abandon+0x96>
 800e7ba:	4b39      	ldr	r3, [pc, #228]	; (800e8a0 <tcp_abandon+0x170>)
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	68db      	ldr	r3, [r3, #12]
 800e7c0:	4a37      	ldr	r2, [pc, #220]	; (800e8a0 <tcp_abandon+0x170>)
 800e7c2:	6013      	str	r3, [r2, #0]
 800e7c4:	e013      	b.n	800e7ee <tcp_abandon+0xbe>
 800e7c6:	4b36      	ldr	r3, [pc, #216]	; (800e8a0 <tcp_abandon+0x170>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	61fb      	str	r3, [r7, #28]
 800e7cc:	e00c      	b.n	800e7e8 <tcp_abandon+0xb8>
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	68db      	ldr	r3, [r3, #12]
 800e7d2:	687a      	ldr	r2, [r7, #4]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d104      	bne.n	800e7e2 <tcp_abandon+0xb2>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	68da      	ldr	r2, [r3, #12]
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	60da      	str	r2, [r3, #12]
 800e7e0:	e005      	b.n	800e7ee <tcp_abandon+0xbe>
 800e7e2:	69fb      	ldr	r3, [r7, #28]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	61fb      	str	r3, [r7, #28]
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d1ef      	bne.n	800e7ce <tcp_abandon+0x9e>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	60da      	str	r2, [r3, #12]
 800e7f4:	e00b      	b.n	800e80e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	8adb      	ldrh	r3, [r3, #22]
 800e7fe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e800:	6879      	ldr	r1, [r7, #4]
 800e802:	4828      	ldr	r0, [pc, #160]	; (800e8a4 <tcp_abandon+0x174>)
 800e804:	f000 ff7a 	bl	800f6fc <tcp_pcb_remove>
 800e808:	4b27      	ldr	r3, [pc, #156]	; (800e8a8 <tcp_abandon+0x178>)
 800e80a:	2201      	movs	r2, #1
 800e80c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e812:	2b00      	cmp	r3, #0
 800e814:	d004      	beq.n	800e820 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 fd1c 	bl	800f258 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e824:	2b00      	cmp	r3, #0
 800e826:	d004      	beq.n	800e832 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e82c:	4618      	mov	r0, r3
 800e82e:	f000 fd13 	bl	800f258 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e836:	2b00      	cmp	r3, #0
 800e838:	d004      	beq.n	800e844 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e83e:	4618      	mov	r0, r3
 800e840:	f000 fd0a 	bl	800f258 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e846:	2b00      	cmp	r3, #0
 800e848:	d00e      	beq.n	800e868 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e84a:	6879      	ldr	r1, [r7, #4]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	3304      	adds	r3, #4
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	8b12      	ldrh	r2, [r2, #24]
 800e854:	9202      	str	r2, [sp, #8]
 800e856:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e858:	9201      	str	r2, [sp, #4]
 800e85a:	9300      	str	r3, [sp, #0]
 800e85c:	460b      	mov	r3, r1
 800e85e:	697a      	ldr	r2, [r7, #20]
 800e860:	69b9      	ldr	r1, [r7, #24]
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f004 fcc2 	bl	80131ec <tcp_rst>
    }
    last_state = pcb->state;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	7d1b      	ldrb	r3, [r3, #20]
 800e86c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7ff fd34 	bl	800e2dc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d004      	beq.n	800e884 <tcp_abandon+0x154>
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	f06f 010c 	mvn.w	r1, #12
 800e880:	68f8      	ldr	r0, [r7, #12]
 800e882:	4798      	blx	r3
  }
}
 800e884:	3728      	adds	r7, #40	; 0x28
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	08018d4c 	.word	0x08018d4c
 800e890:	08018e90 	.word	0x08018e90
 800e894:	08018d90 	.word	0x08018d90
 800e898:	08018eac 	.word	0x08018eac
 800e89c:	20008fd8 	.word	0x20008fd8
 800e8a0:	20008fcc 	.word	0x20008fcc
 800e8a4:	20008fd4 	.word	0x20008fd4
 800e8a8:	20008fdc 	.word	0x20008fdc

0800e8ac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b082      	sub	sp, #8
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e8b4:	2101      	movs	r1, #1
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f7ff ff3a 	bl	800e730 <tcp_abandon>
}
 800e8bc:	bf00      	nop
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b084      	sub	sp, #16
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d106      	bne.n	800e8e0 <tcp_update_rcv_ann_wnd+0x1c>
 800e8d2:	4b25      	ldr	r3, [pc, #148]	; (800e968 <tcp_update_rcv_ann_wnd+0xa4>)
 800e8d4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e8d8:	4924      	ldr	r1, [pc, #144]	; (800e96c <tcp_update_rcv_ann_wnd+0xa8>)
 800e8da:	4825      	ldr	r0, [pc, #148]	; (800e970 <tcp_update_rcv_ann_wnd+0xac>)
 800e8dc:	f008 fc74 	bl	80171c8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e8e8:	4413      	add	r3, r2
 800e8ea:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f0:	687a      	ldr	r2, [r7, #4]
 800e8f2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e8f4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e8f8:	bf28      	it	cs
 800e8fa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e8fe:	b292      	uxth	r2, r2
 800e900:	4413      	add	r3, r2
 800e902:	68fa      	ldr	r2, [r7, #12]
 800e904:	1ad3      	subs	r3, r2, r3
 800e906:	2b00      	cmp	r3, #0
 800e908:	db08      	blt.n	800e91c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e916:	68fa      	ldr	r2, [r7, #12]
 800e918:	1ad3      	subs	r3, r2, r3
 800e91a:	e020      	b.n	800e95e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e924:	1ad3      	subs	r3, r2, r3
 800e926:	2b00      	cmp	r3, #0
 800e928:	dd03      	ble.n	800e932 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2200      	movs	r2, #0
 800e92e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e930:	e014      	b.n	800e95c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e944:	d306      	bcc.n	800e954 <tcp_update_rcv_ann_wnd+0x90>
 800e946:	4b08      	ldr	r3, [pc, #32]	; (800e968 <tcp_update_rcv_ann_wnd+0xa4>)
 800e948:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e94c:	4909      	ldr	r1, [pc, #36]	; (800e974 <tcp_update_rcv_ann_wnd+0xb0>)
 800e94e:	4808      	ldr	r0, [pc, #32]	; (800e970 <tcp_update_rcv_ann_wnd+0xac>)
 800e950:	f008 fc3a 	bl	80171c8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	b29a      	uxth	r2, r3
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e95c:	2300      	movs	r3, #0
  }
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3710      	adds	r7, #16
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
 800e966:	bf00      	nop
 800e968:	08018d4c 	.word	0x08018d4c
 800e96c:	08018fa8 	.word	0x08018fa8
 800e970:	08018d90 	.word	0x08018d90
 800e974:	08018fcc 	.word	0x08018fcc

0800e978 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	460b      	mov	r3, r1
 800e982:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d107      	bne.n	800e99a <tcp_recved+0x22>
 800e98a:	4b1f      	ldr	r3, [pc, #124]	; (800ea08 <tcp_recved+0x90>)
 800e98c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e990:	491e      	ldr	r1, [pc, #120]	; (800ea0c <tcp_recved+0x94>)
 800e992:	481f      	ldr	r0, [pc, #124]	; (800ea10 <tcp_recved+0x98>)
 800e994:	f008 fc18 	bl	80171c8 <iprintf>
 800e998:	e032      	b.n	800ea00 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	7d1b      	ldrb	r3, [r3, #20]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	d106      	bne.n	800e9b0 <tcp_recved+0x38>
 800e9a2:	4b19      	ldr	r3, [pc, #100]	; (800ea08 <tcp_recved+0x90>)
 800e9a4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e9a8:	491a      	ldr	r1, [pc, #104]	; (800ea14 <tcp_recved+0x9c>)
 800e9aa:	4819      	ldr	r0, [pc, #100]	; (800ea10 <tcp_recved+0x98>)
 800e9ac:	f008 fc0c 	bl	80171c8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e9b4:	887b      	ldrh	r3, [r7, #2]
 800e9b6:	4413      	add	r3, r2
 800e9b8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e9ba:	89fb      	ldrh	r3, [r7, #14]
 800e9bc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e9c0:	d804      	bhi.n	800e9cc <tcp_recved+0x54>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9c6:	89fa      	ldrh	r2, [r7, #14]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d204      	bcs.n	800e9d6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e9d2:	851a      	strh	r2, [r3, #40]	; 0x28
 800e9d4:	e002      	b.n	800e9dc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	89fa      	ldrh	r2, [r7, #14]
 800e9da:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7ff ff71 	bl	800e8c4 <tcp_update_rcv_ann_wnd>
 800e9e2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e9ea:	d309      	bcc.n	800ea00 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	8b5b      	ldrh	r3, [r3, #26]
 800e9f0:	f043 0302 	orr.w	r3, r3, #2
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f003 fe42 	bl	8012684 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop
 800ea08:	08018d4c 	.word	0x08018d4c
 800ea0c:	08018fe8 	.word	0x08018fe8
 800ea10:	08018d90 	.word	0x08018d90
 800ea14:	08019000 	.word	0x08019000

0800ea18 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ea18:	b5b0      	push	{r4, r5, r7, lr}
 800ea1a:	b090      	sub	sp, #64	; 0x40
 800ea1c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800ea24:	4b94      	ldr	r3, [pc, #592]	; (800ec78 <tcp_slowtmr+0x260>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	4a93      	ldr	r2, [pc, #588]	; (800ec78 <tcp_slowtmr+0x260>)
 800ea2c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800ea2e:	4b93      	ldr	r3, [pc, #588]	; (800ec7c <tcp_slowtmr+0x264>)
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	3301      	adds	r3, #1
 800ea34:	b2da      	uxtb	r2, r3
 800ea36:	4b91      	ldr	r3, [pc, #580]	; (800ec7c <tcp_slowtmr+0x264>)
 800ea38:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800ea3e:	4b90      	ldr	r3, [pc, #576]	; (800ec80 <tcp_slowtmr+0x268>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800ea44:	e29d      	b.n	800ef82 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800ea46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea48:	7d1b      	ldrb	r3, [r3, #20]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d106      	bne.n	800ea5c <tcp_slowtmr+0x44>
 800ea4e:	4b8d      	ldr	r3, [pc, #564]	; (800ec84 <tcp_slowtmr+0x26c>)
 800ea50:	f240 42be 	movw	r2, #1214	; 0x4be
 800ea54:	498c      	ldr	r1, [pc, #560]	; (800ec88 <tcp_slowtmr+0x270>)
 800ea56:	488d      	ldr	r0, [pc, #564]	; (800ec8c <tcp_slowtmr+0x274>)
 800ea58:	f008 fbb6 	bl	80171c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ea5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea5e:	7d1b      	ldrb	r3, [r3, #20]
 800ea60:	2b01      	cmp	r3, #1
 800ea62:	d106      	bne.n	800ea72 <tcp_slowtmr+0x5a>
 800ea64:	4b87      	ldr	r3, [pc, #540]	; (800ec84 <tcp_slowtmr+0x26c>)
 800ea66:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ea6a:	4989      	ldr	r1, [pc, #548]	; (800ec90 <tcp_slowtmr+0x278>)
 800ea6c:	4887      	ldr	r0, [pc, #540]	; (800ec8c <tcp_slowtmr+0x274>)
 800ea6e:	f008 fbab 	bl	80171c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ea72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea74:	7d1b      	ldrb	r3, [r3, #20]
 800ea76:	2b0a      	cmp	r3, #10
 800ea78:	d106      	bne.n	800ea88 <tcp_slowtmr+0x70>
 800ea7a:	4b82      	ldr	r3, [pc, #520]	; (800ec84 <tcp_slowtmr+0x26c>)
 800ea7c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ea80:	4984      	ldr	r1, [pc, #528]	; (800ec94 <tcp_slowtmr+0x27c>)
 800ea82:	4882      	ldr	r0, [pc, #520]	; (800ec8c <tcp_slowtmr+0x274>)
 800ea84:	f008 fba0 	bl	80171c8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ea88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea8a:	7f9a      	ldrb	r2, [r3, #30]
 800ea8c:	4b7b      	ldr	r3, [pc, #492]	; (800ec7c <tcp_slowtmr+0x264>)
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d105      	bne.n	800eaa0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ea94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea9a:	68db      	ldr	r3, [r3, #12]
 800ea9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ea9e:	e270      	b.n	800ef82 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800eaa0:	4b76      	ldr	r3, [pc, #472]	; (800ec7c <tcp_slowtmr+0x264>)
 800eaa2:	781a      	ldrb	r2, [r3, #0]
 800eaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800eab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eab6:	7d1b      	ldrb	r3, [r3, #20]
 800eab8:	2b02      	cmp	r3, #2
 800eaba:	d10a      	bne.n	800ead2 <tcp_slowtmr+0xba>
 800eabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800eac2:	2b05      	cmp	r3, #5
 800eac4:	d905      	bls.n	800ead2 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800eac6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaca:	3301      	adds	r3, #1
 800eacc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ead0:	e11e      	b.n	800ed10 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ead2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ead4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ead8:	2b0b      	cmp	r3, #11
 800eada:	d905      	bls.n	800eae8 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800eadc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eae0:	3301      	adds	r3, #1
 800eae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eae6:	e113      	b.n	800ed10 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800eae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d075      	beq.n	800ebde <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800eaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d006      	beq.n	800eb08 <tcp_slowtmr+0xf0>
 800eafa:	4b62      	ldr	r3, [pc, #392]	; (800ec84 <tcp_slowtmr+0x26c>)
 800eafc:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800eb00:	4965      	ldr	r1, [pc, #404]	; (800ec98 <tcp_slowtmr+0x280>)
 800eb02:	4862      	ldr	r0, [pc, #392]	; (800ec8c <tcp_slowtmr+0x274>)
 800eb04:	f008 fb60 	bl	80171c8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800eb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d106      	bne.n	800eb1e <tcp_slowtmr+0x106>
 800eb10:	4b5c      	ldr	r3, [pc, #368]	; (800ec84 <tcp_slowtmr+0x26c>)
 800eb12:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800eb16:	4961      	ldr	r1, [pc, #388]	; (800ec9c <tcp_slowtmr+0x284>)
 800eb18:	485c      	ldr	r0, [pc, #368]	; (800ec8c <tcp_slowtmr+0x274>)
 800eb1a:	f008 fb55 	bl	80171c8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800eb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb20:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eb24:	2b0b      	cmp	r3, #11
 800eb26:	d905      	bls.n	800eb34 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800eb28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb2c:	3301      	adds	r3, #1
 800eb2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb32:	e0ed      	b.n	800ed10 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800eb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eb3a:	3b01      	subs	r3, #1
 800eb3c:	4a58      	ldr	r2, [pc, #352]	; (800eca0 <tcp_slowtmr+0x288>)
 800eb3e:	5cd3      	ldrb	r3, [r2, r3]
 800eb40:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800eb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb44:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb48:	7c7a      	ldrb	r2, [r7, #17]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d907      	bls.n	800eb5e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800eb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb50:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb54:	3301      	adds	r3, #1
 800eb56:	b2da      	uxtb	r2, r3
 800eb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800eb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb60:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eb64:	7c7a      	ldrb	r2, [r7, #17]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	f200 80d2 	bhi.w	800ed10 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800eb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d108      	bne.n	800eb8c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800eb7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb7c:	f004 fc2a 	bl	80133d4 <tcp_zero_window_probe>
 800eb80:	4603      	mov	r3, r0
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d014      	beq.n	800ebb0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800eb86:	2300      	movs	r3, #0
 800eb88:	623b      	str	r3, [r7, #32]
 800eb8a:	e011      	b.n	800ebb0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800eb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eb92:	4619      	mov	r1, r3
 800eb94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb96:	f003 faef 	bl	8012178 <tcp_split_unsent_seg>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d107      	bne.n	800ebb0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800eba0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eba2:	f003 fd6f 	bl	8012684 <tcp_output>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d101      	bne.n	800ebb0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ebac:	2300      	movs	r3, #0
 800ebae:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ebb0:	6a3b      	ldr	r3, [r7, #32]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	f000 80ac 	beq.w	800ed10 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ebb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebba:	2200      	movs	r2, #0
 800ebbc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ebc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ebc6:	2b06      	cmp	r3, #6
 800ebc8:	f200 80a2 	bhi.w	800ed10 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ebcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ebd2:	3301      	adds	r3, #1
 800ebd4:	b2da      	uxtb	r2, r3
 800ebd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ebdc:	e098      	b.n	800ed10 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ebde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	db0f      	blt.n	800ec08 <tcp_slowtmr+0x1f0>
 800ebe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ebee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d008      	beq.n	800ec08 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ebf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	3301      	adds	r3, #1
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	b21a      	sxth	r2, r3
 800ec04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec06:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ec08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ec0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec10:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ec14:	429a      	cmp	r2, r3
 800ec16:	db7b      	blt.n	800ed10 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ec18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec1a:	f004 f825 	bl	8012c68 <tcp_rexmit_rto_prepare>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d007      	beq.n	800ec34 <tcp_slowtmr+0x21c>
 800ec24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d171      	bne.n	800ed10 <tcp_slowtmr+0x2f8>
 800ec2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d06d      	beq.n	800ed10 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ec34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec36:	7d1b      	ldrb	r3, [r3, #20]
 800ec38:	2b02      	cmp	r3, #2
 800ec3a:	d03a      	beq.n	800ecb2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ec3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec42:	2b0c      	cmp	r3, #12
 800ec44:	bf28      	it	cs
 800ec46:	230c      	movcs	r3, #12
 800ec48:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ec4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec4c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec50:	10db      	asrs	r3, r3, #3
 800ec52:	b21b      	sxth	r3, r3
 800ec54:	461a      	mov	r2, r3
 800ec56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec58:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec5c:	4413      	add	r3, r2
 800ec5e:	7efa      	ldrb	r2, [r7, #27]
 800ec60:	4910      	ldr	r1, [pc, #64]	; (800eca4 <tcp_slowtmr+0x28c>)
 800ec62:	5c8a      	ldrb	r2, [r1, r2]
 800ec64:	4093      	lsls	r3, r2
 800ec66:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	dc1a      	bgt.n	800eca8 <tcp_slowtmr+0x290>
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	b21a      	sxth	r2, r3
 800ec76:	e019      	b.n	800ecac <tcp_slowtmr+0x294>
 800ec78:	20008fc8 	.word	0x20008fc8
 800ec7c:	20008fde 	.word	0x20008fde
 800ec80:	20008fd4 	.word	0x20008fd4
 800ec84:	08018d4c 	.word	0x08018d4c
 800ec88:	08019090 	.word	0x08019090
 800ec8c:	08018d90 	.word	0x08018d90
 800ec90:	080190bc 	.word	0x080190bc
 800ec94:	080190e8 	.word	0x080190e8
 800ec98:	08019118 	.word	0x08019118
 800ec9c:	0801914c 	.word	0x0801914c
 800eca0:	0801ad2c 	.word	0x0801ad2c
 800eca4:	0801ad1c 	.word	0x0801ad1c
 800eca8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ecac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ecb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ecb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ecbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	bf28      	it	cs
 800ecc8:	4613      	movcs	r3, r2
 800ecca:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800eccc:	8a7b      	ldrh	r3, [r7, #18]
 800ecce:	085b      	lsrs	r3, r3, #1
 800ecd0:	b29a      	uxth	r2, r3
 800ecd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ecd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecda:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ecde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ece0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ece2:	005b      	lsls	r3, r3, #1
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d206      	bcs.n	800ecf8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ecea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecee:	005b      	lsls	r3, r3, #1
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecf4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ecf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ecfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ed02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed04:	2200      	movs	r2, #0
 800ed06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ed0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed0c:	f004 f81c 	bl	8012d48 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ed10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed12:	7d1b      	ldrb	r3, [r3, #20]
 800ed14:	2b06      	cmp	r3, #6
 800ed16:	d111      	bne.n	800ed3c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ed18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1a:	8b5b      	ldrh	r3, [r3, #26]
 800ed1c:	f003 0310 	and.w	r3, r3, #16
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d00b      	beq.n	800ed3c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed24:	4b9c      	ldr	r3, [pc, #624]	; (800ef98 <tcp_slowtmr+0x580>)
 800ed26:	681a      	ldr	r2, [r3, #0]
 800ed28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed2a:	6a1b      	ldr	r3, [r3, #32]
 800ed2c:	1ad3      	subs	r3, r2, r3
 800ed2e:	2b28      	cmp	r3, #40	; 0x28
 800ed30:	d904      	bls.n	800ed3c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ed32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed36:	3301      	adds	r3, #1
 800ed38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ed3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed3e:	7a5b      	ldrb	r3, [r3, #9]
 800ed40:	f003 0308 	and.w	r3, r3, #8
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d04a      	beq.n	800edde <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ed48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ed4c:	2b04      	cmp	r3, #4
 800ed4e:	d003      	beq.n	800ed58 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ed50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed52:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ed54:	2b07      	cmp	r3, #7
 800ed56:	d142      	bne.n	800edde <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed58:	4b8f      	ldr	r3, [pc, #572]	; (800ef98 <tcp_slowtmr+0x580>)
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed5e:	6a1b      	ldr	r3, [r3, #32]
 800ed60:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ed62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed64:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ed68:	4b8c      	ldr	r3, [pc, #560]	; (800ef9c <tcp_slowtmr+0x584>)
 800ed6a:	440b      	add	r3, r1
 800ed6c:	498c      	ldr	r1, [pc, #560]	; (800efa0 <tcp_slowtmr+0x588>)
 800ed6e:	fba1 1303 	umull	r1, r3, r1, r3
 800ed72:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d90a      	bls.n	800ed8e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ed78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ed82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed86:	3301      	adds	r3, #1
 800ed88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed8c:	e027      	b.n	800edde <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ed8e:	4b82      	ldr	r3, [pc, #520]	; (800ef98 <tcp_slowtmr+0x580>)
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed94:	6a1b      	ldr	r3, [r3, #32]
 800ed96:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ed98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed9a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ed9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800eda4:	4618      	mov	r0, r3
 800eda6:	4b7f      	ldr	r3, [pc, #508]	; (800efa4 <tcp_slowtmr+0x58c>)
 800eda8:	fb00 f303 	mul.w	r3, r0, r3
 800edac:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800edae:	497c      	ldr	r1, [pc, #496]	; (800efa0 <tcp_slowtmr+0x588>)
 800edb0:	fba1 1303 	umull	r1, r3, r1, r3
 800edb4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d911      	bls.n	800edde <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800edba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800edbc:	f004 faca 	bl	8013354 <tcp_keepalive>
 800edc0:	4603      	mov	r3, r0
 800edc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800edc6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d107      	bne.n	800edde <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800edce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800edd4:	3301      	adds	r3, #1
 800edd6:	b2da      	uxtb	r2, r3
 800edd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edda:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800edde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ede0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d011      	beq.n	800ee0a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ede6:	4b6c      	ldr	r3, [pc, #432]	; (800ef98 <tcp_slowtmr+0x580>)
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edec:	6a1b      	ldr	r3, [r3, #32]
 800edee:	1ad2      	subs	r2, r2, r3
 800edf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800edf6:	4619      	mov	r1, r3
 800edf8:	460b      	mov	r3, r1
 800edfa:	005b      	lsls	r3, r3, #1
 800edfc:	440b      	add	r3, r1
 800edfe:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d302      	bcc.n	800ee0a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ee04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee06:	f000 fddd 	bl	800f9c4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ee0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee0c:	7d1b      	ldrb	r3, [r3, #20]
 800ee0e:	2b03      	cmp	r3, #3
 800ee10:	d10b      	bne.n	800ee2a <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee12:	4b61      	ldr	r3, [pc, #388]	; (800ef98 <tcp_slowtmr+0x580>)
 800ee14:	681a      	ldr	r2, [r3, #0]
 800ee16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee18:	6a1b      	ldr	r3, [r3, #32]
 800ee1a:	1ad3      	subs	r3, r2, r3
 800ee1c:	2b28      	cmp	r3, #40	; 0x28
 800ee1e:	d904      	bls.n	800ee2a <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ee20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee24:	3301      	adds	r3, #1
 800ee26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ee2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee2c:	7d1b      	ldrb	r3, [r3, #20]
 800ee2e:	2b09      	cmp	r3, #9
 800ee30:	d10b      	bne.n	800ee4a <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ee32:	4b59      	ldr	r3, [pc, #356]	; (800ef98 <tcp_slowtmr+0x580>)
 800ee34:	681a      	ldr	r2, [r3, #0]
 800ee36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee38:	6a1b      	ldr	r3, [r3, #32]
 800ee3a:	1ad3      	subs	r3, r2, r3
 800ee3c:	2bf0      	cmp	r3, #240	; 0xf0
 800ee3e:	d904      	bls.n	800ee4a <tcp_slowtmr+0x432>
        ++pcb_remove;
 800ee40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee44:	3301      	adds	r3, #1
 800ee46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ee4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d060      	beq.n	800ef14 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ee52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ee58:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ee5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee5c:	f000 fbfe 	bl	800f65c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ee60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d010      	beq.n	800ee88 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ee66:	4b50      	ldr	r3, [pc, #320]	; (800efa8 <tcp_slowtmr+0x590>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	d106      	bne.n	800ee7e <tcp_slowtmr+0x466>
 800ee70:	4b4e      	ldr	r3, [pc, #312]	; (800efac <tcp_slowtmr+0x594>)
 800ee72:	f240 526d 	movw	r2, #1389	; 0x56d
 800ee76:	494e      	ldr	r1, [pc, #312]	; (800efb0 <tcp_slowtmr+0x598>)
 800ee78:	484e      	ldr	r0, [pc, #312]	; (800efb4 <tcp_slowtmr+0x59c>)
 800ee7a:	f008 f9a5 	bl	80171c8 <iprintf>
        prev->next = pcb->next;
 800ee7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee80:	68da      	ldr	r2, [r3, #12]
 800ee82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee84:	60da      	str	r2, [r3, #12]
 800ee86:	e00f      	b.n	800eea8 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ee88:	4b47      	ldr	r3, [pc, #284]	; (800efa8 <tcp_slowtmr+0x590>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d006      	beq.n	800eea0 <tcp_slowtmr+0x488>
 800ee92:	4b46      	ldr	r3, [pc, #280]	; (800efac <tcp_slowtmr+0x594>)
 800ee94:	f240 5271 	movw	r2, #1393	; 0x571
 800ee98:	4947      	ldr	r1, [pc, #284]	; (800efb8 <tcp_slowtmr+0x5a0>)
 800ee9a:	4846      	ldr	r0, [pc, #280]	; (800efb4 <tcp_slowtmr+0x59c>)
 800ee9c:	f008 f994 	bl	80171c8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800eea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea2:	68db      	ldr	r3, [r3, #12]
 800eea4:	4a40      	ldr	r2, [pc, #256]	; (800efa8 <tcp_slowtmr+0x590>)
 800eea6:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800eea8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d013      	beq.n	800eed8 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eeb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800eeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeb6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800eeb8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800eeba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eebc:	3304      	adds	r3, #4
 800eebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eec0:	8ad2      	ldrh	r2, [r2, #22]
 800eec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eec4:	8b09      	ldrh	r1, [r1, #24]
 800eec6:	9102      	str	r1, [sp, #8]
 800eec8:	9201      	str	r2, [sp, #4]
 800eeca:	9300      	str	r3, [sp, #0]
 800eecc:	462b      	mov	r3, r5
 800eece:	4622      	mov	r2, r4
 800eed0:	4601      	mov	r1, r0
 800eed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eed4:	f004 f98a 	bl	80131ec <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800eed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeda:	691b      	ldr	r3, [r3, #16]
 800eedc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800eede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee0:	7d1b      	ldrb	r3, [r3, #20]
 800eee2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800eee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800eee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800eeee:	6838      	ldr	r0, [r7, #0]
 800eef0:	f7ff f9f4 	bl	800e2dc <tcp_free>

      tcp_active_pcbs_changed = 0;
 800eef4:	4b31      	ldr	r3, [pc, #196]	; (800efbc <tcp_slowtmr+0x5a4>)
 800eef6:	2200      	movs	r2, #0
 800eef8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d004      	beq.n	800ef0a <tcp_slowtmr+0x4f2>
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f06f 010c 	mvn.w	r1, #12
 800ef06:	68b8      	ldr	r0, [r7, #8]
 800ef08:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ef0a:	4b2c      	ldr	r3, [pc, #176]	; (800efbc <tcp_slowtmr+0x5a4>)
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d037      	beq.n	800ef82 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ef12:	e592      	b.n	800ea3a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ef14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ef18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1a:	68db      	ldr	r3, [r3, #12]
 800ef1c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ef1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef20:	7f1b      	ldrb	r3, [r3, #28]
 800ef22:	3301      	adds	r3, #1
 800ef24:	b2da      	uxtb	r2, r3
 800ef26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef28:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ef2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef2c:	7f1a      	ldrb	r2, [r3, #28]
 800ef2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef30:	7f5b      	ldrb	r3, [r3, #29]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d325      	bcc.n	800ef82 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ef36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef38:	2200      	movs	r2, #0
 800ef3a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ef3c:	4b1f      	ldr	r3, [pc, #124]	; (800efbc <tcp_slowtmr+0x5a4>)
 800ef3e:	2200      	movs	r2, #0
 800ef40:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ef42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d00b      	beq.n	800ef64 <tcp_slowtmr+0x54c>
 800ef4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ef54:	6912      	ldr	r2, [r2, #16]
 800ef56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef58:	4610      	mov	r0, r2
 800ef5a:	4798      	blx	r3
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ef62:	e002      	b.n	800ef6a <tcp_slowtmr+0x552>
 800ef64:	2300      	movs	r3, #0
 800ef66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ef6a:	4b14      	ldr	r3, [pc, #80]	; (800efbc <tcp_slowtmr+0x5a4>)
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d000      	beq.n	800ef74 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800ef72:	e562      	b.n	800ea3a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ef74:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d102      	bne.n	800ef82 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800ef7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef7e:	f003 fb81 	bl	8012684 <tcp_output>
  while (pcb != NULL) {
 800ef82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	f47f ad5e 	bne.w	800ea46 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ef8e:	4b0c      	ldr	r3, [pc, #48]	; (800efc0 <tcp_slowtmr+0x5a8>)
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ef94:	e069      	b.n	800f06a <tcp_slowtmr+0x652>
 800ef96:	bf00      	nop
 800ef98:	20008fc8 	.word	0x20008fc8
 800ef9c:	000a4cb8 	.word	0x000a4cb8
 800efa0:	10624dd3 	.word	0x10624dd3
 800efa4:	000124f8 	.word	0x000124f8
 800efa8:	20008fd4 	.word	0x20008fd4
 800efac:	08018d4c 	.word	0x08018d4c
 800efb0:	08019184 	.word	0x08019184
 800efb4:	08018d90 	.word	0x08018d90
 800efb8:	080191b0 	.word	0x080191b0
 800efbc:	20008fdc 	.word	0x20008fdc
 800efc0:	20008fd8 	.word	0x20008fd8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800efc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc6:	7d1b      	ldrb	r3, [r3, #20]
 800efc8:	2b0a      	cmp	r3, #10
 800efca:	d006      	beq.n	800efda <tcp_slowtmr+0x5c2>
 800efcc:	4b2b      	ldr	r3, [pc, #172]	; (800f07c <tcp_slowtmr+0x664>)
 800efce:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800efd2:	492b      	ldr	r1, [pc, #172]	; (800f080 <tcp_slowtmr+0x668>)
 800efd4:	482b      	ldr	r0, [pc, #172]	; (800f084 <tcp_slowtmr+0x66c>)
 800efd6:	f008 f8f7 	bl	80171c8 <iprintf>
    pcb_remove = 0;
 800efda:	2300      	movs	r3, #0
 800efdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800efe0:	4b29      	ldr	r3, [pc, #164]	; (800f088 <tcp_slowtmr+0x670>)
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe6:	6a1b      	ldr	r3, [r3, #32]
 800efe8:	1ad3      	subs	r3, r2, r3
 800efea:	2bf0      	cmp	r3, #240	; 0xf0
 800efec:	d904      	bls.n	800eff8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800efee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eff2:	3301      	adds	r3, #1
 800eff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800effc:	2b00      	cmp	r3, #0
 800effe:	d02f      	beq.n	800f060 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f000:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f002:	f000 fb2b 	bl	800f65c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d010      	beq.n	800f02e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f00c:	4b1f      	ldr	r3, [pc, #124]	; (800f08c <tcp_slowtmr+0x674>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f012:	429a      	cmp	r2, r3
 800f014:	d106      	bne.n	800f024 <tcp_slowtmr+0x60c>
 800f016:	4b19      	ldr	r3, [pc, #100]	; (800f07c <tcp_slowtmr+0x664>)
 800f018:	f240 52af 	movw	r2, #1455	; 0x5af
 800f01c:	491c      	ldr	r1, [pc, #112]	; (800f090 <tcp_slowtmr+0x678>)
 800f01e:	4819      	ldr	r0, [pc, #100]	; (800f084 <tcp_slowtmr+0x66c>)
 800f020:	f008 f8d2 	bl	80171c8 <iprintf>
        prev->next = pcb->next;
 800f024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f026:	68da      	ldr	r2, [r3, #12]
 800f028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f02a:	60da      	str	r2, [r3, #12]
 800f02c:	e00f      	b.n	800f04e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f02e:	4b17      	ldr	r3, [pc, #92]	; (800f08c <tcp_slowtmr+0x674>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f034:	429a      	cmp	r2, r3
 800f036:	d006      	beq.n	800f046 <tcp_slowtmr+0x62e>
 800f038:	4b10      	ldr	r3, [pc, #64]	; (800f07c <tcp_slowtmr+0x664>)
 800f03a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f03e:	4915      	ldr	r1, [pc, #84]	; (800f094 <tcp_slowtmr+0x67c>)
 800f040:	4810      	ldr	r0, [pc, #64]	; (800f084 <tcp_slowtmr+0x66c>)
 800f042:	f008 f8c1 	bl	80171c8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f048:	68db      	ldr	r3, [r3, #12]
 800f04a:	4a10      	ldr	r2, [pc, #64]	; (800f08c <tcp_slowtmr+0x674>)
 800f04c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f050:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f058:	69f8      	ldr	r0, [r7, #28]
 800f05a:	f7ff f93f 	bl	800e2dc <tcp_free>
 800f05e:	e004      	b.n	800f06a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f062:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d1a9      	bne.n	800efc4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f070:	bf00      	nop
 800f072:	bf00      	nop
 800f074:	3730      	adds	r7, #48	; 0x30
 800f076:	46bd      	mov	sp, r7
 800f078:	bdb0      	pop	{r4, r5, r7, pc}
 800f07a:	bf00      	nop
 800f07c:	08018d4c 	.word	0x08018d4c
 800f080:	080191dc 	.word	0x080191dc
 800f084:	08018d90 	.word	0x08018d90
 800f088:	20008fc8 	.word	0x20008fc8
 800f08c:	20008fd8 	.word	0x20008fd8
 800f090:	0801920c 	.word	0x0801920c
 800f094:	08019234 	.word	0x08019234

0800f098 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b082      	sub	sp, #8
 800f09c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f09e:	4b2d      	ldr	r3, [pc, #180]	; (800f154 <tcp_fasttmr+0xbc>)
 800f0a0:	781b      	ldrb	r3, [r3, #0]
 800f0a2:	3301      	adds	r3, #1
 800f0a4:	b2da      	uxtb	r2, r3
 800f0a6:	4b2b      	ldr	r3, [pc, #172]	; (800f154 <tcp_fasttmr+0xbc>)
 800f0a8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f0aa:	4b2b      	ldr	r3, [pc, #172]	; (800f158 <tcp_fasttmr+0xc0>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f0b0:	e048      	b.n	800f144 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	7f9a      	ldrb	r2, [r3, #30]
 800f0b6:	4b27      	ldr	r3, [pc, #156]	; (800f154 <tcp_fasttmr+0xbc>)
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d03f      	beq.n	800f13e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f0be:	4b25      	ldr	r3, [pc, #148]	; (800f154 <tcp_fasttmr+0xbc>)
 800f0c0:	781a      	ldrb	r2, [r3, #0]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	8b5b      	ldrh	r3, [r3, #26]
 800f0ca:	f003 0301 	and.w	r3, r3, #1
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d010      	beq.n	800f0f4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	8b5b      	ldrh	r3, [r3, #26]
 800f0d6:	f043 0302 	orr.w	r3, r3, #2
 800f0da:	b29a      	uxth	r2, r3
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f003 facf 	bl	8012684 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	8b5b      	ldrh	r3, [r3, #26]
 800f0ea:	f023 0303 	bic.w	r3, r3, #3
 800f0ee:	b29a      	uxth	r2, r3
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	8b5b      	ldrh	r3, [r3, #26]
 800f0f8:	f003 0308 	and.w	r3, r3, #8
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d009      	beq.n	800f114 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	8b5b      	ldrh	r3, [r3, #26]
 800f104:	f023 0308 	bic.w	r3, r3, #8
 800f108:	b29a      	uxth	r2, r3
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f7ff fa78 	bl	800e604 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00a      	beq.n	800f138 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f122:	4b0e      	ldr	r3, [pc, #56]	; (800f15c <tcp_fasttmr+0xc4>)
 800f124:	2200      	movs	r2, #0
 800f126:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f000 f819 	bl	800f160 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f12e:	4b0b      	ldr	r3, [pc, #44]	; (800f15c <tcp_fasttmr+0xc4>)
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d000      	beq.n	800f138 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f136:	e7b8      	b.n	800f0aa <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	607b      	str	r3, [r7, #4]
 800f13c:	e002      	b.n	800f144 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	68db      	ldr	r3, [r3, #12]
 800f142:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1b3      	bne.n	800f0b2 <tcp_fasttmr+0x1a>
    }
  }
}
 800f14a:	bf00      	nop
 800f14c:	bf00      	nop
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}
 800f154:	20008fde 	.word	0x20008fde
 800f158:	20008fd4 	.word	0x20008fd4
 800f15c:	20008fdc 	.word	0x20008fdc

0800f160 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f160:	b590      	push	{r4, r7, lr}
 800f162:	b085      	sub	sp, #20
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d109      	bne.n	800f182 <tcp_process_refused_data+0x22>
 800f16e:	4b37      	ldr	r3, [pc, #220]	; (800f24c <tcp_process_refused_data+0xec>)
 800f170:	f240 6209 	movw	r2, #1545	; 0x609
 800f174:	4936      	ldr	r1, [pc, #216]	; (800f250 <tcp_process_refused_data+0xf0>)
 800f176:	4837      	ldr	r0, [pc, #220]	; (800f254 <tcp_process_refused_data+0xf4>)
 800f178:	f008 f826 	bl	80171c8 <iprintf>
 800f17c:	f06f 030f 	mvn.w	r3, #15
 800f180:	e060      	b.n	800f244 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f186:	7b5b      	ldrb	r3, [r3, #13]
 800f188:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f18e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00b      	beq.n	800f1b8 <tcp_process_refused_data+0x58>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6918      	ldr	r0, [r3, #16]
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	68ba      	ldr	r2, [r7, #8]
 800f1ae:	6879      	ldr	r1, [r7, #4]
 800f1b0:	47a0      	blx	r4
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	73fb      	strb	r3, [r7, #15]
 800f1b6:	e007      	b.n	800f1c8 <tcp_process_refused_data+0x68>
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	68ba      	ldr	r2, [r7, #8]
 800f1bc:	6879      	ldr	r1, [r7, #4]
 800f1be:	2000      	movs	r0, #0
 800f1c0:	f000 f8a4 	bl	800f30c <tcp_recv_null>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f1c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d12a      	bne.n	800f226 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f1d0:	7bbb      	ldrb	r3, [r7, #14]
 800f1d2:	f003 0320 	and.w	r3, r3, #32
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d033      	beq.n	800f242 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1de:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f1e2:	d005      	beq.n	800f1f0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	b29a      	uxth	r2, r3
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00b      	beq.n	800f212 <tcp_process_refused_data+0xb2>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6918      	ldr	r0, [r3, #16]
 800f204:	2300      	movs	r3, #0
 800f206:	2200      	movs	r2, #0
 800f208:	6879      	ldr	r1, [r7, #4]
 800f20a:	47a0      	blx	r4
 800f20c:	4603      	mov	r3, r0
 800f20e:	73fb      	strb	r3, [r7, #15]
 800f210:	e001      	b.n	800f216 <tcp_process_refused_data+0xb6>
 800f212:	2300      	movs	r3, #0
 800f214:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f21a:	f113 0f0d 	cmn.w	r3, #13
 800f21e:	d110      	bne.n	800f242 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f220:	f06f 030c 	mvn.w	r3, #12
 800f224:	e00e      	b.n	800f244 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f22a:	f113 0f0d 	cmn.w	r3, #13
 800f22e:	d102      	bne.n	800f236 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f230:	f06f 030c 	mvn.w	r3, #12
 800f234:	e006      	b.n	800f244 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	68ba      	ldr	r2, [r7, #8]
 800f23a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f23c:	f06f 0304 	mvn.w	r3, #4
 800f240:	e000      	b.n	800f244 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3714      	adds	r7, #20
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd90      	pop	{r4, r7, pc}
 800f24c:	08018d4c 	.word	0x08018d4c
 800f250:	0801925c 	.word	0x0801925c
 800f254:	08018d90 	.word	0x08018d90

0800f258 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f260:	e007      	b.n	800f272 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f268:	6878      	ldr	r0, [r7, #4]
 800f26a:	f000 f80a 	bl	800f282 <tcp_seg_free>
    seg = next;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d1f4      	bne.n	800f262 <tcp_segs_free+0xa>
  }
}
 800f278:	bf00      	nop
 800f27a:	bf00      	nop
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f282:	b580      	push	{r7, lr}
 800f284:	b082      	sub	sp, #8
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d00c      	beq.n	800f2aa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d004      	beq.n	800f2a2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7fe fcdb 	bl	800dc58 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f2a2:	6879      	ldr	r1, [r7, #4]
 800f2a4:	2003      	movs	r0, #3
 800f2a6:	f7fd fe61 	bl	800cf6c <memp_free>
  }
}
 800f2aa:	bf00      	nop
 800f2ac:	3708      	adds	r7, #8
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
	...

0800f2b4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b084      	sub	sp, #16
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d106      	bne.n	800f2d0 <tcp_seg_copy+0x1c>
 800f2c2:	4b0f      	ldr	r3, [pc, #60]	; (800f300 <tcp_seg_copy+0x4c>)
 800f2c4:	f240 6282 	movw	r2, #1666	; 0x682
 800f2c8:	490e      	ldr	r1, [pc, #56]	; (800f304 <tcp_seg_copy+0x50>)
 800f2ca:	480f      	ldr	r0, [pc, #60]	; (800f308 <tcp_seg_copy+0x54>)
 800f2cc:	f007 ff7c 	bl	80171c8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f2d0:	2003      	movs	r0, #3
 800f2d2:	f7fd fddb 	bl	800ce8c <memp_malloc>
 800f2d6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d101      	bne.n	800f2e2 <tcp_seg_copy+0x2e>
    return NULL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	e00a      	b.n	800f2f8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f2e2:	2210      	movs	r2, #16
 800f2e4:	6879      	ldr	r1, [r7, #4]
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f007 ff58 	bl	801719c <memcpy>
  pbuf_ref(cseg->p);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	685b      	ldr	r3, [r3, #4]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7fe fd51 	bl	800dd98 <pbuf_ref>
  return cseg;
 800f2f6:	68fb      	ldr	r3, [r7, #12]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3710      	adds	r7, #16
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	08018d4c 	.word	0x08018d4c
 800f304:	080192a0 	.word	0x080192a0
 800f308:	08018d90 	.word	0x08018d90

0800f30c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	607a      	str	r2, [r7, #4]
 800f318:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f31a:	68bb      	ldr	r3, [r7, #8]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d109      	bne.n	800f334 <tcp_recv_null+0x28>
 800f320:	4b12      	ldr	r3, [pc, #72]	; (800f36c <tcp_recv_null+0x60>)
 800f322:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f326:	4912      	ldr	r1, [pc, #72]	; (800f370 <tcp_recv_null+0x64>)
 800f328:	4812      	ldr	r0, [pc, #72]	; (800f374 <tcp_recv_null+0x68>)
 800f32a:	f007 ff4d 	bl	80171c8 <iprintf>
 800f32e:	f06f 030f 	mvn.w	r3, #15
 800f332:	e016      	b.n	800f362 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d009      	beq.n	800f34e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	891b      	ldrh	r3, [r3, #8]
 800f33e:	4619      	mov	r1, r3
 800f340:	68b8      	ldr	r0, [r7, #8]
 800f342:	f7ff fb19 	bl	800e978 <tcp_recved>
    pbuf_free(p);
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f7fe fc86 	bl	800dc58 <pbuf_free>
 800f34c:	e008      	b.n	800f360 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f34e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d104      	bne.n	800f360 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f356:	68b8      	ldr	r0, [r7, #8]
 800f358:	f7ff f9be 	bl	800e6d8 <tcp_close>
 800f35c:	4603      	mov	r3, r0
 800f35e:	e000      	b.n	800f362 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f360:	2300      	movs	r3, #0
}
 800f362:	4618      	mov	r0, r3
 800f364:	3710      	adds	r7, #16
 800f366:	46bd      	mov	sp, r7
 800f368:	bd80      	pop	{r7, pc}
 800f36a:	bf00      	nop
 800f36c:	08018d4c 	.word	0x08018d4c
 800f370:	080192bc 	.word	0x080192bc
 800f374:	08018d90 	.word	0x08018d90

0800f378 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b086      	sub	sp, #24
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	4603      	mov	r3, r0
 800f380:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f386:	2b00      	cmp	r3, #0
 800f388:	db01      	blt.n	800f38e <tcp_kill_prio+0x16>
 800f38a:	79fb      	ldrb	r3, [r7, #7]
 800f38c:	e000      	b.n	800f390 <tcp_kill_prio+0x18>
 800f38e:	237f      	movs	r3, #127	; 0x7f
 800f390:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f392:	7afb      	ldrb	r3, [r7, #11]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d034      	beq.n	800f402 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f398:	7afb      	ldrb	r3, [r7, #11]
 800f39a:	3b01      	subs	r3, #1
 800f39c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3a6:	4b19      	ldr	r3, [pc, #100]	; (800f40c <tcp_kill_prio+0x94>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	617b      	str	r3, [r7, #20]
 800f3ac:	e01f      	b.n	800f3ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	7d5b      	ldrb	r3, [r3, #21]
 800f3b2:	7afa      	ldrb	r2, [r7, #11]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d80c      	bhi.n	800f3d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f3bc:	7afa      	ldrb	r2, [r7, #11]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d112      	bne.n	800f3e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f3c2:	4b13      	ldr	r3, [pc, #76]	; (800f410 <tcp_kill_prio+0x98>)
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	697b      	ldr	r3, [r7, #20]
 800f3c8:	6a1b      	ldr	r3, [r3, #32]
 800f3ca:	1ad3      	subs	r3, r2, r3
 800f3cc:	68fa      	ldr	r2, [r7, #12]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d80a      	bhi.n	800f3e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f3d2:	4b0f      	ldr	r3, [pc, #60]	; (800f410 <tcp_kill_prio+0x98>)
 800f3d4:	681a      	ldr	r2, [r3, #0]
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	6a1b      	ldr	r3, [r3, #32]
 800f3da:	1ad3      	subs	r3, r2, r3
 800f3dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	7d5b      	ldrb	r3, [r3, #21]
 800f3e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	68db      	ldr	r3, [r3, #12]
 800f3ec:	617b      	str	r3, [r7, #20]
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d1dc      	bne.n	800f3ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d004      	beq.n	800f404 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f3fa:	6938      	ldr	r0, [r7, #16]
 800f3fc:	f7ff fa56 	bl	800e8ac <tcp_abort>
 800f400:	e000      	b.n	800f404 <tcp_kill_prio+0x8c>
    return;
 800f402:	bf00      	nop
  }
}
 800f404:	3718      	adds	r7, #24
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}
 800f40a:	bf00      	nop
 800f40c:	20008fd4 	.word	0x20008fd4
 800f410:	20008fc8 	.word	0x20008fc8

0800f414 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b086      	sub	sp, #24
 800f418:	af00      	add	r7, sp, #0
 800f41a:	4603      	mov	r3, r0
 800f41c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f41e:	79fb      	ldrb	r3, [r7, #7]
 800f420:	2b08      	cmp	r3, #8
 800f422:	d009      	beq.n	800f438 <tcp_kill_state+0x24>
 800f424:	79fb      	ldrb	r3, [r7, #7]
 800f426:	2b09      	cmp	r3, #9
 800f428:	d006      	beq.n	800f438 <tcp_kill_state+0x24>
 800f42a:	4b1a      	ldr	r3, [pc, #104]	; (800f494 <tcp_kill_state+0x80>)
 800f42c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f430:	4919      	ldr	r1, [pc, #100]	; (800f498 <tcp_kill_state+0x84>)
 800f432:	481a      	ldr	r0, [pc, #104]	; (800f49c <tcp_kill_state+0x88>)
 800f434:	f007 fec8 	bl	80171c8 <iprintf>

  inactivity = 0;
 800f438:	2300      	movs	r3, #0
 800f43a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f43c:	2300      	movs	r3, #0
 800f43e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f440:	4b17      	ldr	r3, [pc, #92]	; (800f4a0 <tcp_kill_state+0x8c>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	617b      	str	r3, [r7, #20]
 800f446:	e017      	b.n	800f478 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	7d1b      	ldrb	r3, [r3, #20]
 800f44c:	79fa      	ldrb	r2, [r7, #7]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d10f      	bne.n	800f472 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f452:	4b14      	ldr	r3, [pc, #80]	; (800f4a4 <tcp_kill_state+0x90>)
 800f454:	681a      	ldr	r2, [r3, #0]
 800f456:	697b      	ldr	r3, [r7, #20]
 800f458:	6a1b      	ldr	r3, [r3, #32]
 800f45a:	1ad3      	subs	r3, r2, r3
 800f45c:	68fa      	ldr	r2, [r7, #12]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d807      	bhi.n	800f472 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f462:	4b10      	ldr	r3, [pc, #64]	; (800f4a4 <tcp_kill_state+0x90>)
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	6a1b      	ldr	r3, [r3, #32]
 800f46a:	1ad3      	subs	r3, r2, r3
 800f46c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f46e:	697b      	ldr	r3, [r7, #20]
 800f470:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	68db      	ldr	r3, [r3, #12]
 800f476:	617b      	str	r3, [r7, #20]
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d1e4      	bne.n	800f448 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d003      	beq.n	800f48c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f484:	2100      	movs	r1, #0
 800f486:	6938      	ldr	r0, [r7, #16]
 800f488:	f7ff f952 	bl	800e730 <tcp_abandon>
  }
}
 800f48c:	bf00      	nop
 800f48e:	3718      	adds	r7, #24
 800f490:	46bd      	mov	sp, r7
 800f492:	bd80      	pop	{r7, pc}
 800f494:	08018d4c 	.word	0x08018d4c
 800f498:	080192d8 	.word	0x080192d8
 800f49c:	08018d90 	.word	0x08018d90
 800f4a0:	20008fd4 	.word	0x20008fd4
 800f4a4:	20008fc8 	.word	0x20008fc8

0800f4a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4b6:	4b12      	ldr	r3, [pc, #72]	; (800f500 <tcp_kill_timewait+0x58>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	60fb      	str	r3, [r7, #12]
 800f4bc:	e012      	b.n	800f4e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f4be:	4b11      	ldr	r3, [pc, #68]	; (800f504 <tcp_kill_timewait+0x5c>)
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	6a1b      	ldr	r3, [r3, #32]
 800f4c6:	1ad3      	subs	r3, r2, r3
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	d807      	bhi.n	800f4de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f4ce:	4b0d      	ldr	r3, [pc, #52]	; (800f504 <tcp_kill_timewait+0x5c>)
 800f4d0:	681a      	ldr	r2, [r3, #0]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	6a1b      	ldr	r3, [r3, #32]
 800f4d6:	1ad3      	subs	r3, r2, r3
 800f4d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	60fb      	str	r3, [r7, #12]
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d1e9      	bne.n	800f4be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d002      	beq.n	800f4f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f4f0:	68b8      	ldr	r0, [r7, #8]
 800f4f2:	f7ff f9db 	bl	800e8ac <tcp_abort>
  }
}
 800f4f6:	bf00      	nop
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	20008fd8 	.word	0x20008fd8
 800f504:	20008fc8 	.word	0x20008fc8

0800f508 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f50e:	4b10      	ldr	r3, [pc, #64]	; (800f550 <tcp_handle_closepend+0x48>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f514:	e014      	b.n	800f540 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	68db      	ldr	r3, [r3, #12]
 800f51a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	8b5b      	ldrh	r3, [r3, #26]
 800f520:	f003 0308 	and.w	r3, r3, #8
 800f524:	2b00      	cmp	r3, #0
 800f526:	d009      	beq.n	800f53c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	8b5b      	ldrh	r3, [r3, #26]
 800f52c:	f023 0308 	bic.w	r3, r3, #8
 800f530:	b29a      	uxth	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7ff f864 	bl	800e604 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d1e7      	bne.n	800f516 <tcp_handle_closepend+0xe>
  }
}
 800f546:	bf00      	nop
 800f548:	bf00      	nop
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	20008fd4 	.word	0x20008fd4

0800f554 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f554:	b580      	push	{r7, lr}
 800f556:	b084      	sub	sp, #16
 800f558:	af00      	add	r7, sp, #0
 800f55a:	4603      	mov	r3, r0
 800f55c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f55e:	2001      	movs	r0, #1
 800f560:	f7fd fc94 	bl	800ce8c <memp_malloc>
 800f564:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d126      	bne.n	800f5ba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f56c:	f7ff ffcc 	bl	800f508 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f570:	f7ff ff9a 	bl	800f4a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f574:	2001      	movs	r0, #1
 800f576:	f7fd fc89 	bl	800ce8c <memp_malloc>
 800f57a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d11b      	bne.n	800f5ba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f582:	2009      	movs	r0, #9
 800f584:	f7ff ff46 	bl	800f414 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f588:	2001      	movs	r0, #1
 800f58a:	f7fd fc7f 	bl	800ce8c <memp_malloc>
 800f58e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d111      	bne.n	800f5ba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f596:	2008      	movs	r0, #8
 800f598:	f7ff ff3c 	bl	800f414 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f59c:	2001      	movs	r0, #1
 800f59e:	f7fd fc75 	bl	800ce8c <memp_malloc>
 800f5a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d107      	bne.n	800f5ba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f5aa:	79fb      	ldrb	r3, [r7, #7]
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f7ff fee3 	bl	800f378 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f5b2:	2001      	movs	r0, #1
 800f5b4:	f7fd fc6a 	bl	800ce8c <memp_malloc>
 800f5b8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d03f      	beq.n	800f640 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f5c0:	229c      	movs	r2, #156	; 0x9c
 800f5c2:	2100      	movs	r1, #0
 800f5c4:	68f8      	ldr	r0, [r7, #12]
 800f5c6:	f007 fdf7 	bl	80171b8 <memset>
    pcb->prio = prio;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	79fa      	ldrb	r2, [r7, #7]
 800f5ce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f5d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f5e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	22ff      	movs	r2, #255	; 0xff
 800f5ee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f5f6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	2206      	movs	r2, #6
 800f5fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2206      	movs	r2, #6
 800f604:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f60c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2201      	movs	r2, #1
 800f612:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f616:	4b0d      	ldr	r3, [pc, #52]	; (800f64c <tcp_alloc+0xf8>)
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f61e:	4b0c      	ldr	r3, [pc, #48]	; (800f650 <tcp_alloc+0xfc>)
 800f620:	781a      	ldrb	r2, [r3, #0]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f62c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	4a08      	ldr	r2, [pc, #32]	; (800f654 <tcp_alloc+0x100>)
 800f634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	4a07      	ldr	r2, [pc, #28]	; (800f658 <tcp_alloc+0x104>)
 800f63c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f640:	68fb      	ldr	r3, [r7, #12]
}
 800f642:	4618      	mov	r0, r3
 800f644:	3710      	adds	r7, #16
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	20008fc8 	.word	0x20008fc8
 800f650:	20008fde 	.word	0x20008fde
 800f654:	0800f30d 	.word	0x0800f30d
 800f658:	006ddd00 	.word	0x006ddd00

0800f65c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d107      	bne.n	800f67a <tcp_pcb_purge+0x1e>
 800f66a:	4b21      	ldr	r3, [pc, #132]	; (800f6f0 <tcp_pcb_purge+0x94>)
 800f66c:	f640 0251 	movw	r2, #2129	; 0x851
 800f670:	4920      	ldr	r1, [pc, #128]	; (800f6f4 <tcp_pcb_purge+0x98>)
 800f672:	4821      	ldr	r0, [pc, #132]	; (800f6f8 <tcp_pcb_purge+0x9c>)
 800f674:	f007 fda8 	bl	80171c8 <iprintf>
 800f678:	e037      	b.n	800f6ea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	7d1b      	ldrb	r3, [r3, #20]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d033      	beq.n	800f6ea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f686:	2b0a      	cmp	r3, #10
 800f688:	d02f      	beq.n	800f6ea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f68e:	2b01      	cmp	r3, #1
 800f690:	d02b      	beq.n	800f6ea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f696:	2b00      	cmp	r3, #0
 800f698:	d007      	beq.n	800f6aa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f7fe fada 	bl	800dc58 <pbuf_free>
      pcb->refused_data = NULL;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d002      	beq.n	800f6b8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f000 f986 	bl	800f9c4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6be:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7ff fdc7 	bl	800f258 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7ff fdc2 	bl	800f258 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	66da      	str	r2, [r3, #108]	; 0x6c
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f6ea:	3708      	adds	r7, #8
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	08018d4c 	.word	0x08018d4c
 800f6f4:	08019398 	.word	0x08019398
 800f6f8:	08018d90 	.word	0x08018d90

0800f6fc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b084      	sub	sp, #16
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d106      	bne.n	800f71a <tcp_pcb_remove+0x1e>
 800f70c:	4b3e      	ldr	r3, [pc, #248]	; (800f808 <tcp_pcb_remove+0x10c>)
 800f70e:	f640 0283 	movw	r2, #2179	; 0x883
 800f712:	493e      	ldr	r1, [pc, #248]	; (800f80c <tcp_pcb_remove+0x110>)
 800f714:	483e      	ldr	r0, [pc, #248]	; (800f810 <tcp_pcb_remove+0x114>)
 800f716:	f007 fd57 	bl	80171c8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d106      	bne.n	800f72e <tcp_pcb_remove+0x32>
 800f720:	4b39      	ldr	r3, [pc, #228]	; (800f808 <tcp_pcb_remove+0x10c>)
 800f722:	f640 0284 	movw	r2, #2180	; 0x884
 800f726:	493b      	ldr	r1, [pc, #236]	; (800f814 <tcp_pcb_remove+0x118>)
 800f728:	4839      	ldr	r0, [pc, #228]	; (800f810 <tcp_pcb_remove+0x114>)
 800f72a:	f007 fd4d 	bl	80171c8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	683a      	ldr	r2, [r7, #0]
 800f734:	429a      	cmp	r2, r3
 800f736:	d105      	bne.n	800f744 <tcp_pcb_remove+0x48>
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	68da      	ldr	r2, [r3, #12]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	601a      	str	r2, [r3, #0]
 800f742:	e013      	b.n	800f76c <tcp_pcb_remove+0x70>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	60fb      	str	r3, [r7, #12]
 800f74a:	e00c      	b.n	800f766 <tcp_pcb_remove+0x6a>
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	68db      	ldr	r3, [r3, #12]
 800f750:	683a      	ldr	r2, [r7, #0]
 800f752:	429a      	cmp	r2, r3
 800f754:	d104      	bne.n	800f760 <tcp_pcb_remove+0x64>
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	68da      	ldr	r2, [r3, #12]
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	60da      	str	r2, [r3, #12]
 800f75e:	e005      	b.n	800f76c <tcp_pcb_remove+0x70>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	60fb      	str	r3, [r7, #12]
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d1ef      	bne.n	800f74c <tcp_pcb_remove+0x50>
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	2200      	movs	r2, #0
 800f770:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f772:	6838      	ldr	r0, [r7, #0]
 800f774:	f7ff ff72 	bl	800f65c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	7d1b      	ldrb	r3, [r3, #20]
 800f77c:	2b0a      	cmp	r3, #10
 800f77e:	d013      	beq.n	800f7a8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f784:	2b01      	cmp	r3, #1
 800f786:	d00f      	beq.n	800f7a8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	8b5b      	ldrh	r3, [r3, #26]
 800f78c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f790:	2b00      	cmp	r3, #0
 800f792:	d009      	beq.n	800f7a8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	8b5b      	ldrh	r3, [r3, #26]
 800f798:	f043 0302 	orr.w	r3, r3, #2
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f7a2:	6838      	ldr	r0, [r7, #0]
 800f7a4:	f002 ff6e 	bl	8012684 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	7d1b      	ldrb	r3, [r3, #20]
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d020      	beq.n	800f7f2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d006      	beq.n	800f7c6 <tcp_pcb_remove+0xca>
 800f7b8:	4b13      	ldr	r3, [pc, #76]	; (800f808 <tcp_pcb_remove+0x10c>)
 800f7ba:	f640 0293 	movw	r2, #2195	; 0x893
 800f7be:	4916      	ldr	r1, [pc, #88]	; (800f818 <tcp_pcb_remove+0x11c>)
 800f7c0:	4813      	ldr	r0, [pc, #76]	; (800f810 <tcp_pcb_remove+0x114>)
 800f7c2:	f007 fd01 	bl	80171c8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d006      	beq.n	800f7dc <tcp_pcb_remove+0xe0>
 800f7ce:	4b0e      	ldr	r3, [pc, #56]	; (800f808 <tcp_pcb_remove+0x10c>)
 800f7d0:	f640 0294 	movw	r2, #2196	; 0x894
 800f7d4:	4911      	ldr	r1, [pc, #68]	; (800f81c <tcp_pcb_remove+0x120>)
 800f7d6:	480e      	ldr	r0, [pc, #56]	; (800f810 <tcp_pcb_remove+0x114>)
 800f7d8:	f007 fcf6 	bl	80171c8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d006      	beq.n	800f7f2 <tcp_pcb_remove+0xf6>
 800f7e4:	4b08      	ldr	r3, [pc, #32]	; (800f808 <tcp_pcb_remove+0x10c>)
 800f7e6:	f640 0296 	movw	r2, #2198	; 0x896
 800f7ea:	490d      	ldr	r1, [pc, #52]	; (800f820 <tcp_pcb_remove+0x124>)
 800f7ec:	4808      	ldr	r0, [pc, #32]	; (800f810 <tcp_pcb_remove+0x114>)
 800f7ee:	f007 fceb 	bl	80171c8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	2200      	movs	r2, #0
 800f7f6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f7fe:	bf00      	nop
 800f800:	3710      	adds	r7, #16
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	08018d4c 	.word	0x08018d4c
 800f80c:	080193b4 	.word	0x080193b4
 800f810:	08018d90 	.word	0x08018d90
 800f814:	080193d0 	.word	0x080193d0
 800f818:	080193f0 	.word	0x080193f0
 800f81c:	08019408 	.word	0x08019408
 800f820:	08019424 	.word	0x08019424

0800f824 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d106      	bne.n	800f840 <tcp_next_iss+0x1c>
 800f832:	4b0a      	ldr	r3, [pc, #40]	; (800f85c <tcp_next_iss+0x38>)
 800f834:	f640 02af 	movw	r2, #2223	; 0x8af
 800f838:	4909      	ldr	r1, [pc, #36]	; (800f860 <tcp_next_iss+0x3c>)
 800f83a:	480a      	ldr	r0, [pc, #40]	; (800f864 <tcp_next_iss+0x40>)
 800f83c:	f007 fcc4 	bl	80171c8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f840:	4b09      	ldr	r3, [pc, #36]	; (800f868 <tcp_next_iss+0x44>)
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	4b09      	ldr	r3, [pc, #36]	; (800f86c <tcp_next_iss+0x48>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	4413      	add	r3, r2
 800f84a:	4a07      	ldr	r2, [pc, #28]	; (800f868 <tcp_next_iss+0x44>)
 800f84c:	6013      	str	r3, [r2, #0]
  return iss;
 800f84e:	4b06      	ldr	r3, [pc, #24]	; (800f868 <tcp_next_iss+0x44>)
 800f850:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f852:	4618      	mov	r0, r3
 800f854:	3708      	adds	r7, #8
 800f856:	46bd      	mov	sp, r7
 800f858:	bd80      	pop	{r7, pc}
 800f85a:	bf00      	nop
 800f85c:	08018d4c 	.word	0x08018d4c
 800f860:	0801943c 	.word	0x0801943c
 800f864:	08018d90 	.word	0x08018d90
 800f868:	20000024 	.word	0x20000024
 800f86c:	20008fc8 	.word	0x20008fc8

0800f870 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af00      	add	r7, sp, #0
 800f876:	4603      	mov	r3, r0
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	607a      	str	r2, [r7, #4]
 800f87c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d106      	bne.n	800f892 <tcp_eff_send_mss_netif+0x22>
 800f884:	4b14      	ldr	r3, [pc, #80]	; (800f8d8 <tcp_eff_send_mss_netif+0x68>)
 800f886:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f88a:	4914      	ldr	r1, [pc, #80]	; (800f8dc <tcp_eff_send_mss_netif+0x6c>)
 800f88c:	4814      	ldr	r0, [pc, #80]	; (800f8e0 <tcp_eff_send_mss_netif+0x70>)
 800f88e:	f007 fc9b 	bl	80171c8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d101      	bne.n	800f89c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f898:	89fb      	ldrh	r3, [r7, #14]
 800f89a:	e019      	b.n	800f8d0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f8a0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f8a2:	8afb      	ldrh	r3, [r7, #22]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d012      	beq.n	800f8ce <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f8a8:	2328      	movs	r3, #40	; 0x28
 800f8aa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f8ac:	8afa      	ldrh	r2, [r7, #22]
 800f8ae:	8abb      	ldrh	r3, [r7, #20]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d904      	bls.n	800f8be <tcp_eff_send_mss_netif+0x4e>
 800f8b4:	8afa      	ldrh	r2, [r7, #22]
 800f8b6:	8abb      	ldrh	r3, [r7, #20]
 800f8b8:	1ad3      	subs	r3, r2, r3
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	e000      	b.n	800f8c0 <tcp_eff_send_mss_netif+0x50>
 800f8be:	2300      	movs	r3, #0
 800f8c0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f8c2:	8a7a      	ldrh	r2, [r7, #18]
 800f8c4:	89fb      	ldrh	r3, [r7, #14]
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	bf28      	it	cs
 800f8ca:	4613      	movcs	r3, r2
 800f8cc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f8ce:	89fb      	ldrh	r3, [r7, #14]
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3718      	adds	r7, #24
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	08018d4c 	.word	0x08018d4c
 800f8dc:	08019458 	.word	0x08019458
 800f8e0:	08018d90 	.word	0x08018d90

0800f8e4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b084      	sub	sp, #16
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d119      	bne.n	800f92c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f8f8:	4b10      	ldr	r3, [pc, #64]	; (800f93c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f8fa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f8fe:	4910      	ldr	r1, [pc, #64]	; (800f940 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f900:	4810      	ldr	r0, [pc, #64]	; (800f944 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f902:	f007 fc61 	bl	80171c8 <iprintf>

  while (pcb != NULL) {
 800f906:	e011      	b.n	800f92c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	681a      	ldr	r2, [r3, #0]
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	429a      	cmp	r2, r3
 800f912:	d108      	bne.n	800f926 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f91a:	68f8      	ldr	r0, [r7, #12]
 800f91c:	f7fe ffc6 	bl	800e8ac <tcp_abort>
      pcb = next;
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	60fb      	str	r3, [r7, #12]
 800f924:	e002      	b.n	800f92c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	68db      	ldr	r3, [r3, #12]
 800f92a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d1ea      	bne.n	800f908 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f932:	bf00      	nop
 800f934:	bf00      	nop
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	08018d4c 	.word	0x08018d4c
 800f940:	08019480 	.word	0x08019480
 800f944:	08018d90 	.word	0x08018d90

0800f948 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b084      	sub	sp, #16
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d02a      	beq.n	800f9ae <tcp_netif_ip_addr_changed+0x66>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d026      	beq.n	800f9ae <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f960:	4b15      	ldr	r3, [pc, #84]	; (800f9b8 <tcp_netif_ip_addr_changed+0x70>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	4619      	mov	r1, r3
 800f966:	6878      	ldr	r0, [r7, #4]
 800f968:	f7ff ffbc 	bl	800f8e4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f96c:	4b13      	ldr	r3, [pc, #76]	; (800f9bc <tcp_netif_ip_addr_changed+0x74>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4619      	mov	r1, r3
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f7ff ffb6 	bl	800f8e4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f978:	683b      	ldr	r3, [r7, #0]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d017      	beq.n	800f9ae <tcp_netif_ip_addr_changed+0x66>
 800f97e:	683b      	ldr	r3, [r7, #0]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d013      	beq.n	800f9ae <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f986:	4b0e      	ldr	r3, [pc, #56]	; (800f9c0 <tcp_netif_ip_addr_changed+0x78>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	60fb      	str	r3, [r7, #12]
 800f98c:	e00c      	b.n	800f9a8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681a      	ldr	r2, [r3, #0]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	429a      	cmp	r2, r3
 800f998:	d103      	bne.n	800f9a2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	68db      	ldr	r3, [r3, #12]
 800f9a6:	60fb      	str	r3, [r7, #12]
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d1ef      	bne.n	800f98e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f9ae:	bf00      	nop
 800f9b0:	3710      	adds	r7, #16
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}
 800f9b6:	bf00      	nop
 800f9b8:	20008fd4 	.word	0x20008fd4
 800f9bc:	20008fcc 	.word	0x20008fcc
 800f9c0:	20008fd0 	.word	0x20008fd0

0800f9c4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d007      	beq.n	800f9e4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9d8:	4618      	mov	r0, r3
 800f9da:	f7ff fc3d 	bl	800f258 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f9e4:	bf00      	nop
 800f9e6:	3708      	adds	r7, #8
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f9ec:	b590      	push	{r4, r7, lr}
 800f9ee:	b08d      	sub	sp, #52	; 0x34
 800f9f0:	af04      	add	r7, sp, #16
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d105      	bne.n	800fa08 <tcp_input+0x1c>
 800f9fc:	4b9b      	ldr	r3, [pc, #620]	; (800fc6c <tcp_input+0x280>)
 800f9fe:	2283      	movs	r2, #131	; 0x83
 800fa00:	499b      	ldr	r1, [pc, #620]	; (800fc70 <tcp_input+0x284>)
 800fa02:	489c      	ldr	r0, [pc, #624]	; (800fc74 <tcp_input+0x288>)
 800fa04:	f007 fbe0 	bl	80171c8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	685b      	ldr	r3, [r3, #4]
 800fa0c:	4a9a      	ldr	r2, [pc, #616]	; (800fc78 <tcp_input+0x28c>)
 800fa0e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	895b      	ldrh	r3, [r3, #10]
 800fa14:	2b13      	cmp	r3, #19
 800fa16:	f240 83d1 	bls.w	80101bc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fa1a:	4b98      	ldr	r3, [pc, #608]	; (800fc7c <tcp_input+0x290>)
 800fa1c:	695b      	ldr	r3, [r3, #20]
 800fa1e:	4a97      	ldr	r2, [pc, #604]	; (800fc7c <tcp_input+0x290>)
 800fa20:	6812      	ldr	r2, [r2, #0]
 800fa22:	4611      	mov	r1, r2
 800fa24:	4618      	mov	r0, r3
 800fa26:	f005 ffa9 	bl	801597c <ip4_addr_isbroadcast_u32>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	f040 83c7 	bne.w	80101c0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fa32:	4b92      	ldr	r3, [pc, #584]	; (800fc7c <tcp_input+0x290>)
 800fa34:	695b      	ldr	r3, [r3, #20]
 800fa36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fa3a:	2be0      	cmp	r3, #224	; 0xe0
 800fa3c:	f000 83c0 	beq.w	80101c0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fa40:	4b8d      	ldr	r3, [pc, #564]	; (800fc78 <tcp_input+0x28c>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	899b      	ldrh	r3, [r3, #12]
 800fa46:	b29b      	uxth	r3, r3
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7fc fda7 	bl	800c59c <lwip_htons>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	0b1b      	lsrs	r3, r3, #12
 800fa52:	b29b      	uxth	r3, r3
 800fa54:	b2db      	uxtb	r3, r3
 800fa56:	009b      	lsls	r3, r3, #2
 800fa58:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fa5a:	7cbb      	ldrb	r3, [r7, #18]
 800fa5c:	2b13      	cmp	r3, #19
 800fa5e:	f240 83b1 	bls.w	80101c4 <tcp_input+0x7d8>
 800fa62:	7cbb      	ldrb	r3, [r7, #18]
 800fa64:	b29a      	uxth	r2, r3
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	891b      	ldrh	r3, [r3, #8]
 800fa6a:	429a      	cmp	r2, r3
 800fa6c:	f200 83aa 	bhi.w	80101c4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fa70:	7cbb      	ldrb	r3, [r7, #18]
 800fa72:	b29b      	uxth	r3, r3
 800fa74:	3b14      	subs	r3, #20
 800fa76:	b29a      	uxth	r2, r3
 800fa78:	4b81      	ldr	r3, [pc, #516]	; (800fc80 <tcp_input+0x294>)
 800fa7a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fa7c:	4b81      	ldr	r3, [pc, #516]	; (800fc84 <tcp_input+0x298>)
 800fa7e:	2200      	movs	r2, #0
 800fa80:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	895a      	ldrh	r2, [r3, #10]
 800fa86:	7cbb      	ldrb	r3, [r7, #18]
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d309      	bcc.n	800faa2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fa8e:	4b7c      	ldr	r3, [pc, #496]	; (800fc80 <tcp_input+0x294>)
 800fa90:	881a      	ldrh	r2, [r3, #0]
 800fa92:	4b7d      	ldr	r3, [pc, #500]	; (800fc88 <tcp_input+0x29c>)
 800fa94:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fa96:	7cbb      	ldrb	r3, [r7, #18]
 800fa98:	4619      	mov	r1, r3
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f7fe f856 	bl	800db4c <pbuf_remove_header>
 800faa0:	e04e      	b.n	800fb40 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d105      	bne.n	800fab6 <tcp_input+0xca>
 800faaa:	4b70      	ldr	r3, [pc, #448]	; (800fc6c <tcp_input+0x280>)
 800faac:	22c2      	movs	r2, #194	; 0xc2
 800faae:	4977      	ldr	r1, [pc, #476]	; (800fc8c <tcp_input+0x2a0>)
 800fab0:	4870      	ldr	r0, [pc, #448]	; (800fc74 <tcp_input+0x288>)
 800fab2:	f007 fb89 	bl	80171c8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fab6:	2114      	movs	r1, #20
 800fab8:	6878      	ldr	r0, [r7, #4]
 800faba:	f7fe f847 	bl	800db4c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	895a      	ldrh	r2, [r3, #10]
 800fac2:	4b71      	ldr	r3, [pc, #452]	; (800fc88 <tcp_input+0x29c>)
 800fac4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fac6:	4b6e      	ldr	r3, [pc, #440]	; (800fc80 <tcp_input+0x294>)
 800fac8:	881a      	ldrh	r2, [r3, #0]
 800faca:	4b6f      	ldr	r3, [pc, #444]	; (800fc88 <tcp_input+0x29c>)
 800facc:	881b      	ldrh	r3, [r3, #0]
 800face:	1ad3      	subs	r3, r2, r3
 800fad0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fad2:	4b6d      	ldr	r3, [pc, #436]	; (800fc88 <tcp_input+0x29c>)
 800fad4:	881b      	ldrh	r3, [r3, #0]
 800fad6:	4619      	mov	r1, r3
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7fe f837 	bl	800db4c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	895b      	ldrh	r3, [r3, #10]
 800fae4:	8a3a      	ldrh	r2, [r7, #16]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	f200 836e 	bhi.w	80101c8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	685b      	ldr	r3, [r3, #4]
 800faf2:	4a64      	ldr	r2, [pc, #400]	; (800fc84 <tcp_input+0x298>)
 800faf4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	8a3a      	ldrh	r2, [r7, #16]
 800fafc:	4611      	mov	r1, r2
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fe f824 	bl	800db4c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	891a      	ldrh	r2, [r3, #8]
 800fb08:	8a3b      	ldrh	r3, [r7, #16]
 800fb0a:	1ad3      	subs	r3, r2, r3
 800fb0c:	b29a      	uxth	r2, r3
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	895b      	ldrh	r3, [r3, #10]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d005      	beq.n	800fb26 <tcp_input+0x13a>
 800fb1a:	4b54      	ldr	r3, [pc, #336]	; (800fc6c <tcp_input+0x280>)
 800fb1c:	22df      	movs	r2, #223	; 0xdf
 800fb1e:	495c      	ldr	r1, [pc, #368]	; (800fc90 <tcp_input+0x2a4>)
 800fb20:	4854      	ldr	r0, [pc, #336]	; (800fc74 <tcp_input+0x288>)
 800fb22:	f007 fb51 	bl	80171c8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	891a      	ldrh	r2, [r3, #8]
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	891b      	ldrh	r3, [r3, #8]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d005      	beq.n	800fb40 <tcp_input+0x154>
 800fb34:	4b4d      	ldr	r3, [pc, #308]	; (800fc6c <tcp_input+0x280>)
 800fb36:	22e0      	movs	r2, #224	; 0xe0
 800fb38:	4956      	ldr	r1, [pc, #344]	; (800fc94 <tcp_input+0x2a8>)
 800fb3a:	484e      	ldr	r0, [pc, #312]	; (800fc74 <tcp_input+0x288>)
 800fb3c:	f007 fb44 	bl	80171c8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fb40:	4b4d      	ldr	r3, [pc, #308]	; (800fc78 <tcp_input+0x28c>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	881b      	ldrh	r3, [r3, #0]
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	4a4b      	ldr	r2, [pc, #300]	; (800fc78 <tcp_input+0x28c>)
 800fb4a:	6814      	ldr	r4, [r2, #0]
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7fc fd25 	bl	800c59c <lwip_htons>
 800fb52:	4603      	mov	r3, r0
 800fb54:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fb56:	4b48      	ldr	r3, [pc, #288]	; (800fc78 <tcp_input+0x28c>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	885b      	ldrh	r3, [r3, #2]
 800fb5c:	b29b      	uxth	r3, r3
 800fb5e:	4a46      	ldr	r2, [pc, #280]	; (800fc78 <tcp_input+0x28c>)
 800fb60:	6814      	ldr	r4, [r2, #0]
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fc fd1a 	bl	800c59c <lwip_htons>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fb6c:	4b42      	ldr	r3, [pc, #264]	; (800fc78 <tcp_input+0x28c>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	685b      	ldr	r3, [r3, #4]
 800fb72:	4a41      	ldr	r2, [pc, #260]	; (800fc78 <tcp_input+0x28c>)
 800fb74:	6814      	ldr	r4, [r2, #0]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7fc fd25 	bl	800c5c6 <lwip_htonl>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	6063      	str	r3, [r4, #4]
 800fb80:	6863      	ldr	r3, [r4, #4]
 800fb82:	4a45      	ldr	r2, [pc, #276]	; (800fc98 <tcp_input+0x2ac>)
 800fb84:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fb86:	4b3c      	ldr	r3, [pc, #240]	; (800fc78 <tcp_input+0x28c>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	689b      	ldr	r3, [r3, #8]
 800fb8c:	4a3a      	ldr	r2, [pc, #232]	; (800fc78 <tcp_input+0x28c>)
 800fb8e:	6814      	ldr	r4, [r2, #0]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7fc fd18 	bl	800c5c6 <lwip_htonl>
 800fb96:	4603      	mov	r3, r0
 800fb98:	60a3      	str	r3, [r4, #8]
 800fb9a:	68a3      	ldr	r3, [r4, #8]
 800fb9c:	4a3f      	ldr	r2, [pc, #252]	; (800fc9c <tcp_input+0x2b0>)
 800fb9e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fba0:	4b35      	ldr	r3, [pc, #212]	; (800fc78 <tcp_input+0x28c>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	89db      	ldrh	r3, [r3, #14]
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	4a33      	ldr	r2, [pc, #204]	; (800fc78 <tcp_input+0x28c>)
 800fbaa:	6814      	ldr	r4, [r2, #0]
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fc fcf5 	bl	800c59c <lwip_htons>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fbb6:	4b30      	ldr	r3, [pc, #192]	; (800fc78 <tcp_input+0x28c>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	899b      	ldrh	r3, [r3, #12]
 800fbbc:	b29b      	uxth	r3, r3
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f7fc fcec 	bl	800c59c <lwip_htons>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	b2db      	uxtb	r3, r3
 800fbc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	4b34      	ldr	r3, [pc, #208]	; (800fca0 <tcp_input+0x2b4>)
 800fbd0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	891a      	ldrh	r2, [r3, #8]
 800fbd6:	4b33      	ldr	r3, [pc, #204]	; (800fca4 <tcp_input+0x2b8>)
 800fbd8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fbda:	4b31      	ldr	r3, [pc, #196]	; (800fca0 <tcp_input+0x2b4>)
 800fbdc:	781b      	ldrb	r3, [r3, #0]
 800fbde:	f003 0303 	and.w	r3, r3, #3
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00c      	beq.n	800fc00 <tcp_input+0x214>
    tcplen++;
 800fbe6:	4b2f      	ldr	r3, [pc, #188]	; (800fca4 <tcp_input+0x2b8>)
 800fbe8:	881b      	ldrh	r3, [r3, #0]
 800fbea:	3301      	adds	r3, #1
 800fbec:	b29a      	uxth	r2, r3
 800fbee:	4b2d      	ldr	r3, [pc, #180]	; (800fca4 <tcp_input+0x2b8>)
 800fbf0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	891a      	ldrh	r2, [r3, #8]
 800fbf6:	4b2b      	ldr	r3, [pc, #172]	; (800fca4 <tcp_input+0x2b8>)
 800fbf8:	881b      	ldrh	r3, [r3, #0]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	f200 82e6 	bhi.w	80101cc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800fc00:	2300      	movs	r3, #0
 800fc02:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fc04:	4b28      	ldr	r3, [pc, #160]	; (800fca8 <tcp_input+0x2bc>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	61fb      	str	r3, [r7, #28]
 800fc0a:	e09d      	b.n	800fd48 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800fc0c:	69fb      	ldr	r3, [r7, #28]
 800fc0e:	7d1b      	ldrb	r3, [r3, #20]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d105      	bne.n	800fc20 <tcp_input+0x234>
 800fc14:	4b15      	ldr	r3, [pc, #84]	; (800fc6c <tcp_input+0x280>)
 800fc16:	22fb      	movs	r2, #251	; 0xfb
 800fc18:	4924      	ldr	r1, [pc, #144]	; (800fcac <tcp_input+0x2c0>)
 800fc1a:	4816      	ldr	r0, [pc, #88]	; (800fc74 <tcp_input+0x288>)
 800fc1c:	f007 fad4 	bl	80171c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800fc20:	69fb      	ldr	r3, [r7, #28]
 800fc22:	7d1b      	ldrb	r3, [r3, #20]
 800fc24:	2b0a      	cmp	r3, #10
 800fc26:	d105      	bne.n	800fc34 <tcp_input+0x248>
 800fc28:	4b10      	ldr	r3, [pc, #64]	; (800fc6c <tcp_input+0x280>)
 800fc2a:	22fc      	movs	r2, #252	; 0xfc
 800fc2c:	4920      	ldr	r1, [pc, #128]	; (800fcb0 <tcp_input+0x2c4>)
 800fc2e:	4811      	ldr	r0, [pc, #68]	; (800fc74 <tcp_input+0x288>)
 800fc30:	f007 faca 	bl	80171c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800fc34:	69fb      	ldr	r3, [r7, #28]
 800fc36:	7d1b      	ldrb	r3, [r3, #20]
 800fc38:	2b01      	cmp	r3, #1
 800fc3a:	d105      	bne.n	800fc48 <tcp_input+0x25c>
 800fc3c:	4b0b      	ldr	r3, [pc, #44]	; (800fc6c <tcp_input+0x280>)
 800fc3e:	22fd      	movs	r2, #253	; 0xfd
 800fc40:	491c      	ldr	r1, [pc, #112]	; (800fcb4 <tcp_input+0x2c8>)
 800fc42:	480c      	ldr	r0, [pc, #48]	; (800fc74 <tcp_input+0x288>)
 800fc44:	f007 fac0 	bl	80171c8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	7a1b      	ldrb	r3, [r3, #8]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d033      	beq.n	800fcb8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fc50:	69fb      	ldr	r3, [r7, #28]
 800fc52:	7a1a      	ldrb	r2, [r3, #8]
 800fc54:	4b09      	ldr	r3, [pc, #36]	; (800fc7c <tcp_input+0x290>)
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d029      	beq.n	800fcb8 <tcp_input+0x2cc>
      prev = pcb;
 800fc64:	69fb      	ldr	r3, [r7, #28]
 800fc66:	61bb      	str	r3, [r7, #24]
      continue;
 800fc68:	e06b      	b.n	800fd42 <tcp_input+0x356>
 800fc6a:	bf00      	nop
 800fc6c:	080194b4 	.word	0x080194b4
 800fc70:	080194e8 	.word	0x080194e8
 800fc74:	08019500 	.word	0x08019500
 800fc78:	20008ff0 	.word	0x20008ff0
 800fc7c:	20005a58 	.word	0x20005a58
 800fc80:	20008ff4 	.word	0x20008ff4
 800fc84:	20008ff8 	.word	0x20008ff8
 800fc88:	20008ff6 	.word	0x20008ff6
 800fc8c:	08019528 	.word	0x08019528
 800fc90:	08019538 	.word	0x08019538
 800fc94:	08019544 	.word	0x08019544
 800fc98:	20009000 	.word	0x20009000
 800fc9c:	20009004 	.word	0x20009004
 800fca0:	2000900c 	.word	0x2000900c
 800fca4:	2000900a 	.word	0x2000900a
 800fca8:	20008fd4 	.word	0x20008fd4
 800fcac:	08019564 	.word	0x08019564
 800fcb0:	0801958c 	.word	0x0801958c
 800fcb4:	080195b8 	.word	0x080195b8
    }

    if (pcb->remote_port == tcphdr->src &&
 800fcb8:	69fb      	ldr	r3, [r7, #28]
 800fcba:	8b1a      	ldrh	r2, [r3, #24]
 800fcbc:	4b72      	ldr	r3, [pc, #456]	; (800fe88 <tcp_input+0x49c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	881b      	ldrh	r3, [r3, #0]
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d13a      	bne.n	800fd3e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	8ada      	ldrh	r2, [r3, #22]
 800fccc:	4b6e      	ldr	r3, [pc, #440]	; (800fe88 <tcp_input+0x49c>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	885b      	ldrh	r3, [r3, #2]
 800fcd2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fcd4:	429a      	cmp	r2, r3
 800fcd6:	d132      	bne.n	800fd3e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	685a      	ldr	r2, [r3, #4]
 800fcdc:	4b6b      	ldr	r3, [pc, #428]	; (800fe8c <tcp_input+0x4a0>)
 800fcde:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800fce0:	429a      	cmp	r2, r3
 800fce2:	d12c      	bne.n	800fd3e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	681a      	ldr	r2, [r3, #0]
 800fce8:	4b68      	ldr	r3, [pc, #416]	; (800fe8c <tcp_input+0x4a0>)
 800fcea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fcec:	429a      	cmp	r2, r3
 800fcee:	d126      	bne.n	800fd3e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fcf0:	69fb      	ldr	r3, [r7, #28]
 800fcf2:	68db      	ldr	r3, [r3, #12]
 800fcf4:	69fa      	ldr	r2, [r7, #28]
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d106      	bne.n	800fd08 <tcp_input+0x31c>
 800fcfa:	4b65      	ldr	r3, [pc, #404]	; (800fe90 <tcp_input+0x4a4>)
 800fcfc:	f240 120d 	movw	r2, #269	; 0x10d
 800fd00:	4964      	ldr	r1, [pc, #400]	; (800fe94 <tcp_input+0x4a8>)
 800fd02:	4865      	ldr	r0, [pc, #404]	; (800fe98 <tcp_input+0x4ac>)
 800fd04:	f007 fa60 	bl	80171c8 <iprintf>
      if (prev != NULL) {
 800fd08:	69bb      	ldr	r3, [r7, #24]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d00a      	beq.n	800fd24 <tcp_input+0x338>
        prev->next = pcb->next;
 800fd0e:	69fb      	ldr	r3, [r7, #28]
 800fd10:	68da      	ldr	r2, [r3, #12]
 800fd12:	69bb      	ldr	r3, [r7, #24]
 800fd14:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fd16:	4b61      	ldr	r3, [pc, #388]	; (800fe9c <tcp_input+0x4b0>)
 800fd18:	681a      	ldr	r2, [r3, #0]
 800fd1a:	69fb      	ldr	r3, [r7, #28]
 800fd1c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fd1e:	4a5f      	ldr	r2, [pc, #380]	; (800fe9c <tcp_input+0x4b0>)
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fd24:	69fb      	ldr	r3, [r7, #28]
 800fd26:	68db      	ldr	r3, [r3, #12]
 800fd28:	69fa      	ldr	r2, [r7, #28]
 800fd2a:	429a      	cmp	r2, r3
 800fd2c:	d111      	bne.n	800fd52 <tcp_input+0x366>
 800fd2e:	4b58      	ldr	r3, [pc, #352]	; (800fe90 <tcp_input+0x4a4>)
 800fd30:	f240 1215 	movw	r2, #277	; 0x115
 800fd34:	495a      	ldr	r1, [pc, #360]	; (800fea0 <tcp_input+0x4b4>)
 800fd36:	4858      	ldr	r0, [pc, #352]	; (800fe98 <tcp_input+0x4ac>)
 800fd38:	f007 fa46 	bl	80171c8 <iprintf>
      break;
 800fd3c:	e009      	b.n	800fd52 <tcp_input+0x366>
    }
    prev = pcb;
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd42:	69fb      	ldr	r3, [r7, #28]
 800fd44:	68db      	ldr	r3, [r3, #12]
 800fd46:	61fb      	str	r3, [r7, #28]
 800fd48:	69fb      	ldr	r3, [r7, #28]
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	f47f af5e 	bne.w	800fc0c <tcp_input+0x220>
 800fd50:	e000      	b.n	800fd54 <tcp_input+0x368>
      break;
 800fd52:	bf00      	nop
  }

  if (pcb == NULL) {
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	f040 80aa 	bne.w	800feb0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fd5c:	4b51      	ldr	r3, [pc, #324]	; (800fea4 <tcp_input+0x4b8>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	61fb      	str	r3, [r7, #28]
 800fd62:	e03f      	b.n	800fde4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	7d1b      	ldrb	r3, [r3, #20]
 800fd68:	2b0a      	cmp	r3, #10
 800fd6a:	d006      	beq.n	800fd7a <tcp_input+0x38e>
 800fd6c:	4b48      	ldr	r3, [pc, #288]	; (800fe90 <tcp_input+0x4a4>)
 800fd6e:	f240 121f 	movw	r2, #287	; 0x11f
 800fd72:	494d      	ldr	r1, [pc, #308]	; (800fea8 <tcp_input+0x4bc>)
 800fd74:	4848      	ldr	r0, [pc, #288]	; (800fe98 <tcp_input+0x4ac>)
 800fd76:	f007 fa27 	bl	80171c8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd7a:	69fb      	ldr	r3, [r7, #28]
 800fd7c:	7a1b      	ldrb	r3, [r3, #8]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d009      	beq.n	800fd96 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fd82:	69fb      	ldr	r3, [r7, #28]
 800fd84:	7a1a      	ldrb	r2, [r3, #8]
 800fd86:	4b41      	ldr	r3, [pc, #260]	; (800fe8c <tcp_input+0x4a0>)
 800fd88:	685b      	ldr	r3, [r3, #4]
 800fd8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fd8e:	3301      	adds	r3, #1
 800fd90:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d122      	bne.n	800fddc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	8b1a      	ldrh	r2, [r3, #24]
 800fd9a:	4b3b      	ldr	r3, [pc, #236]	; (800fe88 <tcp_input+0x49c>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	881b      	ldrh	r3, [r3, #0]
 800fda0:	b29b      	uxth	r3, r3
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d11b      	bne.n	800fdde <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	8ada      	ldrh	r2, [r3, #22]
 800fdaa:	4b37      	ldr	r3, [pc, #220]	; (800fe88 <tcp_input+0x49c>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	885b      	ldrh	r3, [r3, #2]
 800fdb0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d113      	bne.n	800fdde <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	685a      	ldr	r2, [r3, #4]
 800fdba:	4b34      	ldr	r3, [pc, #208]	; (800fe8c <tcp_input+0x4a0>)
 800fdbc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d10d      	bne.n	800fdde <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	681a      	ldr	r2, [r3, #0]
 800fdc6:	4b31      	ldr	r3, [pc, #196]	; (800fe8c <tcp_input+0x4a0>)
 800fdc8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d107      	bne.n	800fdde <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fdce:	69f8      	ldr	r0, [r7, #28]
 800fdd0:	f000 fb56 	bl	8010480 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	f7fd ff3f 	bl	800dc58 <pbuf_free>
        return;
 800fdda:	e1fd      	b.n	80101d8 <tcp_input+0x7ec>
        continue;
 800fddc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fdde:	69fb      	ldr	r3, [r7, #28]
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	61fb      	str	r3, [r7, #28]
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d1bc      	bne.n	800fd64 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fdea:	2300      	movs	r3, #0
 800fdec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fdee:	4b2f      	ldr	r3, [pc, #188]	; (800feac <tcp_input+0x4c0>)
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	617b      	str	r3, [r7, #20]
 800fdf4:	e02a      	b.n	800fe4c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	7a1b      	ldrb	r3, [r3, #8]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d00c      	beq.n	800fe18 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fdfe:	697b      	ldr	r3, [r7, #20]
 800fe00:	7a1a      	ldrb	r2, [r3, #8]
 800fe02:	4b22      	ldr	r3, [pc, #136]	; (800fe8c <tcp_input+0x4a0>)
 800fe04:	685b      	ldr	r3, [r3, #4]
 800fe06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fe0e:	429a      	cmp	r2, r3
 800fe10:	d002      	beq.n	800fe18 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	61bb      	str	r3, [r7, #24]
        continue;
 800fe16:	e016      	b.n	800fe46 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	8ada      	ldrh	r2, [r3, #22]
 800fe1c:	4b1a      	ldr	r3, [pc, #104]	; (800fe88 <tcp_input+0x49c>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	885b      	ldrh	r3, [r3, #2]
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d10c      	bne.n	800fe42 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	4b17      	ldr	r3, [pc, #92]	; (800fe8c <tcp_input+0x4a0>)
 800fe2e:	695b      	ldr	r3, [r3, #20]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d00f      	beq.n	800fe54 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d00d      	beq.n	800fe56 <tcp_input+0x46a>
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d009      	beq.n	800fe56 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	617b      	str	r3, [r7, #20]
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d1d1      	bne.n	800fdf6 <tcp_input+0x40a>
 800fe52:	e000      	b.n	800fe56 <tcp_input+0x46a>
            break;
 800fe54:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d029      	beq.n	800feb0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fe5c:	69bb      	ldr	r3, [r7, #24]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d00a      	beq.n	800fe78 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	68da      	ldr	r2, [r3, #12]
 800fe66:	69bb      	ldr	r3, [r7, #24]
 800fe68:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fe6a:	4b10      	ldr	r3, [pc, #64]	; (800feac <tcp_input+0x4c0>)
 800fe6c:	681a      	ldr	r2, [r3, #0]
 800fe6e:	697b      	ldr	r3, [r7, #20]
 800fe70:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fe72:	4a0e      	ldr	r2, [pc, #56]	; (800feac <tcp_input+0x4c0>)
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fe78:	6978      	ldr	r0, [r7, #20]
 800fe7a:	f000 fa03 	bl	8010284 <tcp_listen_input>
      }
      pbuf_free(p);
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f7fd feea 	bl	800dc58 <pbuf_free>
      return;
 800fe84:	e1a8      	b.n	80101d8 <tcp_input+0x7ec>
 800fe86:	bf00      	nop
 800fe88:	20008ff0 	.word	0x20008ff0
 800fe8c:	20005a58 	.word	0x20005a58
 800fe90:	080194b4 	.word	0x080194b4
 800fe94:	080195e0 	.word	0x080195e0
 800fe98:	08019500 	.word	0x08019500
 800fe9c:	20008fd4 	.word	0x20008fd4
 800fea0:	0801960c 	.word	0x0801960c
 800fea4:	20008fd8 	.word	0x20008fd8
 800fea8:	08019638 	.word	0x08019638
 800feac:	20008fd0 	.word	0x20008fd0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800feb0:	69fb      	ldr	r3, [r7, #28]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	f000 8158 	beq.w	8010168 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800feb8:	4b95      	ldr	r3, [pc, #596]	; (8010110 <tcp_input+0x724>)
 800feba:	2200      	movs	r2, #0
 800febc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	891a      	ldrh	r2, [r3, #8]
 800fec2:	4b93      	ldr	r3, [pc, #588]	; (8010110 <tcp_input+0x724>)
 800fec4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fec6:	4a92      	ldr	r2, [pc, #584]	; (8010110 <tcp_input+0x724>)
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fecc:	4b91      	ldr	r3, [pc, #580]	; (8010114 <tcp_input+0x728>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a8f      	ldr	r2, [pc, #572]	; (8010110 <tcp_input+0x724>)
 800fed2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fed4:	4b90      	ldr	r3, [pc, #576]	; (8010118 <tcp_input+0x72c>)
 800fed6:	2200      	movs	r2, #0
 800fed8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800feda:	4b90      	ldr	r3, [pc, #576]	; (801011c <tcp_input+0x730>)
 800fedc:	2200      	movs	r2, #0
 800fede:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fee0:	4b8f      	ldr	r3, [pc, #572]	; (8010120 <tcp_input+0x734>)
 800fee2:	2200      	movs	r2, #0
 800fee4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fee6:	4b8f      	ldr	r3, [pc, #572]	; (8010124 <tcp_input+0x738>)
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	f003 0308 	and.w	r3, r3, #8
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d006      	beq.n	800ff00 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	7b5b      	ldrb	r3, [r3, #13]
 800fef6:	f043 0301 	orr.w	r3, r3, #1
 800fefa:	b2da      	uxtb	r2, r3
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d017      	beq.n	800ff38 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ff08:	69f8      	ldr	r0, [r7, #28]
 800ff0a:	f7ff f929 	bl	800f160 <tcp_process_refused_data>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	f113 0f0d 	cmn.w	r3, #13
 800ff14:	d007      	beq.n	800ff26 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff16:	69fb      	ldr	r3, [r7, #28]
 800ff18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d00c      	beq.n	800ff38 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ff1e:	4b82      	ldr	r3, [pc, #520]	; (8010128 <tcp_input+0x73c>)
 800ff20:	881b      	ldrh	r3, [r3, #0]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d008      	beq.n	800ff38 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ff26:	69fb      	ldr	r3, [r7, #28]
 800ff28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	f040 80e3 	bne.w	80100f6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ff30:	69f8      	ldr	r0, [r7, #28]
 800ff32:	f003 f9ad 	bl	8013290 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ff36:	e0de      	b.n	80100f6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800ff38:	4a7c      	ldr	r2, [pc, #496]	; (801012c <tcp_input+0x740>)
 800ff3a:	69fb      	ldr	r3, [r7, #28]
 800ff3c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ff3e:	69f8      	ldr	r0, [r7, #28]
 800ff40:	f000 fb18 	bl	8010574 <tcp_process>
 800ff44:	4603      	mov	r3, r0
 800ff46:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ff48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff4c:	f113 0f0d 	cmn.w	r3, #13
 800ff50:	f000 80d3 	beq.w	80100fa <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ff54:	4b71      	ldr	r3, [pc, #452]	; (801011c <tcp_input+0x730>)
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	f003 0308 	and.w	r3, r3, #8
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d015      	beq.n	800ff8c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d008      	beq.n	800ff7c <tcp_input+0x590>
 800ff6a:	69fb      	ldr	r3, [r7, #28]
 800ff6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff70:	69fa      	ldr	r2, [r7, #28]
 800ff72:	6912      	ldr	r2, [r2, #16]
 800ff74:	f06f 010d 	mvn.w	r1, #13
 800ff78:	4610      	mov	r0, r2
 800ff7a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ff7c:	69f9      	ldr	r1, [r7, #28]
 800ff7e:	486c      	ldr	r0, [pc, #432]	; (8010130 <tcp_input+0x744>)
 800ff80:	f7ff fbbc 	bl	800f6fc <tcp_pcb_remove>
        tcp_free(pcb);
 800ff84:	69f8      	ldr	r0, [r7, #28]
 800ff86:	f7fe f9a9 	bl	800e2dc <tcp_free>
 800ff8a:	e0da      	b.n	8010142 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ff90:	4b63      	ldr	r3, [pc, #396]	; (8010120 <tcp_input+0x734>)
 800ff92:	881b      	ldrh	r3, [r3, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d01d      	beq.n	800ffd4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ff98:	4b61      	ldr	r3, [pc, #388]	; (8010120 <tcp_input+0x734>)
 800ff9a:	881b      	ldrh	r3, [r3, #0]
 800ff9c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ff9e:	69fb      	ldr	r3, [r7, #28]
 800ffa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d00a      	beq.n	800ffbe <tcp_input+0x5d2>
 800ffa8:	69fb      	ldr	r3, [r7, #28]
 800ffaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ffae:	69fa      	ldr	r2, [r7, #28]
 800ffb0:	6910      	ldr	r0, [r2, #16]
 800ffb2:	89fa      	ldrh	r2, [r7, #14]
 800ffb4:	69f9      	ldr	r1, [r7, #28]
 800ffb6:	4798      	blx	r3
 800ffb8:	4603      	mov	r3, r0
 800ffba:	74fb      	strb	r3, [r7, #19]
 800ffbc:	e001      	b.n	800ffc2 <tcp_input+0x5d6>
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ffc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffc6:	f113 0f0d 	cmn.w	r3, #13
 800ffca:	f000 8098 	beq.w	80100fe <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ffce:	4b54      	ldr	r3, [pc, #336]	; (8010120 <tcp_input+0x734>)
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ffd4:	69f8      	ldr	r0, [r7, #28]
 800ffd6:	f000 f915 	bl	8010204 <tcp_input_delayed_close>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	f040 8090 	bne.w	8010102 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ffe2:	4b4d      	ldr	r3, [pc, #308]	; (8010118 <tcp_input+0x72c>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d041      	beq.n	801006e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ffea:	69fb      	ldr	r3, [r7, #28]
 800ffec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d006      	beq.n	8010000 <tcp_input+0x614>
 800fff2:	4b50      	ldr	r3, [pc, #320]	; (8010134 <tcp_input+0x748>)
 800fff4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fff8:	494f      	ldr	r1, [pc, #316]	; (8010138 <tcp_input+0x74c>)
 800fffa:	4850      	ldr	r0, [pc, #320]	; (801013c <tcp_input+0x750>)
 800fffc:	f007 f8e4 	bl	80171c8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	8b5b      	ldrh	r3, [r3, #26]
 8010004:	f003 0310 	and.w	r3, r3, #16
 8010008:	2b00      	cmp	r3, #0
 801000a:	d008      	beq.n	801001e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801000c:	4b42      	ldr	r3, [pc, #264]	; (8010118 <tcp_input+0x72c>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4618      	mov	r0, r3
 8010012:	f7fd fe21 	bl	800dc58 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010016:	69f8      	ldr	r0, [r7, #28]
 8010018:	f7fe fc48 	bl	800e8ac <tcp_abort>
            goto aborted;
 801001c:	e091      	b.n	8010142 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801001e:	69fb      	ldr	r3, [r7, #28]
 8010020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010024:	2b00      	cmp	r3, #0
 8010026:	d00c      	beq.n	8010042 <tcp_input+0x656>
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	6918      	ldr	r0, [r3, #16]
 8010032:	4b39      	ldr	r3, [pc, #228]	; (8010118 <tcp_input+0x72c>)
 8010034:	681a      	ldr	r2, [r3, #0]
 8010036:	2300      	movs	r3, #0
 8010038:	69f9      	ldr	r1, [r7, #28]
 801003a:	47a0      	blx	r4
 801003c:	4603      	mov	r3, r0
 801003e:	74fb      	strb	r3, [r7, #19]
 8010040:	e008      	b.n	8010054 <tcp_input+0x668>
 8010042:	4b35      	ldr	r3, [pc, #212]	; (8010118 <tcp_input+0x72c>)
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	2300      	movs	r3, #0
 8010048:	69f9      	ldr	r1, [r7, #28]
 801004a:	2000      	movs	r0, #0
 801004c:	f7ff f95e 	bl	800f30c <tcp_recv_null>
 8010050:	4603      	mov	r3, r0
 8010052:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010054:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010058:	f113 0f0d 	cmn.w	r3, #13
 801005c:	d053      	beq.n	8010106 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801005e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d003      	beq.n	801006e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010066:	4b2c      	ldr	r3, [pc, #176]	; (8010118 <tcp_input+0x72c>)
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	69fb      	ldr	r3, [r7, #28]
 801006c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801006e:	4b2b      	ldr	r3, [pc, #172]	; (801011c <tcp_input+0x730>)
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	f003 0320 	and.w	r3, r3, #32
 8010076:	2b00      	cmp	r3, #0
 8010078:	d030      	beq.n	80100dc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801007e:	2b00      	cmp	r3, #0
 8010080:	d009      	beq.n	8010096 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8010082:	69fb      	ldr	r3, [r7, #28]
 8010084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010086:	7b5a      	ldrb	r2, [r3, #13]
 8010088:	69fb      	ldr	r3, [r7, #28]
 801008a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801008c:	f042 0220 	orr.w	r2, r2, #32
 8010090:	b2d2      	uxtb	r2, r2
 8010092:	735a      	strb	r2, [r3, #13]
 8010094:	e022      	b.n	80100dc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801009a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801009e:	d005      	beq.n	80100ac <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80100a4:	3301      	adds	r3, #1
 80100a6:	b29a      	uxth	r2, r3
 80100a8:	69fb      	ldr	r3, [r7, #28]
 80100aa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d00b      	beq.n	80100ce <tcp_input+0x6e2>
 80100b6:	69fb      	ldr	r3, [r7, #28]
 80100b8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80100bc:	69fb      	ldr	r3, [r7, #28]
 80100be:	6918      	ldr	r0, [r3, #16]
 80100c0:	2300      	movs	r3, #0
 80100c2:	2200      	movs	r2, #0
 80100c4:	69f9      	ldr	r1, [r7, #28]
 80100c6:	47a0      	blx	r4
 80100c8:	4603      	mov	r3, r0
 80100ca:	74fb      	strb	r3, [r7, #19]
 80100cc:	e001      	b.n	80100d2 <tcp_input+0x6e6>
 80100ce:	2300      	movs	r3, #0
 80100d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80100d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80100d6:	f113 0f0d 	cmn.w	r3, #13
 80100da:	d016      	beq.n	801010a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80100dc:	4b13      	ldr	r3, [pc, #76]	; (801012c <tcp_input+0x740>)
 80100de:	2200      	movs	r2, #0
 80100e0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80100e2:	69f8      	ldr	r0, [r7, #28]
 80100e4:	f000 f88e 	bl	8010204 <tcp_input_delayed_close>
 80100e8:	4603      	mov	r3, r0
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d128      	bne.n	8010140 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80100ee:	69f8      	ldr	r0, [r7, #28]
 80100f0:	f002 fac8 	bl	8012684 <tcp_output>
 80100f4:	e025      	b.n	8010142 <tcp_input+0x756>
        goto aborted;
 80100f6:	bf00      	nop
 80100f8:	e023      	b.n	8010142 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80100fa:	bf00      	nop
 80100fc:	e021      	b.n	8010142 <tcp_input+0x756>
              goto aborted;
 80100fe:	bf00      	nop
 8010100:	e01f      	b.n	8010142 <tcp_input+0x756>
          goto aborted;
 8010102:	bf00      	nop
 8010104:	e01d      	b.n	8010142 <tcp_input+0x756>
            goto aborted;
 8010106:	bf00      	nop
 8010108:	e01b      	b.n	8010142 <tcp_input+0x756>
              goto aborted;
 801010a:	bf00      	nop
 801010c:	e019      	b.n	8010142 <tcp_input+0x756>
 801010e:	bf00      	nop
 8010110:	20008fe0 	.word	0x20008fe0
 8010114:	20008ff0 	.word	0x20008ff0
 8010118:	20009010 	.word	0x20009010
 801011c:	2000900d 	.word	0x2000900d
 8010120:	20009008 	.word	0x20009008
 8010124:	2000900c 	.word	0x2000900c
 8010128:	2000900a 	.word	0x2000900a
 801012c:	20009014 	.word	0x20009014
 8010130:	20008fd4 	.word	0x20008fd4
 8010134:	080194b4 	.word	0x080194b4
 8010138:	08019668 	.word	0x08019668
 801013c:	08019500 	.word	0x08019500
          goto aborted;
 8010140:	bf00      	nop
    tcp_input_pcb = NULL;
 8010142:	4b27      	ldr	r3, [pc, #156]	; (80101e0 <tcp_input+0x7f4>)
 8010144:	2200      	movs	r2, #0
 8010146:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010148:	4b26      	ldr	r3, [pc, #152]	; (80101e4 <tcp_input+0x7f8>)
 801014a:	2200      	movs	r2, #0
 801014c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801014e:	4b26      	ldr	r3, [pc, #152]	; (80101e8 <tcp_input+0x7fc>)
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d03f      	beq.n	80101d6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010156:	4b24      	ldr	r3, [pc, #144]	; (80101e8 <tcp_input+0x7fc>)
 8010158:	685b      	ldr	r3, [r3, #4]
 801015a:	4618      	mov	r0, r3
 801015c:	f7fd fd7c 	bl	800dc58 <pbuf_free>
      inseg.p = NULL;
 8010160:	4b21      	ldr	r3, [pc, #132]	; (80101e8 <tcp_input+0x7fc>)
 8010162:	2200      	movs	r2, #0
 8010164:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010166:	e036      	b.n	80101d6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010168:	4b20      	ldr	r3, [pc, #128]	; (80101ec <tcp_input+0x800>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	899b      	ldrh	r3, [r3, #12]
 801016e:	b29b      	uxth	r3, r3
 8010170:	4618      	mov	r0, r3
 8010172:	f7fc fa13 	bl	800c59c <lwip_htons>
 8010176:	4603      	mov	r3, r0
 8010178:	b2db      	uxtb	r3, r3
 801017a:	f003 0304 	and.w	r3, r3, #4
 801017e:	2b00      	cmp	r3, #0
 8010180:	d118      	bne.n	80101b4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010182:	4b1b      	ldr	r3, [pc, #108]	; (80101f0 <tcp_input+0x804>)
 8010184:	6819      	ldr	r1, [r3, #0]
 8010186:	4b1b      	ldr	r3, [pc, #108]	; (80101f4 <tcp_input+0x808>)
 8010188:	881b      	ldrh	r3, [r3, #0]
 801018a:	461a      	mov	r2, r3
 801018c:	4b1a      	ldr	r3, [pc, #104]	; (80101f8 <tcp_input+0x80c>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010192:	4b16      	ldr	r3, [pc, #88]	; (80101ec <tcp_input+0x800>)
 8010194:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010196:	885b      	ldrh	r3, [r3, #2]
 8010198:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801019a:	4a14      	ldr	r2, [pc, #80]	; (80101ec <tcp_input+0x800>)
 801019c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801019e:	8812      	ldrh	r2, [r2, #0]
 80101a0:	b292      	uxth	r2, r2
 80101a2:	9202      	str	r2, [sp, #8]
 80101a4:	9301      	str	r3, [sp, #4]
 80101a6:	4b15      	ldr	r3, [pc, #84]	; (80101fc <tcp_input+0x810>)
 80101a8:	9300      	str	r3, [sp, #0]
 80101aa:	4b15      	ldr	r3, [pc, #84]	; (8010200 <tcp_input+0x814>)
 80101ac:	4602      	mov	r2, r0
 80101ae:	2000      	movs	r0, #0
 80101b0:	f003 f81c 	bl	80131ec <tcp_rst>
    pbuf_free(p);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f7fd fd4f 	bl	800dc58 <pbuf_free>
  return;
 80101ba:	e00c      	b.n	80101d6 <tcp_input+0x7ea>
    goto dropped;
 80101bc:	bf00      	nop
 80101be:	e006      	b.n	80101ce <tcp_input+0x7e2>
    goto dropped;
 80101c0:	bf00      	nop
 80101c2:	e004      	b.n	80101ce <tcp_input+0x7e2>
    goto dropped;
 80101c4:	bf00      	nop
 80101c6:	e002      	b.n	80101ce <tcp_input+0x7e2>
      goto dropped;
 80101c8:	bf00      	nop
 80101ca:	e000      	b.n	80101ce <tcp_input+0x7e2>
      goto dropped;
 80101cc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f7fd fd42 	bl	800dc58 <pbuf_free>
 80101d4:	e000      	b.n	80101d8 <tcp_input+0x7ec>
  return;
 80101d6:	bf00      	nop
}
 80101d8:	3724      	adds	r7, #36	; 0x24
 80101da:	46bd      	mov	sp, r7
 80101dc:	bd90      	pop	{r4, r7, pc}
 80101de:	bf00      	nop
 80101e0:	20009014 	.word	0x20009014
 80101e4:	20009010 	.word	0x20009010
 80101e8:	20008fe0 	.word	0x20008fe0
 80101ec:	20008ff0 	.word	0x20008ff0
 80101f0:	20009004 	.word	0x20009004
 80101f4:	2000900a 	.word	0x2000900a
 80101f8:	20009000 	.word	0x20009000
 80101fc:	20005a68 	.word	0x20005a68
 8010200:	20005a6c 	.word	0x20005a6c

08010204 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d106      	bne.n	8010220 <tcp_input_delayed_close+0x1c>
 8010212:	4b17      	ldr	r3, [pc, #92]	; (8010270 <tcp_input_delayed_close+0x6c>)
 8010214:	f240 225a 	movw	r2, #602	; 0x25a
 8010218:	4916      	ldr	r1, [pc, #88]	; (8010274 <tcp_input_delayed_close+0x70>)
 801021a:	4817      	ldr	r0, [pc, #92]	; (8010278 <tcp_input_delayed_close+0x74>)
 801021c:	f006 ffd4 	bl	80171c8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010220:	4b16      	ldr	r3, [pc, #88]	; (801027c <tcp_input_delayed_close+0x78>)
 8010222:	781b      	ldrb	r3, [r3, #0]
 8010224:	f003 0310 	and.w	r3, r3, #16
 8010228:	2b00      	cmp	r3, #0
 801022a:	d01c      	beq.n	8010266 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	8b5b      	ldrh	r3, [r3, #26]
 8010230:	f003 0310 	and.w	r3, r3, #16
 8010234:	2b00      	cmp	r3, #0
 8010236:	d10d      	bne.n	8010254 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801023e:	2b00      	cmp	r3, #0
 8010240:	d008      	beq.n	8010254 <tcp_input_delayed_close+0x50>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	6912      	ldr	r2, [r2, #16]
 801024c:	f06f 010e 	mvn.w	r1, #14
 8010250:	4610      	mov	r0, r2
 8010252:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010254:	6879      	ldr	r1, [r7, #4]
 8010256:	480a      	ldr	r0, [pc, #40]	; (8010280 <tcp_input_delayed_close+0x7c>)
 8010258:	f7ff fa50 	bl	800f6fc <tcp_pcb_remove>
    tcp_free(pcb);
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f7fe f83d 	bl	800e2dc <tcp_free>
    return 1;
 8010262:	2301      	movs	r3, #1
 8010264:	e000      	b.n	8010268 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010266:	2300      	movs	r3, #0
}
 8010268:	4618      	mov	r0, r3
 801026a:	3708      	adds	r7, #8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	080194b4 	.word	0x080194b4
 8010274:	08019684 	.word	0x08019684
 8010278:	08019500 	.word	0x08019500
 801027c:	2000900d 	.word	0x2000900d
 8010280:	20008fd4 	.word	0x20008fd4

08010284 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010284:	b590      	push	{r4, r7, lr}
 8010286:	b08b      	sub	sp, #44	; 0x2c
 8010288:	af04      	add	r7, sp, #16
 801028a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801028c:	4b6f      	ldr	r3, [pc, #444]	; (801044c <tcp_listen_input+0x1c8>)
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	f003 0304 	and.w	r3, r3, #4
 8010294:	2b00      	cmp	r3, #0
 8010296:	f040 80d2 	bne.w	801043e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d106      	bne.n	80102ae <tcp_listen_input+0x2a>
 80102a0:	4b6b      	ldr	r3, [pc, #428]	; (8010450 <tcp_listen_input+0x1cc>)
 80102a2:	f240 2281 	movw	r2, #641	; 0x281
 80102a6:	496b      	ldr	r1, [pc, #428]	; (8010454 <tcp_listen_input+0x1d0>)
 80102a8:	486b      	ldr	r0, [pc, #428]	; (8010458 <tcp_listen_input+0x1d4>)
 80102aa:	f006 ff8d 	bl	80171c8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80102ae:	4b67      	ldr	r3, [pc, #412]	; (801044c <tcp_listen_input+0x1c8>)
 80102b0:	781b      	ldrb	r3, [r3, #0]
 80102b2:	f003 0310 	and.w	r3, r3, #16
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d019      	beq.n	80102ee <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102ba:	4b68      	ldr	r3, [pc, #416]	; (801045c <tcp_listen_input+0x1d8>)
 80102bc:	6819      	ldr	r1, [r3, #0]
 80102be:	4b68      	ldr	r3, [pc, #416]	; (8010460 <tcp_listen_input+0x1dc>)
 80102c0:	881b      	ldrh	r3, [r3, #0]
 80102c2:	461a      	mov	r2, r3
 80102c4:	4b67      	ldr	r3, [pc, #412]	; (8010464 <tcp_listen_input+0x1e0>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102ca:	4b67      	ldr	r3, [pc, #412]	; (8010468 <tcp_listen_input+0x1e4>)
 80102cc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102ce:	885b      	ldrh	r3, [r3, #2]
 80102d0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102d2:	4a65      	ldr	r2, [pc, #404]	; (8010468 <tcp_listen_input+0x1e4>)
 80102d4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102d6:	8812      	ldrh	r2, [r2, #0]
 80102d8:	b292      	uxth	r2, r2
 80102da:	9202      	str	r2, [sp, #8]
 80102dc:	9301      	str	r3, [sp, #4]
 80102de:	4b63      	ldr	r3, [pc, #396]	; (801046c <tcp_listen_input+0x1e8>)
 80102e0:	9300      	str	r3, [sp, #0]
 80102e2:	4b63      	ldr	r3, [pc, #396]	; (8010470 <tcp_listen_input+0x1ec>)
 80102e4:	4602      	mov	r2, r0
 80102e6:	6878      	ldr	r0, [r7, #4]
 80102e8:	f002 ff80 	bl	80131ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80102ec:	e0a9      	b.n	8010442 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80102ee:	4b57      	ldr	r3, [pc, #348]	; (801044c <tcp_listen_input+0x1c8>)
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	f003 0302 	and.w	r3, r3, #2
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	f000 80a3 	beq.w	8010442 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	7d5b      	ldrb	r3, [r3, #21]
 8010300:	4618      	mov	r0, r3
 8010302:	f7ff f927 	bl	800f554 <tcp_alloc>
 8010306:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010308:	697b      	ldr	r3, [r7, #20]
 801030a:	2b00      	cmp	r3, #0
 801030c:	d111      	bne.n	8010332 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	699b      	ldr	r3, [r3, #24]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d00a      	beq.n	801032c <tcp_listen_input+0xa8>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	699b      	ldr	r3, [r3, #24]
 801031a:	687a      	ldr	r2, [r7, #4]
 801031c:	6910      	ldr	r0, [r2, #16]
 801031e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010322:	2100      	movs	r1, #0
 8010324:	4798      	blx	r3
 8010326:	4603      	mov	r3, r0
 8010328:	73bb      	strb	r3, [r7, #14]
      return;
 801032a:	e08b      	b.n	8010444 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801032c:	23f0      	movs	r3, #240	; 0xf0
 801032e:	73bb      	strb	r3, [r7, #14]
      return;
 8010330:	e088      	b.n	8010444 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010332:	4b50      	ldr	r3, [pc, #320]	; (8010474 <tcp_listen_input+0x1f0>)
 8010334:	695a      	ldr	r2, [r3, #20]
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801033a:	4b4e      	ldr	r3, [pc, #312]	; (8010474 <tcp_listen_input+0x1f0>)
 801033c:	691a      	ldr	r2, [r3, #16]
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	8ada      	ldrh	r2, [r3, #22]
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801034a:	4b47      	ldr	r3, [pc, #284]	; (8010468 <tcp_listen_input+0x1e4>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	881b      	ldrh	r3, [r3, #0]
 8010350:	b29a      	uxth	r2, r3
 8010352:	697b      	ldr	r3, [r7, #20]
 8010354:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	2203      	movs	r2, #3
 801035a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801035c:	4b41      	ldr	r3, [pc, #260]	; (8010464 <tcp_listen_input+0x1e0>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	1c5a      	adds	r2, r3, #1
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801036e:	6978      	ldr	r0, [r7, #20]
 8010370:	f7ff fa58 	bl	800f824 <tcp_next_iss>
 8010374:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010376:	697b      	ldr	r3, [r7, #20]
 8010378:	693a      	ldr	r2, [r7, #16]
 801037a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	693a      	ldr	r2, [r7, #16]
 8010380:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010382:	697b      	ldr	r3, [r7, #20]
 8010384:	693a      	ldr	r2, [r7, #16]
 8010386:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	693a      	ldr	r2, [r7, #16]
 801038c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801038e:	4b35      	ldr	r3, [pc, #212]	; (8010464 <tcp_listen_input+0x1e0>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	1e5a      	subs	r2, r3, #1
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	691a      	ldr	r2, [r3, #16]
 801039c:	697b      	ldr	r3, [r7, #20]
 801039e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	7a5b      	ldrb	r3, [r3, #9]
 80103aa:	f003 030c 	and.w	r3, r3, #12
 80103ae:	b2da      	uxtb	r2, r3
 80103b0:	697b      	ldr	r3, [r7, #20]
 80103b2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	7a1a      	ldrb	r2, [r3, #8]
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80103bc:	4b2e      	ldr	r3, [pc, #184]	; (8010478 <tcp_listen_input+0x1f4>)
 80103be:	681a      	ldr	r2, [r3, #0]
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	60da      	str	r2, [r3, #12]
 80103c4:	4a2c      	ldr	r2, [pc, #176]	; (8010478 <tcp_listen_input+0x1f4>)
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	6013      	str	r3, [r2, #0]
 80103ca:	f003 f8d1 	bl	8013570 <tcp_timer_needed>
 80103ce:	4b2b      	ldr	r3, [pc, #172]	; (801047c <tcp_listen_input+0x1f8>)
 80103d0:	2201      	movs	r2, #1
 80103d2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80103d4:	6978      	ldr	r0, [r7, #20]
 80103d6:	f001 fd8f 	bl	8011ef8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80103da:	4b23      	ldr	r3, [pc, #140]	; (8010468 <tcp_listen_input+0x1e4>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	89db      	ldrh	r3, [r3, #14]
 80103e0:	b29a      	uxth	r2, r3
 80103e2:	697b      	ldr	r3, [r7, #20]
 80103e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	3304      	adds	r3, #4
 80103fc:	4618      	mov	r0, r3
 80103fe:	f005 f827 	bl	8015450 <ip4_route>
 8010402:	4601      	mov	r1, r0
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	3304      	adds	r3, #4
 8010408:	461a      	mov	r2, r3
 801040a:	4620      	mov	r0, r4
 801040c:	f7ff fa30 	bl	800f870 <tcp_eff_send_mss_netif>
 8010410:	4603      	mov	r3, r0
 8010412:	461a      	mov	r2, r3
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010418:	2112      	movs	r1, #18
 801041a:	6978      	ldr	r0, [r7, #20]
 801041c:	f002 f844 	bl	80124a8 <tcp_enqueue_flags>
 8010420:	4603      	mov	r3, r0
 8010422:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d004      	beq.n	8010436 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801042c:	2100      	movs	r1, #0
 801042e:	6978      	ldr	r0, [r7, #20]
 8010430:	f7fe f97e 	bl	800e730 <tcp_abandon>
      return;
 8010434:	e006      	b.n	8010444 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010436:	6978      	ldr	r0, [r7, #20]
 8010438:	f002 f924 	bl	8012684 <tcp_output>
  return;
 801043c:	e001      	b.n	8010442 <tcp_listen_input+0x1be>
    return;
 801043e:	bf00      	nop
 8010440:	e000      	b.n	8010444 <tcp_listen_input+0x1c0>
  return;
 8010442:	bf00      	nop
}
 8010444:	371c      	adds	r7, #28
 8010446:	46bd      	mov	sp, r7
 8010448:	bd90      	pop	{r4, r7, pc}
 801044a:	bf00      	nop
 801044c:	2000900c 	.word	0x2000900c
 8010450:	080194b4 	.word	0x080194b4
 8010454:	080196ac 	.word	0x080196ac
 8010458:	08019500 	.word	0x08019500
 801045c:	20009004 	.word	0x20009004
 8010460:	2000900a 	.word	0x2000900a
 8010464:	20009000 	.word	0x20009000
 8010468:	20008ff0 	.word	0x20008ff0
 801046c:	20005a68 	.word	0x20005a68
 8010470:	20005a6c 	.word	0x20005a6c
 8010474:	20005a58 	.word	0x20005a58
 8010478:	20008fd4 	.word	0x20008fd4
 801047c:	20008fdc 	.word	0x20008fdc

08010480 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b086      	sub	sp, #24
 8010484:	af04      	add	r7, sp, #16
 8010486:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010488:	4b2f      	ldr	r3, [pc, #188]	; (8010548 <tcp_timewait_input+0xc8>)
 801048a:	781b      	ldrb	r3, [r3, #0]
 801048c:	f003 0304 	and.w	r3, r3, #4
 8010490:	2b00      	cmp	r3, #0
 8010492:	d153      	bne.n	801053c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d106      	bne.n	80104a8 <tcp_timewait_input+0x28>
 801049a:	4b2c      	ldr	r3, [pc, #176]	; (801054c <tcp_timewait_input+0xcc>)
 801049c:	f240 22ee 	movw	r2, #750	; 0x2ee
 80104a0:	492b      	ldr	r1, [pc, #172]	; (8010550 <tcp_timewait_input+0xd0>)
 80104a2:	482c      	ldr	r0, [pc, #176]	; (8010554 <tcp_timewait_input+0xd4>)
 80104a4:	f006 fe90 	bl	80171c8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80104a8:	4b27      	ldr	r3, [pc, #156]	; (8010548 <tcp_timewait_input+0xc8>)
 80104aa:	781b      	ldrb	r3, [r3, #0]
 80104ac:	f003 0302 	and.w	r3, r3, #2
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d02a      	beq.n	801050a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80104b4:	4b28      	ldr	r3, [pc, #160]	; (8010558 <tcp_timewait_input+0xd8>)
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104bc:	1ad3      	subs	r3, r2, r3
 80104be:	2b00      	cmp	r3, #0
 80104c0:	db2d      	blt.n	801051e <tcp_timewait_input+0x9e>
 80104c2:	4b25      	ldr	r3, [pc, #148]	; (8010558 <tcp_timewait_input+0xd8>)
 80104c4:	681a      	ldr	r2, [r3, #0]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ca:	6879      	ldr	r1, [r7, #4]
 80104cc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80104ce:	440b      	add	r3, r1
 80104d0:	1ad3      	subs	r3, r2, r3
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	dc23      	bgt.n	801051e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104d6:	4b21      	ldr	r3, [pc, #132]	; (801055c <tcp_timewait_input+0xdc>)
 80104d8:	6819      	ldr	r1, [r3, #0]
 80104da:	4b21      	ldr	r3, [pc, #132]	; (8010560 <tcp_timewait_input+0xe0>)
 80104dc:	881b      	ldrh	r3, [r3, #0]
 80104de:	461a      	mov	r2, r3
 80104e0:	4b1d      	ldr	r3, [pc, #116]	; (8010558 <tcp_timewait_input+0xd8>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104e6:	4b1f      	ldr	r3, [pc, #124]	; (8010564 <tcp_timewait_input+0xe4>)
 80104e8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104ea:	885b      	ldrh	r3, [r3, #2]
 80104ec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104ee:	4a1d      	ldr	r2, [pc, #116]	; (8010564 <tcp_timewait_input+0xe4>)
 80104f0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104f2:	8812      	ldrh	r2, [r2, #0]
 80104f4:	b292      	uxth	r2, r2
 80104f6:	9202      	str	r2, [sp, #8]
 80104f8:	9301      	str	r3, [sp, #4]
 80104fa:	4b1b      	ldr	r3, [pc, #108]	; (8010568 <tcp_timewait_input+0xe8>)
 80104fc:	9300      	str	r3, [sp, #0]
 80104fe:	4b1b      	ldr	r3, [pc, #108]	; (801056c <tcp_timewait_input+0xec>)
 8010500:	4602      	mov	r2, r0
 8010502:	6878      	ldr	r0, [r7, #4]
 8010504:	f002 fe72 	bl	80131ec <tcp_rst>
      return;
 8010508:	e01b      	b.n	8010542 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801050a:	4b0f      	ldr	r3, [pc, #60]	; (8010548 <tcp_timewait_input+0xc8>)
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	f003 0301 	and.w	r3, r3, #1
 8010512:	2b00      	cmp	r3, #0
 8010514:	d003      	beq.n	801051e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010516:	4b16      	ldr	r3, [pc, #88]	; (8010570 <tcp_timewait_input+0xf0>)
 8010518:	681a      	ldr	r2, [r3, #0]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801051e:	4b10      	ldr	r3, [pc, #64]	; (8010560 <tcp_timewait_input+0xe0>)
 8010520:	881b      	ldrh	r3, [r3, #0]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d00c      	beq.n	8010540 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	8b5b      	ldrh	r3, [r3, #26]
 801052a:	f043 0302 	orr.w	r3, r3, #2
 801052e:	b29a      	uxth	r2, r3
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f002 f8a5 	bl	8012684 <tcp_output>
  }
  return;
 801053a:	e001      	b.n	8010540 <tcp_timewait_input+0xc0>
    return;
 801053c:	bf00      	nop
 801053e:	e000      	b.n	8010542 <tcp_timewait_input+0xc2>
  return;
 8010540:	bf00      	nop
}
 8010542:	3708      	adds	r7, #8
 8010544:	46bd      	mov	sp, r7
 8010546:	bd80      	pop	{r7, pc}
 8010548:	2000900c 	.word	0x2000900c
 801054c:	080194b4 	.word	0x080194b4
 8010550:	080196cc 	.word	0x080196cc
 8010554:	08019500 	.word	0x08019500
 8010558:	20009000 	.word	0x20009000
 801055c:	20009004 	.word	0x20009004
 8010560:	2000900a 	.word	0x2000900a
 8010564:	20008ff0 	.word	0x20008ff0
 8010568:	20005a68 	.word	0x20005a68
 801056c:	20005a6c 	.word	0x20005a6c
 8010570:	20008fc8 	.word	0x20008fc8

08010574 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010574:	b590      	push	{r4, r7, lr}
 8010576:	b08d      	sub	sp, #52	; 0x34
 8010578:	af04      	add	r7, sp, #16
 801057a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801057c:	2300      	movs	r3, #0
 801057e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010580:	2300      	movs	r3, #0
 8010582:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d106      	bne.n	8010598 <tcp_process+0x24>
 801058a:	4b9d      	ldr	r3, [pc, #628]	; (8010800 <tcp_process+0x28c>)
 801058c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010590:	499c      	ldr	r1, [pc, #624]	; (8010804 <tcp_process+0x290>)
 8010592:	489d      	ldr	r0, [pc, #628]	; (8010808 <tcp_process+0x294>)
 8010594:	f006 fe18 	bl	80171c8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010598:	4b9c      	ldr	r3, [pc, #624]	; (801080c <tcp_process+0x298>)
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	f003 0304 	and.w	r3, r3, #4
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d04e      	beq.n	8010642 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	7d1b      	ldrb	r3, [r3, #20]
 80105a8:	2b02      	cmp	r3, #2
 80105aa:	d108      	bne.n	80105be <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105b0:	4b97      	ldr	r3, [pc, #604]	; (8010810 <tcp_process+0x29c>)
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	429a      	cmp	r2, r3
 80105b6:	d123      	bne.n	8010600 <tcp_process+0x8c>
        acceptable = 1;
 80105b8:	2301      	movs	r3, #1
 80105ba:	76fb      	strb	r3, [r7, #27]
 80105bc:	e020      	b.n	8010600 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105c2:	4b94      	ldr	r3, [pc, #592]	; (8010814 <tcp_process+0x2a0>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d102      	bne.n	80105d0 <tcp_process+0x5c>
        acceptable = 1;
 80105ca:	2301      	movs	r3, #1
 80105cc:	76fb      	strb	r3, [r7, #27]
 80105ce:	e017      	b.n	8010600 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80105d0:	4b90      	ldr	r3, [pc, #576]	; (8010814 <tcp_process+0x2a0>)
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d8:	1ad3      	subs	r3, r2, r3
 80105da:	2b00      	cmp	r3, #0
 80105dc:	db10      	blt.n	8010600 <tcp_process+0x8c>
 80105de:	4b8d      	ldr	r3, [pc, #564]	; (8010814 <tcp_process+0x2a0>)
 80105e0:	681a      	ldr	r2, [r3, #0]
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105e6:	6879      	ldr	r1, [r7, #4]
 80105e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80105ea:	440b      	add	r3, r1
 80105ec:	1ad3      	subs	r3, r2, r3
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	dc06      	bgt.n	8010600 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	8b5b      	ldrh	r3, [r3, #26]
 80105f6:	f043 0302 	orr.w	r3, r3, #2
 80105fa:	b29a      	uxth	r2, r3
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010600:	7efb      	ldrb	r3, [r7, #27]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d01b      	beq.n	801063e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	7d1b      	ldrb	r3, [r3, #20]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d106      	bne.n	801061c <tcp_process+0xa8>
 801060e:	4b7c      	ldr	r3, [pc, #496]	; (8010800 <tcp_process+0x28c>)
 8010610:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010614:	4980      	ldr	r1, [pc, #512]	; (8010818 <tcp_process+0x2a4>)
 8010616:	487c      	ldr	r0, [pc, #496]	; (8010808 <tcp_process+0x294>)
 8010618:	f006 fdd6 	bl	80171c8 <iprintf>
      recv_flags |= TF_RESET;
 801061c:	4b7f      	ldr	r3, [pc, #508]	; (801081c <tcp_process+0x2a8>)
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	f043 0308 	orr.w	r3, r3, #8
 8010624:	b2da      	uxtb	r2, r3
 8010626:	4b7d      	ldr	r3, [pc, #500]	; (801081c <tcp_process+0x2a8>)
 8010628:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	8b5b      	ldrh	r3, [r3, #26]
 801062e:	f023 0301 	bic.w	r3, r3, #1
 8010632:	b29a      	uxth	r2, r3
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010638:	f06f 030d 	mvn.w	r3, #13
 801063c:	e37a      	b.n	8010d34 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801063e:	2300      	movs	r3, #0
 8010640:	e378      	b.n	8010d34 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010642:	4b72      	ldr	r3, [pc, #456]	; (801080c <tcp_process+0x298>)
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	f003 0302 	and.w	r3, r3, #2
 801064a:	2b00      	cmp	r3, #0
 801064c:	d010      	beq.n	8010670 <tcp_process+0xfc>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	7d1b      	ldrb	r3, [r3, #20]
 8010652:	2b02      	cmp	r3, #2
 8010654:	d00c      	beq.n	8010670 <tcp_process+0xfc>
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	7d1b      	ldrb	r3, [r3, #20]
 801065a:	2b03      	cmp	r3, #3
 801065c:	d008      	beq.n	8010670 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	8b5b      	ldrh	r3, [r3, #26]
 8010662:	f043 0302 	orr.w	r3, r3, #2
 8010666:	b29a      	uxth	r2, r3
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801066c:	2300      	movs	r3, #0
 801066e:	e361      	b.n	8010d34 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	8b5b      	ldrh	r3, [r3, #26]
 8010674:	f003 0310 	and.w	r3, r3, #16
 8010678:	2b00      	cmp	r3, #0
 801067a:	d103      	bne.n	8010684 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801067c:	4b68      	ldr	r3, [pc, #416]	; (8010820 <tcp_process+0x2ac>)
 801067e:	681a      	ldr	r2, [r3, #0]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2200      	movs	r2, #0
 8010688:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2200      	movs	r2, #0
 8010690:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f001 fc2f 	bl	8011ef8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	7d1b      	ldrb	r3, [r3, #20]
 801069e:	3b02      	subs	r3, #2
 80106a0:	2b07      	cmp	r3, #7
 80106a2:	f200 8337 	bhi.w	8010d14 <tcp_process+0x7a0>
 80106a6:	a201      	add	r2, pc, #4	; (adr r2, 80106ac <tcp_process+0x138>)
 80106a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106ac:	080106cd 	.word	0x080106cd
 80106b0:	080108fd 	.word	0x080108fd
 80106b4:	08010a75 	.word	0x08010a75
 80106b8:	08010a9f 	.word	0x08010a9f
 80106bc:	08010bc3 	.word	0x08010bc3
 80106c0:	08010a75 	.word	0x08010a75
 80106c4:	08010c4f 	.word	0x08010c4f
 80106c8:	08010cdf 	.word	0x08010cdf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80106cc:	4b4f      	ldr	r3, [pc, #316]	; (801080c <tcp_process+0x298>)
 80106ce:	781b      	ldrb	r3, [r3, #0]
 80106d0:	f003 0310 	and.w	r3, r3, #16
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	f000 80e4 	beq.w	80108a2 <tcp_process+0x32e>
 80106da:	4b4c      	ldr	r3, [pc, #304]	; (801080c <tcp_process+0x298>)
 80106dc:	781b      	ldrb	r3, [r3, #0]
 80106de:	f003 0302 	and.w	r3, r3, #2
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	f000 80dd 	beq.w	80108a2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106ec:	1c5a      	adds	r2, r3, #1
 80106ee:	4b48      	ldr	r3, [pc, #288]	; (8010810 <tcp_process+0x29c>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	f040 80d5 	bne.w	80108a2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80106f8:	4b46      	ldr	r3, [pc, #280]	; (8010814 <tcp_process+0x2a0>)
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	1c5a      	adds	r2, r3, #1
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801070a:	4b41      	ldr	r3, [pc, #260]	; (8010810 <tcp_process+0x29c>)
 801070c:	681a      	ldr	r2, [r3, #0]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010712:	4b44      	ldr	r3, [pc, #272]	; (8010824 <tcp_process+0x2b0>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	89db      	ldrh	r3, [r3, #14]
 8010718:	b29a      	uxth	r2, r3
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801072c:	4b39      	ldr	r3, [pc, #228]	; (8010814 <tcp_process+0x2a0>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	1e5a      	subs	r2, r3, #1
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	2204      	movs	r2, #4
 801073a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	3304      	adds	r3, #4
 8010744:	4618      	mov	r0, r3
 8010746:	f004 fe83 	bl	8015450 <ip4_route>
 801074a:	4601      	mov	r1, r0
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	3304      	adds	r3, #4
 8010750:	461a      	mov	r2, r3
 8010752:	4620      	mov	r0, r4
 8010754:	f7ff f88c 	bl	800f870 <tcp_eff_send_mss_netif>
 8010758:	4603      	mov	r3, r0
 801075a:	461a      	mov	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010764:	009a      	lsls	r2, r3, #2
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801076a:	005b      	lsls	r3, r3, #1
 801076c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010770:	428b      	cmp	r3, r1
 8010772:	bf38      	it	cc
 8010774:	460b      	movcc	r3, r1
 8010776:	429a      	cmp	r2, r3
 8010778:	d204      	bcs.n	8010784 <tcp_process+0x210>
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801077e:	009b      	lsls	r3, r3, #2
 8010780:	b29b      	uxth	r3, r3
 8010782:	e00d      	b.n	80107a0 <tcp_process+0x22c>
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010788:	005b      	lsls	r3, r3, #1
 801078a:	f241 121c 	movw	r2, #4380	; 0x111c
 801078e:	4293      	cmp	r3, r2
 8010790:	d904      	bls.n	801079c <tcp_process+0x228>
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010796:	005b      	lsls	r3, r3, #1
 8010798:	b29b      	uxth	r3, r3
 801079a:	e001      	b.n	80107a0 <tcp_process+0x22c>
 801079c:	f241 131c 	movw	r3, #4380	; 0x111c
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d106      	bne.n	80107be <tcp_process+0x24a>
 80107b0:	4b13      	ldr	r3, [pc, #76]	; (8010800 <tcp_process+0x28c>)
 80107b2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80107b6:	491c      	ldr	r1, [pc, #112]	; (8010828 <tcp_process+0x2b4>)
 80107b8:	4813      	ldr	r0, [pc, #76]	; (8010808 <tcp_process+0x294>)
 80107ba:	f006 fd05 	bl	80171c8 <iprintf>
        --pcb->snd_queuelen;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107c4:	3b01      	subs	r3, #1
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107d2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80107d4:	69fb      	ldr	r3, [r7, #28]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d12a      	bne.n	8010830 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107de:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d106      	bne.n	80107f4 <tcp_process+0x280>
 80107e6:	4b06      	ldr	r3, [pc, #24]	; (8010800 <tcp_process+0x28c>)
 80107e8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80107ec:	490f      	ldr	r1, [pc, #60]	; (801082c <tcp_process+0x2b8>)
 80107ee:	4806      	ldr	r0, [pc, #24]	; (8010808 <tcp_process+0x294>)
 80107f0:	f006 fcea 	bl	80171c8 <iprintf>
          pcb->unsent = rseg->next;
 80107f4:	69fb      	ldr	r3, [r7, #28]
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	66da      	str	r2, [r3, #108]	; 0x6c
 80107fc:	e01c      	b.n	8010838 <tcp_process+0x2c4>
 80107fe:	bf00      	nop
 8010800:	080194b4 	.word	0x080194b4
 8010804:	080196ec 	.word	0x080196ec
 8010808:	08019500 	.word	0x08019500
 801080c:	2000900c 	.word	0x2000900c
 8010810:	20009004 	.word	0x20009004
 8010814:	20009000 	.word	0x20009000
 8010818:	08019708 	.word	0x08019708
 801081c:	2000900d 	.word	0x2000900d
 8010820:	20008fc8 	.word	0x20008fc8
 8010824:	20008ff0 	.word	0x20008ff0
 8010828:	08019728 	.word	0x08019728
 801082c:	08019740 	.word	0x08019740
        } else {
          pcb->unacked = rseg->next;
 8010830:	69fb      	ldr	r3, [r7, #28]
 8010832:	681a      	ldr	r2, [r3, #0]
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010838:	69f8      	ldr	r0, [r7, #28]
 801083a:	f7fe fd22 	bl	800f282 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010842:	2b00      	cmp	r3, #0
 8010844:	d104      	bne.n	8010850 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801084c:	861a      	strh	r2, [r3, #48]	; 0x30
 801084e:	e006      	b.n	801085e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	2200      	movs	r2, #0
 8010854:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	2200      	movs	r2, #0
 801085a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010864:	2b00      	cmp	r3, #0
 8010866:	d00a      	beq.n	801087e <tcp_process+0x30a>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801086e:	687a      	ldr	r2, [r7, #4]
 8010870:	6910      	ldr	r0, [r2, #16]
 8010872:	2200      	movs	r2, #0
 8010874:	6879      	ldr	r1, [r7, #4]
 8010876:	4798      	blx	r3
 8010878:	4603      	mov	r3, r0
 801087a:	76bb      	strb	r3, [r7, #26]
 801087c:	e001      	b.n	8010882 <tcp_process+0x30e>
 801087e:	2300      	movs	r3, #0
 8010880:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010882:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010886:	f113 0f0d 	cmn.w	r3, #13
 801088a:	d102      	bne.n	8010892 <tcp_process+0x31e>
          return ERR_ABRT;
 801088c:	f06f 030c 	mvn.w	r3, #12
 8010890:	e250      	b.n	8010d34 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	8b5b      	ldrh	r3, [r3, #26]
 8010896:	f043 0302 	orr.w	r3, r3, #2
 801089a:	b29a      	uxth	r2, r3
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80108a0:	e23a      	b.n	8010d18 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80108a2:	4b98      	ldr	r3, [pc, #608]	; (8010b04 <tcp_process+0x590>)
 80108a4:	781b      	ldrb	r3, [r3, #0]
 80108a6:	f003 0310 	and.w	r3, r3, #16
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	f000 8234 	beq.w	8010d18 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108b0:	4b95      	ldr	r3, [pc, #596]	; (8010b08 <tcp_process+0x594>)
 80108b2:	6819      	ldr	r1, [r3, #0]
 80108b4:	4b95      	ldr	r3, [pc, #596]	; (8010b0c <tcp_process+0x598>)
 80108b6:	881b      	ldrh	r3, [r3, #0]
 80108b8:	461a      	mov	r2, r3
 80108ba:	4b95      	ldr	r3, [pc, #596]	; (8010b10 <tcp_process+0x59c>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108c0:	4b94      	ldr	r3, [pc, #592]	; (8010b14 <tcp_process+0x5a0>)
 80108c2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108c4:	885b      	ldrh	r3, [r3, #2]
 80108c6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80108c8:	4a92      	ldr	r2, [pc, #584]	; (8010b14 <tcp_process+0x5a0>)
 80108ca:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80108cc:	8812      	ldrh	r2, [r2, #0]
 80108ce:	b292      	uxth	r2, r2
 80108d0:	9202      	str	r2, [sp, #8]
 80108d2:	9301      	str	r3, [sp, #4]
 80108d4:	4b90      	ldr	r3, [pc, #576]	; (8010b18 <tcp_process+0x5a4>)
 80108d6:	9300      	str	r3, [sp, #0]
 80108d8:	4b90      	ldr	r3, [pc, #576]	; (8010b1c <tcp_process+0x5a8>)
 80108da:	4602      	mov	r2, r0
 80108dc:	6878      	ldr	r0, [r7, #4]
 80108de:	f002 fc85 	bl	80131ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80108e8:	2b05      	cmp	r3, #5
 80108ea:	f200 8215 	bhi.w	8010d18 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2200      	movs	r2, #0
 80108f2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f002 fa4f 	bl	8012d98 <tcp_rexmit_rto>
      break;
 80108fa:	e20d      	b.n	8010d18 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80108fc:	4b81      	ldr	r3, [pc, #516]	; (8010b04 <tcp_process+0x590>)
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	f003 0310 	and.w	r3, r3, #16
 8010904:	2b00      	cmp	r3, #0
 8010906:	f000 80a1 	beq.w	8010a4c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801090a:	4b7f      	ldr	r3, [pc, #508]	; (8010b08 <tcp_process+0x594>)
 801090c:	681a      	ldr	r2, [r3, #0]
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010912:	1ad3      	subs	r3, r2, r3
 8010914:	3b01      	subs	r3, #1
 8010916:	2b00      	cmp	r3, #0
 8010918:	db7e      	blt.n	8010a18 <tcp_process+0x4a4>
 801091a:	4b7b      	ldr	r3, [pc, #492]	; (8010b08 <tcp_process+0x594>)
 801091c:	681a      	ldr	r2, [r3, #0]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010922:	1ad3      	subs	r3, r2, r3
 8010924:	2b00      	cmp	r3, #0
 8010926:	dc77      	bgt.n	8010a18 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2204      	movs	r2, #4
 801092c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010932:	2b00      	cmp	r3, #0
 8010934:	d102      	bne.n	801093c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010936:	23fa      	movs	r3, #250	; 0xfa
 8010938:	76bb      	strb	r3, [r7, #26]
 801093a:	e01d      	b.n	8010978 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010940:	699b      	ldr	r3, [r3, #24]
 8010942:	2b00      	cmp	r3, #0
 8010944:	d106      	bne.n	8010954 <tcp_process+0x3e0>
 8010946:	4b76      	ldr	r3, [pc, #472]	; (8010b20 <tcp_process+0x5ac>)
 8010948:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801094c:	4975      	ldr	r1, [pc, #468]	; (8010b24 <tcp_process+0x5b0>)
 801094e:	4876      	ldr	r0, [pc, #472]	; (8010b28 <tcp_process+0x5b4>)
 8010950:	f006 fc3a 	bl	80171c8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010958:	699b      	ldr	r3, [r3, #24]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00a      	beq.n	8010974 <tcp_process+0x400>
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010962:	699b      	ldr	r3, [r3, #24]
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	6910      	ldr	r0, [r2, #16]
 8010968:	2200      	movs	r2, #0
 801096a:	6879      	ldr	r1, [r7, #4]
 801096c:	4798      	blx	r3
 801096e:	4603      	mov	r3, r0
 8010970:	76bb      	strb	r3, [r7, #26]
 8010972:	e001      	b.n	8010978 <tcp_process+0x404>
 8010974:	23f0      	movs	r3, #240	; 0xf0
 8010976:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010978:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d00a      	beq.n	8010996 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010980:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010984:	f113 0f0d 	cmn.w	r3, #13
 8010988:	d002      	beq.n	8010990 <tcp_process+0x41c>
              tcp_abort(pcb);
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7fd ff8e 	bl	800e8ac <tcp_abort>
            }
            return ERR_ABRT;
 8010990:	f06f 030c 	mvn.w	r3, #12
 8010994:	e1ce      	b.n	8010d34 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010996:	6878      	ldr	r0, [r7, #4]
 8010998:	f000 fae0 	bl	8010f5c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801099c:	4b63      	ldr	r3, [pc, #396]	; (8010b2c <tcp_process+0x5b8>)
 801099e:	881b      	ldrh	r3, [r3, #0]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d005      	beq.n	80109b0 <tcp_process+0x43c>
            recv_acked--;
 80109a4:	4b61      	ldr	r3, [pc, #388]	; (8010b2c <tcp_process+0x5b8>)
 80109a6:	881b      	ldrh	r3, [r3, #0]
 80109a8:	3b01      	subs	r3, #1
 80109aa:	b29a      	uxth	r2, r3
 80109ac:	4b5f      	ldr	r3, [pc, #380]	; (8010b2c <tcp_process+0x5b8>)
 80109ae:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109b4:	009a      	lsls	r2, r3, #2
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109ba:	005b      	lsls	r3, r3, #1
 80109bc:	f241 111c 	movw	r1, #4380	; 0x111c
 80109c0:	428b      	cmp	r3, r1
 80109c2:	bf38      	it	cc
 80109c4:	460b      	movcc	r3, r1
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d204      	bcs.n	80109d4 <tcp_process+0x460>
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109ce:	009b      	lsls	r3, r3, #2
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	e00d      	b.n	80109f0 <tcp_process+0x47c>
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109d8:	005b      	lsls	r3, r3, #1
 80109da:	f241 121c 	movw	r2, #4380	; 0x111c
 80109de:	4293      	cmp	r3, r2
 80109e0:	d904      	bls.n	80109ec <tcp_process+0x478>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80109e6:	005b      	lsls	r3, r3, #1
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	e001      	b.n	80109f0 <tcp_process+0x47c>
 80109ec:	f241 131c 	movw	r3, #4380	; 0x111c
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80109f6:	4b4e      	ldr	r3, [pc, #312]	; (8010b30 <tcp_process+0x5bc>)
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	f003 0320 	and.w	r3, r3, #32
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d037      	beq.n	8010a72 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	8b5b      	ldrh	r3, [r3, #26]
 8010a06:	f043 0302 	orr.w	r3, r3, #2
 8010a0a:	b29a      	uxth	r2, r3
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2207      	movs	r2, #7
 8010a14:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010a16:	e02c      	b.n	8010a72 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a18:	4b3b      	ldr	r3, [pc, #236]	; (8010b08 <tcp_process+0x594>)
 8010a1a:	6819      	ldr	r1, [r3, #0]
 8010a1c:	4b3b      	ldr	r3, [pc, #236]	; (8010b0c <tcp_process+0x598>)
 8010a1e:	881b      	ldrh	r3, [r3, #0]
 8010a20:	461a      	mov	r2, r3
 8010a22:	4b3b      	ldr	r3, [pc, #236]	; (8010b10 <tcp_process+0x59c>)
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a28:	4b3a      	ldr	r3, [pc, #232]	; (8010b14 <tcp_process+0x5a0>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a2c:	885b      	ldrh	r3, [r3, #2]
 8010a2e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010a30:	4a38      	ldr	r2, [pc, #224]	; (8010b14 <tcp_process+0x5a0>)
 8010a32:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010a34:	8812      	ldrh	r2, [r2, #0]
 8010a36:	b292      	uxth	r2, r2
 8010a38:	9202      	str	r2, [sp, #8]
 8010a3a:	9301      	str	r3, [sp, #4]
 8010a3c:	4b36      	ldr	r3, [pc, #216]	; (8010b18 <tcp_process+0x5a4>)
 8010a3e:	9300      	str	r3, [sp, #0]
 8010a40:	4b36      	ldr	r3, [pc, #216]	; (8010b1c <tcp_process+0x5a8>)
 8010a42:	4602      	mov	r2, r0
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f002 fbd1 	bl	80131ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010a4a:	e167      	b.n	8010d1c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010a4c:	4b2d      	ldr	r3, [pc, #180]	; (8010b04 <tcp_process+0x590>)
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	f003 0302 	and.w	r3, r3, #2
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	f000 8161 	beq.w	8010d1c <tcp_process+0x7a8>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a5e:	1e5a      	subs	r2, r3, #1
 8010a60:	4b2b      	ldr	r3, [pc, #172]	; (8010b10 <tcp_process+0x59c>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	429a      	cmp	r2, r3
 8010a66:	f040 8159 	bne.w	8010d1c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010a6a:	6878      	ldr	r0, [r7, #4]
 8010a6c:	f002 f9b6 	bl	8012ddc <tcp_rexmit>
      break;
 8010a70:	e154      	b.n	8010d1c <tcp_process+0x7a8>
 8010a72:	e153      	b.n	8010d1c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f000 fa71 	bl	8010f5c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010a7a:	4b2d      	ldr	r3, [pc, #180]	; (8010b30 <tcp_process+0x5bc>)
 8010a7c:	781b      	ldrb	r3, [r3, #0]
 8010a7e:	f003 0320 	and.w	r3, r3, #32
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	f000 814c 	beq.w	8010d20 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	8b5b      	ldrh	r3, [r3, #26]
 8010a8c:	f043 0302 	orr.w	r3, r3, #2
 8010a90:	b29a      	uxth	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2207      	movs	r2, #7
 8010a9a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010a9c:	e140      	b.n	8010d20 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f000 fa5c 	bl	8010f5c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010aa4:	4b22      	ldr	r3, [pc, #136]	; (8010b30 <tcp_process+0x5bc>)
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	f003 0320 	and.w	r3, r3, #32
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d071      	beq.n	8010b94 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010ab0:	4b14      	ldr	r3, [pc, #80]	; (8010b04 <tcp_process+0x590>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	f003 0310 	and.w	r3, r3, #16
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d060      	beq.n	8010b7e <tcp_process+0x60a>
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ac0:	4b11      	ldr	r3, [pc, #68]	; (8010b08 <tcp_process+0x594>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	429a      	cmp	r2, r3
 8010ac6:	d15a      	bne.n	8010b7e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d156      	bne.n	8010b7e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	8b5b      	ldrh	r3, [r3, #26]
 8010ad4:	f043 0302 	orr.w	r3, r3, #2
 8010ad8:	b29a      	uxth	r2, r3
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f7fe fdbc 	bl	800f65c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010ae4:	4b13      	ldr	r3, [pc, #76]	; (8010b34 <tcp_process+0x5c0>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	687a      	ldr	r2, [r7, #4]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d105      	bne.n	8010afa <tcp_process+0x586>
 8010aee:	4b11      	ldr	r3, [pc, #68]	; (8010b34 <tcp_process+0x5c0>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	68db      	ldr	r3, [r3, #12]
 8010af4:	4a0f      	ldr	r2, [pc, #60]	; (8010b34 <tcp_process+0x5c0>)
 8010af6:	6013      	str	r3, [r2, #0]
 8010af8:	e02e      	b.n	8010b58 <tcp_process+0x5e4>
 8010afa:	4b0e      	ldr	r3, [pc, #56]	; (8010b34 <tcp_process+0x5c0>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	617b      	str	r3, [r7, #20]
 8010b00:	e027      	b.n	8010b52 <tcp_process+0x5de>
 8010b02:	bf00      	nop
 8010b04:	2000900c 	.word	0x2000900c
 8010b08:	20009004 	.word	0x20009004
 8010b0c:	2000900a 	.word	0x2000900a
 8010b10:	20009000 	.word	0x20009000
 8010b14:	20008ff0 	.word	0x20008ff0
 8010b18:	20005a68 	.word	0x20005a68
 8010b1c:	20005a6c 	.word	0x20005a6c
 8010b20:	080194b4 	.word	0x080194b4
 8010b24:	08019754 	.word	0x08019754
 8010b28:	08019500 	.word	0x08019500
 8010b2c:	20009008 	.word	0x20009008
 8010b30:	2000900d 	.word	0x2000900d
 8010b34:	20008fd4 	.word	0x20008fd4
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	68db      	ldr	r3, [r3, #12]
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	429a      	cmp	r2, r3
 8010b40:	d104      	bne.n	8010b4c <tcp_process+0x5d8>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	68da      	ldr	r2, [r3, #12]
 8010b46:	697b      	ldr	r3, [r7, #20]
 8010b48:	60da      	str	r2, [r3, #12]
 8010b4a:	e005      	b.n	8010b58 <tcp_process+0x5e4>
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	68db      	ldr	r3, [r3, #12]
 8010b50:	617b      	str	r3, [r7, #20]
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d1ef      	bne.n	8010b38 <tcp_process+0x5c4>
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	60da      	str	r2, [r3, #12]
 8010b5e:	4b77      	ldr	r3, [pc, #476]	; (8010d3c <tcp_process+0x7c8>)
 8010b60:	2201      	movs	r2, #1
 8010b62:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	220a      	movs	r2, #10
 8010b68:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010b6a:	4b75      	ldr	r3, [pc, #468]	; (8010d40 <tcp_process+0x7cc>)
 8010b6c:	681a      	ldr	r2, [r3, #0]
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	60da      	str	r2, [r3, #12]
 8010b72:	4a73      	ldr	r2, [pc, #460]	; (8010d40 <tcp_process+0x7cc>)
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6013      	str	r3, [r2, #0]
 8010b78:	f002 fcfa 	bl	8013570 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010b7c:	e0d2      	b.n	8010d24 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	8b5b      	ldrh	r3, [r3, #26]
 8010b82:	f043 0302 	orr.w	r3, r3, #2
 8010b86:	b29a      	uxth	r2, r3
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2208      	movs	r2, #8
 8010b90:	751a      	strb	r2, [r3, #20]
      break;
 8010b92:	e0c7      	b.n	8010d24 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010b94:	4b6b      	ldr	r3, [pc, #428]	; (8010d44 <tcp_process+0x7d0>)
 8010b96:	781b      	ldrb	r3, [r3, #0]
 8010b98:	f003 0310 	and.w	r3, r3, #16
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	f000 80c1 	beq.w	8010d24 <tcp_process+0x7b0>
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ba6:	4b68      	ldr	r3, [pc, #416]	; (8010d48 <tcp_process+0x7d4>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	429a      	cmp	r2, r3
 8010bac:	f040 80ba 	bne.w	8010d24 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	f040 80b5 	bne.w	8010d24 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	2206      	movs	r2, #6
 8010bbe:	751a      	strb	r2, [r3, #20]
      break;
 8010bc0:	e0b0      	b.n	8010d24 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 f9ca 	bl	8010f5c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010bc8:	4b60      	ldr	r3, [pc, #384]	; (8010d4c <tcp_process+0x7d8>)
 8010bca:	781b      	ldrb	r3, [r3, #0]
 8010bcc:	f003 0320 	and.w	r3, r3, #32
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	f000 80a9 	beq.w	8010d28 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	8b5b      	ldrh	r3, [r3, #26]
 8010bda:	f043 0302 	orr.w	r3, r3, #2
 8010bde:	b29a      	uxth	r2, r3
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f7fe fd39 	bl	800f65c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010bea:	4b59      	ldr	r3, [pc, #356]	; (8010d50 <tcp_process+0x7dc>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d105      	bne.n	8010c00 <tcp_process+0x68c>
 8010bf4:	4b56      	ldr	r3, [pc, #344]	; (8010d50 <tcp_process+0x7dc>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	68db      	ldr	r3, [r3, #12]
 8010bfa:	4a55      	ldr	r2, [pc, #340]	; (8010d50 <tcp_process+0x7dc>)
 8010bfc:	6013      	str	r3, [r2, #0]
 8010bfe:	e013      	b.n	8010c28 <tcp_process+0x6b4>
 8010c00:	4b53      	ldr	r3, [pc, #332]	; (8010d50 <tcp_process+0x7dc>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	613b      	str	r3, [r7, #16]
 8010c06:	e00c      	b.n	8010c22 <tcp_process+0x6ae>
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	687a      	ldr	r2, [r7, #4]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d104      	bne.n	8010c1c <tcp_process+0x6a8>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	68da      	ldr	r2, [r3, #12]
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	60da      	str	r2, [r3, #12]
 8010c1a:	e005      	b.n	8010c28 <tcp_process+0x6b4>
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	68db      	ldr	r3, [r3, #12]
 8010c20:	613b      	str	r3, [r7, #16]
 8010c22:	693b      	ldr	r3, [r7, #16]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d1ef      	bne.n	8010c08 <tcp_process+0x694>
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	60da      	str	r2, [r3, #12]
 8010c2e:	4b43      	ldr	r3, [pc, #268]	; (8010d3c <tcp_process+0x7c8>)
 8010c30:	2201      	movs	r2, #1
 8010c32:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	220a      	movs	r2, #10
 8010c38:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010c3a:	4b41      	ldr	r3, [pc, #260]	; (8010d40 <tcp_process+0x7cc>)
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	60da      	str	r2, [r3, #12]
 8010c42:	4a3f      	ldr	r2, [pc, #252]	; (8010d40 <tcp_process+0x7cc>)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6013      	str	r3, [r2, #0]
 8010c48:	f002 fc92 	bl	8013570 <tcp_timer_needed>
      }
      break;
 8010c4c:	e06c      	b.n	8010d28 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010c4e:	6878      	ldr	r0, [r7, #4]
 8010c50:	f000 f984 	bl	8010f5c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010c54:	4b3b      	ldr	r3, [pc, #236]	; (8010d44 <tcp_process+0x7d0>)
 8010c56:	781b      	ldrb	r3, [r3, #0]
 8010c58:	f003 0310 	and.w	r3, r3, #16
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d065      	beq.n	8010d2c <tcp_process+0x7b8>
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010c64:	4b38      	ldr	r3, [pc, #224]	; (8010d48 <tcp_process+0x7d4>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	429a      	cmp	r2, r3
 8010c6a:	d15f      	bne.n	8010d2c <tcp_process+0x7b8>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d15b      	bne.n	8010d2c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f7fe fcf1 	bl	800f65c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010c7a:	4b35      	ldr	r3, [pc, #212]	; (8010d50 <tcp_process+0x7dc>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	687a      	ldr	r2, [r7, #4]
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d105      	bne.n	8010c90 <tcp_process+0x71c>
 8010c84:	4b32      	ldr	r3, [pc, #200]	; (8010d50 <tcp_process+0x7dc>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	68db      	ldr	r3, [r3, #12]
 8010c8a:	4a31      	ldr	r2, [pc, #196]	; (8010d50 <tcp_process+0x7dc>)
 8010c8c:	6013      	str	r3, [r2, #0]
 8010c8e:	e013      	b.n	8010cb8 <tcp_process+0x744>
 8010c90:	4b2f      	ldr	r3, [pc, #188]	; (8010d50 <tcp_process+0x7dc>)
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	60fb      	str	r3, [r7, #12]
 8010c96:	e00c      	b.n	8010cb2 <tcp_process+0x73e>
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	687a      	ldr	r2, [r7, #4]
 8010c9e:	429a      	cmp	r2, r3
 8010ca0:	d104      	bne.n	8010cac <tcp_process+0x738>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	68da      	ldr	r2, [r3, #12]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	60da      	str	r2, [r3, #12]
 8010caa:	e005      	b.n	8010cb8 <tcp_process+0x744>
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	60fb      	str	r3, [r7, #12]
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d1ef      	bne.n	8010c98 <tcp_process+0x724>
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	60da      	str	r2, [r3, #12]
 8010cbe:	4b1f      	ldr	r3, [pc, #124]	; (8010d3c <tcp_process+0x7c8>)
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	220a      	movs	r2, #10
 8010cc8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010cca:	4b1d      	ldr	r3, [pc, #116]	; (8010d40 <tcp_process+0x7cc>)
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	60da      	str	r2, [r3, #12]
 8010cd2:	4a1b      	ldr	r2, [pc, #108]	; (8010d40 <tcp_process+0x7cc>)
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6013      	str	r3, [r2, #0]
 8010cd8:	f002 fc4a 	bl	8013570 <tcp_timer_needed>
      }
      break;
 8010cdc:	e026      	b.n	8010d2c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 f93c 	bl	8010f5c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010ce4:	4b17      	ldr	r3, [pc, #92]	; (8010d44 <tcp_process+0x7d0>)
 8010ce6:	781b      	ldrb	r3, [r3, #0]
 8010ce8:	f003 0310 	and.w	r3, r3, #16
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d01f      	beq.n	8010d30 <tcp_process+0x7bc>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010cf4:	4b14      	ldr	r3, [pc, #80]	; (8010d48 <tcp_process+0x7d4>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d119      	bne.n	8010d30 <tcp_process+0x7bc>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d115      	bne.n	8010d30 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010d04:	4b11      	ldr	r3, [pc, #68]	; (8010d4c <tcp_process+0x7d8>)
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	f043 0310 	orr.w	r3, r3, #16
 8010d0c:	b2da      	uxtb	r2, r3
 8010d0e:	4b0f      	ldr	r3, [pc, #60]	; (8010d4c <tcp_process+0x7d8>)
 8010d10:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010d12:	e00d      	b.n	8010d30 <tcp_process+0x7bc>
    default:
      break;
 8010d14:	bf00      	nop
 8010d16:	e00c      	b.n	8010d32 <tcp_process+0x7be>
      break;
 8010d18:	bf00      	nop
 8010d1a:	e00a      	b.n	8010d32 <tcp_process+0x7be>
      break;
 8010d1c:	bf00      	nop
 8010d1e:	e008      	b.n	8010d32 <tcp_process+0x7be>
      break;
 8010d20:	bf00      	nop
 8010d22:	e006      	b.n	8010d32 <tcp_process+0x7be>
      break;
 8010d24:	bf00      	nop
 8010d26:	e004      	b.n	8010d32 <tcp_process+0x7be>
      break;
 8010d28:	bf00      	nop
 8010d2a:	e002      	b.n	8010d32 <tcp_process+0x7be>
      break;
 8010d2c:	bf00      	nop
 8010d2e:	e000      	b.n	8010d32 <tcp_process+0x7be>
      break;
 8010d30:	bf00      	nop
  }
  return ERR_OK;
 8010d32:	2300      	movs	r3, #0
}
 8010d34:	4618      	mov	r0, r3
 8010d36:	3724      	adds	r7, #36	; 0x24
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd90      	pop	{r4, r7, pc}
 8010d3c:	20008fdc 	.word	0x20008fdc
 8010d40:	20008fd8 	.word	0x20008fd8
 8010d44:	2000900c 	.word	0x2000900c
 8010d48:	20009004 	.word	0x20009004
 8010d4c:	2000900d 	.word	0x2000900d
 8010d50:	20008fd4 	.word	0x20008fd4

08010d54 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010d54:	b590      	push	{r4, r7, lr}
 8010d56:	b085      	sub	sp, #20
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d106      	bne.n	8010d72 <tcp_oos_insert_segment+0x1e>
 8010d64:	4b3b      	ldr	r3, [pc, #236]	; (8010e54 <tcp_oos_insert_segment+0x100>)
 8010d66:	f240 421f 	movw	r2, #1055	; 0x41f
 8010d6a:	493b      	ldr	r1, [pc, #236]	; (8010e58 <tcp_oos_insert_segment+0x104>)
 8010d6c:	483b      	ldr	r0, [pc, #236]	; (8010e5c <tcp_oos_insert_segment+0x108>)
 8010d6e:	f006 fa2b 	bl	80171c8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	68db      	ldr	r3, [r3, #12]
 8010d76:	899b      	ldrh	r3, [r3, #12]
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7fb fc0e 	bl	800c59c <lwip_htons>
 8010d80:	4603      	mov	r3, r0
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	f003 0301 	and.w	r3, r3, #1
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d028      	beq.n	8010dde <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010d8c:	6838      	ldr	r0, [r7, #0]
 8010d8e:	f7fe fa63 	bl	800f258 <tcp_segs_free>
    next = NULL;
 8010d92:	2300      	movs	r3, #0
 8010d94:	603b      	str	r3, [r7, #0]
 8010d96:	e056      	b.n	8010e46 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	899b      	ldrh	r3, [r3, #12]
 8010d9e:	b29b      	uxth	r3, r3
 8010da0:	4618      	mov	r0, r3
 8010da2:	f7fb fbfb 	bl	800c59c <lwip_htons>
 8010da6:	4603      	mov	r3, r0
 8010da8:	b2db      	uxtb	r3, r3
 8010daa:	f003 0301 	and.w	r3, r3, #1
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d00d      	beq.n	8010dce <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	68db      	ldr	r3, [r3, #12]
 8010db6:	899b      	ldrh	r3, [r3, #12]
 8010db8:	b29c      	uxth	r4, r3
 8010dba:	2001      	movs	r0, #1
 8010dbc:	f7fb fbee 	bl	800c59c <lwip_htons>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	68db      	ldr	r3, [r3, #12]
 8010dc8:	4322      	orrs	r2, r4
 8010dca:	b292      	uxth	r2, r2
 8010dcc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010dd8:	68f8      	ldr	r0, [r7, #12]
 8010dda:	f7fe fa52 	bl	800f282 <tcp_seg_free>
    while (next &&
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d00e      	beq.n	8010e02 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	891b      	ldrh	r3, [r3, #8]
 8010de8:	461a      	mov	r2, r3
 8010dea:	4b1d      	ldr	r3, [pc, #116]	; (8010e60 <tcp_oos_insert_segment+0x10c>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	441a      	add	r2, r3
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	6839      	ldr	r1, [r7, #0]
 8010df8:	8909      	ldrh	r1, [r1, #8]
 8010dfa:	440b      	add	r3, r1
 8010dfc:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	daca      	bge.n	8010d98 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d01e      	beq.n	8010e46 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	891b      	ldrh	r3, [r3, #8]
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	4b14      	ldr	r3, [pc, #80]	; (8010e60 <tcp_oos_insert_segment+0x10c>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	441a      	add	r2, r3
 8010e14:	683b      	ldr	r3, [r7, #0]
 8010e16:	68db      	ldr	r3, [r3, #12]
 8010e18:	685b      	ldr	r3, [r3, #4]
 8010e1a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	dd12      	ble.n	8010e46 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	68db      	ldr	r3, [r3, #12]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	b29a      	uxth	r2, r3
 8010e28:	4b0d      	ldr	r3, [pc, #52]	; (8010e60 <tcp_oos_insert_segment+0x10c>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	b29b      	uxth	r3, r3
 8010e2e:	1ad3      	subs	r3, r2, r3
 8010e30:	b29a      	uxth	r2, r3
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	685a      	ldr	r2, [r3, #4]
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	891b      	ldrh	r3, [r3, #8]
 8010e3e:	4619      	mov	r1, r3
 8010e40:	4610      	mov	r0, r2
 8010e42:	f7fc fd83 	bl	800d94c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	683a      	ldr	r2, [r7, #0]
 8010e4a:	601a      	str	r2, [r3, #0]
}
 8010e4c:	bf00      	nop
 8010e4e:	3714      	adds	r7, #20
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd90      	pop	{r4, r7, pc}
 8010e54:	080194b4 	.word	0x080194b4
 8010e58:	08019774 	.word	0x08019774
 8010e5c:	08019500 	.word	0x08019500
 8010e60:	20009000 	.word	0x20009000

08010e64 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010e64:	b5b0      	push	{r4, r5, r7, lr}
 8010e66:	b086      	sub	sp, #24
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	60f8      	str	r0, [r7, #12]
 8010e6c:	60b9      	str	r1, [r7, #8]
 8010e6e:	607a      	str	r2, [r7, #4]
 8010e70:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010e72:	e03e      	b.n	8010ef2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7fc ff70 	bl	800dd68 <pbuf_clen>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e92:	8a7a      	ldrh	r2, [r7, #18]
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d906      	bls.n	8010ea6 <tcp_free_acked_segments+0x42>
 8010e98:	4b2a      	ldr	r3, [pc, #168]	; (8010f44 <tcp_free_acked_segments+0xe0>)
 8010e9a:	f240 4257 	movw	r2, #1111	; 0x457
 8010e9e:	492a      	ldr	r1, [pc, #168]	; (8010f48 <tcp_free_acked_segments+0xe4>)
 8010ea0:	482a      	ldr	r0, [pc, #168]	; (8010f4c <tcp_free_acked_segments+0xe8>)
 8010ea2:	f006 f991 	bl	80171c8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010eac:	8a7b      	ldrh	r3, [r7, #18]
 8010eae:	1ad3      	subs	r3, r2, r3
 8010eb0:	b29a      	uxth	r2, r3
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	891a      	ldrh	r2, [r3, #8]
 8010ebc:	4b24      	ldr	r3, [pc, #144]	; (8010f50 <tcp_free_acked_segments+0xec>)
 8010ebe:	881b      	ldrh	r3, [r3, #0]
 8010ec0:	4413      	add	r3, r2
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	4b22      	ldr	r3, [pc, #136]	; (8010f50 <tcp_free_acked_segments+0xec>)
 8010ec6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010ec8:	6978      	ldr	r0, [r7, #20]
 8010eca:	f7fe f9da 	bl	800f282 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d00c      	beq.n	8010ef2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d109      	bne.n	8010ef2 <tcp_free_acked_segments+0x8e>
 8010ede:	683b      	ldr	r3, [r7, #0]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d106      	bne.n	8010ef2 <tcp_free_acked_segments+0x8e>
 8010ee4:	4b17      	ldr	r3, [pc, #92]	; (8010f44 <tcp_free_acked_segments+0xe0>)
 8010ee6:	f240 4261 	movw	r2, #1121	; 0x461
 8010eea:	491a      	ldr	r1, [pc, #104]	; (8010f54 <tcp_free_acked_segments+0xf0>)
 8010eec:	4817      	ldr	r0, [pc, #92]	; (8010f4c <tcp_free_acked_segments+0xe8>)
 8010eee:	f006 f96b 	bl	80171c8 <iprintf>
  while (seg_list != NULL &&
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d020      	beq.n	8010f3a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010ef8:	68bb      	ldr	r3, [r7, #8]
 8010efa:	68db      	ldr	r3, [r3, #12]
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7fb fb61 	bl	800c5c6 <lwip_htonl>
 8010f04:	4604      	mov	r4, r0
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	891b      	ldrh	r3, [r3, #8]
 8010f0a:	461d      	mov	r5, r3
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	68db      	ldr	r3, [r3, #12]
 8010f10:	899b      	ldrh	r3, [r3, #12]
 8010f12:	b29b      	uxth	r3, r3
 8010f14:	4618      	mov	r0, r3
 8010f16:	f7fb fb41 	bl	800c59c <lwip_htons>
 8010f1a:	4603      	mov	r3, r0
 8010f1c:	b2db      	uxtb	r3, r3
 8010f1e:	f003 0303 	and.w	r3, r3, #3
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d001      	beq.n	8010f2a <tcp_free_acked_segments+0xc6>
 8010f26:	2301      	movs	r3, #1
 8010f28:	e000      	b.n	8010f2c <tcp_free_acked_segments+0xc8>
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	442b      	add	r3, r5
 8010f2e:	18e2      	adds	r2, r4, r3
 8010f30:	4b09      	ldr	r3, [pc, #36]	; (8010f58 <tcp_free_acked_segments+0xf4>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	dd9c      	ble.n	8010e74 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010f3a:	68bb      	ldr	r3, [r7, #8]
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	3718      	adds	r7, #24
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bdb0      	pop	{r4, r5, r7, pc}
 8010f44:	080194b4 	.word	0x080194b4
 8010f48:	0801979c 	.word	0x0801979c
 8010f4c:	08019500 	.word	0x08019500
 8010f50:	20009008 	.word	0x20009008
 8010f54:	080197c4 	.word	0x080197c4
 8010f58:	20009004 	.word	0x20009004

08010f5c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010f5c:	b5b0      	push	{r4, r5, r7, lr}
 8010f5e:	b094      	sub	sp, #80	; 0x50
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010f64:	2300      	movs	r3, #0
 8010f66:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d106      	bne.n	8010f7c <tcp_receive+0x20>
 8010f6e:	4b91      	ldr	r3, [pc, #580]	; (80111b4 <tcp_receive+0x258>)
 8010f70:	f240 427b 	movw	r2, #1147	; 0x47b
 8010f74:	4990      	ldr	r1, [pc, #576]	; (80111b8 <tcp_receive+0x25c>)
 8010f76:	4891      	ldr	r0, [pc, #580]	; (80111bc <tcp_receive+0x260>)
 8010f78:	f006 f926 	bl	80171c8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	7d1b      	ldrb	r3, [r3, #20]
 8010f80:	2b03      	cmp	r3, #3
 8010f82:	d806      	bhi.n	8010f92 <tcp_receive+0x36>
 8010f84:	4b8b      	ldr	r3, [pc, #556]	; (80111b4 <tcp_receive+0x258>)
 8010f86:	f240 427c 	movw	r2, #1148	; 0x47c
 8010f8a:	498d      	ldr	r1, [pc, #564]	; (80111c0 <tcp_receive+0x264>)
 8010f8c:	488b      	ldr	r0, [pc, #556]	; (80111bc <tcp_receive+0x260>)
 8010f8e:	f006 f91b 	bl	80171c8 <iprintf>

  if (flags & TCP_ACK) {
 8010f92:	4b8c      	ldr	r3, [pc, #560]	; (80111c4 <tcp_receive+0x268>)
 8010f94:	781b      	ldrb	r3, [r3, #0]
 8010f96:	f003 0310 	and.w	r3, r3, #16
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f000 8264 	beq.w	8011468 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010fac:	4413      	add	r3, r2
 8010fae:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010fb4:	4b84      	ldr	r3, [pc, #528]	; (80111c8 <tcp_receive+0x26c>)
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	1ad3      	subs	r3, r2, r3
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	db1b      	blt.n	8010ff6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010fc2:	4b81      	ldr	r3, [pc, #516]	; (80111c8 <tcp_receive+0x26c>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	d106      	bne.n	8010fd8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010fce:	4b7f      	ldr	r3, [pc, #508]	; (80111cc <tcp_receive+0x270>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	1ad3      	subs	r3, r2, r3
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	db0e      	blt.n	8010ff6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010fdc:	4b7b      	ldr	r3, [pc, #492]	; (80111cc <tcp_receive+0x270>)
 8010fde:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d125      	bne.n	8011030 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010fe4:	4b7a      	ldr	r3, [pc, #488]	; (80111d0 <tcp_receive+0x274>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	89db      	ldrh	r3, [r3, #14]
 8010fea:	b29a      	uxth	r2, r3
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d91c      	bls.n	8011030 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010ff6:	4b76      	ldr	r3, [pc, #472]	; (80111d0 <tcp_receive+0x274>)
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	89db      	ldrh	r3, [r3, #14]
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011010:	429a      	cmp	r2, r3
 8011012:	d205      	bcs.n	8011020 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011020:	4b69      	ldr	r3, [pc, #420]	; (80111c8 <tcp_receive+0x26c>)
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011028:	4b68      	ldr	r3, [pc, #416]	; (80111cc <tcp_receive+0x270>)
 801102a:	681a      	ldr	r2, [r3, #0]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011030:	4b66      	ldr	r3, [pc, #408]	; (80111cc <tcp_receive+0x270>)
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011038:	1ad3      	subs	r3, r2, r3
 801103a:	2b00      	cmp	r3, #0
 801103c:	dc58      	bgt.n	80110f0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801103e:	4b65      	ldr	r3, [pc, #404]	; (80111d4 <tcp_receive+0x278>)
 8011040:	881b      	ldrh	r3, [r3, #0]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d14b      	bne.n	80110de <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011050:	4413      	add	r3, r2
 8011052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011054:	429a      	cmp	r2, r3
 8011056:	d142      	bne.n	80110de <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801105e:	2b00      	cmp	r3, #0
 8011060:	db3d      	blt.n	80110de <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011066:	4b59      	ldr	r3, [pc, #356]	; (80111cc <tcp_receive+0x270>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	429a      	cmp	r2, r3
 801106c:	d137      	bne.n	80110de <tcp_receive+0x182>
              found_dupack = 1;
 801106e:	2301      	movs	r3, #1
 8011070:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011078:	2bff      	cmp	r3, #255	; 0xff
 801107a:	d007      	beq.n	801108c <tcp_receive+0x130>
                ++pcb->dupacks;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011082:	3301      	adds	r3, #1
 8011084:	b2da      	uxtb	r2, r3
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011092:	2b03      	cmp	r3, #3
 8011094:	d91b      	bls.n	80110ce <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110a0:	4413      	add	r3, r2
 80110a2:	b29a      	uxth	r2, r3
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d30a      	bcc.n	80110c4 <tcp_receive+0x168>
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110b8:	4413      	add	r3, r2
 80110ba:	b29a      	uxth	r2, r3
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80110c2:	e004      	b.n	80110ce <tcp_receive+0x172>
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80110ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80110d4:	2b02      	cmp	r3, #2
 80110d6:	d902      	bls.n	80110de <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f001 feeb 	bl	8012eb4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80110de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	f040 8161 	bne.w	80113a8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2200      	movs	r2, #0
 80110ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80110ee:	e15b      	b.n	80113a8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110f0:	4b36      	ldr	r3, [pc, #216]	; (80111cc <tcp_receive+0x270>)
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80110f8:	1ad3      	subs	r3, r2, r3
 80110fa:	3b01      	subs	r3, #1
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	f2c0 814e 	blt.w	801139e <tcp_receive+0x442>
 8011102:	4b32      	ldr	r3, [pc, #200]	; (80111cc <tcp_receive+0x270>)
 8011104:	681a      	ldr	r2, [r3, #0]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801110a:	1ad3      	subs	r3, r2, r3
 801110c:	2b00      	cmp	r3, #0
 801110e:	f300 8146 	bgt.w	801139e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	8b5b      	ldrh	r3, [r3, #26]
 8011116:	f003 0304 	and.w	r3, r3, #4
 801111a:	2b00      	cmp	r3, #0
 801111c:	d010      	beq.n	8011140 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	8b5b      	ldrh	r3, [r3, #26]
 8011122:	f023 0304 	bic.w	r3, r3, #4
 8011126:	b29a      	uxth	r2, r3
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2200      	movs	r2, #0
 801113c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2200      	movs	r2, #0
 8011144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801114e:	10db      	asrs	r3, r3, #3
 8011150:	b21b      	sxth	r3, r3
 8011152:	b29a      	uxth	r2, r3
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801115a:	b29b      	uxth	r3, r3
 801115c:	4413      	add	r3, r2
 801115e:	b29b      	uxth	r3, r3
 8011160:	b21a      	sxth	r2, r3
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011168:	4b18      	ldr	r3, [pc, #96]	; (80111cc <tcp_receive+0x270>)
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	b29a      	uxth	r2, r3
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011172:	b29b      	uxth	r3, r3
 8011174:	1ad3      	subs	r3, r2, r3
 8011176:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2200      	movs	r2, #0
 801117c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8011180:	4b12      	ldr	r3, [pc, #72]	; (80111cc <tcp_receive+0x270>)
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	7d1b      	ldrb	r3, [r3, #20]
 801118c:	2b03      	cmp	r3, #3
 801118e:	f240 8097 	bls.w	80112c0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801119e:	429a      	cmp	r2, r3
 80111a0:	d245      	bcs.n	801122e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	8b5b      	ldrh	r3, [r3, #26]
 80111a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d014      	beq.n	80111d8 <tcp_receive+0x27c>
 80111ae:	2301      	movs	r3, #1
 80111b0:	e013      	b.n	80111da <tcp_receive+0x27e>
 80111b2:	bf00      	nop
 80111b4:	080194b4 	.word	0x080194b4
 80111b8:	080197e4 	.word	0x080197e4
 80111bc:	08019500 	.word	0x08019500
 80111c0:	08019800 	.word	0x08019800
 80111c4:	2000900c 	.word	0x2000900c
 80111c8:	20009000 	.word	0x20009000
 80111cc:	20009004 	.word	0x20009004
 80111d0:	20008ff0 	.word	0x20008ff0
 80111d4:	2000900a 	.word	0x2000900a
 80111d8:	2302      	movs	r3, #2
 80111da:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80111de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80111e2:	b29a      	uxth	r2, r3
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80111e8:	fb12 f303 	smulbb	r3, r2, r3
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80111f0:	4293      	cmp	r3, r2
 80111f2:	bf28      	it	cs
 80111f4:	4613      	movcs	r3, r2
 80111f6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80111fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011200:	4413      	add	r3, r2
 8011202:	b29a      	uxth	r2, r3
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801120a:	429a      	cmp	r2, r3
 801120c:	d309      	bcc.n	8011222 <tcp_receive+0x2c6>
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011214:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011216:	4413      	add	r3, r2
 8011218:	b29a      	uxth	r2, r3
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011220:	e04e      	b.n	80112c0 <tcp_receive+0x364>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011228:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801122c:	e048      	b.n	80112c0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011234:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011236:	4413      	add	r3, r2
 8011238:	b29a      	uxth	r2, r3
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011240:	429a      	cmp	r2, r3
 8011242:	d309      	bcc.n	8011258 <tcp_receive+0x2fc>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801124a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801124c:	4413      	add	r3, r2
 801124e:	b29a      	uxth	r2, r3
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011256:	e004      	b.n	8011262 <tcp_receive+0x306>
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801125e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801126e:	429a      	cmp	r2, r3
 8011270:	d326      	bcc.n	80112c0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801127e:	1ad3      	subs	r3, r2, r3
 8011280:	b29a      	uxth	r2, r3
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011292:	4413      	add	r3, r2
 8011294:	b29a      	uxth	r2, r3
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801129c:	429a      	cmp	r2, r3
 801129e:	d30a      	bcc.n	80112b6 <tcp_receive+0x35a>
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80112aa:	4413      	add	r3, r2
 80112ac:	b29a      	uxth	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80112b4:	e004      	b.n	80112c0 <tcp_receive+0x364>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80112c8:	4a98      	ldr	r2, [pc, #608]	; (801152c <tcp_receive+0x5d0>)
 80112ca:	6878      	ldr	r0, [r7, #4]
 80112cc:	f7ff fdca 	bl	8010e64 <tcp_free_acked_segments>
 80112d0:	4602      	mov	r2, r0
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112de:	4a94      	ldr	r2, [pc, #592]	; (8011530 <tcp_receive+0x5d4>)
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f7ff fdbf 	bl	8010e64 <tcp_free_acked_segments>
 80112e6:	4602      	mov	r2, r0
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d104      	bne.n	80112fe <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112fa:	861a      	strh	r2, [r3, #48]	; 0x30
 80112fc:	e002      	b.n	8011304 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2200      	movs	r2, #0
 8011302:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2200      	movs	r2, #0
 8011308:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801130e:	2b00      	cmp	r3, #0
 8011310:	d103      	bne.n	801131a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011320:	4b84      	ldr	r3, [pc, #528]	; (8011534 <tcp_receive+0x5d8>)
 8011322:	881b      	ldrh	r3, [r3, #0]
 8011324:	4413      	add	r3, r2
 8011326:	b29a      	uxth	r2, r3
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	8b5b      	ldrh	r3, [r3, #26]
 8011332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011336:	2b00      	cmp	r3, #0
 8011338:	d035      	beq.n	80113a6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801133e:	2b00      	cmp	r3, #0
 8011340:	d118      	bne.n	8011374 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011346:	2b00      	cmp	r3, #0
 8011348:	d00c      	beq.n	8011364 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011352:	68db      	ldr	r3, [r3, #12]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	4618      	mov	r0, r3
 8011358:	f7fb f935 	bl	800c5c6 <lwip_htonl>
 801135c:	4603      	mov	r3, r0
 801135e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011360:	2b00      	cmp	r3, #0
 8011362:	dc20      	bgt.n	80113a6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	8b5b      	ldrh	r3, [r3, #26]
 8011368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801136c:	b29a      	uxth	r2, r3
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011372:	e018      	b.n	80113a6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	4618      	mov	r0, r3
 8011382:	f7fb f920 	bl	800c5c6 <lwip_htonl>
 8011386:	4603      	mov	r3, r0
 8011388:	1ae3      	subs	r3, r4, r3
 801138a:	2b00      	cmp	r3, #0
 801138c:	dc0b      	bgt.n	80113a6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	8b5b      	ldrh	r3, [r3, #26]
 8011392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011396:	b29a      	uxth	r2, r3
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801139c:	e003      	b.n	80113a6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f001 ff76 	bl	8013290 <tcp_send_empty_ack>
 80113a4:	e000      	b.n	80113a8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80113a6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d05b      	beq.n	8011468 <tcp_receive+0x50c>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113b4:	4b60      	ldr	r3, [pc, #384]	; (8011538 <tcp_receive+0x5dc>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	1ad3      	subs	r3, r2, r3
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	da54      	bge.n	8011468 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80113be:	4b5f      	ldr	r3, [pc, #380]	; (801153c <tcp_receive+0x5e0>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	1ad3      	subs	r3, r2, r3
 80113cc:	b29b      	uxth	r3, r3
 80113ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80113d2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80113dc:	10db      	asrs	r3, r3, #3
 80113de:	b21b      	sxth	r3, r3
 80113e0:	b29b      	uxth	r3, r3
 80113e2:	1ad3      	subs	r3, r2, r3
 80113e4:	b29b      	uxth	r3, r3
 80113e6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80113f0:	b29a      	uxth	r2, r3
 80113f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80113f6:	4413      	add	r3, r2
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	b21a      	sxth	r2, r3
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011400:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011404:	2b00      	cmp	r3, #0
 8011406:	da05      	bge.n	8011414 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011408:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801140c:	425b      	negs	r3, r3
 801140e:	b29b      	uxth	r3, r3
 8011410:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011414:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801141e:	109b      	asrs	r3, r3, #2
 8011420:	b21b      	sxth	r3, r3
 8011422:	b29b      	uxth	r3, r3
 8011424:	1ad3      	subs	r3, r2, r3
 8011426:	b29b      	uxth	r3, r3
 8011428:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011432:	b29a      	uxth	r2, r3
 8011434:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011438:	4413      	add	r3, r2
 801143a:	b29b      	uxth	r3, r3
 801143c:	b21a      	sxth	r2, r3
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011448:	10db      	asrs	r3, r3, #3
 801144a:	b21b      	sxth	r3, r3
 801144c:	b29a      	uxth	r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011454:	b29b      	uxth	r3, r3
 8011456:	4413      	add	r3, r2
 8011458:	b29b      	uxth	r3, r3
 801145a:	b21a      	sxth	r2, r3
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2200      	movs	r2, #0
 8011466:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011468:	4b35      	ldr	r3, [pc, #212]	; (8011540 <tcp_receive+0x5e4>)
 801146a:	881b      	ldrh	r3, [r3, #0]
 801146c:	2b00      	cmp	r3, #0
 801146e:	f000 84e2 	beq.w	8011e36 <tcp_receive+0xeda>
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	7d1b      	ldrb	r3, [r3, #20]
 8011476:	2b06      	cmp	r3, #6
 8011478:	f200 84dd 	bhi.w	8011e36 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011480:	4b30      	ldr	r3, [pc, #192]	; (8011544 <tcp_receive+0x5e8>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	1ad3      	subs	r3, r2, r3
 8011486:	3b01      	subs	r3, #1
 8011488:	2b00      	cmp	r3, #0
 801148a:	f2c0 808f 	blt.w	80115ac <tcp_receive+0x650>
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011492:	4b2b      	ldr	r3, [pc, #172]	; (8011540 <tcp_receive+0x5e4>)
 8011494:	881b      	ldrh	r3, [r3, #0]
 8011496:	4619      	mov	r1, r3
 8011498:	4b2a      	ldr	r3, [pc, #168]	; (8011544 <tcp_receive+0x5e8>)
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	440b      	add	r3, r1
 801149e:	1ad3      	subs	r3, r2, r3
 80114a0:	3301      	adds	r3, #1
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	f300 8082 	bgt.w	80115ac <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80114a8:	4b27      	ldr	r3, [pc, #156]	; (8011548 <tcp_receive+0x5ec>)
 80114aa:	685b      	ldr	r3, [r3, #4]
 80114ac:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80114b2:	4b24      	ldr	r3, [pc, #144]	; (8011544 <tcp_receive+0x5e8>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	1ad3      	subs	r3, r2, r3
 80114b8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80114ba:	4b23      	ldr	r3, [pc, #140]	; (8011548 <tcp_receive+0x5ec>)
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d106      	bne.n	80114d0 <tcp_receive+0x574>
 80114c2:	4b22      	ldr	r3, [pc, #136]	; (801154c <tcp_receive+0x5f0>)
 80114c4:	f240 5294 	movw	r2, #1428	; 0x594
 80114c8:	4921      	ldr	r1, [pc, #132]	; (8011550 <tcp_receive+0x5f4>)
 80114ca:	4822      	ldr	r0, [pc, #136]	; (8011554 <tcp_receive+0x5f8>)
 80114cc:	f005 fe7c 	bl	80171c8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80114d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80114d6:	4293      	cmp	r3, r2
 80114d8:	d906      	bls.n	80114e8 <tcp_receive+0x58c>
 80114da:	4b1c      	ldr	r3, [pc, #112]	; (801154c <tcp_receive+0x5f0>)
 80114dc:	f240 5295 	movw	r2, #1429	; 0x595
 80114e0:	491d      	ldr	r1, [pc, #116]	; (8011558 <tcp_receive+0x5fc>)
 80114e2:	481c      	ldr	r0, [pc, #112]	; (8011554 <tcp_receive+0x5f8>)
 80114e4:	f005 fe70 	bl	80171c8 <iprintf>
      off = (u16_t)off32;
 80114e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80114ee:	4b16      	ldr	r3, [pc, #88]	; (8011548 <tcp_receive+0x5ec>)
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	891b      	ldrh	r3, [r3, #8]
 80114f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d906      	bls.n	801150a <tcp_receive+0x5ae>
 80114fc:	4b13      	ldr	r3, [pc, #76]	; (801154c <tcp_receive+0x5f0>)
 80114fe:	f240 5297 	movw	r2, #1431	; 0x597
 8011502:	4916      	ldr	r1, [pc, #88]	; (801155c <tcp_receive+0x600>)
 8011504:	4813      	ldr	r0, [pc, #76]	; (8011554 <tcp_receive+0x5f8>)
 8011506:	f005 fe5f 	bl	80171c8 <iprintf>
      inseg.len -= off;
 801150a:	4b0f      	ldr	r3, [pc, #60]	; (8011548 <tcp_receive+0x5ec>)
 801150c:	891a      	ldrh	r2, [r3, #8]
 801150e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011512:	1ad3      	subs	r3, r2, r3
 8011514:	b29a      	uxth	r2, r3
 8011516:	4b0c      	ldr	r3, [pc, #48]	; (8011548 <tcp_receive+0x5ec>)
 8011518:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801151a:	4b0b      	ldr	r3, [pc, #44]	; (8011548 <tcp_receive+0x5ec>)
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	891a      	ldrh	r2, [r3, #8]
 8011520:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011524:	1ad3      	subs	r3, r2, r3
 8011526:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011528:	e02a      	b.n	8011580 <tcp_receive+0x624>
 801152a:	bf00      	nop
 801152c:	0801981c 	.word	0x0801981c
 8011530:	08019824 	.word	0x08019824
 8011534:	20009008 	.word	0x20009008
 8011538:	20009004 	.word	0x20009004
 801153c:	20008fc8 	.word	0x20008fc8
 8011540:	2000900a 	.word	0x2000900a
 8011544:	20009000 	.word	0x20009000
 8011548:	20008fe0 	.word	0x20008fe0
 801154c:	080194b4 	.word	0x080194b4
 8011550:	0801982c 	.word	0x0801982c
 8011554:	08019500 	.word	0x08019500
 8011558:	0801983c 	.word	0x0801983c
 801155c:	0801984c 	.word	0x0801984c
        off -= p->len;
 8011560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011562:	895b      	ldrh	r3, [r3, #10]
 8011564:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011568:	1ad3      	subs	r3, r2, r3
 801156a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801156e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011570:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011572:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011576:	2200      	movs	r2, #0
 8011578:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801157a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011582:	895b      	ldrh	r3, [r3, #10]
 8011584:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011588:	429a      	cmp	r2, r3
 801158a:	d8e9      	bhi.n	8011560 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801158c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011590:	4619      	mov	r1, r3
 8011592:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011594:	f7fc fada 	bl	800db4c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801159c:	4a91      	ldr	r2, [pc, #580]	; (80117e4 <tcp_receive+0x888>)
 801159e:	6013      	str	r3, [r2, #0]
 80115a0:	4b91      	ldr	r3, [pc, #580]	; (80117e8 <tcp_receive+0x88c>)
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	4a8f      	ldr	r2, [pc, #572]	; (80117e4 <tcp_receive+0x888>)
 80115a6:	6812      	ldr	r2, [r2, #0]
 80115a8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80115aa:	e00d      	b.n	80115c8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80115ac:	4b8d      	ldr	r3, [pc, #564]	; (80117e4 <tcp_receive+0x888>)
 80115ae:	681a      	ldr	r2, [r3, #0]
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b4:	1ad3      	subs	r3, r2, r3
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	da06      	bge.n	80115c8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	8b5b      	ldrh	r3, [r3, #26]
 80115be:	f043 0302 	orr.w	r3, r3, #2
 80115c2:	b29a      	uxth	r2, r3
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80115c8:	4b86      	ldr	r3, [pc, #536]	; (80117e4 <tcp_receive+0x888>)
 80115ca:	681a      	ldr	r2, [r3, #0]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	f2c0 842a 	blt.w	8011e2c <tcp_receive+0xed0>
 80115d8:	4b82      	ldr	r3, [pc, #520]	; (80117e4 <tcp_receive+0x888>)
 80115da:	681a      	ldr	r2, [r3, #0]
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115e0:	6879      	ldr	r1, [r7, #4]
 80115e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80115e4:	440b      	add	r3, r1
 80115e6:	1ad3      	subs	r3, r2, r3
 80115e8:	3301      	adds	r3, #1
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	f300 841e 	bgt.w	8011e2c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80115f4:	4b7b      	ldr	r3, [pc, #492]	; (80117e4 <tcp_receive+0x888>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	429a      	cmp	r2, r3
 80115fa:	f040 829a 	bne.w	8011b32 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80115fe:	4b7a      	ldr	r3, [pc, #488]	; (80117e8 <tcp_receive+0x88c>)
 8011600:	891c      	ldrh	r4, [r3, #8]
 8011602:	4b79      	ldr	r3, [pc, #484]	; (80117e8 <tcp_receive+0x88c>)
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	899b      	ldrh	r3, [r3, #12]
 8011608:	b29b      	uxth	r3, r3
 801160a:	4618      	mov	r0, r3
 801160c:	f7fa ffc6 	bl	800c59c <lwip_htons>
 8011610:	4603      	mov	r3, r0
 8011612:	b2db      	uxtb	r3, r3
 8011614:	f003 0303 	and.w	r3, r3, #3
 8011618:	2b00      	cmp	r3, #0
 801161a:	d001      	beq.n	8011620 <tcp_receive+0x6c4>
 801161c:	2301      	movs	r3, #1
 801161e:	e000      	b.n	8011622 <tcp_receive+0x6c6>
 8011620:	2300      	movs	r3, #0
 8011622:	4423      	add	r3, r4
 8011624:	b29a      	uxth	r2, r3
 8011626:	4b71      	ldr	r3, [pc, #452]	; (80117ec <tcp_receive+0x890>)
 8011628:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801162e:	4b6f      	ldr	r3, [pc, #444]	; (80117ec <tcp_receive+0x890>)
 8011630:	881b      	ldrh	r3, [r3, #0]
 8011632:	429a      	cmp	r2, r3
 8011634:	d275      	bcs.n	8011722 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011636:	4b6c      	ldr	r3, [pc, #432]	; (80117e8 <tcp_receive+0x88c>)
 8011638:	68db      	ldr	r3, [r3, #12]
 801163a:	899b      	ldrh	r3, [r3, #12]
 801163c:	b29b      	uxth	r3, r3
 801163e:	4618      	mov	r0, r3
 8011640:	f7fa ffac 	bl	800c59c <lwip_htons>
 8011644:	4603      	mov	r3, r0
 8011646:	b2db      	uxtb	r3, r3
 8011648:	f003 0301 	and.w	r3, r3, #1
 801164c:	2b00      	cmp	r3, #0
 801164e:	d01f      	beq.n	8011690 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011650:	4b65      	ldr	r3, [pc, #404]	; (80117e8 <tcp_receive+0x88c>)
 8011652:	68db      	ldr	r3, [r3, #12]
 8011654:	899b      	ldrh	r3, [r3, #12]
 8011656:	b29b      	uxth	r3, r3
 8011658:	b21b      	sxth	r3, r3
 801165a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801165e:	b21c      	sxth	r4, r3
 8011660:	4b61      	ldr	r3, [pc, #388]	; (80117e8 <tcp_receive+0x88c>)
 8011662:	68db      	ldr	r3, [r3, #12]
 8011664:	899b      	ldrh	r3, [r3, #12]
 8011666:	b29b      	uxth	r3, r3
 8011668:	4618      	mov	r0, r3
 801166a:	f7fa ff97 	bl	800c59c <lwip_htons>
 801166e:	4603      	mov	r3, r0
 8011670:	b2db      	uxtb	r3, r3
 8011672:	b29b      	uxth	r3, r3
 8011674:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011678:	b29b      	uxth	r3, r3
 801167a:	4618      	mov	r0, r3
 801167c:	f7fa ff8e 	bl	800c59c <lwip_htons>
 8011680:	4603      	mov	r3, r0
 8011682:	b21b      	sxth	r3, r3
 8011684:	4323      	orrs	r3, r4
 8011686:	b21a      	sxth	r2, r3
 8011688:	4b57      	ldr	r3, [pc, #348]	; (80117e8 <tcp_receive+0x88c>)
 801168a:	68db      	ldr	r3, [r3, #12]
 801168c:	b292      	uxth	r2, r2
 801168e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011694:	4b54      	ldr	r3, [pc, #336]	; (80117e8 <tcp_receive+0x88c>)
 8011696:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011698:	4b53      	ldr	r3, [pc, #332]	; (80117e8 <tcp_receive+0x88c>)
 801169a:	68db      	ldr	r3, [r3, #12]
 801169c:	899b      	ldrh	r3, [r3, #12]
 801169e:	b29b      	uxth	r3, r3
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fa ff7b 	bl	800c59c <lwip_htons>
 80116a6:	4603      	mov	r3, r0
 80116a8:	b2db      	uxtb	r3, r3
 80116aa:	f003 0302 	and.w	r3, r3, #2
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d005      	beq.n	80116be <tcp_receive+0x762>
            inseg.len -= 1;
 80116b2:	4b4d      	ldr	r3, [pc, #308]	; (80117e8 <tcp_receive+0x88c>)
 80116b4:	891b      	ldrh	r3, [r3, #8]
 80116b6:	3b01      	subs	r3, #1
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	4b4b      	ldr	r3, [pc, #300]	; (80117e8 <tcp_receive+0x88c>)
 80116bc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80116be:	4b4a      	ldr	r3, [pc, #296]	; (80117e8 <tcp_receive+0x88c>)
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	4a49      	ldr	r2, [pc, #292]	; (80117e8 <tcp_receive+0x88c>)
 80116c4:	8912      	ldrh	r2, [r2, #8]
 80116c6:	4611      	mov	r1, r2
 80116c8:	4618      	mov	r0, r3
 80116ca:	f7fc f93f 	bl	800d94c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80116ce:	4b46      	ldr	r3, [pc, #280]	; (80117e8 <tcp_receive+0x88c>)
 80116d0:	891c      	ldrh	r4, [r3, #8]
 80116d2:	4b45      	ldr	r3, [pc, #276]	; (80117e8 <tcp_receive+0x88c>)
 80116d4:	68db      	ldr	r3, [r3, #12]
 80116d6:	899b      	ldrh	r3, [r3, #12]
 80116d8:	b29b      	uxth	r3, r3
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fa ff5e 	bl	800c59c <lwip_htons>
 80116e0:	4603      	mov	r3, r0
 80116e2:	b2db      	uxtb	r3, r3
 80116e4:	f003 0303 	and.w	r3, r3, #3
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d001      	beq.n	80116f0 <tcp_receive+0x794>
 80116ec:	2301      	movs	r3, #1
 80116ee:	e000      	b.n	80116f2 <tcp_receive+0x796>
 80116f0:	2300      	movs	r3, #0
 80116f2:	4423      	add	r3, r4
 80116f4:	b29a      	uxth	r2, r3
 80116f6:	4b3d      	ldr	r3, [pc, #244]	; (80117ec <tcp_receive+0x890>)
 80116f8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80116fa:	4b3c      	ldr	r3, [pc, #240]	; (80117ec <tcp_receive+0x890>)
 80116fc:	881b      	ldrh	r3, [r3, #0]
 80116fe:	461a      	mov	r2, r3
 8011700:	4b38      	ldr	r3, [pc, #224]	; (80117e4 <tcp_receive+0x888>)
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	441a      	add	r2, r3
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801170a:	6879      	ldr	r1, [r7, #4]
 801170c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801170e:	440b      	add	r3, r1
 8011710:	429a      	cmp	r2, r3
 8011712:	d006      	beq.n	8011722 <tcp_receive+0x7c6>
 8011714:	4b36      	ldr	r3, [pc, #216]	; (80117f0 <tcp_receive+0x894>)
 8011716:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801171a:	4936      	ldr	r1, [pc, #216]	; (80117f4 <tcp_receive+0x898>)
 801171c:	4836      	ldr	r0, [pc, #216]	; (80117f8 <tcp_receive+0x89c>)
 801171e:	f005 fd53 	bl	80171c8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011726:	2b00      	cmp	r3, #0
 8011728:	f000 80e7 	beq.w	80118fa <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801172c:	4b2e      	ldr	r3, [pc, #184]	; (80117e8 <tcp_receive+0x88c>)
 801172e:	68db      	ldr	r3, [r3, #12]
 8011730:	899b      	ldrh	r3, [r3, #12]
 8011732:	b29b      	uxth	r3, r3
 8011734:	4618      	mov	r0, r3
 8011736:	f7fa ff31 	bl	800c59c <lwip_htons>
 801173a:	4603      	mov	r3, r0
 801173c:	b2db      	uxtb	r3, r3
 801173e:	f003 0301 	and.w	r3, r3, #1
 8011742:	2b00      	cmp	r3, #0
 8011744:	d010      	beq.n	8011768 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011746:	e00a      	b.n	801175e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801174c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011752:	681a      	ldr	r2, [r3, #0]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011758:	68f8      	ldr	r0, [r7, #12]
 801175a:	f7fd fd92 	bl	800f282 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011762:	2b00      	cmp	r3, #0
 8011764:	d1f0      	bne.n	8011748 <tcp_receive+0x7ec>
 8011766:	e0c8      	b.n	80118fa <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801176c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801176e:	e052      	b.n	8011816 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	899b      	ldrh	r3, [r3, #12]
 8011776:	b29b      	uxth	r3, r3
 8011778:	4618      	mov	r0, r3
 801177a:	f7fa ff0f 	bl	800c59c <lwip_htons>
 801177e:	4603      	mov	r3, r0
 8011780:	b2db      	uxtb	r3, r3
 8011782:	f003 0301 	and.w	r3, r3, #1
 8011786:	2b00      	cmp	r3, #0
 8011788:	d03d      	beq.n	8011806 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801178a:	4b17      	ldr	r3, [pc, #92]	; (80117e8 <tcp_receive+0x88c>)
 801178c:	68db      	ldr	r3, [r3, #12]
 801178e:	899b      	ldrh	r3, [r3, #12]
 8011790:	b29b      	uxth	r3, r3
 8011792:	4618      	mov	r0, r3
 8011794:	f7fa ff02 	bl	800c59c <lwip_htons>
 8011798:	4603      	mov	r3, r0
 801179a:	b2db      	uxtb	r3, r3
 801179c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d130      	bne.n	8011806 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80117a4:	4b10      	ldr	r3, [pc, #64]	; (80117e8 <tcp_receive+0x88c>)
 80117a6:	68db      	ldr	r3, [r3, #12]
 80117a8:	899b      	ldrh	r3, [r3, #12]
 80117aa:	b29c      	uxth	r4, r3
 80117ac:	2001      	movs	r0, #1
 80117ae:	f7fa fef5 	bl	800c59c <lwip_htons>
 80117b2:	4603      	mov	r3, r0
 80117b4:	461a      	mov	r2, r3
 80117b6:	4b0c      	ldr	r3, [pc, #48]	; (80117e8 <tcp_receive+0x88c>)
 80117b8:	68db      	ldr	r3, [r3, #12]
 80117ba:	4322      	orrs	r2, r4
 80117bc:	b292      	uxth	r2, r2
 80117be:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80117c0:	4b09      	ldr	r3, [pc, #36]	; (80117e8 <tcp_receive+0x88c>)
 80117c2:	891c      	ldrh	r4, [r3, #8]
 80117c4:	4b08      	ldr	r3, [pc, #32]	; (80117e8 <tcp_receive+0x88c>)
 80117c6:	68db      	ldr	r3, [r3, #12]
 80117c8:	899b      	ldrh	r3, [r3, #12]
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7fa fee5 	bl	800c59c <lwip_htons>
 80117d2:	4603      	mov	r3, r0
 80117d4:	b2db      	uxtb	r3, r3
 80117d6:	f003 0303 	and.w	r3, r3, #3
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d00e      	beq.n	80117fc <tcp_receive+0x8a0>
 80117de:	2301      	movs	r3, #1
 80117e0:	e00d      	b.n	80117fe <tcp_receive+0x8a2>
 80117e2:	bf00      	nop
 80117e4:	20009000 	.word	0x20009000
 80117e8:	20008fe0 	.word	0x20008fe0
 80117ec:	2000900a 	.word	0x2000900a
 80117f0:	080194b4 	.word	0x080194b4
 80117f4:	0801985c 	.word	0x0801985c
 80117f8:	08019500 	.word	0x08019500
 80117fc:	2300      	movs	r3, #0
 80117fe:	4423      	add	r3, r4
 8011800:	b29a      	uxth	r2, r3
 8011802:	4b98      	ldr	r3, [pc, #608]	; (8011a64 <tcp_receive+0xb08>)
 8011804:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011808:	613b      	str	r3, [r7, #16]
              next = next->next;
 801180a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011810:	6938      	ldr	r0, [r7, #16]
 8011812:	f7fd fd36 	bl	800f282 <tcp_seg_free>
            while (next &&
 8011816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011818:	2b00      	cmp	r3, #0
 801181a:	d00e      	beq.n	801183a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801181c:	4b91      	ldr	r3, [pc, #580]	; (8011a64 <tcp_receive+0xb08>)
 801181e:	881b      	ldrh	r3, [r3, #0]
 8011820:	461a      	mov	r2, r3
 8011822:	4b91      	ldr	r3, [pc, #580]	; (8011a68 <tcp_receive+0xb0c>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	441a      	add	r2, r3
 8011828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801182a:	68db      	ldr	r3, [r3, #12]
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011830:	8909      	ldrh	r1, [r1, #8]
 8011832:	440b      	add	r3, r1
 8011834:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011836:	2b00      	cmp	r3, #0
 8011838:	da9a      	bge.n	8011770 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801183a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801183c:	2b00      	cmp	r3, #0
 801183e:	d059      	beq.n	80118f4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011840:	4b88      	ldr	r3, [pc, #544]	; (8011a64 <tcp_receive+0xb08>)
 8011842:	881b      	ldrh	r3, [r3, #0]
 8011844:	461a      	mov	r2, r3
 8011846:	4b88      	ldr	r3, [pc, #544]	; (8011a68 <tcp_receive+0xb0c>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	441a      	add	r2, r3
 801184c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801184e:	68db      	ldr	r3, [r3, #12]
 8011850:	685b      	ldr	r3, [r3, #4]
 8011852:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011854:	2b00      	cmp	r3, #0
 8011856:	dd4d      	ble.n	80118f4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801185a:	68db      	ldr	r3, [r3, #12]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	b29a      	uxth	r2, r3
 8011860:	4b81      	ldr	r3, [pc, #516]	; (8011a68 <tcp_receive+0xb0c>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	b29b      	uxth	r3, r3
 8011866:	1ad3      	subs	r3, r2, r3
 8011868:	b29a      	uxth	r2, r3
 801186a:	4b80      	ldr	r3, [pc, #512]	; (8011a6c <tcp_receive+0xb10>)
 801186c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801186e:	4b7f      	ldr	r3, [pc, #508]	; (8011a6c <tcp_receive+0xb10>)
 8011870:	68db      	ldr	r3, [r3, #12]
 8011872:	899b      	ldrh	r3, [r3, #12]
 8011874:	b29b      	uxth	r3, r3
 8011876:	4618      	mov	r0, r3
 8011878:	f7fa fe90 	bl	800c59c <lwip_htons>
 801187c:	4603      	mov	r3, r0
 801187e:	b2db      	uxtb	r3, r3
 8011880:	f003 0302 	and.w	r3, r3, #2
 8011884:	2b00      	cmp	r3, #0
 8011886:	d005      	beq.n	8011894 <tcp_receive+0x938>
                inseg.len -= 1;
 8011888:	4b78      	ldr	r3, [pc, #480]	; (8011a6c <tcp_receive+0xb10>)
 801188a:	891b      	ldrh	r3, [r3, #8]
 801188c:	3b01      	subs	r3, #1
 801188e:	b29a      	uxth	r2, r3
 8011890:	4b76      	ldr	r3, [pc, #472]	; (8011a6c <tcp_receive+0xb10>)
 8011892:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011894:	4b75      	ldr	r3, [pc, #468]	; (8011a6c <tcp_receive+0xb10>)
 8011896:	685b      	ldr	r3, [r3, #4]
 8011898:	4a74      	ldr	r2, [pc, #464]	; (8011a6c <tcp_receive+0xb10>)
 801189a:	8912      	ldrh	r2, [r2, #8]
 801189c:	4611      	mov	r1, r2
 801189e:	4618      	mov	r0, r3
 80118a0:	f7fc f854 	bl	800d94c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80118a4:	4b71      	ldr	r3, [pc, #452]	; (8011a6c <tcp_receive+0xb10>)
 80118a6:	891c      	ldrh	r4, [r3, #8]
 80118a8:	4b70      	ldr	r3, [pc, #448]	; (8011a6c <tcp_receive+0xb10>)
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	899b      	ldrh	r3, [r3, #12]
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7fa fe73 	bl	800c59c <lwip_htons>
 80118b6:	4603      	mov	r3, r0
 80118b8:	b2db      	uxtb	r3, r3
 80118ba:	f003 0303 	and.w	r3, r3, #3
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d001      	beq.n	80118c6 <tcp_receive+0x96a>
 80118c2:	2301      	movs	r3, #1
 80118c4:	e000      	b.n	80118c8 <tcp_receive+0x96c>
 80118c6:	2300      	movs	r3, #0
 80118c8:	4423      	add	r3, r4
 80118ca:	b29a      	uxth	r2, r3
 80118cc:	4b65      	ldr	r3, [pc, #404]	; (8011a64 <tcp_receive+0xb08>)
 80118ce:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80118d0:	4b64      	ldr	r3, [pc, #400]	; (8011a64 <tcp_receive+0xb08>)
 80118d2:	881b      	ldrh	r3, [r3, #0]
 80118d4:	461a      	mov	r2, r3
 80118d6:	4b64      	ldr	r3, [pc, #400]	; (8011a68 <tcp_receive+0xb0c>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	441a      	add	r2, r3
 80118dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	429a      	cmp	r2, r3
 80118e4:	d006      	beq.n	80118f4 <tcp_receive+0x998>
 80118e6:	4b62      	ldr	r3, [pc, #392]	; (8011a70 <tcp_receive+0xb14>)
 80118e8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80118ec:	4961      	ldr	r1, [pc, #388]	; (8011a74 <tcp_receive+0xb18>)
 80118ee:	4862      	ldr	r0, [pc, #392]	; (8011a78 <tcp_receive+0xb1c>)
 80118f0:	f005 fc6a 	bl	80171c8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80118f8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80118fa:	4b5a      	ldr	r3, [pc, #360]	; (8011a64 <tcp_receive+0xb08>)
 80118fc:	881b      	ldrh	r3, [r3, #0]
 80118fe:	461a      	mov	r2, r3
 8011900:	4b59      	ldr	r3, [pc, #356]	; (8011a68 <tcp_receive+0xb0c>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	441a      	add	r2, r3
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801190e:	4b55      	ldr	r3, [pc, #340]	; (8011a64 <tcp_receive+0xb08>)
 8011910:	881b      	ldrh	r3, [r3, #0]
 8011912:	429a      	cmp	r2, r3
 8011914:	d206      	bcs.n	8011924 <tcp_receive+0x9c8>
 8011916:	4b56      	ldr	r3, [pc, #344]	; (8011a70 <tcp_receive+0xb14>)
 8011918:	f240 6207 	movw	r2, #1543	; 0x607
 801191c:	4957      	ldr	r1, [pc, #348]	; (8011a7c <tcp_receive+0xb20>)
 801191e:	4856      	ldr	r0, [pc, #344]	; (8011a78 <tcp_receive+0xb1c>)
 8011920:	f005 fc52 	bl	80171c8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011928:	4b4e      	ldr	r3, [pc, #312]	; (8011a64 <tcp_receive+0xb08>)
 801192a:	881b      	ldrh	r3, [r3, #0]
 801192c:	1ad3      	subs	r3, r2, r3
 801192e:	b29a      	uxth	r2, r3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011934:	6878      	ldr	r0, [r7, #4]
 8011936:	f7fc ffc5 	bl	800e8c4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801193a:	4b4c      	ldr	r3, [pc, #304]	; (8011a6c <tcp_receive+0xb10>)
 801193c:	685b      	ldr	r3, [r3, #4]
 801193e:	891b      	ldrh	r3, [r3, #8]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d006      	beq.n	8011952 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011944:	4b49      	ldr	r3, [pc, #292]	; (8011a6c <tcp_receive+0xb10>)
 8011946:	685b      	ldr	r3, [r3, #4]
 8011948:	4a4d      	ldr	r2, [pc, #308]	; (8011a80 <tcp_receive+0xb24>)
 801194a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801194c:	4b47      	ldr	r3, [pc, #284]	; (8011a6c <tcp_receive+0xb10>)
 801194e:	2200      	movs	r2, #0
 8011950:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011952:	4b46      	ldr	r3, [pc, #280]	; (8011a6c <tcp_receive+0xb10>)
 8011954:	68db      	ldr	r3, [r3, #12]
 8011956:	899b      	ldrh	r3, [r3, #12]
 8011958:	b29b      	uxth	r3, r3
 801195a:	4618      	mov	r0, r3
 801195c:	f7fa fe1e 	bl	800c59c <lwip_htons>
 8011960:	4603      	mov	r3, r0
 8011962:	b2db      	uxtb	r3, r3
 8011964:	f003 0301 	and.w	r3, r3, #1
 8011968:	2b00      	cmp	r3, #0
 801196a:	f000 80b8 	beq.w	8011ade <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801196e:	4b45      	ldr	r3, [pc, #276]	; (8011a84 <tcp_receive+0xb28>)
 8011970:	781b      	ldrb	r3, [r3, #0]
 8011972:	f043 0320 	orr.w	r3, r3, #32
 8011976:	b2da      	uxtb	r2, r3
 8011978:	4b42      	ldr	r3, [pc, #264]	; (8011a84 <tcp_receive+0xb28>)
 801197a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801197c:	e0af      	b.n	8011ade <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011982:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	685b      	ldr	r3, [r3, #4]
 801198c:	4a36      	ldr	r2, [pc, #216]	; (8011a68 <tcp_receive+0xb0c>)
 801198e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011990:	68bb      	ldr	r3, [r7, #8]
 8011992:	891b      	ldrh	r3, [r3, #8]
 8011994:	461c      	mov	r4, r3
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	68db      	ldr	r3, [r3, #12]
 801199a:	899b      	ldrh	r3, [r3, #12]
 801199c:	b29b      	uxth	r3, r3
 801199e:	4618      	mov	r0, r3
 80119a0:	f7fa fdfc 	bl	800c59c <lwip_htons>
 80119a4:	4603      	mov	r3, r0
 80119a6:	b2db      	uxtb	r3, r3
 80119a8:	f003 0303 	and.w	r3, r3, #3
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d001      	beq.n	80119b4 <tcp_receive+0xa58>
 80119b0:	2301      	movs	r3, #1
 80119b2:	e000      	b.n	80119b6 <tcp_receive+0xa5a>
 80119b4:	2300      	movs	r3, #0
 80119b6:	191a      	adds	r2, r3, r4
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119bc:	441a      	add	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80119c6:	461c      	mov	r4, r3
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	891b      	ldrh	r3, [r3, #8]
 80119cc:	461d      	mov	r5, r3
 80119ce:	68bb      	ldr	r3, [r7, #8]
 80119d0:	68db      	ldr	r3, [r3, #12]
 80119d2:	899b      	ldrh	r3, [r3, #12]
 80119d4:	b29b      	uxth	r3, r3
 80119d6:	4618      	mov	r0, r3
 80119d8:	f7fa fde0 	bl	800c59c <lwip_htons>
 80119dc:	4603      	mov	r3, r0
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	f003 0303 	and.w	r3, r3, #3
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d001      	beq.n	80119ec <tcp_receive+0xa90>
 80119e8:	2301      	movs	r3, #1
 80119ea:	e000      	b.n	80119ee <tcp_receive+0xa92>
 80119ec:	2300      	movs	r3, #0
 80119ee:	442b      	add	r3, r5
 80119f0:	429c      	cmp	r4, r3
 80119f2:	d206      	bcs.n	8011a02 <tcp_receive+0xaa6>
 80119f4:	4b1e      	ldr	r3, [pc, #120]	; (8011a70 <tcp_receive+0xb14>)
 80119f6:	f240 622b 	movw	r2, #1579	; 0x62b
 80119fa:	4923      	ldr	r1, [pc, #140]	; (8011a88 <tcp_receive+0xb2c>)
 80119fc:	481e      	ldr	r0, [pc, #120]	; (8011a78 <tcp_receive+0xb1c>)
 80119fe:	f005 fbe3 	bl	80171c8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	891b      	ldrh	r3, [r3, #8]
 8011a06:	461c      	mov	r4, r3
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	68db      	ldr	r3, [r3, #12]
 8011a0c:	899b      	ldrh	r3, [r3, #12]
 8011a0e:	b29b      	uxth	r3, r3
 8011a10:	4618      	mov	r0, r3
 8011a12:	f7fa fdc3 	bl	800c59c <lwip_htons>
 8011a16:	4603      	mov	r3, r0
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	f003 0303 	and.w	r3, r3, #3
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d001      	beq.n	8011a26 <tcp_receive+0xaca>
 8011a22:	2301      	movs	r3, #1
 8011a24:	e000      	b.n	8011a28 <tcp_receive+0xacc>
 8011a26:	2300      	movs	r3, #0
 8011a28:	1919      	adds	r1, r3, r4
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a2e:	b28b      	uxth	r3, r1
 8011a30:	1ad3      	subs	r3, r2, r3
 8011a32:	b29a      	uxth	r2, r3
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7fc ff43 	bl	800e8c4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	891b      	ldrh	r3, [r3, #8]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d028      	beq.n	8011a9a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011a48:	4b0d      	ldr	r3, [pc, #52]	; (8011a80 <tcp_receive+0xb24>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d01d      	beq.n	8011a8c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011a50:	4b0b      	ldr	r3, [pc, #44]	; (8011a80 <tcp_receive+0xb24>)
 8011a52:	681a      	ldr	r2, [r3, #0]
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	685b      	ldr	r3, [r3, #4]
 8011a58:	4619      	mov	r1, r3
 8011a5a:	4610      	mov	r0, r2
 8011a5c:	f7fc f9be 	bl	800dddc <pbuf_cat>
 8011a60:	e018      	b.n	8011a94 <tcp_receive+0xb38>
 8011a62:	bf00      	nop
 8011a64:	2000900a 	.word	0x2000900a
 8011a68:	20009000 	.word	0x20009000
 8011a6c:	20008fe0 	.word	0x20008fe0
 8011a70:	080194b4 	.word	0x080194b4
 8011a74:	08019894 	.word	0x08019894
 8011a78:	08019500 	.word	0x08019500
 8011a7c:	080198d0 	.word	0x080198d0
 8011a80:	20009010 	.word	0x20009010
 8011a84:	2000900d 	.word	0x2000900d
 8011a88:	080198f0 	.word	0x080198f0
            } else {
              recv_data = cseg->p;
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	4a70      	ldr	r2, [pc, #448]	; (8011c54 <tcp_receive+0xcf8>)
 8011a92:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011a94:	68bb      	ldr	r3, [r7, #8]
 8011a96:	2200      	movs	r2, #0
 8011a98:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	68db      	ldr	r3, [r3, #12]
 8011a9e:	899b      	ldrh	r3, [r3, #12]
 8011aa0:	b29b      	uxth	r3, r3
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7fa fd7a 	bl	800c59c <lwip_htons>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	b2db      	uxtb	r3, r3
 8011aac:	f003 0301 	and.w	r3, r3, #1
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d00d      	beq.n	8011ad0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011ab4:	4b68      	ldr	r3, [pc, #416]	; (8011c58 <tcp_receive+0xcfc>)
 8011ab6:	781b      	ldrb	r3, [r3, #0]
 8011ab8:	f043 0320 	orr.w	r3, r3, #32
 8011abc:	b2da      	uxtb	r2, r3
 8011abe:	4b66      	ldr	r3, [pc, #408]	; (8011c58 <tcp_receive+0xcfc>)
 8011ac0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	7d1b      	ldrb	r3, [r3, #20]
 8011ac6:	2b04      	cmp	r3, #4
 8011ac8:	d102      	bne.n	8011ad0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2207      	movs	r2, #7
 8011ace:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	681a      	ldr	r2, [r3, #0]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011ad8:	68b8      	ldr	r0, [r7, #8]
 8011ada:	f7fd fbd2 	bl	800f282 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011ade:	687b      	ldr	r3, [r7, #4]
 8011ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d008      	beq.n	8011af8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011aea:	68db      	ldr	r3, [r3, #12]
 8011aec:	685a      	ldr	r2, [r3, #4]
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011af2:	429a      	cmp	r2, r3
 8011af4:	f43f af43 	beq.w	801197e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	8b5b      	ldrh	r3, [r3, #26]
 8011afc:	f003 0301 	and.w	r3, r3, #1
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d00e      	beq.n	8011b22 <tcp_receive+0xbc6>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	8b5b      	ldrh	r3, [r3, #26]
 8011b08:	f023 0301 	bic.w	r3, r3, #1
 8011b0c:	b29a      	uxth	r2, r3
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	835a      	strh	r2, [r3, #26]
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	8b5b      	ldrh	r3, [r3, #26]
 8011b16:	f043 0302 	orr.w	r3, r3, #2
 8011b1a:	b29a      	uxth	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011b20:	e188      	b.n	8011e34 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	8b5b      	ldrh	r3, [r3, #26]
 8011b26:	f043 0301 	orr.w	r3, r3, #1
 8011b2a:	b29a      	uxth	r2, r3
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011b30:	e180      	b.n	8011e34 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d106      	bne.n	8011b48 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011b3a:	4848      	ldr	r0, [pc, #288]	; (8011c5c <tcp_receive+0xd00>)
 8011b3c:	f7fd fbba 	bl	800f2b4 <tcp_seg_copy>
 8011b40:	4602      	mov	r2, r0
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	675a      	str	r2, [r3, #116]	; 0x74
 8011b46:	e16d      	b.n	8011e24 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011b50:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b52:	e157      	b.n	8011e04 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b56:	68db      	ldr	r3, [r3, #12]
 8011b58:	685a      	ldr	r2, [r3, #4]
 8011b5a:	4b41      	ldr	r3, [pc, #260]	; (8011c60 <tcp_receive+0xd04>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	429a      	cmp	r2, r3
 8011b60:	d11d      	bne.n	8011b9e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011b62:	4b3e      	ldr	r3, [pc, #248]	; (8011c5c <tcp_receive+0xd00>)
 8011b64:	891a      	ldrh	r2, [r3, #8]
 8011b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b68:	891b      	ldrh	r3, [r3, #8]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	f240 814f 	bls.w	8011e0e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011b70:	483a      	ldr	r0, [pc, #232]	; (8011c5c <tcp_receive+0xd00>)
 8011b72:	f7fd fb9f 	bl	800f2b4 <tcp_seg_copy>
 8011b76:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	f000 8149 	beq.w	8011e12 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d003      	beq.n	8011b8e <tcp_receive+0xc32>
                    prev->next = cseg;
 8011b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b88:	697a      	ldr	r2, [r7, #20]
 8011b8a:	601a      	str	r2, [r3, #0]
 8011b8c:	e002      	b.n	8011b94 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	697a      	ldr	r2, [r7, #20]
 8011b92:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011b94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b96:	6978      	ldr	r0, [r7, #20]
 8011b98:	f7ff f8dc 	bl	8010d54 <tcp_oos_insert_segment>
                }
                break;
 8011b9c:	e139      	b.n	8011e12 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d117      	bne.n	8011bd4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011ba4:	4b2e      	ldr	r3, [pc, #184]	; (8011c60 <tcp_receive+0xd04>)
 8011ba6:	681a      	ldr	r2, [r3, #0]
 8011ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011baa:	68db      	ldr	r3, [r3, #12]
 8011bac:	685b      	ldr	r3, [r3, #4]
 8011bae:	1ad3      	subs	r3, r2, r3
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	da57      	bge.n	8011c64 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011bb4:	4829      	ldr	r0, [pc, #164]	; (8011c5c <tcp_receive+0xd00>)
 8011bb6:	f7fd fb7d 	bl	800f2b4 <tcp_seg_copy>
 8011bba:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011bbc:	69bb      	ldr	r3, [r7, #24]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	f000 8129 	beq.w	8011e16 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	69ba      	ldr	r2, [r7, #24]
 8011bc8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011bca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011bcc:	69b8      	ldr	r0, [r7, #24]
 8011bce:	f7ff f8c1 	bl	8010d54 <tcp_oos_insert_segment>
                  }
                  break;
 8011bd2:	e120      	b.n	8011e16 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011bd4:	4b22      	ldr	r3, [pc, #136]	; (8011c60 <tcp_receive+0xd04>)
 8011bd6:	681a      	ldr	r2, [r3, #0]
 8011bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	1ad3      	subs	r3, r2, r3
 8011be0:	3b01      	subs	r3, #1
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	db3e      	blt.n	8011c64 <tcp_receive+0xd08>
 8011be6:	4b1e      	ldr	r3, [pc, #120]	; (8011c60 <tcp_receive+0xd04>)
 8011be8:	681a      	ldr	r2, [r3, #0]
 8011bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bec:	68db      	ldr	r3, [r3, #12]
 8011bee:	685b      	ldr	r3, [r3, #4]
 8011bf0:	1ad3      	subs	r3, r2, r3
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	dc35      	bgt.n	8011c64 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011bf8:	4818      	ldr	r0, [pc, #96]	; (8011c5c <tcp_receive+0xd00>)
 8011bfa:	f7fd fb5b 	bl	800f2b4 <tcp_seg_copy>
 8011bfe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011c00:	69fb      	ldr	r3, [r7, #28]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	f000 8109 	beq.w	8011e1a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c0a:	68db      	ldr	r3, [r3, #12]
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011c10:	8912      	ldrh	r2, [r2, #8]
 8011c12:	441a      	add	r2, r3
 8011c14:	4b12      	ldr	r3, [pc, #72]	; (8011c60 <tcp_receive+0xd04>)
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	1ad3      	subs	r3, r2, r3
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	dd12      	ble.n	8011c44 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011c1e:	4b10      	ldr	r3, [pc, #64]	; (8011c60 <tcp_receive+0xd04>)
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	b29a      	uxth	r2, r3
 8011c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	685b      	ldr	r3, [r3, #4]
 8011c2a:	b29b      	uxth	r3, r3
 8011c2c:	1ad3      	subs	r3, r2, r3
 8011c2e:	b29a      	uxth	r2, r3
 8011c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c32:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c36:	685a      	ldr	r2, [r3, #4]
 8011c38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c3a:	891b      	ldrh	r3, [r3, #8]
 8011c3c:	4619      	mov	r1, r3
 8011c3e:	4610      	mov	r0, r2
 8011c40:	f7fb fe84 	bl	800d94c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c46:	69fa      	ldr	r2, [r7, #28]
 8011c48:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011c4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011c4c:	69f8      	ldr	r0, [r7, #28]
 8011c4e:	f7ff f881 	bl	8010d54 <tcp_oos_insert_segment>
                  }
                  break;
 8011c52:	e0e2      	b.n	8011e1a <tcp_receive+0xebe>
 8011c54:	20009010 	.word	0x20009010
 8011c58:	2000900d 	.word	0x2000900d
 8011c5c:	20008fe0 	.word	0x20008fe0
 8011c60:	20009000 	.word	0x20009000
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c66:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	f040 80c6 	bne.w	8011dfe <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011c72:	4b80      	ldr	r3, [pc, #512]	; (8011e74 <tcp_receive+0xf18>)
 8011c74:	681a      	ldr	r2, [r3, #0]
 8011c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	f340 80bd 	ble.w	8011dfe <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c86:	68db      	ldr	r3, [r3, #12]
 8011c88:	899b      	ldrh	r3, [r3, #12]
 8011c8a:	b29b      	uxth	r3, r3
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	f7fa fc85 	bl	800c59c <lwip_htons>
 8011c92:	4603      	mov	r3, r0
 8011c94:	b2db      	uxtb	r3, r3
 8011c96:	f003 0301 	and.w	r3, r3, #1
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	f040 80bf 	bne.w	8011e1e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011ca0:	4875      	ldr	r0, [pc, #468]	; (8011e78 <tcp_receive+0xf1c>)
 8011ca2:	f7fd fb07 	bl	800f2b4 <tcp_seg_copy>
 8011ca6:	4602      	mov	r2, r0
 8011ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011caa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	f000 80b6 	beq.w	8011e22 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb8:	68db      	ldr	r3, [r3, #12]
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cbe:	8912      	ldrh	r2, [r2, #8]
 8011cc0:	441a      	add	r2, r3
 8011cc2:	4b6c      	ldr	r3, [pc, #432]	; (8011e74 <tcp_receive+0xf18>)
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	1ad3      	subs	r3, r2, r3
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	dd12      	ble.n	8011cf2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011ccc:	4b69      	ldr	r3, [pc, #420]	; (8011e74 <tcp_receive+0xf18>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	b29a      	uxth	r2, r3
 8011cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cd4:	68db      	ldr	r3, [r3, #12]
 8011cd6:	685b      	ldr	r3, [r3, #4]
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	1ad3      	subs	r3, r2, r3
 8011cdc:	b29a      	uxth	r2, r3
 8011cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce4:	685a      	ldr	r2, [r3, #4]
 8011ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ce8:	891b      	ldrh	r3, [r3, #8]
 8011cea:	4619      	mov	r1, r3
 8011cec:	4610      	mov	r0, r2
 8011cee:	f7fb fe2d 	bl	800d94c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011cf2:	4b62      	ldr	r3, [pc, #392]	; (8011e7c <tcp_receive+0xf20>)
 8011cf4:	881b      	ldrh	r3, [r3, #0]
 8011cf6:	461a      	mov	r2, r3
 8011cf8:	4b5e      	ldr	r3, [pc, #376]	; (8011e74 <tcp_receive+0xf18>)
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	441a      	add	r2, r3
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d02:	6879      	ldr	r1, [r7, #4]
 8011d04:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d06:	440b      	add	r3, r1
 8011d08:	1ad3      	subs	r3, r2, r3
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	f340 8089 	ble.w	8011e22 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	68db      	ldr	r3, [r3, #12]
 8011d16:	899b      	ldrh	r3, [r3, #12]
 8011d18:	b29b      	uxth	r3, r3
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7fa fc3e 	bl	800c59c <lwip_htons>
 8011d20:	4603      	mov	r3, r0
 8011d22:	b2db      	uxtb	r3, r3
 8011d24:	f003 0301 	and.w	r3, r3, #1
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d022      	beq.n	8011d72 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	68db      	ldr	r3, [r3, #12]
 8011d32:	899b      	ldrh	r3, [r3, #12]
 8011d34:	b29b      	uxth	r3, r3
 8011d36:	b21b      	sxth	r3, r3
 8011d38:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011d3c:	b21c      	sxth	r4, r3
 8011d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	68db      	ldr	r3, [r3, #12]
 8011d44:	899b      	ldrh	r3, [r3, #12]
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7fa fc27 	bl	800c59c <lwip_htons>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	b2db      	uxtb	r3, r3
 8011d52:	b29b      	uxth	r3, r3
 8011d54:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	f7fa fc1e 	bl	800c59c <lwip_htons>
 8011d60:	4603      	mov	r3, r0
 8011d62:	b21b      	sxth	r3, r3
 8011d64:	4323      	orrs	r3, r4
 8011d66:	b21a      	sxth	r2, r3
 8011d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	68db      	ldr	r3, [r3, #12]
 8011d6e:	b292      	uxth	r2, r2
 8011d70:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d76:	b29a      	uxth	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d7c:	4413      	add	r3, r2
 8011d7e:	b299      	uxth	r1, r3
 8011d80:	4b3c      	ldr	r3, [pc, #240]	; (8011e74 <tcp_receive+0xf18>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	b29a      	uxth	r2, r3
 8011d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	1a8a      	subs	r2, r1, r2
 8011d8c:	b292      	uxth	r2, r2
 8011d8e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	685a      	ldr	r2, [r3, #4]
 8011d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	891b      	ldrh	r3, [r3, #8]
 8011d9c:	4619      	mov	r1, r3
 8011d9e:	4610      	mov	r0, r2
 8011da0:	f7fb fdd4 	bl	800d94c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	891c      	ldrh	r4, [r3, #8]
 8011daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	899b      	ldrh	r3, [r3, #12]
 8011db2:	b29b      	uxth	r3, r3
 8011db4:	4618      	mov	r0, r3
 8011db6:	f7fa fbf1 	bl	800c59c <lwip_htons>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	f003 0303 	and.w	r3, r3, #3
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d001      	beq.n	8011dca <tcp_receive+0xe6e>
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	e000      	b.n	8011dcc <tcp_receive+0xe70>
 8011dca:	2300      	movs	r3, #0
 8011dcc:	4423      	add	r3, r4
 8011dce:	b29a      	uxth	r2, r3
 8011dd0:	4b2a      	ldr	r3, [pc, #168]	; (8011e7c <tcp_receive+0xf20>)
 8011dd2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011dd4:	4b29      	ldr	r3, [pc, #164]	; (8011e7c <tcp_receive+0xf20>)
 8011dd6:	881b      	ldrh	r3, [r3, #0]
 8011dd8:	461a      	mov	r2, r3
 8011dda:	4b26      	ldr	r3, [pc, #152]	; (8011e74 <tcp_receive+0xf18>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	441a      	add	r2, r3
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de4:	6879      	ldr	r1, [r7, #4]
 8011de6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011de8:	440b      	add	r3, r1
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d019      	beq.n	8011e22 <tcp_receive+0xec6>
 8011dee:	4b24      	ldr	r3, [pc, #144]	; (8011e80 <tcp_receive+0xf24>)
 8011df0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011df4:	4923      	ldr	r1, [pc, #140]	; (8011e84 <tcp_receive+0xf28>)
 8011df6:	4824      	ldr	r0, [pc, #144]	; (8011e88 <tcp_receive+0xf2c>)
 8011df8:	f005 f9e6 	bl	80171c8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011dfc:	e011      	b.n	8011e22 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	f47f aea4 	bne.w	8011b54 <tcp_receive+0xbf8>
 8011e0c:	e00a      	b.n	8011e24 <tcp_receive+0xec8>
                break;
 8011e0e:	bf00      	nop
 8011e10:	e008      	b.n	8011e24 <tcp_receive+0xec8>
                break;
 8011e12:	bf00      	nop
 8011e14:	e006      	b.n	8011e24 <tcp_receive+0xec8>
                  break;
 8011e16:	bf00      	nop
 8011e18:	e004      	b.n	8011e24 <tcp_receive+0xec8>
                  break;
 8011e1a:	bf00      	nop
 8011e1c:	e002      	b.n	8011e24 <tcp_receive+0xec8>
                  break;
 8011e1e:	bf00      	nop
 8011e20:	e000      	b.n	8011e24 <tcp_receive+0xec8>
                break;
 8011e22:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f001 fa33 	bl	8013290 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011e2a:	e003      	b.n	8011e34 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f001 fa2f 	bl	8013290 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011e32:	e01a      	b.n	8011e6a <tcp_receive+0xf0e>
 8011e34:	e019      	b.n	8011e6a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011e36:	4b0f      	ldr	r3, [pc, #60]	; (8011e74 <tcp_receive+0xf18>)
 8011e38:	681a      	ldr	r2, [r3, #0]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e3e:	1ad3      	subs	r3, r2, r3
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	db0a      	blt.n	8011e5a <tcp_receive+0xefe>
 8011e44:	4b0b      	ldr	r3, [pc, #44]	; (8011e74 <tcp_receive+0xf18>)
 8011e46:	681a      	ldr	r2, [r3, #0]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e4c:	6879      	ldr	r1, [r7, #4]
 8011e4e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e50:	440b      	add	r3, r1
 8011e52:	1ad3      	subs	r3, r2, r3
 8011e54:	3301      	adds	r3, #1
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	dd07      	ble.n	8011e6a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	8b5b      	ldrh	r3, [r3, #26]
 8011e5e:	f043 0302 	orr.w	r3, r3, #2
 8011e62:	b29a      	uxth	r2, r3
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011e68:	e7ff      	b.n	8011e6a <tcp_receive+0xf0e>
 8011e6a:	bf00      	nop
 8011e6c:	3750      	adds	r7, #80	; 0x50
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bdb0      	pop	{r4, r5, r7, pc}
 8011e72:	bf00      	nop
 8011e74:	20009000 	.word	0x20009000
 8011e78:	20008fe0 	.word	0x20008fe0
 8011e7c:	2000900a 	.word	0x2000900a
 8011e80:	080194b4 	.word	0x080194b4
 8011e84:	0801985c 	.word	0x0801985c
 8011e88:	08019500 	.word	0x08019500

08011e8c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011e92:	4b15      	ldr	r3, [pc, #84]	; (8011ee8 <tcp_get_next_optbyte+0x5c>)
 8011e94:	881b      	ldrh	r3, [r3, #0]
 8011e96:	1c5a      	adds	r2, r3, #1
 8011e98:	b291      	uxth	r1, r2
 8011e9a:	4a13      	ldr	r2, [pc, #76]	; (8011ee8 <tcp_get_next_optbyte+0x5c>)
 8011e9c:	8011      	strh	r1, [r2, #0]
 8011e9e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011ea0:	4b12      	ldr	r3, [pc, #72]	; (8011eec <tcp_get_next_optbyte+0x60>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d004      	beq.n	8011eb2 <tcp_get_next_optbyte+0x26>
 8011ea8:	4b11      	ldr	r3, [pc, #68]	; (8011ef0 <tcp_get_next_optbyte+0x64>)
 8011eaa:	881b      	ldrh	r3, [r3, #0]
 8011eac:	88fa      	ldrh	r2, [r7, #6]
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d208      	bcs.n	8011ec4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011eb2:	4b10      	ldr	r3, [pc, #64]	; (8011ef4 <tcp_get_next_optbyte+0x68>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	3314      	adds	r3, #20
 8011eb8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011eba:	88fb      	ldrh	r3, [r7, #6]
 8011ebc:	683a      	ldr	r2, [r7, #0]
 8011ebe:	4413      	add	r3, r2
 8011ec0:	781b      	ldrb	r3, [r3, #0]
 8011ec2:	e00b      	b.n	8011edc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011ec4:	88fb      	ldrh	r3, [r7, #6]
 8011ec6:	b2da      	uxtb	r2, r3
 8011ec8:	4b09      	ldr	r3, [pc, #36]	; (8011ef0 <tcp_get_next_optbyte+0x64>)
 8011eca:	881b      	ldrh	r3, [r3, #0]
 8011ecc:	b2db      	uxtb	r3, r3
 8011ece:	1ad3      	subs	r3, r2, r3
 8011ed0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011ed2:	4b06      	ldr	r3, [pc, #24]	; (8011eec <tcp_get_next_optbyte+0x60>)
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	797b      	ldrb	r3, [r7, #5]
 8011ed8:	4413      	add	r3, r2
 8011eda:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	370c      	adds	r7, #12
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee6:	4770      	bx	lr
 8011ee8:	20008ffc 	.word	0x20008ffc
 8011eec:	20008ff8 	.word	0x20008ff8
 8011ef0:	20008ff6 	.word	0x20008ff6
 8011ef4:	20008ff0 	.word	0x20008ff0

08011ef8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b084      	sub	sp, #16
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d106      	bne.n	8011f14 <tcp_parseopt+0x1c>
 8011f06:	4b32      	ldr	r3, [pc, #200]	; (8011fd0 <tcp_parseopt+0xd8>)
 8011f08:	f240 727d 	movw	r2, #1917	; 0x77d
 8011f0c:	4931      	ldr	r1, [pc, #196]	; (8011fd4 <tcp_parseopt+0xdc>)
 8011f0e:	4832      	ldr	r0, [pc, #200]	; (8011fd8 <tcp_parseopt+0xe0>)
 8011f10:	f005 f95a 	bl	80171c8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011f14:	4b31      	ldr	r3, [pc, #196]	; (8011fdc <tcp_parseopt+0xe4>)
 8011f16:	881b      	ldrh	r3, [r3, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d055      	beq.n	8011fc8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011f1c:	4b30      	ldr	r3, [pc, #192]	; (8011fe0 <tcp_parseopt+0xe8>)
 8011f1e:	2200      	movs	r2, #0
 8011f20:	801a      	strh	r2, [r3, #0]
 8011f22:	e045      	b.n	8011fb0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011f24:	f7ff ffb2 	bl	8011e8c <tcp_get_next_optbyte>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011f2c:	7bfb      	ldrb	r3, [r7, #15]
 8011f2e:	2b02      	cmp	r3, #2
 8011f30:	d006      	beq.n	8011f40 <tcp_parseopt+0x48>
 8011f32:	2b02      	cmp	r3, #2
 8011f34:	dc2b      	bgt.n	8011f8e <tcp_parseopt+0x96>
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d041      	beq.n	8011fbe <tcp_parseopt+0xc6>
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	d127      	bne.n	8011f8e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011f3e:	e037      	b.n	8011fb0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011f40:	f7ff ffa4 	bl	8011e8c <tcp_get_next_optbyte>
 8011f44:	4603      	mov	r3, r0
 8011f46:	2b04      	cmp	r3, #4
 8011f48:	d13b      	bne.n	8011fc2 <tcp_parseopt+0xca>
 8011f4a:	4b25      	ldr	r3, [pc, #148]	; (8011fe0 <tcp_parseopt+0xe8>)
 8011f4c:	881b      	ldrh	r3, [r3, #0]
 8011f4e:	3301      	adds	r3, #1
 8011f50:	4a22      	ldr	r2, [pc, #136]	; (8011fdc <tcp_parseopt+0xe4>)
 8011f52:	8812      	ldrh	r2, [r2, #0]
 8011f54:	4293      	cmp	r3, r2
 8011f56:	da34      	bge.n	8011fc2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011f58:	f7ff ff98 	bl	8011e8c <tcp_get_next_optbyte>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	b29b      	uxth	r3, r3
 8011f60:	021b      	lsls	r3, r3, #8
 8011f62:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011f64:	f7ff ff92 	bl	8011e8c <tcp_get_next_optbyte>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	b29a      	uxth	r2, r3
 8011f6c:	89bb      	ldrh	r3, [r7, #12]
 8011f6e:	4313      	orrs	r3, r2
 8011f70:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011f72:	89bb      	ldrh	r3, [r7, #12]
 8011f74:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011f78:	d804      	bhi.n	8011f84 <tcp_parseopt+0x8c>
 8011f7a:	89bb      	ldrh	r3, [r7, #12]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d001      	beq.n	8011f84 <tcp_parseopt+0x8c>
 8011f80:	89ba      	ldrh	r2, [r7, #12]
 8011f82:	e001      	b.n	8011f88 <tcp_parseopt+0x90>
 8011f84:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011f8c:	e010      	b.n	8011fb0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011f8e:	f7ff ff7d 	bl	8011e8c <tcp_get_next_optbyte>
 8011f92:	4603      	mov	r3, r0
 8011f94:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011f96:	7afb      	ldrb	r3, [r7, #11]
 8011f98:	2b01      	cmp	r3, #1
 8011f9a:	d914      	bls.n	8011fc6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011f9c:	7afb      	ldrb	r3, [r7, #11]
 8011f9e:	b29a      	uxth	r2, r3
 8011fa0:	4b0f      	ldr	r3, [pc, #60]	; (8011fe0 <tcp_parseopt+0xe8>)
 8011fa2:	881b      	ldrh	r3, [r3, #0]
 8011fa4:	4413      	add	r3, r2
 8011fa6:	b29b      	uxth	r3, r3
 8011fa8:	3b02      	subs	r3, #2
 8011faa:	b29a      	uxth	r2, r3
 8011fac:	4b0c      	ldr	r3, [pc, #48]	; (8011fe0 <tcp_parseopt+0xe8>)
 8011fae:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011fb0:	4b0b      	ldr	r3, [pc, #44]	; (8011fe0 <tcp_parseopt+0xe8>)
 8011fb2:	881a      	ldrh	r2, [r3, #0]
 8011fb4:	4b09      	ldr	r3, [pc, #36]	; (8011fdc <tcp_parseopt+0xe4>)
 8011fb6:	881b      	ldrh	r3, [r3, #0]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d3b3      	bcc.n	8011f24 <tcp_parseopt+0x2c>
 8011fbc:	e004      	b.n	8011fc8 <tcp_parseopt+0xd0>
          return;
 8011fbe:	bf00      	nop
 8011fc0:	e002      	b.n	8011fc8 <tcp_parseopt+0xd0>
            return;
 8011fc2:	bf00      	nop
 8011fc4:	e000      	b.n	8011fc8 <tcp_parseopt+0xd0>
            return;
 8011fc6:	bf00      	nop
      }
    }
  }
}
 8011fc8:	3710      	adds	r7, #16
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	080194b4 	.word	0x080194b4
 8011fd4:	08019918 	.word	0x08019918
 8011fd8:	08019500 	.word	0x08019500
 8011fdc:	20008ff4 	.word	0x20008ff4
 8011fe0:	20008ffc 	.word	0x20008ffc

08011fe4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011fe4:	b480      	push	{r7}
 8011fe6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011fe8:	4b05      	ldr	r3, [pc, #20]	; (8012000 <tcp_trigger_input_pcb_close+0x1c>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	f043 0310 	orr.w	r3, r3, #16
 8011ff0:	b2da      	uxtb	r2, r3
 8011ff2:	4b03      	ldr	r3, [pc, #12]	; (8012000 <tcp_trigger_input_pcb_close+0x1c>)
 8011ff4:	701a      	strb	r2, [r3, #0]
}
 8011ff6:	bf00      	nop
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffe:	4770      	bx	lr
 8012000:	2000900d 	.word	0x2000900d

08012004 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b084      	sub	sp, #16
 8012008:	af00      	add	r7, sp, #0
 801200a:	60f8      	str	r0, [r7, #12]
 801200c:	60b9      	str	r1, [r7, #8]
 801200e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d00a      	beq.n	801202c <tcp_route+0x28>
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	7a1b      	ldrb	r3, [r3, #8]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d006      	beq.n	801202c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	7a1b      	ldrb	r3, [r3, #8]
 8012022:	4618      	mov	r0, r3
 8012024:	f7fb fab8 	bl	800d598 <netif_get_by_index>
 8012028:	4603      	mov	r3, r0
 801202a:	e003      	b.n	8012034 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801202c:	6878      	ldr	r0, [r7, #4]
 801202e:	f003 fa0f 	bl	8015450 <ip4_route>
 8012032:	4603      	mov	r3, r0
  }
}
 8012034:	4618      	mov	r0, r3
 8012036:	3710      	adds	r7, #16
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}

0801203c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801203c:	b590      	push	{r4, r7, lr}
 801203e:	b087      	sub	sp, #28
 8012040:	af00      	add	r7, sp, #0
 8012042:	60f8      	str	r0, [r7, #12]
 8012044:	60b9      	str	r1, [r7, #8]
 8012046:	603b      	str	r3, [r7, #0]
 8012048:	4613      	mov	r3, r2
 801204a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d105      	bne.n	801205e <tcp_create_segment+0x22>
 8012052:	4b44      	ldr	r3, [pc, #272]	; (8012164 <tcp_create_segment+0x128>)
 8012054:	22a3      	movs	r2, #163	; 0xa3
 8012056:	4944      	ldr	r1, [pc, #272]	; (8012168 <tcp_create_segment+0x12c>)
 8012058:	4844      	ldr	r0, [pc, #272]	; (801216c <tcp_create_segment+0x130>)
 801205a:	f005 f8b5 	bl	80171c8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801205e:	68bb      	ldr	r3, [r7, #8]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d105      	bne.n	8012070 <tcp_create_segment+0x34>
 8012064:	4b3f      	ldr	r3, [pc, #252]	; (8012164 <tcp_create_segment+0x128>)
 8012066:	22a4      	movs	r2, #164	; 0xa4
 8012068:	4941      	ldr	r1, [pc, #260]	; (8012170 <tcp_create_segment+0x134>)
 801206a:	4840      	ldr	r0, [pc, #256]	; (801216c <tcp_create_segment+0x130>)
 801206c:	f005 f8ac 	bl	80171c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012070:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012074:	009b      	lsls	r3, r3, #2
 8012076:	b2db      	uxtb	r3, r3
 8012078:	f003 0304 	and.w	r3, r3, #4
 801207c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801207e:	2003      	movs	r0, #3
 8012080:	f7fa ff04 	bl	800ce8c <memp_malloc>
 8012084:	6138      	str	r0, [r7, #16]
 8012086:	693b      	ldr	r3, [r7, #16]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d104      	bne.n	8012096 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801208c:	68b8      	ldr	r0, [r7, #8]
 801208e:	f7fb fde3 	bl	800dc58 <pbuf_free>
    return NULL;
 8012092:	2300      	movs	r3, #0
 8012094:	e061      	b.n	801215a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801209c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801209e:	693b      	ldr	r3, [r7, #16]
 80120a0:	2200      	movs	r2, #0
 80120a2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80120a4:	693b      	ldr	r3, [r7, #16]
 80120a6:	68ba      	ldr	r2, [r7, #8]
 80120a8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	891a      	ldrh	r2, [r3, #8]
 80120ae:	7dfb      	ldrb	r3, [r7, #23]
 80120b0:	b29b      	uxth	r3, r3
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d205      	bcs.n	80120c2 <tcp_create_segment+0x86>
 80120b6:	4b2b      	ldr	r3, [pc, #172]	; (8012164 <tcp_create_segment+0x128>)
 80120b8:	22b0      	movs	r2, #176	; 0xb0
 80120ba:	492e      	ldr	r1, [pc, #184]	; (8012174 <tcp_create_segment+0x138>)
 80120bc:	482b      	ldr	r0, [pc, #172]	; (801216c <tcp_create_segment+0x130>)
 80120be:	f005 f883 	bl	80171c8 <iprintf>
  seg->len = p->tot_len - optlen;
 80120c2:	68bb      	ldr	r3, [r7, #8]
 80120c4:	891a      	ldrh	r2, [r3, #8]
 80120c6:	7dfb      	ldrb	r3, [r7, #23]
 80120c8:	b29b      	uxth	r3, r3
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	b29a      	uxth	r2, r3
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80120d2:	2114      	movs	r1, #20
 80120d4:	68b8      	ldr	r0, [r7, #8]
 80120d6:	f7fb fd29 	bl	800db2c <pbuf_add_header>
 80120da:	4603      	mov	r3, r0
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d004      	beq.n	80120ea <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80120e0:	6938      	ldr	r0, [r7, #16]
 80120e2:	f7fd f8ce 	bl	800f282 <tcp_seg_free>
    return NULL;
 80120e6:	2300      	movs	r3, #0
 80120e8:	e037      	b.n	801215a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	685b      	ldr	r3, [r3, #4]
 80120ee:	685a      	ldr	r2, [r3, #4]
 80120f0:	693b      	ldr	r3, [r7, #16]
 80120f2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	8ada      	ldrh	r2, [r3, #22]
 80120f8:	693b      	ldr	r3, [r7, #16]
 80120fa:	68dc      	ldr	r4, [r3, #12]
 80120fc:	4610      	mov	r0, r2
 80120fe:	f7fa fa4d 	bl	800c59c <lwip_htons>
 8012102:	4603      	mov	r3, r0
 8012104:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	8b1a      	ldrh	r2, [r3, #24]
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	68dc      	ldr	r4, [r3, #12]
 801210e:	4610      	mov	r0, r2
 8012110:	f7fa fa44 	bl	800c59c <lwip_htons>
 8012114:	4603      	mov	r3, r0
 8012116:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012118:	693b      	ldr	r3, [r7, #16]
 801211a:	68dc      	ldr	r4, [r3, #12]
 801211c:	6838      	ldr	r0, [r7, #0]
 801211e:	f7fa fa52 	bl	800c5c6 <lwip_htonl>
 8012122:	4603      	mov	r3, r0
 8012124:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012126:	7dfb      	ldrb	r3, [r7, #23]
 8012128:	089b      	lsrs	r3, r3, #2
 801212a:	b2db      	uxtb	r3, r3
 801212c:	b29b      	uxth	r3, r3
 801212e:	3305      	adds	r3, #5
 8012130:	b29b      	uxth	r3, r3
 8012132:	031b      	lsls	r3, r3, #12
 8012134:	b29a      	uxth	r2, r3
 8012136:	79fb      	ldrb	r3, [r7, #7]
 8012138:	b29b      	uxth	r3, r3
 801213a:	4313      	orrs	r3, r2
 801213c:	b29a      	uxth	r2, r3
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	68dc      	ldr	r4, [r3, #12]
 8012142:	4610      	mov	r0, r2
 8012144:	f7fa fa2a 	bl	800c59c <lwip_htons>
 8012148:	4603      	mov	r3, r0
 801214a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801214c:	693b      	ldr	r3, [r7, #16]
 801214e:	68db      	ldr	r3, [r3, #12]
 8012150:	2200      	movs	r2, #0
 8012152:	749a      	strb	r2, [r3, #18]
 8012154:	2200      	movs	r2, #0
 8012156:	74da      	strb	r2, [r3, #19]
  return seg;
 8012158:	693b      	ldr	r3, [r7, #16]
}
 801215a:	4618      	mov	r0, r3
 801215c:	371c      	adds	r7, #28
 801215e:	46bd      	mov	sp, r7
 8012160:	bd90      	pop	{r4, r7, pc}
 8012162:	bf00      	nop
 8012164:	08019934 	.word	0x08019934
 8012168:	08019968 	.word	0x08019968
 801216c:	08019988 	.word	0x08019988
 8012170:	080199b0 	.word	0x080199b0
 8012174:	080199d4 	.word	0x080199d4

08012178 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012178:	b590      	push	{r4, r7, lr}
 801217a:	b08b      	sub	sp, #44	; 0x2c
 801217c:	af02      	add	r7, sp, #8
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	460b      	mov	r3, r1
 8012182:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012184:	2300      	movs	r3, #0
 8012186:	61fb      	str	r3, [r7, #28]
 8012188:	2300      	movs	r3, #0
 801218a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801218c:	2300      	movs	r3, #0
 801218e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d106      	bne.n	80121a4 <tcp_split_unsent_seg+0x2c>
 8012196:	4b95      	ldr	r3, [pc, #596]	; (80123ec <tcp_split_unsent_seg+0x274>)
 8012198:	f240 324b 	movw	r2, #843	; 0x34b
 801219c:	4994      	ldr	r1, [pc, #592]	; (80123f0 <tcp_split_unsent_seg+0x278>)
 801219e:	4895      	ldr	r0, [pc, #596]	; (80123f4 <tcp_split_unsent_seg+0x27c>)
 80121a0:	f005 f812 	bl	80171c8 <iprintf>

  useg = pcb->unsent;
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121a8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80121aa:	697b      	ldr	r3, [r7, #20]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d102      	bne.n	80121b6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80121b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121b4:	e116      	b.n	80123e4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80121b6:	887b      	ldrh	r3, [r7, #2]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d109      	bne.n	80121d0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80121bc:	4b8b      	ldr	r3, [pc, #556]	; (80123ec <tcp_split_unsent_seg+0x274>)
 80121be:	f240 3253 	movw	r2, #851	; 0x353
 80121c2:	498d      	ldr	r1, [pc, #564]	; (80123f8 <tcp_split_unsent_seg+0x280>)
 80121c4:	488b      	ldr	r0, [pc, #556]	; (80123f4 <tcp_split_unsent_seg+0x27c>)
 80121c6:	f004 ffff 	bl	80171c8 <iprintf>
    return ERR_VAL;
 80121ca:	f06f 0305 	mvn.w	r3, #5
 80121ce:	e109      	b.n	80123e4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	891b      	ldrh	r3, [r3, #8]
 80121d4:	887a      	ldrh	r2, [r7, #2]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d301      	bcc.n	80121de <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80121da:	2300      	movs	r3, #0
 80121dc:	e102      	b.n	80123e4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121e2:	887a      	ldrh	r2, [r7, #2]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d906      	bls.n	80121f6 <tcp_split_unsent_seg+0x7e>
 80121e8:	4b80      	ldr	r3, [pc, #512]	; (80123ec <tcp_split_unsent_seg+0x274>)
 80121ea:	f240 325b 	movw	r2, #859	; 0x35b
 80121ee:	4983      	ldr	r1, [pc, #524]	; (80123fc <tcp_split_unsent_seg+0x284>)
 80121f0:	4880      	ldr	r0, [pc, #512]	; (80123f4 <tcp_split_unsent_seg+0x27c>)
 80121f2:	f004 ffe9 	bl	80171c8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	891b      	ldrh	r3, [r3, #8]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d106      	bne.n	801220c <tcp_split_unsent_seg+0x94>
 80121fe:	4b7b      	ldr	r3, [pc, #492]	; (80123ec <tcp_split_unsent_seg+0x274>)
 8012200:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012204:	497e      	ldr	r1, [pc, #504]	; (8012400 <tcp_split_unsent_seg+0x288>)
 8012206:	487b      	ldr	r0, [pc, #492]	; (80123f4 <tcp_split_unsent_seg+0x27c>)
 8012208:	f004 ffde 	bl	80171c8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801220c:	697b      	ldr	r3, [r7, #20]
 801220e:	7a9b      	ldrb	r3, [r3, #10]
 8012210:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012212:	7bfb      	ldrb	r3, [r7, #15]
 8012214:	009b      	lsls	r3, r3, #2
 8012216:	b2db      	uxtb	r3, r3
 8012218:	f003 0304 	and.w	r3, r3, #4
 801221c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	891a      	ldrh	r2, [r3, #8]
 8012222:	887b      	ldrh	r3, [r7, #2]
 8012224:	1ad3      	subs	r3, r2, r3
 8012226:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012228:	7bbb      	ldrb	r3, [r7, #14]
 801222a:	b29a      	uxth	r2, r3
 801222c:	89bb      	ldrh	r3, [r7, #12]
 801222e:	4413      	add	r3, r2
 8012230:	b29b      	uxth	r3, r3
 8012232:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012236:	4619      	mov	r1, r3
 8012238:	2036      	movs	r0, #54	; 0x36
 801223a:	f7fb fa29 	bl	800d690 <pbuf_alloc>
 801223e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012240:	693b      	ldr	r3, [r7, #16]
 8012242:	2b00      	cmp	r3, #0
 8012244:	f000 80b7 	beq.w	80123b6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	685b      	ldr	r3, [r3, #4]
 801224c:	891a      	ldrh	r2, [r3, #8]
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	891b      	ldrh	r3, [r3, #8]
 8012252:	1ad3      	subs	r3, r2, r3
 8012254:	b29a      	uxth	r2, r3
 8012256:	887b      	ldrh	r3, [r7, #2]
 8012258:	4413      	add	r3, r2
 801225a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	6858      	ldr	r0, [r3, #4]
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	685a      	ldr	r2, [r3, #4]
 8012264:	7bbb      	ldrb	r3, [r7, #14]
 8012266:	18d1      	adds	r1, r2, r3
 8012268:	897b      	ldrh	r3, [r7, #10]
 801226a:	89ba      	ldrh	r2, [r7, #12]
 801226c:	f7fb feee 	bl	800e04c <pbuf_copy_partial>
 8012270:	4603      	mov	r3, r0
 8012272:	461a      	mov	r2, r3
 8012274:	89bb      	ldrh	r3, [r7, #12]
 8012276:	4293      	cmp	r3, r2
 8012278:	f040 809f 	bne.w	80123ba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	899b      	ldrh	r3, [r3, #12]
 8012282:	b29b      	uxth	r3, r3
 8012284:	4618      	mov	r0, r3
 8012286:	f7fa f989 	bl	800c59c <lwip_htons>
 801228a:	4603      	mov	r3, r0
 801228c:	b2db      	uxtb	r3, r3
 801228e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012292:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012294:	2300      	movs	r3, #0
 8012296:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012298:	7efb      	ldrb	r3, [r7, #27]
 801229a:	f003 0308 	and.w	r3, r3, #8
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d007      	beq.n	80122b2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80122a2:	7efb      	ldrb	r3, [r7, #27]
 80122a4:	f023 0308 	bic.w	r3, r3, #8
 80122a8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80122aa:	7ebb      	ldrb	r3, [r7, #26]
 80122ac:	f043 0308 	orr.w	r3, r3, #8
 80122b0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80122b2:	7efb      	ldrb	r3, [r7, #27]
 80122b4:	f003 0301 	and.w	r3, r3, #1
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d007      	beq.n	80122cc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80122bc:	7efb      	ldrb	r3, [r7, #27]
 80122be:	f023 0301 	bic.w	r3, r3, #1
 80122c2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80122c4:	7ebb      	ldrb	r3, [r7, #26]
 80122c6:	f043 0301 	orr.w	r3, r3, #1
 80122ca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	68db      	ldr	r3, [r3, #12]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7fa f977 	bl	800c5c6 <lwip_htonl>
 80122d8:	4602      	mov	r2, r0
 80122da:	887b      	ldrh	r3, [r7, #2]
 80122dc:	18d1      	adds	r1, r2, r3
 80122de:	7eba      	ldrb	r2, [r7, #26]
 80122e0:	7bfb      	ldrb	r3, [r7, #15]
 80122e2:	9300      	str	r3, [sp, #0]
 80122e4:	460b      	mov	r3, r1
 80122e6:	6939      	ldr	r1, [r7, #16]
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f7ff fea7 	bl	801203c <tcp_create_segment>
 80122ee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80122f0:	69fb      	ldr	r3, [r7, #28]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d063      	beq.n	80123be <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	685b      	ldr	r3, [r3, #4]
 80122fa:	4618      	mov	r0, r3
 80122fc:	f7fb fd34 	bl	800dd68 <pbuf_clen>
 8012300:	4603      	mov	r3, r0
 8012302:	461a      	mov	r2, r3
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801230a:	1a9b      	subs	r3, r3, r2
 801230c:	b29a      	uxth	r2, r3
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012314:	697b      	ldr	r3, [r7, #20]
 8012316:	6858      	ldr	r0, [r3, #4]
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	685b      	ldr	r3, [r3, #4]
 801231c:	891a      	ldrh	r2, [r3, #8]
 801231e:	89bb      	ldrh	r3, [r7, #12]
 8012320:	1ad3      	subs	r3, r2, r3
 8012322:	b29b      	uxth	r3, r3
 8012324:	4619      	mov	r1, r3
 8012326:	f7fb fb11 	bl	800d94c <pbuf_realloc>
  useg->len -= remainder;
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	891a      	ldrh	r2, [r3, #8]
 801232e:	89bb      	ldrh	r3, [r7, #12]
 8012330:	1ad3      	subs	r3, r2, r3
 8012332:	b29a      	uxth	r2, r3
 8012334:	697b      	ldr	r3, [r7, #20]
 8012336:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	68db      	ldr	r3, [r3, #12]
 801233c:	899b      	ldrh	r3, [r3, #12]
 801233e:	b29c      	uxth	r4, r3
 8012340:	7efb      	ldrb	r3, [r7, #27]
 8012342:	b29b      	uxth	r3, r3
 8012344:	4618      	mov	r0, r3
 8012346:	f7fa f929 	bl	800c59c <lwip_htons>
 801234a:	4603      	mov	r3, r0
 801234c:	461a      	mov	r2, r3
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	68db      	ldr	r3, [r3, #12]
 8012352:	4322      	orrs	r2, r4
 8012354:	b292      	uxth	r2, r2
 8012356:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	4618      	mov	r0, r3
 801235e:	f7fb fd03 	bl	800dd68 <pbuf_clen>
 8012362:	4603      	mov	r3, r0
 8012364:	461a      	mov	r2, r3
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801236c:	4413      	add	r3, r2
 801236e:	b29a      	uxth	r2, r3
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012376:	69fb      	ldr	r3, [r7, #28]
 8012378:	685b      	ldr	r3, [r3, #4]
 801237a:	4618      	mov	r0, r3
 801237c:	f7fb fcf4 	bl	800dd68 <pbuf_clen>
 8012380:	4603      	mov	r3, r0
 8012382:	461a      	mov	r2, r3
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801238a:	4413      	add	r3, r2
 801238c:	b29a      	uxth	r2, r3
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	69fb      	ldr	r3, [r7, #28]
 801239a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	69fa      	ldr	r2, [r7, #28]
 80123a0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80123a2:	69fb      	ldr	r3, [r7, #28]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d103      	bne.n	80123b2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2200      	movs	r2, #0
 80123ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80123b2:	2300      	movs	r3, #0
 80123b4:	e016      	b.n	80123e4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80123b6:	bf00      	nop
 80123b8:	e002      	b.n	80123c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80123ba:	bf00      	nop
 80123bc:	e000      	b.n	80123c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80123be:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80123c0:	69fb      	ldr	r3, [r7, #28]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d006      	beq.n	80123d4 <tcp_split_unsent_seg+0x25c>
 80123c6:	4b09      	ldr	r3, [pc, #36]	; (80123ec <tcp_split_unsent_seg+0x274>)
 80123c8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80123cc:	490d      	ldr	r1, [pc, #52]	; (8012404 <tcp_split_unsent_seg+0x28c>)
 80123ce:	4809      	ldr	r0, [pc, #36]	; (80123f4 <tcp_split_unsent_seg+0x27c>)
 80123d0:	f004 fefa 	bl	80171c8 <iprintf>
  if (p != NULL) {
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d002      	beq.n	80123e0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80123da:	6938      	ldr	r0, [r7, #16]
 80123dc:	f7fb fc3c 	bl	800dc58 <pbuf_free>
  }

  return ERR_MEM;
 80123e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	3724      	adds	r7, #36	; 0x24
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd90      	pop	{r4, r7, pc}
 80123ec:	08019934 	.word	0x08019934
 80123f0:	08019cc8 	.word	0x08019cc8
 80123f4:	08019988 	.word	0x08019988
 80123f8:	08019cec 	.word	0x08019cec
 80123fc:	08019d10 	.word	0x08019d10
 8012400:	08019d20 	.word	0x08019d20
 8012404:	08019d30 	.word	0x08019d30

08012408 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012408:	b590      	push	{r4, r7, lr}
 801240a:	b085      	sub	sp, #20
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d106      	bne.n	8012424 <tcp_send_fin+0x1c>
 8012416:	4b21      	ldr	r3, [pc, #132]	; (801249c <tcp_send_fin+0x94>)
 8012418:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801241c:	4920      	ldr	r1, [pc, #128]	; (80124a0 <tcp_send_fin+0x98>)
 801241e:	4821      	ldr	r0, [pc, #132]	; (80124a4 <tcp_send_fin+0x9c>)
 8012420:	f004 fed2 	bl	80171c8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012428:	2b00      	cmp	r3, #0
 801242a:	d02e      	beq.n	801248a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012430:	60fb      	str	r3, [r7, #12]
 8012432:	e002      	b.n	801243a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d1f8      	bne.n	8012434 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	68db      	ldr	r3, [r3, #12]
 8012446:	899b      	ldrh	r3, [r3, #12]
 8012448:	b29b      	uxth	r3, r3
 801244a:	4618      	mov	r0, r3
 801244c:	f7fa f8a6 	bl	800c59c <lwip_htons>
 8012450:	4603      	mov	r3, r0
 8012452:	b2db      	uxtb	r3, r3
 8012454:	f003 0307 	and.w	r3, r3, #7
 8012458:	2b00      	cmp	r3, #0
 801245a:	d116      	bne.n	801248a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	68db      	ldr	r3, [r3, #12]
 8012460:	899b      	ldrh	r3, [r3, #12]
 8012462:	b29c      	uxth	r4, r3
 8012464:	2001      	movs	r0, #1
 8012466:	f7fa f899 	bl	800c59c <lwip_htons>
 801246a:	4603      	mov	r3, r0
 801246c:	461a      	mov	r2, r3
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	68db      	ldr	r3, [r3, #12]
 8012472:	4322      	orrs	r2, r4
 8012474:	b292      	uxth	r2, r2
 8012476:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	8b5b      	ldrh	r3, [r3, #26]
 801247c:	f043 0320 	orr.w	r3, r3, #32
 8012480:	b29a      	uxth	r2, r3
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012486:	2300      	movs	r3, #0
 8012488:	e004      	b.n	8012494 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801248a:	2101      	movs	r1, #1
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f000 f80b 	bl	80124a8 <tcp_enqueue_flags>
 8012492:	4603      	mov	r3, r0
}
 8012494:	4618      	mov	r0, r3
 8012496:	3714      	adds	r7, #20
 8012498:	46bd      	mov	sp, r7
 801249a:	bd90      	pop	{r4, r7, pc}
 801249c:	08019934 	.word	0x08019934
 80124a0:	08019d3c 	.word	0x08019d3c
 80124a4:	08019988 	.word	0x08019988

080124a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b08a      	sub	sp, #40	; 0x28
 80124ac:	af02      	add	r7, sp, #8
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	460b      	mov	r3, r1
 80124b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80124b4:	2300      	movs	r3, #0
 80124b6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80124b8:	2300      	movs	r3, #0
 80124ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80124bc:	78fb      	ldrb	r3, [r7, #3]
 80124be:	f003 0303 	and.w	r3, r3, #3
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d106      	bne.n	80124d4 <tcp_enqueue_flags+0x2c>
 80124c6:	4b67      	ldr	r3, [pc, #412]	; (8012664 <tcp_enqueue_flags+0x1bc>)
 80124c8:	f240 4211 	movw	r2, #1041	; 0x411
 80124cc:	4966      	ldr	r1, [pc, #408]	; (8012668 <tcp_enqueue_flags+0x1c0>)
 80124ce:	4867      	ldr	r0, [pc, #412]	; (801266c <tcp_enqueue_flags+0x1c4>)
 80124d0:	f004 fe7a 	bl	80171c8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d106      	bne.n	80124e8 <tcp_enqueue_flags+0x40>
 80124da:	4b62      	ldr	r3, [pc, #392]	; (8012664 <tcp_enqueue_flags+0x1bc>)
 80124dc:	f240 4213 	movw	r2, #1043	; 0x413
 80124e0:	4963      	ldr	r1, [pc, #396]	; (8012670 <tcp_enqueue_flags+0x1c8>)
 80124e2:	4862      	ldr	r0, [pc, #392]	; (801266c <tcp_enqueue_flags+0x1c4>)
 80124e4:	f004 fe70 	bl	80171c8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80124e8:	78fb      	ldrb	r3, [r7, #3]
 80124ea:	f003 0302 	and.w	r3, r3, #2
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d001      	beq.n	80124f6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80124f2:	2301      	movs	r3, #1
 80124f4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80124f6:	7ffb      	ldrb	r3, [r7, #31]
 80124f8:	009b      	lsls	r3, r3, #2
 80124fa:	b2db      	uxtb	r3, r3
 80124fc:	f003 0304 	and.w	r3, r3, #4
 8012500:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012502:	7dfb      	ldrb	r3, [r7, #23]
 8012504:	b29b      	uxth	r3, r3
 8012506:	f44f 7220 	mov.w	r2, #640	; 0x280
 801250a:	4619      	mov	r1, r3
 801250c:	2036      	movs	r0, #54	; 0x36
 801250e:	f7fb f8bf 	bl	800d690 <pbuf_alloc>
 8012512:	6138      	str	r0, [r7, #16]
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d109      	bne.n	801252e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	8b5b      	ldrh	r3, [r3, #26]
 801251e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012522:	b29a      	uxth	r2, r3
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012528:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801252c:	e095      	b.n	801265a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801252e:	693b      	ldr	r3, [r7, #16]
 8012530:	895a      	ldrh	r2, [r3, #10]
 8012532:	7dfb      	ldrb	r3, [r7, #23]
 8012534:	b29b      	uxth	r3, r3
 8012536:	429a      	cmp	r2, r3
 8012538:	d206      	bcs.n	8012548 <tcp_enqueue_flags+0xa0>
 801253a:	4b4a      	ldr	r3, [pc, #296]	; (8012664 <tcp_enqueue_flags+0x1bc>)
 801253c:	f240 4239 	movw	r2, #1081	; 0x439
 8012540:	494c      	ldr	r1, [pc, #304]	; (8012674 <tcp_enqueue_flags+0x1cc>)
 8012542:	484a      	ldr	r0, [pc, #296]	; (801266c <tcp_enqueue_flags+0x1c4>)
 8012544:	f004 fe40 	bl	80171c8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801254c:	78fa      	ldrb	r2, [r7, #3]
 801254e:	7ffb      	ldrb	r3, [r7, #31]
 8012550:	9300      	str	r3, [sp, #0]
 8012552:	460b      	mov	r3, r1
 8012554:	6939      	ldr	r1, [r7, #16]
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f7ff fd70 	bl	801203c <tcp_create_segment>
 801255c:	60f8      	str	r0, [r7, #12]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d109      	bne.n	8012578 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	8b5b      	ldrh	r3, [r3, #26]
 8012568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801256c:	b29a      	uxth	r2, r3
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012576:	e070      	b.n	801265a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	68db      	ldr	r3, [r3, #12]
 801257c:	f003 0303 	and.w	r3, r3, #3
 8012580:	2b00      	cmp	r3, #0
 8012582:	d006      	beq.n	8012592 <tcp_enqueue_flags+0xea>
 8012584:	4b37      	ldr	r3, [pc, #220]	; (8012664 <tcp_enqueue_flags+0x1bc>)
 8012586:	f240 4242 	movw	r2, #1090	; 0x442
 801258a:	493b      	ldr	r1, [pc, #236]	; (8012678 <tcp_enqueue_flags+0x1d0>)
 801258c:	4837      	ldr	r0, [pc, #220]	; (801266c <tcp_enqueue_flags+0x1c4>)
 801258e:	f004 fe1b 	bl	80171c8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	891b      	ldrh	r3, [r3, #8]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d006      	beq.n	80125a8 <tcp_enqueue_flags+0x100>
 801259a:	4b32      	ldr	r3, [pc, #200]	; (8012664 <tcp_enqueue_flags+0x1bc>)
 801259c:	f240 4243 	movw	r2, #1091	; 0x443
 80125a0:	4936      	ldr	r1, [pc, #216]	; (801267c <tcp_enqueue_flags+0x1d4>)
 80125a2:	4832      	ldr	r0, [pc, #200]	; (801266c <tcp_enqueue_flags+0x1c4>)
 80125a4:	f004 fe10 	bl	80171c8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d103      	bne.n	80125b8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	68fa      	ldr	r2, [r7, #12]
 80125b4:	66da      	str	r2, [r3, #108]	; 0x6c
 80125b6:	e00d      	b.n	80125d4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125bc:	61bb      	str	r3, [r7, #24]
 80125be:	e002      	b.n	80125c6 <tcp_enqueue_flags+0x11e>
 80125c0:	69bb      	ldr	r3, [r7, #24]
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	61bb      	str	r3, [r7, #24]
 80125c6:	69bb      	ldr	r3, [r7, #24]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d1f8      	bne.n	80125c0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	68fa      	ldr	r2, [r7, #12]
 80125d2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2200      	movs	r2, #0
 80125d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80125dc:	78fb      	ldrb	r3, [r7, #3]
 80125de:	f003 0302 	and.w	r3, r3, #2
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d104      	bne.n	80125f0 <tcp_enqueue_flags+0x148>
 80125e6:	78fb      	ldrb	r3, [r7, #3]
 80125e8:	f003 0301 	and.w	r3, r3, #1
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d004      	beq.n	80125fa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80125f4:	1c5a      	adds	r2, r3, #1
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80125fa:	78fb      	ldrb	r3, [r7, #3]
 80125fc:	f003 0301 	and.w	r3, r3, #1
 8012600:	2b00      	cmp	r3, #0
 8012602:	d006      	beq.n	8012612 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	8b5b      	ldrh	r3, [r3, #26]
 8012608:	f043 0320 	orr.w	r3, r3, #32
 801260c:	b29a      	uxth	r2, r3
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	4618      	mov	r0, r3
 8012618:	f7fb fba6 	bl	800dd68 <pbuf_clen>
 801261c:	4603      	mov	r3, r0
 801261e:	461a      	mov	r2, r3
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012626:	4413      	add	r3, r2
 8012628:	b29a      	uxth	r2, r3
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012636:	2b00      	cmp	r3, #0
 8012638:	d00e      	beq.n	8012658 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801263e:	2b00      	cmp	r3, #0
 8012640:	d10a      	bne.n	8012658 <tcp_enqueue_flags+0x1b0>
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012646:	2b00      	cmp	r3, #0
 8012648:	d106      	bne.n	8012658 <tcp_enqueue_flags+0x1b0>
 801264a:	4b06      	ldr	r3, [pc, #24]	; (8012664 <tcp_enqueue_flags+0x1bc>)
 801264c:	f240 4265 	movw	r2, #1125	; 0x465
 8012650:	490b      	ldr	r1, [pc, #44]	; (8012680 <tcp_enqueue_flags+0x1d8>)
 8012652:	4806      	ldr	r0, [pc, #24]	; (801266c <tcp_enqueue_flags+0x1c4>)
 8012654:	f004 fdb8 	bl	80171c8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012658:	2300      	movs	r3, #0
}
 801265a:	4618      	mov	r0, r3
 801265c:	3720      	adds	r7, #32
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop
 8012664:	08019934 	.word	0x08019934
 8012668:	08019d58 	.word	0x08019d58
 801266c:	08019988 	.word	0x08019988
 8012670:	08019db0 	.word	0x08019db0
 8012674:	08019dd0 	.word	0x08019dd0
 8012678:	08019e0c 	.word	0x08019e0c
 801267c:	08019e24 	.word	0x08019e24
 8012680:	08019e50 	.word	0x08019e50

08012684 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012684:	b5b0      	push	{r4, r5, r7, lr}
 8012686:	b08a      	sub	sp, #40	; 0x28
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d106      	bne.n	80126a0 <tcp_output+0x1c>
 8012692:	4b8a      	ldr	r3, [pc, #552]	; (80128bc <tcp_output+0x238>)
 8012694:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012698:	4989      	ldr	r1, [pc, #548]	; (80128c0 <tcp_output+0x23c>)
 801269a:	488a      	ldr	r0, [pc, #552]	; (80128c4 <tcp_output+0x240>)
 801269c:	f004 fd94 	bl	80171c8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	7d1b      	ldrb	r3, [r3, #20]
 80126a4:	2b01      	cmp	r3, #1
 80126a6:	d106      	bne.n	80126b6 <tcp_output+0x32>
 80126a8:	4b84      	ldr	r3, [pc, #528]	; (80128bc <tcp_output+0x238>)
 80126aa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80126ae:	4986      	ldr	r1, [pc, #536]	; (80128c8 <tcp_output+0x244>)
 80126b0:	4884      	ldr	r0, [pc, #528]	; (80128c4 <tcp_output+0x240>)
 80126b2:	f004 fd89 	bl	80171c8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80126b6:	4b85      	ldr	r3, [pc, #532]	; (80128cc <tcp_output+0x248>)
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	429a      	cmp	r2, r3
 80126be:	d101      	bne.n	80126c4 <tcp_output+0x40>
    return ERR_OK;
 80126c0:	2300      	movs	r3, #0
 80126c2:	e1ce      	b.n	8012a62 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126d0:	4293      	cmp	r3, r2
 80126d2:	bf28      	it	cs
 80126d4:	4613      	movcs	r3, r2
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126de:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80126e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d10b      	bne.n	80126fe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	8b5b      	ldrh	r3, [r3, #26]
 80126ea:	f003 0302 	and.w	r3, r3, #2
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	f000 81aa 	beq.w	8012a48 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f000 fdcb 	bl	8013290 <tcp_send_empty_ack>
 80126fa:	4603      	mov	r3, r0
 80126fc:	e1b1      	b.n	8012a62 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80126fe:	6879      	ldr	r1, [r7, #4]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	3304      	adds	r3, #4
 8012704:	461a      	mov	r2, r3
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f7ff fc7c 	bl	8012004 <tcp_route>
 801270c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d102      	bne.n	801271a <tcp_output+0x96>
    return ERR_RTE;
 8012714:	f06f 0303 	mvn.w	r3, #3
 8012718:	e1a3      	b.n	8012a62 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2b00      	cmp	r3, #0
 801271e:	d003      	beq.n	8012728 <tcp_output+0xa4>
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d111      	bne.n	801274c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	2b00      	cmp	r3, #0
 801272c:	d002      	beq.n	8012734 <tcp_output+0xb0>
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	3304      	adds	r3, #4
 8012732:	e000      	b.n	8012736 <tcp_output+0xb2>
 8012734:	2300      	movs	r3, #0
 8012736:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	2b00      	cmp	r3, #0
 801273c:	d102      	bne.n	8012744 <tcp_output+0xc0>
      return ERR_RTE;
 801273e:	f06f 0303 	mvn.w	r3, #3
 8012742:	e18e      	b.n	8012a62 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	681a      	ldr	r2, [r3, #0]
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274e:	68db      	ldr	r3, [r3, #12]
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	4618      	mov	r0, r3
 8012754:	f7f9 ff37 	bl	800c5c6 <lwip_htonl>
 8012758:	4602      	mov	r2, r0
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012762:	8912      	ldrh	r2, [r2, #8]
 8012764:	4413      	add	r3, r2
 8012766:	69ba      	ldr	r2, [r7, #24]
 8012768:	429a      	cmp	r2, r3
 801276a:	d227      	bcs.n	80127bc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012772:	461a      	mov	r2, r3
 8012774:	69bb      	ldr	r3, [r7, #24]
 8012776:	4293      	cmp	r3, r2
 8012778:	d114      	bne.n	80127a4 <tcp_output+0x120>
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801277e:	2b00      	cmp	r3, #0
 8012780:	d110      	bne.n	80127a4 <tcp_output+0x120>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012788:	2b00      	cmp	r3, #0
 801278a:	d10b      	bne.n	80127a4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2200      	movs	r2, #0
 8012790:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2201      	movs	r2, #1
 8012798:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2200      	movs	r2, #0
 80127a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	8b5b      	ldrh	r3, [r3, #26]
 80127a8:	f003 0302 	and.w	r3, r3, #2
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	f000 814d 	beq.w	8012a4c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f000 fd6c 	bl	8013290 <tcp_send_empty_ack>
 80127b8:	4603      	mov	r3, r0
 80127ba:	e152      	b.n	8012a62 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2200      	movs	r2, #0
 80127c0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127c8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80127ca:	6a3b      	ldr	r3, [r7, #32]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f000 811c 	beq.w	8012a0a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80127d2:	e002      	b.n	80127da <tcp_output+0x156>
 80127d4:	6a3b      	ldr	r3, [r7, #32]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	623b      	str	r3, [r7, #32]
 80127da:	6a3b      	ldr	r3, [r7, #32]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d1f8      	bne.n	80127d4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80127e2:	e112      	b.n	8012a0a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80127e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127e6:	68db      	ldr	r3, [r3, #12]
 80127e8:	899b      	ldrh	r3, [r3, #12]
 80127ea:	b29b      	uxth	r3, r3
 80127ec:	4618      	mov	r0, r3
 80127ee:	f7f9 fed5 	bl	800c59c <lwip_htons>
 80127f2:	4603      	mov	r3, r0
 80127f4:	b2db      	uxtb	r3, r3
 80127f6:	f003 0304 	and.w	r3, r3, #4
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d006      	beq.n	801280c <tcp_output+0x188>
 80127fe:	4b2f      	ldr	r3, [pc, #188]	; (80128bc <tcp_output+0x238>)
 8012800:	f240 5236 	movw	r2, #1334	; 0x536
 8012804:	4932      	ldr	r1, [pc, #200]	; (80128d0 <tcp_output+0x24c>)
 8012806:	482f      	ldr	r0, [pc, #188]	; (80128c4 <tcp_output+0x240>)
 8012808:	f004 fcde 	bl	80171c8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012810:	2b00      	cmp	r3, #0
 8012812:	d01f      	beq.n	8012854 <tcp_output+0x1d0>
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	8b5b      	ldrh	r3, [r3, #26]
 8012818:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801281c:	2b00      	cmp	r3, #0
 801281e:	d119      	bne.n	8012854 <tcp_output+0x1d0>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012824:	2b00      	cmp	r3, #0
 8012826:	d00b      	beq.n	8012840 <tcp_output+0x1bc>
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d110      	bne.n	8012854 <tcp_output+0x1d0>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012836:	891a      	ldrh	r2, [r3, #8]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801283c:	429a      	cmp	r2, r3
 801283e:	d209      	bcs.n	8012854 <tcp_output+0x1d0>
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012846:	2b00      	cmp	r3, #0
 8012848:	d004      	beq.n	8012854 <tcp_output+0x1d0>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012850:	2b08      	cmp	r3, #8
 8012852:	d901      	bls.n	8012858 <tcp_output+0x1d4>
 8012854:	2301      	movs	r3, #1
 8012856:	e000      	b.n	801285a <tcp_output+0x1d6>
 8012858:	2300      	movs	r3, #0
 801285a:	2b00      	cmp	r3, #0
 801285c:	d106      	bne.n	801286c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	8b5b      	ldrh	r3, [r3, #26]
 8012862:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012866:	2b00      	cmp	r3, #0
 8012868:	f000 80e4 	beq.w	8012a34 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	7d1b      	ldrb	r3, [r3, #20]
 8012870:	2b02      	cmp	r3, #2
 8012872:	d00d      	beq.n	8012890 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012876:	68db      	ldr	r3, [r3, #12]
 8012878:	899b      	ldrh	r3, [r3, #12]
 801287a:	b29c      	uxth	r4, r3
 801287c:	2010      	movs	r0, #16
 801287e:	f7f9 fe8d 	bl	800c59c <lwip_htons>
 8012882:	4603      	mov	r3, r0
 8012884:	461a      	mov	r2, r3
 8012886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012888:	68db      	ldr	r3, [r3, #12]
 801288a:	4322      	orrs	r2, r4
 801288c:	b292      	uxth	r2, r2
 801288e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012890:	697a      	ldr	r2, [r7, #20]
 8012892:	6879      	ldr	r1, [r7, #4]
 8012894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012896:	f000 f909 	bl	8012aac <tcp_output_segment>
 801289a:	4603      	mov	r3, r0
 801289c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801289e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d016      	beq.n	80128d4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	8b5b      	ldrh	r3, [r3, #26]
 80128aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128ae:	b29a      	uxth	r2, r3
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	835a      	strh	r2, [r3, #26]
      return err;
 80128b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128b8:	e0d3      	b.n	8012a62 <tcp_output+0x3de>
 80128ba:	bf00      	nop
 80128bc:	08019934 	.word	0x08019934
 80128c0:	08019e78 	.word	0x08019e78
 80128c4:	08019988 	.word	0x08019988
 80128c8:	08019e90 	.word	0x08019e90
 80128cc:	20009014 	.word	0x20009014
 80128d0:	08019eb8 	.word	0x08019eb8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80128d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d6:	681a      	ldr	r2, [r3, #0]
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	7d1b      	ldrb	r3, [r3, #20]
 80128e0:	2b02      	cmp	r3, #2
 80128e2:	d006      	beq.n	80128f2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	8b5b      	ldrh	r3, [r3, #26]
 80128e8:	f023 0303 	bic.w	r3, r3, #3
 80128ec:	b29a      	uxth	r2, r3
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80128f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7f9 fe64 	bl	800c5c6 <lwip_htonl>
 80128fe:	4604      	mov	r4, r0
 8012900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012902:	891b      	ldrh	r3, [r3, #8]
 8012904:	461d      	mov	r5, r3
 8012906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012908:	68db      	ldr	r3, [r3, #12]
 801290a:	899b      	ldrh	r3, [r3, #12]
 801290c:	b29b      	uxth	r3, r3
 801290e:	4618      	mov	r0, r3
 8012910:	f7f9 fe44 	bl	800c59c <lwip_htons>
 8012914:	4603      	mov	r3, r0
 8012916:	b2db      	uxtb	r3, r3
 8012918:	f003 0303 	and.w	r3, r3, #3
 801291c:	2b00      	cmp	r3, #0
 801291e:	d001      	beq.n	8012924 <tcp_output+0x2a0>
 8012920:	2301      	movs	r3, #1
 8012922:	e000      	b.n	8012926 <tcp_output+0x2a2>
 8012924:	2300      	movs	r3, #0
 8012926:	442b      	add	r3, r5
 8012928:	4423      	add	r3, r4
 801292a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012930:	68bb      	ldr	r3, [r7, #8]
 8012932:	1ad3      	subs	r3, r2, r3
 8012934:	2b00      	cmp	r3, #0
 8012936:	da02      	bge.n	801293e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	68ba      	ldr	r2, [r7, #8]
 801293c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012940:	891b      	ldrh	r3, [r3, #8]
 8012942:	461c      	mov	r4, r3
 8012944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012946:	68db      	ldr	r3, [r3, #12]
 8012948:	899b      	ldrh	r3, [r3, #12]
 801294a:	b29b      	uxth	r3, r3
 801294c:	4618      	mov	r0, r3
 801294e:	f7f9 fe25 	bl	800c59c <lwip_htons>
 8012952:	4603      	mov	r3, r0
 8012954:	b2db      	uxtb	r3, r3
 8012956:	f003 0303 	and.w	r3, r3, #3
 801295a:	2b00      	cmp	r3, #0
 801295c:	d001      	beq.n	8012962 <tcp_output+0x2de>
 801295e:	2301      	movs	r3, #1
 8012960:	e000      	b.n	8012964 <tcp_output+0x2e0>
 8012962:	2300      	movs	r3, #0
 8012964:	4423      	add	r3, r4
 8012966:	2b00      	cmp	r3, #0
 8012968:	d049      	beq.n	80129fe <tcp_output+0x37a>
      seg->next = NULL;
 801296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296c:	2200      	movs	r2, #0
 801296e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012974:	2b00      	cmp	r3, #0
 8012976:	d105      	bne.n	8012984 <tcp_output+0x300>
        pcb->unacked = seg;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801297c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012980:	623b      	str	r3, [r7, #32]
 8012982:	e03f      	b.n	8012a04 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012986:	68db      	ldr	r3, [r3, #12]
 8012988:	685b      	ldr	r3, [r3, #4]
 801298a:	4618      	mov	r0, r3
 801298c:	f7f9 fe1b 	bl	800c5c6 <lwip_htonl>
 8012990:	4604      	mov	r4, r0
 8012992:	6a3b      	ldr	r3, [r7, #32]
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	685b      	ldr	r3, [r3, #4]
 8012998:	4618      	mov	r0, r3
 801299a:	f7f9 fe14 	bl	800c5c6 <lwip_htonl>
 801299e:	4603      	mov	r3, r0
 80129a0:	1ae3      	subs	r3, r4, r3
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	da24      	bge.n	80129f0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	3370      	adds	r3, #112	; 0x70
 80129aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80129ac:	e002      	b.n	80129b4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80129ae:	69fb      	ldr	r3, [r7, #28]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d011      	beq.n	80129e0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80129bc:	69fb      	ldr	r3, [r7, #28]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	68db      	ldr	r3, [r3, #12]
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7f9 fdfe 	bl	800c5c6 <lwip_htonl>
 80129ca:	4604      	mov	r4, r0
 80129cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	685b      	ldr	r3, [r3, #4]
 80129d2:	4618      	mov	r0, r3
 80129d4:	f7f9 fdf7 	bl	800c5c6 <lwip_htonl>
 80129d8:	4603      	mov	r3, r0
 80129da:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80129dc:	2b00      	cmp	r3, #0
 80129de:	dbe6      	blt.n	80129ae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80129e0:	69fb      	ldr	r3, [r7, #28]
 80129e2:	681a      	ldr	r2, [r3, #0]
 80129e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80129e8:	69fb      	ldr	r3, [r7, #28]
 80129ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129ec:	601a      	str	r2, [r3, #0]
 80129ee:	e009      	b.n	8012a04 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80129f0:	6a3b      	ldr	r3, [r7, #32]
 80129f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129f4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80129f6:	6a3b      	ldr	r3, [r7, #32]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	623b      	str	r3, [r7, #32]
 80129fc:	e002      	b.n	8012a04 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80129fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a00:	f7fc fc3f 	bl	800f282 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a08:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d012      	beq.n	8012a36 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a12:	68db      	ldr	r3, [r3, #12]
 8012a14:	685b      	ldr	r3, [r3, #4]
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7f9 fdd5 	bl	800c5c6 <lwip_htonl>
 8012a1c:	4602      	mov	r2, r0
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a22:	1ad3      	subs	r3, r2, r3
 8012a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a26:	8912      	ldrh	r2, [r2, #8]
 8012a28:	4413      	add	r3, r2
  while (seg != NULL &&
 8012a2a:	69ba      	ldr	r2, [r7, #24]
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	f4bf aed9 	bcs.w	80127e4 <tcp_output+0x160>
 8012a32:	e000      	b.n	8012a36 <tcp_output+0x3b2>
      break;
 8012a34:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d108      	bne.n	8012a50 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2200      	movs	r2, #0
 8012a42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012a46:	e004      	b.n	8012a52 <tcp_output+0x3ce>
    goto output_done;
 8012a48:	bf00      	nop
 8012a4a:	e002      	b.n	8012a52 <tcp_output+0x3ce>
    goto output_done;
 8012a4c:	bf00      	nop
 8012a4e:	e000      	b.n	8012a52 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012a50:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	8b5b      	ldrh	r3, [r3, #26]
 8012a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012a5a:	b29a      	uxth	r2, r3
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012a60:	2300      	movs	r3, #0
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	3728      	adds	r7, #40	; 0x28
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bdb0      	pop	{r4, r5, r7, pc}
 8012a6a:	bf00      	nop

08012a6c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b082      	sub	sp, #8
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d106      	bne.n	8012a88 <tcp_output_segment_busy+0x1c>
 8012a7a:	4b09      	ldr	r3, [pc, #36]	; (8012aa0 <tcp_output_segment_busy+0x34>)
 8012a7c:	f240 529a 	movw	r2, #1434	; 0x59a
 8012a80:	4908      	ldr	r1, [pc, #32]	; (8012aa4 <tcp_output_segment_busy+0x38>)
 8012a82:	4809      	ldr	r0, [pc, #36]	; (8012aa8 <tcp_output_segment_busy+0x3c>)
 8012a84:	f004 fba0 	bl	80171c8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	7b9b      	ldrb	r3, [r3, #14]
 8012a8e:	2b01      	cmp	r3, #1
 8012a90:	d001      	beq.n	8012a96 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012a92:	2301      	movs	r3, #1
 8012a94:	e000      	b.n	8012a98 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012a96:	2300      	movs	r3, #0
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3708      	adds	r7, #8
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	08019934 	.word	0x08019934
 8012aa4:	08019ed0 	.word	0x08019ed0
 8012aa8:	08019988 	.word	0x08019988

08012aac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012aac:	b5b0      	push	{r4, r5, r7, lr}
 8012aae:	b08c      	sub	sp, #48	; 0x30
 8012ab0:	af04      	add	r7, sp, #16
 8012ab2:	60f8      	str	r0, [r7, #12]
 8012ab4:	60b9      	str	r1, [r7, #8]
 8012ab6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d106      	bne.n	8012acc <tcp_output_segment+0x20>
 8012abe:	4b63      	ldr	r3, [pc, #396]	; (8012c4c <tcp_output_segment+0x1a0>)
 8012ac0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012ac4:	4962      	ldr	r1, [pc, #392]	; (8012c50 <tcp_output_segment+0x1a4>)
 8012ac6:	4863      	ldr	r0, [pc, #396]	; (8012c54 <tcp_output_segment+0x1a8>)
 8012ac8:	f004 fb7e 	bl	80171c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d106      	bne.n	8012ae0 <tcp_output_segment+0x34>
 8012ad2:	4b5e      	ldr	r3, [pc, #376]	; (8012c4c <tcp_output_segment+0x1a0>)
 8012ad4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012ad8:	495f      	ldr	r1, [pc, #380]	; (8012c58 <tcp_output_segment+0x1ac>)
 8012ada:	485e      	ldr	r0, [pc, #376]	; (8012c54 <tcp_output_segment+0x1a8>)
 8012adc:	f004 fb74 	bl	80171c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d106      	bne.n	8012af4 <tcp_output_segment+0x48>
 8012ae6:	4b59      	ldr	r3, [pc, #356]	; (8012c4c <tcp_output_segment+0x1a0>)
 8012ae8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012aec:	495b      	ldr	r1, [pc, #364]	; (8012c5c <tcp_output_segment+0x1b0>)
 8012aee:	4859      	ldr	r0, [pc, #356]	; (8012c54 <tcp_output_segment+0x1a8>)
 8012af0:	f004 fb6a 	bl	80171c8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012af4:	68f8      	ldr	r0, [r7, #12]
 8012af6:	f7ff ffb9 	bl	8012a6c <tcp_output_segment_busy>
 8012afa:	4603      	mov	r3, r0
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d001      	beq.n	8012b04 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012b00:	2300      	movs	r3, #0
 8012b02:	e09f      	b.n	8012c44 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	68dc      	ldr	r4, [r3, #12]
 8012b0c:	4610      	mov	r0, r2
 8012b0e:	f7f9 fd5a 	bl	800c5c6 <lwip_htonl>
 8012b12:	4603      	mov	r3, r0
 8012b14:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012b16:	68bb      	ldr	r3, [r7, #8]
 8012b18:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	68dc      	ldr	r4, [r3, #12]
 8012b1e:	4610      	mov	r0, r2
 8012b20:	f7f9 fd3c 	bl	800c59c <lwip_htons>
 8012b24:	4603      	mov	r3, r0
 8012b26:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b2c:	68ba      	ldr	r2, [r7, #8]
 8012b2e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012b30:	441a      	add	r2, r3
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	68db      	ldr	r3, [r3, #12]
 8012b3a:	3314      	adds	r3, #20
 8012b3c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	7a9b      	ldrb	r3, [r3, #10]
 8012b42:	f003 0301 	and.w	r3, r3, #1
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d015      	beq.n	8012b76 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012b4a:	68bb      	ldr	r3, [r7, #8]
 8012b4c:	3304      	adds	r3, #4
 8012b4e:	461a      	mov	r2, r3
 8012b50:	6879      	ldr	r1, [r7, #4]
 8012b52:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012b56:	f7fc fe8b 	bl	800f870 <tcp_eff_send_mss_netif>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012b5e:	8b7b      	ldrh	r3, [r7, #26]
 8012b60:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012b64:	4618      	mov	r0, r3
 8012b66:	f7f9 fd2e 	bl	800c5c6 <lwip_htonl>
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	69fb      	ldr	r3, [r7, #28]
 8012b6e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012b70:	69fb      	ldr	r3, [r7, #28]
 8012b72:	3304      	adds	r3, #4
 8012b74:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	da02      	bge.n	8012b86 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	2200      	movs	r2, #0
 8012b84:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d10c      	bne.n	8012ba8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012b8e:	4b34      	ldr	r3, [pc, #208]	; (8012c60 <tcp_output_segment+0x1b4>)
 8012b90:	681a      	ldr	r2, [r3, #0]
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	68db      	ldr	r3, [r3, #12]
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7f9 fd12 	bl	800c5c6 <lwip_htonl>
 8012ba2:	4602      	mov	r2, r0
 8012ba4:	68bb      	ldr	r3, [r7, #8]
 8012ba6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	68da      	ldr	r2, [r3, #12]
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	685b      	ldr	r3, [r3, #4]
 8012bb2:	1ad3      	subs	r3, r2, r3
 8012bb4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	8959      	ldrh	r1, [r3, #10]
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	685b      	ldr	r3, [r3, #4]
 8012bc0:	8b3a      	ldrh	r2, [r7, #24]
 8012bc2:	1a8a      	subs	r2, r1, r2
 8012bc4:	b292      	uxth	r2, r2
 8012bc6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	8919      	ldrh	r1, [r3, #8]
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	685b      	ldr	r3, [r3, #4]
 8012bd2:	8b3a      	ldrh	r2, [r7, #24]
 8012bd4:	1a8a      	subs	r2, r1, r2
 8012bd6:	b292      	uxth	r2, r2
 8012bd8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	68fa      	ldr	r2, [r7, #12]
 8012be0:	68d2      	ldr	r2, [r2, #12]
 8012be2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	68db      	ldr	r3, [r3, #12]
 8012be8:	2200      	movs	r2, #0
 8012bea:	741a      	strb	r2, [r3, #16]
 8012bec:	2200      	movs	r2, #0
 8012bee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	68db      	ldr	r3, [r3, #12]
 8012bf4:	f103 0214 	add.w	r2, r3, #20
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	7a9b      	ldrb	r3, [r3, #10]
 8012bfc:	009b      	lsls	r3, r3, #2
 8012bfe:	f003 0304 	and.w	r3, r3, #4
 8012c02:	4413      	add	r3, r2
 8012c04:	69fa      	ldr	r2, [r7, #28]
 8012c06:	429a      	cmp	r2, r3
 8012c08:	d006      	beq.n	8012c18 <tcp_output_segment+0x16c>
 8012c0a:	4b10      	ldr	r3, [pc, #64]	; (8012c4c <tcp_output_segment+0x1a0>)
 8012c0c:	f240 621c 	movw	r2, #1564	; 0x61c
 8012c10:	4914      	ldr	r1, [pc, #80]	; (8012c64 <tcp_output_segment+0x1b8>)
 8012c12:	4810      	ldr	r0, [pc, #64]	; (8012c54 <tcp_output_segment+0x1a8>)
 8012c14:	f004 fad8 	bl	80171c8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	6858      	ldr	r0, [r3, #4]
 8012c1c:	68b9      	ldr	r1, [r7, #8]
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	1d1c      	adds	r4, r3, #4
 8012c22:	68bb      	ldr	r3, [r7, #8]
 8012c24:	7add      	ldrb	r5, [r3, #11]
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	7a9b      	ldrb	r3, [r3, #10]
 8012c2a:	687a      	ldr	r2, [r7, #4]
 8012c2c:	9202      	str	r2, [sp, #8]
 8012c2e:	2206      	movs	r2, #6
 8012c30:	9201      	str	r2, [sp, #4]
 8012c32:	9300      	str	r3, [sp, #0]
 8012c34:	462b      	mov	r3, r5
 8012c36:	4622      	mov	r2, r4
 8012c38:	f002 fdc8 	bl	80157cc <ip4_output_if>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012c40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	3720      	adds	r7, #32
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8012c4c:	08019934 	.word	0x08019934
 8012c50:	08019ef8 	.word	0x08019ef8
 8012c54:	08019988 	.word	0x08019988
 8012c58:	08019f18 	.word	0x08019f18
 8012c5c:	08019f38 	.word	0x08019f38
 8012c60:	20008fc8 	.word	0x20008fc8
 8012c64:	08019f5c 	.word	0x08019f5c

08012c68 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012c68:	b5b0      	push	{r4, r5, r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d106      	bne.n	8012c84 <tcp_rexmit_rto_prepare+0x1c>
 8012c76:	4b31      	ldr	r3, [pc, #196]	; (8012d3c <tcp_rexmit_rto_prepare+0xd4>)
 8012c78:	f240 6263 	movw	r2, #1635	; 0x663
 8012c7c:	4930      	ldr	r1, [pc, #192]	; (8012d40 <tcp_rexmit_rto_prepare+0xd8>)
 8012c7e:	4831      	ldr	r0, [pc, #196]	; (8012d44 <tcp_rexmit_rto_prepare+0xdc>)
 8012c80:	f004 faa2 	bl	80171c8 <iprintf>

  if (pcb->unacked == NULL) {
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d102      	bne.n	8012c92 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012c8c:	f06f 0305 	mvn.w	r3, #5
 8012c90:	e050      	b.n	8012d34 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c96:	60fb      	str	r3, [r7, #12]
 8012c98:	e00b      	b.n	8012cb2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f7ff fee6 	bl	8012a6c <tcp_output_segment_busy>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d002      	beq.n	8012cac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012ca6:	f06f 0305 	mvn.w	r3, #5
 8012caa:	e043      	b.n	8012d34 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	60fb      	str	r3, [r7, #12]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d1ef      	bne.n	8012c9a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012cba:	68f8      	ldr	r0, [r7, #12]
 8012cbc:	f7ff fed6 	bl	8012a6c <tcp_output_segment_busy>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d002      	beq.n	8012ccc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8012cc6:	f06f 0305 	mvn.w	r3, #5
 8012cca:	e033      	b.n	8012d34 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	2200      	movs	r2, #0
 8012ce0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	8b5b      	ldrh	r3, [r3, #26]
 8012ce6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8012cea:	b29a      	uxth	r2, r3
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	68db      	ldr	r3, [r3, #12]
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f7f9 fc65 	bl	800c5c6 <lwip_htonl>
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	891b      	ldrh	r3, [r3, #8]
 8012d02:	461d      	mov	r5, r3
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	68db      	ldr	r3, [r3, #12]
 8012d08:	899b      	ldrh	r3, [r3, #12]
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f7f9 fc45 	bl	800c59c <lwip_htons>
 8012d12:	4603      	mov	r3, r0
 8012d14:	b2db      	uxtb	r3, r3
 8012d16:	f003 0303 	and.w	r3, r3, #3
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d001      	beq.n	8012d22 <tcp_rexmit_rto_prepare+0xba>
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e000      	b.n	8012d24 <tcp_rexmit_rto_prepare+0xbc>
 8012d22:	2300      	movs	r3, #0
 8012d24:	442b      	add	r3, r5
 8012d26:	18e2      	adds	r2, r4, r3
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8012d32:	2300      	movs	r3, #0
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3710      	adds	r7, #16
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8012d3c:	08019934 	.word	0x08019934
 8012d40:	08019f70 	.word	0x08019f70
 8012d44:	08019988 	.word	0x08019988

08012d48 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b082      	sub	sp, #8
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d106      	bne.n	8012d64 <tcp_rexmit_rto_commit+0x1c>
 8012d56:	4b0d      	ldr	r3, [pc, #52]	; (8012d8c <tcp_rexmit_rto_commit+0x44>)
 8012d58:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012d5c:	490c      	ldr	r1, [pc, #48]	; (8012d90 <tcp_rexmit_rto_commit+0x48>)
 8012d5e:	480d      	ldr	r0, [pc, #52]	; (8012d94 <tcp_rexmit_rto_commit+0x4c>)
 8012d60:	f004 fa32 	bl	80171c8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012d6a:	2bff      	cmp	r3, #255	; 0xff
 8012d6c:	d007      	beq.n	8012d7e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012d74:	3301      	adds	r3, #1
 8012d76:	b2da      	uxtb	r2, r3
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012d7e:	6878      	ldr	r0, [r7, #4]
 8012d80:	f7ff fc80 	bl	8012684 <tcp_output>
}
 8012d84:	bf00      	nop
 8012d86:	3708      	adds	r7, #8
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}
 8012d8c:	08019934 	.word	0x08019934
 8012d90:	08019f94 	.word	0x08019f94
 8012d94:	08019988 	.word	0x08019988

08012d98 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d106      	bne.n	8012db4 <tcp_rexmit_rto+0x1c>
 8012da6:	4b0a      	ldr	r3, [pc, #40]	; (8012dd0 <tcp_rexmit_rto+0x38>)
 8012da8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012dac:	4909      	ldr	r1, [pc, #36]	; (8012dd4 <tcp_rexmit_rto+0x3c>)
 8012dae:	480a      	ldr	r0, [pc, #40]	; (8012dd8 <tcp_rexmit_rto+0x40>)
 8012db0:	f004 fa0a 	bl	80171c8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ff ff57 	bl	8012c68 <tcp_rexmit_rto_prepare>
 8012dba:	4603      	mov	r3, r0
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d102      	bne.n	8012dc6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012dc0:	6878      	ldr	r0, [r7, #4]
 8012dc2:	f7ff ffc1 	bl	8012d48 <tcp_rexmit_rto_commit>
  }
}
 8012dc6:	bf00      	nop
 8012dc8:	3708      	adds	r7, #8
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	bf00      	nop
 8012dd0:	08019934 	.word	0x08019934
 8012dd4:	08019fb8 	.word	0x08019fb8
 8012dd8:	08019988 	.word	0x08019988

08012ddc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012ddc:	b590      	push	{r4, r7, lr}
 8012dde:	b085      	sub	sp, #20
 8012de0:	af00      	add	r7, sp, #0
 8012de2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d106      	bne.n	8012df8 <tcp_rexmit+0x1c>
 8012dea:	4b2f      	ldr	r3, [pc, #188]	; (8012ea8 <tcp_rexmit+0xcc>)
 8012dec:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8012df0:	492e      	ldr	r1, [pc, #184]	; (8012eac <tcp_rexmit+0xd0>)
 8012df2:	482f      	ldr	r0, [pc, #188]	; (8012eb0 <tcp_rexmit+0xd4>)
 8012df4:	f004 f9e8 	bl	80171c8 <iprintf>

  if (pcb->unacked == NULL) {
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d102      	bne.n	8012e06 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012e00:	f06f 0305 	mvn.w	r3, #5
 8012e04:	e04c      	b.n	8012ea0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e0a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012e0c:	68b8      	ldr	r0, [r7, #8]
 8012e0e:	f7ff fe2d 	bl	8012a6c <tcp_output_segment_busy>
 8012e12:	4603      	mov	r3, r0
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d002      	beq.n	8012e1e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012e18:	f06f 0305 	mvn.w	r3, #5
 8012e1c:	e040      	b.n	8012ea0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	336c      	adds	r3, #108	; 0x6c
 8012e2a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012e2c:	e002      	b.n	8012e34 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012e34:	68fb      	ldr	r3, [r7, #12]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d011      	beq.n	8012e60 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	68db      	ldr	r3, [r3, #12]
 8012e42:	685b      	ldr	r3, [r3, #4]
 8012e44:	4618      	mov	r0, r3
 8012e46:	f7f9 fbbe 	bl	800c5c6 <lwip_htonl>
 8012e4a:	4604      	mov	r4, r0
 8012e4c:	68bb      	ldr	r3, [r7, #8]
 8012e4e:	68db      	ldr	r3, [r3, #12]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7f9 fbb7 	bl	800c5c6 <lwip_htonl>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	dbe6      	blt.n	8012e2e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	681a      	ldr	r2, [r3, #0]
 8012e64:	68bb      	ldr	r3, [r7, #8]
 8012e66:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	68ba      	ldr	r2, [r7, #8]
 8012e6c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d103      	bne.n	8012e7e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e84:	2bff      	cmp	r3, #255	; 0xff
 8012e86:	d007      	beq.n	8012e98 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e8e:	3301      	adds	r3, #1
 8012e90:	b2da      	uxtb	r2, r3
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012e9e:	2300      	movs	r3, #0
}
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	3714      	adds	r7, #20
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd90      	pop	{r4, r7, pc}
 8012ea8:	08019934 	.word	0x08019934
 8012eac:	08019fd4 	.word	0x08019fd4
 8012eb0:	08019988 	.word	0x08019988

08012eb4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d106      	bne.n	8012ed0 <tcp_rexmit_fast+0x1c>
 8012ec2:	4b2a      	ldr	r3, [pc, #168]	; (8012f6c <tcp_rexmit_fast+0xb8>)
 8012ec4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8012ec8:	4929      	ldr	r1, [pc, #164]	; (8012f70 <tcp_rexmit_fast+0xbc>)
 8012eca:	482a      	ldr	r0, [pc, #168]	; (8012f74 <tcp_rexmit_fast+0xc0>)
 8012ecc:	f004 f97c 	bl	80171c8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d045      	beq.n	8012f64 <tcp_rexmit_fast+0xb0>
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	8b5b      	ldrh	r3, [r3, #26]
 8012edc:	f003 0304 	and.w	r3, r3, #4
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d13f      	bne.n	8012f64 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012ee4:	6878      	ldr	r0, [r7, #4]
 8012ee6:	f7ff ff79 	bl	8012ddc <tcp_rexmit>
 8012eea:	4603      	mov	r3, r0
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d139      	bne.n	8012f64 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012efc:	4293      	cmp	r3, r2
 8012efe:	bf28      	it	cs
 8012f00:	4613      	movcs	r3, r2
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	da00      	bge.n	8012f0a <tcp_rexmit_fast+0x56>
 8012f08:	3301      	adds	r3, #1
 8012f0a:	105b      	asrs	r3, r3, #1
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f20:	005b      	lsls	r3, r3, #1
 8012f22:	429a      	cmp	r2, r3
 8012f24:	d206      	bcs.n	8012f34 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f2a:	005b      	lsls	r3, r3, #1
 8012f2c:	b29a      	uxth	r2, r3
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012f3e:	4619      	mov	r1, r3
 8012f40:	0049      	lsls	r1, r1, #1
 8012f42:	440b      	add	r3, r1
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	4413      	add	r3, r2
 8012f48:	b29a      	uxth	r2, r3
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	8b5b      	ldrh	r3, [r3, #26]
 8012f54:	f043 0304 	orr.w	r3, r3, #4
 8012f58:	b29a      	uxth	r2, r3
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	2200      	movs	r2, #0
 8012f62:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012f64:	bf00      	nop
 8012f66:	3708      	adds	r7, #8
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	bd80      	pop	{r7, pc}
 8012f6c:	08019934 	.word	0x08019934
 8012f70:	08019fec 	.word	0x08019fec
 8012f74:	08019988 	.word	0x08019988

08012f78 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b086      	sub	sp, #24
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	60f8      	str	r0, [r7, #12]
 8012f80:	607b      	str	r3, [r7, #4]
 8012f82:	460b      	mov	r3, r1
 8012f84:	817b      	strh	r3, [r7, #10]
 8012f86:	4613      	mov	r3, r2
 8012f88:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012f8a:	897a      	ldrh	r2, [r7, #10]
 8012f8c:	893b      	ldrh	r3, [r7, #8]
 8012f8e:	4413      	add	r3, r2
 8012f90:	b29b      	uxth	r3, r3
 8012f92:	3314      	adds	r3, #20
 8012f94:	b29b      	uxth	r3, r3
 8012f96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012f9a:	4619      	mov	r1, r3
 8012f9c:	2022      	movs	r0, #34	; 0x22
 8012f9e:	f7fa fb77 	bl	800d690 <pbuf_alloc>
 8012fa2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d04d      	beq.n	8013046 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012faa:	897b      	ldrh	r3, [r7, #10]
 8012fac:	3313      	adds	r3, #19
 8012fae:	697a      	ldr	r2, [r7, #20]
 8012fb0:	8952      	ldrh	r2, [r2, #10]
 8012fb2:	4293      	cmp	r3, r2
 8012fb4:	db06      	blt.n	8012fc4 <tcp_output_alloc_header_common+0x4c>
 8012fb6:	4b26      	ldr	r3, [pc, #152]	; (8013050 <tcp_output_alloc_header_common+0xd8>)
 8012fb8:	f240 7223 	movw	r2, #1827	; 0x723
 8012fbc:	4925      	ldr	r1, [pc, #148]	; (8013054 <tcp_output_alloc_header_common+0xdc>)
 8012fbe:	4826      	ldr	r0, [pc, #152]	; (8013058 <tcp_output_alloc_header_common+0xe0>)
 8012fc0:	f004 f902 	bl	80171c8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8012fca:	8c3b      	ldrh	r3, [r7, #32]
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7f9 fae5 	bl	800c59c <lwip_htons>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	693b      	ldr	r3, [r7, #16]
 8012fd8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8012fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7f9 fadd 	bl	800c59c <lwip_htons>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8012fea:	693b      	ldr	r3, [r7, #16]
 8012fec:	687a      	ldr	r2, [r7, #4]
 8012fee:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012ff0:	68f8      	ldr	r0, [r7, #12]
 8012ff2:	f7f9 fae8 	bl	800c5c6 <lwip_htonl>
 8012ff6:	4602      	mov	r2, r0
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012ffc:	897b      	ldrh	r3, [r7, #10]
 8012ffe:	089b      	lsrs	r3, r3, #2
 8013000:	b29b      	uxth	r3, r3
 8013002:	3305      	adds	r3, #5
 8013004:	b29b      	uxth	r3, r3
 8013006:	031b      	lsls	r3, r3, #12
 8013008:	b29a      	uxth	r2, r3
 801300a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801300e:	b29b      	uxth	r3, r3
 8013010:	4313      	orrs	r3, r2
 8013012:	b29b      	uxth	r3, r3
 8013014:	4618      	mov	r0, r3
 8013016:	f7f9 fac1 	bl	800c59c <lwip_htons>
 801301a:	4603      	mov	r3, r0
 801301c:	461a      	mov	r2, r3
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013022:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013024:	4618      	mov	r0, r3
 8013026:	f7f9 fab9 	bl	800c59c <lwip_htons>
 801302a:	4603      	mov	r3, r0
 801302c:	461a      	mov	r2, r3
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013032:	693b      	ldr	r3, [r7, #16]
 8013034:	2200      	movs	r2, #0
 8013036:	741a      	strb	r2, [r3, #16]
 8013038:	2200      	movs	r2, #0
 801303a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	2200      	movs	r2, #0
 8013040:	749a      	strb	r2, [r3, #18]
 8013042:	2200      	movs	r2, #0
 8013044:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013046:	697b      	ldr	r3, [r7, #20]
}
 8013048:	4618      	mov	r0, r3
 801304a:	3718      	adds	r7, #24
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	08019934 	.word	0x08019934
 8013054:	0801a00c 	.word	0x0801a00c
 8013058:	08019988 	.word	0x08019988

0801305c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801305c:	b5b0      	push	{r4, r5, r7, lr}
 801305e:	b08a      	sub	sp, #40	; 0x28
 8013060:	af04      	add	r7, sp, #16
 8013062:	60f8      	str	r0, [r7, #12]
 8013064:	607b      	str	r3, [r7, #4]
 8013066:	460b      	mov	r3, r1
 8013068:	817b      	strh	r3, [r7, #10]
 801306a:	4613      	mov	r3, r2
 801306c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d106      	bne.n	8013082 <tcp_output_alloc_header+0x26>
 8013074:	4b15      	ldr	r3, [pc, #84]	; (80130cc <tcp_output_alloc_header+0x70>)
 8013076:	f240 7242 	movw	r2, #1858	; 0x742
 801307a:	4915      	ldr	r1, [pc, #84]	; (80130d0 <tcp_output_alloc_header+0x74>)
 801307c:	4815      	ldr	r0, [pc, #84]	; (80130d4 <tcp_output_alloc_header+0x78>)
 801307e:	f004 f8a3 	bl	80171c8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	8adb      	ldrh	r3, [r3, #22]
 801308a:	68fa      	ldr	r2, [r7, #12]
 801308c:	8b12      	ldrh	r2, [r2, #24]
 801308e:	68f9      	ldr	r1, [r7, #12]
 8013090:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013092:	893d      	ldrh	r5, [r7, #8]
 8013094:	897c      	ldrh	r4, [r7, #10]
 8013096:	9103      	str	r1, [sp, #12]
 8013098:	2110      	movs	r1, #16
 801309a:	9102      	str	r1, [sp, #8]
 801309c:	9201      	str	r2, [sp, #4]
 801309e:	9300      	str	r3, [sp, #0]
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	462a      	mov	r2, r5
 80130a4:	4621      	mov	r1, r4
 80130a6:	f7ff ff67 	bl	8012f78 <tcp_output_alloc_header_common>
 80130aa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d006      	beq.n	80130c0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130b6:	68fa      	ldr	r2, [r7, #12]
 80130b8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80130ba:	441a      	add	r2, r3
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80130c0:	697b      	ldr	r3, [r7, #20]
}
 80130c2:	4618      	mov	r0, r3
 80130c4:	3718      	adds	r7, #24
 80130c6:	46bd      	mov	sp, r7
 80130c8:	bdb0      	pop	{r4, r5, r7, pc}
 80130ca:	bf00      	nop
 80130cc:	08019934 	.word	0x08019934
 80130d0:	0801a03c 	.word	0x0801a03c
 80130d4:	08019988 	.word	0x08019988

080130d8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b088      	sub	sp, #32
 80130dc:	af00      	add	r7, sp, #0
 80130de:	60f8      	str	r0, [r7, #12]
 80130e0:	60b9      	str	r1, [r7, #8]
 80130e2:	4611      	mov	r1, r2
 80130e4:	461a      	mov	r2, r3
 80130e6:	460b      	mov	r3, r1
 80130e8:	71fb      	strb	r3, [r7, #7]
 80130ea:	4613      	mov	r3, r2
 80130ec:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80130ee:	2300      	movs	r3, #0
 80130f0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d106      	bne.n	8013106 <tcp_output_fill_options+0x2e>
 80130f8:	4b13      	ldr	r3, [pc, #76]	; (8013148 <tcp_output_fill_options+0x70>)
 80130fa:	f240 7256 	movw	r2, #1878	; 0x756
 80130fe:	4913      	ldr	r1, [pc, #76]	; (801314c <tcp_output_fill_options+0x74>)
 8013100:	4813      	ldr	r0, [pc, #76]	; (8013150 <tcp_output_fill_options+0x78>)
 8013102:	f004 f861 	bl	80171c8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801310c:	69bb      	ldr	r3, [r7, #24]
 801310e:	3314      	adds	r3, #20
 8013110:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013112:	69bb      	ldr	r3, [r7, #24]
 8013114:	f103 0214 	add.w	r2, r3, #20
 8013118:	8bfb      	ldrh	r3, [r7, #30]
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	4619      	mov	r1, r3
 801311e:	79fb      	ldrb	r3, [r7, #7]
 8013120:	009b      	lsls	r3, r3, #2
 8013122:	f003 0304 	and.w	r3, r3, #4
 8013126:	440b      	add	r3, r1
 8013128:	4413      	add	r3, r2
 801312a:	697a      	ldr	r2, [r7, #20]
 801312c:	429a      	cmp	r2, r3
 801312e:	d006      	beq.n	801313e <tcp_output_fill_options+0x66>
 8013130:	4b05      	ldr	r3, [pc, #20]	; (8013148 <tcp_output_fill_options+0x70>)
 8013132:	f240 7275 	movw	r2, #1909	; 0x775
 8013136:	4907      	ldr	r1, [pc, #28]	; (8013154 <tcp_output_fill_options+0x7c>)
 8013138:	4805      	ldr	r0, [pc, #20]	; (8013150 <tcp_output_fill_options+0x78>)
 801313a:	f004 f845 	bl	80171c8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801313e:	bf00      	nop
 8013140:	3720      	adds	r7, #32
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}
 8013146:	bf00      	nop
 8013148:	08019934 	.word	0x08019934
 801314c:	0801a064 	.word	0x0801a064
 8013150:	08019988 	.word	0x08019988
 8013154:	08019f5c 	.word	0x08019f5c

08013158 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b08a      	sub	sp, #40	; 0x28
 801315c:	af04      	add	r7, sp, #16
 801315e:	60f8      	str	r0, [r7, #12]
 8013160:	60b9      	str	r1, [r7, #8]
 8013162:	607a      	str	r2, [r7, #4]
 8013164:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013166:	68bb      	ldr	r3, [r7, #8]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d106      	bne.n	801317a <tcp_output_control_segment+0x22>
 801316c:	4b1c      	ldr	r3, [pc, #112]	; (80131e0 <tcp_output_control_segment+0x88>)
 801316e:	f240 7287 	movw	r2, #1927	; 0x787
 8013172:	491c      	ldr	r1, [pc, #112]	; (80131e4 <tcp_output_control_segment+0x8c>)
 8013174:	481c      	ldr	r0, [pc, #112]	; (80131e8 <tcp_output_control_segment+0x90>)
 8013176:	f004 f827 	bl	80171c8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801317a:	683a      	ldr	r2, [r7, #0]
 801317c:	6879      	ldr	r1, [r7, #4]
 801317e:	68f8      	ldr	r0, [r7, #12]
 8013180:	f7fe ff40 	bl	8012004 <tcp_route>
 8013184:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013186:	693b      	ldr	r3, [r7, #16]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d102      	bne.n	8013192 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801318c:	23fc      	movs	r3, #252	; 0xfc
 801318e:	75fb      	strb	r3, [r7, #23]
 8013190:	e01c      	b.n	80131cc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d006      	beq.n	80131a6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	7adb      	ldrb	r3, [r3, #11]
 801319c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	7a9b      	ldrb	r3, [r3, #10]
 80131a2:	757b      	strb	r3, [r7, #21]
 80131a4:	e003      	b.n	80131ae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80131a6:	23ff      	movs	r3, #255	; 0xff
 80131a8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80131aa:	2300      	movs	r3, #0
 80131ac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80131ae:	7dba      	ldrb	r2, [r7, #22]
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	9302      	str	r3, [sp, #8]
 80131b4:	2306      	movs	r3, #6
 80131b6:	9301      	str	r3, [sp, #4]
 80131b8:	7d7b      	ldrb	r3, [r7, #21]
 80131ba:	9300      	str	r3, [sp, #0]
 80131bc:	4613      	mov	r3, r2
 80131be:	683a      	ldr	r2, [r7, #0]
 80131c0:	6879      	ldr	r1, [r7, #4]
 80131c2:	68b8      	ldr	r0, [r7, #8]
 80131c4:	f002 fb02 	bl	80157cc <ip4_output_if>
 80131c8:	4603      	mov	r3, r0
 80131ca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80131cc:	68b8      	ldr	r0, [r7, #8]
 80131ce:	f7fa fd43 	bl	800dc58 <pbuf_free>
  return err;
 80131d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	3718      	adds	r7, #24
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	08019934 	.word	0x08019934
 80131e4:	0801a08c 	.word	0x0801a08c
 80131e8:	08019988 	.word	0x08019988

080131ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80131ec:	b590      	push	{r4, r7, lr}
 80131ee:	b08b      	sub	sp, #44	; 0x2c
 80131f0:	af04      	add	r7, sp, #16
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	607a      	str	r2, [r7, #4]
 80131f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d106      	bne.n	801320e <tcp_rst+0x22>
 8013200:	4b1f      	ldr	r3, [pc, #124]	; (8013280 <tcp_rst+0x94>)
 8013202:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013206:	491f      	ldr	r1, [pc, #124]	; (8013284 <tcp_rst+0x98>)
 8013208:	481f      	ldr	r0, [pc, #124]	; (8013288 <tcp_rst+0x9c>)
 801320a:	f003 ffdd 	bl	80171c8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013210:	2b00      	cmp	r3, #0
 8013212:	d106      	bne.n	8013222 <tcp_rst+0x36>
 8013214:	4b1a      	ldr	r3, [pc, #104]	; (8013280 <tcp_rst+0x94>)
 8013216:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801321a:	491c      	ldr	r1, [pc, #112]	; (801328c <tcp_rst+0xa0>)
 801321c:	481a      	ldr	r0, [pc, #104]	; (8013288 <tcp_rst+0x9c>)
 801321e:	f003 ffd3 	bl	80171c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013222:	2300      	movs	r3, #0
 8013224:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013226:	f246 0308 	movw	r3, #24584	; 0x6008
 801322a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801322c:	7dfb      	ldrb	r3, [r7, #23]
 801322e:	b29c      	uxth	r4, r3
 8013230:	68b8      	ldr	r0, [r7, #8]
 8013232:	f7f9 f9c8 	bl	800c5c6 <lwip_htonl>
 8013236:	4602      	mov	r2, r0
 8013238:	8abb      	ldrh	r3, [r7, #20]
 801323a:	9303      	str	r3, [sp, #12]
 801323c:	2314      	movs	r3, #20
 801323e:	9302      	str	r3, [sp, #8]
 8013240:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013242:	9301      	str	r3, [sp, #4]
 8013244:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013246:	9300      	str	r3, [sp, #0]
 8013248:	4613      	mov	r3, r2
 801324a:	2200      	movs	r2, #0
 801324c:	4621      	mov	r1, r4
 801324e:	6878      	ldr	r0, [r7, #4]
 8013250:	f7ff fe92 	bl	8012f78 <tcp_output_alloc_header_common>
 8013254:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013256:	693b      	ldr	r3, [r7, #16]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d00c      	beq.n	8013276 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801325c:	7dfb      	ldrb	r3, [r7, #23]
 801325e:	2200      	movs	r2, #0
 8013260:	6939      	ldr	r1, [r7, #16]
 8013262:	68f8      	ldr	r0, [r7, #12]
 8013264:	f7ff ff38 	bl	80130d8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801326a:	683a      	ldr	r2, [r7, #0]
 801326c:	6939      	ldr	r1, [r7, #16]
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f7ff ff72 	bl	8013158 <tcp_output_control_segment>
 8013274:	e000      	b.n	8013278 <tcp_rst+0x8c>
    return;
 8013276:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013278:	371c      	adds	r7, #28
 801327a:	46bd      	mov	sp, r7
 801327c:	bd90      	pop	{r4, r7, pc}
 801327e:	bf00      	nop
 8013280:	08019934 	.word	0x08019934
 8013284:	0801a0b8 	.word	0x0801a0b8
 8013288:	08019988 	.word	0x08019988
 801328c:	0801a0d4 	.word	0x0801a0d4

08013290 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013290:	b590      	push	{r4, r7, lr}
 8013292:	b087      	sub	sp, #28
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013298:	2300      	movs	r3, #0
 801329a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801329c:	2300      	movs	r3, #0
 801329e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d106      	bne.n	80132b4 <tcp_send_empty_ack+0x24>
 80132a6:	4b28      	ldr	r3, [pc, #160]	; (8013348 <tcp_send_empty_ack+0xb8>)
 80132a8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80132ac:	4927      	ldr	r1, [pc, #156]	; (801334c <tcp_send_empty_ack+0xbc>)
 80132ae:	4828      	ldr	r0, [pc, #160]	; (8013350 <tcp_send_empty_ack+0xc0>)
 80132b0:	f003 ff8a 	bl	80171c8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80132b4:	7dfb      	ldrb	r3, [r7, #23]
 80132b6:	009b      	lsls	r3, r3, #2
 80132b8:	b2db      	uxtb	r3, r3
 80132ba:	f003 0304 	and.w	r3, r3, #4
 80132be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80132c0:	7d7b      	ldrb	r3, [r7, #21]
 80132c2:	b29c      	uxth	r4, r3
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80132c8:	4618      	mov	r0, r3
 80132ca:	f7f9 f97c 	bl	800c5c6 <lwip_htonl>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2200      	movs	r2, #0
 80132d2:	4621      	mov	r1, r4
 80132d4:	6878      	ldr	r0, [r7, #4]
 80132d6:	f7ff fec1 	bl	801305c <tcp_output_alloc_header>
 80132da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80132dc:	693b      	ldr	r3, [r7, #16]
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d109      	bne.n	80132f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	8b5b      	ldrh	r3, [r3, #26]
 80132e6:	f043 0303 	orr.w	r3, r3, #3
 80132ea:	b29a      	uxth	r2, r3
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80132f0:	f06f 0301 	mvn.w	r3, #1
 80132f4:	e023      	b.n	801333e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80132f6:	7dbb      	ldrb	r3, [r7, #22]
 80132f8:	7dfa      	ldrb	r2, [r7, #23]
 80132fa:	6939      	ldr	r1, [r7, #16]
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f7ff feeb 	bl	80130d8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013302:	687a      	ldr	r2, [r7, #4]
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	3304      	adds	r3, #4
 8013308:	6939      	ldr	r1, [r7, #16]
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f7ff ff24 	bl	8013158 <tcp_output_control_segment>
 8013310:	4603      	mov	r3, r0
 8013312:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013314:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d007      	beq.n	801332c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	8b5b      	ldrh	r3, [r3, #26]
 8013320:	f043 0303 	orr.w	r3, r3, #3
 8013324:	b29a      	uxth	r2, r3
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	835a      	strh	r2, [r3, #26]
 801332a:	e006      	b.n	801333a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	8b5b      	ldrh	r3, [r3, #26]
 8013330:	f023 0303 	bic.w	r3, r3, #3
 8013334:	b29a      	uxth	r2, r3
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801333a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801333e:	4618      	mov	r0, r3
 8013340:	371c      	adds	r7, #28
 8013342:	46bd      	mov	sp, r7
 8013344:	bd90      	pop	{r4, r7, pc}
 8013346:	bf00      	nop
 8013348:	08019934 	.word	0x08019934
 801334c:	0801a0f0 	.word	0x0801a0f0
 8013350:	08019988 	.word	0x08019988

08013354 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013354:	b590      	push	{r4, r7, lr}
 8013356:	b087      	sub	sp, #28
 8013358:	af00      	add	r7, sp, #0
 801335a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801335c:	2300      	movs	r3, #0
 801335e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d106      	bne.n	8013374 <tcp_keepalive+0x20>
 8013366:	4b18      	ldr	r3, [pc, #96]	; (80133c8 <tcp_keepalive+0x74>)
 8013368:	f640 0224 	movw	r2, #2084	; 0x824
 801336c:	4917      	ldr	r1, [pc, #92]	; (80133cc <tcp_keepalive+0x78>)
 801336e:	4818      	ldr	r0, [pc, #96]	; (80133d0 <tcp_keepalive+0x7c>)
 8013370:	f003 ff2a 	bl	80171c8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013374:	7dfb      	ldrb	r3, [r7, #23]
 8013376:	b29c      	uxth	r4, r3
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801337c:	3b01      	subs	r3, #1
 801337e:	4618      	mov	r0, r3
 8013380:	f7f9 f921 	bl	800c5c6 <lwip_htonl>
 8013384:	4603      	mov	r3, r0
 8013386:	2200      	movs	r2, #0
 8013388:	4621      	mov	r1, r4
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	f7ff fe66 	bl	801305c <tcp_output_alloc_header>
 8013390:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d102      	bne.n	801339e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801339c:	e010      	b.n	80133c0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801339e:	7dfb      	ldrb	r3, [r7, #23]
 80133a0:	2200      	movs	r2, #0
 80133a2:	6939      	ldr	r1, [r7, #16]
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f7ff fe97 	bl	80130d8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	3304      	adds	r3, #4
 80133b0:	6939      	ldr	r1, [r7, #16]
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f7ff fed0 	bl	8013158 <tcp_output_control_segment>
 80133b8:	4603      	mov	r3, r0
 80133ba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80133bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133c0:	4618      	mov	r0, r3
 80133c2:	371c      	adds	r7, #28
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd90      	pop	{r4, r7, pc}
 80133c8:	08019934 	.word	0x08019934
 80133cc:	0801a110 	.word	0x0801a110
 80133d0:	08019988 	.word	0x08019988

080133d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80133d4:	b590      	push	{r4, r7, lr}
 80133d6:	b08b      	sub	sp, #44	; 0x2c
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80133dc:	2300      	movs	r3, #0
 80133de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d106      	bne.n	80133f6 <tcp_zero_window_probe+0x22>
 80133e8:	4b4c      	ldr	r3, [pc, #304]	; (801351c <tcp_zero_window_probe+0x148>)
 80133ea:	f640 024f 	movw	r2, #2127	; 0x84f
 80133ee:	494c      	ldr	r1, [pc, #304]	; (8013520 <tcp_zero_window_probe+0x14c>)
 80133f0:	484c      	ldr	r0, [pc, #304]	; (8013524 <tcp_zero_window_probe+0x150>)
 80133f2:	f003 fee9 	bl	80171c8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133fa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80133fc:	6a3b      	ldr	r3, [r7, #32]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d101      	bne.n	8013406 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013402:	2300      	movs	r3, #0
 8013404:	e086      	b.n	8013514 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801340c:	2bff      	cmp	r3, #255	; 0xff
 801340e:	d007      	beq.n	8013420 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013416:	3301      	adds	r3, #1
 8013418:	b2da      	uxtb	r2, r3
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013420:	6a3b      	ldr	r3, [r7, #32]
 8013422:	68db      	ldr	r3, [r3, #12]
 8013424:	899b      	ldrh	r3, [r3, #12]
 8013426:	b29b      	uxth	r3, r3
 8013428:	4618      	mov	r0, r3
 801342a:	f7f9 f8b7 	bl	800c59c <lwip_htons>
 801342e:	4603      	mov	r3, r0
 8013430:	b2db      	uxtb	r3, r3
 8013432:	f003 0301 	and.w	r3, r3, #1
 8013436:	2b00      	cmp	r3, #0
 8013438:	d005      	beq.n	8013446 <tcp_zero_window_probe+0x72>
 801343a:	6a3b      	ldr	r3, [r7, #32]
 801343c:	891b      	ldrh	r3, [r3, #8]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d101      	bne.n	8013446 <tcp_zero_window_probe+0x72>
 8013442:	2301      	movs	r3, #1
 8013444:	e000      	b.n	8013448 <tcp_zero_window_probe+0x74>
 8013446:	2300      	movs	r3, #0
 8013448:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801344a:	7ffb      	ldrb	r3, [r7, #31]
 801344c:	2b00      	cmp	r3, #0
 801344e:	bf0c      	ite	eq
 8013450:	2301      	moveq	r3, #1
 8013452:	2300      	movne	r3, #0
 8013454:	b2db      	uxtb	r3, r3
 8013456:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801345c:	b299      	uxth	r1, r3
 801345e:	6a3b      	ldr	r3, [r7, #32]
 8013460:	68db      	ldr	r3, [r3, #12]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	8bba      	ldrh	r2, [r7, #28]
 8013466:	6878      	ldr	r0, [r7, #4]
 8013468:	f7ff fdf8 	bl	801305c <tcp_output_alloc_header>
 801346c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801346e:	69bb      	ldr	r3, [r7, #24]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d102      	bne.n	801347a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013478:	e04c      	b.n	8013514 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801347a:	69bb      	ldr	r3, [r7, #24]
 801347c:	685b      	ldr	r3, [r3, #4]
 801347e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013480:	7ffb      	ldrb	r3, [r7, #31]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d011      	beq.n	80134aa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	899b      	ldrh	r3, [r3, #12]
 801348a:	b29b      	uxth	r3, r3
 801348c:	b21b      	sxth	r3, r3
 801348e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013492:	b21c      	sxth	r4, r3
 8013494:	2011      	movs	r0, #17
 8013496:	f7f9 f881 	bl	800c59c <lwip_htons>
 801349a:	4603      	mov	r3, r0
 801349c:	b21b      	sxth	r3, r3
 801349e:	4323      	orrs	r3, r4
 80134a0:	b21b      	sxth	r3, r3
 80134a2:	b29a      	uxth	r2, r3
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	819a      	strh	r2, [r3, #12]
 80134a8:	e010      	b.n	80134cc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80134aa:	69bb      	ldr	r3, [r7, #24]
 80134ac:	685b      	ldr	r3, [r3, #4]
 80134ae:	3314      	adds	r3, #20
 80134b0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80134b2:	6a3b      	ldr	r3, [r7, #32]
 80134b4:	6858      	ldr	r0, [r3, #4]
 80134b6:	6a3b      	ldr	r3, [r7, #32]
 80134b8:	685b      	ldr	r3, [r3, #4]
 80134ba:	891a      	ldrh	r2, [r3, #8]
 80134bc:	6a3b      	ldr	r3, [r7, #32]
 80134be:	891b      	ldrh	r3, [r3, #8]
 80134c0:	1ad3      	subs	r3, r2, r3
 80134c2:	b29b      	uxth	r3, r3
 80134c4:	2201      	movs	r2, #1
 80134c6:	6939      	ldr	r1, [r7, #16]
 80134c8:	f7fa fdc0 	bl	800e04c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80134cc:	6a3b      	ldr	r3, [r7, #32]
 80134ce:	68db      	ldr	r3, [r3, #12]
 80134d0:	685b      	ldr	r3, [r3, #4]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f7f9 f877 	bl	800c5c6 <lwip_htonl>
 80134d8:	4603      	mov	r3, r0
 80134da:	3301      	adds	r3, #1
 80134dc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	1ad3      	subs	r3, r2, r3
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	da02      	bge.n	80134f0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	68fa      	ldr	r2, [r7, #12]
 80134ee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80134f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134f4:	2200      	movs	r2, #0
 80134f6:	69b9      	ldr	r1, [r7, #24]
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f7ff fded 	bl	80130d8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	3304      	adds	r3, #4
 8013504:	69b9      	ldr	r1, [r7, #24]
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	f7ff fe26 	bl	8013158 <tcp_output_control_segment>
 801350c:	4603      	mov	r3, r0
 801350e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013510:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013514:	4618      	mov	r0, r3
 8013516:	372c      	adds	r7, #44	; 0x2c
 8013518:	46bd      	mov	sp, r7
 801351a:	bd90      	pop	{r4, r7, pc}
 801351c:	08019934 	.word	0x08019934
 8013520:	0801a12c 	.word	0x0801a12c
 8013524:	08019988 	.word	0x08019988

08013528 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013528:	b580      	push	{r7, lr}
 801352a:	b082      	sub	sp, #8
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013530:	f7fa ff0c 	bl	800e34c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013534:	4b0a      	ldr	r3, [pc, #40]	; (8013560 <tcpip_tcp_timer+0x38>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d103      	bne.n	8013544 <tcpip_tcp_timer+0x1c>
 801353c:	4b09      	ldr	r3, [pc, #36]	; (8013564 <tcpip_tcp_timer+0x3c>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d005      	beq.n	8013550 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013544:	2200      	movs	r2, #0
 8013546:	4908      	ldr	r1, [pc, #32]	; (8013568 <tcpip_tcp_timer+0x40>)
 8013548:	20fa      	movs	r0, #250	; 0xfa
 801354a:	f000 f8f3 	bl	8013734 <sys_timeout>
 801354e:	e003      	b.n	8013558 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013550:	4b06      	ldr	r3, [pc, #24]	; (801356c <tcpip_tcp_timer+0x44>)
 8013552:	2200      	movs	r2, #0
 8013554:	601a      	str	r2, [r3, #0]
  }
}
 8013556:	bf00      	nop
 8013558:	bf00      	nop
 801355a:	3708      	adds	r7, #8
 801355c:	46bd      	mov	sp, r7
 801355e:	bd80      	pop	{r7, pc}
 8013560:	20008fd4 	.word	0x20008fd4
 8013564:	20008fd8 	.word	0x20008fd8
 8013568:	08013529 	.word	0x08013529
 801356c:	20009020 	.word	0x20009020

08013570 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013574:	4b0a      	ldr	r3, [pc, #40]	; (80135a0 <tcp_timer_needed+0x30>)
 8013576:	681b      	ldr	r3, [r3, #0]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d10f      	bne.n	801359c <tcp_timer_needed+0x2c>
 801357c:	4b09      	ldr	r3, [pc, #36]	; (80135a4 <tcp_timer_needed+0x34>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d103      	bne.n	801358c <tcp_timer_needed+0x1c>
 8013584:	4b08      	ldr	r3, [pc, #32]	; (80135a8 <tcp_timer_needed+0x38>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d007      	beq.n	801359c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801358c:	4b04      	ldr	r3, [pc, #16]	; (80135a0 <tcp_timer_needed+0x30>)
 801358e:	2201      	movs	r2, #1
 8013590:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013592:	2200      	movs	r2, #0
 8013594:	4905      	ldr	r1, [pc, #20]	; (80135ac <tcp_timer_needed+0x3c>)
 8013596:	20fa      	movs	r0, #250	; 0xfa
 8013598:	f000 f8cc 	bl	8013734 <sys_timeout>
  }
}
 801359c:	bf00      	nop
 801359e:	bd80      	pop	{r7, pc}
 80135a0:	20009020 	.word	0x20009020
 80135a4:	20008fd4 	.word	0x20008fd4
 80135a8:	20008fd8 	.word	0x20008fd8
 80135ac:	08013529 	.word	0x08013529

080135b0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b086      	sub	sp, #24
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	60f8      	str	r0, [r7, #12]
 80135b8:	60b9      	str	r1, [r7, #8]
 80135ba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80135bc:	2006      	movs	r0, #6
 80135be:	f7f9 fc65 	bl	800ce8c <memp_malloc>
 80135c2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80135c4:	693b      	ldr	r3, [r7, #16]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d109      	bne.n	80135de <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d151      	bne.n	8013674 <sys_timeout_abs+0xc4>
 80135d0:	4b2a      	ldr	r3, [pc, #168]	; (801367c <sys_timeout_abs+0xcc>)
 80135d2:	22be      	movs	r2, #190	; 0xbe
 80135d4:	492a      	ldr	r1, [pc, #168]	; (8013680 <sys_timeout_abs+0xd0>)
 80135d6:	482b      	ldr	r0, [pc, #172]	; (8013684 <sys_timeout_abs+0xd4>)
 80135d8:	f003 fdf6 	bl	80171c8 <iprintf>
    return;
 80135dc:	e04a      	b.n	8013674 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80135de:	693b      	ldr	r3, [r7, #16]
 80135e0:	2200      	movs	r2, #0
 80135e2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	68ba      	ldr	r2, [r7, #8]
 80135e8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	687a      	ldr	r2, [r7, #4]
 80135ee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	68fa      	ldr	r2, [r7, #12]
 80135f4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80135f6:	4b24      	ldr	r3, [pc, #144]	; (8013688 <sys_timeout_abs+0xd8>)
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d103      	bne.n	8013606 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80135fe:	4a22      	ldr	r2, [pc, #136]	; (8013688 <sys_timeout_abs+0xd8>)
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	6013      	str	r3, [r2, #0]
    return;
 8013604:	e037      	b.n	8013676 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	685a      	ldr	r2, [r3, #4]
 801360a:	4b1f      	ldr	r3, [pc, #124]	; (8013688 <sys_timeout_abs+0xd8>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	685b      	ldr	r3, [r3, #4]
 8013610:	1ad3      	subs	r3, r2, r3
 8013612:	0fdb      	lsrs	r3, r3, #31
 8013614:	f003 0301 	and.w	r3, r3, #1
 8013618:	b2db      	uxtb	r3, r3
 801361a:	2b00      	cmp	r3, #0
 801361c:	d007      	beq.n	801362e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801361e:	4b1a      	ldr	r3, [pc, #104]	; (8013688 <sys_timeout_abs+0xd8>)
 8013620:	681a      	ldr	r2, [r3, #0]
 8013622:	693b      	ldr	r3, [r7, #16]
 8013624:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013626:	4a18      	ldr	r2, [pc, #96]	; (8013688 <sys_timeout_abs+0xd8>)
 8013628:	693b      	ldr	r3, [r7, #16]
 801362a:	6013      	str	r3, [r2, #0]
 801362c:	e023      	b.n	8013676 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801362e:	4b16      	ldr	r3, [pc, #88]	; (8013688 <sys_timeout_abs+0xd8>)
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	617b      	str	r3, [r7, #20]
 8013634:	e01a      	b.n	801366c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d00b      	beq.n	8013656 <sys_timeout_abs+0xa6>
 801363e:	693b      	ldr	r3, [r7, #16]
 8013640:	685a      	ldr	r2, [r3, #4]
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	1ad3      	subs	r3, r2, r3
 801364a:	0fdb      	lsrs	r3, r3, #31
 801364c:	f003 0301 	and.w	r3, r3, #1
 8013650:	b2db      	uxtb	r3, r3
 8013652:	2b00      	cmp	r3, #0
 8013654:	d007      	beq.n	8013666 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	681a      	ldr	r2, [r3, #0]
 801365a:	693b      	ldr	r3, [r7, #16]
 801365c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	693a      	ldr	r2, [r7, #16]
 8013662:	601a      	str	r2, [r3, #0]
        break;
 8013664:	e007      	b.n	8013676 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013666:	697b      	ldr	r3, [r7, #20]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	617b      	str	r3, [r7, #20]
 801366c:	697b      	ldr	r3, [r7, #20]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d1e1      	bne.n	8013636 <sys_timeout_abs+0x86>
 8013672:	e000      	b.n	8013676 <sys_timeout_abs+0xc6>
    return;
 8013674:	bf00      	nop
      }
    }
  }
}
 8013676:	3718      	adds	r7, #24
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}
 801367c:	0801a150 	.word	0x0801a150
 8013680:	0801a184 	.word	0x0801a184
 8013684:	0801a1c4 	.word	0x0801a1c4
 8013688:	20009018 	.word	0x20009018

0801368c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b086      	sub	sp, #24
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013698:	697b      	ldr	r3, [r7, #20]
 801369a:	685b      	ldr	r3, [r3, #4]
 801369c:	4798      	blx	r3

  now = sys_now();
 801369e:	f7f8 fd71 	bl	800c184 <sys_now>
 80136a2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	681a      	ldr	r2, [r3, #0]
 80136a8:	4b0f      	ldr	r3, [pc, #60]	; (80136e8 <lwip_cyclic_timer+0x5c>)
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	4413      	add	r3, r2
 80136ae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80136b0:	68fa      	ldr	r2, [r7, #12]
 80136b2:	693b      	ldr	r3, [r7, #16]
 80136b4:	1ad3      	subs	r3, r2, r3
 80136b6:	0fdb      	lsrs	r3, r3, #31
 80136b8:	f003 0301 	and.w	r3, r3, #1
 80136bc:	b2db      	uxtb	r3, r3
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d009      	beq.n	80136d6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	681a      	ldr	r2, [r3, #0]
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	4413      	add	r3, r2
 80136ca:	687a      	ldr	r2, [r7, #4]
 80136cc:	4907      	ldr	r1, [pc, #28]	; (80136ec <lwip_cyclic_timer+0x60>)
 80136ce:	4618      	mov	r0, r3
 80136d0:	f7ff ff6e 	bl	80135b0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80136d4:	e004      	b.n	80136e0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80136d6:	687a      	ldr	r2, [r7, #4]
 80136d8:	4904      	ldr	r1, [pc, #16]	; (80136ec <lwip_cyclic_timer+0x60>)
 80136da:	68f8      	ldr	r0, [r7, #12]
 80136dc:	f7ff ff68 	bl	80135b0 <sys_timeout_abs>
}
 80136e0:	bf00      	nop
 80136e2:	3718      	adds	r7, #24
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bd80      	pop	{r7, pc}
 80136e8:	2000901c 	.word	0x2000901c
 80136ec:	0801368d 	.word	0x0801368d

080136f0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80136f0:	b580      	push	{r7, lr}
 80136f2:	b082      	sub	sp, #8
 80136f4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80136f6:	2301      	movs	r3, #1
 80136f8:	607b      	str	r3, [r7, #4]
 80136fa:	e00e      	b.n	801371a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80136fc:	4a0b      	ldr	r2, [pc, #44]	; (801372c <sys_timeouts_init+0x3c>)
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	00db      	lsls	r3, r3, #3
 8013708:	4a08      	ldr	r2, [pc, #32]	; (801372c <sys_timeouts_init+0x3c>)
 801370a:	4413      	add	r3, r2
 801370c:	461a      	mov	r2, r3
 801370e:	4908      	ldr	r1, [pc, #32]	; (8013730 <sys_timeouts_init+0x40>)
 8013710:	f000 f810 	bl	8013734 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	3301      	adds	r3, #1
 8013718:	607b      	str	r3, [r7, #4]
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	2b02      	cmp	r3, #2
 801371e:	d9ed      	bls.n	80136fc <sys_timeouts_init+0xc>
  }
}
 8013720:	bf00      	nop
 8013722:	bf00      	nop
 8013724:	3708      	adds	r7, #8
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}
 801372a:	bf00      	nop
 801372c:	0801ad44 	.word	0x0801ad44
 8013730:	0801368d 	.word	0x0801368d

08013734 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013734:	b580      	push	{r7, lr}
 8013736:	b086      	sub	sp, #24
 8013738:	af00      	add	r7, sp, #0
 801373a:	60f8      	str	r0, [r7, #12]
 801373c:	60b9      	str	r1, [r7, #8]
 801373e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013746:	d306      	bcc.n	8013756 <sys_timeout+0x22>
 8013748:	4b0a      	ldr	r3, [pc, #40]	; (8013774 <sys_timeout+0x40>)
 801374a:	f240 1229 	movw	r2, #297	; 0x129
 801374e:	490a      	ldr	r1, [pc, #40]	; (8013778 <sys_timeout+0x44>)
 8013750:	480a      	ldr	r0, [pc, #40]	; (801377c <sys_timeout+0x48>)
 8013752:	f003 fd39 	bl	80171c8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013756:	f7f8 fd15 	bl	800c184 <sys_now>
 801375a:	4602      	mov	r2, r0
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	4413      	add	r3, r2
 8013760:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	68b9      	ldr	r1, [r7, #8]
 8013766:	6978      	ldr	r0, [r7, #20]
 8013768:	f7ff ff22 	bl	80135b0 <sys_timeout_abs>
#endif
}
 801376c:	bf00      	nop
 801376e:	3718      	adds	r7, #24
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}
 8013774:	0801a150 	.word	0x0801a150
 8013778:	0801a1ec 	.word	0x0801a1ec
 801377c:	0801a1c4 	.word	0x0801a1c4

08013780 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013786:	f7f8 fcfd 	bl	800c184 <sys_now>
 801378a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 801378c:	4b1a      	ldr	r3, [pc, #104]	; (80137f8 <sys_check_timeouts+0x78>)
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	b2db      	uxtb	r3, r3
 8013792:	2b00      	cmp	r3, #0
 8013794:	d001      	beq.n	801379a <sys_check_timeouts+0x1a>
 8013796:	f7f9 ff25 	bl	800d5e4 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 801379a:	4b18      	ldr	r3, [pc, #96]	; (80137fc <sys_check_timeouts+0x7c>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80137a0:	68bb      	ldr	r3, [r7, #8]
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d022      	beq.n	80137ec <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	685b      	ldr	r3, [r3, #4]
 80137aa:	68fa      	ldr	r2, [r7, #12]
 80137ac:	1ad3      	subs	r3, r2, r3
 80137ae:	0fdb      	lsrs	r3, r3, #31
 80137b0:	f003 0301 	and.w	r3, r3, #1
 80137b4:	b2db      	uxtb	r3, r3
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d11a      	bne.n	80137f0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	4a0f      	ldr	r2, [pc, #60]	; (80137fc <sys_check_timeouts+0x7c>)
 80137c0:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	689b      	ldr	r3, [r3, #8]
 80137c6:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80137c8:	68bb      	ldr	r3, [r7, #8]
 80137ca:	68db      	ldr	r3, [r3, #12]
 80137cc:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	685b      	ldr	r3, [r3, #4]
 80137d2:	4a0b      	ldr	r2, [pc, #44]	; (8013800 <sys_check_timeouts+0x80>)
 80137d4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80137d6:	68b9      	ldr	r1, [r7, #8]
 80137d8:	2006      	movs	r0, #6
 80137da:	f7f9 fbc7 	bl	800cf6c <memp_free>
    if (handler != NULL) {
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d0d3      	beq.n	801378c <sys_check_timeouts+0xc>
      handler(arg);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	6838      	ldr	r0, [r7, #0]
 80137e8:	4798      	blx	r3
  do {
 80137ea:	e7cf      	b.n	801378c <sys_check_timeouts+0xc>
      return;
 80137ec:	bf00      	nop
 80137ee:	e000      	b.n	80137f2 <sys_check_timeouts+0x72>
      return;
 80137f0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80137f2:	3710      	adds	r7, #16
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}
 80137f8:	20008fc5 	.word	0x20008fc5
 80137fc:	20009018 	.word	0x20009018
 8013800:	2000901c 	.word	0x2000901c

08013804 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013808:	f003 fcf6 	bl	80171f8 <rand>
 801380c:	4603      	mov	r3, r0
 801380e:	b29b      	uxth	r3, r3
 8013810:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013814:	b29b      	uxth	r3, r3
 8013816:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801381a:	b29a      	uxth	r2, r3
 801381c:	4b01      	ldr	r3, [pc, #4]	; (8013824 <udp_init+0x20>)
 801381e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013820:	bf00      	nop
 8013822:	bd80      	pop	{r7, pc}
 8013824:	20000028 	.word	0x20000028

08013828 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013828:	b480      	push	{r7}
 801382a:	b083      	sub	sp, #12
 801382c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801382e:	2300      	movs	r3, #0
 8013830:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013832:	4b17      	ldr	r3, [pc, #92]	; (8013890 <udp_new_port+0x68>)
 8013834:	881b      	ldrh	r3, [r3, #0]
 8013836:	1c5a      	adds	r2, r3, #1
 8013838:	b291      	uxth	r1, r2
 801383a:	4a15      	ldr	r2, [pc, #84]	; (8013890 <udp_new_port+0x68>)
 801383c:	8011      	strh	r1, [r2, #0]
 801383e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013842:	4293      	cmp	r3, r2
 8013844:	d103      	bne.n	801384e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013846:	4b12      	ldr	r3, [pc, #72]	; (8013890 <udp_new_port+0x68>)
 8013848:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801384c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801384e:	4b11      	ldr	r3, [pc, #68]	; (8013894 <udp_new_port+0x6c>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	603b      	str	r3, [r7, #0]
 8013854:	e011      	b.n	801387a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	8a5a      	ldrh	r2, [r3, #18]
 801385a:	4b0d      	ldr	r3, [pc, #52]	; (8013890 <udp_new_port+0x68>)
 801385c:	881b      	ldrh	r3, [r3, #0]
 801385e:	429a      	cmp	r2, r3
 8013860:	d108      	bne.n	8013874 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013862:	88fb      	ldrh	r3, [r7, #6]
 8013864:	3301      	adds	r3, #1
 8013866:	80fb      	strh	r3, [r7, #6]
 8013868:	88fb      	ldrh	r3, [r7, #6]
 801386a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801386e:	d3e0      	bcc.n	8013832 <udp_new_port+0xa>
        return 0;
 8013870:	2300      	movs	r3, #0
 8013872:	e007      	b.n	8013884 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	68db      	ldr	r3, [r3, #12]
 8013878:	603b      	str	r3, [r7, #0]
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d1ea      	bne.n	8013856 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013880:	4b03      	ldr	r3, [pc, #12]	; (8013890 <udp_new_port+0x68>)
 8013882:	881b      	ldrh	r3, [r3, #0]
}
 8013884:	4618      	mov	r0, r3
 8013886:	370c      	adds	r7, #12
 8013888:	46bd      	mov	sp, r7
 801388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801388e:	4770      	bx	lr
 8013890:	20000028 	.word	0x20000028
 8013894:	20009024 	.word	0x20009024

08013898 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b084      	sub	sp, #16
 801389c:	af00      	add	r7, sp, #0
 801389e:	60f8      	str	r0, [r7, #12]
 80138a0:	60b9      	str	r1, [r7, #8]
 80138a2:	4613      	mov	r3, r2
 80138a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	d105      	bne.n	80138b8 <udp_input_local_match+0x20>
 80138ac:	4b27      	ldr	r3, [pc, #156]	; (801394c <udp_input_local_match+0xb4>)
 80138ae:	2287      	movs	r2, #135	; 0x87
 80138b0:	4927      	ldr	r1, [pc, #156]	; (8013950 <udp_input_local_match+0xb8>)
 80138b2:	4828      	ldr	r0, [pc, #160]	; (8013954 <udp_input_local_match+0xbc>)
 80138b4:	f003 fc88 	bl	80171c8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d105      	bne.n	80138ca <udp_input_local_match+0x32>
 80138be:	4b23      	ldr	r3, [pc, #140]	; (801394c <udp_input_local_match+0xb4>)
 80138c0:	2288      	movs	r2, #136	; 0x88
 80138c2:	4925      	ldr	r1, [pc, #148]	; (8013958 <udp_input_local_match+0xc0>)
 80138c4:	4823      	ldr	r0, [pc, #140]	; (8013954 <udp_input_local_match+0xbc>)
 80138c6:	f003 fc7f 	bl	80171c8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	7a1b      	ldrb	r3, [r3, #8]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d00b      	beq.n	80138ea <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	7a1a      	ldrb	r2, [r3, #8]
 80138d6:	4b21      	ldr	r3, [pc, #132]	; (801395c <udp_input_local_match+0xc4>)
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80138de:	3301      	adds	r3, #1
 80138e0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80138e2:	429a      	cmp	r2, r3
 80138e4:	d001      	beq.n	80138ea <udp_input_local_match+0x52>
    return 0;
 80138e6:	2300      	movs	r3, #0
 80138e8:	e02b      	b.n	8013942 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80138ea:	79fb      	ldrb	r3, [r7, #7]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d018      	beq.n	8013922 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d013      	beq.n	801391e <udp_input_local_match+0x86>
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d00f      	beq.n	801391e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80138fe:	4b17      	ldr	r3, [pc, #92]	; (801395c <udp_input_local_match+0xc4>)
 8013900:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013906:	d00a      	beq.n	801391e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	681a      	ldr	r2, [r3, #0]
 801390c:	4b13      	ldr	r3, [pc, #76]	; (801395c <udp_input_local_match+0xc4>)
 801390e:	695b      	ldr	r3, [r3, #20]
 8013910:	405a      	eors	r2, r3
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	3308      	adds	r3, #8
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801391a:	2b00      	cmp	r3, #0
 801391c:	d110      	bne.n	8013940 <udp_input_local_match+0xa8>
          return 1;
 801391e:	2301      	movs	r3, #1
 8013920:	e00f      	b.n	8013942 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d009      	beq.n	801393c <udp_input_local_match+0xa4>
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	681b      	ldr	r3, [r3, #0]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d005      	beq.n	801393c <udp_input_local_match+0xa4>
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	4b09      	ldr	r3, [pc, #36]	; (801395c <udp_input_local_match+0xc4>)
 8013936:	695b      	ldr	r3, [r3, #20]
 8013938:	429a      	cmp	r2, r3
 801393a:	d101      	bne.n	8013940 <udp_input_local_match+0xa8>
        return 1;
 801393c:	2301      	movs	r3, #1
 801393e:	e000      	b.n	8013942 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013940:	2300      	movs	r3, #0
}
 8013942:	4618      	mov	r0, r3
 8013944:	3710      	adds	r7, #16
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}
 801394a:	bf00      	nop
 801394c:	0801a238 	.word	0x0801a238
 8013950:	0801a268 	.word	0x0801a268
 8013954:	0801a28c 	.word	0x0801a28c
 8013958:	0801a2b4 	.word	0x0801a2b4
 801395c:	20005a58 	.word	0x20005a58

08013960 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013960:	b590      	push	{r4, r7, lr}
 8013962:	b08d      	sub	sp, #52	; 0x34
 8013964:	af02      	add	r7, sp, #8
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801396a:	2300      	movs	r3, #0
 801396c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d105      	bne.n	8013980 <udp_input+0x20>
 8013974:	4b7c      	ldr	r3, [pc, #496]	; (8013b68 <udp_input+0x208>)
 8013976:	22cf      	movs	r2, #207	; 0xcf
 8013978:	497c      	ldr	r1, [pc, #496]	; (8013b6c <udp_input+0x20c>)
 801397a:	487d      	ldr	r0, [pc, #500]	; (8013b70 <udp_input+0x210>)
 801397c:	f003 fc24 	bl	80171c8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d105      	bne.n	8013992 <udp_input+0x32>
 8013986:	4b78      	ldr	r3, [pc, #480]	; (8013b68 <udp_input+0x208>)
 8013988:	22d0      	movs	r2, #208	; 0xd0
 801398a:	497a      	ldr	r1, [pc, #488]	; (8013b74 <udp_input+0x214>)
 801398c:	4878      	ldr	r0, [pc, #480]	; (8013b70 <udp_input+0x210>)
 801398e:	f003 fc1b 	bl	80171c8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	895b      	ldrh	r3, [r3, #10]
 8013996:	2b07      	cmp	r3, #7
 8013998:	d803      	bhi.n	80139a2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801399a:	6878      	ldr	r0, [r7, #4]
 801399c:	f7fa f95c 	bl	800dc58 <pbuf_free>
    goto end;
 80139a0:	e0de      	b.n	8013b60 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	685b      	ldr	r3, [r3, #4]
 80139a6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80139a8:	4b73      	ldr	r3, [pc, #460]	; (8013b78 <udp_input+0x218>)
 80139aa:	695b      	ldr	r3, [r3, #20]
 80139ac:	4a72      	ldr	r2, [pc, #456]	; (8013b78 <udp_input+0x218>)
 80139ae:	6812      	ldr	r2, [r2, #0]
 80139b0:	4611      	mov	r1, r2
 80139b2:	4618      	mov	r0, r3
 80139b4:	f001 ffe2 	bl	801597c <ip4_addr_isbroadcast_u32>
 80139b8:	4603      	mov	r3, r0
 80139ba:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80139bc:	697b      	ldr	r3, [r7, #20]
 80139be:	881b      	ldrh	r3, [r3, #0]
 80139c0:	b29b      	uxth	r3, r3
 80139c2:	4618      	mov	r0, r3
 80139c4:	f7f8 fdea 	bl	800c59c <lwip_htons>
 80139c8:	4603      	mov	r3, r0
 80139ca:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	885b      	ldrh	r3, [r3, #2]
 80139d0:	b29b      	uxth	r3, r3
 80139d2:	4618      	mov	r0, r3
 80139d4:	f7f8 fde2 	bl	800c59c <lwip_htons>
 80139d8:	4603      	mov	r3, r0
 80139da:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80139dc:	2300      	movs	r3, #0
 80139de:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80139e0:	2300      	movs	r3, #0
 80139e2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80139e4:	2300      	movs	r3, #0
 80139e6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80139e8:	4b64      	ldr	r3, [pc, #400]	; (8013b7c <udp_input+0x21c>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	627b      	str	r3, [r7, #36]	; 0x24
 80139ee:	e054      	b.n	8013a9a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80139f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f2:	8a5b      	ldrh	r3, [r3, #18]
 80139f4:	89fa      	ldrh	r2, [r7, #14]
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d14a      	bne.n	8013a90 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80139fa:	7cfb      	ldrb	r3, [r7, #19]
 80139fc:	461a      	mov	r2, r3
 80139fe:	6839      	ldr	r1, [r7, #0]
 8013a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a02:	f7ff ff49 	bl	8013898 <udp_input_local_match>
 8013a06:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d041      	beq.n	8013a90 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0e:	7c1b      	ldrb	r3, [r3, #16]
 8013a10:	f003 0304 	and.w	r3, r3, #4
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d11d      	bne.n	8013a54 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013a18:	69fb      	ldr	r3, [r7, #28]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d102      	bne.n	8013a24 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a20:	61fb      	str	r3, [r7, #28]
 8013a22:	e017      	b.n	8013a54 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013a24:	7cfb      	ldrb	r3, [r7, #19]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d014      	beq.n	8013a54 <udp_input+0xf4>
 8013a2a:	4b53      	ldr	r3, [pc, #332]	; (8013b78 <udp_input+0x218>)
 8013a2c:	695b      	ldr	r3, [r3, #20]
 8013a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a32:	d10f      	bne.n	8013a54 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013a34:	69fb      	ldr	r3, [r7, #28]
 8013a36:	681a      	ldr	r2, [r3, #0]
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	3304      	adds	r3, #4
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	d008      	beq.n	8013a54 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a44:	681a      	ldr	r2, [r3, #0]
 8013a46:	683b      	ldr	r3, [r7, #0]
 8013a48:	3304      	adds	r3, #4
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	429a      	cmp	r2, r3
 8013a4e:	d101      	bne.n	8013a54 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a52:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a56:	8a9b      	ldrh	r3, [r3, #20]
 8013a58:	8a3a      	ldrh	r2, [r7, #16]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d118      	bne.n	8013a90 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a60:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d005      	beq.n	8013a72 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a68:	685a      	ldr	r2, [r3, #4]
 8013a6a:	4b43      	ldr	r3, [pc, #268]	; (8013b78 <udp_input+0x218>)
 8013a6c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013a6e:	429a      	cmp	r2, r3
 8013a70:	d10e      	bne.n	8013a90 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013a72:	6a3b      	ldr	r3, [r7, #32]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d014      	beq.n	8013aa2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a7a:	68da      	ldr	r2, [r3, #12]
 8013a7c:	6a3b      	ldr	r3, [r7, #32]
 8013a7e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013a80:	4b3e      	ldr	r3, [pc, #248]	; (8013b7c <udp_input+0x21c>)
 8013a82:	681a      	ldr	r2, [r3, #0]
 8013a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a86:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013a88:	4a3c      	ldr	r2, [pc, #240]	; (8013b7c <udp_input+0x21c>)
 8013a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013a8e:	e008      	b.n	8013aa2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a92:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a96:	68db      	ldr	r3, [r3, #12]
 8013a98:	627b      	str	r3, [r7, #36]	; 0x24
 8013a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9c:	2b00      	cmp	r3, #0
 8013a9e:	d1a7      	bne.n	80139f0 <udp_input+0x90>
 8013aa0:	e000      	b.n	8013aa4 <udp_input+0x144>
        break;
 8013aa2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d101      	bne.n	8013aae <udp_input+0x14e>
    pcb = uncon_pcb;
 8013aaa:	69fb      	ldr	r3, [r7, #28]
 8013aac:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d002      	beq.n	8013aba <udp_input+0x15a>
    for_us = 1;
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	76fb      	strb	r3, [r7, #27]
 8013ab8:	e00a      	b.n	8013ad0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013aba:	683b      	ldr	r3, [r7, #0]
 8013abc:	3304      	adds	r3, #4
 8013abe:	681a      	ldr	r2, [r3, #0]
 8013ac0:	4b2d      	ldr	r3, [pc, #180]	; (8013b78 <udp_input+0x218>)
 8013ac2:	695b      	ldr	r3, [r3, #20]
 8013ac4:	429a      	cmp	r2, r3
 8013ac6:	bf0c      	ite	eq
 8013ac8:	2301      	moveq	r3, #1
 8013aca:	2300      	movne	r3, #0
 8013acc:	b2db      	uxtb	r3, r3
 8013ace:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013ad0:	7efb      	ldrb	r3, [r7, #27]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d041      	beq.n	8013b5a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013ad6:	2108      	movs	r1, #8
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f7fa f837 	bl	800db4c <pbuf_remove_header>
 8013ade:	4603      	mov	r3, r0
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d00a      	beq.n	8013afa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013ae4:	4b20      	ldr	r3, [pc, #128]	; (8013b68 <udp_input+0x208>)
 8013ae6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013aea:	4925      	ldr	r1, [pc, #148]	; (8013b80 <udp_input+0x220>)
 8013aec:	4820      	ldr	r0, [pc, #128]	; (8013b70 <udp_input+0x210>)
 8013aee:	f003 fb6b 	bl	80171c8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f7fa f8b0 	bl	800dc58 <pbuf_free>
      goto end;
 8013af8:	e032      	b.n	8013b60 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d012      	beq.n	8013b26 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b02:	699b      	ldr	r3, [r3, #24]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d00a      	beq.n	8013b1e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0a:	699c      	ldr	r4, [r3, #24]
 8013b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b0e:	69d8      	ldr	r0, [r3, #28]
 8013b10:	8a3b      	ldrh	r3, [r7, #16]
 8013b12:	9300      	str	r3, [sp, #0]
 8013b14:	4b1b      	ldr	r3, [pc, #108]	; (8013b84 <udp_input+0x224>)
 8013b16:	687a      	ldr	r2, [r7, #4]
 8013b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b1a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013b1c:	e021      	b.n	8013b62 <udp_input+0x202>
        pbuf_free(p);
 8013b1e:	6878      	ldr	r0, [r7, #4]
 8013b20:	f7fa f89a 	bl	800dc58 <pbuf_free>
        goto end;
 8013b24:	e01c      	b.n	8013b60 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013b26:	7cfb      	ldrb	r3, [r7, #19]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d112      	bne.n	8013b52 <udp_input+0x1f2>
 8013b2c:	4b12      	ldr	r3, [pc, #72]	; (8013b78 <udp_input+0x218>)
 8013b2e:	695b      	ldr	r3, [r3, #20]
 8013b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b34:	2be0      	cmp	r3, #224	; 0xe0
 8013b36:	d00c      	beq.n	8013b52 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013b38:	4b0f      	ldr	r3, [pc, #60]	; (8013b78 <udp_input+0x218>)
 8013b3a:	899b      	ldrh	r3, [r3, #12]
 8013b3c:	3308      	adds	r3, #8
 8013b3e:	b29b      	uxth	r3, r3
 8013b40:	b21b      	sxth	r3, r3
 8013b42:	4619      	mov	r1, r3
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f7fa f874 	bl	800dc32 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013b4a:	2103      	movs	r1, #3
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f001 fbf5 	bl	801533c <icmp_dest_unreach>
      pbuf_free(p);
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f7fa f880 	bl	800dc58 <pbuf_free>
  return;
 8013b58:	e003      	b.n	8013b62 <udp_input+0x202>
    pbuf_free(p);
 8013b5a:	6878      	ldr	r0, [r7, #4]
 8013b5c:	f7fa f87c 	bl	800dc58 <pbuf_free>
  return;
 8013b60:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013b62:	372c      	adds	r7, #44	; 0x2c
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd90      	pop	{r4, r7, pc}
 8013b68:	0801a238 	.word	0x0801a238
 8013b6c:	0801a2dc 	.word	0x0801a2dc
 8013b70:	0801a28c 	.word	0x0801a28c
 8013b74:	0801a2f4 	.word	0x0801a2f4
 8013b78:	20005a58 	.word	0x20005a58
 8013b7c:	20009024 	.word	0x20009024
 8013b80:	0801a310 	.word	0x0801a310
 8013b84:	20005a68 	.word	0x20005a68

08013b88 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d109      	bne.n	8013bac <udp_send+0x24>
 8013b98:	4b11      	ldr	r3, [pc, #68]	; (8013be0 <udp_send+0x58>)
 8013b9a:	f240 12d5 	movw	r2, #469	; 0x1d5
 8013b9e:	4911      	ldr	r1, [pc, #68]	; (8013be4 <udp_send+0x5c>)
 8013ba0:	4811      	ldr	r0, [pc, #68]	; (8013be8 <udp_send+0x60>)
 8013ba2:	f003 fb11 	bl	80171c8 <iprintf>
 8013ba6:	f06f 030f 	mvn.w	r3, #15
 8013baa:	e015      	b.n	8013bd8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d109      	bne.n	8013bc6 <udp_send+0x3e>
 8013bb2:	4b0b      	ldr	r3, [pc, #44]	; (8013be0 <udp_send+0x58>)
 8013bb4:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8013bb8:	490c      	ldr	r1, [pc, #48]	; (8013bec <udp_send+0x64>)
 8013bba:	480b      	ldr	r0, [pc, #44]	; (8013be8 <udp_send+0x60>)
 8013bbc:	f003 fb04 	bl	80171c8 <iprintf>
 8013bc0:	f06f 030f 	mvn.w	r3, #15
 8013bc4:	e008      	b.n	8013bd8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	1d1a      	adds	r2, r3, #4
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	8a9b      	ldrh	r3, [r3, #20]
 8013bce:	6839      	ldr	r1, [r7, #0]
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f000 f80d 	bl	8013bf0 <udp_sendto>
 8013bd6:	4603      	mov	r3, r0
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3708      	adds	r7, #8
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	0801a238 	.word	0x0801a238
 8013be4:	0801a32c 	.word	0x0801a32c
 8013be8:	0801a28c 	.word	0x0801a28c
 8013bec:	0801a344 	.word	0x0801a344

08013bf0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b088      	sub	sp, #32
 8013bf4:	af02      	add	r7, sp, #8
 8013bf6:	60f8      	str	r0, [r7, #12]
 8013bf8:	60b9      	str	r1, [r7, #8]
 8013bfa:	607a      	str	r2, [r7, #4]
 8013bfc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d109      	bne.n	8013c18 <udp_sendto+0x28>
 8013c04:	4b23      	ldr	r3, [pc, #140]	; (8013c94 <udp_sendto+0xa4>)
 8013c06:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013c0a:	4923      	ldr	r1, [pc, #140]	; (8013c98 <udp_sendto+0xa8>)
 8013c0c:	4823      	ldr	r0, [pc, #140]	; (8013c9c <udp_sendto+0xac>)
 8013c0e:	f003 fadb 	bl	80171c8 <iprintf>
 8013c12:	f06f 030f 	mvn.w	r3, #15
 8013c16:	e038      	b.n	8013c8a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d109      	bne.n	8013c32 <udp_sendto+0x42>
 8013c1e:	4b1d      	ldr	r3, [pc, #116]	; (8013c94 <udp_sendto+0xa4>)
 8013c20:	f240 2219 	movw	r2, #537	; 0x219
 8013c24:	491e      	ldr	r1, [pc, #120]	; (8013ca0 <udp_sendto+0xb0>)
 8013c26:	481d      	ldr	r0, [pc, #116]	; (8013c9c <udp_sendto+0xac>)
 8013c28:	f003 face 	bl	80171c8 <iprintf>
 8013c2c:	f06f 030f 	mvn.w	r3, #15
 8013c30:	e02b      	b.n	8013c8a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d109      	bne.n	8013c4c <udp_sendto+0x5c>
 8013c38:	4b16      	ldr	r3, [pc, #88]	; (8013c94 <udp_sendto+0xa4>)
 8013c3a:	f240 221a 	movw	r2, #538	; 0x21a
 8013c3e:	4919      	ldr	r1, [pc, #100]	; (8013ca4 <udp_sendto+0xb4>)
 8013c40:	4816      	ldr	r0, [pc, #88]	; (8013c9c <udp_sendto+0xac>)
 8013c42:	f003 fac1 	bl	80171c8 <iprintf>
 8013c46:	f06f 030f 	mvn.w	r3, #15
 8013c4a:	e01e      	b.n	8013c8a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	7a1b      	ldrb	r3, [r3, #8]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d006      	beq.n	8013c62 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	7a1b      	ldrb	r3, [r3, #8]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f7f9 fc9d 	bl	800d598 <netif_get_by_index>
 8013c5e:	6178      	str	r0, [r7, #20]
 8013c60:	e003      	b.n	8013c6a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013c62:	6878      	ldr	r0, [r7, #4]
 8013c64:	f001 fbf4 	bl	8015450 <ip4_route>
 8013c68:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013c6a:	697b      	ldr	r3, [r7, #20]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d102      	bne.n	8013c76 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013c70:	f06f 0303 	mvn.w	r3, #3
 8013c74:	e009      	b.n	8013c8a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8013c76:	887a      	ldrh	r2, [r7, #2]
 8013c78:	697b      	ldr	r3, [r7, #20]
 8013c7a:	9300      	str	r3, [sp, #0]
 8013c7c:	4613      	mov	r3, r2
 8013c7e:	687a      	ldr	r2, [r7, #4]
 8013c80:	68b9      	ldr	r1, [r7, #8]
 8013c82:	68f8      	ldr	r0, [r7, #12]
 8013c84:	f000 f810 	bl	8013ca8 <udp_sendto_if>
 8013c88:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013c8a:	4618      	mov	r0, r3
 8013c8c:	3718      	adds	r7, #24
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	bd80      	pop	{r7, pc}
 8013c92:	bf00      	nop
 8013c94:	0801a238 	.word	0x0801a238
 8013c98:	0801a35c 	.word	0x0801a35c
 8013c9c:	0801a28c 	.word	0x0801a28c
 8013ca0:	0801a374 	.word	0x0801a374
 8013ca4:	0801a390 	.word	0x0801a390

08013ca8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013ca8:	b580      	push	{r7, lr}
 8013caa:	b088      	sub	sp, #32
 8013cac:	af02      	add	r7, sp, #8
 8013cae:	60f8      	str	r0, [r7, #12]
 8013cb0:	60b9      	str	r1, [r7, #8]
 8013cb2:	607a      	str	r2, [r7, #4]
 8013cb4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d109      	bne.n	8013cd0 <udp_sendto_if+0x28>
 8013cbc:	4b2e      	ldr	r3, [pc, #184]	; (8013d78 <udp_sendto_if+0xd0>)
 8013cbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013cc2:	492e      	ldr	r1, [pc, #184]	; (8013d7c <udp_sendto_if+0xd4>)
 8013cc4:	482e      	ldr	r0, [pc, #184]	; (8013d80 <udp_sendto_if+0xd8>)
 8013cc6:	f003 fa7f 	bl	80171c8 <iprintf>
 8013cca:	f06f 030f 	mvn.w	r3, #15
 8013cce:	e04f      	b.n	8013d70 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d109      	bne.n	8013cea <udp_sendto_if+0x42>
 8013cd6:	4b28      	ldr	r3, [pc, #160]	; (8013d78 <udp_sendto_if+0xd0>)
 8013cd8:	f240 2281 	movw	r2, #641	; 0x281
 8013cdc:	4929      	ldr	r1, [pc, #164]	; (8013d84 <udp_sendto_if+0xdc>)
 8013cde:	4828      	ldr	r0, [pc, #160]	; (8013d80 <udp_sendto_if+0xd8>)
 8013ce0:	f003 fa72 	bl	80171c8 <iprintf>
 8013ce4:	f06f 030f 	mvn.w	r3, #15
 8013ce8:	e042      	b.n	8013d70 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d109      	bne.n	8013d04 <udp_sendto_if+0x5c>
 8013cf0:	4b21      	ldr	r3, [pc, #132]	; (8013d78 <udp_sendto_if+0xd0>)
 8013cf2:	f240 2282 	movw	r2, #642	; 0x282
 8013cf6:	4924      	ldr	r1, [pc, #144]	; (8013d88 <udp_sendto_if+0xe0>)
 8013cf8:	4821      	ldr	r0, [pc, #132]	; (8013d80 <udp_sendto_if+0xd8>)
 8013cfa:	f003 fa65 	bl	80171c8 <iprintf>
 8013cfe:	f06f 030f 	mvn.w	r3, #15
 8013d02:	e035      	b.n	8013d70 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013d04:	6a3b      	ldr	r3, [r7, #32]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d109      	bne.n	8013d1e <udp_sendto_if+0x76>
 8013d0a:	4b1b      	ldr	r3, [pc, #108]	; (8013d78 <udp_sendto_if+0xd0>)
 8013d0c:	f240 2283 	movw	r2, #643	; 0x283
 8013d10:	491e      	ldr	r1, [pc, #120]	; (8013d8c <udp_sendto_if+0xe4>)
 8013d12:	481b      	ldr	r0, [pc, #108]	; (8013d80 <udp_sendto_if+0xd8>)
 8013d14:	f003 fa58 	bl	80171c8 <iprintf>
 8013d18:	f06f 030f 	mvn.w	r3, #15
 8013d1c:	e028      	b.n	8013d70 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d009      	beq.n	8013d38 <udp_sendto_if+0x90>
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d005      	beq.n	8013d38 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d34:	2be0      	cmp	r3, #224	; 0xe0
 8013d36:	d103      	bne.n	8013d40 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013d38:	6a3b      	ldr	r3, [r7, #32]
 8013d3a:	3304      	adds	r3, #4
 8013d3c:	617b      	str	r3, [r7, #20]
 8013d3e:	e00b      	b.n	8013d58 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	681a      	ldr	r2, [r3, #0]
 8013d44:	6a3b      	ldr	r3, [r7, #32]
 8013d46:	3304      	adds	r3, #4
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d002      	beq.n	8013d54 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013d4e:	f06f 0303 	mvn.w	r3, #3
 8013d52:	e00d      	b.n	8013d70 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013d58:	887a      	ldrh	r2, [r7, #2]
 8013d5a:	697b      	ldr	r3, [r7, #20]
 8013d5c:	9301      	str	r3, [sp, #4]
 8013d5e:	6a3b      	ldr	r3, [r7, #32]
 8013d60:	9300      	str	r3, [sp, #0]
 8013d62:	4613      	mov	r3, r2
 8013d64:	687a      	ldr	r2, [r7, #4]
 8013d66:	68b9      	ldr	r1, [r7, #8]
 8013d68:	68f8      	ldr	r0, [r7, #12]
 8013d6a:	f000 f811 	bl	8013d90 <udp_sendto_if_src>
 8013d6e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013d70:	4618      	mov	r0, r3
 8013d72:	3718      	adds	r7, #24
 8013d74:	46bd      	mov	sp, r7
 8013d76:	bd80      	pop	{r7, pc}
 8013d78:	0801a238 	.word	0x0801a238
 8013d7c:	0801a3ac 	.word	0x0801a3ac
 8013d80:	0801a28c 	.word	0x0801a28c
 8013d84:	0801a3c8 	.word	0x0801a3c8
 8013d88:	0801a3e4 	.word	0x0801a3e4
 8013d8c:	0801a404 	.word	0x0801a404

08013d90 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b08c      	sub	sp, #48	; 0x30
 8013d94:	af04      	add	r7, sp, #16
 8013d96:	60f8      	str	r0, [r7, #12]
 8013d98:	60b9      	str	r1, [r7, #8]
 8013d9a:	607a      	str	r2, [r7, #4]
 8013d9c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d109      	bne.n	8013db8 <udp_sendto_if_src+0x28>
 8013da4:	4b65      	ldr	r3, [pc, #404]	; (8013f3c <udp_sendto_if_src+0x1ac>)
 8013da6:	f240 22d1 	movw	r2, #721	; 0x2d1
 8013daa:	4965      	ldr	r1, [pc, #404]	; (8013f40 <udp_sendto_if_src+0x1b0>)
 8013dac:	4865      	ldr	r0, [pc, #404]	; (8013f44 <udp_sendto_if_src+0x1b4>)
 8013dae:	f003 fa0b 	bl	80171c8 <iprintf>
 8013db2:	f06f 030f 	mvn.w	r3, #15
 8013db6:	e0bc      	b.n	8013f32 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013db8:	68bb      	ldr	r3, [r7, #8]
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d109      	bne.n	8013dd2 <udp_sendto_if_src+0x42>
 8013dbe:	4b5f      	ldr	r3, [pc, #380]	; (8013f3c <udp_sendto_if_src+0x1ac>)
 8013dc0:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013dc4:	4960      	ldr	r1, [pc, #384]	; (8013f48 <udp_sendto_if_src+0x1b8>)
 8013dc6:	485f      	ldr	r0, [pc, #380]	; (8013f44 <udp_sendto_if_src+0x1b4>)
 8013dc8:	f003 f9fe 	bl	80171c8 <iprintf>
 8013dcc:	f06f 030f 	mvn.w	r3, #15
 8013dd0:	e0af      	b.n	8013f32 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d109      	bne.n	8013dec <udp_sendto_if_src+0x5c>
 8013dd8:	4b58      	ldr	r3, [pc, #352]	; (8013f3c <udp_sendto_if_src+0x1ac>)
 8013dda:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013dde:	495b      	ldr	r1, [pc, #364]	; (8013f4c <udp_sendto_if_src+0x1bc>)
 8013de0:	4858      	ldr	r0, [pc, #352]	; (8013f44 <udp_sendto_if_src+0x1b4>)
 8013de2:	f003 f9f1 	bl	80171c8 <iprintf>
 8013de6:	f06f 030f 	mvn.w	r3, #15
 8013dea:	e0a2      	b.n	8013f32 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d109      	bne.n	8013e06 <udp_sendto_if_src+0x76>
 8013df2:	4b52      	ldr	r3, [pc, #328]	; (8013f3c <udp_sendto_if_src+0x1ac>)
 8013df4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8013df8:	4955      	ldr	r1, [pc, #340]	; (8013f50 <udp_sendto_if_src+0x1c0>)
 8013dfa:	4852      	ldr	r0, [pc, #328]	; (8013f44 <udp_sendto_if_src+0x1b4>)
 8013dfc:	f003 f9e4 	bl	80171c8 <iprintf>
 8013e00:	f06f 030f 	mvn.w	r3, #15
 8013e04:	e095      	b.n	8013f32 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8013e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d109      	bne.n	8013e20 <udp_sendto_if_src+0x90>
 8013e0c:	4b4b      	ldr	r3, [pc, #300]	; (8013f3c <udp_sendto_if_src+0x1ac>)
 8013e0e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013e12:	4950      	ldr	r1, [pc, #320]	; (8013f54 <udp_sendto_if_src+0x1c4>)
 8013e14:	484b      	ldr	r0, [pc, #300]	; (8013f44 <udp_sendto_if_src+0x1b4>)
 8013e16:	f003 f9d7 	bl	80171c8 <iprintf>
 8013e1a:	f06f 030f 	mvn.w	r3, #15
 8013e1e:	e088      	b.n	8013f32 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	8a5b      	ldrh	r3, [r3, #18]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d10f      	bne.n	8013e48 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013e28:	68f9      	ldr	r1, [r7, #12]
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	8a5b      	ldrh	r3, [r3, #18]
 8013e2e:	461a      	mov	r2, r3
 8013e30:	68f8      	ldr	r0, [r7, #12]
 8013e32:	f000 f893 	bl	8013f5c <udp_bind>
 8013e36:	4603      	mov	r3, r0
 8013e38:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013e3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d002      	beq.n	8013e48 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013e42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013e46:	e074      	b.n	8013f32 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	891b      	ldrh	r3, [r3, #8]
 8013e4c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013e50:	4293      	cmp	r3, r2
 8013e52:	d902      	bls.n	8013e5a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013e54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e58:	e06b      	b.n	8013f32 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013e5a:	2108      	movs	r1, #8
 8013e5c:	68b8      	ldr	r0, [r7, #8]
 8013e5e:	f7f9 fe65 	bl	800db2c <pbuf_add_header>
 8013e62:	4603      	mov	r3, r0
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d015      	beq.n	8013e94 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013e68:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e6c:	2108      	movs	r1, #8
 8013e6e:	2022      	movs	r0, #34	; 0x22
 8013e70:	f7f9 fc0e 	bl	800d690 <pbuf_alloc>
 8013e74:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013e76:	69fb      	ldr	r3, [r7, #28]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d102      	bne.n	8013e82 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013e80:	e057      	b.n	8013f32 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013e82:	68bb      	ldr	r3, [r7, #8]
 8013e84:	891b      	ldrh	r3, [r3, #8]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d006      	beq.n	8013e98 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013e8a:	68b9      	ldr	r1, [r7, #8]
 8013e8c:	69f8      	ldr	r0, [r7, #28]
 8013e8e:	f7f9 fffb 	bl	800de88 <pbuf_chain>
 8013e92:	e001      	b.n	8013e98 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013e98:	69fb      	ldr	r3, [r7, #28]
 8013e9a:	895b      	ldrh	r3, [r3, #10]
 8013e9c:	2b07      	cmp	r3, #7
 8013e9e:	d806      	bhi.n	8013eae <udp_sendto_if_src+0x11e>
 8013ea0:	4b26      	ldr	r3, [pc, #152]	; (8013f3c <udp_sendto_if_src+0x1ac>)
 8013ea2:	f240 320d 	movw	r2, #781	; 0x30d
 8013ea6:	492c      	ldr	r1, [pc, #176]	; (8013f58 <udp_sendto_if_src+0x1c8>)
 8013ea8:	4826      	ldr	r0, [pc, #152]	; (8013f44 <udp_sendto_if_src+0x1b4>)
 8013eaa:	f003 f98d 	bl	80171c8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013eae:	69fb      	ldr	r3, [r7, #28]
 8013eb0:	685b      	ldr	r3, [r3, #4]
 8013eb2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	8a5b      	ldrh	r3, [r3, #18]
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7f8 fb6f 	bl	800c59c <lwip_htons>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	461a      	mov	r2, r3
 8013ec2:	697b      	ldr	r3, [r7, #20]
 8013ec4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8013ec6:	887b      	ldrh	r3, [r7, #2]
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7f8 fb67 	bl	800c59c <lwip_htons>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8013ed6:	697b      	ldr	r3, [r7, #20]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	719a      	strb	r2, [r3, #6]
 8013edc:	2200      	movs	r2, #0
 8013ede:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013ee0:	69fb      	ldr	r3, [r7, #28]
 8013ee2:	891b      	ldrh	r3, [r3, #8]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f7f8 fb59 	bl	800c59c <lwip_htons>
 8013eea:	4603      	mov	r3, r0
 8013eec:	461a      	mov	r2, r3
 8013eee:	697b      	ldr	r3, [r7, #20]
 8013ef0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013ef2:	2311      	movs	r3, #17
 8013ef4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	7adb      	ldrb	r3, [r3, #11]
 8013efa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	7a9b      	ldrb	r3, [r3, #10]
 8013f00:	7cb9      	ldrb	r1, [r7, #18]
 8013f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f04:	9202      	str	r2, [sp, #8]
 8013f06:	7cfa      	ldrb	r2, [r7, #19]
 8013f08:	9201      	str	r2, [sp, #4]
 8013f0a:	9300      	str	r3, [sp, #0]
 8013f0c:	460b      	mov	r3, r1
 8013f0e:	687a      	ldr	r2, [r7, #4]
 8013f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013f12:	69f8      	ldr	r0, [r7, #28]
 8013f14:	f001 fc84 	bl	8015820 <ip4_output_if_src>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013f1c:	69fa      	ldr	r2, [r7, #28]
 8013f1e:	68bb      	ldr	r3, [r7, #8]
 8013f20:	429a      	cmp	r2, r3
 8013f22:	d004      	beq.n	8013f2e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013f24:	69f8      	ldr	r0, [r7, #28]
 8013f26:	f7f9 fe97 	bl	800dc58 <pbuf_free>
    q = NULL;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013f2e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013f32:	4618      	mov	r0, r3
 8013f34:	3720      	adds	r7, #32
 8013f36:	46bd      	mov	sp, r7
 8013f38:	bd80      	pop	{r7, pc}
 8013f3a:	bf00      	nop
 8013f3c:	0801a238 	.word	0x0801a238
 8013f40:	0801a424 	.word	0x0801a424
 8013f44:	0801a28c 	.word	0x0801a28c
 8013f48:	0801a444 	.word	0x0801a444
 8013f4c:	0801a464 	.word	0x0801a464
 8013f50:	0801a488 	.word	0x0801a488
 8013f54:	0801a4ac 	.word	0x0801a4ac
 8013f58:	0801a4d0 	.word	0x0801a4d0

08013f5c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b086      	sub	sp, #24
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	60b9      	str	r1, [r7, #8]
 8013f66:	4613      	mov	r3, r2
 8013f68:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d101      	bne.n	8013f74 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013f70:	4b39      	ldr	r3, [pc, #228]	; (8014058 <udp_bind+0xfc>)
 8013f72:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d109      	bne.n	8013f8e <udp_bind+0x32>
 8013f7a:	4b38      	ldr	r3, [pc, #224]	; (801405c <udp_bind+0x100>)
 8013f7c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013f80:	4937      	ldr	r1, [pc, #220]	; (8014060 <udp_bind+0x104>)
 8013f82:	4838      	ldr	r0, [pc, #224]	; (8014064 <udp_bind+0x108>)
 8013f84:	f003 f920 	bl	80171c8 <iprintf>
 8013f88:	f06f 030f 	mvn.w	r3, #15
 8013f8c:	e060      	b.n	8014050 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013f92:	4b35      	ldr	r3, [pc, #212]	; (8014068 <udp_bind+0x10c>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	617b      	str	r3, [r7, #20]
 8013f98:	e009      	b.n	8013fae <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013f9a:	68fa      	ldr	r2, [r7, #12]
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d102      	bne.n	8013fa8 <udp_bind+0x4c>
      rebind = 1;
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	74fb      	strb	r3, [r7, #19]
      break;
 8013fa6:	e005      	b.n	8013fb4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013fa8:	697b      	ldr	r3, [r7, #20]
 8013faa:	68db      	ldr	r3, [r3, #12]
 8013fac:	617b      	str	r3, [r7, #20]
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d1f2      	bne.n	8013f9a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8013fb4:	88fb      	ldrh	r3, [r7, #6]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d109      	bne.n	8013fce <udp_bind+0x72>
    port = udp_new_port();
 8013fba:	f7ff fc35 	bl	8013828 <udp_new_port>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013fc2:	88fb      	ldrh	r3, [r7, #6]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d12c      	bne.n	8014022 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013fc8:	f06f 0307 	mvn.w	r3, #7
 8013fcc:	e040      	b.n	8014050 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013fce:	4b26      	ldr	r3, [pc, #152]	; (8014068 <udp_bind+0x10c>)
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	617b      	str	r3, [r7, #20]
 8013fd4:	e022      	b.n	801401c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8013fd6:	68fa      	ldr	r2, [r7, #12]
 8013fd8:	697b      	ldr	r3, [r7, #20]
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d01b      	beq.n	8014016 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013fde:	697b      	ldr	r3, [r7, #20]
 8013fe0:	8a5b      	ldrh	r3, [r3, #18]
 8013fe2:	88fa      	ldrh	r2, [r7, #6]
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	d116      	bne.n	8014016 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	681a      	ldr	r2, [r3, #0]
 8013fec:	68bb      	ldr	r3, [r7, #8]
 8013fee:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013ff0:	429a      	cmp	r2, r3
 8013ff2:	d00d      	beq.n	8014010 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013ff4:	68bb      	ldr	r3, [r7, #8]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d00a      	beq.n	8014010 <udp_bind+0xb4>
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d006      	beq.n	8014010 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014002:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014004:	2b00      	cmp	r3, #0
 8014006:	d003      	beq.n	8014010 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014008:	697b      	ldr	r3, [r7, #20]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d102      	bne.n	8014016 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014010:	f06f 0307 	mvn.w	r3, #7
 8014014:	e01c      	b.n	8014050 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	68db      	ldr	r3, [r3, #12]
 801401a:	617b      	str	r3, [r7, #20]
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d1d9      	bne.n	8013fd6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014022:	68bb      	ldr	r3, [r7, #8]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d002      	beq.n	801402e <udp_bind+0xd2>
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	e000      	b.n	8014030 <udp_bind+0xd4>
 801402e:	2300      	movs	r3, #0
 8014030:	68fa      	ldr	r2, [r7, #12]
 8014032:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	88fa      	ldrh	r2, [r7, #6]
 8014038:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801403a:	7cfb      	ldrb	r3, [r7, #19]
 801403c:	2b00      	cmp	r3, #0
 801403e:	d106      	bne.n	801404e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014040:	4b09      	ldr	r3, [pc, #36]	; (8014068 <udp_bind+0x10c>)
 8014042:	681a      	ldr	r2, [r3, #0]
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014048:	4a07      	ldr	r2, [pc, #28]	; (8014068 <udp_bind+0x10c>)
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801404e:	2300      	movs	r3, #0
}
 8014050:	4618      	mov	r0, r3
 8014052:	3718      	adds	r7, #24
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}
 8014058:	0801ad5c 	.word	0x0801ad5c
 801405c:	0801a238 	.word	0x0801a238
 8014060:	0801a500 	.word	0x0801a500
 8014064:	0801a28c 	.word	0x0801a28c
 8014068:	20009024 	.word	0x20009024

0801406c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b086      	sub	sp, #24
 8014070:	af00      	add	r7, sp, #0
 8014072:	60f8      	str	r0, [r7, #12]
 8014074:	60b9      	str	r1, [r7, #8]
 8014076:	4613      	mov	r3, r2
 8014078:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801407a:	68fb      	ldr	r3, [r7, #12]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d109      	bne.n	8014094 <udp_connect+0x28>
 8014080:	4b2c      	ldr	r3, [pc, #176]	; (8014134 <udp_connect+0xc8>)
 8014082:	f240 4235 	movw	r2, #1077	; 0x435
 8014086:	492c      	ldr	r1, [pc, #176]	; (8014138 <udp_connect+0xcc>)
 8014088:	482c      	ldr	r0, [pc, #176]	; (801413c <udp_connect+0xd0>)
 801408a:	f003 f89d 	bl	80171c8 <iprintf>
 801408e:	f06f 030f 	mvn.w	r3, #15
 8014092:	e04b      	b.n	801412c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d109      	bne.n	80140ae <udp_connect+0x42>
 801409a:	4b26      	ldr	r3, [pc, #152]	; (8014134 <udp_connect+0xc8>)
 801409c:	f240 4236 	movw	r2, #1078	; 0x436
 80140a0:	4927      	ldr	r1, [pc, #156]	; (8014140 <udp_connect+0xd4>)
 80140a2:	4826      	ldr	r0, [pc, #152]	; (801413c <udp_connect+0xd0>)
 80140a4:	f003 f890 	bl	80171c8 <iprintf>
 80140a8:	f06f 030f 	mvn.w	r3, #15
 80140ac:	e03e      	b.n	801412c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	8a5b      	ldrh	r3, [r3, #18]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d10f      	bne.n	80140d6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80140b6:	68f9      	ldr	r1, [r7, #12]
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	8a5b      	ldrh	r3, [r3, #18]
 80140bc:	461a      	mov	r2, r3
 80140be:	68f8      	ldr	r0, [r7, #12]
 80140c0:	f7ff ff4c 	bl	8013f5c <udp_bind>
 80140c4:	4603      	mov	r3, r0
 80140c6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80140c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d002      	beq.n	80140d6 <udp_connect+0x6a>
      return err;
 80140d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140d4:	e02a      	b.n	801412c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d002      	beq.n	80140e2 <udp_connect+0x76>
 80140dc:	68bb      	ldr	r3, [r7, #8]
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	e000      	b.n	80140e4 <udp_connect+0x78>
 80140e2:	2300      	movs	r3, #0
 80140e4:	68fa      	ldr	r2, [r7, #12]
 80140e6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	88fa      	ldrh	r2, [r7, #6]
 80140ec:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	7c1b      	ldrb	r3, [r3, #16]
 80140f2:	f043 0304 	orr.w	r3, r3, #4
 80140f6:	b2da      	uxtb	r2, r3
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80140fc:	4b11      	ldr	r3, [pc, #68]	; (8014144 <udp_connect+0xd8>)
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	617b      	str	r3, [r7, #20]
 8014102:	e008      	b.n	8014116 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014104:	68fa      	ldr	r2, [r7, #12]
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	429a      	cmp	r2, r3
 801410a:	d101      	bne.n	8014110 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801410c:	2300      	movs	r3, #0
 801410e:	e00d      	b.n	801412c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014110:	697b      	ldr	r3, [r7, #20]
 8014112:	68db      	ldr	r3, [r3, #12]
 8014114:	617b      	str	r3, [r7, #20]
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d1f3      	bne.n	8014104 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801411c:	4b09      	ldr	r3, [pc, #36]	; (8014144 <udp_connect+0xd8>)
 801411e:	681a      	ldr	r2, [r3, #0]
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014124:	4a07      	ldr	r2, [pc, #28]	; (8014144 <udp_connect+0xd8>)
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801412a:	2300      	movs	r3, #0
}
 801412c:	4618      	mov	r0, r3
 801412e:	3718      	adds	r7, #24
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}
 8014134:	0801a238 	.word	0x0801a238
 8014138:	0801a518 	.word	0x0801a518
 801413c:	0801a28c 	.word	0x0801a28c
 8014140:	0801a534 	.word	0x0801a534
 8014144:	20009024 	.word	0x20009024

08014148 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b084      	sub	sp, #16
 801414c:	af00      	add	r7, sp, #0
 801414e:	60f8      	str	r0, [r7, #12]
 8014150:	60b9      	str	r1, [r7, #8]
 8014152:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014154:	68fb      	ldr	r3, [r7, #12]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d107      	bne.n	801416a <udp_recv+0x22>
 801415a:	4b08      	ldr	r3, [pc, #32]	; (801417c <udp_recv+0x34>)
 801415c:	f240 428a 	movw	r2, #1162	; 0x48a
 8014160:	4907      	ldr	r1, [pc, #28]	; (8014180 <udp_recv+0x38>)
 8014162:	4808      	ldr	r0, [pc, #32]	; (8014184 <udp_recv+0x3c>)
 8014164:	f003 f830 	bl	80171c8 <iprintf>
 8014168:	e005      	b.n	8014176 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	68ba      	ldr	r2, [r7, #8]
 801416e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	687a      	ldr	r2, [r7, #4]
 8014174:	61da      	str	r2, [r3, #28]
}
 8014176:	3710      	adds	r7, #16
 8014178:	46bd      	mov	sp, r7
 801417a:	bd80      	pop	{r7, pc}
 801417c:	0801a238 	.word	0x0801a238
 8014180:	0801a56c 	.word	0x0801a56c
 8014184:	0801a28c 	.word	0x0801a28c

08014188 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014188:	b580      	push	{r7, lr}
 801418a:	b084      	sub	sp, #16
 801418c:	af00      	add	r7, sp, #0
 801418e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d107      	bne.n	80141a6 <udp_remove+0x1e>
 8014196:	4b19      	ldr	r3, [pc, #100]	; (80141fc <udp_remove+0x74>)
 8014198:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801419c:	4918      	ldr	r1, [pc, #96]	; (8014200 <udp_remove+0x78>)
 801419e:	4819      	ldr	r0, [pc, #100]	; (8014204 <udp_remove+0x7c>)
 80141a0:	f003 f812 	bl	80171c8 <iprintf>
 80141a4:	e026      	b.n	80141f4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80141a6:	4b18      	ldr	r3, [pc, #96]	; (8014208 <udp_remove+0x80>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d105      	bne.n	80141bc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80141b0:	4b15      	ldr	r3, [pc, #84]	; (8014208 <udp_remove+0x80>)
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	68db      	ldr	r3, [r3, #12]
 80141b6:	4a14      	ldr	r2, [pc, #80]	; (8014208 <udp_remove+0x80>)
 80141b8:	6013      	str	r3, [r2, #0]
 80141ba:	e017      	b.n	80141ec <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80141bc:	4b12      	ldr	r3, [pc, #72]	; (8014208 <udp_remove+0x80>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	60fb      	str	r3, [r7, #12]
 80141c2:	e010      	b.n	80141e6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	68db      	ldr	r3, [r3, #12]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d009      	beq.n	80141e0 <udp_remove+0x58>
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	68db      	ldr	r3, [r3, #12]
 80141d0:	687a      	ldr	r2, [r7, #4]
 80141d2:	429a      	cmp	r2, r3
 80141d4:	d104      	bne.n	80141e0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	68da      	ldr	r2, [r3, #12]
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	60da      	str	r2, [r3, #12]
        break;
 80141de:	e005      	b.n	80141ec <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	68db      	ldr	r3, [r3, #12]
 80141e4:	60fb      	str	r3, [r7, #12]
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d1eb      	bne.n	80141c4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80141ec:	6879      	ldr	r1, [r7, #4]
 80141ee:	2000      	movs	r0, #0
 80141f0:	f7f8 febc 	bl	800cf6c <memp_free>
}
 80141f4:	3710      	adds	r7, #16
 80141f6:	46bd      	mov	sp, r7
 80141f8:	bd80      	pop	{r7, pc}
 80141fa:	bf00      	nop
 80141fc:	0801a238 	.word	0x0801a238
 8014200:	0801a584 	.word	0x0801a584
 8014204:	0801a28c 	.word	0x0801a28c
 8014208:	20009024 	.word	0x20009024

0801420c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b082      	sub	sp, #8
 8014210:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014212:	2000      	movs	r0, #0
 8014214:	f7f8 fe3a 	bl	800ce8c <memp_malloc>
 8014218:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	2b00      	cmp	r3, #0
 801421e:	d007      	beq.n	8014230 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014220:	2220      	movs	r2, #32
 8014222:	2100      	movs	r1, #0
 8014224:	6878      	ldr	r0, [r7, #4]
 8014226:	f002 ffc7 	bl	80171b8 <memset>
    pcb->ttl = UDP_TTL;
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	22ff      	movs	r2, #255	; 0xff
 801422e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014230:	687b      	ldr	r3, [r7, #4]
}
 8014232:	4618      	mov	r0, r3
 8014234:	3708      	adds	r7, #8
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}
	...

0801423c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801423c:	b480      	push	{r7}
 801423e:	b085      	sub	sp, #20
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
 8014244:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	2b00      	cmp	r3, #0
 801424a:	d01e      	beq.n	801428a <udp_netif_ip_addr_changed+0x4e>
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d01a      	beq.n	801428a <udp_netif_ip_addr_changed+0x4e>
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d017      	beq.n	801428a <udp_netif_ip_addr_changed+0x4e>
 801425a:	683b      	ldr	r3, [r7, #0]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d013      	beq.n	801428a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014262:	4b0d      	ldr	r3, [pc, #52]	; (8014298 <udp_netif_ip_addr_changed+0x5c>)
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	60fb      	str	r3, [r7, #12]
 8014268:	e00c      	b.n	8014284 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	681a      	ldr	r2, [r3, #0]
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	429a      	cmp	r2, r3
 8014274:	d103      	bne.n	801427e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	681a      	ldr	r2, [r3, #0]
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	68db      	ldr	r3, [r3, #12]
 8014282:	60fb      	str	r3, [r7, #12]
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d1ef      	bne.n	801426a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801428a:	bf00      	nop
 801428c:	3714      	adds	r7, #20
 801428e:	46bd      	mov	sp, r7
 8014290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014294:	4770      	bx	lr
 8014296:	bf00      	nop
 8014298:	20009024 	.word	0x20009024

0801429c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b082      	sub	sp, #8
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80142a4:	4915      	ldr	r1, [pc, #84]	; (80142fc <etharp_free_entry+0x60>)
 80142a6:	687a      	ldr	r2, [r7, #4]
 80142a8:	4613      	mov	r3, r2
 80142aa:	005b      	lsls	r3, r3, #1
 80142ac:	4413      	add	r3, r2
 80142ae:	00db      	lsls	r3, r3, #3
 80142b0:	440b      	add	r3, r1
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d013      	beq.n	80142e0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80142b8:	4910      	ldr	r1, [pc, #64]	; (80142fc <etharp_free_entry+0x60>)
 80142ba:	687a      	ldr	r2, [r7, #4]
 80142bc:	4613      	mov	r3, r2
 80142be:	005b      	lsls	r3, r3, #1
 80142c0:	4413      	add	r3, r2
 80142c2:	00db      	lsls	r3, r3, #3
 80142c4:	440b      	add	r3, r1
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	4618      	mov	r0, r3
 80142ca:	f7f9 fcc5 	bl	800dc58 <pbuf_free>
    arp_table[i].q = NULL;
 80142ce:	490b      	ldr	r1, [pc, #44]	; (80142fc <etharp_free_entry+0x60>)
 80142d0:	687a      	ldr	r2, [r7, #4]
 80142d2:	4613      	mov	r3, r2
 80142d4:	005b      	lsls	r3, r3, #1
 80142d6:	4413      	add	r3, r2
 80142d8:	00db      	lsls	r3, r3, #3
 80142da:	440b      	add	r3, r1
 80142dc:	2200      	movs	r2, #0
 80142de:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80142e0:	4906      	ldr	r1, [pc, #24]	; (80142fc <etharp_free_entry+0x60>)
 80142e2:	687a      	ldr	r2, [r7, #4]
 80142e4:	4613      	mov	r3, r2
 80142e6:	005b      	lsls	r3, r3, #1
 80142e8:	4413      	add	r3, r2
 80142ea:	00db      	lsls	r3, r3, #3
 80142ec:	440b      	add	r3, r1
 80142ee:	3314      	adds	r3, #20
 80142f0:	2200      	movs	r2, #0
 80142f2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80142f4:	bf00      	nop
 80142f6:	3708      	adds	r7, #8
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bd80      	pop	{r7, pc}
 80142fc:	20009028 	.word	0x20009028

08014300 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b082      	sub	sp, #8
 8014304:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014306:	2300      	movs	r3, #0
 8014308:	607b      	str	r3, [r7, #4]
 801430a:	e096      	b.n	801443a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801430c:	494f      	ldr	r1, [pc, #316]	; (801444c <etharp_tmr+0x14c>)
 801430e:	687a      	ldr	r2, [r7, #4]
 8014310:	4613      	mov	r3, r2
 8014312:	005b      	lsls	r3, r3, #1
 8014314:	4413      	add	r3, r2
 8014316:	00db      	lsls	r3, r3, #3
 8014318:	440b      	add	r3, r1
 801431a:	3314      	adds	r3, #20
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8014320:	78fb      	ldrb	r3, [r7, #3]
 8014322:	2b00      	cmp	r3, #0
 8014324:	f000 8086 	beq.w	8014434 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8014328:	4948      	ldr	r1, [pc, #288]	; (801444c <etharp_tmr+0x14c>)
 801432a:	687a      	ldr	r2, [r7, #4]
 801432c:	4613      	mov	r3, r2
 801432e:	005b      	lsls	r3, r3, #1
 8014330:	4413      	add	r3, r2
 8014332:	00db      	lsls	r3, r3, #3
 8014334:	440b      	add	r3, r1
 8014336:	3312      	adds	r3, #18
 8014338:	881b      	ldrh	r3, [r3, #0]
 801433a:	3301      	adds	r3, #1
 801433c:	b298      	uxth	r0, r3
 801433e:	4943      	ldr	r1, [pc, #268]	; (801444c <etharp_tmr+0x14c>)
 8014340:	687a      	ldr	r2, [r7, #4]
 8014342:	4613      	mov	r3, r2
 8014344:	005b      	lsls	r3, r3, #1
 8014346:	4413      	add	r3, r2
 8014348:	00db      	lsls	r3, r3, #3
 801434a:	440b      	add	r3, r1
 801434c:	3312      	adds	r3, #18
 801434e:	4602      	mov	r2, r0
 8014350:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014352:	493e      	ldr	r1, [pc, #248]	; (801444c <etharp_tmr+0x14c>)
 8014354:	687a      	ldr	r2, [r7, #4]
 8014356:	4613      	mov	r3, r2
 8014358:	005b      	lsls	r3, r3, #1
 801435a:	4413      	add	r3, r2
 801435c:	00db      	lsls	r3, r3, #3
 801435e:	440b      	add	r3, r1
 8014360:	3312      	adds	r3, #18
 8014362:	881b      	ldrh	r3, [r3, #0]
 8014364:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014368:	d215      	bcs.n	8014396 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801436a:	4938      	ldr	r1, [pc, #224]	; (801444c <etharp_tmr+0x14c>)
 801436c:	687a      	ldr	r2, [r7, #4]
 801436e:	4613      	mov	r3, r2
 8014370:	005b      	lsls	r3, r3, #1
 8014372:	4413      	add	r3, r2
 8014374:	00db      	lsls	r3, r3, #3
 8014376:	440b      	add	r3, r1
 8014378:	3314      	adds	r3, #20
 801437a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801437c:	2b01      	cmp	r3, #1
 801437e:	d10e      	bne.n	801439e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014380:	4932      	ldr	r1, [pc, #200]	; (801444c <etharp_tmr+0x14c>)
 8014382:	687a      	ldr	r2, [r7, #4]
 8014384:	4613      	mov	r3, r2
 8014386:	005b      	lsls	r3, r3, #1
 8014388:	4413      	add	r3, r2
 801438a:	00db      	lsls	r3, r3, #3
 801438c:	440b      	add	r3, r1
 801438e:	3312      	adds	r3, #18
 8014390:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014392:	2b04      	cmp	r3, #4
 8014394:	d903      	bls.n	801439e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f7ff ff80 	bl	801429c <etharp_free_entry>
 801439c:	e04a      	b.n	8014434 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801439e:	492b      	ldr	r1, [pc, #172]	; (801444c <etharp_tmr+0x14c>)
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	4613      	mov	r3, r2
 80143a4:	005b      	lsls	r3, r3, #1
 80143a6:	4413      	add	r3, r2
 80143a8:	00db      	lsls	r3, r3, #3
 80143aa:	440b      	add	r3, r1
 80143ac:	3314      	adds	r3, #20
 80143ae:	781b      	ldrb	r3, [r3, #0]
 80143b0:	2b03      	cmp	r3, #3
 80143b2:	d10a      	bne.n	80143ca <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80143b4:	4925      	ldr	r1, [pc, #148]	; (801444c <etharp_tmr+0x14c>)
 80143b6:	687a      	ldr	r2, [r7, #4]
 80143b8:	4613      	mov	r3, r2
 80143ba:	005b      	lsls	r3, r3, #1
 80143bc:	4413      	add	r3, r2
 80143be:	00db      	lsls	r3, r3, #3
 80143c0:	440b      	add	r3, r1
 80143c2:	3314      	adds	r3, #20
 80143c4:	2204      	movs	r2, #4
 80143c6:	701a      	strb	r2, [r3, #0]
 80143c8:	e034      	b.n	8014434 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80143ca:	4920      	ldr	r1, [pc, #128]	; (801444c <etharp_tmr+0x14c>)
 80143cc:	687a      	ldr	r2, [r7, #4]
 80143ce:	4613      	mov	r3, r2
 80143d0:	005b      	lsls	r3, r3, #1
 80143d2:	4413      	add	r3, r2
 80143d4:	00db      	lsls	r3, r3, #3
 80143d6:	440b      	add	r3, r1
 80143d8:	3314      	adds	r3, #20
 80143da:	781b      	ldrb	r3, [r3, #0]
 80143dc:	2b04      	cmp	r3, #4
 80143de:	d10a      	bne.n	80143f6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80143e0:	491a      	ldr	r1, [pc, #104]	; (801444c <etharp_tmr+0x14c>)
 80143e2:	687a      	ldr	r2, [r7, #4]
 80143e4:	4613      	mov	r3, r2
 80143e6:	005b      	lsls	r3, r3, #1
 80143e8:	4413      	add	r3, r2
 80143ea:	00db      	lsls	r3, r3, #3
 80143ec:	440b      	add	r3, r1
 80143ee:	3314      	adds	r3, #20
 80143f0:	2202      	movs	r2, #2
 80143f2:	701a      	strb	r2, [r3, #0]
 80143f4:	e01e      	b.n	8014434 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80143f6:	4915      	ldr	r1, [pc, #84]	; (801444c <etharp_tmr+0x14c>)
 80143f8:	687a      	ldr	r2, [r7, #4]
 80143fa:	4613      	mov	r3, r2
 80143fc:	005b      	lsls	r3, r3, #1
 80143fe:	4413      	add	r3, r2
 8014400:	00db      	lsls	r3, r3, #3
 8014402:	440b      	add	r3, r1
 8014404:	3314      	adds	r3, #20
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	2b01      	cmp	r3, #1
 801440a:	d113      	bne.n	8014434 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801440c:	490f      	ldr	r1, [pc, #60]	; (801444c <etharp_tmr+0x14c>)
 801440e:	687a      	ldr	r2, [r7, #4]
 8014410:	4613      	mov	r3, r2
 8014412:	005b      	lsls	r3, r3, #1
 8014414:	4413      	add	r3, r2
 8014416:	00db      	lsls	r3, r3, #3
 8014418:	440b      	add	r3, r1
 801441a:	3308      	adds	r3, #8
 801441c:	6818      	ldr	r0, [r3, #0]
 801441e:	687a      	ldr	r2, [r7, #4]
 8014420:	4613      	mov	r3, r2
 8014422:	005b      	lsls	r3, r3, #1
 8014424:	4413      	add	r3, r2
 8014426:	00db      	lsls	r3, r3, #3
 8014428:	4a08      	ldr	r2, [pc, #32]	; (801444c <etharp_tmr+0x14c>)
 801442a:	4413      	add	r3, r2
 801442c:	3304      	adds	r3, #4
 801442e:	4619      	mov	r1, r3
 8014430:	f000 fe6e 	bl	8015110 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	3301      	adds	r3, #1
 8014438:	607b      	str	r3, [r7, #4]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	2b09      	cmp	r3, #9
 801443e:	f77f af65 	ble.w	801430c <etharp_tmr+0xc>
      }
    }
  }
}
 8014442:	bf00      	nop
 8014444:	bf00      	nop
 8014446:	3708      	adds	r7, #8
 8014448:	46bd      	mov	sp, r7
 801444a:	bd80      	pop	{r7, pc}
 801444c:	20009028 	.word	0x20009028

08014450 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b08a      	sub	sp, #40	; 0x28
 8014454:	af00      	add	r7, sp, #0
 8014456:	60f8      	str	r0, [r7, #12]
 8014458:	460b      	mov	r3, r1
 801445a:	607a      	str	r2, [r7, #4]
 801445c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801445e:	230a      	movs	r3, #10
 8014460:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014462:	230a      	movs	r3, #10
 8014464:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8014466:	230a      	movs	r3, #10
 8014468:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801446a:	2300      	movs	r3, #0
 801446c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801446e:	230a      	movs	r3, #10
 8014470:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014472:	2300      	movs	r3, #0
 8014474:	83bb      	strh	r3, [r7, #28]
 8014476:	2300      	movs	r3, #0
 8014478:	837b      	strh	r3, [r7, #26]
 801447a:	2300      	movs	r3, #0
 801447c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801447e:	2300      	movs	r3, #0
 8014480:	843b      	strh	r3, [r7, #32]
 8014482:	e0ae      	b.n	80145e2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014484:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014488:	49a6      	ldr	r1, [pc, #664]	; (8014724 <etharp_find_entry+0x2d4>)
 801448a:	4613      	mov	r3, r2
 801448c:	005b      	lsls	r3, r3, #1
 801448e:	4413      	add	r3, r2
 8014490:	00db      	lsls	r3, r3, #3
 8014492:	440b      	add	r3, r1
 8014494:	3314      	adds	r3, #20
 8014496:	781b      	ldrb	r3, [r3, #0]
 8014498:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801449a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801449e:	2b0a      	cmp	r3, #10
 80144a0:	d105      	bne.n	80144ae <etharp_find_entry+0x5e>
 80144a2:	7dfb      	ldrb	r3, [r7, #23]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d102      	bne.n	80144ae <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80144a8:	8c3b      	ldrh	r3, [r7, #32]
 80144aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80144ac:	e095      	b.n	80145da <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80144ae:	7dfb      	ldrb	r3, [r7, #23]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	f000 8092 	beq.w	80145da <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80144b6:	7dfb      	ldrb	r3, [r7, #23]
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	d009      	beq.n	80144d0 <etharp_find_entry+0x80>
 80144bc:	7dfb      	ldrb	r3, [r7, #23]
 80144be:	2b01      	cmp	r3, #1
 80144c0:	d806      	bhi.n	80144d0 <etharp_find_entry+0x80>
 80144c2:	4b99      	ldr	r3, [pc, #612]	; (8014728 <etharp_find_entry+0x2d8>)
 80144c4:	f240 1223 	movw	r2, #291	; 0x123
 80144c8:	4998      	ldr	r1, [pc, #608]	; (801472c <etharp_find_entry+0x2dc>)
 80144ca:	4899      	ldr	r0, [pc, #612]	; (8014730 <etharp_find_entry+0x2e0>)
 80144cc:	f002 fe7c 	bl	80171c8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d020      	beq.n	8014518 <etharp_find_entry+0xc8>
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	6819      	ldr	r1, [r3, #0]
 80144da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144de:	4891      	ldr	r0, [pc, #580]	; (8014724 <etharp_find_entry+0x2d4>)
 80144e0:	4613      	mov	r3, r2
 80144e2:	005b      	lsls	r3, r3, #1
 80144e4:	4413      	add	r3, r2
 80144e6:	00db      	lsls	r3, r3, #3
 80144e8:	4403      	add	r3, r0
 80144ea:	3304      	adds	r3, #4
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	4299      	cmp	r1, r3
 80144f0:	d112      	bne.n	8014518 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d00c      	beq.n	8014512 <etharp_find_entry+0xc2>
 80144f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80144fc:	4989      	ldr	r1, [pc, #548]	; (8014724 <etharp_find_entry+0x2d4>)
 80144fe:	4613      	mov	r3, r2
 8014500:	005b      	lsls	r3, r3, #1
 8014502:	4413      	add	r3, r2
 8014504:	00db      	lsls	r3, r3, #3
 8014506:	440b      	add	r3, r1
 8014508:	3308      	adds	r3, #8
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	687a      	ldr	r2, [r7, #4]
 801450e:	429a      	cmp	r2, r3
 8014510:	d102      	bne.n	8014518 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014512:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014516:	e100      	b.n	801471a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014518:	7dfb      	ldrb	r3, [r7, #23]
 801451a:	2b01      	cmp	r3, #1
 801451c:	d140      	bne.n	80145a0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801451e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014522:	4980      	ldr	r1, [pc, #512]	; (8014724 <etharp_find_entry+0x2d4>)
 8014524:	4613      	mov	r3, r2
 8014526:	005b      	lsls	r3, r3, #1
 8014528:	4413      	add	r3, r2
 801452a:	00db      	lsls	r3, r3, #3
 801452c:	440b      	add	r3, r1
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	2b00      	cmp	r3, #0
 8014532:	d01a      	beq.n	801456a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8014534:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014538:	497a      	ldr	r1, [pc, #488]	; (8014724 <etharp_find_entry+0x2d4>)
 801453a:	4613      	mov	r3, r2
 801453c:	005b      	lsls	r3, r3, #1
 801453e:	4413      	add	r3, r2
 8014540:	00db      	lsls	r3, r3, #3
 8014542:	440b      	add	r3, r1
 8014544:	3312      	adds	r3, #18
 8014546:	881b      	ldrh	r3, [r3, #0]
 8014548:	8bba      	ldrh	r2, [r7, #28]
 801454a:	429a      	cmp	r2, r3
 801454c:	d845      	bhi.n	80145da <etharp_find_entry+0x18a>
            old_queue = i;
 801454e:	8c3b      	ldrh	r3, [r7, #32]
 8014550:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014552:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014556:	4973      	ldr	r1, [pc, #460]	; (8014724 <etharp_find_entry+0x2d4>)
 8014558:	4613      	mov	r3, r2
 801455a:	005b      	lsls	r3, r3, #1
 801455c:	4413      	add	r3, r2
 801455e:	00db      	lsls	r3, r3, #3
 8014560:	440b      	add	r3, r1
 8014562:	3312      	adds	r3, #18
 8014564:	881b      	ldrh	r3, [r3, #0]
 8014566:	83bb      	strh	r3, [r7, #28]
 8014568:	e037      	b.n	80145da <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801456a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801456e:	496d      	ldr	r1, [pc, #436]	; (8014724 <etharp_find_entry+0x2d4>)
 8014570:	4613      	mov	r3, r2
 8014572:	005b      	lsls	r3, r3, #1
 8014574:	4413      	add	r3, r2
 8014576:	00db      	lsls	r3, r3, #3
 8014578:	440b      	add	r3, r1
 801457a:	3312      	adds	r3, #18
 801457c:	881b      	ldrh	r3, [r3, #0]
 801457e:	8b7a      	ldrh	r2, [r7, #26]
 8014580:	429a      	cmp	r2, r3
 8014582:	d82a      	bhi.n	80145da <etharp_find_entry+0x18a>
            old_pending = i;
 8014584:	8c3b      	ldrh	r3, [r7, #32]
 8014586:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014588:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801458c:	4965      	ldr	r1, [pc, #404]	; (8014724 <etharp_find_entry+0x2d4>)
 801458e:	4613      	mov	r3, r2
 8014590:	005b      	lsls	r3, r3, #1
 8014592:	4413      	add	r3, r2
 8014594:	00db      	lsls	r3, r3, #3
 8014596:	440b      	add	r3, r1
 8014598:	3312      	adds	r3, #18
 801459a:	881b      	ldrh	r3, [r3, #0]
 801459c:	837b      	strh	r3, [r7, #26]
 801459e:	e01c      	b.n	80145da <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80145a0:	7dfb      	ldrb	r3, [r7, #23]
 80145a2:	2b01      	cmp	r3, #1
 80145a4:	d919      	bls.n	80145da <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80145a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145aa:	495e      	ldr	r1, [pc, #376]	; (8014724 <etharp_find_entry+0x2d4>)
 80145ac:	4613      	mov	r3, r2
 80145ae:	005b      	lsls	r3, r3, #1
 80145b0:	4413      	add	r3, r2
 80145b2:	00db      	lsls	r3, r3, #3
 80145b4:	440b      	add	r3, r1
 80145b6:	3312      	adds	r3, #18
 80145b8:	881b      	ldrh	r3, [r3, #0]
 80145ba:	8b3a      	ldrh	r2, [r7, #24]
 80145bc:	429a      	cmp	r2, r3
 80145be:	d80c      	bhi.n	80145da <etharp_find_entry+0x18a>
            old_stable = i;
 80145c0:	8c3b      	ldrh	r3, [r7, #32]
 80145c2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80145c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145c8:	4956      	ldr	r1, [pc, #344]	; (8014724 <etharp_find_entry+0x2d4>)
 80145ca:	4613      	mov	r3, r2
 80145cc:	005b      	lsls	r3, r3, #1
 80145ce:	4413      	add	r3, r2
 80145d0:	00db      	lsls	r3, r3, #3
 80145d2:	440b      	add	r3, r1
 80145d4:	3312      	adds	r3, #18
 80145d6:	881b      	ldrh	r3, [r3, #0]
 80145d8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80145da:	8c3b      	ldrh	r3, [r7, #32]
 80145dc:	3301      	adds	r3, #1
 80145de:	b29b      	uxth	r3, r3
 80145e0:	843b      	strh	r3, [r7, #32]
 80145e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80145e6:	2b09      	cmp	r3, #9
 80145e8:	f77f af4c 	ble.w	8014484 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80145ec:	7afb      	ldrb	r3, [r7, #11]
 80145ee:	f003 0302 	and.w	r3, r3, #2
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d108      	bne.n	8014608 <etharp_find_entry+0x1b8>
 80145f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80145fa:	2b0a      	cmp	r3, #10
 80145fc:	d107      	bne.n	801460e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80145fe:	7afb      	ldrb	r3, [r7, #11]
 8014600:	f003 0301 	and.w	r3, r3, #1
 8014604:	2b00      	cmp	r3, #0
 8014606:	d102      	bne.n	801460e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801460c:	e085      	b.n	801471a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801460e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014612:	2b09      	cmp	r3, #9
 8014614:	dc02      	bgt.n	801461c <etharp_find_entry+0x1cc>
    i = empty;
 8014616:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014618:	843b      	strh	r3, [r7, #32]
 801461a:	e039      	b.n	8014690 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801461c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014620:	2b09      	cmp	r3, #9
 8014622:	dc14      	bgt.n	801464e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014624:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014626:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014628:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801462c:	493d      	ldr	r1, [pc, #244]	; (8014724 <etharp_find_entry+0x2d4>)
 801462e:	4613      	mov	r3, r2
 8014630:	005b      	lsls	r3, r3, #1
 8014632:	4413      	add	r3, r2
 8014634:	00db      	lsls	r3, r3, #3
 8014636:	440b      	add	r3, r1
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d018      	beq.n	8014670 <etharp_find_entry+0x220>
 801463e:	4b3a      	ldr	r3, [pc, #232]	; (8014728 <etharp_find_entry+0x2d8>)
 8014640:	f240 126d 	movw	r2, #365	; 0x16d
 8014644:	493b      	ldr	r1, [pc, #236]	; (8014734 <etharp_find_entry+0x2e4>)
 8014646:	483a      	ldr	r0, [pc, #232]	; (8014730 <etharp_find_entry+0x2e0>)
 8014648:	f002 fdbe 	bl	80171c8 <iprintf>
 801464c:	e010      	b.n	8014670 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801464e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014652:	2b09      	cmp	r3, #9
 8014654:	dc02      	bgt.n	801465c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014656:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014658:	843b      	strh	r3, [r7, #32]
 801465a:	e009      	b.n	8014670 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801465c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014660:	2b09      	cmp	r3, #9
 8014662:	dc02      	bgt.n	801466a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014664:	8bfb      	ldrh	r3, [r7, #30]
 8014666:	843b      	strh	r3, [r7, #32]
 8014668:	e002      	b.n	8014670 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801466a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801466e:	e054      	b.n	801471a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014670:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014674:	2b09      	cmp	r3, #9
 8014676:	dd06      	ble.n	8014686 <etharp_find_entry+0x236>
 8014678:	4b2b      	ldr	r3, [pc, #172]	; (8014728 <etharp_find_entry+0x2d8>)
 801467a:	f240 127f 	movw	r2, #383	; 0x17f
 801467e:	492e      	ldr	r1, [pc, #184]	; (8014738 <etharp_find_entry+0x2e8>)
 8014680:	482b      	ldr	r0, [pc, #172]	; (8014730 <etharp_find_entry+0x2e0>)
 8014682:	f002 fda1 	bl	80171c8 <iprintf>
    etharp_free_entry(i);
 8014686:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801468a:	4618      	mov	r0, r3
 801468c:	f7ff fe06 	bl	801429c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014690:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014694:	2b09      	cmp	r3, #9
 8014696:	dd06      	ble.n	80146a6 <etharp_find_entry+0x256>
 8014698:	4b23      	ldr	r3, [pc, #140]	; (8014728 <etharp_find_entry+0x2d8>)
 801469a:	f240 1283 	movw	r2, #387	; 0x183
 801469e:	4926      	ldr	r1, [pc, #152]	; (8014738 <etharp_find_entry+0x2e8>)
 80146a0:	4823      	ldr	r0, [pc, #140]	; (8014730 <etharp_find_entry+0x2e0>)
 80146a2:	f002 fd91 	bl	80171c8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80146a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146aa:	491e      	ldr	r1, [pc, #120]	; (8014724 <etharp_find_entry+0x2d4>)
 80146ac:	4613      	mov	r3, r2
 80146ae:	005b      	lsls	r3, r3, #1
 80146b0:	4413      	add	r3, r2
 80146b2:	00db      	lsls	r3, r3, #3
 80146b4:	440b      	add	r3, r1
 80146b6:	3314      	adds	r3, #20
 80146b8:	781b      	ldrb	r3, [r3, #0]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d006      	beq.n	80146cc <etharp_find_entry+0x27c>
 80146be:	4b1a      	ldr	r3, [pc, #104]	; (8014728 <etharp_find_entry+0x2d8>)
 80146c0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80146c4:	491d      	ldr	r1, [pc, #116]	; (801473c <etharp_find_entry+0x2ec>)
 80146c6:	481a      	ldr	r0, [pc, #104]	; (8014730 <etharp_find_entry+0x2e0>)
 80146c8:	f002 fd7e 	bl	80171c8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d00b      	beq.n	80146ea <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80146d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	6819      	ldr	r1, [r3, #0]
 80146da:	4812      	ldr	r0, [pc, #72]	; (8014724 <etharp_find_entry+0x2d4>)
 80146dc:	4613      	mov	r3, r2
 80146de:	005b      	lsls	r3, r3, #1
 80146e0:	4413      	add	r3, r2
 80146e2:	00db      	lsls	r3, r3, #3
 80146e4:	4403      	add	r3, r0
 80146e6:	3304      	adds	r3, #4
 80146e8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80146ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146ee:	490d      	ldr	r1, [pc, #52]	; (8014724 <etharp_find_entry+0x2d4>)
 80146f0:	4613      	mov	r3, r2
 80146f2:	005b      	lsls	r3, r3, #1
 80146f4:	4413      	add	r3, r2
 80146f6:	00db      	lsls	r3, r3, #3
 80146f8:	440b      	add	r3, r1
 80146fa:	3312      	adds	r3, #18
 80146fc:	2200      	movs	r2, #0
 80146fe:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014700:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014704:	4907      	ldr	r1, [pc, #28]	; (8014724 <etharp_find_entry+0x2d4>)
 8014706:	4613      	mov	r3, r2
 8014708:	005b      	lsls	r3, r3, #1
 801470a:	4413      	add	r3, r2
 801470c:	00db      	lsls	r3, r3, #3
 801470e:	440b      	add	r3, r1
 8014710:	3308      	adds	r3, #8
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014716:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801471a:	4618      	mov	r0, r3
 801471c:	3728      	adds	r7, #40	; 0x28
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	20009028 	.word	0x20009028
 8014728:	0801a59c 	.word	0x0801a59c
 801472c:	0801a5d4 	.word	0x0801a5d4
 8014730:	0801a614 	.word	0x0801a614
 8014734:	0801a63c 	.word	0x0801a63c
 8014738:	0801a654 	.word	0x0801a654
 801473c:	0801a668 	.word	0x0801a668

08014740 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b088      	sub	sp, #32
 8014744:	af02      	add	r7, sp, #8
 8014746:	60f8      	str	r0, [r7, #12]
 8014748:	60b9      	str	r1, [r7, #8]
 801474a:	607a      	str	r2, [r7, #4]
 801474c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014754:	2b06      	cmp	r3, #6
 8014756:	d006      	beq.n	8014766 <etharp_update_arp_entry+0x26>
 8014758:	4b48      	ldr	r3, [pc, #288]	; (801487c <etharp_update_arp_entry+0x13c>)
 801475a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801475e:	4948      	ldr	r1, [pc, #288]	; (8014880 <etharp_update_arp_entry+0x140>)
 8014760:	4848      	ldr	r0, [pc, #288]	; (8014884 <etharp_update_arp_entry+0x144>)
 8014762:	f002 fd31 	bl	80171c8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d012      	beq.n	8014792 <etharp_update_arp_entry+0x52>
 801476c:	68bb      	ldr	r3, [r7, #8]
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	2b00      	cmp	r3, #0
 8014772:	d00e      	beq.n	8014792 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	681b      	ldr	r3, [r3, #0]
 8014778:	68f9      	ldr	r1, [r7, #12]
 801477a:	4618      	mov	r0, r3
 801477c:	f001 f8fe 	bl	801597c <ip4_addr_isbroadcast_u32>
 8014780:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014782:	2b00      	cmp	r3, #0
 8014784:	d105      	bne.n	8014792 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014786:	68bb      	ldr	r3, [r7, #8]
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801478e:	2be0      	cmp	r3, #224	; 0xe0
 8014790:	d102      	bne.n	8014798 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014792:	f06f 030f 	mvn.w	r3, #15
 8014796:	e06c      	b.n	8014872 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014798:	78fb      	ldrb	r3, [r7, #3]
 801479a:	68fa      	ldr	r2, [r7, #12]
 801479c:	4619      	mov	r1, r3
 801479e:	68b8      	ldr	r0, [r7, #8]
 80147a0:	f7ff fe56 	bl	8014450 <etharp_find_entry>
 80147a4:	4603      	mov	r3, r0
 80147a6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80147a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	da02      	bge.n	80147b6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80147b0:	8afb      	ldrh	r3, [r7, #22]
 80147b2:	b25b      	sxtb	r3, r3
 80147b4:	e05d      	b.n	8014872 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80147b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147ba:	4933      	ldr	r1, [pc, #204]	; (8014888 <etharp_update_arp_entry+0x148>)
 80147bc:	4613      	mov	r3, r2
 80147be:	005b      	lsls	r3, r3, #1
 80147c0:	4413      	add	r3, r2
 80147c2:	00db      	lsls	r3, r3, #3
 80147c4:	440b      	add	r3, r1
 80147c6:	3314      	adds	r3, #20
 80147c8:	2202      	movs	r2, #2
 80147ca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80147cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147d0:	492d      	ldr	r1, [pc, #180]	; (8014888 <etharp_update_arp_entry+0x148>)
 80147d2:	4613      	mov	r3, r2
 80147d4:	005b      	lsls	r3, r3, #1
 80147d6:	4413      	add	r3, r2
 80147d8:	00db      	lsls	r3, r3, #3
 80147da:	440b      	add	r3, r1
 80147dc:	3308      	adds	r3, #8
 80147de:	68fa      	ldr	r2, [r7, #12]
 80147e0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80147e2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80147e6:	4613      	mov	r3, r2
 80147e8:	005b      	lsls	r3, r3, #1
 80147ea:	4413      	add	r3, r2
 80147ec:	00db      	lsls	r3, r3, #3
 80147ee:	3308      	adds	r3, #8
 80147f0:	4a25      	ldr	r2, [pc, #148]	; (8014888 <etharp_update_arp_entry+0x148>)
 80147f2:	4413      	add	r3, r2
 80147f4:	3304      	adds	r3, #4
 80147f6:	2206      	movs	r2, #6
 80147f8:	6879      	ldr	r1, [r7, #4]
 80147fa:	4618      	mov	r0, r3
 80147fc:	f002 fcce 	bl	801719c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014800:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014804:	4920      	ldr	r1, [pc, #128]	; (8014888 <etharp_update_arp_entry+0x148>)
 8014806:	4613      	mov	r3, r2
 8014808:	005b      	lsls	r3, r3, #1
 801480a:	4413      	add	r3, r2
 801480c:	00db      	lsls	r3, r3, #3
 801480e:	440b      	add	r3, r1
 8014810:	3312      	adds	r3, #18
 8014812:	2200      	movs	r2, #0
 8014814:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014816:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801481a:	491b      	ldr	r1, [pc, #108]	; (8014888 <etharp_update_arp_entry+0x148>)
 801481c:	4613      	mov	r3, r2
 801481e:	005b      	lsls	r3, r3, #1
 8014820:	4413      	add	r3, r2
 8014822:	00db      	lsls	r3, r3, #3
 8014824:	440b      	add	r3, r1
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d021      	beq.n	8014870 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801482c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014830:	4915      	ldr	r1, [pc, #84]	; (8014888 <etharp_update_arp_entry+0x148>)
 8014832:	4613      	mov	r3, r2
 8014834:	005b      	lsls	r3, r3, #1
 8014836:	4413      	add	r3, r2
 8014838:	00db      	lsls	r3, r3, #3
 801483a:	440b      	add	r3, r1
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014840:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014844:	4910      	ldr	r1, [pc, #64]	; (8014888 <etharp_update_arp_entry+0x148>)
 8014846:	4613      	mov	r3, r2
 8014848:	005b      	lsls	r3, r3, #1
 801484a:	4413      	add	r3, r2
 801484c:	00db      	lsls	r3, r3, #3
 801484e:	440b      	add	r3, r1
 8014850:	2200      	movs	r2, #0
 8014852:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801485a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801485e:	9300      	str	r3, [sp, #0]
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	6939      	ldr	r1, [r7, #16]
 8014864:	68f8      	ldr	r0, [r7, #12]
 8014866:	f001 ff97 	bl	8016798 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801486a:	6938      	ldr	r0, [r7, #16]
 801486c:	f7f9 f9f4 	bl	800dc58 <pbuf_free>
  }
  return ERR_OK;
 8014870:	2300      	movs	r3, #0
}
 8014872:	4618      	mov	r0, r3
 8014874:	3718      	adds	r7, #24
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}
 801487a:	bf00      	nop
 801487c:	0801a59c 	.word	0x0801a59c
 8014880:	0801a694 	.word	0x0801a694
 8014884:	0801a614 	.word	0x0801a614
 8014888:	20009028 	.word	0x20009028

0801488c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b084      	sub	sp, #16
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014894:	2300      	movs	r3, #0
 8014896:	60fb      	str	r3, [r7, #12]
 8014898:	e01e      	b.n	80148d8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801489a:	4913      	ldr	r1, [pc, #76]	; (80148e8 <etharp_cleanup_netif+0x5c>)
 801489c:	68fa      	ldr	r2, [r7, #12]
 801489e:	4613      	mov	r3, r2
 80148a0:	005b      	lsls	r3, r3, #1
 80148a2:	4413      	add	r3, r2
 80148a4:	00db      	lsls	r3, r3, #3
 80148a6:	440b      	add	r3, r1
 80148a8:	3314      	adds	r3, #20
 80148aa:	781b      	ldrb	r3, [r3, #0]
 80148ac:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80148ae:	7afb      	ldrb	r3, [r7, #11]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d00e      	beq.n	80148d2 <etharp_cleanup_netif+0x46>
 80148b4:	490c      	ldr	r1, [pc, #48]	; (80148e8 <etharp_cleanup_netif+0x5c>)
 80148b6:	68fa      	ldr	r2, [r7, #12]
 80148b8:	4613      	mov	r3, r2
 80148ba:	005b      	lsls	r3, r3, #1
 80148bc:	4413      	add	r3, r2
 80148be:	00db      	lsls	r3, r3, #3
 80148c0:	440b      	add	r3, r1
 80148c2:	3308      	adds	r3, #8
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	687a      	ldr	r2, [r7, #4]
 80148c8:	429a      	cmp	r2, r3
 80148ca:	d102      	bne.n	80148d2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80148cc:	68f8      	ldr	r0, [r7, #12]
 80148ce:	f7ff fce5 	bl	801429c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	3301      	adds	r3, #1
 80148d6:	60fb      	str	r3, [r7, #12]
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	2b09      	cmp	r3, #9
 80148dc:	dddd      	ble.n	801489a <etharp_cleanup_netif+0xe>
    }
  }
}
 80148de:	bf00      	nop
 80148e0:	bf00      	nop
 80148e2:	3710      	adds	r7, #16
 80148e4:	46bd      	mov	sp, r7
 80148e6:	bd80      	pop	{r7, pc}
 80148e8:	20009028 	.word	0x20009028

080148ec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80148ec:	b5b0      	push	{r4, r5, r7, lr}
 80148ee:	b08a      	sub	sp, #40	; 0x28
 80148f0:	af04      	add	r7, sp, #16
 80148f2:	6078      	str	r0, [r7, #4]
 80148f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d107      	bne.n	801490c <etharp_input+0x20>
 80148fc:	4b3d      	ldr	r3, [pc, #244]	; (80149f4 <etharp_input+0x108>)
 80148fe:	f240 228a 	movw	r2, #650	; 0x28a
 8014902:	493d      	ldr	r1, [pc, #244]	; (80149f8 <etharp_input+0x10c>)
 8014904:	483d      	ldr	r0, [pc, #244]	; (80149fc <etharp_input+0x110>)
 8014906:	f002 fc5f 	bl	80171c8 <iprintf>
 801490a:	e06f      	b.n	80149ec <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	685b      	ldr	r3, [r3, #4]
 8014910:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014912:	693b      	ldr	r3, [r7, #16]
 8014914:	881b      	ldrh	r3, [r3, #0]
 8014916:	b29b      	uxth	r3, r3
 8014918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801491c:	d10c      	bne.n	8014938 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801491e:	693b      	ldr	r3, [r7, #16]
 8014920:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014922:	2b06      	cmp	r3, #6
 8014924:	d108      	bne.n	8014938 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014926:	693b      	ldr	r3, [r7, #16]
 8014928:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801492a:	2b04      	cmp	r3, #4
 801492c:	d104      	bne.n	8014938 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	885b      	ldrh	r3, [r3, #2]
 8014932:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014934:	2b08      	cmp	r3, #8
 8014936:	d003      	beq.n	8014940 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f7f9 f98d 	bl	800dc58 <pbuf_free>
    return;
 801493e:	e055      	b.n	80149ec <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014940:	693b      	ldr	r3, [r7, #16]
 8014942:	330e      	adds	r3, #14
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014948:	693b      	ldr	r3, [r7, #16]
 801494a:	3318      	adds	r3, #24
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	3304      	adds	r3, #4
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d102      	bne.n	8014960 <etharp_input+0x74>
    for_us = 0;
 801495a:	2300      	movs	r3, #0
 801495c:	75fb      	strb	r3, [r7, #23]
 801495e:	e009      	b.n	8014974 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014960:	68ba      	ldr	r2, [r7, #8]
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	3304      	adds	r3, #4
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	429a      	cmp	r2, r3
 801496a:	bf0c      	ite	eq
 801496c:	2301      	moveq	r3, #1
 801496e:	2300      	movne	r3, #0
 8014970:	b2db      	uxtb	r3, r3
 8014972:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	f103 0208 	add.w	r2, r3, #8
 801497a:	7dfb      	ldrb	r3, [r7, #23]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d001      	beq.n	8014984 <etharp_input+0x98>
 8014980:	2301      	movs	r3, #1
 8014982:	e000      	b.n	8014986 <etharp_input+0x9a>
 8014984:	2302      	movs	r3, #2
 8014986:	f107 010c 	add.w	r1, r7, #12
 801498a:	6838      	ldr	r0, [r7, #0]
 801498c:	f7ff fed8 	bl	8014740 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014990:	693b      	ldr	r3, [r7, #16]
 8014992:	88db      	ldrh	r3, [r3, #6]
 8014994:	b29b      	uxth	r3, r3
 8014996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801499a:	d003      	beq.n	80149a4 <etharp_input+0xb8>
 801499c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80149a0:	d01e      	beq.n	80149e0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80149a2:	e020      	b.n	80149e6 <etharp_input+0xfa>
      if (for_us) {
 80149a4:	7dfb      	ldrb	r3, [r7, #23]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d01c      	beq.n	80149e4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80149b0:	693b      	ldr	r3, [r7, #16]
 80149b2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80149c0:	693a      	ldr	r2, [r7, #16]
 80149c2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80149c4:	2102      	movs	r1, #2
 80149c6:	9103      	str	r1, [sp, #12]
 80149c8:	f107 010c 	add.w	r1, r7, #12
 80149cc:	9102      	str	r1, [sp, #8]
 80149ce:	9201      	str	r2, [sp, #4]
 80149d0:	9300      	str	r3, [sp, #0]
 80149d2:	462b      	mov	r3, r5
 80149d4:	4622      	mov	r2, r4
 80149d6:	4601      	mov	r1, r0
 80149d8:	6838      	ldr	r0, [r7, #0]
 80149da:	f000 faeb 	bl	8014fb4 <etharp_raw>
      break;
 80149de:	e001      	b.n	80149e4 <etharp_input+0xf8>
      break;
 80149e0:	bf00      	nop
 80149e2:	e000      	b.n	80149e6 <etharp_input+0xfa>
      break;
 80149e4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f7f9 f936 	bl	800dc58 <pbuf_free>
}
 80149ec:	3718      	adds	r7, #24
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bdb0      	pop	{r4, r5, r7, pc}
 80149f2:	bf00      	nop
 80149f4:	0801a59c 	.word	0x0801a59c
 80149f8:	0801a6ec 	.word	0x0801a6ec
 80149fc:	0801a614 	.word	0x0801a614

08014a00 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014a00:	b580      	push	{r7, lr}
 8014a02:	b086      	sub	sp, #24
 8014a04:	af02      	add	r7, sp, #8
 8014a06:	60f8      	str	r0, [r7, #12]
 8014a08:	60b9      	str	r1, [r7, #8]
 8014a0a:	4613      	mov	r3, r2
 8014a0c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014a0e:	79fa      	ldrb	r2, [r7, #7]
 8014a10:	4944      	ldr	r1, [pc, #272]	; (8014b24 <etharp_output_to_arp_index+0x124>)
 8014a12:	4613      	mov	r3, r2
 8014a14:	005b      	lsls	r3, r3, #1
 8014a16:	4413      	add	r3, r2
 8014a18:	00db      	lsls	r3, r3, #3
 8014a1a:	440b      	add	r3, r1
 8014a1c:	3314      	adds	r3, #20
 8014a1e:	781b      	ldrb	r3, [r3, #0]
 8014a20:	2b01      	cmp	r3, #1
 8014a22:	d806      	bhi.n	8014a32 <etharp_output_to_arp_index+0x32>
 8014a24:	4b40      	ldr	r3, [pc, #256]	; (8014b28 <etharp_output_to_arp_index+0x128>)
 8014a26:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014a2a:	4940      	ldr	r1, [pc, #256]	; (8014b2c <etharp_output_to_arp_index+0x12c>)
 8014a2c:	4840      	ldr	r0, [pc, #256]	; (8014b30 <etharp_output_to_arp_index+0x130>)
 8014a2e:	f002 fbcb 	bl	80171c8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014a32:	79fa      	ldrb	r2, [r7, #7]
 8014a34:	493b      	ldr	r1, [pc, #236]	; (8014b24 <etharp_output_to_arp_index+0x124>)
 8014a36:	4613      	mov	r3, r2
 8014a38:	005b      	lsls	r3, r3, #1
 8014a3a:	4413      	add	r3, r2
 8014a3c:	00db      	lsls	r3, r3, #3
 8014a3e:	440b      	add	r3, r1
 8014a40:	3314      	adds	r3, #20
 8014a42:	781b      	ldrb	r3, [r3, #0]
 8014a44:	2b02      	cmp	r3, #2
 8014a46:	d153      	bne.n	8014af0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014a48:	79fa      	ldrb	r2, [r7, #7]
 8014a4a:	4936      	ldr	r1, [pc, #216]	; (8014b24 <etharp_output_to_arp_index+0x124>)
 8014a4c:	4613      	mov	r3, r2
 8014a4e:	005b      	lsls	r3, r3, #1
 8014a50:	4413      	add	r3, r2
 8014a52:	00db      	lsls	r3, r3, #3
 8014a54:	440b      	add	r3, r1
 8014a56:	3312      	adds	r3, #18
 8014a58:	881b      	ldrh	r3, [r3, #0]
 8014a5a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014a5e:	d919      	bls.n	8014a94 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014a60:	79fa      	ldrb	r2, [r7, #7]
 8014a62:	4613      	mov	r3, r2
 8014a64:	005b      	lsls	r3, r3, #1
 8014a66:	4413      	add	r3, r2
 8014a68:	00db      	lsls	r3, r3, #3
 8014a6a:	4a2e      	ldr	r2, [pc, #184]	; (8014b24 <etharp_output_to_arp_index+0x124>)
 8014a6c:	4413      	add	r3, r2
 8014a6e:	3304      	adds	r3, #4
 8014a70:	4619      	mov	r1, r3
 8014a72:	68f8      	ldr	r0, [r7, #12]
 8014a74:	f000 fb4c 	bl	8015110 <etharp_request>
 8014a78:	4603      	mov	r3, r0
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d138      	bne.n	8014af0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014a7e:	79fa      	ldrb	r2, [r7, #7]
 8014a80:	4928      	ldr	r1, [pc, #160]	; (8014b24 <etharp_output_to_arp_index+0x124>)
 8014a82:	4613      	mov	r3, r2
 8014a84:	005b      	lsls	r3, r3, #1
 8014a86:	4413      	add	r3, r2
 8014a88:	00db      	lsls	r3, r3, #3
 8014a8a:	440b      	add	r3, r1
 8014a8c:	3314      	adds	r3, #20
 8014a8e:	2203      	movs	r2, #3
 8014a90:	701a      	strb	r2, [r3, #0]
 8014a92:	e02d      	b.n	8014af0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014a94:	79fa      	ldrb	r2, [r7, #7]
 8014a96:	4923      	ldr	r1, [pc, #140]	; (8014b24 <etharp_output_to_arp_index+0x124>)
 8014a98:	4613      	mov	r3, r2
 8014a9a:	005b      	lsls	r3, r3, #1
 8014a9c:	4413      	add	r3, r2
 8014a9e:	00db      	lsls	r3, r3, #3
 8014aa0:	440b      	add	r3, r1
 8014aa2:	3312      	adds	r3, #18
 8014aa4:	881b      	ldrh	r3, [r3, #0]
 8014aa6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014aaa:	d321      	bcc.n	8014af0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014aac:	79fa      	ldrb	r2, [r7, #7]
 8014aae:	4613      	mov	r3, r2
 8014ab0:	005b      	lsls	r3, r3, #1
 8014ab2:	4413      	add	r3, r2
 8014ab4:	00db      	lsls	r3, r3, #3
 8014ab6:	4a1b      	ldr	r2, [pc, #108]	; (8014b24 <etharp_output_to_arp_index+0x124>)
 8014ab8:	4413      	add	r3, r2
 8014aba:	1d19      	adds	r1, r3, #4
 8014abc:	79fa      	ldrb	r2, [r7, #7]
 8014abe:	4613      	mov	r3, r2
 8014ac0:	005b      	lsls	r3, r3, #1
 8014ac2:	4413      	add	r3, r2
 8014ac4:	00db      	lsls	r3, r3, #3
 8014ac6:	3308      	adds	r3, #8
 8014ac8:	4a16      	ldr	r2, [pc, #88]	; (8014b24 <etharp_output_to_arp_index+0x124>)
 8014aca:	4413      	add	r3, r2
 8014acc:	3304      	adds	r3, #4
 8014ace:	461a      	mov	r2, r3
 8014ad0:	68f8      	ldr	r0, [r7, #12]
 8014ad2:	f000 fafb 	bl	80150cc <etharp_request_dst>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d109      	bne.n	8014af0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014adc:	79fa      	ldrb	r2, [r7, #7]
 8014ade:	4911      	ldr	r1, [pc, #68]	; (8014b24 <etharp_output_to_arp_index+0x124>)
 8014ae0:	4613      	mov	r3, r2
 8014ae2:	005b      	lsls	r3, r3, #1
 8014ae4:	4413      	add	r3, r2
 8014ae6:	00db      	lsls	r3, r3, #3
 8014ae8:	440b      	add	r3, r1
 8014aea:	3314      	adds	r3, #20
 8014aec:	2203      	movs	r2, #3
 8014aee:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014af6:	79fa      	ldrb	r2, [r7, #7]
 8014af8:	4613      	mov	r3, r2
 8014afa:	005b      	lsls	r3, r3, #1
 8014afc:	4413      	add	r3, r2
 8014afe:	00db      	lsls	r3, r3, #3
 8014b00:	3308      	adds	r3, #8
 8014b02:	4a08      	ldr	r2, [pc, #32]	; (8014b24 <etharp_output_to_arp_index+0x124>)
 8014b04:	4413      	add	r3, r2
 8014b06:	3304      	adds	r3, #4
 8014b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014b0c:	9200      	str	r2, [sp, #0]
 8014b0e:	460a      	mov	r2, r1
 8014b10:	68b9      	ldr	r1, [r7, #8]
 8014b12:	68f8      	ldr	r0, [r7, #12]
 8014b14:	f001 fe40 	bl	8016798 <ethernet_output>
 8014b18:	4603      	mov	r3, r0
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	3710      	adds	r7, #16
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	bd80      	pop	{r7, pc}
 8014b22:	bf00      	nop
 8014b24:	20009028 	.word	0x20009028
 8014b28:	0801a59c 	.word	0x0801a59c
 8014b2c:	0801a70c 	.word	0x0801a70c
 8014b30:	0801a614 	.word	0x0801a614

08014b34 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b08a      	sub	sp, #40	; 0x28
 8014b38:	af02      	add	r7, sp, #8
 8014b3a:	60f8      	str	r0, [r7, #12]
 8014b3c:	60b9      	str	r1, [r7, #8]
 8014b3e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d106      	bne.n	8014b58 <etharp_output+0x24>
 8014b4a:	4b73      	ldr	r3, [pc, #460]	; (8014d18 <etharp_output+0x1e4>)
 8014b4c:	f240 321e 	movw	r2, #798	; 0x31e
 8014b50:	4972      	ldr	r1, [pc, #456]	; (8014d1c <etharp_output+0x1e8>)
 8014b52:	4873      	ldr	r0, [pc, #460]	; (8014d20 <etharp_output+0x1ec>)
 8014b54:	f002 fb38 	bl	80171c8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014b58:	68bb      	ldr	r3, [r7, #8]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d106      	bne.n	8014b6c <etharp_output+0x38>
 8014b5e:	4b6e      	ldr	r3, [pc, #440]	; (8014d18 <etharp_output+0x1e4>)
 8014b60:	f240 321f 	movw	r2, #799	; 0x31f
 8014b64:	496f      	ldr	r1, [pc, #444]	; (8014d24 <etharp_output+0x1f0>)
 8014b66:	486e      	ldr	r0, [pc, #440]	; (8014d20 <etharp_output+0x1ec>)
 8014b68:	f002 fb2e 	bl	80171c8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d106      	bne.n	8014b80 <etharp_output+0x4c>
 8014b72:	4b69      	ldr	r3, [pc, #420]	; (8014d18 <etharp_output+0x1e4>)
 8014b74:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014b78:	496b      	ldr	r1, [pc, #428]	; (8014d28 <etharp_output+0x1f4>)
 8014b7a:	4869      	ldr	r0, [pc, #420]	; (8014d20 <etharp_output+0x1ec>)
 8014b7c:	f002 fb24 	bl	80171c8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	68f9      	ldr	r1, [r7, #12]
 8014b86:	4618      	mov	r0, r3
 8014b88:	f000 fef8 	bl	801597c <ip4_addr_isbroadcast_u32>
 8014b8c:	4603      	mov	r3, r0
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d002      	beq.n	8014b98 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014b92:	4b66      	ldr	r3, [pc, #408]	; (8014d2c <etharp_output+0x1f8>)
 8014b94:	61fb      	str	r3, [r7, #28]
 8014b96:	e0af      	b.n	8014cf8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014ba0:	2be0      	cmp	r3, #224	; 0xe0
 8014ba2:	d118      	bne.n	8014bd6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014ba4:	2301      	movs	r3, #1
 8014ba6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014ba8:	2300      	movs	r3, #0
 8014baa:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014bac:	235e      	movs	r3, #94	; 0x5e
 8014bae:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	3301      	adds	r3, #1
 8014bb4:	781b      	ldrb	r3, [r3, #0]
 8014bb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014bba:	b2db      	uxtb	r3, r3
 8014bbc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	3302      	adds	r3, #2
 8014bc2:	781b      	ldrb	r3, [r3, #0]
 8014bc4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	3303      	adds	r3, #3
 8014bca:	781b      	ldrb	r3, [r3, #0]
 8014bcc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014bce:	f107 0310 	add.w	r3, r7, #16
 8014bd2:	61fb      	str	r3, [r7, #28]
 8014bd4:	e090      	b.n	8014cf8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	681a      	ldr	r2, [r3, #0]
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	3304      	adds	r3, #4
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	405a      	eors	r2, r3
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	3308      	adds	r3, #8
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	4013      	ands	r3, r2
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d012      	beq.n	8014c14 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014bf4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014bf8:	4293      	cmp	r3, r2
 8014bfa:	d00b      	beq.n	8014c14 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	330c      	adds	r3, #12
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d003      	beq.n	8014c0e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	330c      	adds	r3, #12
 8014c0a:	61bb      	str	r3, [r7, #24]
 8014c0c:	e002      	b.n	8014c14 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014c0e:	f06f 0303 	mvn.w	r3, #3
 8014c12:	e07d      	b.n	8014d10 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014c14:	4b46      	ldr	r3, [pc, #280]	; (8014d30 <etharp_output+0x1fc>)
 8014c16:	781b      	ldrb	r3, [r3, #0]
 8014c18:	4619      	mov	r1, r3
 8014c1a:	4a46      	ldr	r2, [pc, #280]	; (8014d34 <etharp_output+0x200>)
 8014c1c:	460b      	mov	r3, r1
 8014c1e:	005b      	lsls	r3, r3, #1
 8014c20:	440b      	add	r3, r1
 8014c22:	00db      	lsls	r3, r3, #3
 8014c24:	4413      	add	r3, r2
 8014c26:	3314      	adds	r3, #20
 8014c28:	781b      	ldrb	r3, [r3, #0]
 8014c2a:	2b01      	cmp	r3, #1
 8014c2c:	d925      	bls.n	8014c7a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014c2e:	4b40      	ldr	r3, [pc, #256]	; (8014d30 <etharp_output+0x1fc>)
 8014c30:	781b      	ldrb	r3, [r3, #0]
 8014c32:	4619      	mov	r1, r3
 8014c34:	4a3f      	ldr	r2, [pc, #252]	; (8014d34 <etharp_output+0x200>)
 8014c36:	460b      	mov	r3, r1
 8014c38:	005b      	lsls	r3, r3, #1
 8014c3a:	440b      	add	r3, r1
 8014c3c:	00db      	lsls	r3, r3, #3
 8014c3e:	4413      	add	r3, r2
 8014c40:	3308      	adds	r3, #8
 8014c42:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014c44:	68fa      	ldr	r2, [r7, #12]
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d117      	bne.n	8014c7a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014c4a:	69bb      	ldr	r3, [r7, #24]
 8014c4c:	681a      	ldr	r2, [r3, #0]
 8014c4e:	4b38      	ldr	r3, [pc, #224]	; (8014d30 <etharp_output+0x1fc>)
 8014c50:	781b      	ldrb	r3, [r3, #0]
 8014c52:	4618      	mov	r0, r3
 8014c54:	4937      	ldr	r1, [pc, #220]	; (8014d34 <etharp_output+0x200>)
 8014c56:	4603      	mov	r3, r0
 8014c58:	005b      	lsls	r3, r3, #1
 8014c5a:	4403      	add	r3, r0
 8014c5c:	00db      	lsls	r3, r3, #3
 8014c5e:	440b      	add	r3, r1
 8014c60:	3304      	adds	r3, #4
 8014c62:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014c64:	429a      	cmp	r2, r3
 8014c66:	d108      	bne.n	8014c7a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014c68:	4b31      	ldr	r3, [pc, #196]	; (8014d30 <etharp_output+0x1fc>)
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	461a      	mov	r2, r3
 8014c6e:	68b9      	ldr	r1, [r7, #8]
 8014c70:	68f8      	ldr	r0, [r7, #12]
 8014c72:	f7ff fec5 	bl	8014a00 <etharp_output_to_arp_index>
 8014c76:	4603      	mov	r3, r0
 8014c78:	e04a      	b.n	8014d10 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	75fb      	strb	r3, [r7, #23]
 8014c7e:	e031      	b.n	8014ce4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014c80:	7dfa      	ldrb	r2, [r7, #23]
 8014c82:	492c      	ldr	r1, [pc, #176]	; (8014d34 <etharp_output+0x200>)
 8014c84:	4613      	mov	r3, r2
 8014c86:	005b      	lsls	r3, r3, #1
 8014c88:	4413      	add	r3, r2
 8014c8a:	00db      	lsls	r3, r3, #3
 8014c8c:	440b      	add	r3, r1
 8014c8e:	3314      	adds	r3, #20
 8014c90:	781b      	ldrb	r3, [r3, #0]
 8014c92:	2b01      	cmp	r3, #1
 8014c94:	d923      	bls.n	8014cde <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014c96:	7dfa      	ldrb	r2, [r7, #23]
 8014c98:	4926      	ldr	r1, [pc, #152]	; (8014d34 <etharp_output+0x200>)
 8014c9a:	4613      	mov	r3, r2
 8014c9c:	005b      	lsls	r3, r3, #1
 8014c9e:	4413      	add	r3, r2
 8014ca0:	00db      	lsls	r3, r3, #3
 8014ca2:	440b      	add	r3, r1
 8014ca4:	3308      	adds	r3, #8
 8014ca6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014ca8:	68fa      	ldr	r2, [r7, #12]
 8014caa:	429a      	cmp	r2, r3
 8014cac:	d117      	bne.n	8014cde <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014cae:	69bb      	ldr	r3, [r7, #24]
 8014cb0:	6819      	ldr	r1, [r3, #0]
 8014cb2:	7dfa      	ldrb	r2, [r7, #23]
 8014cb4:	481f      	ldr	r0, [pc, #124]	; (8014d34 <etharp_output+0x200>)
 8014cb6:	4613      	mov	r3, r2
 8014cb8:	005b      	lsls	r3, r3, #1
 8014cba:	4413      	add	r3, r2
 8014cbc:	00db      	lsls	r3, r3, #3
 8014cbe:	4403      	add	r3, r0
 8014cc0:	3304      	adds	r3, #4
 8014cc2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014cc4:	4299      	cmp	r1, r3
 8014cc6:	d10a      	bne.n	8014cde <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014cc8:	4a19      	ldr	r2, [pc, #100]	; (8014d30 <etharp_output+0x1fc>)
 8014cca:	7dfb      	ldrb	r3, [r7, #23]
 8014ccc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014cce:	7dfb      	ldrb	r3, [r7, #23]
 8014cd0:	461a      	mov	r2, r3
 8014cd2:	68b9      	ldr	r1, [r7, #8]
 8014cd4:	68f8      	ldr	r0, [r7, #12]
 8014cd6:	f7ff fe93 	bl	8014a00 <etharp_output_to_arp_index>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	e018      	b.n	8014d10 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014cde:	7dfb      	ldrb	r3, [r7, #23]
 8014ce0:	3301      	adds	r3, #1
 8014ce2:	75fb      	strb	r3, [r7, #23]
 8014ce4:	7dfb      	ldrb	r3, [r7, #23]
 8014ce6:	2b09      	cmp	r3, #9
 8014ce8:	d9ca      	bls.n	8014c80 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014cea:	68ba      	ldr	r2, [r7, #8]
 8014cec:	69b9      	ldr	r1, [r7, #24]
 8014cee:	68f8      	ldr	r0, [r7, #12]
 8014cf0:	f000 f822 	bl	8014d38 <etharp_query>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	e00b      	b.n	8014d10 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d02:	9300      	str	r3, [sp, #0]
 8014d04:	69fb      	ldr	r3, [r7, #28]
 8014d06:	68b9      	ldr	r1, [r7, #8]
 8014d08:	68f8      	ldr	r0, [r7, #12]
 8014d0a:	f001 fd45 	bl	8016798 <ethernet_output>
 8014d0e:	4603      	mov	r3, r0
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3720      	adds	r7, #32
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}
 8014d18:	0801a59c 	.word	0x0801a59c
 8014d1c:	0801a6ec 	.word	0x0801a6ec
 8014d20:	0801a614 	.word	0x0801a614
 8014d24:	0801a73c 	.word	0x0801a73c
 8014d28:	0801a6dc 	.word	0x0801a6dc
 8014d2c:	0801ad60 	.word	0x0801ad60
 8014d30:	20009118 	.word	0x20009118
 8014d34:	20009028 	.word	0x20009028

08014d38 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b08c      	sub	sp, #48	; 0x30
 8014d3c:	af02      	add	r7, sp, #8
 8014d3e:	60f8      	str	r0, [r7, #12]
 8014d40:	60b9      	str	r1, [r7, #8]
 8014d42:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	3326      	adds	r3, #38	; 0x26
 8014d48:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014d4a:	23ff      	movs	r3, #255	; 0xff
 8014d4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014d50:	2300      	movs	r3, #0
 8014d52:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d54:	68bb      	ldr	r3, [r7, #8]
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	68f9      	ldr	r1, [r7, #12]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f000 fe0e 	bl	801597c <ip4_addr_isbroadcast_u32>
 8014d60:	4603      	mov	r3, r0
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d10c      	bne.n	8014d80 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014d66:	68bb      	ldr	r3, [r7, #8]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014d6e:	2be0      	cmp	r3, #224	; 0xe0
 8014d70:	d006      	beq.n	8014d80 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d003      	beq.n	8014d80 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014d78:	68bb      	ldr	r3, [r7, #8]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d102      	bne.n	8014d86 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014d80:	f06f 030f 	mvn.w	r3, #15
 8014d84:	e101      	b.n	8014f8a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014d86:	68fa      	ldr	r2, [r7, #12]
 8014d88:	2101      	movs	r1, #1
 8014d8a:	68b8      	ldr	r0, [r7, #8]
 8014d8c:	f7ff fb60 	bl	8014450 <etharp_find_entry>
 8014d90:	4603      	mov	r3, r0
 8014d92:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014d94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	da02      	bge.n	8014da2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014d9c:	8a7b      	ldrh	r3, [r7, #18]
 8014d9e:	b25b      	sxtb	r3, r3
 8014da0:	e0f3      	b.n	8014f8a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014da2:	8a7b      	ldrh	r3, [r7, #18]
 8014da4:	2b7e      	cmp	r3, #126	; 0x7e
 8014da6:	d906      	bls.n	8014db6 <etharp_query+0x7e>
 8014da8:	4b7a      	ldr	r3, [pc, #488]	; (8014f94 <etharp_query+0x25c>)
 8014daa:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014dae:	497a      	ldr	r1, [pc, #488]	; (8014f98 <etharp_query+0x260>)
 8014db0:	487a      	ldr	r0, [pc, #488]	; (8014f9c <etharp_query+0x264>)
 8014db2:	f002 fa09 	bl	80171c8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014db6:	8a7b      	ldrh	r3, [r7, #18]
 8014db8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014dba:	7c7a      	ldrb	r2, [r7, #17]
 8014dbc:	4978      	ldr	r1, [pc, #480]	; (8014fa0 <etharp_query+0x268>)
 8014dbe:	4613      	mov	r3, r2
 8014dc0:	005b      	lsls	r3, r3, #1
 8014dc2:	4413      	add	r3, r2
 8014dc4:	00db      	lsls	r3, r3, #3
 8014dc6:	440b      	add	r3, r1
 8014dc8:	3314      	adds	r3, #20
 8014dca:	781b      	ldrb	r3, [r3, #0]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d115      	bne.n	8014dfc <etharp_query+0xc4>
    is_new_entry = 1;
 8014dd0:	2301      	movs	r3, #1
 8014dd2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014dd4:	7c7a      	ldrb	r2, [r7, #17]
 8014dd6:	4972      	ldr	r1, [pc, #456]	; (8014fa0 <etharp_query+0x268>)
 8014dd8:	4613      	mov	r3, r2
 8014dda:	005b      	lsls	r3, r3, #1
 8014ddc:	4413      	add	r3, r2
 8014dde:	00db      	lsls	r3, r3, #3
 8014de0:	440b      	add	r3, r1
 8014de2:	3314      	adds	r3, #20
 8014de4:	2201      	movs	r2, #1
 8014de6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014de8:	7c7a      	ldrb	r2, [r7, #17]
 8014dea:	496d      	ldr	r1, [pc, #436]	; (8014fa0 <etharp_query+0x268>)
 8014dec:	4613      	mov	r3, r2
 8014dee:	005b      	lsls	r3, r3, #1
 8014df0:	4413      	add	r3, r2
 8014df2:	00db      	lsls	r3, r3, #3
 8014df4:	440b      	add	r3, r1
 8014df6:	3308      	adds	r3, #8
 8014df8:	68fa      	ldr	r2, [r7, #12]
 8014dfa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014dfc:	7c7a      	ldrb	r2, [r7, #17]
 8014dfe:	4968      	ldr	r1, [pc, #416]	; (8014fa0 <etharp_query+0x268>)
 8014e00:	4613      	mov	r3, r2
 8014e02:	005b      	lsls	r3, r3, #1
 8014e04:	4413      	add	r3, r2
 8014e06:	00db      	lsls	r3, r3, #3
 8014e08:	440b      	add	r3, r1
 8014e0a:	3314      	adds	r3, #20
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	2b01      	cmp	r3, #1
 8014e10:	d011      	beq.n	8014e36 <etharp_query+0xfe>
 8014e12:	7c7a      	ldrb	r2, [r7, #17]
 8014e14:	4962      	ldr	r1, [pc, #392]	; (8014fa0 <etharp_query+0x268>)
 8014e16:	4613      	mov	r3, r2
 8014e18:	005b      	lsls	r3, r3, #1
 8014e1a:	4413      	add	r3, r2
 8014e1c:	00db      	lsls	r3, r3, #3
 8014e1e:	440b      	add	r3, r1
 8014e20:	3314      	adds	r3, #20
 8014e22:	781b      	ldrb	r3, [r3, #0]
 8014e24:	2b01      	cmp	r3, #1
 8014e26:	d806      	bhi.n	8014e36 <etharp_query+0xfe>
 8014e28:	4b5a      	ldr	r3, [pc, #360]	; (8014f94 <etharp_query+0x25c>)
 8014e2a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014e2e:	495d      	ldr	r1, [pc, #372]	; (8014fa4 <etharp_query+0x26c>)
 8014e30:	485a      	ldr	r0, [pc, #360]	; (8014f9c <etharp_query+0x264>)
 8014e32:	f002 f9c9 	bl	80171c8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014e36:	6a3b      	ldr	r3, [r7, #32]
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d102      	bne.n	8014e42 <etharp_query+0x10a>
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d10c      	bne.n	8014e5c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014e42:	68b9      	ldr	r1, [r7, #8]
 8014e44:	68f8      	ldr	r0, [r7, #12]
 8014e46:	f000 f963 	bl	8015110 <etharp_request>
 8014e4a:	4603      	mov	r3, r0
 8014e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d102      	bne.n	8014e5c <etharp_query+0x124>
      return result;
 8014e56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014e5a:	e096      	b.n	8014f8a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d106      	bne.n	8014e70 <etharp_query+0x138>
 8014e62:	4b4c      	ldr	r3, [pc, #304]	; (8014f94 <etharp_query+0x25c>)
 8014e64:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014e68:	494f      	ldr	r1, [pc, #316]	; (8014fa8 <etharp_query+0x270>)
 8014e6a:	484c      	ldr	r0, [pc, #304]	; (8014f9c <etharp_query+0x264>)
 8014e6c:	f002 f9ac 	bl	80171c8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014e70:	7c7a      	ldrb	r2, [r7, #17]
 8014e72:	494b      	ldr	r1, [pc, #300]	; (8014fa0 <etharp_query+0x268>)
 8014e74:	4613      	mov	r3, r2
 8014e76:	005b      	lsls	r3, r3, #1
 8014e78:	4413      	add	r3, r2
 8014e7a:	00db      	lsls	r3, r3, #3
 8014e7c:	440b      	add	r3, r1
 8014e7e:	3314      	adds	r3, #20
 8014e80:	781b      	ldrb	r3, [r3, #0]
 8014e82:	2b01      	cmp	r3, #1
 8014e84:	d917      	bls.n	8014eb6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014e86:	4a49      	ldr	r2, [pc, #292]	; (8014fac <etharp_query+0x274>)
 8014e88:	7c7b      	ldrb	r3, [r7, #17]
 8014e8a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014e8c:	7c7a      	ldrb	r2, [r7, #17]
 8014e8e:	4613      	mov	r3, r2
 8014e90:	005b      	lsls	r3, r3, #1
 8014e92:	4413      	add	r3, r2
 8014e94:	00db      	lsls	r3, r3, #3
 8014e96:	3308      	adds	r3, #8
 8014e98:	4a41      	ldr	r2, [pc, #260]	; (8014fa0 <etharp_query+0x268>)
 8014e9a:	4413      	add	r3, r2
 8014e9c:	3304      	adds	r3, #4
 8014e9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014ea2:	9200      	str	r2, [sp, #0]
 8014ea4:	697a      	ldr	r2, [r7, #20]
 8014ea6:	6879      	ldr	r1, [r7, #4]
 8014ea8:	68f8      	ldr	r0, [r7, #12]
 8014eaa:	f001 fc75 	bl	8016798 <ethernet_output>
 8014eae:	4603      	mov	r3, r0
 8014eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014eb4:	e067      	b.n	8014f86 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014eb6:	7c7a      	ldrb	r2, [r7, #17]
 8014eb8:	4939      	ldr	r1, [pc, #228]	; (8014fa0 <etharp_query+0x268>)
 8014eba:	4613      	mov	r3, r2
 8014ebc:	005b      	lsls	r3, r3, #1
 8014ebe:	4413      	add	r3, r2
 8014ec0:	00db      	lsls	r3, r3, #3
 8014ec2:	440b      	add	r3, r1
 8014ec4:	3314      	adds	r3, #20
 8014ec6:	781b      	ldrb	r3, [r3, #0]
 8014ec8:	2b01      	cmp	r3, #1
 8014eca:	d15c      	bne.n	8014f86 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014ecc:	2300      	movs	r3, #0
 8014ece:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ed4:	e01c      	b.n	8014f10 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014ed6:	69fb      	ldr	r3, [r7, #28]
 8014ed8:	895a      	ldrh	r2, [r3, #10]
 8014eda:	69fb      	ldr	r3, [r7, #28]
 8014edc:	891b      	ldrh	r3, [r3, #8]
 8014ede:	429a      	cmp	r2, r3
 8014ee0:	d10a      	bne.n	8014ef8 <etharp_query+0x1c0>
 8014ee2:	69fb      	ldr	r3, [r7, #28]
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d006      	beq.n	8014ef8 <etharp_query+0x1c0>
 8014eea:	4b2a      	ldr	r3, [pc, #168]	; (8014f94 <etharp_query+0x25c>)
 8014eec:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014ef0:	492f      	ldr	r1, [pc, #188]	; (8014fb0 <etharp_query+0x278>)
 8014ef2:	482a      	ldr	r0, [pc, #168]	; (8014f9c <etharp_query+0x264>)
 8014ef4:	f002 f968 	bl	80171c8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014ef8:	69fb      	ldr	r3, [r7, #28]
 8014efa:	7b1b      	ldrb	r3, [r3, #12]
 8014efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d002      	beq.n	8014f0a <etharp_query+0x1d2>
        copy_needed = 1;
 8014f04:	2301      	movs	r3, #1
 8014f06:	61bb      	str	r3, [r7, #24]
        break;
 8014f08:	e005      	b.n	8014f16 <etharp_query+0x1de>
      }
      p = p->next;
 8014f0a:	69fb      	ldr	r3, [r7, #28]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014f10:	69fb      	ldr	r3, [r7, #28]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d1df      	bne.n	8014ed6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014f16:	69bb      	ldr	r3, [r7, #24]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d007      	beq.n	8014f2c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014f1c:	687a      	ldr	r2, [r7, #4]
 8014f1e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014f22:	200e      	movs	r0, #14
 8014f24:	f7f9 f996 	bl	800e254 <pbuf_clone>
 8014f28:	61f8      	str	r0, [r7, #28]
 8014f2a:	e004      	b.n	8014f36 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014f30:	69f8      	ldr	r0, [r7, #28]
 8014f32:	f7f8 ff31 	bl	800dd98 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014f36:	69fb      	ldr	r3, [r7, #28]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d021      	beq.n	8014f80 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014f3c:	7c7a      	ldrb	r2, [r7, #17]
 8014f3e:	4918      	ldr	r1, [pc, #96]	; (8014fa0 <etharp_query+0x268>)
 8014f40:	4613      	mov	r3, r2
 8014f42:	005b      	lsls	r3, r3, #1
 8014f44:	4413      	add	r3, r2
 8014f46:	00db      	lsls	r3, r3, #3
 8014f48:	440b      	add	r3, r1
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d00a      	beq.n	8014f66 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014f50:	7c7a      	ldrb	r2, [r7, #17]
 8014f52:	4913      	ldr	r1, [pc, #76]	; (8014fa0 <etharp_query+0x268>)
 8014f54:	4613      	mov	r3, r2
 8014f56:	005b      	lsls	r3, r3, #1
 8014f58:	4413      	add	r3, r2
 8014f5a:	00db      	lsls	r3, r3, #3
 8014f5c:	440b      	add	r3, r1
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	4618      	mov	r0, r3
 8014f62:	f7f8 fe79 	bl	800dc58 <pbuf_free>
      }
      arp_table[i].q = p;
 8014f66:	7c7a      	ldrb	r2, [r7, #17]
 8014f68:	490d      	ldr	r1, [pc, #52]	; (8014fa0 <etharp_query+0x268>)
 8014f6a:	4613      	mov	r3, r2
 8014f6c:	005b      	lsls	r3, r3, #1
 8014f6e:	4413      	add	r3, r2
 8014f70:	00db      	lsls	r3, r3, #3
 8014f72:	440b      	add	r3, r1
 8014f74:	69fa      	ldr	r2, [r7, #28]
 8014f76:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014f78:	2300      	movs	r3, #0
 8014f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f7e:	e002      	b.n	8014f86 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014f80:	23ff      	movs	r3, #255	; 0xff
 8014f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014f86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	3728      	adds	r7, #40	; 0x28
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}
 8014f92:	bf00      	nop
 8014f94:	0801a59c 	.word	0x0801a59c
 8014f98:	0801a748 	.word	0x0801a748
 8014f9c:	0801a614 	.word	0x0801a614
 8014fa0:	20009028 	.word	0x20009028
 8014fa4:	0801a758 	.word	0x0801a758
 8014fa8:	0801a73c 	.word	0x0801a73c
 8014fac:	20009118 	.word	0x20009118
 8014fb0:	0801a780 	.word	0x0801a780

08014fb4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b08a      	sub	sp, #40	; 0x28
 8014fb8:	af02      	add	r7, sp, #8
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	60b9      	str	r1, [r7, #8]
 8014fbe:	607a      	str	r2, [r7, #4]
 8014fc0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d106      	bne.n	8014fda <etharp_raw+0x26>
 8014fcc:	4b3a      	ldr	r3, [pc, #232]	; (80150b8 <etharp_raw+0x104>)
 8014fce:	f240 4257 	movw	r2, #1111	; 0x457
 8014fd2:	493a      	ldr	r1, [pc, #232]	; (80150bc <etharp_raw+0x108>)
 8014fd4:	483a      	ldr	r0, [pc, #232]	; (80150c0 <etharp_raw+0x10c>)
 8014fd6:	f002 f8f7 	bl	80171c8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014fda:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014fde:	211c      	movs	r1, #28
 8014fe0:	200e      	movs	r0, #14
 8014fe2:	f7f8 fb55 	bl	800d690 <pbuf_alloc>
 8014fe6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014fe8:	69bb      	ldr	r3, [r7, #24]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d102      	bne.n	8014ff4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ff2:	e05d      	b.n	80150b0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014ff4:	69bb      	ldr	r3, [r7, #24]
 8014ff6:	895b      	ldrh	r3, [r3, #10]
 8014ff8:	2b1b      	cmp	r3, #27
 8014ffa:	d806      	bhi.n	801500a <etharp_raw+0x56>
 8014ffc:	4b2e      	ldr	r3, [pc, #184]	; (80150b8 <etharp_raw+0x104>)
 8014ffe:	f240 4262 	movw	r2, #1122	; 0x462
 8015002:	4930      	ldr	r1, [pc, #192]	; (80150c4 <etharp_raw+0x110>)
 8015004:	482e      	ldr	r0, [pc, #184]	; (80150c0 <etharp_raw+0x10c>)
 8015006:	f002 f8df 	bl	80171c8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801500a:	69bb      	ldr	r3, [r7, #24]
 801500c:	685b      	ldr	r3, [r3, #4]
 801500e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015010:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015012:	4618      	mov	r0, r3
 8015014:	f7f7 fac2 	bl	800c59c <lwip_htons>
 8015018:	4603      	mov	r3, r0
 801501a:	461a      	mov	r2, r3
 801501c:	697b      	ldr	r3, [r7, #20]
 801501e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015026:	2b06      	cmp	r3, #6
 8015028:	d006      	beq.n	8015038 <etharp_raw+0x84>
 801502a:	4b23      	ldr	r3, [pc, #140]	; (80150b8 <etharp_raw+0x104>)
 801502c:	f240 4269 	movw	r2, #1129	; 0x469
 8015030:	4925      	ldr	r1, [pc, #148]	; (80150c8 <etharp_raw+0x114>)
 8015032:	4823      	ldr	r0, [pc, #140]	; (80150c0 <etharp_raw+0x10c>)
 8015034:	f002 f8c8 	bl	80171c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015038:	697b      	ldr	r3, [r7, #20]
 801503a:	3308      	adds	r3, #8
 801503c:	2206      	movs	r2, #6
 801503e:	6839      	ldr	r1, [r7, #0]
 8015040:	4618      	mov	r0, r3
 8015042:	f002 f8ab 	bl	801719c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015046:	697b      	ldr	r3, [r7, #20]
 8015048:	3312      	adds	r3, #18
 801504a:	2206      	movs	r2, #6
 801504c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801504e:	4618      	mov	r0, r3
 8015050:	f002 f8a4 	bl	801719c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015054:	697b      	ldr	r3, [r7, #20]
 8015056:	330e      	adds	r3, #14
 8015058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801505a:	6812      	ldr	r2, [r2, #0]
 801505c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801505e:	697b      	ldr	r3, [r7, #20]
 8015060:	3318      	adds	r3, #24
 8015062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015064:	6812      	ldr	r2, [r2, #0]
 8015066:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015068:	697b      	ldr	r3, [r7, #20]
 801506a:	2200      	movs	r2, #0
 801506c:	701a      	strb	r2, [r3, #0]
 801506e:	2200      	movs	r2, #0
 8015070:	f042 0201 	orr.w	r2, r2, #1
 8015074:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015076:	697b      	ldr	r3, [r7, #20]
 8015078:	2200      	movs	r2, #0
 801507a:	f042 0208 	orr.w	r2, r2, #8
 801507e:	709a      	strb	r2, [r3, #2]
 8015080:	2200      	movs	r2, #0
 8015082:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015084:	697b      	ldr	r3, [r7, #20]
 8015086:	2206      	movs	r2, #6
 8015088:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	2204      	movs	r2, #4
 801508e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015090:	f640 0306 	movw	r3, #2054	; 0x806
 8015094:	9300      	str	r3, [sp, #0]
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	68ba      	ldr	r2, [r7, #8]
 801509a:	69b9      	ldr	r1, [r7, #24]
 801509c:	68f8      	ldr	r0, [r7, #12]
 801509e:	f001 fb7b 	bl	8016798 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80150a2:	69b8      	ldr	r0, [r7, #24]
 80150a4:	f7f8 fdd8 	bl	800dc58 <pbuf_free>
  p = NULL;
 80150a8:	2300      	movs	r3, #0
 80150aa:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80150ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	3720      	adds	r7, #32
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bd80      	pop	{r7, pc}
 80150b8:	0801a59c 	.word	0x0801a59c
 80150bc:	0801a6ec 	.word	0x0801a6ec
 80150c0:	0801a614 	.word	0x0801a614
 80150c4:	0801a79c 	.word	0x0801a79c
 80150c8:	0801a7d0 	.word	0x0801a7d0

080150cc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b088      	sub	sp, #32
 80150d0:	af04      	add	r7, sp, #16
 80150d2:	60f8      	str	r0, [r7, #12]
 80150d4:	60b9      	str	r1, [r7, #8]
 80150d6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80150d8:	68fb      	ldr	r3, [r7, #12]
 80150da:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80150e8:	2201      	movs	r2, #1
 80150ea:	9203      	str	r2, [sp, #12]
 80150ec:	68ba      	ldr	r2, [r7, #8]
 80150ee:	9202      	str	r2, [sp, #8]
 80150f0:	4a06      	ldr	r2, [pc, #24]	; (801510c <etharp_request_dst+0x40>)
 80150f2:	9201      	str	r2, [sp, #4]
 80150f4:	9300      	str	r3, [sp, #0]
 80150f6:	4603      	mov	r3, r0
 80150f8:	687a      	ldr	r2, [r7, #4]
 80150fa:	68f8      	ldr	r0, [r7, #12]
 80150fc:	f7ff ff5a 	bl	8014fb4 <etharp_raw>
 8015100:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015102:	4618      	mov	r0, r3
 8015104:	3710      	adds	r7, #16
 8015106:	46bd      	mov	sp, r7
 8015108:	bd80      	pop	{r7, pc}
 801510a:	bf00      	nop
 801510c:	0801ad68 	.word	0x0801ad68

08015110 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
 8015118:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801511a:	4a05      	ldr	r2, [pc, #20]	; (8015130 <etharp_request+0x20>)
 801511c:	6839      	ldr	r1, [r7, #0]
 801511e:	6878      	ldr	r0, [r7, #4]
 8015120:	f7ff ffd4 	bl	80150cc <etharp_request_dst>
 8015124:	4603      	mov	r3, r0
}
 8015126:	4618      	mov	r0, r3
 8015128:	3708      	adds	r7, #8
 801512a:	46bd      	mov	sp, r7
 801512c:	bd80      	pop	{r7, pc}
 801512e:	bf00      	nop
 8015130:	0801ad60 	.word	0x0801ad60

08015134 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b08e      	sub	sp, #56	; 0x38
 8015138:	af04      	add	r7, sp, #16
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801513e:	4b79      	ldr	r3, [pc, #484]	; (8015324 <icmp_input+0x1f0>)
 8015140:	689b      	ldr	r3, [r3, #8]
 8015142:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015146:	781b      	ldrb	r3, [r3, #0]
 8015148:	f003 030f 	and.w	r3, r3, #15
 801514c:	b2db      	uxtb	r3, r3
 801514e:	009b      	lsls	r3, r3, #2
 8015150:	b2db      	uxtb	r3, r3
 8015152:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015154:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015156:	2b13      	cmp	r3, #19
 8015158:	f240 80cd 	bls.w	80152f6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	895b      	ldrh	r3, [r3, #10]
 8015160:	2b03      	cmp	r3, #3
 8015162:	f240 80ca 	bls.w	80152fa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	685b      	ldr	r3, [r3, #4]
 801516a:	781b      	ldrb	r3, [r3, #0]
 801516c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015170:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015174:	2b00      	cmp	r3, #0
 8015176:	f000 80b7 	beq.w	80152e8 <icmp_input+0x1b4>
 801517a:	2b08      	cmp	r3, #8
 801517c:	f040 80b7 	bne.w	80152ee <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015180:	4b69      	ldr	r3, [pc, #420]	; (8015328 <icmp_input+0x1f4>)
 8015182:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015184:	4b67      	ldr	r3, [pc, #412]	; (8015324 <icmp_input+0x1f0>)
 8015186:	695b      	ldr	r3, [r3, #20]
 8015188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801518c:	2be0      	cmp	r3, #224	; 0xe0
 801518e:	f000 80bb 	beq.w	8015308 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015192:	4b64      	ldr	r3, [pc, #400]	; (8015324 <icmp_input+0x1f0>)
 8015194:	695b      	ldr	r3, [r3, #20]
 8015196:	4a63      	ldr	r2, [pc, #396]	; (8015324 <icmp_input+0x1f0>)
 8015198:	6812      	ldr	r2, [r2, #0]
 801519a:	4611      	mov	r1, r2
 801519c:	4618      	mov	r0, r3
 801519e:	f000 fbed 	bl	801597c <ip4_addr_isbroadcast_u32>
 80151a2:	4603      	mov	r3, r0
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	f040 80b1 	bne.w	801530c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	891b      	ldrh	r3, [r3, #8]
 80151ae:	2b07      	cmp	r3, #7
 80151b0:	f240 80a5 	bls.w	80152fe <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80151b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151b6:	330e      	adds	r3, #14
 80151b8:	4619      	mov	r1, r3
 80151ba:	6878      	ldr	r0, [r7, #4]
 80151bc:	f7f8 fcb6 	bl	800db2c <pbuf_add_header>
 80151c0:	4603      	mov	r3, r0
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d04b      	beq.n	801525e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	891a      	ldrh	r2, [r3, #8]
 80151ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151cc:	4413      	add	r3, r2
 80151ce:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	891b      	ldrh	r3, [r3, #8]
 80151d4:	8b7a      	ldrh	r2, [r7, #26]
 80151d6:	429a      	cmp	r2, r3
 80151d8:	f0c0 809a 	bcc.w	8015310 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80151dc:	8b7b      	ldrh	r3, [r7, #26]
 80151de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80151e2:	4619      	mov	r1, r3
 80151e4:	200e      	movs	r0, #14
 80151e6:	f7f8 fa53 	bl	800d690 <pbuf_alloc>
 80151ea:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80151ec:	697b      	ldr	r3, [r7, #20]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	f000 8090 	beq.w	8015314 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80151f4:	697b      	ldr	r3, [r7, #20]
 80151f6:	895b      	ldrh	r3, [r3, #10]
 80151f8:	461a      	mov	r2, r3
 80151fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151fc:	3308      	adds	r3, #8
 80151fe:	429a      	cmp	r2, r3
 8015200:	d203      	bcs.n	801520a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015202:	6978      	ldr	r0, [r7, #20]
 8015204:	f7f8 fd28 	bl	800dc58 <pbuf_free>
          goto icmperr;
 8015208:	e085      	b.n	8015316 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801520a:	697b      	ldr	r3, [r7, #20]
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015212:	4618      	mov	r0, r3
 8015214:	f001 ffc2 	bl	801719c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015218:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801521a:	4619      	mov	r1, r3
 801521c:	6978      	ldr	r0, [r7, #20]
 801521e:	f7f8 fc95 	bl	800db4c <pbuf_remove_header>
 8015222:	4603      	mov	r3, r0
 8015224:	2b00      	cmp	r3, #0
 8015226:	d009      	beq.n	801523c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015228:	4b40      	ldr	r3, [pc, #256]	; (801532c <icmp_input+0x1f8>)
 801522a:	22b6      	movs	r2, #182	; 0xb6
 801522c:	4940      	ldr	r1, [pc, #256]	; (8015330 <icmp_input+0x1fc>)
 801522e:	4841      	ldr	r0, [pc, #260]	; (8015334 <icmp_input+0x200>)
 8015230:	f001 ffca 	bl	80171c8 <iprintf>
          pbuf_free(r);
 8015234:	6978      	ldr	r0, [r7, #20]
 8015236:	f7f8 fd0f 	bl	800dc58 <pbuf_free>
          goto icmperr;
 801523a:	e06c      	b.n	8015316 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801523c:	6879      	ldr	r1, [r7, #4]
 801523e:	6978      	ldr	r0, [r7, #20]
 8015240:	f7f8 fe32 	bl	800dea8 <pbuf_copy>
 8015244:	4603      	mov	r3, r0
 8015246:	2b00      	cmp	r3, #0
 8015248:	d003      	beq.n	8015252 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801524a:	6978      	ldr	r0, [r7, #20]
 801524c:	f7f8 fd04 	bl	800dc58 <pbuf_free>
          goto icmperr;
 8015250:	e061      	b.n	8015316 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8015252:	6878      	ldr	r0, [r7, #4]
 8015254:	f7f8 fd00 	bl	800dc58 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	607b      	str	r3, [r7, #4]
 801525c:	e00f      	b.n	801527e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801525e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015260:	330e      	adds	r3, #14
 8015262:	4619      	mov	r1, r3
 8015264:	6878      	ldr	r0, [r7, #4]
 8015266:	f7f8 fc71 	bl	800db4c <pbuf_remove_header>
 801526a:	4603      	mov	r3, r0
 801526c:	2b00      	cmp	r3, #0
 801526e:	d006      	beq.n	801527e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015270:	4b2e      	ldr	r3, [pc, #184]	; (801532c <icmp_input+0x1f8>)
 8015272:	22c7      	movs	r2, #199	; 0xc7
 8015274:	4930      	ldr	r1, [pc, #192]	; (8015338 <icmp_input+0x204>)
 8015276:	482f      	ldr	r0, [pc, #188]	; (8015334 <icmp_input+0x200>)
 8015278:	f001 ffa6 	bl	80171c8 <iprintf>
          goto icmperr;
 801527c:	e04b      	b.n	8015316 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	685b      	ldr	r3, [r3, #4]
 8015282:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015284:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015286:	4619      	mov	r1, r3
 8015288:	6878      	ldr	r0, [r7, #4]
 801528a:	f7f8 fc4f 	bl	800db2c <pbuf_add_header>
 801528e:	4603      	mov	r3, r0
 8015290:	2b00      	cmp	r3, #0
 8015292:	d12b      	bne.n	80152ec <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	685b      	ldr	r3, [r3, #4]
 8015298:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801529a:	69fb      	ldr	r3, [r7, #28]
 801529c:	681a      	ldr	r2, [r3, #0]
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80152a2:	4b20      	ldr	r3, [pc, #128]	; (8015324 <icmp_input+0x1f0>)
 80152a4:	691a      	ldr	r2, [r3, #16]
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80152aa:	693b      	ldr	r3, [r7, #16]
 80152ac:	2200      	movs	r2, #0
 80152ae:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80152b0:	693b      	ldr	r3, [r7, #16]
 80152b2:	2200      	movs	r2, #0
 80152b4:	709a      	strb	r2, [r3, #2]
 80152b6:	2200      	movs	r2, #0
 80152b8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	22ff      	movs	r2, #255	; 0xff
 80152be:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	2200      	movs	r2, #0
 80152c4:	729a      	strb	r2, [r3, #10]
 80152c6:	2200      	movs	r2, #0
 80152c8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80152ca:	683b      	ldr	r3, [r7, #0]
 80152cc:	9302      	str	r3, [sp, #8]
 80152ce:	2301      	movs	r3, #1
 80152d0:	9301      	str	r3, [sp, #4]
 80152d2:	2300      	movs	r3, #0
 80152d4:	9300      	str	r3, [sp, #0]
 80152d6:	23ff      	movs	r3, #255	; 0xff
 80152d8:	2200      	movs	r2, #0
 80152da:	69f9      	ldr	r1, [r7, #28]
 80152dc:	6878      	ldr	r0, [r7, #4]
 80152de:	f000 fa75 	bl	80157cc <ip4_output_if>
 80152e2:	4603      	mov	r3, r0
 80152e4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80152e6:	e001      	b.n	80152ec <icmp_input+0x1b8>
      break;
 80152e8:	bf00      	nop
 80152ea:	e000      	b.n	80152ee <icmp_input+0x1ba>
      break;
 80152ec:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80152ee:	6878      	ldr	r0, [r7, #4]
 80152f0:	f7f8 fcb2 	bl	800dc58 <pbuf_free>
  return;
 80152f4:	e013      	b.n	801531e <icmp_input+0x1ea>
    goto lenerr;
 80152f6:	bf00      	nop
 80152f8:	e002      	b.n	8015300 <icmp_input+0x1cc>
    goto lenerr;
 80152fa:	bf00      	nop
 80152fc:	e000      	b.n	8015300 <icmp_input+0x1cc>
        goto lenerr;
 80152fe:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015300:	6878      	ldr	r0, [r7, #4]
 8015302:	f7f8 fca9 	bl	800dc58 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015306:	e00a      	b.n	801531e <icmp_input+0x1ea>
        goto icmperr;
 8015308:	bf00      	nop
 801530a:	e004      	b.n	8015316 <icmp_input+0x1e2>
        goto icmperr;
 801530c:	bf00      	nop
 801530e:	e002      	b.n	8015316 <icmp_input+0x1e2>
          goto icmperr;
 8015310:	bf00      	nop
 8015312:	e000      	b.n	8015316 <icmp_input+0x1e2>
          goto icmperr;
 8015314:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015316:	6878      	ldr	r0, [r7, #4]
 8015318:	f7f8 fc9e 	bl	800dc58 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801531c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801531e:	3728      	adds	r7, #40	; 0x28
 8015320:	46bd      	mov	sp, r7
 8015322:	bd80      	pop	{r7, pc}
 8015324:	20005a58 	.word	0x20005a58
 8015328:	20005a6c 	.word	0x20005a6c
 801532c:	0801a814 	.word	0x0801a814
 8015330:	0801a84c 	.word	0x0801a84c
 8015334:	0801a884 	.word	0x0801a884
 8015338:	0801a8ac 	.word	0x0801a8ac

0801533c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b082      	sub	sp, #8
 8015340:	af00      	add	r7, sp, #0
 8015342:	6078      	str	r0, [r7, #4]
 8015344:	460b      	mov	r3, r1
 8015346:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015348:	78fb      	ldrb	r3, [r7, #3]
 801534a:	461a      	mov	r2, r3
 801534c:	2103      	movs	r1, #3
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f000 f814 	bl	801537c <icmp_send_response>
}
 8015354:	bf00      	nop
 8015356:	3708      	adds	r7, #8
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}

0801535c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
 8015364:	460b      	mov	r3, r1
 8015366:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015368:	78fb      	ldrb	r3, [r7, #3]
 801536a:	461a      	mov	r2, r3
 801536c:	210b      	movs	r1, #11
 801536e:	6878      	ldr	r0, [r7, #4]
 8015370:	f000 f804 	bl	801537c <icmp_send_response>
}
 8015374:	bf00      	nop
 8015376:	3708      	adds	r7, #8
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}

0801537c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b08c      	sub	sp, #48	; 0x30
 8015380:	af04      	add	r7, sp, #16
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	460b      	mov	r3, r1
 8015386:	70fb      	strb	r3, [r7, #3]
 8015388:	4613      	mov	r3, r2
 801538a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801538c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015390:	2124      	movs	r1, #36	; 0x24
 8015392:	2022      	movs	r0, #34	; 0x22
 8015394:	f7f8 f97c 	bl	800d690 <pbuf_alloc>
 8015398:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801539a:	69fb      	ldr	r3, [r7, #28]
 801539c:	2b00      	cmp	r3, #0
 801539e:	d04c      	beq.n	801543a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80153a0:	69fb      	ldr	r3, [r7, #28]
 80153a2:	895b      	ldrh	r3, [r3, #10]
 80153a4:	2b23      	cmp	r3, #35	; 0x23
 80153a6:	d806      	bhi.n	80153b6 <icmp_send_response+0x3a>
 80153a8:	4b26      	ldr	r3, [pc, #152]	; (8015444 <icmp_send_response+0xc8>)
 80153aa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80153ae:	4926      	ldr	r1, [pc, #152]	; (8015448 <icmp_send_response+0xcc>)
 80153b0:	4826      	ldr	r0, [pc, #152]	; (801544c <icmp_send_response+0xd0>)
 80153b2:	f001 ff09 	bl	80171c8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	685b      	ldr	r3, [r3, #4]
 80153ba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80153bc:	69fb      	ldr	r3, [r7, #28]
 80153be:	685b      	ldr	r3, [r3, #4]
 80153c0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	78fa      	ldrb	r2, [r7, #3]
 80153c6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	78ba      	ldrb	r2, [r7, #2]
 80153cc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80153ce:	697b      	ldr	r3, [r7, #20]
 80153d0:	2200      	movs	r2, #0
 80153d2:	711a      	strb	r2, [r3, #4]
 80153d4:	2200      	movs	r2, #0
 80153d6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80153d8:	697b      	ldr	r3, [r7, #20]
 80153da:	2200      	movs	r2, #0
 80153dc:	719a      	strb	r2, [r3, #6]
 80153de:	2200      	movs	r2, #0
 80153e0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80153e2:	69fb      	ldr	r3, [r7, #28]
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	f103 0008 	add.w	r0, r3, #8
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	685b      	ldr	r3, [r3, #4]
 80153ee:	221c      	movs	r2, #28
 80153f0:	4619      	mov	r1, r3
 80153f2:	f001 fed3 	bl	801719c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80153f6:	69bb      	ldr	r3, [r7, #24]
 80153f8:	68db      	ldr	r3, [r3, #12]
 80153fa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80153fc:	f107 030c 	add.w	r3, r7, #12
 8015400:	4618      	mov	r0, r3
 8015402:	f000 f825 	bl	8015450 <ip4_route>
 8015406:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015408:	693b      	ldr	r3, [r7, #16]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d011      	beq.n	8015432 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801540e:	697b      	ldr	r3, [r7, #20]
 8015410:	2200      	movs	r2, #0
 8015412:	709a      	strb	r2, [r3, #2]
 8015414:	2200      	movs	r2, #0
 8015416:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015418:	f107 020c 	add.w	r2, r7, #12
 801541c:	693b      	ldr	r3, [r7, #16]
 801541e:	9302      	str	r3, [sp, #8]
 8015420:	2301      	movs	r3, #1
 8015422:	9301      	str	r3, [sp, #4]
 8015424:	2300      	movs	r3, #0
 8015426:	9300      	str	r3, [sp, #0]
 8015428:	23ff      	movs	r3, #255	; 0xff
 801542a:	2100      	movs	r1, #0
 801542c:	69f8      	ldr	r0, [r7, #28]
 801542e:	f000 f9cd 	bl	80157cc <ip4_output_if>
  }
  pbuf_free(q);
 8015432:	69f8      	ldr	r0, [r7, #28]
 8015434:	f7f8 fc10 	bl	800dc58 <pbuf_free>
 8015438:	e000      	b.n	801543c <icmp_send_response+0xc0>
    return;
 801543a:	bf00      	nop
}
 801543c:	3720      	adds	r7, #32
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}
 8015442:	bf00      	nop
 8015444:	0801a814 	.word	0x0801a814
 8015448:	0801a8e0 	.word	0x0801a8e0
 801544c:	0801a884 	.word	0x0801a884

08015450 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015450:	b480      	push	{r7}
 8015452:	b085      	sub	sp, #20
 8015454:	af00      	add	r7, sp, #0
 8015456:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015458:	4b33      	ldr	r3, [pc, #204]	; (8015528 <ip4_route+0xd8>)
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	60fb      	str	r3, [r7, #12]
 801545e:	e036      	b.n	80154ce <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015466:	f003 0301 	and.w	r3, r3, #1
 801546a:	b2db      	uxtb	r3, r3
 801546c:	2b00      	cmp	r3, #0
 801546e:	d02b      	beq.n	80154c8 <ip4_route+0x78>
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015476:	089b      	lsrs	r3, r3, #2
 8015478:	f003 0301 	and.w	r3, r3, #1
 801547c:	b2db      	uxtb	r3, r3
 801547e:	2b00      	cmp	r3, #0
 8015480:	d022      	beq.n	80154c8 <ip4_route+0x78>
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	3304      	adds	r3, #4
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d01d      	beq.n	80154c8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	681a      	ldr	r2, [r3, #0]
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	3304      	adds	r3, #4
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	405a      	eors	r2, r3
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	3308      	adds	r3, #8
 801549c:	681b      	ldr	r3, [r3, #0]
 801549e:	4013      	ands	r3, r2
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d101      	bne.n	80154a8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	e038      	b.n	801551a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154ae:	f003 0302 	and.w	r3, r3, #2
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d108      	bne.n	80154c8 <ip4_route+0x78>
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	681a      	ldr	r2, [r3, #0]
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	330c      	adds	r3, #12
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	429a      	cmp	r2, r3
 80154c2:	d101      	bne.n	80154c8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	e028      	b.n	801551a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	60fb      	str	r3, [r7, #12]
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d1c5      	bne.n	8015460 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80154d4:	4b15      	ldr	r3, [pc, #84]	; (801552c <ip4_route+0xdc>)
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d01a      	beq.n	8015512 <ip4_route+0xc2>
 80154dc:	4b13      	ldr	r3, [pc, #76]	; (801552c <ip4_route+0xdc>)
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154e4:	f003 0301 	and.w	r3, r3, #1
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d012      	beq.n	8015512 <ip4_route+0xc2>
 80154ec:	4b0f      	ldr	r3, [pc, #60]	; (801552c <ip4_route+0xdc>)
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154f4:	f003 0304 	and.w	r3, r3, #4
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d00a      	beq.n	8015512 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80154fc:	4b0b      	ldr	r3, [pc, #44]	; (801552c <ip4_route+0xdc>)
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	3304      	adds	r3, #4
 8015502:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015504:	2b00      	cmp	r3, #0
 8015506:	d004      	beq.n	8015512 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	b2db      	uxtb	r3, r3
 801550e:	2b7f      	cmp	r3, #127	; 0x7f
 8015510:	d101      	bne.n	8015516 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015512:	2300      	movs	r3, #0
 8015514:	e001      	b.n	801551a <ip4_route+0xca>
  }

  return netif_default;
 8015516:	4b05      	ldr	r3, [pc, #20]	; (801552c <ip4_route+0xdc>)
 8015518:	681b      	ldr	r3, [r3, #0]
}
 801551a:	4618      	mov	r0, r3
 801551c:	3714      	adds	r7, #20
 801551e:	46bd      	mov	sp, r7
 8015520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015524:	4770      	bx	lr
 8015526:	bf00      	nop
 8015528:	20008fbc 	.word	0x20008fbc
 801552c:	20008fc0 	.word	0x20008fc0

08015530 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8015530:	b580      	push	{r7, lr}
 8015532:	b082      	sub	sp, #8
 8015534:	af00      	add	r7, sp, #0
 8015536:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801553e:	f003 0301 	and.w	r3, r3, #1
 8015542:	b2db      	uxtb	r3, r3
 8015544:	2b00      	cmp	r3, #0
 8015546:	d016      	beq.n	8015576 <ip4_input_accept+0x46>
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	3304      	adds	r3, #4
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d011      	beq.n	8015576 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015552:	4b0b      	ldr	r3, [pc, #44]	; (8015580 <ip4_input_accept+0x50>)
 8015554:	695a      	ldr	r2, [r3, #20]
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	3304      	adds	r3, #4
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	429a      	cmp	r2, r3
 801555e:	d008      	beq.n	8015572 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015560:	4b07      	ldr	r3, [pc, #28]	; (8015580 <ip4_input_accept+0x50>)
 8015562:	695b      	ldr	r3, [r3, #20]
 8015564:	6879      	ldr	r1, [r7, #4]
 8015566:	4618      	mov	r0, r3
 8015568:	f000 fa08 	bl	801597c <ip4_addr_isbroadcast_u32>
 801556c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801556e:	2b00      	cmp	r3, #0
 8015570:	d001      	beq.n	8015576 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015572:	2301      	movs	r3, #1
 8015574:	e000      	b.n	8015578 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015576:	2300      	movs	r3, #0
}
 8015578:	4618      	mov	r0, r3
 801557a:	3708      	adds	r7, #8
 801557c:	46bd      	mov	sp, r7
 801557e:	bd80      	pop	{r7, pc}
 8015580:	20005a58 	.word	0x20005a58

08015584 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015584:	b580      	push	{r7, lr}
 8015586:	b086      	sub	sp, #24
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
 801558c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	685b      	ldr	r3, [r3, #4]
 8015592:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015594:	697b      	ldr	r3, [r7, #20]
 8015596:	781b      	ldrb	r3, [r3, #0]
 8015598:	091b      	lsrs	r3, r3, #4
 801559a:	b2db      	uxtb	r3, r3
 801559c:	2b04      	cmp	r3, #4
 801559e:	d004      	beq.n	80155aa <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80155a0:	6878      	ldr	r0, [r7, #4]
 80155a2:	f7f8 fb59 	bl	800dc58 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80155a6:	2300      	movs	r3, #0
 80155a8:	e107      	b.n	80157ba <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	781b      	ldrb	r3, [r3, #0]
 80155ae:	f003 030f 	and.w	r3, r3, #15
 80155b2:	b2db      	uxtb	r3, r3
 80155b4:	009b      	lsls	r3, r3, #2
 80155b6:	b2db      	uxtb	r3, r3
 80155b8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	885b      	ldrh	r3, [r3, #2]
 80155be:	b29b      	uxth	r3, r3
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7f6 ffeb 	bl	800c59c <lwip_htons>
 80155c6:	4603      	mov	r3, r0
 80155c8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	891b      	ldrh	r3, [r3, #8]
 80155ce:	89ba      	ldrh	r2, [r7, #12]
 80155d0:	429a      	cmp	r2, r3
 80155d2:	d204      	bcs.n	80155de <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80155d4:	89bb      	ldrh	r3, [r7, #12]
 80155d6:	4619      	mov	r1, r3
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f7f8 f9b7 	bl	800d94c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	895b      	ldrh	r3, [r3, #10]
 80155e2:	89fa      	ldrh	r2, [r7, #14]
 80155e4:	429a      	cmp	r2, r3
 80155e6:	d807      	bhi.n	80155f8 <ip4_input+0x74>
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	891b      	ldrh	r3, [r3, #8]
 80155ec:	89ba      	ldrh	r2, [r7, #12]
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d802      	bhi.n	80155f8 <ip4_input+0x74>
 80155f2:	89fb      	ldrh	r3, [r7, #14]
 80155f4:	2b13      	cmp	r3, #19
 80155f6:	d804      	bhi.n	8015602 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80155f8:	6878      	ldr	r0, [r7, #4]
 80155fa:	f7f8 fb2d 	bl	800dc58 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80155fe:	2300      	movs	r3, #0
 8015600:	e0db      	b.n	80157ba <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015602:	697b      	ldr	r3, [r7, #20]
 8015604:	691b      	ldr	r3, [r3, #16]
 8015606:	4a6f      	ldr	r2, [pc, #444]	; (80157c4 <ip4_input+0x240>)
 8015608:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801560a:	697b      	ldr	r3, [r7, #20]
 801560c:	68db      	ldr	r3, [r3, #12]
 801560e:	4a6d      	ldr	r2, [pc, #436]	; (80157c4 <ip4_input+0x240>)
 8015610:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015612:	4b6c      	ldr	r3, [pc, #432]	; (80157c4 <ip4_input+0x240>)
 8015614:	695b      	ldr	r3, [r3, #20]
 8015616:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801561a:	2be0      	cmp	r3, #224	; 0xe0
 801561c:	d112      	bne.n	8015644 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801561e:	683b      	ldr	r3, [r7, #0]
 8015620:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015624:	f003 0301 	and.w	r3, r3, #1
 8015628:	b2db      	uxtb	r3, r3
 801562a:	2b00      	cmp	r3, #0
 801562c:	d007      	beq.n	801563e <ip4_input+0xba>
 801562e:	683b      	ldr	r3, [r7, #0]
 8015630:	3304      	adds	r3, #4
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d002      	beq.n	801563e <ip4_input+0xba>
      netif = inp;
 8015638:	683b      	ldr	r3, [r7, #0]
 801563a:	613b      	str	r3, [r7, #16]
 801563c:	e02a      	b.n	8015694 <ip4_input+0x110>
    } else {
      netif = NULL;
 801563e:	2300      	movs	r3, #0
 8015640:	613b      	str	r3, [r7, #16]
 8015642:	e027      	b.n	8015694 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015644:	6838      	ldr	r0, [r7, #0]
 8015646:	f7ff ff73 	bl	8015530 <ip4_input_accept>
 801564a:	4603      	mov	r3, r0
 801564c:	2b00      	cmp	r3, #0
 801564e:	d002      	beq.n	8015656 <ip4_input+0xd2>
      netif = inp;
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	613b      	str	r3, [r7, #16]
 8015654:	e01e      	b.n	8015694 <ip4_input+0x110>
    } else {
      netif = NULL;
 8015656:	2300      	movs	r3, #0
 8015658:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801565a:	4b5a      	ldr	r3, [pc, #360]	; (80157c4 <ip4_input+0x240>)
 801565c:	695b      	ldr	r3, [r3, #20]
 801565e:	b2db      	uxtb	r3, r3
 8015660:	2b7f      	cmp	r3, #127	; 0x7f
 8015662:	d017      	beq.n	8015694 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015664:	4b58      	ldr	r3, [pc, #352]	; (80157c8 <ip4_input+0x244>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	613b      	str	r3, [r7, #16]
 801566a:	e00e      	b.n	801568a <ip4_input+0x106>
          if (netif == inp) {
 801566c:	693a      	ldr	r2, [r7, #16]
 801566e:	683b      	ldr	r3, [r7, #0]
 8015670:	429a      	cmp	r2, r3
 8015672:	d006      	beq.n	8015682 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015674:	6938      	ldr	r0, [r7, #16]
 8015676:	f7ff ff5b 	bl	8015530 <ip4_input_accept>
 801567a:	4603      	mov	r3, r0
 801567c:	2b00      	cmp	r3, #0
 801567e:	d108      	bne.n	8015692 <ip4_input+0x10e>
 8015680:	e000      	b.n	8015684 <ip4_input+0x100>
            continue;
 8015682:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015684:	693b      	ldr	r3, [r7, #16]
 8015686:	681b      	ldr	r3, [r3, #0]
 8015688:	613b      	str	r3, [r7, #16]
 801568a:	693b      	ldr	r3, [r7, #16]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d1ed      	bne.n	801566c <ip4_input+0xe8>
 8015690:	e000      	b.n	8015694 <ip4_input+0x110>
            break;
 8015692:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015694:	4b4b      	ldr	r3, [pc, #300]	; (80157c4 <ip4_input+0x240>)
 8015696:	691b      	ldr	r3, [r3, #16]
 8015698:	6839      	ldr	r1, [r7, #0]
 801569a:	4618      	mov	r0, r3
 801569c:	f000 f96e 	bl	801597c <ip4_addr_isbroadcast_u32>
 80156a0:	4603      	mov	r3, r0
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d105      	bne.n	80156b2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80156a6:	4b47      	ldr	r3, [pc, #284]	; (80157c4 <ip4_input+0x240>)
 80156a8:	691b      	ldr	r3, [r3, #16]
 80156aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80156ae:	2be0      	cmp	r3, #224	; 0xe0
 80156b0:	d104      	bne.n	80156bc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	f7f8 fad0 	bl	800dc58 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80156b8:	2300      	movs	r3, #0
 80156ba:	e07e      	b.n	80157ba <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80156bc:	693b      	ldr	r3, [r7, #16]
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d104      	bne.n	80156cc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80156c2:	6878      	ldr	r0, [r7, #4]
 80156c4:	f7f8 fac8 	bl	800dc58 <pbuf_free>
    return ERR_OK;
 80156c8:	2300      	movs	r3, #0
 80156ca:	e076      	b.n	80157ba <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	88db      	ldrh	r3, [r3, #6]
 80156d0:	b29b      	uxth	r3, r3
 80156d2:	461a      	mov	r2, r3
 80156d4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80156d8:	4013      	ands	r3, r2
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d00b      	beq.n	80156f6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80156de:	6878      	ldr	r0, [r7, #4]
 80156e0:	f000 fc92 	bl	8016008 <ip4_reass>
 80156e4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d101      	bne.n	80156f0 <ip4_input+0x16c>
      return ERR_OK;
 80156ec:	2300      	movs	r3, #0
 80156ee:	e064      	b.n	80157ba <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	685b      	ldr	r3, [r3, #4]
 80156f4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80156f6:	4a33      	ldr	r2, [pc, #204]	; (80157c4 <ip4_input+0x240>)
 80156f8:	693b      	ldr	r3, [r7, #16]
 80156fa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80156fc:	4a31      	ldr	r2, [pc, #196]	; (80157c4 <ip4_input+0x240>)
 80156fe:	683b      	ldr	r3, [r7, #0]
 8015700:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015702:	4a30      	ldr	r2, [pc, #192]	; (80157c4 <ip4_input+0x240>)
 8015704:	697b      	ldr	r3, [r7, #20]
 8015706:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	781b      	ldrb	r3, [r3, #0]
 801570c:	f003 030f 	and.w	r3, r3, #15
 8015710:	b2db      	uxtb	r3, r3
 8015712:	009b      	lsls	r3, r3, #2
 8015714:	b2db      	uxtb	r3, r3
 8015716:	b29a      	uxth	r2, r3
 8015718:	4b2a      	ldr	r3, [pc, #168]	; (80157c4 <ip4_input+0x240>)
 801571a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801571c:	89fb      	ldrh	r3, [r7, #14]
 801571e:	4619      	mov	r1, r3
 8015720:	6878      	ldr	r0, [r7, #4]
 8015722:	f7f8 fa13 	bl	800db4c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015726:	697b      	ldr	r3, [r7, #20]
 8015728:	7a5b      	ldrb	r3, [r3, #9]
 801572a:	2b11      	cmp	r3, #17
 801572c:	d006      	beq.n	801573c <ip4_input+0x1b8>
 801572e:	2b11      	cmp	r3, #17
 8015730:	dc13      	bgt.n	801575a <ip4_input+0x1d6>
 8015732:	2b01      	cmp	r3, #1
 8015734:	d00c      	beq.n	8015750 <ip4_input+0x1cc>
 8015736:	2b06      	cmp	r3, #6
 8015738:	d005      	beq.n	8015746 <ip4_input+0x1c2>
 801573a:	e00e      	b.n	801575a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801573c:	6839      	ldr	r1, [r7, #0]
 801573e:	6878      	ldr	r0, [r7, #4]
 8015740:	f7fe f90e 	bl	8013960 <udp_input>
        break;
 8015744:	e026      	b.n	8015794 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015746:	6839      	ldr	r1, [r7, #0]
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f7fa f94f 	bl	800f9ec <tcp_input>
        break;
 801574e:	e021      	b.n	8015794 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015750:	6839      	ldr	r1, [r7, #0]
 8015752:	6878      	ldr	r0, [r7, #4]
 8015754:	f7ff fcee 	bl	8015134 <icmp_input>
        break;
 8015758:	e01c      	b.n	8015794 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801575a:	4b1a      	ldr	r3, [pc, #104]	; (80157c4 <ip4_input+0x240>)
 801575c:	695b      	ldr	r3, [r3, #20]
 801575e:	6939      	ldr	r1, [r7, #16]
 8015760:	4618      	mov	r0, r3
 8015762:	f000 f90b 	bl	801597c <ip4_addr_isbroadcast_u32>
 8015766:	4603      	mov	r3, r0
 8015768:	2b00      	cmp	r3, #0
 801576a:	d10f      	bne.n	801578c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801576c:	4b15      	ldr	r3, [pc, #84]	; (80157c4 <ip4_input+0x240>)
 801576e:	695b      	ldr	r3, [r3, #20]
 8015770:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015774:	2be0      	cmp	r3, #224	; 0xe0
 8015776:	d009      	beq.n	801578c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015778:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801577c:	4619      	mov	r1, r3
 801577e:	6878      	ldr	r0, [r7, #4]
 8015780:	f7f8 fa57 	bl	800dc32 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015784:	2102      	movs	r1, #2
 8015786:	6878      	ldr	r0, [r7, #4]
 8015788:	f7ff fdd8 	bl	801533c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801578c:	6878      	ldr	r0, [r7, #4]
 801578e:	f7f8 fa63 	bl	800dc58 <pbuf_free>
        break;
 8015792:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015794:	4b0b      	ldr	r3, [pc, #44]	; (80157c4 <ip4_input+0x240>)
 8015796:	2200      	movs	r2, #0
 8015798:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801579a:	4b0a      	ldr	r3, [pc, #40]	; (80157c4 <ip4_input+0x240>)
 801579c:	2200      	movs	r2, #0
 801579e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80157a0:	4b08      	ldr	r3, [pc, #32]	; (80157c4 <ip4_input+0x240>)
 80157a2:	2200      	movs	r2, #0
 80157a4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80157a6:	4b07      	ldr	r3, [pc, #28]	; (80157c4 <ip4_input+0x240>)
 80157a8:	2200      	movs	r2, #0
 80157aa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80157ac:	4b05      	ldr	r3, [pc, #20]	; (80157c4 <ip4_input+0x240>)
 80157ae:	2200      	movs	r2, #0
 80157b0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80157b2:	4b04      	ldr	r3, [pc, #16]	; (80157c4 <ip4_input+0x240>)
 80157b4:	2200      	movs	r2, #0
 80157b6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80157b8:	2300      	movs	r3, #0
}
 80157ba:	4618      	mov	r0, r3
 80157bc:	3718      	adds	r7, #24
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	20005a58 	.word	0x20005a58
 80157c8:	20008fbc 	.word	0x20008fbc

080157cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b08a      	sub	sp, #40	; 0x28
 80157d0:	af04      	add	r7, sp, #16
 80157d2:	60f8      	str	r0, [r7, #12]
 80157d4:	60b9      	str	r1, [r7, #8]
 80157d6:	607a      	str	r2, [r7, #4]
 80157d8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80157da:	68bb      	ldr	r3, [r7, #8]
 80157dc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d009      	beq.n	80157f8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d003      	beq.n	80157f2 <ip4_output_if+0x26>
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d102      	bne.n	80157f8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80157f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f4:	3304      	adds	r3, #4
 80157f6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80157f8:	78fa      	ldrb	r2, [r7, #3]
 80157fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157fc:	9302      	str	r3, [sp, #8]
 80157fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015802:	9301      	str	r3, [sp, #4]
 8015804:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015808:	9300      	str	r3, [sp, #0]
 801580a:	4613      	mov	r3, r2
 801580c:	687a      	ldr	r2, [r7, #4]
 801580e:	6979      	ldr	r1, [r7, #20]
 8015810:	68f8      	ldr	r0, [r7, #12]
 8015812:	f000 f805 	bl	8015820 <ip4_output_if_src>
 8015816:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015818:	4618      	mov	r0, r3
 801581a:	3718      	adds	r7, #24
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}

08015820 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b088      	sub	sp, #32
 8015824:	af00      	add	r7, sp, #0
 8015826:	60f8      	str	r0, [r7, #12]
 8015828:	60b9      	str	r1, [r7, #8]
 801582a:	607a      	str	r2, [r7, #4]
 801582c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	7b9b      	ldrb	r3, [r3, #14]
 8015832:	2b01      	cmp	r3, #1
 8015834:	d006      	beq.n	8015844 <ip4_output_if_src+0x24>
 8015836:	4b4b      	ldr	r3, [pc, #300]	; (8015964 <ip4_output_if_src+0x144>)
 8015838:	f44f 7255 	mov.w	r2, #852	; 0x354
 801583c:	494a      	ldr	r1, [pc, #296]	; (8015968 <ip4_output_if_src+0x148>)
 801583e:	484b      	ldr	r0, [pc, #300]	; (801596c <ip4_output_if_src+0x14c>)
 8015840:	f001 fcc2 	bl	80171c8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d060      	beq.n	801590c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801584a:	2314      	movs	r3, #20
 801584c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801584e:	2114      	movs	r1, #20
 8015850:	68f8      	ldr	r0, [r7, #12]
 8015852:	f7f8 f96b 	bl	800db2c <pbuf_add_header>
 8015856:	4603      	mov	r3, r0
 8015858:	2b00      	cmp	r3, #0
 801585a:	d002      	beq.n	8015862 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801585c:	f06f 0301 	mvn.w	r3, #1
 8015860:	e07c      	b.n	801595c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	685b      	ldr	r3, [r3, #4]
 8015866:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	895b      	ldrh	r3, [r3, #10]
 801586c:	2b13      	cmp	r3, #19
 801586e:	d806      	bhi.n	801587e <ip4_output_if_src+0x5e>
 8015870:	4b3c      	ldr	r3, [pc, #240]	; (8015964 <ip4_output_if_src+0x144>)
 8015872:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015876:	493e      	ldr	r1, [pc, #248]	; (8015970 <ip4_output_if_src+0x150>)
 8015878:	483c      	ldr	r0, [pc, #240]	; (801596c <ip4_output_if_src+0x14c>)
 801587a:	f001 fca5 	bl	80171c8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801587e:	69fb      	ldr	r3, [r7, #28]
 8015880:	78fa      	ldrb	r2, [r7, #3]
 8015882:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015884:	69fb      	ldr	r3, [r7, #28]
 8015886:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801588a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	681a      	ldr	r2, [r3, #0]
 8015890:	69fb      	ldr	r3, [r7, #28]
 8015892:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015894:	8b7b      	ldrh	r3, [r7, #26]
 8015896:	089b      	lsrs	r3, r3, #2
 8015898:	b29b      	uxth	r3, r3
 801589a:	b2db      	uxtb	r3, r3
 801589c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158a0:	b2da      	uxtb	r2, r3
 80158a2:	69fb      	ldr	r3, [r7, #28]
 80158a4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80158a6:	69fb      	ldr	r3, [r7, #28]
 80158a8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80158ac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	891b      	ldrh	r3, [r3, #8]
 80158b2:	4618      	mov	r0, r3
 80158b4:	f7f6 fe72 	bl	800c59c <lwip_htons>
 80158b8:	4603      	mov	r3, r0
 80158ba:	461a      	mov	r2, r3
 80158bc:	69fb      	ldr	r3, [r7, #28]
 80158be:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80158c0:	69fb      	ldr	r3, [r7, #28]
 80158c2:	2200      	movs	r2, #0
 80158c4:	719a      	strb	r2, [r3, #6]
 80158c6:	2200      	movs	r2, #0
 80158c8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80158ca:	4b2a      	ldr	r3, [pc, #168]	; (8015974 <ip4_output_if_src+0x154>)
 80158cc:	881b      	ldrh	r3, [r3, #0]
 80158ce:	4618      	mov	r0, r3
 80158d0:	f7f6 fe64 	bl	800c59c <lwip_htons>
 80158d4:	4603      	mov	r3, r0
 80158d6:	461a      	mov	r2, r3
 80158d8:	69fb      	ldr	r3, [r7, #28]
 80158da:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80158dc:	4b25      	ldr	r3, [pc, #148]	; (8015974 <ip4_output_if_src+0x154>)
 80158de:	881b      	ldrh	r3, [r3, #0]
 80158e0:	3301      	adds	r3, #1
 80158e2:	b29a      	uxth	r2, r3
 80158e4:	4b23      	ldr	r3, [pc, #140]	; (8015974 <ip4_output_if_src+0x154>)
 80158e6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d104      	bne.n	80158f8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80158ee:	4b22      	ldr	r3, [pc, #136]	; (8015978 <ip4_output_if_src+0x158>)
 80158f0:	681a      	ldr	r2, [r3, #0]
 80158f2:	69fb      	ldr	r3, [r7, #28]
 80158f4:	60da      	str	r2, [r3, #12]
 80158f6:	e003      	b.n	8015900 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	681a      	ldr	r2, [r3, #0]
 80158fc:	69fb      	ldr	r3, [r7, #28]
 80158fe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015900:	69fb      	ldr	r3, [r7, #28]
 8015902:	2200      	movs	r2, #0
 8015904:	729a      	strb	r2, [r3, #10]
 8015906:	2200      	movs	r2, #0
 8015908:	72da      	strb	r2, [r3, #11]
 801590a:	e00f      	b.n	801592c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	895b      	ldrh	r3, [r3, #10]
 8015910:	2b13      	cmp	r3, #19
 8015912:	d802      	bhi.n	801591a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015914:	f06f 0301 	mvn.w	r3, #1
 8015918:	e020      	b.n	801595c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	685b      	ldr	r3, [r3, #4]
 801591e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015920:	69fb      	ldr	r3, [r7, #28]
 8015922:	691b      	ldr	r3, [r3, #16]
 8015924:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015926:	f107 0314 	add.w	r3, r7, #20
 801592a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801592e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015930:	2b00      	cmp	r3, #0
 8015932:	d00c      	beq.n	801594e <ip4_output_if_src+0x12e>
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	891a      	ldrh	r2, [r3, #8]
 8015938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801593a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801593c:	429a      	cmp	r2, r3
 801593e:	d906      	bls.n	801594e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015940:	687a      	ldr	r2, [r7, #4]
 8015942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015944:	68f8      	ldr	r0, [r7, #12]
 8015946:	f000 fd53 	bl	80163f0 <ip4_frag>
 801594a:	4603      	mov	r3, r0
 801594c:	e006      	b.n	801595c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801594e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015950:	695b      	ldr	r3, [r3, #20]
 8015952:	687a      	ldr	r2, [r7, #4]
 8015954:	68f9      	ldr	r1, [r7, #12]
 8015956:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015958:	4798      	blx	r3
 801595a:	4603      	mov	r3, r0
}
 801595c:	4618      	mov	r0, r3
 801595e:	3720      	adds	r7, #32
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}
 8015964:	0801a90c 	.word	0x0801a90c
 8015968:	0801a940 	.word	0x0801a940
 801596c:	0801a94c 	.word	0x0801a94c
 8015970:	0801a974 	.word	0x0801a974
 8015974:	2000911a 	.word	0x2000911a
 8015978:	0801ad5c 	.word	0x0801ad5c

0801597c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801597c:	b480      	push	{r7}
 801597e:	b085      	sub	sp, #20
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
 8015984:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015990:	d002      	beq.n	8015998 <ip4_addr_isbroadcast_u32+0x1c>
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d101      	bne.n	801599c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015998:	2301      	movs	r3, #1
 801599a:	e02a      	b.n	80159f2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801599c:	683b      	ldr	r3, [r7, #0]
 801599e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80159a2:	f003 0302 	and.w	r3, r3, #2
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d101      	bne.n	80159ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80159aa:	2300      	movs	r3, #0
 80159ac:	e021      	b.n	80159f2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80159ae:	683b      	ldr	r3, [r7, #0]
 80159b0:	3304      	adds	r3, #4
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	687a      	ldr	r2, [r7, #4]
 80159b6:	429a      	cmp	r2, r3
 80159b8:	d101      	bne.n	80159be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80159ba:	2300      	movs	r3, #0
 80159bc:	e019      	b.n	80159f2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80159be:	68fa      	ldr	r2, [r7, #12]
 80159c0:	683b      	ldr	r3, [r7, #0]
 80159c2:	3304      	adds	r3, #4
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	405a      	eors	r2, r3
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	3308      	adds	r3, #8
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	4013      	ands	r3, r2
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d10d      	bne.n	80159f0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	3308      	adds	r3, #8
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	43da      	mvns	r2, r3
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80159e0:	683b      	ldr	r3, [r7, #0]
 80159e2:	3308      	adds	r3, #8
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80159e8:	429a      	cmp	r2, r3
 80159ea:	d101      	bne.n	80159f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80159ec:	2301      	movs	r3, #1
 80159ee:	e000      	b.n	80159f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80159f0:	2300      	movs	r3, #0
  }
}
 80159f2:	4618      	mov	r0, r3
 80159f4:	3714      	adds	r7, #20
 80159f6:	46bd      	mov	sp, r7
 80159f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fc:	4770      	bx	lr
	...

08015a00 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015a00:	b580      	push	{r7, lr}
 8015a02:	b084      	sub	sp, #16
 8015a04:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015a06:	2300      	movs	r3, #0
 8015a08:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015a0a:	4b12      	ldr	r3, [pc, #72]	; (8015a54 <ip_reass_tmr+0x54>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015a10:	e018      	b.n	8015a44 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	7fdb      	ldrb	r3, [r3, #31]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d00b      	beq.n	8015a32 <ip_reass_tmr+0x32>
      r->timer--;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	7fdb      	ldrb	r3, [r3, #31]
 8015a1e:	3b01      	subs	r3, #1
 8015a20:	b2da      	uxtb	r2, r3
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	60fb      	str	r3, [r7, #12]
 8015a30:	e008      	b.n	8015a44 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015a3c:	68b9      	ldr	r1, [r7, #8]
 8015a3e:	6878      	ldr	r0, [r7, #4]
 8015a40:	f000 f80a 	bl	8015a58 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d1e3      	bne.n	8015a12 <ip_reass_tmr+0x12>
    }
  }
}
 8015a4a:	bf00      	nop
 8015a4c:	bf00      	nop
 8015a4e:	3710      	adds	r7, #16
 8015a50:	46bd      	mov	sp, r7
 8015a52:	bd80      	pop	{r7, pc}
 8015a54:	2000911c 	.word	0x2000911c

08015a58 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b088      	sub	sp, #32
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
 8015a60:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015a62:	2300      	movs	r3, #0
 8015a64:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015a66:	683a      	ldr	r2, [r7, #0]
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	429a      	cmp	r2, r3
 8015a6c:	d105      	bne.n	8015a7a <ip_reass_free_complete_datagram+0x22>
 8015a6e:	4b45      	ldr	r3, [pc, #276]	; (8015b84 <ip_reass_free_complete_datagram+0x12c>)
 8015a70:	22ab      	movs	r2, #171	; 0xab
 8015a72:	4945      	ldr	r1, [pc, #276]	; (8015b88 <ip_reass_free_complete_datagram+0x130>)
 8015a74:	4845      	ldr	r0, [pc, #276]	; (8015b8c <ip_reass_free_complete_datagram+0x134>)
 8015a76:	f001 fba7 	bl	80171c8 <iprintf>
  if (prev != NULL) {
 8015a7a:	683b      	ldr	r3, [r7, #0]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d00a      	beq.n	8015a96 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	687a      	ldr	r2, [r7, #4]
 8015a86:	429a      	cmp	r2, r3
 8015a88:	d005      	beq.n	8015a96 <ip_reass_free_complete_datagram+0x3e>
 8015a8a:	4b3e      	ldr	r3, [pc, #248]	; (8015b84 <ip_reass_free_complete_datagram+0x12c>)
 8015a8c:	22ad      	movs	r2, #173	; 0xad
 8015a8e:	4940      	ldr	r1, [pc, #256]	; (8015b90 <ip_reass_free_complete_datagram+0x138>)
 8015a90:	483e      	ldr	r0, [pc, #248]	; (8015b8c <ip_reass_free_complete_datagram+0x134>)
 8015a92:	f001 fb99 	bl	80171c8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	685b      	ldr	r3, [r3, #4]
 8015a9c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015a9e:	697b      	ldr	r3, [r7, #20]
 8015aa0:	889b      	ldrh	r3, [r3, #4]
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d12a      	bne.n	8015afe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	685b      	ldr	r3, [r3, #4]
 8015aac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015aae:	697b      	ldr	r3, [r7, #20]
 8015ab0:	681a      	ldr	r2, [r3, #0]
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015ab6:	69bb      	ldr	r3, [r7, #24]
 8015ab8:	6858      	ldr	r0, [r3, #4]
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	3308      	adds	r3, #8
 8015abe:	2214      	movs	r2, #20
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	f001 fb6b 	bl	801719c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015ac6:	2101      	movs	r1, #1
 8015ac8:	69b8      	ldr	r0, [r7, #24]
 8015aca:	f7ff fc47 	bl	801535c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015ace:	69b8      	ldr	r0, [r7, #24]
 8015ad0:	f7f8 f94a 	bl	800dd68 <pbuf_clen>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015ad8:	8bfa      	ldrh	r2, [r7, #30]
 8015ada:	8a7b      	ldrh	r3, [r7, #18]
 8015adc:	4413      	add	r3, r2
 8015ade:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015ae2:	db05      	blt.n	8015af0 <ip_reass_free_complete_datagram+0x98>
 8015ae4:	4b27      	ldr	r3, [pc, #156]	; (8015b84 <ip_reass_free_complete_datagram+0x12c>)
 8015ae6:	22bc      	movs	r2, #188	; 0xbc
 8015ae8:	492a      	ldr	r1, [pc, #168]	; (8015b94 <ip_reass_free_complete_datagram+0x13c>)
 8015aea:	4828      	ldr	r0, [pc, #160]	; (8015b8c <ip_reass_free_complete_datagram+0x134>)
 8015aec:	f001 fb6c 	bl	80171c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015af0:	8bfa      	ldrh	r2, [r7, #30]
 8015af2:	8a7b      	ldrh	r3, [r7, #18]
 8015af4:	4413      	add	r3, r2
 8015af6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015af8:	69b8      	ldr	r0, [r7, #24]
 8015afa:	f7f8 f8ad 	bl	800dc58 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	685b      	ldr	r3, [r3, #4]
 8015b02:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015b04:	e01f      	b.n	8015b46 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015b06:	69bb      	ldr	r3, [r7, #24]
 8015b08:	685b      	ldr	r3, [r3, #4]
 8015b0a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015b0c:	69bb      	ldr	r3, [r7, #24]
 8015b0e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015b10:	697b      	ldr	r3, [r7, #20]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015b16:	68f8      	ldr	r0, [r7, #12]
 8015b18:	f7f8 f926 	bl	800dd68 <pbuf_clen>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015b20:	8bfa      	ldrh	r2, [r7, #30]
 8015b22:	8a7b      	ldrh	r3, [r7, #18]
 8015b24:	4413      	add	r3, r2
 8015b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b2a:	db05      	blt.n	8015b38 <ip_reass_free_complete_datagram+0xe0>
 8015b2c:	4b15      	ldr	r3, [pc, #84]	; (8015b84 <ip_reass_free_complete_datagram+0x12c>)
 8015b2e:	22cc      	movs	r2, #204	; 0xcc
 8015b30:	4918      	ldr	r1, [pc, #96]	; (8015b94 <ip_reass_free_complete_datagram+0x13c>)
 8015b32:	4816      	ldr	r0, [pc, #88]	; (8015b8c <ip_reass_free_complete_datagram+0x134>)
 8015b34:	f001 fb48 	bl	80171c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015b38:	8bfa      	ldrh	r2, [r7, #30]
 8015b3a:	8a7b      	ldrh	r3, [r7, #18]
 8015b3c:	4413      	add	r3, r2
 8015b3e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015b40:	68f8      	ldr	r0, [r7, #12]
 8015b42:	f7f8 f889 	bl	800dc58 <pbuf_free>
  while (p != NULL) {
 8015b46:	69bb      	ldr	r3, [r7, #24]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d1dc      	bne.n	8015b06 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015b4c:	6839      	ldr	r1, [r7, #0]
 8015b4e:	6878      	ldr	r0, [r7, #4]
 8015b50:	f000 f8c2 	bl	8015cd8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015b54:	4b10      	ldr	r3, [pc, #64]	; (8015b98 <ip_reass_free_complete_datagram+0x140>)
 8015b56:	881b      	ldrh	r3, [r3, #0]
 8015b58:	8bfa      	ldrh	r2, [r7, #30]
 8015b5a:	429a      	cmp	r2, r3
 8015b5c:	d905      	bls.n	8015b6a <ip_reass_free_complete_datagram+0x112>
 8015b5e:	4b09      	ldr	r3, [pc, #36]	; (8015b84 <ip_reass_free_complete_datagram+0x12c>)
 8015b60:	22d2      	movs	r2, #210	; 0xd2
 8015b62:	490e      	ldr	r1, [pc, #56]	; (8015b9c <ip_reass_free_complete_datagram+0x144>)
 8015b64:	4809      	ldr	r0, [pc, #36]	; (8015b8c <ip_reass_free_complete_datagram+0x134>)
 8015b66:	f001 fb2f 	bl	80171c8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015b6a:	4b0b      	ldr	r3, [pc, #44]	; (8015b98 <ip_reass_free_complete_datagram+0x140>)
 8015b6c:	881a      	ldrh	r2, [r3, #0]
 8015b6e:	8bfb      	ldrh	r3, [r7, #30]
 8015b70:	1ad3      	subs	r3, r2, r3
 8015b72:	b29a      	uxth	r2, r3
 8015b74:	4b08      	ldr	r3, [pc, #32]	; (8015b98 <ip_reass_free_complete_datagram+0x140>)
 8015b76:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015b78:	8bfb      	ldrh	r3, [r7, #30]
}
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	3720      	adds	r7, #32
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	0801a9a4 	.word	0x0801a9a4
 8015b88:	0801a9e0 	.word	0x0801a9e0
 8015b8c:	0801a9ec 	.word	0x0801a9ec
 8015b90:	0801aa14 	.word	0x0801aa14
 8015b94:	0801aa28 	.word	0x0801aa28
 8015b98:	20009120 	.word	0x20009120
 8015b9c:	0801aa48 	.word	0x0801aa48

08015ba0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b08a      	sub	sp, #40	; 0x28
 8015ba4:	af00      	add	r7, sp, #0
 8015ba6:	6078      	str	r0, [r7, #4]
 8015ba8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015baa:	2300      	movs	r3, #0
 8015bac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015bae:	2300      	movs	r3, #0
 8015bb0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015bba:	2300      	movs	r3, #0
 8015bbc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015bbe:	4b28      	ldr	r3, [pc, #160]	; (8015c60 <ip_reass_remove_oldest_datagram+0xc0>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015bc4:	e030      	b.n	8015c28 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bc8:	695a      	ldr	r2, [r3, #20]
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	68db      	ldr	r3, [r3, #12]
 8015bce:	429a      	cmp	r2, r3
 8015bd0:	d10c      	bne.n	8015bec <ip_reass_remove_oldest_datagram+0x4c>
 8015bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bd4:	699a      	ldr	r2, [r3, #24]
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	691b      	ldr	r3, [r3, #16]
 8015bda:	429a      	cmp	r2, r3
 8015bdc:	d106      	bne.n	8015bec <ip_reass_remove_oldest_datagram+0x4c>
 8015bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be0:	899a      	ldrh	r2, [r3, #12]
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	889b      	ldrh	r3, [r3, #4]
 8015be6:	b29b      	uxth	r3, r3
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d014      	beq.n	8015c16 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015bec:	693b      	ldr	r3, [r7, #16]
 8015bee:	3301      	adds	r3, #1
 8015bf0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015bf2:	6a3b      	ldr	r3, [r7, #32]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d104      	bne.n	8015c02 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bfa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015bfc:	69fb      	ldr	r3, [r7, #28]
 8015bfe:	61bb      	str	r3, [r7, #24]
 8015c00:	e009      	b.n	8015c16 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c04:	7fda      	ldrb	r2, [r3, #31]
 8015c06:	6a3b      	ldr	r3, [r7, #32]
 8015c08:	7fdb      	ldrb	r3, [r3, #31]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d803      	bhi.n	8015c16 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c10:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015c12:	69fb      	ldr	r3, [r7, #28]
 8015c14:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d001      	beq.n	8015c22 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c20:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d1cb      	bne.n	8015bc6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015c2e:	6a3b      	ldr	r3, [r7, #32]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d008      	beq.n	8015c46 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015c34:	69b9      	ldr	r1, [r7, #24]
 8015c36:	6a38      	ldr	r0, [r7, #32]
 8015c38:	f7ff ff0e 	bl	8015a58 <ip_reass_free_complete_datagram>
 8015c3c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015c3e:	697a      	ldr	r2, [r7, #20]
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	4413      	add	r3, r2
 8015c44:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015c46:	697a      	ldr	r2, [r7, #20]
 8015c48:	683b      	ldr	r3, [r7, #0]
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	da02      	bge.n	8015c54 <ip_reass_remove_oldest_datagram+0xb4>
 8015c4e:	693b      	ldr	r3, [r7, #16]
 8015c50:	2b01      	cmp	r3, #1
 8015c52:	dcac      	bgt.n	8015bae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015c54:	697b      	ldr	r3, [r7, #20]
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	3728      	adds	r7, #40	; 0x28
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	bd80      	pop	{r7, pc}
 8015c5e:	bf00      	nop
 8015c60:	2000911c 	.word	0x2000911c

08015c64 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b084      	sub	sp, #16
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	6078      	str	r0, [r7, #4]
 8015c6c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015c6e:	2004      	movs	r0, #4
 8015c70:	f7f7 f90c 	bl	800ce8c <memp_malloc>
 8015c74:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d110      	bne.n	8015c9e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015c7c:	6839      	ldr	r1, [r7, #0]
 8015c7e:	6878      	ldr	r0, [r7, #4]
 8015c80:	f7ff ff8e 	bl	8015ba0 <ip_reass_remove_oldest_datagram>
 8015c84:	4602      	mov	r2, r0
 8015c86:	683b      	ldr	r3, [r7, #0]
 8015c88:	4293      	cmp	r3, r2
 8015c8a:	dc03      	bgt.n	8015c94 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015c8c:	2004      	movs	r0, #4
 8015c8e:	f7f7 f8fd 	bl	800ce8c <memp_malloc>
 8015c92:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d101      	bne.n	8015c9e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	e016      	b.n	8015ccc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015c9e:	2220      	movs	r2, #32
 8015ca0:	2100      	movs	r1, #0
 8015ca2:	68f8      	ldr	r0, [r7, #12]
 8015ca4:	f001 fa88 	bl	80171b8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	220f      	movs	r2, #15
 8015cac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015cae:	4b09      	ldr	r3, [pc, #36]	; (8015cd4 <ip_reass_enqueue_new_datagram+0x70>)
 8015cb0:	681a      	ldr	r2, [r3, #0]
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015cb6:	4a07      	ldr	r2, [pc, #28]	; (8015cd4 <ip_reass_enqueue_new_datagram+0x70>)
 8015cb8:	68fb      	ldr	r3, [r7, #12]
 8015cba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	3308      	adds	r3, #8
 8015cc0:	2214      	movs	r2, #20
 8015cc2:	6879      	ldr	r1, [r7, #4]
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	f001 fa69 	bl	801719c <memcpy>
  return ipr;
 8015cca:	68fb      	ldr	r3, [r7, #12]
}
 8015ccc:	4618      	mov	r0, r3
 8015cce:	3710      	adds	r7, #16
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	bd80      	pop	{r7, pc}
 8015cd4:	2000911c 	.word	0x2000911c

08015cd8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b082      	sub	sp, #8
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	6078      	str	r0, [r7, #4]
 8015ce0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015ce2:	4b10      	ldr	r3, [pc, #64]	; (8015d24 <ip_reass_dequeue_datagram+0x4c>)
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	687a      	ldr	r2, [r7, #4]
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d104      	bne.n	8015cf6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	4a0c      	ldr	r2, [pc, #48]	; (8015d24 <ip_reass_dequeue_datagram+0x4c>)
 8015cf2:	6013      	str	r3, [r2, #0]
 8015cf4:	e00d      	b.n	8015d12 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d106      	bne.n	8015d0a <ip_reass_dequeue_datagram+0x32>
 8015cfc:	4b0a      	ldr	r3, [pc, #40]	; (8015d28 <ip_reass_dequeue_datagram+0x50>)
 8015cfe:	f240 1245 	movw	r2, #325	; 0x145
 8015d02:	490a      	ldr	r1, [pc, #40]	; (8015d2c <ip_reass_dequeue_datagram+0x54>)
 8015d04:	480a      	ldr	r0, [pc, #40]	; (8015d30 <ip_reass_dequeue_datagram+0x58>)
 8015d06:	f001 fa5f 	bl	80171c8 <iprintf>
    prev->next = ipr->next;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	681a      	ldr	r2, [r3, #0]
 8015d0e:	683b      	ldr	r3, [r7, #0]
 8015d10:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015d12:	6879      	ldr	r1, [r7, #4]
 8015d14:	2004      	movs	r0, #4
 8015d16:	f7f7 f929 	bl	800cf6c <memp_free>
}
 8015d1a:	bf00      	nop
 8015d1c:	3708      	adds	r7, #8
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}
 8015d22:	bf00      	nop
 8015d24:	2000911c 	.word	0x2000911c
 8015d28:	0801a9a4 	.word	0x0801a9a4
 8015d2c:	0801aa6c 	.word	0x0801aa6c
 8015d30:	0801a9ec 	.word	0x0801a9ec

08015d34 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015d34:	b580      	push	{r7, lr}
 8015d36:	b08c      	sub	sp, #48	; 0x30
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	60f8      	str	r0, [r7, #12]
 8015d3c:	60b9      	str	r1, [r7, #8]
 8015d3e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015d40:	2300      	movs	r3, #0
 8015d42:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015d44:	2301      	movs	r3, #1
 8015d46:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	685b      	ldr	r3, [r3, #4]
 8015d4c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015d4e:	69fb      	ldr	r3, [r7, #28]
 8015d50:	885b      	ldrh	r3, [r3, #2]
 8015d52:	b29b      	uxth	r3, r3
 8015d54:	4618      	mov	r0, r3
 8015d56:	f7f6 fc21 	bl	800c59c <lwip_htons>
 8015d5a:	4603      	mov	r3, r0
 8015d5c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015d5e:	69fb      	ldr	r3, [r7, #28]
 8015d60:	781b      	ldrb	r3, [r3, #0]
 8015d62:	f003 030f 	and.w	r3, r3, #15
 8015d66:	b2db      	uxtb	r3, r3
 8015d68:	009b      	lsls	r3, r3, #2
 8015d6a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015d6c:	7e7b      	ldrb	r3, [r7, #25]
 8015d6e:	b29b      	uxth	r3, r3
 8015d70:	8b7a      	ldrh	r2, [r7, #26]
 8015d72:	429a      	cmp	r2, r3
 8015d74:	d202      	bcs.n	8015d7c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d7a:	e135      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015d7c:	7e7b      	ldrb	r3, [r7, #25]
 8015d7e:	b29b      	uxth	r3, r3
 8015d80:	8b7a      	ldrh	r2, [r7, #26]
 8015d82:	1ad3      	subs	r3, r2, r3
 8015d84:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015d86:	69fb      	ldr	r3, [r7, #28]
 8015d88:	88db      	ldrh	r3, [r3, #6]
 8015d8a:	b29b      	uxth	r3, r3
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	f7f6 fc05 	bl	800c59c <lwip_htons>
 8015d92:	4603      	mov	r3, r0
 8015d94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d98:	b29b      	uxth	r3, r3
 8015d9a:	00db      	lsls	r3, r3, #3
 8015d9c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015d9e:	68bb      	ldr	r3, [r7, #8]
 8015da0:	685b      	ldr	r3, [r3, #4]
 8015da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015da6:	2200      	movs	r2, #0
 8015da8:	701a      	strb	r2, [r3, #0]
 8015daa:	2200      	movs	r2, #0
 8015dac:	705a      	strb	r2, [r3, #1]
 8015dae:	2200      	movs	r2, #0
 8015db0:	709a      	strb	r2, [r3, #2]
 8015db2:	2200      	movs	r2, #0
 8015db4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015db8:	8afa      	ldrh	r2, [r7, #22]
 8015dba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015dbc:	8afa      	ldrh	r2, [r7, #22]
 8015dbe:	8b7b      	ldrh	r3, [r7, #26]
 8015dc0:	4413      	add	r3, r2
 8015dc2:	b29a      	uxth	r2, r3
 8015dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dc6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dca:	88db      	ldrh	r3, [r3, #6]
 8015dcc:	b29b      	uxth	r3, r3
 8015dce:	8afa      	ldrh	r2, [r7, #22]
 8015dd0:	429a      	cmp	r2, r3
 8015dd2:	d902      	bls.n	8015dda <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015dd8:	e106      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	685b      	ldr	r3, [r3, #4]
 8015dde:	627b      	str	r3, [r7, #36]	; 0x24
 8015de0:	e068      	b.n	8015eb4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de4:	685b      	ldr	r3, [r3, #4]
 8015de6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dea:	889b      	ldrh	r3, [r3, #4]
 8015dec:	b29a      	uxth	r2, r3
 8015dee:	693b      	ldr	r3, [r7, #16]
 8015df0:	889b      	ldrh	r3, [r3, #4]
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d235      	bcs.n	8015e64 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015dfc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d020      	beq.n	8015e46 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e06:	889b      	ldrh	r3, [r3, #4]
 8015e08:	b29a      	uxth	r2, r3
 8015e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e0c:	88db      	ldrh	r3, [r3, #6]
 8015e0e:	b29b      	uxth	r3, r3
 8015e10:	429a      	cmp	r2, r3
 8015e12:	d307      	bcc.n	8015e24 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e16:	88db      	ldrh	r3, [r3, #6]
 8015e18:	b29a      	uxth	r2, r3
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	889b      	ldrh	r3, [r3, #4]
 8015e1e:	b29b      	uxth	r3, r3
 8015e20:	429a      	cmp	r2, r3
 8015e22:	d902      	bls.n	8015e2a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e28:	e0de      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e2c:	68ba      	ldr	r2, [r7, #8]
 8015e2e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e32:	88db      	ldrh	r3, [r3, #6]
 8015e34:	b29a      	uxth	r2, r3
 8015e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e38:	889b      	ldrh	r3, [r3, #4]
 8015e3a:	b29b      	uxth	r3, r3
 8015e3c:	429a      	cmp	r2, r3
 8015e3e:	d03d      	beq.n	8015ebc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015e40:	2300      	movs	r3, #0
 8015e42:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015e44:	e03a      	b.n	8015ebc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e48:	88db      	ldrh	r3, [r3, #6]
 8015e4a:	b29a      	uxth	r2, r3
 8015e4c:	693b      	ldr	r3, [r7, #16]
 8015e4e:	889b      	ldrh	r3, [r3, #4]
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	429a      	cmp	r2, r3
 8015e54:	d902      	bls.n	8015e5c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e5a:	e0c5      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	68ba      	ldr	r2, [r7, #8]
 8015e60:	605a      	str	r2, [r3, #4]
      break;
 8015e62:	e02b      	b.n	8015ebc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e66:	889b      	ldrh	r3, [r3, #4]
 8015e68:	b29a      	uxth	r2, r3
 8015e6a:	693b      	ldr	r3, [r7, #16]
 8015e6c:	889b      	ldrh	r3, [r3, #4]
 8015e6e:	b29b      	uxth	r3, r3
 8015e70:	429a      	cmp	r2, r3
 8015e72:	d102      	bne.n	8015e7a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e78:	e0b6      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e7c:	889b      	ldrh	r3, [r3, #4]
 8015e7e:	b29a      	uxth	r2, r3
 8015e80:	693b      	ldr	r3, [r7, #16]
 8015e82:	88db      	ldrh	r3, [r3, #6]
 8015e84:	b29b      	uxth	r3, r3
 8015e86:	429a      	cmp	r2, r3
 8015e88:	d202      	bcs.n	8015e90 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e8e:	e0ab      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d009      	beq.n	8015eaa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e98:	88db      	ldrh	r3, [r3, #6]
 8015e9a:	b29a      	uxth	r2, r3
 8015e9c:	693b      	ldr	r3, [r7, #16]
 8015e9e:	889b      	ldrh	r3, [r3, #4]
 8015ea0:	b29b      	uxth	r3, r3
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	d001      	beq.n	8015eaa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015eaa:	693b      	ldr	r3, [r7, #16]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015eb0:	693b      	ldr	r3, [r7, #16]
 8015eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d193      	bne.n	8015de2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015eba:	e000      	b.n	8015ebe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015ebc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d12d      	bne.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d01c      	beq.n	8015f04 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ecc:	88db      	ldrh	r3, [r3, #6]
 8015ece:	b29a      	uxth	r2, r3
 8015ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ed2:	889b      	ldrh	r3, [r3, #4]
 8015ed4:	b29b      	uxth	r3, r3
 8015ed6:	429a      	cmp	r2, r3
 8015ed8:	d906      	bls.n	8015ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015eda:	4b45      	ldr	r3, [pc, #276]	; (8015ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015edc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015ee0:	4944      	ldr	r1, [pc, #272]	; (8015ff4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015ee2:	4845      	ldr	r0, [pc, #276]	; (8015ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ee4:	f001 f970 	bl	80171c8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eea:	68ba      	ldr	r2, [r7, #8]
 8015eec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ef0:	88db      	ldrh	r3, [r3, #6]
 8015ef2:	b29a      	uxth	r2, r3
 8015ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ef6:	889b      	ldrh	r3, [r3, #4]
 8015ef8:	b29b      	uxth	r3, r3
 8015efa:	429a      	cmp	r2, r3
 8015efc:	d010      	beq.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015efe:	2300      	movs	r3, #0
 8015f00:	623b      	str	r3, [r7, #32]
 8015f02:	e00d      	b.n	8015f20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	685b      	ldr	r3, [r3, #4]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d006      	beq.n	8015f1a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015f0c:	4b38      	ldr	r3, [pc, #224]	; (8015ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f0e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015f12:	493a      	ldr	r1, [pc, #232]	; (8015ffc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015f14:	4838      	ldr	r0, [pc, #224]	; (8015ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f16:	f001 f957 	bl	80171c8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015f1a:	68fb      	ldr	r3, [r7, #12]
 8015f1c:	68ba      	ldr	r2, [r7, #8]
 8015f1e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d105      	bne.n	8015f32 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	7f9b      	ldrb	r3, [r3, #30]
 8015f2a:	f003 0301 	and.w	r3, r3, #1
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d059      	beq.n	8015fe6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015f32:	6a3b      	ldr	r3, [r7, #32]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d04f      	beq.n	8015fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	d006      	beq.n	8015f4e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	685b      	ldr	r3, [r3, #4]
 8015f44:	685b      	ldr	r3, [r3, #4]
 8015f46:	889b      	ldrh	r3, [r3, #4]
 8015f48:	b29b      	uxth	r3, r3
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d002      	beq.n	8015f54 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015f4e:	2300      	movs	r3, #0
 8015f50:	623b      	str	r3, [r7, #32]
 8015f52:	e041      	b.n	8015fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f56:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f5a:	681b      	ldr	r3, [r3, #0]
 8015f5c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015f5e:	e012      	b.n	8015f86 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f62:	685b      	ldr	r3, [r3, #4]
 8015f64:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f68:	88db      	ldrh	r3, [r3, #6]
 8015f6a:	b29a      	uxth	r2, r3
 8015f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f6e:	889b      	ldrh	r3, [r3, #4]
 8015f70:	b29b      	uxth	r3, r3
 8015f72:	429a      	cmp	r2, r3
 8015f74:	d002      	beq.n	8015f7c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015f76:	2300      	movs	r3, #0
 8015f78:	623b      	str	r3, [r7, #32]
            break;
 8015f7a:	e007      	b.n	8015f8c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f7e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d1e9      	bne.n	8015f60 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015f8c:	6a3b      	ldr	r3, [r7, #32]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d022      	beq.n	8015fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	685b      	ldr	r3, [r3, #4]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d106      	bne.n	8015fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015f9a:	4b15      	ldr	r3, [pc, #84]	; (8015ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f9c:	f240 12df 	movw	r2, #479	; 0x1df
 8015fa0:	4917      	ldr	r1, [pc, #92]	; (8016000 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015fa2:	4815      	ldr	r0, [pc, #84]	; (8015ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015fa4:	f001 f910 	bl	80171c8 <iprintf>
          LWIP_ASSERT("sanity check",
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	685b      	ldr	r3, [r3, #4]
 8015fac:	685b      	ldr	r3, [r3, #4]
 8015fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	d106      	bne.n	8015fc2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015fb4:	4b0e      	ldr	r3, [pc, #56]	; (8015ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015fb6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015fba:	4911      	ldr	r1, [pc, #68]	; (8016000 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015fbc:	480e      	ldr	r0, [pc, #56]	; (8015ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015fbe:	f001 f903 	bl	80171c8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d006      	beq.n	8015fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015fca:	4b09      	ldr	r3, [pc, #36]	; (8015ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015fcc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015fd0:	490c      	ldr	r1, [pc, #48]	; (8016004 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015fd2:	4809      	ldr	r0, [pc, #36]	; (8015ff8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015fd4:	f001 f8f8 	bl	80171c8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015fd8:	6a3b      	ldr	r3, [r7, #32]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	bf14      	ite	ne
 8015fde:	2301      	movne	r3, #1
 8015fe0:	2300      	moveq	r3, #0
 8015fe2:	b2db      	uxtb	r3, r3
 8015fe4:	e000      	b.n	8015fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015fe6:	2300      	movs	r3, #0
}
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3730      	adds	r7, #48	; 0x30
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}
 8015ff0:	0801a9a4 	.word	0x0801a9a4
 8015ff4:	0801aa88 	.word	0x0801aa88
 8015ff8:	0801a9ec 	.word	0x0801a9ec
 8015ffc:	0801aaa8 	.word	0x0801aaa8
 8016000:	0801aae0 	.word	0x0801aae0
 8016004:	0801aaf0 	.word	0x0801aaf0

08016008 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b08e      	sub	sp, #56	; 0x38
 801600c:	af00      	add	r7, sp, #0
 801600e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	685b      	ldr	r3, [r3, #4]
 8016014:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016018:	781b      	ldrb	r3, [r3, #0]
 801601a:	f003 030f 	and.w	r3, r3, #15
 801601e:	b2db      	uxtb	r3, r3
 8016020:	009b      	lsls	r3, r3, #2
 8016022:	b2db      	uxtb	r3, r3
 8016024:	2b14      	cmp	r3, #20
 8016026:	f040 8171 	bne.w	801630c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801602a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801602c:	88db      	ldrh	r3, [r3, #6]
 801602e:	b29b      	uxth	r3, r3
 8016030:	4618      	mov	r0, r3
 8016032:	f7f6 fab3 	bl	800c59c <lwip_htons>
 8016036:	4603      	mov	r3, r0
 8016038:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801603c:	b29b      	uxth	r3, r3
 801603e:	00db      	lsls	r3, r3, #3
 8016040:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016044:	885b      	ldrh	r3, [r3, #2]
 8016046:	b29b      	uxth	r3, r3
 8016048:	4618      	mov	r0, r3
 801604a:	f7f6 faa7 	bl	800c59c <lwip_htons>
 801604e:	4603      	mov	r3, r0
 8016050:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016054:	781b      	ldrb	r3, [r3, #0]
 8016056:	f003 030f 	and.w	r3, r3, #15
 801605a:	b2db      	uxtb	r3, r3
 801605c:	009b      	lsls	r3, r3, #2
 801605e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016066:	b29b      	uxth	r3, r3
 8016068:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801606a:	429a      	cmp	r2, r3
 801606c:	f0c0 8150 	bcc.w	8016310 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016070:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016074:	b29b      	uxth	r3, r3
 8016076:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016078:	1ad3      	subs	r3, r2, r3
 801607a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801607c:	6878      	ldr	r0, [r7, #4]
 801607e:	f7f7 fe73 	bl	800dd68 <pbuf_clen>
 8016082:	4603      	mov	r3, r0
 8016084:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016086:	4b8c      	ldr	r3, [pc, #560]	; (80162b8 <ip4_reass+0x2b0>)
 8016088:	881b      	ldrh	r3, [r3, #0]
 801608a:	461a      	mov	r2, r3
 801608c:	8c3b      	ldrh	r3, [r7, #32]
 801608e:	4413      	add	r3, r2
 8016090:	2b0a      	cmp	r3, #10
 8016092:	dd10      	ble.n	80160b6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016094:	8c3b      	ldrh	r3, [r7, #32]
 8016096:	4619      	mov	r1, r3
 8016098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801609a:	f7ff fd81 	bl	8015ba0 <ip_reass_remove_oldest_datagram>
 801609e:	4603      	mov	r3, r0
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	f000 8137 	beq.w	8016314 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80160a6:	4b84      	ldr	r3, [pc, #528]	; (80162b8 <ip4_reass+0x2b0>)
 80160a8:	881b      	ldrh	r3, [r3, #0]
 80160aa:	461a      	mov	r2, r3
 80160ac:	8c3b      	ldrh	r3, [r7, #32]
 80160ae:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80160b0:	2b0a      	cmp	r3, #10
 80160b2:	f300 812f 	bgt.w	8016314 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80160b6:	4b81      	ldr	r3, [pc, #516]	; (80162bc <ip4_reass+0x2b4>)
 80160b8:	681b      	ldr	r3, [r3, #0]
 80160ba:	633b      	str	r3, [r7, #48]	; 0x30
 80160bc:	e015      	b.n	80160ea <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80160be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160c0:	695a      	ldr	r2, [r3, #20]
 80160c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160c4:	68db      	ldr	r3, [r3, #12]
 80160c6:	429a      	cmp	r2, r3
 80160c8:	d10c      	bne.n	80160e4 <ip4_reass+0xdc>
 80160ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160cc:	699a      	ldr	r2, [r3, #24]
 80160ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160d0:	691b      	ldr	r3, [r3, #16]
 80160d2:	429a      	cmp	r2, r3
 80160d4:	d106      	bne.n	80160e4 <ip4_reass+0xdc>
 80160d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160d8:	899a      	ldrh	r2, [r3, #12]
 80160da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160dc:	889b      	ldrh	r3, [r3, #4]
 80160de:	b29b      	uxth	r3, r3
 80160e0:	429a      	cmp	r2, r3
 80160e2:	d006      	beq.n	80160f2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80160e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e6:	681b      	ldr	r3, [r3, #0]
 80160e8:	633b      	str	r3, [r7, #48]	; 0x30
 80160ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d1e6      	bne.n	80160be <ip4_reass+0xb6>
 80160f0:	e000      	b.n	80160f4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80160f2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80160f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d109      	bne.n	801610e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80160fa:	8c3b      	ldrh	r3, [r7, #32]
 80160fc:	4619      	mov	r1, r3
 80160fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016100:	f7ff fdb0 	bl	8015c64 <ip_reass_enqueue_new_datagram>
 8016104:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016108:	2b00      	cmp	r3, #0
 801610a:	d11c      	bne.n	8016146 <ip4_reass+0x13e>
      goto nullreturn;
 801610c:	e105      	b.n	801631a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016110:	88db      	ldrh	r3, [r3, #6]
 8016112:	b29b      	uxth	r3, r3
 8016114:	4618      	mov	r0, r3
 8016116:	f7f6 fa41 	bl	800c59c <lwip_htons>
 801611a:	4603      	mov	r3, r0
 801611c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016120:	2b00      	cmp	r3, #0
 8016122:	d110      	bne.n	8016146 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016126:	89db      	ldrh	r3, [r3, #14]
 8016128:	4618      	mov	r0, r3
 801612a:	f7f6 fa37 	bl	800c59c <lwip_htons>
 801612e:	4603      	mov	r3, r0
 8016130:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016134:	2b00      	cmp	r3, #0
 8016136:	d006      	beq.n	8016146 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801613a:	3308      	adds	r3, #8
 801613c:	2214      	movs	r2, #20
 801613e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016140:	4618      	mov	r0, r3
 8016142:	f001 f82b 	bl	801719c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016148:	88db      	ldrh	r3, [r3, #6]
 801614a:	b29b      	uxth	r3, r3
 801614c:	f003 0320 	and.w	r3, r3, #32
 8016150:	2b00      	cmp	r3, #0
 8016152:	bf0c      	ite	eq
 8016154:	2301      	moveq	r3, #1
 8016156:	2300      	movne	r3, #0
 8016158:	b2db      	uxtb	r3, r3
 801615a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801615c:	69fb      	ldr	r3, [r7, #28]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d00e      	beq.n	8016180 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016162:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016166:	4413      	add	r3, r2
 8016168:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801616a:	8b7a      	ldrh	r2, [r7, #26]
 801616c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801616e:	429a      	cmp	r2, r3
 8016170:	f0c0 80a0 	bcc.w	80162b4 <ip4_reass+0x2ac>
 8016174:	8b7b      	ldrh	r3, [r7, #26]
 8016176:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801617a:	4293      	cmp	r3, r2
 801617c:	f200 809a 	bhi.w	80162b4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016180:	69fa      	ldr	r2, [r7, #28]
 8016182:	6879      	ldr	r1, [r7, #4]
 8016184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016186:	f7ff fdd5 	bl	8015d34 <ip_reass_chain_frag_into_datagram_and_validate>
 801618a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801618c:	697b      	ldr	r3, [r7, #20]
 801618e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016192:	f000 809b 	beq.w	80162cc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016196:	4b48      	ldr	r3, [pc, #288]	; (80162b8 <ip4_reass+0x2b0>)
 8016198:	881a      	ldrh	r2, [r3, #0]
 801619a:	8c3b      	ldrh	r3, [r7, #32]
 801619c:	4413      	add	r3, r2
 801619e:	b29a      	uxth	r2, r3
 80161a0:	4b45      	ldr	r3, [pc, #276]	; (80162b8 <ip4_reass+0x2b0>)
 80161a2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80161a4:	69fb      	ldr	r3, [r7, #28]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d00d      	beq.n	80161c6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80161aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80161ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161ae:	4413      	add	r3, r2
 80161b0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80161b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161b4:	8a7a      	ldrh	r2, [r7, #18]
 80161b6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80161b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ba:	7f9b      	ldrb	r3, [r3, #30]
 80161bc:	f043 0301 	orr.w	r3, r3, #1
 80161c0:	b2da      	uxtb	r2, r3
 80161c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80161c6:	697b      	ldr	r3, [r7, #20]
 80161c8:	2b01      	cmp	r3, #1
 80161ca:	d171      	bne.n	80162b0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80161cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ce:	8b9b      	ldrh	r3, [r3, #28]
 80161d0:	3314      	adds	r3, #20
 80161d2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80161d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d6:	685b      	ldr	r3, [r3, #4]
 80161d8:	685b      	ldr	r3, [r3, #4]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80161de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	685b      	ldr	r3, [r3, #4]
 80161e4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80161e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161e8:	3308      	adds	r3, #8
 80161ea:	2214      	movs	r2, #20
 80161ec:	4619      	mov	r1, r3
 80161ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161f0:	f000 ffd4 	bl	801719c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80161f4:	8a3b      	ldrh	r3, [r7, #16]
 80161f6:	4618      	mov	r0, r3
 80161f8:	f7f6 f9d0 	bl	800c59c <lwip_htons>
 80161fc:	4603      	mov	r3, r0
 80161fe:	461a      	mov	r2, r3
 8016200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016202:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016206:	2200      	movs	r2, #0
 8016208:	719a      	strb	r2, [r3, #6]
 801620a:	2200      	movs	r2, #0
 801620c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016210:	2200      	movs	r2, #0
 8016212:	729a      	strb	r2, [r3, #10]
 8016214:	2200      	movs	r2, #0
 8016216:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621a:	685b      	ldr	r3, [r3, #4]
 801621c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801621e:	e00d      	b.n	801623c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016222:	685b      	ldr	r3, [r3, #4]
 8016224:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8016226:	2114      	movs	r1, #20
 8016228:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801622a:	f7f7 fc8f 	bl	800db4c <pbuf_remove_header>
      pbuf_cat(p, r);
 801622e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	f7f7 fdd3 	bl	800dddc <pbuf_cat>
      r = iprh->next_pbuf;
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801623c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801623e:	2b00      	cmp	r3, #0
 8016240:	d1ee      	bne.n	8016220 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016242:	4b1e      	ldr	r3, [pc, #120]	; (80162bc <ip4_reass+0x2b4>)
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016248:	429a      	cmp	r2, r3
 801624a:	d102      	bne.n	8016252 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801624c:	2300      	movs	r3, #0
 801624e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016250:	e010      	b.n	8016274 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016252:	4b1a      	ldr	r3, [pc, #104]	; (80162bc <ip4_reass+0x2b4>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016258:	e007      	b.n	801626a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801625a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016260:	429a      	cmp	r2, r3
 8016262:	d006      	beq.n	8016272 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	62fb      	str	r3, [r7, #44]	; 0x2c
 801626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801626c:	2b00      	cmp	r3, #0
 801626e:	d1f4      	bne.n	801625a <ip4_reass+0x252>
 8016270:	e000      	b.n	8016274 <ip4_reass+0x26c>
          break;
 8016272:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016274:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016278:	f7ff fd2e 	bl	8015cd8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801627c:	6878      	ldr	r0, [r7, #4]
 801627e:	f7f7 fd73 	bl	800dd68 <pbuf_clen>
 8016282:	4603      	mov	r3, r0
 8016284:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016286:	4b0c      	ldr	r3, [pc, #48]	; (80162b8 <ip4_reass+0x2b0>)
 8016288:	881b      	ldrh	r3, [r3, #0]
 801628a:	8c3a      	ldrh	r2, [r7, #32]
 801628c:	429a      	cmp	r2, r3
 801628e:	d906      	bls.n	801629e <ip4_reass+0x296>
 8016290:	4b0b      	ldr	r3, [pc, #44]	; (80162c0 <ip4_reass+0x2b8>)
 8016292:	f240 229b 	movw	r2, #667	; 0x29b
 8016296:	490b      	ldr	r1, [pc, #44]	; (80162c4 <ip4_reass+0x2bc>)
 8016298:	480b      	ldr	r0, [pc, #44]	; (80162c8 <ip4_reass+0x2c0>)
 801629a:	f000 ff95 	bl	80171c8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801629e:	4b06      	ldr	r3, [pc, #24]	; (80162b8 <ip4_reass+0x2b0>)
 80162a0:	881a      	ldrh	r2, [r3, #0]
 80162a2:	8c3b      	ldrh	r3, [r7, #32]
 80162a4:	1ad3      	subs	r3, r2, r3
 80162a6:	b29a      	uxth	r2, r3
 80162a8:	4b03      	ldr	r3, [pc, #12]	; (80162b8 <ip4_reass+0x2b0>)
 80162aa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	e038      	b.n	8016322 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80162b0:	2300      	movs	r3, #0
 80162b2:	e036      	b.n	8016322 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80162b4:	bf00      	nop
 80162b6:	e00a      	b.n	80162ce <ip4_reass+0x2c6>
 80162b8:	20009120 	.word	0x20009120
 80162bc:	2000911c 	.word	0x2000911c
 80162c0:	0801a9a4 	.word	0x0801a9a4
 80162c4:	0801ab14 	.word	0x0801ab14
 80162c8:	0801a9ec 	.word	0x0801a9ec
    goto nullreturn_ipr;
 80162cc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80162ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d106      	bne.n	80162e2 <ip4_reass+0x2da>
 80162d4:	4b15      	ldr	r3, [pc, #84]	; (801632c <ip4_reass+0x324>)
 80162d6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80162da:	4915      	ldr	r1, [pc, #84]	; (8016330 <ip4_reass+0x328>)
 80162dc:	4815      	ldr	r0, [pc, #84]	; (8016334 <ip4_reass+0x32c>)
 80162de:	f000 ff73 	bl	80171c8 <iprintf>
  if (ipr->p == NULL) {
 80162e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162e4:	685b      	ldr	r3, [r3, #4]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d116      	bne.n	8016318 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80162ea:	4b13      	ldr	r3, [pc, #76]	; (8016338 <ip4_reass+0x330>)
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162f0:	429a      	cmp	r2, r3
 80162f2:	d006      	beq.n	8016302 <ip4_reass+0x2fa>
 80162f4:	4b0d      	ldr	r3, [pc, #52]	; (801632c <ip4_reass+0x324>)
 80162f6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80162fa:	4910      	ldr	r1, [pc, #64]	; (801633c <ip4_reass+0x334>)
 80162fc:	480d      	ldr	r0, [pc, #52]	; (8016334 <ip4_reass+0x32c>)
 80162fe:	f000 ff63 	bl	80171c8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016302:	2100      	movs	r1, #0
 8016304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016306:	f7ff fce7 	bl	8015cd8 <ip_reass_dequeue_datagram>
 801630a:	e006      	b.n	801631a <ip4_reass+0x312>
    goto nullreturn;
 801630c:	bf00      	nop
 801630e:	e004      	b.n	801631a <ip4_reass+0x312>
    goto nullreturn;
 8016310:	bf00      	nop
 8016312:	e002      	b.n	801631a <ip4_reass+0x312>
      goto nullreturn;
 8016314:	bf00      	nop
 8016316:	e000      	b.n	801631a <ip4_reass+0x312>
  }

nullreturn:
 8016318:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f7f7 fc9c 	bl	800dc58 <pbuf_free>
  return NULL;
 8016320:	2300      	movs	r3, #0
}
 8016322:	4618      	mov	r0, r3
 8016324:	3738      	adds	r7, #56	; 0x38
 8016326:	46bd      	mov	sp, r7
 8016328:	bd80      	pop	{r7, pc}
 801632a:	bf00      	nop
 801632c:	0801a9a4 	.word	0x0801a9a4
 8016330:	0801ab30 	.word	0x0801ab30
 8016334:	0801a9ec 	.word	0x0801a9ec
 8016338:	2000911c 	.word	0x2000911c
 801633c:	0801ab3c 	.word	0x0801ab3c

08016340 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016340:	b580      	push	{r7, lr}
 8016342:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016344:	2005      	movs	r0, #5
 8016346:	f7f6 fda1 	bl	800ce8c <memp_malloc>
 801634a:	4603      	mov	r3, r0
}
 801634c:	4618      	mov	r0, r3
 801634e:	bd80      	pop	{r7, pc}

08016350 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b082      	sub	sp, #8
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	2b00      	cmp	r3, #0
 801635c:	d106      	bne.n	801636c <ip_frag_free_pbuf_custom_ref+0x1c>
 801635e:	4b07      	ldr	r3, [pc, #28]	; (801637c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016360:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016364:	4906      	ldr	r1, [pc, #24]	; (8016380 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016366:	4807      	ldr	r0, [pc, #28]	; (8016384 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016368:	f000 ff2e 	bl	80171c8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801636c:	6879      	ldr	r1, [r7, #4]
 801636e:	2005      	movs	r0, #5
 8016370:	f7f6 fdfc 	bl	800cf6c <memp_free>
}
 8016374:	bf00      	nop
 8016376:	3708      	adds	r7, #8
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}
 801637c:	0801a9a4 	.word	0x0801a9a4
 8016380:	0801ab5c 	.word	0x0801ab5c
 8016384:	0801a9ec 	.word	0x0801a9ec

08016388 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b084      	sub	sp, #16
 801638c:	af00      	add	r7, sp, #0
 801638e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	2b00      	cmp	r3, #0
 8016398:	d106      	bne.n	80163a8 <ipfrag_free_pbuf_custom+0x20>
 801639a:	4b11      	ldr	r3, [pc, #68]	; (80163e0 <ipfrag_free_pbuf_custom+0x58>)
 801639c:	f240 22ce 	movw	r2, #718	; 0x2ce
 80163a0:	4910      	ldr	r1, [pc, #64]	; (80163e4 <ipfrag_free_pbuf_custom+0x5c>)
 80163a2:	4811      	ldr	r0, [pc, #68]	; (80163e8 <ipfrag_free_pbuf_custom+0x60>)
 80163a4:	f000 ff10 	bl	80171c8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80163a8:	68fa      	ldr	r2, [r7, #12]
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	429a      	cmp	r2, r3
 80163ae:	d006      	beq.n	80163be <ipfrag_free_pbuf_custom+0x36>
 80163b0:	4b0b      	ldr	r3, [pc, #44]	; (80163e0 <ipfrag_free_pbuf_custom+0x58>)
 80163b2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80163b6:	490d      	ldr	r1, [pc, #52]	; (80163ec <ipfrag_free_pbuf_custom+0x64>)
 80163b8:	480b      	ldr	r0, [pc, #44]	; (80163e8 <ipfrag_free_pbuf_custom+0x60>)
 80163ba:	f000 ff05 	bl	80171c8 <iprintf>
  if (pcr->original != NULL) {
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	695b      	ldr	r3, [r3, #20]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d004      	beq.n	80163d0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80163c6:	68fb      	ldr	r3, [r7, #12]
 80163c8:	695b      	ldr	r3, [r3, #20]
 80163ca:	4618      	mov	r0, r3
 80163cc:	f7f7 fc44 	bl	800dc58 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80163d0:	68f8      	ldr	r0, [r7, #12]
 80163d2:	f7ff ffbd 	bl	8016350 <ip_frag_free_pbuf_custom_ref>
}
 80163d6:	bf00      	nop
 80163d8:	3710      	adds	r7, #16
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}
 80163de:	bf00      	nop
 80163e0:	0801a9a4 	.word	0x0801a9a4
 80163e4:	0801ab68 	.word	0x0801ab68
 80163e8:	0801a9ec 	.word	0x0801a9ec
 80163ec:	0801ab74 	.word	0x0801ab74

080163f0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b094      	sub	sp, #80	; 0x50
 80163f4:	af02      	add	r7, sp, #8
 80163f6:	60f8      	str	r0, [r7, #12]
 80163f8:	60b9      	str	r1, [r7, #8]
 80163fa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80163fc:	2300      	movs	r3, #0
 80163fe:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016406:	3b14      	subs	r3, #20
 8016408:	2b00      	cmp	r3, #0
 801640a:	da00      	bge.n	801640e <ip4_frag+0x1e>
 801640c:	3307      	adds	r3, #7
 801640e:	10db      	asrs	r3, r3, #3
 8016410:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016412:	2314      	movs	r3, #20
 8016414:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	685b      	ldr	r3, [r3, #4]
 801641a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801641c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801641e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016422:	781b      	ldrb	r3, [r3, #0]
 8016424:	f003 030f 	and.w	r3, r3, #15
 8016428:	b2db      	uxtb	r3, r3
 801642a:	009b      	lsls	r3, r3, #2
 801642c:	b2db      	uxtb	r3, r3
 801642e:	2b14      	cmp	r3, #20
 8016430:	d002      	beq.n	8016438 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016432:	f06f 0305 	mvn.w	r3, #5
 8016436:	e110      	b.n	801665a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	895b      	ldrh	r3, [r3, #10]
 801643c:	2b13      	cmp	r3, #19
 801643e:	d809      	bhi.n	8016454 <ip4_frag+0x64>
 8016440:	4b88      	ldr	r3, [pc, #544]	; (8016664 <ip4_frag+0x274>)
 8016442:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016446:	4988      	ldr	r1, [pc, #544]	; (8016668 <ip4_frag+0x278>)
 8016448:	4888      	ldr	r0, [pc, #544]	; (801666c <ip4_frag+0x27c>)
 801644a:	f000 febd 	bl	80171c8 <iprintf>
 801644e:	f06f 0305 	mvn.w	r3, #5
 8016452:	e102      	b.n	801665a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016456:	88db      	ldrh	r3, [r3, #6]
 8016458:	b29b      	uxth	r3, r3
 801645a:	4618      	mov	r0, r3
 801645c:	f7f6 f89e 	bl	800c59c <lwip_htons>
 8016460:	4603      	mov	r3, r0
 8016462:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016464:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016466:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801646a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801646e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016474:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	891b      	ldrh	r3, [r3, #8]
 801647a:	3b14      	subs	r3, #20
 801647c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016480:	e0e1      	b.n	8016646 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016482:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016484:	00db      	lsls	r3, r3, #3
 8016486:	b29b      	uxth	r3, r3
 8016488:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801648c:	4293      	cmp	r3, r2
 801648e:	bf28      	it	cs
 8016490:	4613      	movcs	r3, r2
 8016492:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016494:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016498:	2114      	movs	r1, #20
 801649a:	200e      	movs	r0, #14
 801649c:	f7f7 f8f8 	bl	800d690 <pbuf_alloc>
 80164a0:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80164a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	f000 80d5 	beq.w	8016654 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80164aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ac:	895b      	ldrh	r3, [r3, #10]
 80164ae:	2b13      	cmp	r3, #19
 80164b0:	d806      	bhi.n	80164c0 <ip4_frag+0xd0>
 80164b2:	4b6c      	ldr	r3, [pc, #432]	; (8016664 <ip4_frag+0x274>)
 80164b4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80164b8:	496d      	ldr	r1, [pc, #436]	; (8016670 <ip4_frag+0x280>)
 80164ba:	486c      	ldr	r0, [pc, #432]	; (801666c <ip4_frag+0x27c>)
 80164bc:	f000 fe84 	bl	80171c8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80164c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c2:	685b      	ldr	r3, [r3, #4]
 80164c4:	2214      	movs	r2, #20
 80164c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80164c8:	4618      	mov	r0, r3
 80164ca:	f000 fe67 	bl	801719c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80164ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164d0:	685b      	ldr	r3, [r3, #4]
 80164d2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80164d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80164d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80164da:	e064      	b.n	80165a6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	895a      	ldrh	r2, [r3, #10]
 80164e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164e2:	1ad3      	subs	r3, r2, r3
 80164e4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	895b      	ldrh	r3, [r3, #10]
 80164ea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80164ec:	429a      	cmp	r2, r3
 80164ee:	d906      	bls.n	80164fe <ip4_frag+0x10e>
 80164f0:	4b5c      	ldr	r3, [pc, #368]	; (8016664 <ip4_frag+0x274>)
 80164f2:	f240 322d 	movw	r2, #813	; 0x32d
 80164f6:	495f      	ldr	r1, [pc, #380]	; (8016674 <ip4_frag+0x284>)
 80164f8:	485c      	ldr	r0, [pc, #368]	; (801666c <ip4_frag+0x27c>)
 80164fa:	f000 fe65 	bl	80171c8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80164fe:	8bfa      	ldrh	r2, [r7, #30]
 8016500:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016504:	4293      	cmp	r3, r2
 8016506:	bf28      	it	cs
 8016508:	4613      	movcs	r3, r2
 801650a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801650e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016512:	2b00      	cmp	r3, #0
 8016514:	d105      	bne.n	8016522 <ip4_frag+0x132>
        poff = 0;
 8016516:	2300      	movs	r3, #0
 8016518:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	60fb      	str	r3, [r7, #12]
        continue;
 8016520:	e041      	b.n	80165a6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016522:	f7ff ff0d 	bl	8016340 <ip_frag_alloc_pbuf_custom_ref>
 8016526:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016528:	69bb      	ldr	r3, [r7, #24]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d103      	bne.n	8016536 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801652e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016530:	f7f7 fb92 	bl	800dc58 <pbuf_free>
        goto memerr;
 8016534:	e08f      	b.n	8016656 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016536:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801653c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801653e:	4413      	add	r3, r2
 8016540:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016544:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016548:	9201      	str	r2, [sp, #4]
 801654a:	9300      	str	r3, [sp, #0]
 801654c:	4603      	mov	r3, r0
 801654e:	2241      	movs	r2, #65	; 0x41
 8016550:	2000      	movs	r0, #0
 8016552:	f7f7 f9c7 	bl	800d8e4 <pbuf_alloced_custom>
 8016556:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d106      	bne.n	801656c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801655e:	69b8      	ldr	r0, [r7, #24]
 8016560:	f7ff fef6 	bl	8016350 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016564:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016566:	f7f7 fb77 	bl	800dc58 <pbuf_free>
        goto memerr;
 801656a:	e074      	b.n	8016656 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801656c:	68f8      	ldr	r0, [r7, #12]
 801656e:	f7f7 fc13 	bl	800dd98 <pbuf_ref>
      pcr->original = p;
 8016572:	69bb      	ldr	r3, [r7, #24]
 8016574:	68fa      	ldr	r2, [r7, #12]
 8016576:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016578:	69bb      	ldr	r3, [r7, #24]
 801657a:	4a3f      	ldr	r2, [pc, #252]	; (8016678 <ip4_frag+0x288>)
 801657c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801657e:	6979      	ldr	r1, [r7, #20]
 8016580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016582:	f7f7 fc2b 	bl	800dddc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016586:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801658a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801658e:	1ad3      	subs	r3, r2, r3
 8016590:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016594:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016598:	2b00      	cmp	r3, #0
 801659a:	d004      	beq.n	80165a6 <ip4_frag+0x1b6>
        poff = 0;
 801659c:	2300      	movs	r3, #0
 801659e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80165a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d196      	bne.n	80164dc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80165ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80165b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80165b4:	4413      	add	r3, r2
 80165b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80165b8:	68bb      	ldr	r3, [r7, #8]
 80165ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80165bc:	f1a3 0213 	sub.w	r2, r3, #19
 80165c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80165c4:	429a      	cmp	r2, r3
 80165c6:	bfcc      	ite	gt
 80165c8:	2301      	movgt	r3, #1
 80165ca:	2300      	movle	r3, #0
 80165cc:	b2db      	uxtb	r3, r3
 80165ce:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80165d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80165d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80165d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80165da:	6a3b      	ldr	r3, [r7, #32]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d002      	beq.n	80165e6 <ip4_frag+0x1f6>
 80165e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d003      	beq.n	80165ee <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80165e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80165ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80165ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7f5 ffd3 	bl	800c59c <lwip_htons>
 80165f6:	4603      	mov	r3, r0
 80165f8:	461a      	mov	r2, r3
 80165fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165fc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80165fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016600:	3314      	adds	r3, #20
 8016602:	b29b      	uxth	r3, r3
 8016604:	4618      	mov	r0, r3
 8016606:	f7f5 ffc9 	bl	800c59c <lwip_htons>
 801660a:	4603      	mov	r3, r0
 801660c:	461a      	mov	r2, r3
 801660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016610:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016614:	2200      	movs	r2, #0
 8016616:	729a      	strb	r2, [r3, #10]
 8016618:	2200      	movs	r2, #0
 801661a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801661c:	68bb      	ldr	r3, [r7, #8]
 801661e:	695b      	ldr	r3, [r3, #20]
 8016620:	687a      	ldr	r2, [r7, #4]
 8016622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016624:	68b8      	ldr	r0, [r7, #8]
 8016626:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016628:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801662a:	f7f7 fb15 	bl	800dc58 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801662e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016632:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016634:	1ad3      	subs	r3, r2, r3
 8016636:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801663a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801663e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016640:	4413      	add	r3, r2
 8016642:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016646:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801664a:	2b00      	cmp	r3, #0
 801664c:	f47f af19 	bne.w	8016482 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016650:	2300      	movs	r3, #0
 8016652:	e002      	b.n	801665a <ip4_frag+0x26a>
      goto memerr;
 8016654:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801665a:	4618      	mov	r0, r3
 801665c:	3748      	adds	r7, #72	; 0x48
 801665e:	46bd      	mov	sp, r7
 8016660:	bd80      	pop	{r7, pc}
 8016662:	bf00      	nop
 8016664:	0801a9a4 	.word	0x0801a9a4
 8016668:	0801ab80 	.word	0x0801ab80
 801666c:	0801a9ec 	.word	0x0801a9ec
 8016670:	0801ab9c 	.word	0x0801ab9c
 8016674:	0801abbc 	.word	0x0801abbc
 8016678:	08016389 	.word	0x08016389

0801667c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801667c:	b580      	push	{r7, lr}
 801667e:	b086      	sub	sp, #24
 8016680:	af00      	add	r7, sp, #0
 8016682:	6078      	str	r0, [r7, #4]
 8016684:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016686:	230e      	movs	r3, #14
 8016688:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	895b      	ldrh	r3, [r3, #10]
 801668e:	2b0e      	cmp	r3, #14
 8016690:	d96e      	bls.n	8016770 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	7bdb      	ldrb	r3, [r3, #15]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d106      	bne.n	80166a8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80166a0:	3301      	adds	r3, #1
 80166a2:	b2da      	uxtb	r2, r3
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	685b      	ldr	r3, [r3, #4]
 80166ac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80166ae:	693b      	ldr	r3, [r7, #16]
 80166b0:	7b1a      	ldrb	r2, [r3, #12]
 80166b2:	7b5b      	ldrb	r3, [r3, #13]
 80166b4:	021b      	lsls	r3, r3, #8
 80166b6:	4313      	orrs	r3, r2
 80166b8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80166ba:	693b      	ldr	r3, [r7, #16]
 80166bc:	781b      	ldrb	r3, [r3, #0]
 80166be:	f003 0301 	and.w	r3, r3, #1
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d023      	beq.n	801670e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80166c6:	693b      	ldr	r3, [r7, #16]
 80166c8:	781b      	ldrb	r3, [r3, #0]
 80166ca:	2b01      	cmp	r3, #1
 80166cc:	d10f      	bne.n	80166ee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80166ce:	693b      	ldr	r3, [r7, #16]
 80166d0:	785b      	ldrb	r3, [r3, #1]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d11b      	bne.n	801670e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80166d6:	693b      	ldr	r3, [r7, #16]
 80166d8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80166da:	2b5e      	cmp	r3, #94	; 0x5e
 80166dc:	d117      	bne.n	801670e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	7b5b      	ldrb	r3, [r3, #13]
 80166e2:	f043 0310 	orr.w	r3, r3, #16
 80166e6:	b2da      	uxtb	r2, r3
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	735a      	strb	r2, [r3, #13]
 80166ec:	e00f      	b.n	801670e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80166ee:	693b      	ldr	r3, [r7, #16]
 80166f0:	2206      	movs	r2, #6
 80166f2:	4928      	ldr	r1, [pc, #160]	; (8016794 <ethernet_input+0x118>)
 80166f4:	4618      	mov	r0, r3
 80166f6:	f000 fd41 	bl	801717c <memcmp>
 80166fa:	4603      	mov	r3, r0
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d106      	bne.n	801670e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	7b5b      	ldrb	r3, [r3, #13]
 8016704:	f043 0308 	orr.w	r3, r3, #8
 8016708:	b2da      	uxtb	r2, r3
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801670e:	89fb      	ldrh	r3, [r7, #14]
 8016710:	2b08      	cmp	r3, #8
 8016712:	d003      	beq.n	801671c <ethernet_input+0xa0>
 8016714:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016718:	d014      	beq.n	8016744 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801671a:	e032      	b.n	8016782 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801671c:	683b      	ldr	r3, [r7, #0]
 801671e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016722:	f003 0308 	and.w	r3, r3, #8
 8016726:	2b00      	cmp	r3, #0
 8016728:	d024      	beq.n	8016774 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801672a:	8afb      	ldrh	r3, [r7, #22]
 801672c:	4619      	mov	r1, r3
 801672e:	6878      	ldr	r0, [r7, #4]
 8016730:	f7f7 fa0c 	bl	800db4c <pbuf_remove_header>
 8016734:	4603      	mov	r3, r0
 8016736:	2b00      	cmp	r3, #0
 8016738:	d11e      	bne.n	8016778 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801673a:	6839      	ldr	r1, [r7, #0]
 801673c:	6878      	ldr	r0, [r7, #4]
 801673e:	f7fe ff21 	bl	8015584 <ip4_input>
      break;
 8016742:	e013      	b.n	801676c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016744:	683b      	ldr	r3, [r7, #0]
 8016746:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801674a:	f003 0308 	and.w	r3, r3, #8
 801674e:	2b00      	cmp	r3, #0
 8016750:	d014      	beq.n	801677c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016752:	8afb      	ldrh	r3, [r7, #22]
 8016754:	4619      	mov	r1, r3
 8016756:	6878      	ldr	r0, [r7, #4]
 8016758:	f7f7 f9f8 	bl	800db4c <pbuf_remove_header>
 801675c:	4603      	mov	r3, r0
 801675e:	2b00      	cmp	r3, #0
 8016760:	d10e      	bne.n	8016780 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016762:	6839      	ldr	r1, [r7, #0]
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	f7fe f8c1 	bl	80148ec <etharp_input>
      break;
 801676a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801676c:	2300      	movs	r3, #0
 801676e:	e00c      	b.n	801678a <ethernet_input+0x10e>
    goto free_and_return;
 8016770:	bf00      	nop
 8016772:	e006      	b.n	8016782 <ethernet_input+0x106>
        goto free_and_return;
 8016774:	bf00      	nop
 8016776:	e004      	b.n	8016782 <ethernet_input+0x106>
        goto free_and_return;
 8016778:	bf00      	nop
 801677a:	e002      	b.n	8016782 <ethernet_input+0x106>
        goto free_and_return;
 801677c:	bf00      	nop
 801677e:	e000      	b.n	8016782 <ethernet_input+0x106>
        goto free_and_return;
 8016780:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016782:	6878      	ldr	r0, [r7, #4]
 8016784:	f7f7 fa68 	bl	800dc58 <pbuf_free>
  return ERR_OK;
 8016788:	2300      	movs	r3, #0
}
 801678a:	4618      	mov	r0, r3
 801678c:	3718      	adds	r7, #24
 801678e:	46bd      	mov	sp, r7
 8016790:	bd80      	pop	{r7, pc}
 8016792:	bf00      	nop
 8016794:	0801ad60 	.word	0x0801ad60

08016798 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016798:	b580      	push	{r7, lr}
 801679a:	b086      	sub	sp, #24
 801679c:	af00      	add	r7, sp, #0
 801679e:	60f8      	str	r0, [r7, #12]
 80167a0:	60b9      	str	r1, [r7, #8]
 80167a2:	607a      	str	r2, [r7, #4]
 80167a4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80167a6:	8c3b      	ldrh	r3, [r7, #32]
 80167a8:	4618      	mov	r0, r3
 80167aa:	f7f5 fef7 	bl	800c59c <lwip_htons>
 80167ae:	4603      	mov	r3, r0
 80167b0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80167b2:	210e      	movs	r1, #14
 80167b4:	68b8      	ldr	r0, [r7, #8]
 80167b6:	f7f7 f9b9 	bl	800db2c <pbuf_add_header>
 80167ba:	4603      	mov	r3, r0
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d125      	bne.n	801680c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80167c0:	68bb      	ldr	r3, [r7, #8]
 80167c2:	685b      	ldr	r3, [r3, #4]
 80167c4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80167c6:	693b      	ldr	r3, [r7, #16]
 80167c8:	8afa      	ldrh	r2, [r7, #22]
 80167ca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80167cc:	693b      	ldr	r3, [r7, #16]
 80167ce:	2206      	movs	r2, #6
 80167d0:	6839      	ldr	r1, [r7, #0]
 80167d2:	4618      	mov	r0, r3
 80167d4:	f000 fce2 	bl	801719c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	3306      	adds	r3, #6
 80167dc:	2206      	movs	r2, #6
 80167de:	6879      	ldr	r1, [r7, #4]
 80167e0:	4618      	mov	r0, r3
 80167e2:	f000 fcdb 	bl	801719c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80167e6:	68fb      	ldr	r3, [r7, #12]
 80167e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80167ec:	2b06      	cmp	r3, #6
 80167ee:	d006      	beq.n	80167fe <ethernet_output+0x66>
 80167f0:	4b0a      	ldr	r3, [pc, #40]	; (801681c <ethernet_output+0x84>)
 80167f2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80167f6:	490a      	ldr	r1, [pc, #40]	; (8016820 <ethernet_output+0x88>)
 80167f8:	480a      	ldr	r0, [pc, #40]	; (8016824 <ethernet_output+0x8c>)
 80167fa:	f000 fce5 	bl	80171c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80167fe:	68fb      	ldr	r3, [r7, #12]
 8016800:	699b      	ldr	r3, [r3, #24]
 8016802:	68b9      	ldr	r1, [r7, #8]
 8016804:	68f8      	ldr	r0, [r7, #12]
 8016806:	4798      	blx	r3
 8016808:	4603      	mov	r3, r0
 801680a:	e002      	b.n	8016812 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801680c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801680e:	f06f 0301 	mvn.w	r3, #1
}
 8016812:	4618      	mov	r0, r3
 8016814:	3718      	adds	r7, #24
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}
 801681a:	bf00      	nop
 801681c:	0801abcc 	.word	0x0801abcc
 8016820:	0801ac04 	.word	0x0801ac04
 8016824:	0801ac38 	.word	0x0801ac38

08016828 <HAL_ADC_ConvCpltCallback>:
/**@brief the flag of the adc when interrupt ISR called */
uint8_t adc_callback_flag = ADC_FLAG_RESET;

/**@brief the complete convertion callback function this implentations */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8016828:	b480      	push	{r7}
 801682a:	b083      	sub	sp, #12
 801682c:	af00      	add	r7, sp, #0
 801682e:	6078      	str	r0, [r7, #4]
	if(hadc == ADC_HANDLE_ADDR)
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	4a06      	ldr	r2, [pc, #24]	; (801684c <HAL_ADC_ConvCpltCallback+0x24>)
 8016834:	4293      	cmp	r3, r2
 8016836:	d102      	bne.n	801683e <HAL_ADC_ConvCpltCallback+0x16>
	{
		/* just set the callback to indicate CPU convertion completed */
		adc_callback_flag = ADC_FLAG_SET;
 8016838:	4b05      	ldr	r3, [pc, #20]	; (8016850 <HAL_ADC_ConvCpltCallback+0x28>)
 801683a:	2201      	movs	r2, #1
 801683c:	701a      	strb	r2, [r3, #0]
	}
}
 801683e:	bf00      	nop
 8016840:	370c      	adds	r7, #12
 8016842:	46bd      	mov	sp, r7
 8016844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016848:	4770      	bx	lr
 801684a:	bf00      	nop
 801684c:	200001ec 	.word	0x200001ec
 8016850:	20009128 	.word	0x20009128

08016854 <ADC_UUT_DMA>:
 * @return	return TEST_SUCCEED 0x01 if test pass, otherwise TEST_FAILED 0xff. if one of the iterations fails
 * 			the whole test fails and returning TEST_FAILED if all tests iterations passed at the end return
 * 			TEST_SUCCEED 0x01.
 */
t_status ADC_UUT_DMA(uint8_t iterations)
{
 8016854:	b580      	push	{r7, lr}
 8016856:	b084      	sub	sp, #16
 8016858:	af00      	add	r7, sp, #0
 801685a:	4603      	mov	r3, r0
 801685c:	71fb      	strb	r3, [r7, #7]
	/* start the dma functionality */
	HAL_ADC_Start_DMA(ADC_HANDLE_ADDR, &adc_value, (uint32_t)ADC_NUM_OF_SAMPLES);
 801685e:	2201      	movs	r2, #1
 8016860:	491a      	ldr	r1, [pc, #104]	; (80168cc <ADC_UUT_DMA+0x78>)
 8016862:	481b      	ldr	r0, [pc, #108]	; (80168d0 <ADC_UUT_DMA+0x7c>)
 8016864:	f7ec faae 	bl	8002dc4 <HAL_ADC_Start_DMA>

	/* the status to check the functions in the iterations */
	HAL_StatusTypeDef status = HAL_ERROR;
 8016868:	2301      	movs	r3, #1
 801686a:	73fb      	strb	r3, [r7, #15]

	while(iterations)
 801686c:	e026      	b.n	80168bc <ADC_UUT_DMA+0x68>
	{

		/* start ADC convertion */
		status = HAL_ADC_Start(ADC_HANDLE_ADDR);
 801686e:	4818      	ldr	r0, [pc, #96]	; (80168d0 <ADC_UUT_DMA+0x7c>)
 8016870:	f7ec f8ca 	bl	8002a08 <HAL_ADC_Start>
 8016874:	4603      	mov	r3, r0
 8016876:	73fb      	strb	r3, [r7, #15]

		/* check if start correctly */
		if(status != HAL_OK)
 8016878:	7bfb      	ldrb	r3, [r7, #15]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d001      	beq.n	8016882 <ADC_UUT_DMA+0x2e>
		{
			return TEST_FAILED;
 801687e:	23ff      	movs	r3, #255	; 0xff
 8016880:	e020      	b.n	80168c4 <ADC_UUT_DMA+0x70>
		}

		/* the time delay needed for the flag to be synchronize with the right value. (i.e. ADC_FLAG_SET) */
		ADC_SYNC_TIME;
 8016882:	2000      	movs	r0, #0
 8016884:	f7ec f858 	bl	8002938 <HAL_Delay>

		/* if callback is set the ADC finished need to check the value against expeceted */
		if(adc_callback_flag == ADC_FLAG_SET)
 8016888:	4b12      	ldr	r3, [pc, #72]	; (80168d4 <ADC_UUT_DMA+0x80>)
 801688a:	781b      	ldrb	r3, [r3, #0]
 801688c:	2b01      	cmp	r3, #1
 801688e:	d112      	bne.n	80168b6 <ADC_UUT_DMA+0x62>
		{
			/* check if ADC expected value is between the deviation allowed ADC_VAL +/- DEVIATION if it is continue to next iteration */
			if(! (ADC_EXPECTED_VALUE - ADC_DEVIATION <= adc_value && adc_value <= ADC_EXPECTED_VALUE + ADC_DEVIATION ))
 8016890:	4b0e      	ldr	r3, [pc, #56]	; (80168cc <ADC_UUT_DMA+0x78>)
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	f5b3 6f7b 	cmp.w	r3, #4016	; 0xfb0
 8016898:	d305      	bcc.n	80168a6 <ADC_UUT_DMA+0x52>
 801689a:	4b0c      	ldr	r3, [pc, #48]	; (80168cc <ADC_UUT_DMA+0x78>)
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	f241 0250 	movw	r2, #4176	; 0x1050
 80168a2:	4293      	cmp	r3, r2
 80168a4:	d904      	bls.n	80168b0 <ADC_UUT_DMA+0x5c>
			{
				/* reset the callback flag */
				adc_callback_flag = ADC_FLAG_RESET;
 80168a6:	4b0b      	ldr	r3, [pc, #44]	; (80168d4 <ADC_UUT_DMA+0x80>)
 80168a8:	2200      	movs	r2, #0
 80168aa:	701a      	strb	r2, [r3, #0]
				return TEST_FAILED;
 80168ac:	23ff      	movs	r3, #255	; 0xff
 80168ae:	e009      	b.n	80168c4 <ADC_UUT_DMA+0x70>
			}
			/* reset the callback flag */
			adc_callback_flag = ADC_FLAG_RESET;
 80168b0:	4b08      	ldr	r3, [pc, #32]	; (80168d4 <ADC_UUT_DMA+0x80>)
 80168b2:	2200      	movs	r2, #0
 80168b4:	701a      	strb	r2, [r3, #0]
		}


		--iterations;
 80168b6:	79fb      	ldrb	r3, [r7, #7]
 80168b8:	3b01      	subs	r3, #1
 80168ba:	71fb      	strb	r3, [r7, #7]
	while(iterations)
 80168bc:	79fb      	ldrb	r3, [r7, #7]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d1d5      	bne.n	801686e <ADC_UUT_DMA+0x1a>
	}

	/* if all iterations passed return TEST passed successfully */
	return TEST_SUCCEED;
 80168c2:	2301      	movs	r3, #1
}
 80168c4:	4618      	mov	r0, r3
 80168c6:	3710      	adds	r7, #16
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bd80      	pop	{r7, pc}
 80168cc:	20009124 	.word	0x20009124
 80168d0:	200001ec 	.word	0x200001ec
 80168d4:	20009128 	.word	0x20009128

080168d8 <_write>:
	return ch;
}

/**@brief used for printf from the the terminal that connected to the port of the USB redirect printf*/
int _write(int file, char *ptr, int len)
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b084      	sub	sp, #16
 80168dc:	af00      	add	r7, sp, #0
 80168de:	60f8      	str	r0, [r7, #12]
 80168e0:	60b9      	str	r1, [r7, #8]
 80168e2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, len, 0xFFFF);
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	b29a      	uxth	r2, r3
 80168e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80168ec:	68b9      	ldr	r1, [r7, #8]
 80168ee:	4804      	ldr	r0, [pc, #16]	; (8016900 <_write+0x28>)
 80168f0:	f7f3 fa7e 	bl	8009df0 <HAL_UART_Transmit>
	return len;
 80168f4:	687b      	ldr	r3, [r7, #4]
}
 80168f6:	4618      	mov	r0, r3
 80168f8:	3710      	adds	r7, #16
 80168fa:	46bd      	mov	sp, r7
 80168fc:	bd80      	pop	{r7, pc}
 80168fe:	bf00      	nop
 8016900:	200007d8 	.word	0x200007d8

08016904 <_read>:

/**@brief used for scanf from the the terminal that connected to the port of the USB redirect scanf*/
int _read(int file, char *ptr, int len)
{
 8016904:	b580      	push	{r7, lr}
 8016906:	b086      	sub	sp, #24
 8016908:	af00      	add	r7, sp, #0
 801690a:	60f8      	str	r0, [r7, #12]
 801690c:	60b9      	str	r1, [r7, #8]
 801690e:	607a      	str	r2, [r7, #4]
	int ch=0;
 8016910:	2300      	movs	r3, #0
 8016912:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUG, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8016914:	f107 0114 	add.w	r1, r7, #20
 8016918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801691c:	2201      	movs	r2, #1
 801691e:	4817      	ldr	r0, [pc, #92]	; (801697c <_read+0x78>)
 8016920:	f7f3 fae9 	bl	8009ef6 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8016924:	f107 0114 	add.w	r1, r7, #20
 8016928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801692c:	2201      	movs	r2, #1
 801692e:	4813      	ldr	r0, [pc, #76]	; (801697c <_read+0x78>)
 8016930:	f7f3 fa5e 	bl	8009df0 <HAL_UART_Transmit>
	if(ch==13)
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	2b0d      	cmp	r3, #13
 8016938:	d10a      	bne.n	8016950 <_read+0x4c>
	{
		ch=10;
 801693a:	230a      	movs	r3, #10
 801693c:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 801693e:	f107 0114 	add.w	r1, r7, #20
 8016942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016946:	2201      	movs	r2, #1
 8016948:	480c      	ldr	r0, [pc, #48]	; (801697c <_read+0x78>)
 801694a:	f7f3 fa51 	bl	8009df0 <HAL_UART_Transmit>
 801694e:	e00c      	b.n	801696a <_read+0x66>
	}
	else if(ch==8)
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	2b08      	cmp	r3, #8
 8016954:	d109      	bne.n	801696a <_read+0x66>
	{
		ch=0x30;
 8016956:	2330      	movs	r3, #48	; 0x30
 8016958:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 801695a:	f107 0114 	add.w	r1, r7, #20
 801695e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016962:	2201      	movs	r2, #1
 8016964:	4805      	ldr	r0, [pc, #20]	; (801697c <_read+0x78>)
 8016966:	f7f3 fa43 	bl	8009df0 <HAL_UART_Transmit>
	}

	*ptr=ch;
 801696a:	697b      	ldr	r3, [r7, #20]
 801696c:	b2da      	uxtb	r2, r3
 801696e:	68bb      	ldr	r3, [r7, #8]
 8016970:	701a      	strb	r2, [r3, #0]

	return 1;
 8016972:	2301      	movs	r3, #1
}
 8016974:	4618      	mov	r0, r3
 8016976:	3718      	adds	r7, #24
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}
 801697c:	200007d8 	.word	0x200007d8

08016980 <I2C_UUT_DMA>:
 * @param 	iterations				running tests number of iterations.
 * @return number of iterations will be run, each iteration if bit pattern at start of the communication
 * 		   equals to the same as in the end RETURN 0xff TEST_FAILED, otherwise  0X01 TEST_SUCCEED.
 */
t_status I2C_UUT_DMA(uint8_t *bit_pattern, uint8_t bit_pattern_length, uint8_t iterations)
{
 8016980:	b580      	push	{r7, lr}
 8016982:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8016986:	af00      	add	r7, sp, #0
 8016988:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801698c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8016990:	6018      	str	r0, [r3, #0]
 8016992:	4608      	mov	r0, r1
 8016994:	4611      	mov	r1, r2
 8016996:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801699a:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 801699e:	4602      	mov	r2, r0
 80169a0:	701a      	strb	r2, [r3, #0]
 80169a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80169a6:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 80169aa:	460a      	mov	r2, r1
 80169ac:	701a      	strb	r2, [r3, #0]
	/* define and declare local buffers for slave and master */
	uint8_t local_buffer_slave[MAX_I2C_SLAVE_BUFFER_SIZE] = INIT_ALL_ZERO;
 80169ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80169b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80169b6:	2200      	movs	r2, #0
 80169b8:	601a      	str	r2, [r3, #0]
 80169ba:	3304      	adds	r3, #4
 80169bc:	22fb      	movs	r2, #251	; 0xfb
 80169be:	2100      	movs	r1, #0
 80169c0:	4618      	mov	r0, r3
 80169c2:	f000 fbf9 	bl	80171b8 <memset>
	uint8_t local_buffer_master[MAX_I2C_MASTER_BUFFER_SIZE] = INIT_ALL_ZERO;
 80169c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80169ca:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 80169ce:	2200      	movs	r2, #0
 80169d0:	601a      	str	r2, [r3, #0]
 80169d2:	3304      	adds	r3, #4
 80169d4:	22fb      	movs	r2, #251	; 0xfb
 80169d6:	2100      	movs	r1, #0
 80169d8:	4618      	mov	r0, r3
 80169da:	f000 fbed 	bl	80171b8 <memset>

	/* check status of receive transmit, error detection. (maby wire disconnected) */
	HAL_StatusTypeDef status = HAL_ERROR;
 80169de:	2301      	movs	r3, #1
 80169e0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	while(iterations)
 80169e4:	e076      	b.n	8016ad4 <I2C_UUT_DMA+0x154>
	{
		/* Master -> Slave */
		status = HAL_I2C_Slave_Receive_DMA(I2C_SLAVE, local_buffer_slave, bit_pattern_length);
 80169e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80169ea:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 80169ee:	781b      	ldrb	r3, [r3, #0]
 80169f0:	b29a      	uxth	r2, r3
 80169f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80169f6:	4619      	mov	r1, r3
 80169f8:	483d      	ldr	r0, [pc, #244]	; (8016af0 <I2C_UUT_DMA+0x170>)
 80169fa:	f7ef f8eb 	bl	8005bd4 <HAL_I2C_Slave_Receive_DMA>
 80169fe:	4603      	mov	r3, r0
 8016a00:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8016a04:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d001      	beq.n	8016a10 <I2C_UUT_DMA+0x90>
		{
			return TEST_FAILED;
 8016a0c:	23ff      	movs	r3, #255	; 0xff
 8016a0e:	e069      	b.n	8016ae4 <I2C_UUT_DMA+0x164>
		}

		status = HAL_I2C_Master_Transmit_DMA(I2C_MASTER, I2C_SLAVE_ADDRESS, (uint8_t *)bit_pattern, bit_pattern_length);
 8016a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016a14:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	b29b      	uxth	r3, r3
 8016a1c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8016a20:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 8016a24:	6812      	ldr	r2, [r2, #0]
 8016a26:	210f      	movs	r1, #15
 8016a28:	4832      	ldr	r0, [pc, #200]	; (8016af4 <I2C_UUT_DMA+0x174>)
 8016a2a:	f7ee fe3d 	bl	80056a8 <HAL_I2C_Master_Transmit_DMA>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8016a34:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d001      	beq.n	8016a40 <I2C_UUT_DMA+0xc0>
		{
			return TEST_FAILED;
 8016a3c:	23ff      	movs	r3, #255	; 0xff
 8016a3e:	e051      	b.n	8016ae4 <I2C_UUT_DMA+0x164>
		}
		/* end commands Master -> Slave */

		/* Delay between DMA transmissions **too fast, data may not be send back properly */
		I2C_HAL_DELAY_2MS;
 8016a40:	2002      	movs	r0, #2
 8016a42:	f7eb ff79 	bl	8002938 <HAL_Delay>

		/* Slave -> Master */
		status = HAL_I2C_Master_Receive_DMA(I2C_MASTER, I2C_SLAVE_ADDRESS, local_buffer_master, bit_pattern_length);
 8016a46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016a4a:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8016a4e:	781b      	ldrb	r3, [r3, #0]
 8016a50:	b29b      	uxth	r3, r3
 8016a52:	f107 0208 	add.w	r2, r7, #8
 8016a56:	210f      	movs	r1, #15
 8016a58:	4826      	ldr	r0, [pc, #152]	; (8016af4 <I2C_UUT_DMA+0x174>)
 8016a5a:	f7ee ff15 	bl	8005888 <HAL_I2C_Master_Receive_DMA>
 8016a5e:	4603      	mov	r3, r0
 8016a60:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8016a64:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d001      	beq.n	8016a70 <I2C_UUT_DMA+0xf0>
		{
			return TEST_FAILED;
 8016a6c:	23ff      	movs	r3, #255	; 0xff
 8016a6e:	e039      	b.n	8016ae4 <I2C_UUT_DMA+0x164>
		}

		status = HAL_I2C_Slave_Transmit_DMA(I2C_SLAVE, local_buffer_slave, bit_pattern_length);
 8016a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016a74:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8016a78:	781b      	ldrb	r3, [r3, #0]
 8016a7a:	b29a      	uxth	r2, r3
 8016a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016a80:	4619      	mov	r1, r3
 8016a82:	481b      	ldr	r0, [pc, #108]	; (8016af0 <I2C_UUT_DMA+0x170>)
 8016a84:	f7ee fff0 	bl	8005a68 <HAL_I2C_Slave_Transmit_DMA>
 8016a88:	4603      	mov	r3, r0
 8016a8a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8016a8e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d001      	beq.n	8016a9a <I2C_UUT_DMA+0x11a>
		{
			return TEST_FAILED;
 8016a96:	23ff      	movs	r3, #255	; 0xff
 8016a98:	e024      	b.n	8016ae4 <I2C_UUT_DMA+0x164>
		}
		/* end commands Slave -> Master */

		/* Delay between DMA transmission to strcmp **too fast, data may not be send back properly */
		I2C_HAL_DELAY_2MS;
 8016a9a:	2002      	movs	r0, #2
 8016a9c:	f7eb ff4c 	bl	8002938 <HAL_Delay>

		/* compare the data results at the end of communication with data given by the functions parameters */
		if(strcmp((char*)local_buffer_master, (char*)bit_pattern)!=STRCMP_EQUALS)
 8016aa0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016aa4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8016aa8:	f107 0208 	add.w	r2, r7, #8
 8016aac:	6819      	ldr	r1, [r3, #0]
 8016aae:	4610      	mov	r0, r2
 8016ab0:	f7e9 fbae 	bl	8000210 <strcmp>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d001      	beq.n	8016abe <I2C_UUT_DMA+0x13e>
		{
			/* test did not pass, test failed */
			return TEST_FAILED;
 8016aba:	23ff      	movs	r3, #255	; 0xff
 8016abc:	e012      	b.n	8016ae4 <I2C_UUT_DMA+0x164>
		}

		--iterations;
 8016abe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016ac2:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8016ac6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8016aca:	f2a2 2206 	subw	r2, r2, #518	; 0x206
 8016ace:	7812      	ldrb	r2, [r2, #0]
 8016ad0:	3a01      	subs	r2, #1
 8016ad2:	701a      	strb	r2, [r3, #0]
	while(iterations)
 8016ad4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016ad8:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8016adc:	781b      	ldrb	r3, [r3, #0]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d181      	bne.n	80169e6 <I2C_UUT_DMA+0x66>
	}

	/* test passed successfuly*/
	return TEST_SUCCEED;
 8016ae2:	2301      	movs	r3, #1
}
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}
 8016aee:	bf00      	nop
 8016af0:	20000294 	.word	0x20000294
 8016af4:	200002e8 	.word	0x200002e8

08016af8 <UUT_main>:
#include "../../UUT/Inc/MAIN_UUT.h"

/**@brief the main function to run the tests, the life of the program*/
void UUT_main(void)
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	af00      	add	r7, sp, #0

	/* ******* INIT PHASE ******* */
	UDP_Client_Init();
 8016afc:	f000 fac0 	bl	8017080 <UDP_Client_Init>
		/**
		 * @brief 	function that should be called when the Ethernet interface identify a coming packet
		 * 			because this client need to constantly receives some packets to tell it to do some tests
		 * 			its inside the while(TRUE), e.g. life loop.
		 */
		ethernetif_input(GNETIF_ADDR);
 8016b00:	4840      	ldr	r0, [pc, #256]	; (8016c04 <UUT_main+0x10c>)
 8016b02:	f7f5 fad7 	bl	800c0b4 <ethernetif_input>
		sys_check_timeouts();
 8016b06:	f7fc fe3b 	bl	8013780 <sys_check_timeouts>
		if(udp_packet_is_received == PACKET_RECEIVED)
 8016b0a:	4b3f      	ldr	r3, [pc, #252]	; (8016c08 <UUT_main+0x110>)
 8016b0c:	781b      	ldrb	r3, [r3, #0]
 8016b0e:	2b01      	cmp	r3, #1
 8016b10:	d1f6      	bne.n	8016b00 <UUT_main+0x8>
		{
			switch(receivedPacketData.perfToTest)
 8016b12:	4b3e      	ldr	r3, [pc, #248]	; (8016c0c <UUT_main+0x114>)
 8016b14:	791b      	ldrb	r3, [r3, #4]
 8016b16:	3b01      	subs	r3, #1
 8016b18:	2b0f      	cmp	r3, #15
 8016b1a:	d85e      	bhi.n	8016bda <UUT_main+0xe2>
 8016b1c:	a201      	add	r2, pc, #4	; (adr r2, 8016b24 <UUT_main+0x2c>)
 8016b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b22:	bf00      	nop
 8016b24:	08016bb3 	.word	0x08016bb3
 8016b28:	08016b65 	.word	0x08016b65
 8016b2c:	08016bdb 	.word	0x08016bdb
 8016b30:	08016b99 	.word	0x08016b99
 8016b34:	08016bdb 	.word	0x08016bdb
 8016b38:	08016bdb 	.word	0x08016bdb
 8016b3c:	08016bdb 	.word	0x08016bdb
 8016b40:	08016b7f 	.word	0x08016b7f
 8016b44:	08016bdb 	.word	0x08016bdb
 8016b48:	08016bdb 	.word	0x08016bdb
 8016b4c:	08016bdb 	.word	0x08016bdb
 8016b50:	08016bdb 	.word	0x08016bdb
 8016b54:	08016bdb 	.word	0x08016bdb
 8016b58:	08016bdb 	.word	0x08016bdb
 8016b5c:	08016bdb 	.word	0x08016bdb
 8016b60:	08016bc7 	.word	0x08016bc7
			{
			case UART_PERIPHERAL:
			{
				test_status = UART_UUT_DMA((uint8_t *)receivedPacketData.bitPatrnStr, receivedPacketData.bitPatrnStrLen, receivedPacketData.iterations);
 8016b64:	4b29      	ldr	r3, [pc, #164]	; (8016c0c <UUT_main+0x114>)
 8016b66:	799b      	ldrb	r3, [r3, #6]
 8016b68:	4a28      	ldr	r2, [pc, #160]	; (8016c0c <UUT_main+0x114>)
 8016b6a:	7952      	ldrb	r2, [r2, #5]
 8016b6c:	4619      	mov	r1, r3
 8016b6e:	4828      	ldr	r0, [pc, #160]	; (8016c10 <UUT_main+0x118>)
 8016b70:	f000 f986 	bl	8016e80 <UART_UUT_DMA>
 8016b74:	4603      	mov	r3, r0
 8016b76:	461a      	mov	r2, r3
 8016b78:	4b26      	ldr	r3, [pc, #152]	; (8016c14 <UUT_main+0x11c>)
 8016b7a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8016b7c:	e031      	b.n	8016be2 <UUT_main+0xea>
			case I2C_PERIPHERAL:
			{
				test_status = I2C_UUT_DMA((uint8_t *)receivedPacketData.bitPatrnStr, receivedPacketData.bitPatrnStrLen, receivedPacketData.iterations);
 8016b7e:	4b23      	ldr	r3, [pc, #140]	; (8016c0c <UUT_main+0x114>)
 8016b80:	799b      	ldrb	r3, [r3, #6]
 8016b82:	4a22      	ldr	r2, [pc, #136]	; (8016c0c <UUT_main+0x114>)
 8016b84:	7952      	ldrb	r2, [r2, #5]
 8016b86:	4619      	mov	r1, r3
 8016b88:	4821      	ldr	r0, [pc, #132]	; (8016c10 <UUT_main+0x118>)
 8016b8a:	f7ff fef9 	bl	8016980 <I2C_UUT_DMA>
 8016b8e:	4603      	mov	r3, r0
 8016b90:	461a      	mov	r2, r3
 8016b92:	4b20      	ldr	r3, [pc, #128]	; (8016c14 <UUT_main+0x11c>)
 8016b94:	701a      	strb	r2, [r3, #0]
			}
			break;
 8016b96:	e024      	b.n	8016be2 <UUT_main+0xea>
			case SPI_PERIPHERAL:
			{
				test_status = SPI_UUT_DMA((uint8_t *)receivedPacketData.bitPatrnStr, receivedPacketData.bitPatrnStrLen, receivedPacketData.iterations);
 8016b98:	4b1c      	ldr	r3, [pc, #112]	; (8016c0c <UUT_main+0x114>)
 8016b9a:	799b      	ldrb	r3, [r3, #6]
 8016b9c:	4a1b      	ldr	r2, [pc, #108]	; (8016c0c <UUT_main+0x114>)
 8016b9e:	7952      	ldrb	r2, [r2, #5]
 8016ba0:	4619      	mov	r1, r3
 8016ba2:	481b      	ldr	r0, [pc, #108]	; (8016c10 <UUT_main+0x118>)
 8016ba4:	f000 f83a 	bl	8016c1c <SPI_UUT_DMA>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	461a      	mov	r2, r3
 8016bac:	4b19      	ldr	r3, [pc, #100]	; (8016c14 <UUT_main+0x11c>)
 8016bae:	701a      	strb	r2, [r3, #0]
			}
			break;
 8016bb0:	e017      	b.n	8016be2 <UUT_main+0xea>
			case TIMER_PERIPHERAL:
			{
				test_status = TIMER_UUT(receivedPacketData.iterations);
 8016bb2:	4b16      	ldr	r3, [pc, #88]	; (8016c0c <UUT_main+0x114>)
 8016bb4:	795b      	ldrb	r3, [r3, #5]
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f000 f902 	bl	8016dc0 <TIMER_UUT>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	461a      	mov	r2, r3
 8016bc0:	4b14      	ldr	r3, [pc, #80]	; (8016c14 <UUT_main+0x11c>)
 8016bc2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8016bc4:	e00d      	b.n	8016be2 <UUT_main+0xea>
			case ADC_PERIPHERAL:
			{
				test_status = ADC_UUT_DMA(receivedPacketData.iterations);
 8016bc6:	4b11      	ldr	r3, [pc, #68]	; (8016c0c <UUT_main+0x114>)
 8016bc8:	795b      	ldrb	r3, [r3, #5]
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f7ff fe42 	bl	8016854 <ADC_UUT_DMA>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	461a      	mov	r2, r3
 8016bd4:	4b0f      	ldr	r3, [pc, #60]	; (8016c14 <UUT_main+0x11c>)
 8016bd6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8016bd8:	e003      	b.n	8016be2 <UUT_main+0xea>
			default:
			{
				/* no other protocol or peripheral defined */
				test_status = TEST_FAILED;
 8016bda:	4b0e      	ldr	r3, [pc, #56]	; (8016c14 <UUT_main+0x11c>)
 8016bdc:	22ff      	movs	r2, #255	; 0xff
 8016bde:	701a      	strb	r2, [r3, #0]
			}
			break;
 8016be0:	bf00      	nop
			}

			/* building the result protocol struct with data: testId and status of the test */
			buildResProtocol(receivedPacketData.testId, test_status);
 8016be2:	4b0a      	ldr	r3, [pc, #40]	; (8016c0c <UUT_main+0x114>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	4a0b      	ldr	r2, [pc, #44]	; (8016c14 <UUT_main+0x11c>)
 8016be8:	7812      	ldrb	r2, [r2, #0]
 8016bea:	4611      	mov	r1, r2
 8016bec:	4618      	mov	r0, r3
 8016bee:	f000 fa8d 	bl	801710c <buildResProtocol>

			/* send via UDP the packet to the server */
			udpClient_send(&sentPacketData,sizeof(sentPacketData));
 8016bf2:	2105      	movs	r1, #5
 8016bf4:	4808      	ldr	r0, [pc, #32]	; (8016c18 <UUT_main+0x120>)
 8016bf6:	f000 fa1b 	bl	8017030 <udpClient_send>

			/* initializing the flag of packet received to be not received so only when a packet will be received some test will be performed */
			udp_packet_is_received = PACKET_NOT_RECEIVED;
 8016bfa:	4b03      	ldr	r3, [pc, #12]	; (8016c08 <UUT_main+0x110>)
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	701a      	strb	r2, [r3, #0]
		ethernetif_input(GNETIF_ADDR);
 8016c00:	e77e      	b.n	8016b00 <UUT_main+0x8>
 8016c02:	bf00      	nop
 8016c04:	20000f78 	.word	0x20000f78
 8016c08:	20009439 	.word	0x20009439
 8016c0c:	2000932c 	.word	0x2000932c
 8016c10:	20009333 	.word	0x20009333
 8016c14:	20009129 	.word	0x20009129
 8016c18:	20009434 	.word	0x20009434

08016c1c <SPI_UUT_DMA>:
 * @param bit_pattern_length
 * @param iterations
 * @return
 */
t_status SPI_UUT_DMA( uint8_t *bit_pattern,  uint8_t bit_pattern_length, uint8_t iterations)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b0c2      	sub	sp, #264	; 0x108
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016c26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016c2a:	6018      	str	r0, [r3, #0]
 8016c2c:	4608      	mov	r0, r1
 8016c2e:	4611      	mov	r1, r2
 8016c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016c34:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8016c38:	4602      	mov	r2, r0
 8016c3a:	701a      	strb	r2, [r3, #0]
 8016c3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016c40:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8016c44:	460a      	mov	r2, r1
 8016c46:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 8016c48:	2301      	movs	r3, #1
 8016c4a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	/*
	 * temporary buffer to use when transmitting and receiving at the same time,
	 * thus, prevent race conditions.
	 */
	uint8_t tmp_buf[MAX_SPI_MASTER_BUFFER_SIZE] = INIT_ALL_ZERO;
 8016c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016c52:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016c56:	2200      	movs	r2, #0
 8016c58:	601a      	str	r2, [r3, #0]
 8016c5a:	3304      	adds	r3, #4
 8016c5c:	22fb      	movs	r2, #251	; 0xfb
 8016c5e:	2100      	movs	r1, #0
 8016c60:	4618      	mov	r0, r3
 8016c62:	f000 faa9 	bl	80171b8 <memset>


	while(iterations)
 8016c66:	e07f      	b.n	8016d68 <SPI_UUT_DMA+0x14c>
	{
		memset(slave_buffer, INIT_TO_ZERO, sizeof(slave_buffer)/sizeof(*slave_buffer));
 8016c68:	22ff      	movs	r2, #255	; 0xff
 8016c6a:	2100      	movs	r1, #0
 8016c6c:	4845      	ldr	r0, [pc, #276]	; (8016d84 <SPI_UUT_DMA+0x168>)
 8016c6e:	f000 faa3 	bl	80171b8 <memset>
		memset(master_buffer, INIT_TO_ZERO, sizeof(master_buffer)/sizeof(*master_buffer));
 8016c72:	22ff      	movs	r2, #255	; 0xff
 8016c74:	2100      	movs	r1, #0
 8016c76:	4844      	ldr	r0, [pc, #272]	; (8016d88 <SPI_UUT_DMA+0x16c>)
 8016c78:	f000 fa9e 	bl	80171b8 <memset>

		/* MASTER -> SLAVE */
		status = HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, tmp_buf, slave_buffer, bit_pattern_length);
 8016c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016c80:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8016c84:	781b      	ldrb	r3, [r3, #0]
 8016c86:	b29b      	uxth	r3, r3
 8016c88:	f107 0108 	add.w	r1, r7, #8
 8016c8c:	4a3d      	ldr	r2, [pc, #244]	; (8016d84 <SPI_UUT_DMA+0x168>)
 8016c8e:	483f      	ldr	r0, [pc, #252]	; (8016d8c <SPI_UUT_DMA+0x170>)
 8016c90:	f7f1 ff1c 	bl	8008acc <HAL_SPI_TransmitReceive_DMA>
 8016c94:	4603      	mov	r3, r0
 8016c96:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		/* if something went wrong: wire/s disconnected, busy (still transmitting), noise on the line.. */
		if(status != HAL_OK)
 8016c9a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d001      	beq.n	8016ca6 <SPI_UUT_DMA+0x8a>
		{
			return TEST_FAILED;
 8016ca2:	23ff      	movs	r3, #255	; 0xff
 8016ca4:	e069      	b.n	8016d7a <SPI_UUT_DMA+0x15e>
		}

		status = HAL_SPI_TransmitReceive_DMA(SPI_MASTER, bit_pattern, tmp_buf, bit_pattern_length);
 8016ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016caa:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8016cae:	781b      	ldrb	r3, [r3, #0]
 8016cb0:	b29b      	uxth	r3, r3
 8016cb2:	f107 0208 	add.w	r2, r7, #8
 8016cb6:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8016cba:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 8016cbe:	6809      	ldr	r1, [r1, #0]
 8016cc0:	4833      	ldr	r0, [pc, #204]	; (8016d90 <SPI_UUT_DMA+0x174>)
 8016cc2:	f7f1 ff03 	bl	8008acc <HAL_SPI_TransmitReceive_DMA>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		/* if something went wrong: wire/s disconnected, busy (still transmitting), noise on the line.. */
		if(status != HAL_OK)
 8016ccc:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d001      	beq.n	8016cd8 <SPI_UUT_DMA+0xbc>
		{
			return TEST_FAILED;
 8016cd4:	23ff      	movs	r3, #255	; 0xff
 8016cd6:	e050      	b.n	8016d7a <SPI_UUT_DMA+0x15e>
		}

		/* delay time between transmissions for buffers to be update */
		SPI_SYNC_TIME;
 8016cd8:	2001      	movs	r0, #1
 8016cda:	f7eb fe2d 	bl	8002938 <HAL_Delay>

		/* SLAVE -> MASTER*/
		status = HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, slave_buffer, tmp_buf, bit_pattern_length);
 8016cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016ce2:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8016ce6:	781b      	ldrb	r3, [r3, #0]
 8016ce8:	b29b      	uxth	r3, r3
 8016cea:	f107 0208 	add.w	r2, r7, #8
 8016cee:	4925      	ldr	r1, [pc, #148]	; (8016d84 <SPI_UUT_DMA+0x168>)
 8016cf0:	4826      	ldr	r0, [pc, #152]	; (8016d8c <SPI_UUT_DMA+0x170>)
 8016cf2:	f7f1 feeb 	bl	8008acc <HAL_SPI_TransmitReceive_DMA>
 8016cf6:	4603      	mov	r3, r0
 8016cf8:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		/* if something went wrong: wire/s disconnected, busy (still transmitting), noise on the line.. */
		if(status != HAL_OK)
 8016cfc:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d001      	beq.n	8016d08 <SPI_UUT_DMA+0xec>
		{
			return TEST_FAILED;
 8016d04:	23ff      	movs	r3, #255	; 0xff
 8016d06:	e038      	b.n	8016d7a <SPI_UUT_DMA+0x15e>
		}

		status = HAL_SPI_TransmitReceive_DMA(SPI_MASTER, tmp_buf, master_buffer, bit_pattern_length);
 8016d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d0c:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8016d10:	781b      	ldrb	r3, [r3, #0]
 8016d12:	b29b      	uxth	r3, r3
 8016d14:	f107 0108 	add.w	r1, r7, #8
 8016d18:	4a1b      	ldr	r2, [pc, #108]	; (8016d88 <SPI_UUT_DMA+0x16c>)
 8016d1a:	481d      	ldr	r0, [pc, #116]	; (8016d90 <SPI_UUT_DMA+0x174>)
 8016d1c:	f7f1 fed6 	bl	8008acc <HAL_SPI_TransmitReceive_DMA>
 8016d20:	4603      	mov	r3, r0
 8016d22:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		/* if something went wrong: wire/s disconnected, busy (still transmitting), noise on the line.. */
		if(status != HAL_OK)
 8016d26:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d001      	beq.n	8016d32 <SPI_UUT_DMA+0x116>
		{
			return TEST_FAILED;
 8016d2e:	23ff      	movs	r3, #255	; 0xff
 8016d30:	e023      	b.n	8016d7a <SPI_UUT_DMA+0x15e>
		}

		/* delay time between transmissions for buffers to be update */
		SPI_SYNC_TIME;
 8016d32:	2001      	movs	r0, #1
 8016d34:	f7eb fe00 	bl	8002938 <HAL_Delay>

		/* end of iteration test if sent bit pattern is not equal to buffer at the end the peripheral not working correctly, test failed*/
		if(strcmp((char*)master_buffer, (char*)bit_pattern)!=STRCMP_EQUALS)
 8016d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8016d40:	6819      	ldr	r1, [r3, #0]
 8016d42:	4811      	ldr	r0, [pc, #68]	; (8016d88 <SPI_UUT_DMA+0x16c>)
 8016d44:	f7e9 fa64 	bl	8000210 <strcmp>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d001      	beq.n	8016d52 <SPI_UUT_DMA+0x136>
		{
			return TEST_FAILED;
 8016d4e:	23ff      	movs	r3, #255	; 0xff
 8016d50:	e013      	b.n	8016d7a <SPI_UUT_DMA+0x15e>
		}

		/* decrement iterations variable so the loop will stop when reach 0*/
		--iterations;
 8016d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d56:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8016d5a:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8016d5e:	f5a2 7283 	sub.w	r2, r2, #262	; 0x106
 8016d62:	7812      	ldrb	r2, [r2, #0]
 8016d64:	3a01      	subs	r2, #1
 8016d66:	701a      	strb	r2, [r3, #0]
	while(iterations)
 8016d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016d6c:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8016d70:	781b      	ldrb	r3, [r3, #0]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	f47f af78 	bne.w	8016c68 <SPI_UUT_DMA+0x4c>

	/*
	 * if all the tests iterations passed (bit_pattern equals master_buffer in every iteration) than the peripheral is working correctly,
	 * test passed.
	 */
	return TEST_SUCCEED;
 8016d78:	2301      	movs	r3, #1
}
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8016d80:	46bd      	mov	sp, r7
 8016d82:	bd80      	pop	{r7, pc}
 8016d84:	2000922c 	.word	0x2000922c
 8016d88:	2000912c 	.word	0x2000912c
 8016d8c:	20000520 	.word	0x20000520
 8016d90:	200004bc 	.word	0x200004bc

08016d94 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief elapsed timer callback function implementation, turn on timer flag.
 * 		  which indicates the timer ends.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8016d94:	b480      	push	{r7}
 8016d96:	b083      	sub	sp, #12
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
	if(htim == BASIC_TIMER1_HANDLE)
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	4a06      	ldr	r2, [pc, #24]	; (8016db8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8016da0:	4293      	cmp	r3, r2
 8016da2:	d102      	bne.n	8016daa <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_end = TIMER_END;
 8016da4:	4b05      	ldr	r3, [pc, #20]	; (8016dbc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8016da6:	2201      	movs	r2, #1
 8016da8:	701a      	strb	r2, [r3, #0]
	}
}
 8016daa:	bf00      	nop
 8016dac:	370c      	adds	r7, #12
 8016dae:	46bd      	mov	sp, r7
 8016db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016db4:	4770      	bx	lr
 8016db6:	bf00      	nop
 8016db8:	20000704 	.word	0x20000704
 8016dbc:	2000932b 	.word	0x2000932b

08016dc0 <TIMER_UUT>:
 * @param 	iterations		running the test number of iterations.
 * @return	t_status		running it number of iterations to if one of them fails return TEST_FAILED 0xff,
 * 							otherwise TEST_SUCCEED 0x01
 */
t_status TIMER_UUT(uint8_t iterations)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b084      	sub	sp, #16
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	71fb      	strb	r3, [r7, #7]
	/* in ms */
	double timer_elaps_time = HAL_DELAY_TO_SEC_VAL*(double)(((*BASIC_TIMER1_HANDLE).Init.Prescaler+PRESCALAR_ADDED_VAL)*((*BASIC_TIMER1_HANDLE).Init.Period+PERIOD_ADDED_VAL))/TIM_CLK_FREQ;
 8016dca:	4b29      	ldr	r3, [pc, #164]	; (8016e70 <TIMER_UUT+0xb0>)
 8016dcc:	685b      	ldr	r3, [r3, #4]
 8016dce:	3301      	adds	r3, #1
 8016dd0:	4a27      	ldr	r2, [pc, #156]	; (8016e70 <TIMER_UUT+0xb0>)
 8016dd2:	68d2      	ldr	r2, [r2, #12]
 8016dd4:	3201      	adds	r2, #1
 8016dd6:	fb02 f303 	mul.w	r3, r2, r3
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f7e9 fbba 	bl	8000554 <__aeabi_ui2d>
 8016de0:	f04f 0200 	mov.w	r2, #0
 8016de4:	4b23      	ldr	r3, [pc, #140]	; (8016e74 <TIMER_UUT+0xb4>)
 8016de6:	f7e9 fc2f 	bl	8000648 <__aeabi_dmul>
 8016dea:	4602      	mov	r2, r0
 8016dec:	460b      	mov	r3, r1
 8016dee:	4610      	mov	r0, r2
 8016df0:	4619      	mov	r1, r3
 8016df2:	a31d      	add	r3, pc, #116	; (adr r3, 8016e68 <TIMER_UUT+0xa8>)
 8016df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016df8:	f7e9 fd50 	bl	800089c <__aeabi_ddiv>
 8016dfc:	4602      	mov	r2, r0
 8016dfe:	460b      	mov	r3, r1
 8016e00:	e9c7 2302 	strd	r2, r3, [r7, #8]

	/* test phase */
	while(iterations)
 8016e04:	e028      	b.n	8016e58 <TIMER_UUT+0x98>
	{
		/* start timer*/
		HAL_TIM_Base_Start_IT(BASIC_TIMER1_HANDLE);
 8016e06:	481a      	ldr	r0, [pc, #104]	; (8016e70 <TIMER_UUT+0xb0>)
 8016e08:	f7f2 fc6a 	bl	80096e0 <HAL_TIM_Base_Start_IT>

		/* delay for checking the elapsing time of the timer. */
		HAL_Delay(timer_elaps_time+TIM_DEVIATION_VAL);
 8016e0c:	f04f 0200 	mov.w	r2, #0
 8016e10:	4b19      	ldr	r3, [pc, #100]	; (8016e78 <TIMER_UUT+0xb8>)
 8016e12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016e16:	f7e9 fa61 	bl	80002dc <__adddf3>
 8016e1a:	4602      	mov	r2, r0
 8016e1c:	460b      	mov	r3, r1
 8016e1e:	4610      	mov	r0, r2
 8016e20:	4619      	mov	r1, r3
 8016e22:	f7e9 fe23 	bl	8000a6c <__aeabi_d2uiz>
 8016e26:	4603      	mov	r3, r0
 8016e28:	4618      	mov	r0, r3
 8016e2a:	f7eb fd85 	bl	8002938 <HAL_Delay>

		if(timer_end != TIMER_END)
 8016e2e:	4b13      	ldr	r3, [pc, #76]	; (8016e7c <TIMER_UUT+0xbc>)
 8016e30:	781b      	ldrb	r3, [r3, #0]
 8016e32:	2b01      	cmp	r3, #1
 8016e34:	d007      	beq.n	8016e46 <TIMER_UUT+0x86>
		{
			/* stops the timer */
			HAL_TIM_Base_Stop_IT(BASIC_TIMER1_HANDLE);
 8016e36:	480e      	ldr	r0, [pc, #56]	; (8016e70 <TIMER_UUT+0xb0>)
 8016e38:	f7f2 fcca 	bl	80097d0 <HAL_TIM_Base_Stop_IT>

			timer_end = TIMER_NOT_END;
 8016e3c:	4b0f      	ldr	r3, [pc, #60]	; (8016e7c <TIMER_UUT+0xbc>)
 8016e3e:	2200      	movs	r2, #0
 8016e40:	701a      	strb	r2, [r3, #0]

			return TEST_FAILED;
 8016e42:	23ff      	movs	r3, #255	; 0xff
 8016e44:	e00c      	b.n	8016e60 <TIMER_UUT+0xa0>
		}

		/* stops the timer */
		HAL_TIM_Base_Stop_IT(BASIC_TIMER1_HANDLE);
 8016e46:	480a      	ldr	r0, [pc, #40]	; (8016e70 <TIMER_UUT+0xb0>)
 8016e48:	f7f2 fcc2 	bl	80097d0 <HAL_TIM_Base_Stop_IT>

		timer_end = TIMER_NOT_END;
 8016e4c:	4b0b      	ldr	r3, [pc, #44]	; (8016e7c <TIMER_UUT+0xbc>)
 8016e4e:	2200      	movs	r2, #0
 8016e50:	701a      	strb	r2, [r3, #0]

		--iterations;
 8016e52:	79fb      	ldrb	r3, [r7, #7]
 8016e54:	3b01      	subs	r3, #1
 8016e56:	71fb      	strb	r3, [r7, #7]
	while(iterations)
 8016e58:	79fb      	ldrb	r3, [r7, #7]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d1d3      	bne.n	8016e06 <TIMER_UUT+0x46>
	}
	return TEST_SUCCEED;
 8016e5e:	2301      	movs	r3, #1
}
 8016e60:	4618      	mov	r0, r3
 8016e62:	3710      	adds	r7, #16
 8016e64:	46bd      	mov	sp, r7
 8016e66:	bd80      	pop	{r7, pc}
 8016e68:	00000000 	.word	0x00000000
 8016e6c:	41812a88 	.word	0x41812a88
 8016e70:	20000704 	.word	0x20000704
 8016e74:	408f4000 	.word	0x408f4000
 8016e78:	40100000 	.word	0x40100000
 8016e7c:	2000932b 	.word	0x2000932b

08016e80 <UART_UUT_DMA>:
 * @param iterations			running tests number of iterations.
 * @return number of iterations will be run, each iteration if bit pattern at start of the communication
 * 		   equals to the same as in the end RETURN 0xff TEST_FAILED, otherwise  0X01 TEST_SUCCEED.
 */
t_status UART_UUT_DMA(uint8_t *bit_pattern, uint8_t bit_pattern_length, uint8_t iterations)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8016e86:	af00      	add	r7, sp, #0
 8016e88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016e8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8016e90:	6018      	str	r0, [r3, #0]
 8016e92:	4608      	mov	r0, r1
 8016e94:	4611      	mov	r1, r2
 8016e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016e9a:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8016e9e:	4602      	mov	r2, r0
 8016ea0:	701a      	strb	r2, [r3, #0]
 8016ea2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016ea6:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8016eaa:	460a      	mov	r2, r1
 8016eac:	701a      	strb	r2, [r3, #0]
	/* define and declare local buffers for device 1 and device 0 */
	uint8_t local_buffer_dev_1[MAX_UART_DEV1_BUFFER_SIZE] = INIT_ALL_ZERO;
 8016eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016eb2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8016eb6:	2200      	movs	r2, #0
 8016eb8:	601a      	str	r2, [r3, #0]
 8016eba:	3304      	adds	r3, #4
 8016ebc:	22fb      	movs	r2, #251	; 0xfb
 8016ebe:	2100      	movs	r1, #0
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f000 f979 	bl	80171b8 <memset>
	uint8_t local_buffer_dev_0[MAX_UART_DEV0_BUFFER_SIZE] = INIT_ALL_ZERO;
 8016ec6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016eca:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8016ece:	2200      	movs	r2, #0
 8016ed0:	601a      	str	r2, [r3, #0]
 8016ed2:	3304      	adds	r3, #4
 8016ed4:	22fb      	movs	r2, #251	; 0xfb
 8016ed6:	2100      	movs	r1, #0
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f000 f96d 	bl	80171b8 <memset>

	/* check status of receive transmit, error detection. (maby wire disconnected) */
	HAL_StatusTypeDef status = HAL_ERROR;
 8016ede:	2301      	movs	r3, #1
 8016ee0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	while(iterations)
 8016ee4:	e075      	b.n	8016fd2 <UART_UUT_DMA+0x152>
	{
		/* DEVICE 1 -> DEVICE 0 */
		status = HAL_UART_Receive_DMA(UART_DEVICE_0, local_buffer_dev_0, bit_pattern_length);
 8016ee6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016eea:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8016eee:	781b      	ldrb	r3, [r3, #0]
 8016ef0:	b29a      	uxth	r2, r3
 8016ef2:	f107 0308 	add.w	r3, r7, #8
 8016ef6:	4619      	mov	r1, r3
 8016ef8:	483c      	ldr	r0, [pc, #240]	; (8016fec <UART_UUT_DMA+0x16c>)
 8016efa:	f7f3 f93d 	bl	800a178 <HAL_UART_Receive_DMA>
 8016efe:	4603      	mov	r3, r0
 8016f00:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8016f04:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d001      	beq.n	8016f10 <UART_UUT_DMA+0x90>
		{
			return TEST_FAILED;
 8016f0c:	23ff      	movs	r3, #255	; 0xff
 8016f0e:	e068      	b.n	8016fe2 <UART_UUT_DMA+0x162>
		}

		status = HAL_UART_Transmit_DMA(UART_DEVICE_1, bit_pattern, bit_pattern_length);
 8016f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016f14:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	b29a      	uxth	r2, r3
 8016f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016f20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8016f24:	6819      	ldr	r1, [r3, #0]
 8016f26:	4832      	ldr	r0, [pc, #200]	; (8016ff0 <UART_UUT_DMA+0x170>)
 8016f28:	f7f3 f8aa 	bl	800a080 <HAL_UART_Transmit_DMA>
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8016f32:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d001      	beq.n	8016f3e <UART_UUT_DMA+0xbe>
		{
			return TEST_FAILED;
 8016f3a:	23ff      	movs	r3, #255	; 0xff
 8016f3c:	e051      	b.n	8016fe2 <UART_UUT_DMA+0x162>
		}
		/* end commands DEVICE 1 -> DEVICE 0 */

		/* Delay between DMA transmissions **too fast, data may be send back properly */
		UART_SYNC_TIME;
 8016f3e:	2001      	movs	r0, #1
 8016f40:	f7eb fcfa 	bl	8002938 <HAL_Delay>

		/* DEVICE 0 -> DEVICE 1 */
		status = HAL_UART_Receive_DMA(UART_DEVICE_1, local_buffer_dev_1, bit_pattern_length);
 8016f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016f48:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8016f4c:	781b      	ldrb	r3, [r3, #0]
 8016f4e:	b29a      	uxth	r2, r3
 8016f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8016f54:	4619      	mov	r1, r3
 8016f56:	4826      	ldr	r0, [pc, #152]	; (8016ff0 <UART_UUT_DMA+0x170>)
 8016f58:	f7f3 f90e 	bl	800a178 <HAL_UART_Receive_DMA>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8016f62:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d001      	beq.n	8016f6e <UART_UUT_DMA+0xee>
		{
			return TEST_FAILED;
 8016f6a:	23ff      	movs	r3, #255	; 0xff
 8016f6c:	e039      	b.n	8016fe2 <UART_UUT_DMA+0x162>
		}

		status = HAL_UART_Transmit_DMA(UART_DEVICE_0, local_buffer_dev_0, bit_pattern_length);
 8016f6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016f72:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8016f76:	781b      	ldrb	r3, [r3, #0]
 8016f78:	b29a      	uxth	r2, r3
 8016f7a:	f107 0308 	add.w	r3, r7, #8
 8016f7e:	4619      	mov	r1, r3
 8016f80:	481a      	ldr	r0, [pc, #104]	; (8016fec <UART_UUT_DMA+0x16c>)
 8016f82:	f7f3 f87d 	bl	800a080 <HAL_UART_Transmit_DMA>
 8016f86:	4603      	mov	r3, r0
 8016f88:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8016f8c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d001      	beq.n	8016f98 <UART_UUT_DMA+0x118>
		{
			return TEST_FAILED;
 8016f94:	23ff      	movs	r3, #255	; 0xff
 8016f96:	e024      	b.n	8016fe2 <UART_UUT_DMA+0x162>
		}
		/* end commands DEVICE 0 -> DEVICE 1 */

		/* Delay between DMA transmission to strcmp **too fast, data may not be send back properly */
		UART_SYNC_TIME;
 8016f98:	2001      	movs	r0, #1
 8016f9a:	f7eb fccd 	bl	8002938 <HAL_Delay>

		/* compare the data results at the end of communication with data given by the functions parameters */
		if(strcmp((char*)local_buffer_dev_1, (char*)bit_pattern)!=STRCMP_EQUALS)
 8016f9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016fa2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8016fa6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8016faa:	6819      	ldr	r1, [r3, #0]
 8016fac:	4610      	mov	r0, r2
 8016fae:	f7e9 f92f 	bl	8000210 <strcmp>
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	d001      	beq.n	8016fbc <UART_UUT_DMA+0x13c>
		{
			/* test did not pass, test failed */
			return TEST_FAILED;
 8016fb8:	23ff      	movs	r3, #255	; 0xff
 8016fba:	e012      	b.n	8016fe2 <UART_UUT_DMA+0x162>
		}

		--iterations;
 8016fbc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016fc0:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8016fc4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8016fc8:	f2a2 2206 	subw	r2, r2, #518	; 0x206
 8016fcc:	7812      	ldrb	r2, [r2, #0]
 8016fce:	3a01      	subs	r2, #1
 8016fd0:	701a      	strb	r2, [r3, #0]
	while(iterations)
 8016fd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8016fd6:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8016fda:	781b      	ldrb	r3, [r3, #0]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d182      	bne.n	8016ee6 <UART_UUT_DMA+0x66>
	}

	/* test passed successfuly*/
	return TEST_SUCCEED;
 8016fe0:	2301      	movs	r3, #1
}
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8016fe8:	46bd      	mov	sp, r7
 8016fea:	bd80      	pop	{r7, pc}
 8016fec:	20000860 	.word	0x20000860
 8016ff0:	20000750 	.word	0x20000750

08016ff4 <udp_receive_callback>:
* @param p		the packet buffer that was received
* @param addr	the remote IP address from which the packet was received
* @param port	the remote port from which the packet was received
*/
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b084      	sub	sp, #16
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	60f8      	str	r0, [r7, #12]
 8016ffc:	60b9      	str	r1, [r7, #8]
 8016ffe:	607a      	str	r2, [r7, #4]
 8017000:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	memcpy((char*)&receivedPacketData, (char *)p->payload, p->len);
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	6859      	ldr	r1, [r3, #4]
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	895b      	ldrh	r3, [r3, #10]
 801700a:	461a      	mov	r2, r3
 801700c:	4806      	ldr	r0, [pc, #24]	; (8017028 <udp_receive_callback+0x34>)
 801700e:	f000 f8c5 	bl	801719c <memcpy>

	udp_packet_is_received = PACKET_RECEIVED;
 8017012:	4b06      	ldr	r3, [pc, #24]	; (801702c <udp_receive_callback+0x38>)
 8017014:	2201      	movs	r2, #1
 8017016:	701a      	strb	r2, [r3, #0]

	/* Free receive pbuf */
	pbuf_free(p);
 8017018:	6878      	ldr	r0, [r7, #4]
 801701a:	f7f6 fe1d 	bl	800dc58 <pbuf_free>
}
 801701e:	bf00      	nop
 8017020:	3710      	adds	r7, #16
 8017022:	46bd      	mov	sp, r7
 8017024:	bd80      	pop	{r7, pc}
 8017026:	bf00      	nop
 8017028:	2000932c 	.word	0x2000932c
 801702c:	20009439 	.word	0x20009439

08017030 <udpClient_send>:
 * @param [in] pdata	 - pointer to the resultProtocol structure variable (sentPacketData)
 * 		 			 	   to send to the server via UDP
 * @param [in] data_size - the size of the data to send back to the server via UDP.
 */
void udpClient_send(res_prtcl *pdata, size_t data_size)
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b084      	sub	sp, #16
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
 8017038:	6039      	str	r1, [r7, #0]
  /* allocate pbuf from pool*/
  struct pbuf *txBuf = pbuf_alloc(PBUF_TRANSPORT, data_size, PBUF_RAM);
 801703a:	683b      	ldr	r3, [r7, #0]
 801703c:	b29b      	uxth	r3, r3
 801703e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017042:	4619      	mov	r1, r3
 8017044:	2036      	movs	r0, #54	; 0x36
 8017046:	f7f6 fb23 	bl	800d690 <pbuf_alloc>
 801704a:	60f8      	str	r0, [r7, #12]

  if (txBuf != NULL)
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d00f      	beq.n	8017072 <udpClient_send+0x42>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, (char*)pdata, data_size);
 8017052:	683b      	ldr	r3, [r7, #0]
 8017054:	b29b      	uxth	r3, r3
 8017056:	461a      	mov	r2, r3
 8017058:	6879      	ldr	r1, [r7, #4]
 801705a:	68f8      	ldr	r0, [r7, #12]
 801705c:	f7f7 f868 	bl	800e130 <pbuf_take>

    /* send udp data */
    udp_send(my_upcb, txBuf);
 8017060:	4b06      	ldr	r3, [pc, #24]	; (801707c <udpClient_send+0x4c>)
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	68f9      	ldr	r1, [r7, #12]
 8017066:	4618      	mov	r0, r3
 8017068:	f7fc fd8e 	bl	8013b88 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 801706c:	68f8      	ldr	r0, [r7, #12]
 801706e:	f7f6 fdf3 	bl	800dc58 <pbuf_free>
  }
}
 8017072:	bf00      	nop
 8017074:	3710      	adds	r7, #16
 8017076:	46bd      	mov	sp, r7
 8017078:	bd80      	pop	{r7, pc}
 801707a:	bf00      	nop
 801707c:	2000943c 	.word	0x2000943c

08017080 <UDP_Client_Init>:
/**
 * @fn 		void UDP_Client_Init(void)
 * @brief	initialize a UDP connection
 */
void UDP_Client_Init(void)
{
 8017080:	b580      	push	{r7, lr}
 8017082:	b084      	sub	sp, #16
 8017084:	af00      	add	r7, sp, #0

	err_t err;

	/* 1. Create a new UDP control block  */
	my_upcb = udp_new();
 8017086:	f7fd f8c1 	bl	801420c <udp_new>
 801708a:	4603      	mov	r3, r0
 801708c:	4a1a      	ldr	r2, [pc, #104]	; (80170f8 <UDP_Client_Init+0x78>)
 801708e:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	CONVERTED_SRC_IP_ADDR(myIPaddr);
 8017090:	4b1a      	ldr	r3, [pc, #104]	; (80170fc <UDP_Client_Init+0x7c>)
 8017092:	60bb      	str	r3, [r7, #8]
	udp_bind(my_upcb, &myIPaddr, SRC_PORT);
 8017094:	4b18      	ldr	r3, [pc, #96]	; (80170f8 <UDP_Client_Init+0x78>)
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	f107 0108 	add.w	r1, r7, #8
 801709c:	f64c 3220 	movw	r2, #52000	; 0xcb20
 80170a0:	4618      	mov	r0, r3
 80170a2:	f7fc ff5b 	bl	8013f5c <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	CONVERTED_DST_IP_ADDR(DestIPaddr);
 80170a6:	4b16      	ldr	r3, [pc, #88]	; (8017100 <UDP_Client_Init+0x80>)
 80170a8:	607b      	str	r3, [r7, #4]
	err= udp_connect(my_upcb, &DestIPaddr, DST_PORT);
 80170aa:	4b13      	ldr	r3, [pc, #76]	; (80170f8 <UDP_Client_Init+0x78>)
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	1d39      	adds	r1, r7, #4
 80170b0:	f24e 2290 	movw	r2, #58000	; 0xe290
 80170b4:	4618      	mov	r0, r3
 80170b6:	f7fc ffd9 	bl	801406c <udp_connect>
 80170ba:	4603      	mov	r3, r0
 80170bc:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 80170be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80170c2:	2b00      	cmp	r3, #0
 80170c4:	d10f      	bne.n	80170e6 <UDP_Client_Init+0x66>
	{
		/* 2. Send message to server */
		/* the first data to send via UDP*/
		buildResProtocol(FIRST_TEST_ID, TEST_SUCCEED);
 80170c6:	2101      	movs	r1, #1
 80170c8:	2000      	movs	r0, #0
 80170ca:	f000 f81f 	bl	801710c <buildResProtocol>

		udpClient_send(&sentPacketData,sizeof(sentPacketData));
 80170ce:	2105      	movs	r1, #5
 80170d0:	480c      	ldr	r0, [pc, #48]	; (8017104 <UDP_Client_Init+0x84>)
 80170d2:	f7ff ffad 	bl	8017030 <udpClient_send>

		/* 3. Set a receive callback for the upcb */
		udp_recv(my_upcb, udp_receive_callback, NULL);
 80170d6:	4b08      	ldr	r3, [pc, #32]	; (80170f8 <UDP_Client_Init+0x78>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	2200      	movs	r2, #0
 80170dc:	490a      	ldr	r1, [pc, #40]	; (8017108 <UDP_Client_Init+0x88>)
 80170de:	4618      	mov	r0, r3
 80170e0:	f7fd f832 	bl	8014148 <udp_recv>
	}
	else
	{
		udp_remove(my_upcb);
	}
}
 80170e4:	e004      	b.n	80170f0 <UDP_Client_Init+0x70>
		udp_remove(my_upcb);
 80170e6:	4b04      	ldr	r3, [pc, #16]	; (80170f8 <UDP_Client_Init+0x78>)
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	4618      	mov	r0, r3
 80170ec:	f7fd f84c 	bl	8014188 <udp_remove>
}
 80170f0:	bf00      	nop
 80170f2:	3710      	adds	r7, #16
 80170f4:	46bd      	mov	sp, r7
 80170f6:	bd80      	pop	{r7, pc}
 80170f8:	2000943c 	.word	0x2000943c
 80170fc:	0201a8c0 	.word	0x0201a8c0
 8017100:	0101a8c0 	.word	0x0101a8c0
 8017104:	20009434 	.word	0x20009434
 8017108:	08016ff5 	.word	0x08016ff5

0801710c <buildResProtocol>:
 * @brief build resultProtocol structure variable (sentPacketData) to send via UDP
 * @param [in] test_id 			- the test identifier.
 * @param [in] is_test_succeed 	- the result of the test, TEST_SUCCEED 0x01 if the passed successfully, TEST_FAILED 0xff otherwise.
 */
void buildResProtocol(uint32_t test_id, t_status is_test_succeed)
{
 801710c:	b480      	push	{r7}
 801710e:	b083      	sub	sp, #12
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
 8017114:	460b      	mov	r3, r1
 8017116:	70fb      	strb	r3, [r7, #3]
	sentPacketData.testId = test_id;
 8017118:	4a05      	ldr	r2, [pc, #20]	; (8017130 <buildResProtocol+0x24>)
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	6013      	str	r3, [r2, #0]
	sentPacketData.testResult = is_test_succeed;
 801711e:	4a04      	ldr	r2, [pc, #16]	; (8017130 <buildResProtocol+0x24>)
 8017120:	78fb      	ldrb	r3, [r7, #3]
 8017122:	7113      	strb	r3, [r2, #4]
}
 8017124:	bf00      	nop
 8017126:	370c      	adds	r7, #12
 8017128:	46bd      	mov	sp, r7
 801712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712e:	4770      	bx	lr
 8017130:	20009434 	.word	0x20009434

08017134 <__libc_init_array>:
 8017134:	b570      	push	{r4, r5, r6, lr}
 8017136:	4d0d      	ldr	r5, [pc, #52]	; (801716c <__libc_init_array+0x38>)
 8017138:	4c0d      	ldr	r4, [pc, #52]	; (8017170 <__libc_init_array+0x3c>)
 801713a:	1b64      	subs	r4, r4, r5
 801713c:	10a4      	asrs	r4, r4, #2
 801713e:	2600      	movs	r6, #0
 8017140:	42a6      	cmp	r6, r4
 8017142:	d109      	bne.n	8017158 <__libc_init_array+0x24>
 8017144:	4d0b      	ldr	r5, [pc, #44]	; (8017174 <__libc_init_array+0x40>)
 8017146:	4c0c      	ldr	r4, [pc, #48]	; (8017178 <__libc_init_array+0x44>)
 8017148:	f001 f88e 	bl	8018268 <_init>
 801714c:	1b64      	subs	r4, r4, r5
 801714e:	10a4      	asrs	r4, r4, #2
 8017150:	2600      	movs	r6, #0
 8017152:	42a6      	cmp	r6, r4
 8017154:	d105      	bne.n	8017162 <__libc_init_array+0x2e>
 8017156:	bd70      	pop	{r4, r5, r6, pc}
 8017158:	f855 3b04 	ldr.w	r3, [r5], #4
 801715c:	4798      	blx	r3
 801715e:	3601      	adds	r6, #1
 8017160:	e7ee      	b.n	8017140 <__libc_init_array+0xc>
 8017162:	f855 3b04 	ldr.w	r3, [r5], #4
 8017166:	4798      	blx	r3
 8017168:	3601      	adds	r6, #1
 801716a:	e7f2      	b.n	8017152 <__libc_init_array+0x1e>
 801716c:	0801aec0 	.word	0x0801aec0
 8017170:	0801aec0 	.word	0x0801aec0
 8017174:	0801aec0 	.word	0x0801aec0
 8017178:	0801aec4 	.word	0x0801aec4

0801717c <memcmp>:
 801717c:	b510      	push	{r4, lr}
 801717e:	3901      	subs	r1, #1
 8017180:	4402      	add	r2, r0
 8017182:	4290      	cmp	r0, r2
 8017184:	d101      	bne.n	801718a <memcmp+0xe>
 8017186:	2000      	movs	r0, #0
 8017188:	e005      	b.n	8017196 <memcmp+0x1a>
 801718a:	7803      	ldrb	r3, [r0, #0]
 801718c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017190:	42a3      	cmp	r3, r4
 8017192:	d001      	beq.n	8017198 <memcmp+0x1c>
 8017194:	1b18      	subs	r0, r3, r4
 8017196:	bd10      	pop	{r4, pc}
 8017198:	3001      	adds	r0, #1
 801719a:	e7f2      	b.n	8017182 <memcmp+0x6>

0801719c <memcpy>:
 801719c:	440a      	add	r2, r1
 801719e:	4291      	cmp	r1, r2
 80171a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80171a4:	d100      	bne.n	80171a8 <memcpy+0xc>
 80171a6:	4770      	bx	lr
 80171a8:	b510      	push	{r4, lr}
 80171aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80171b2:	4291      	cmp	r1, r2
 80171b4:	d1f9      	bne.n	80171aa <memcpy+0xe>
 80171b6:	bd10      	pop	{r4, pc}

080171b8 <memset>:
 80171b8:	4402      	add	r2, r0
 80171ba:	4603      	mov	r3, r0
 80171bc:	4293      	cmp	r3, r2
 80171be:	d100      	bne.n	80171c2 <memset+0xa>
 80171c0:	4770      	bx	lr
 80171c2:	f803 1b01 	strb.w	r1, [r3], #1
 80171c6:	e7f9      	b.n	80171bc <memset+0x4>

080171c8 <iprintf>:
 80171c8:	b40f      	push	{r0, r1, r2, r3}
 80171ca:	4b0a      	ldr	r3, [pc, #40]	; (80171f4 <iprintf+0x2c>)
 80171cc:	b513      	push	{r0, r1, r4, lr}
 80171ce:	681c      	ldr	r4, [r3, #0]
 80171d0:	b124      	cbz	r4, 80171dc <iprintf+0x14>
 80171d2:	69a3      	ldr	r3, [r4, #24]
 80171d4:	b913      	cbnz	r3, 80171dc <iprintf+0x14>
 80171d6:	4620      	mov	r0, r4
 80171d8:	f000 f8c2 	bl	8017360 <__sinit>
 80171dc:	ab05      	add	r3, sp, #20
 80171de:	9a04      	ldr	r2, [sp, #16]
 80171e0:	68a1      	ldr	r1, [r4, #8]
 80171e2:	9301      	str	r3, [sp, #4]
 80171e4:	4620      	mov	r0, r4
 80171e6:	f000 fa7f 	bl	80176e8 <_vfiprintf_r>
 80171ea:	b002      	add	sp, #8
 80171ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80171f0:	b004      	add	sp, #16
 80171f2:	4770      	bx	lr
 80171f4:	2000002c 	.word	0x2000002c

080171f8 <rand>:
 80171f8:	4b16      	ldr	r3, [pc, #88]	; (8017254 <rand+0x5c>)
 80171fa:	b510      	push	{r4, lr}
 80171fc:	681c      	ldr	r4, [r3, #0]
 80171fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017200:	b9b3      	cbnz	r3, 8017230 <rand+0x38>
 8017202:	2018      	movs	r0, #24
 8017204:	f000 f95e 	bl	80174c4 <malloc>
 8017208:	63a0      	str	r0, [r4, #56]	; 0x38
 801720a:	b928      	cbnz	r0, 8017218 <rand+0x20>
 801720c:	4602      	mov	r2, r0
 801720e:	4b12      	ldr	r3, [pc, #72]	; (8017258 <rand+0x60>)
 8017210:	4812      	ldr	r0, [pc, #72]	; (801725c <rand+0x64>)
 8017212:	214e      	movs	r1, #78	; 0x4e
 8017214:	f000 f82e 	bl	8017274 <__assert_func>
 8017218:	4a11      	ldr	r2, [pc, #68]	; (8017260 <rand+0x68>)
 801721a:	4b12      	ldr	r3, [pc, #72]	; (8017264 <rand+0x6c>)
 801721c:	e9c0 2300 	strd	r2, r3, [r0]
 8017220:	4b11      	ldr	r3, [pc, #68]	; (8017268 <rand+0x70>)
 8017222:	6083      	str	r3, [r0, #8]
 8017224:	230b      	movs	r3, #11
 8017226:	8183      	strh	r3, [r0, #12]
 8017228:	2201      	movs	r2, #1
 801722a:	2300      	movs	r3, #0
 801722c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017230:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8017232:	4a0e      	ldr	r2, [pc, #56]	; (801726c <rand+0x74>)
 8017234:	6920      	ldr	r0, [r4, #16]
 8017236:	6963      	ldr	r3, [r4, #20]
 8017238:	490d      	ldr	r1, [pc, #52]	; (8017270 <rand+0x78>)
 801723a:	4342      	muls	r2, r0
 801723c:	fb01 2203 	mla	r2, r1, r3, r2
 8017240:	fba0 0101 	umull	r0, r1, r0, r1
 8017244:	1c43      	adds	r3, r0, #1
 8017246:	eb42 0001 	adc.w	r0, r2, r1
 801724a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801724e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017252:	bd10      	pop	{r4, pc}
 8017254:	2000002c 	.word	0x2000002c
 8017258:	0801ad74 	.word	0x0801ad74
 801725c:	0801ad8b 	.word	0x0801ad8b
 8017260:	abcd330e 	.word	0xabcd330e
 8017264:	e66d1234 	.word	0xe66d1234
 8017268:	0005deec 	.word	0x0005deec
 801726c:	5851f42d 	.word	0x5851f42d
 8017270:	4c957f2d 	.word	0x4c957f2d

08017274 <__assert_func>:
 8017274:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017276:	4614      	mov	r4, r2
 8017278:	461a      	mov	r2, r3
 801727a:	4b09      	ldr	r3, [pc, #36]	; (80172a0 <__assert_func+0x2c>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	4605      	mov	r5, r0
 8017280:	68d8      	ldr	r0, [r3, #12]
 8017282:	b14c      	cbz	r4, 8017298 <__assert_func+0x24>
 8017284:	4b07      	ldr	r3, [pc, #28]	; (80172a4 <__assert_func+0x30>)
 8017286:	9100      	str	r1, [sp, #0]
 8017288:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801728c:	4906      	ldr	r1, [pc, #24]	; (80172a8 <__assert_func+0x34>)
 801728e:	462b      	mov	r3, r5
 8017290:	f000 f8e4 	bl	801745c <fiprintf>
 8017294:	f000 fe12 	bl	8017ebc <abort>
 8017298:	4b04      	ldr	r3, [pc, #16]	; (80172ac <__assert_func+0x38>)
 801729a:	461c      	mov	r4, r3
 801729c:	e7f3      	b.n	8017286 <__assert_func+0x12>
 801729e:	bf00      	nop
 80172a0:	2000002c 	.word	0x2000002c
 80172a4:	0801ade6 	.word	0x0801ade6
 80172a8:	0801adf3 	.word	0x0801adf3
 80172ac:	0801ae21 	.word	0x0801ae21

080172b0 <std>:
 80172b0:	2300      	movs	r3, #0
 80172b2:	b510      	push	{r4, lr}
 80172b4:	4604      	mov	r4, r0
 80172b6:	e9c0 3300 	strd	r3, r3, [r0]
 80172ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80172be:	6083      	str	r3, [r0, #8]
 80172c0:	8181      	strh	r1, [r0, #12]
 80172c2:	6643      	str	r3, [r0, #100]	; 0x64
 80172c4:	81c2      	strh	r2, [r0, #14]
 80172c6:	6183      	str	r3, [r0, #24]
 80172c8:	4619      	mov	r1, r3
 80172ca:	2208      	movs	r2, #8
 80172cc:	305c      	adds	r0, #92	; 0x5c
 80172ce:	f7ff ff73 	bl	80171b8 <memset>
 80172d2:	4b05      	ldr	r3, [pc, #20]	; (80172e8 <std+0x38>)
 80172d4:	6263      	str	r3, [r4, #36]	; 0x24
 80172d6:	4b05      	ldr	r3, [pc, #20]	; (80172ec <std+0x3c>)
 80172d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80172da:	4b05      	ldr	r3, [pc, #20]	; (80172f0 <std+0x40>)
 80172dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80172de:	4b05      	ldr	r3, [pc, #20]	; (80172f4 <std+0x44>)
 80172e0:	6224      	str	r4, [r4, #32]
 80172e2:	6323      	str	r3, [r4, #48]	; 0x30
 80172e4:	bd10      	pop	{r4, pc}
 80172e6:	bf00      	nop
 80172e8:	08017c91 	.word	0x08017c91
 80172ec:	08017cb3 	.word	0x08017cb3
 80172f0:	08017ceb 	.word	0x08017ceb
 80172f4:	08017d0f 	.word	0x08017d0f

080172f8 <_cleanup_r>:
 80172f8:	4901      	ldr	r1, [pc, #4]	; (8017300 <_cleanup_r+0x8>)
 80172fa:	f000 b8c1 	b.w	8017480 <_fwalk_reent>
 80172fe:	bf00      	nop
 8017300:	08017ff9 	.word	0x08017ff9

08017304 <__sfmoreglue>:
 8017304:	b570      	push	{r4, r5, r6, lr}
 8017306:	2268      	movs	r2, #104	; 0x68
 8017308:	1e4d      	subs	r5, r1, #1
 801730a:	4355      	muls	r5, r2
 801730c:	460e      	mov	r6, r1
 801730e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017312:	f000 f94b 	bl	80175ac <_malloc_r>
 8017316:	4604      	mov	r4, r0
 8017318:	b140      	cbz	r0, 801732c <__sfmoreglue+0x28>
 801731a:	2100      	movs	r1, #0
 801731c:	e9c0 1600 	strd	r1, r6, [r0]
 8017320:	300c      	adds	r0, #12
 8017322:	60a0      	str	r0, [r4, #8]
 8017324:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017328:	f7ff ff46 	bl	80171b8 <memset>
 801732c:	4620      	mov	r0, r4
 801732e:	bd70      	pop	{r4, r5, r6, pc}

08017330 <__sfp_lock_acquire>:
 8017330:	4801      	ldr	r0, [pc, #4]	; (8017338 <__sfp_lock_acquire+0x8>)
 8017332:	f000 b8c5 	b.w	80174c0 <__retarget_lock_acquire_recursive>
 8017336:	bf00      	nop
 8017338:	20009445 	.word	0x20009445

0801733c <__sfp_lock_release>:
 801733c:	4801      	ldr	r0, [pc, #4]	; (8017344 <__sfp_lock_release+0x8>)
 801733e:	f000 b8c0 	b.w	80174c2 <__retarget_lock_release_recursive>
 8017342:	bf00      	nop
 8017344:	20009445 	.word	0x20009445

08017348 <__sinit_lock_acquire>:
 8017348:	4801      	ldr	r0, [pc, #4]	; (8017350 <__sinit_lock_acquire+0x8>)
 801734a:	f000 b8b9 	b.w	80174c0 <__retarget_lock_acquire_recursive>
 801734e:	bf00      	nop
 8017350:	20009446 	.word	0x20009446

08017354 <__sinit_lock_release>:
 8017354:	4801      	ldr	r0, [pc, #4]	; (801735c <__sinit_lock_release+0x8>)
 8017356:	f000 b8b4 	b.w	80174c2 <__retarget_lock_release_recursive>
 801735a:	bf00      	nop
 801735c:	20009446 	.word	0x20009446

08017360 <__sinit>:
 8017360:	b510      	push	{r4, lr}
 8017362:	4604      	mov	r4, r0
 8017364:	f7ff fff0 	bl	8017348 <__sinit_lock_acquire>
 8017368:	69a3      	ldr	r3, [r4, #24]
 801736a:	b11b      	cbz	r3, 8017374 <__sinit+0x14>
 801736c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017370:	f7ff bff0 	b.w	8017354 <__sinit_lock_release>
 8017374:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017378:	6523      	str	r3, [r4, #80]	; 0x50
 801737a:	4b13      	ldr	r3, [pc, #76]	; (80173c8 <__sinit+0x68>)
 801737c:	4a13      	ldr	r2, [pc, #76]	; (80173cc <__sinit+0x6c>)
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	62a2      	str	r2, [r4, #40]	; 0x28
 8017382:	42a3      	cmp	r3, r4
 8017384:	bf04      	itt	eq
 8017386:	2301      	moveq	r3, #1
 8017388:	61a3      	streq	r3, [r4, #24]
 801738a:	4620      	mov	r0, r4
 801738c:	f000 f820 	bl	80173d0 <__sfp>
 8017390:	6060      	str	r0, [r4, #4]
 8017392:	4620      	mov	r0, r4
 8017394:	f000 f81c 	bl	80173d0 <__sfp>
 8017398:	60a0      	str	r0, [r4, #8]
 801739a:	4620      	mov	r0, r4
 801739c:	f000 f818 	bl	80173d0 <__sfp>
 80173a0:	2200      	movs	r2, #0
 80173a2:	60e0      	str	r0, [r4, #12]
 80173a4:	2104      	movs	r1, #4
 80173a6:	6860      	ldr	r0, [r4, #4]
 80173a8:	f7ff ff82 	bl	80172b0 <std>
 80173ac:	68a0      	ldr	r0, [r4, #8]
 80173ae:	2201      	movs	r2, #1
 80173b0:	2109      	movs	r1, #9
 80173b2:	f7ff ff7d 	bl	80172b0 <std>
 80173b6:	68e0      	ldr	r0, [r4, #12]
 80173b8:	2202      	movs	r2, #2
 80173ba:	2112      	movs	r1, #18
 80173bc:	f7ff ff78 	bl	80172b0 <std>
 80173c0:	2301      	movs	r3, #1
 80173c2:	61a3      	str	r3, [r4, #24]
 80173c4:	e7d2      	b.n	801736c <__sinit+0xc>
 80173c6:	bf00      	nop
 80173c8:	0801ad70 	.word	0x0801ad70
 80173cc:	080172f9 	.word	0x080172f9

080173d0 <__sfp>:
 80173d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173d2:	4607      	mov	r7, r0
 80173d4:	f7ff ffac 	bl	8017330 <__sfp_lock_acquire>
 80173d8:	4b1e      	ldr	r3, [pc, #120]	; (8017454 <__sfp+0x84>)
 80173da:	681e      	ldr	r6, [r3, #0]
 80173dc:	69b3      	ldr	r3, [r6, #24]
 80173de:	b913      	cbnz	r3, 80173e6 <__sfp+0x16>
 80173e0:	4630      	mov	r0, r6
 80173e2:	f7ff ffbd 	bl	8017360 <__sinit>
 80173e6:	3648      	adds	r6, #72	; 0x48
 80173e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80173ec:	3b01      	subs	r3, #1
 80173ee:	d503      	bpl.n	80173f8 <__sfp+0x28>
 80173f0:	6833      	ldr	r3, [r6, #0]
 80173f2:	b30b      	cbz	r3, 8017438 <__sfp+0x68>
 80173f4:	6836      	ldr	r6, [r6, #0]
 80173f6:	e7f7      	b.n	80173e8 <__sfp+0x18>
 80173f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80173fc:	b9d5      	cbnz	r5, 8017434 <__sfp+0x64>
 80173fe:	4b16      	ldr	r3, [pc, #88]	; (8017458 <__sfp+0x88>)
 8017400:	60e3      	str	r3, [r4, #12]
 8017402:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017406:	6665      	str	r5, [r4, #100]	; 0x64
 8017408:	f000 f859 	bl	80174be <__retarget_lock_init_recursive>
 801740c:	f7ff ff96 	bl	801733c <__sfp_lock_release>
 8017410:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017414:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017418:	6025      	str	r5, [r4, #0]
 801741a:	61a5      	str	r5, [r4, #24]
 801741c:	2208      	movs	r2, #8
 801741e:	4629      	mov	r1, r5
 8017420:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017424:	f7ff fec8 	bl	80171b8 <memset>
 8017428:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801742c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017430:	4620      	mov	r0, r4
 8017432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017434:	3468      	adds	r4, #104	; 0x68
 8017436:	e7d9      	b.n	80173ec <__sfp+0x1c>
 8017438:	2104      	movs	r1, #4
 801743a:	4638      	mov	r0, r7
 801743c:	f7ff ff62 	bl	8017304 <__sfmoreglue>
 8017440:	4604      	mov	r4, r0
 8017442:	6030      	str	r0, [r6, #0]
 8017444:	2800      	cmp	r0, #0
 8017446:	d1d5      	bne.n	80173f4 <__sfp+0x24>
 8017448:	f7ff ff78 	bl	801733c <__sfp_lock_release>
 801744c:	230c      	movs	r3, #12
 801744e:	603b      	str	r3, [r7, #0]
 8017450:	e7ee      	b.n	8017430 <__sfp+0x60>
 8017452:	bf00      	nop
 8017454:	0801ad70 	.word	0x0801ad70
 8017458:	ffff0001 	.word	0xffff0001

0801745c <fiprintf>:
 801745c:	b40e      	push	{r1, r2, r3}
 801745e:	b503      	push	{r0, r1, lr}
 8017460:	4601      	mov	r1, r0
 8017462:	ab03      	add	r3, sp, #12
 8017464:	4805      	ldr	r0, [pc, #20]	; (801747c <fiprintf+0x20>)
 8017466:	f853 2b04 	ldr.w	r2, [r3], #4
 801746a:	6800      	ldr	r0, [r0, #0]
 801746c:	9301      	str	r3, [sp, #4]
 801746e:	f000 f93b 	bl	80176e8 <_vfiprintf_r>
 8017472:	b002      	add	sp, #8
 8017474:	f85d eb04 	ldr.w	lr, [sp], #4
 8017478:	b003      	add	sp, #12
 801747a:	4770      	bx	lr
 801747c:	2000002c 	.word	0x2000002c

08017480 <_fwalk_reent>:
 8017480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017484:	4606      	mov	r6, r0
 8017486:	4688      	mov	r8, r1
 8017488:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801748c:	2700      	movs	r7, #0
 801748e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017492:	f1b9 0901 	subs.w	r9, r9, #1
 8017496:	d505      	bpl.n	80174a4 <_fwalk_reent+0x24>
 8017498:	6824      	ldr	r4, [r4, #0]
 801749a:	2c00      	cmp	r4, #0
 801749c:	d1f7      	bne.n	801748e <_fwalk_reent+0xe>
 801749e:	4638      	mov	r0, r7
 80174a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174a4:	89ab      	ldrh	r3, [r5, #12]
 80174a6:	2b01      	cmp	r3, #1
 80174a8:	d907      	bls.n	80174ba <_fwalk_reent+0x3a>
 80174aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80174ae:	3301      	adds	r3, #1
 80174b0:	d003      	beq.n	80174ba <_fwalk_reent+0x3a>
 80174b2:	4629      	mov	r1, r5
 80174b4:	4630      	mov	r0, r6
 80174b6:	47c0      	blx	r8
 80174b8:	4307      	orrs	r7, r0
 80174ba:	3568      	adds	r5, #104	; 0x68
 80174bc:	e7e9      	b.n	8017492 <_fwalk_reent+0x12>

080174be <__retarget_lock_init_recursive>:
 80174be:	4770      	bx	lr

080174c0 <__retarget_lock_acquire_recursive>:
 80174c0:	4770      	bx	lr

080174c2 <__retarget_lock_release_recursive>:
 80174c2:	4770      	bx	lr

080174c4 <malloc>:
 80174c4:	4b02      	ldr	r3, [pc, #8]	; (80174d0 <malloc+0xc>)
 80174c6:	4601      	mov	r1, r0
 80174c8:	6818      	ldr	r0, [r3, #0]
 80174ca:	f000 b86f 	b.w	80175ac <_malloc_r>
 80174ce:	bf00      	nop
 80174d0:	2000002c 	.word	0x2000002c

080174d4 <_free_r>:
 80174d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80174d6:	2900      	cmp	r1, #0
 80174d8:	d044      	beq.n	8017564 <_free_r+0x90>
 80174da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174de:	9001      	str	r0, [sp, #4]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	f1a1 0404 	sub.w	r4, r1, #4
 80174e6:	bfb8      	it	lt
 80174e8:	18e4      	addlt	r4, r4, r3
 80174ea:	f000 fe39 	bl	8018160 <__malloc_lock>
 80174ee:	4a1e      	ldr	r2, [pc, #120]	; (8017568 <_free_r+0x94>)
 80174f0:	9801      	ldr	r0, [sp, #4]
 80174f2:	6813      	ldr	r3, [r2, #0]
 80174f4:	b933      	cbnz	r3, 8017504 <_free_r+0x30>
 80174f6:	6063      	str	r3, [r4, #4]
 80174f8:	6014      	str	r4, [r2, #0]
 80174fa:	b003      	add	sp, #12
 80174fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017500:	f000 be34 	b.w	801816c <__malloc_unlock>
 8017504:	42a3      	cmp	r3, r4
 8017506:	d908      	bls.n	801751a <_free_r+0x46>
 8017508:	6825      	ldr	r5, [r4, #0]
 801750a:	1961      	adds	r1, r4, r5
 801750c:	428b      	cmp	r3, r1
 801750e:	bf01      	itttt	eq
 8017510:	6819      	ldreq	r1, [r3, #0]
 8017512:	685b      	ldreq	r3, [r3, #4]
 8017514:	1949      	addeq	r1, r1, r5
 8017516:	6021      	streq	r1, [r4, #0]
 8017518:	e7ed      	b.n	80174f6 <_free_r+0x22>
 801751a:	461a      	mov	r2, r3
 801751c:	685b      	ldr	r3, [r3, #4]
 801751e:	b10b      	cbz	r3, 8017524 <_free_r+0x50>
 8017520:	42a3      	cmp	r3, r4
 8017522:	d9fa      	bls.n	801751a <_free_r+0x46>
 8017524:	6811      	ldr	r1, [r2, #0]
 8017526:	1855      	adds	r5, r2, r1
 8017528:	42a5      	cmp	r5, r4
 801752a:	d10b      	bne.n	8017544 <_free_r+0x70>
 801752c:	6824      	ldr	r4, [r4, #0]
 801752e:	4421      	add	r1, r4
 8017530:	1854      	adds	r4, r2, r1
 8017532:	42a3      	cmp	r3, r4
 8017534:	6011      	str	r1, [r2, #0]
 8017536:	d1e0      	bne.n	80174fa <_free_r+0x26>
 8017538:	681c      	ldr	r4, [r3, #0]
 801753a:	685b      	ldr	r3, [r3, #4]
 801753c:	6053      	str	r3, [r2, #4]
 801753e:	4421      	add	r1, r4
 8017540:	6011      	str	r1, [r2, #0]
 8017542:	e7da      	b.n	80174fa <_free_r+0x26>
 8017544:	d902      	bls.n	801754c <_free_r+0x78>
 8017546:	230c      	movs	r3, #12
 8017548:	6003      	str	r3, [r0, #0]
 801754a:	e7d6      	b.n	80174fa <_free_r+0x26>
 801754c:	6825      	ldr	r5, [r4, #0]
 801754e:	1961      	adds	r1, r4, r5
 8017550:	428b      	cmp	r3, r1
 8017552:	bf04      	itt	eq
 8017554:	6819      	ldreq	r1, [r3, #0]
 8017556:	685b      	ldreq	r3, [r3, #4]
 8017558:	6063      	str	r3, [r4, #4]
 801755a:	bf04      	itt	eq
 801755c:	1949      	addeq	r1, r1, r5
 801755e:	6021      	streq	r1, [r4, #0]
 8017560:	6054      	str	r4, [r2, #4]
 8017562:	e7ca      	b.n	80174fa <_free_r+0x26>
 8017564:	b003      	add	sp, #12
 8017566:	bd30      	pop	{r4, r5, pc}
 8017568:	20009448 	.word	0x20009448

0801756c <sbrk_aligned>:
 801756c:	b570      	push	{r4, r5, r6, lr}
 801756e:	4e0e      	ldr	r6, [pc, #56]	; (80175a8 <sbrk_aligned+0x3c>)
 8017570:	460c      	mov	r4, r1
 8017572:	6831      	ldr	r1, [r6, #0]
 8017574:	4605      	mov	r5, r0
 8017576:	b911      	cbnz	r1, 801757e <sbrk_aligned+0x12>
 8017578:	f000 fb7a 	bl	8017c70 <_sbrk_r>
 801757c:	6030      	str	r0, [r6, #0]
 801757e:	4621      	mov	r1, r4
 8017580:	4628      	mov	r0, r5
 8017582:	f000 fb75 	bl	8017c70 <_sbrk_r>
 8017586:	1c43      	adds	r3, r0, #1
 8017588:	d00a      	beq.n	80175a0 <sbrk_aligned+0x34>
 801758a:	1cc4      	adds	r4, r0, #3
 801758c:	f024 0403 	bic.w	r4, r4, #3
 8017590:	42a0      	cmp	r0, r4
 8017592:	d007      	beq.n	80175a4 <sbrk_aligned+0x38>
 8017594:	1a21      	subs	r1, r4, r0
 8017596:	4628      	mov	r0, r5
 8017598:	f000 fb6a 	bl	8017c70 <_sbrk_r>
 801759c:	3001      	adds	r0, #1
 801759e:	d101      	bne.n	80175a4 <sbrk_aligned+0x38>
 80175a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80175a4:	4620      	mov	r0, r4
 80175a6:	bd70      	pop	{r4, r5, r6, pc}
 80175a8:	2000944c 	.word	0x2000944c

080175ac <_malloc_r>:
 80175ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175b0:	1ccd      	adds	r5, r1, #3
 80175b2:	f025 0503 	bic.w	r5, r5, #3
 80175b6:	3508      	adds	r5, #8
 80175b8:	2d0c      	cmp	r5, #12
 80175ba:	bf38      	it	cc
 80175bc:	250c      	movcc	r5, #12
 80175be:	2d00      	cmp	r5, #0
 80175c0:	4607      	mov	r7, r0
 80175c2:	db01      	blt.n	80175c8 <_malloc_r+0x1c>
 80175c4:	42a9      	cmp	r1, r5
 80175c6:	d905      	bls.n	80175d4 <_malloc_r+0x28>
 80175c8:	230c      	movs	r3, #12
 80175ca:	603b      	str	r3, [r7, #0]
 80175cc:	2600      	movs	r6, #0
 80175ce:	4630      	mov	r0, r6
 80175d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175d4:	4e2e      	ldr	r6, [pc, #184]	; (8017690 <_malloc_r+0xe4>)
 80175d6:	f000 fdc3 	bl	8018160 <__malloc_lock>
 80175da:	6833      	ldr	r3, [r6, #0]
 80175dc:	461c      	mov	r4, r3
 80175de:	bb34      	cbnz	r4, 801762e <_malloc_r+0x82>
 80175e0:	4629      	mov	r1, r5
 80175e2:	4638      	mov	r0, r7
 80175e4:	f7ff ffc2 	bl	801756c <sbrk_aligned>
 80175e8:	1c43      	adds	r3, r0, #1
 80175ea:	4604      	mov	r4, r0
 80175ec:	d14d      	bne.n	801768a <_malloc_r+0xde>
 80175ee:	6834      	ldr	r4, [r6, #0]
 80175f0:	4626      	mov	r6, r4
 80175f2:	2e00      	cmp	r6, #0
 80175f4:	d140      	bne.n	8017678 <_malloc_r+0xcc>
 80175f6:	6823      	ldr	r3, [r4, #0]
 80175f8:	4631      	mov	r1, r6
 80175fa:	4638      	mov	r0, r7
 80175fc:	eb04 0803 	add.w	r8, r4, r3
 8017600:	f000 fb36 	bl	8017c70 <_sbrk_r>
 8017604:	4580      	cmp	r8, r0
 8017606:	d13a      	bne.n	801767e <_malloc_r+0xd2>
 8017608:	6821      	ldr	r1, [r4, #0]
 801760a:	3503      	adds	r5, #3
 801760c:	1a6d      	subs	r5, r5, r1
 801760e:	f025 0503 	bic.w	r5, r5, #3
 8017612:	3508      	adds	r5, #8
 8017614:	2d0c      	cmp	r5, #12
 8017616:	bf38      	it	cc
 8017618:	250c      	movcc	r5, #12
 801761a:	4629      	mov	r1, r5
 801761c:	4638      	mov	r0, r7
 801761e:	f7ff ffa5 	bl	801756c <sbrk_aligned>
 8017622:	3001      	adds	r0, #1
 8017624:	d02b      	beq.n	801767e <_malloc_r+0xd2>
 8017626:	6823      	ldr	r3, [r4, #0]
 8017628:	442b      	add	r3, r5
 801762a:	6023      	str	r3, [r4, #0]
 801762c:	e00e      	b.n	801764c <_malloc_r+0xa0>
 801762e:	6822      	ldr	r2, [r4, #0]
 8017630:	1b52      	subs	r2, r2, r5
 8017632:	d41e      	bmi.n	8017672 <_malloc_r+0xc6>
 8017634:	2a0b      	cmp	r2, #11
 8017636:	d916      	bls.n	8017666 <_malloc_r+0xba>
 8017638:	1961      	adds	r1, r4, r5
 801763a:	42a3      	cmp	r3, r4
 801763c:	6025      	str	r5, [r4, #0]
 801763e:	bf18      	it	ne
 8017640:	6059      	strne	r1, [r3, #4]
 8017642:	6863      	ldr	r3, [r4, #4]
 8017644:	bf08      	it	eq
 8017646:	6031      	streq	r1, [r6, #0]
 8017648:	5162      	str	r2, [r4, r5]
 801764a:	604b      	str	r3, [r1, #4]
 801764c:	4638      	mov	r0, r7
 801764e:	f104 060b 	add.w	r6, r4, #11
 8017652:	f000 fd8b 	bl	801816c <__malloc_unlock>
 8017656:	f026 0607 	bic.w	r6, r6, #7
 801765a:	1d23      	adds	r3, r4, #4
 801765c:	1af2      	subs	r2, r6, r3
 801765e:	d0b6      	beq.n	80175ce <_malloc_r+0x22>
 8017660:	1b9b      	subs	r3, r3, r6
 8017662:	50a3      	str	r3, [r4, r2]
 8017664:	e7b3      	b.n	80175ce <_malloc_r+0x22>
 8017666:	6862      	ldr	r2, [r4, #4]
 8017668:	42a3      	cmp	r3, r4
 801766a:	bf0c      	ite	eq
 801766c:	6032      	streq	r2, [r6, #0]
 801766e:	605a      	strne	r2, [r3, #4]
 8017670:	e7ec      	b.n	801764c <_malloc_r+0xa0>
 8017672:	4623      	mov	r3, r4
 8017674:	6864      	ldr	r4, [r4, #4]
 8017676:	e7b2      	b.n	80175de <_malloc_r+0x32>
 8017678:	4634      	mov	r4, r6
 801767a:	6876      	ldr	r6, [r6, #4]
 801767c:	e7b9      	b.n	80175f2 <_malloc_r+0x46>
 801767e:	230c      	movs	r3, #12
 8017680:	603b      	str	r3, [r7, #0]
 8017682:	4638      	mov	r0, r7
 8017684:	f000 fd72 	bl	801816c <__malloc_unlock>
 8017688:	e7a1      	b.n	80175ce <_malloc_r+0x22>
 801768a:	6025      	str	r5, [r4, #0]
 801768c:	e7de      	b.n	801764c <_malloc_r+0xa0>
 801768e:	bf00      	nop
 8017690:	20009448 	.word	0x20009448

08017694 <__sfputc_r>:
 8017694:	6893      	ldr	r3, [r2, #8]
 8017696:	3b01      	subs	r3, #1
 8017698:	2b00      	cmp	r3, #0
 801769a:	b410      	push	{r4}
 801769c:	6093      	str	r3, [r2, #8]
 801769e:	da08      	bge.n	80176b2 <__sfputc_r+0x1e>
 80176a0:	6994      	ldr	r4, [r2, #24]
 80176a2:	42a3      	cmp	r3, r4
 80176a4:	db01      	blt.n	80176aa <__sfputc_r+0x16>
 80176a6:	290a      	cmp	r1, #10
 80176a8:	d103      	bne.n	80176b2 <__sfputc_r+0x1e>
 80176aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176ae:	f000 bb33 	b.w	8017d18 <__swbuf_r>
 80176b2:	6813      	ldr	r3, [r2, #0]
 80176b4:	1c58      	adds	r0, r3, #1
 80176b6:	6010      	str	r0, [r2, #0]
 80176b8:	7019      	strb	r1, [r3, #0]
 80176ba:	4608      	mov	r0, r1
 80176bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176c0:	4770      	bx	lr

080176c2 <__sfputs_r>:
 80176c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176c4:	4606      	mov	r6, r0
 80176c6:	460f      	mov	r7, r1
 80176c8:	4614      	mov	r4, r2
 80176ca:	18d5      	adds	r5, r2, r3
 80176cc:	42ac      	cmp	r4, r5
 80176ce:	d101      	bne.n	80176d4 <__sfputs_r+0x12>
 80176d0:	2000      	movs	r0, #0
 80176d2:	e007      	b.n	80176e4 <__sfputs_r+0x22>
 80176d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176d8:	463a      	mov	r2, r7
 80176da:	4630      	mov	r0, r6
 80176dc:	f7ff ffda 	bl	8017694 <__sfputc_r>
 80176e0:	1c43      	adds	r3, r0, #1
 80176e2:	d1f3      	bne.n	80176cc <__sfputs_r+0xa>
 80176e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080176e8 <_vfiprintf_r>:
 80176e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176ec:	460d      	mov	r5, r1
 80176ee:	b09d      	sub	sp, #116	; 0x74
 80176f0:	4614      	mov	r4, r2
 80176f2:	4698      	mov	r8, r3
 80176f4:	4606      	mov	r6, r0
 80176f6:	b118      	cbz	r0, 8017700 <_vfiprintf_r+0x18>
 80176f8:	6983      	ldr	r3, [r0, #24]
 80176fa:	b90b      	cbnz	r3, 8017700 <_vfiprintf_r+0x18>
 80176fc:	f7ff fe30 	bl	8017360 <__sinit>
 8017700:	4b89      	ldr	r3, [pc, #548]	; (8017928 <_vfiprintf_r+0x240>)
 8017702:	429d      	cmp	r5, r3
 8017704:	d11b      	bne.n	801773e <_vfiprintf_r+0x56>
 8017706:	6875      	ldr	r5, [r6, #4]
 8017708:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801770a:	07d9      	lsls	r1, r3, #31
 801770c:	d405      	bmi.n	801771a <_vfiprintf_r+0x32>
 801770e:	89ab      	ldrh	r3, [r5, #12]
 8017710:	059a      	lsls	r2, r3, #22
 8017712:	d402      	bmi.n	801771a <_vfiprintf_r+0x32>
 8017714:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017716:	f7ff fed3 	bl	80174c0 <__retarget_lock_acquire_recursive>
 801771a:	89ab      	ldrh	r3, [r5, #12]
 801771c:	071b      	lsls	r3, r3, #28
 801771e:	d501      	bpl.n	8017724 <_vfiprintf_r+0x3c>
 8017720:	692b      	ldr	r3, [r5, #16]
 8017722:	b9eb      	cbnz	r3, 8017760 <_vfiprintf_r+0x78>
 8017724:	4629      	mov	r1, r5
 8017726:	4630      	mov	r0, r6
 8017728:	f000 fb5a 	bl	8017de0 <__swsetup_r>
 801772c:	b1c0      	cbz	r0, 8017760 <_vfiprintf_r+0x78>
 801772e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017730:	07dc      	lsls	r4, r3, #31
 8017732:	d50e      	bpl.n	8017752 <_vfiprintf_r+0x6a>
 8017734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017738:	b01d      	add	sp, #116	; 0x74
 801773a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801773e:	4b7b      	ldr	r3, [pc, #492]	; (801792c <_vfiprintf_r+0x244>)
 8017740:	429d      	cmp	r5, r3
 8017742:	d101      	bne.n	8017748 <_vfiprintf_r+0x60>
 8017744:	68b5      	ldr	r5, [r6, #8]
 8017746:	e7df      	b.n	8017708 <_vfiprintf_r+0x20>
 8017748:	4b79      	ldr	r3, [pc, #484]	; (8017930 <_vfiprintf_r+0x248>)
 801774a:	429d      	cmp	r5, r3
 801774c:	bf08      	it	eq
 801774e:	68f5      	ldreq	r5, [r6, #12]
 8017750:	e7da      	b.n	8017708 <_vfiprintf_r+0x20>
 8017752:	89ab      	ldrh	r3, [r5, #12]
 8017754:	0598      	lsls	r0, r3, #22
 8017756:	d4ed      	bmi.n	8017734 <_vfiprintf_r+0x4c>
 8017758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801775a:	f7ff feb2 	bl	80174c2 <__retarget_lock_release_recursive>
 801775e:	e7e9      	b.n	8017734 <_vfiprintf_r+0x4c>
 8017760:	2300      	movs	r3, #0
 8017762:	9309      	str	r3, [sp, #36]	; 0x24
 8017764:	2320      	movs	r3, #32
 8017766:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801776a:	f8cd 800c 	str.w	r8, [sp, #12]
 801776e:	2330      	movs	r3, #48	; 0x30
 8017770:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017934 <_vfiprintf_r+0x24c>
 8017774:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017778:	f04f 0901 	mov.w	r9, #1
 801777c:	4623      	mov	r3, r4
 801777e:	469a      	mov	sl, r3
 8017780:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017784:	b10a      	cbz	r2, 801778a <_vfiprintf_r+0xa2>
 8017786:	2a25      	cmp	r2, #37	; 0x25
 8017788:	d1f9      	bne.n	801777e <_vfiprintf_r+0x96>
 801778a:	ebba 0b04 	subs.w	fp, sl, r4
 801778e:	d00b      	beq.n	80177a8 <_vfiprintf_r+0xc0>
 8017790:	465b      	mov	r3, fp
 8017792:	4622      	mov	r2, r4
 8017794:	4629      	mov	r1, r5
 8017796:	4630      	mov	r0, r6
 8017798:	f7ff ff93 	bl	80176c2 <__sfputs_r>
 801779c:	3001      	adds	r0, #1
 801779e:	f000 80aa 	beq.w	80178f6 <_vfiprintf_r+0x20e>
 80177a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177a4:	445a      	add	r2, fp
 80177a6:	9209      	str	r2, [sp, #36]	; 0x24
 80177a8:	f89a 3000 	ldrb.w	r3, [sl]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	f000 80a2 	beq.w	80178f6 <_vfiprintf_r+0x20e>
 80177b2:	2300      	movs	r3, #0
 80177b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80177b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177bc:	f10a 0a01 	add.w	sl, sl, #1
 80177c0:	9304      	str	r3, [sp, #16]
 80177c2:	9307      	str	r3, [sp, #28]
 80177c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80177c8:	931a      	str	r3, [sp, #104]	; 0x68
 80177ca:	4654      	mov	r4, sl
 80177cc:	2205      	movs	r2, #5
 80177ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177d2:	4858      	ldr	r0, [pc, #352]	; (8017934 <_vfiprintf_r+0x24c>)
 80177d4:	f7e8 fd2c 	bl	8000230 <memchr>
 80177d8:	9a04      	ldr	r2, [sp, #16]
 80177da:	b9d8      	cbnz	r0, 8017814 <_vfiprintf_r+0x12c>
 80177dc:	06d1      	lsls	r1, r2, #27
 80177de:	bf44      	itt	mi
 80177e0:	2320      	movmi	r3, #32
 80177e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177e6:	0713      	lsls	r3, r2, #28
 80177e8:	bf44      	itt	mi
 80177ea:	232b      	movmi	r3, #43	; 0x2b
 80177ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177f0:	f89a 3000 	ldrb.w	r3, [sl]
 80177f4:	2b2a      	cmp	r3, #42	; 0x2a
 80177f6:	d015      	beq.n	8017824 <_vfiprintf_r+0x13c>
 80177f8:	9a07      	ldr	r2, [sp, #28]
 80177fa:	4654      	mov	r4, sl
 80177fc:	2000      	movs	r0, #0
 80177fe:	f04f 0c0a 	mov.w	ip, #10
 8017802:	4621      	mov	r1, r4
 8017804:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017808:	3b30      	subs	r3, #48	; 0x30
 801780a:	2b09      	cmp	r3, #9
 801780c:	d94e      	bls.n	80178ac <_vfiprintf_r+0x1c4>
 801780e:	b1b0      	cbz	r0, 801783e <_vfiprintf_r+0x156>
 8017810:	9207      	str	r2, [sp, #28]
 8017812:	e014      	b.n	801783e <_vfiprintf_r+0x156>
 8017814:	eba0 0308 	sub.w	r3, r0, r8
 8017818:	fa09 f303 	lsl.w	r3, r9, r3
 801781c:	4313      	orrs	r3, r2
 801781e:	9304      	str	r3, [sp, #16]
 8017820:	46a2      	mov	sl, r4
 8017822:	e7d2      	b.n	80177ca <_vfiprintf_r+0xe2>
 8017824:	9b03      	ldr	r3, [sp, #12]
 8017826:	1d19      	adds	r1, r3, #4
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	9103      	str	r1, [sp, #12]
 801782c:	2b00      	cmp	r3, #0
 801782e:	bfbb      	ittet	lt
 8017830:	425b      	neglt	r3, r3
 8017832:	f042 0202 	orrlt.w	r2, r2, #2
 8017836:	9307      	strge	r3, [sp, #28]
 8017838:	9307      	strlt	r3, [sp, #28]
 801783a:	bfb8      	it	lt
 801783c:	9204      	strlt	r2, [sp, #16]
 801783e:	7823      	ldrb	r3, [r4, #0]
 8017840:	2b2e      	cmp	r3, #46	; 0x2e
 8017842:	d10c      	bne.n	801785e <_vfiprintf_r+0x176>
 8017844:	7863      	ldrb	r3, [r4, #1]
 8017846:	2b2a      	cmp	r3, #42	; 0x2a
 8017848:	d135      	bne.n	80178b6 <_vfiprintf_r+0x1ce>
 801784a:	9b03      	ldr	r3, [sp, #12]
 801784c:	1d1a      	adds	r2, r3, #4
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	9203      	str	r2, [sp, #12]
 8017852:	2b00      	cmp	r3, #0
 8017854:	bfb8      	it	lt
 8017856:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801785a:	3402      	adds	r4, #2
 801785c:	9305      	str	r3, [sp, #20]
 801785e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017944 <_vfiprintf_r+0x25c>
 8017862:	7821      	ldrb	r1, [r4, #0]
 8017864:	2203      	movs	r2, #3
 8017866:	4650      	mov	r0, sl
 8017868:	f7e8 fce2 	bl	8000230 <memchr>
 801786c:	b140      	cbz	r0, 8017880 <_vfiprintf_r+0x198>
 801786e:	2340      	movs	r3, #64	; 0x40
 8017870:	eba0 000a 	sub.w	r0, r0, sl
 8017874:	fa03 f000 	lsl.w	r0, r3, r0
 8017878:	9b04      	ldr	r3, [sp, #16]
 801787a:	4303      	orrs	r3, r0
 801787c:	3401      	adds	r4, #1
 801787e:	9304      	str	r3, [sp, #16]
 8017880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017884:	482c      	ldr	r0, [pc, #176]	; (8017938 <_vfiprintf_r+0x250>)
 8017886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801788a:	2206      	movs	r2, #6
 801788c:	f7e8 fcd0 	bl	8000230 <memchr>
 8017890:	2800      	cmp	r0, #0
 8017892:	d03f      	beq.n	8017914 <_vfiprintf_r+0x22c>
 8017894:	4b29      	ldr	r3, [pc, #164]	; (801793c <_vfiprintf_r+0x254>)
 8017896:	bb1b      	cbnz	r3, 80178e0 <_vfiprintf_r+0x1f8>
 8017898:	9b03      	ldr	r3, [sp, #12]
 801789a:	3307      	adds	r3, #7
 801789c:	f023 0307 	bic.w	r3, r3, #7
 80178a0:	3308      	adds	r3, #8
 80178a2:	9303      	str	r3, [sp, #12]
 80178a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178a6:	443b      	add	r3, r7
 80178a8:	9309      	str	r3, [sp, #36]	; 0x24
 80178aa:	e767      	b.n	801777c <_vfiprintf_r+0x94>
 80178ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80178b0:	460c      	mov	r4, r1
 80178b2:	2001      	movs	r0, #1
 80178b4:	e7a5      	b.n	8017802 <_vfiprintf_r+0x11a>
 80178b6:	2300      	movs	r3, #0
 80178b8:	3401      	adds	r4, #1
 80178ba:	9305      	str	r3, [sp, #20]
 80178bc:	4619      	mov	r1, r3
 80178be:	f04f 0c0a 	mov.w	ip, #10
 80178c2:	4620      	mov	r0, r4
 80178c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178c8:	3a30      	subs	r2, #48	; 0x30
 80178ca:	2a09      	cmp	r2, #9
 80178cc:	d903      	bls.n	80178d6 <_vfiprintf_r+0x1ee>
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d0c5      	beq.n	801785e <_vfiprintf_r+0x176>
 80178d2:	9105      	str	r1, [sp, #20]
 80178d4:	e7c3      	b.n	801785e <_vfiprintf_r+0x176>
 80178d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80178da:	4604      	mov	r4, r0
 80178dc:	2301      	movs	r3, #1
 80178de:	e7f0      	b.n	80178c2 <_vfiprintf_r+0x1da>
 80178e0:	ab03      	add	r3, sp, #12
 80178e2:	9300      	str	r3, [sp, #0]
 80178e4:	462a      	mov	r2, r5
 80178e6:	4b16      	ldr	r3, [pc, #88]	; (8017940 <_vfiprintf_r+0x258>)
 80178e8:	a904      	add	r1, sp, #16
 80178ea:	4630      	mov	r0, r6
 80178ec:	f3af 8000 	nop.w
 80178f0:	4607      	mov	r7, r0
 80178f2:	1c78      	adds	r0, r7, #1
 80178f4:	d1d6      	bne.n	80178a4 <_vfiprintf_r+0x1bc>
 80178f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80178f8:	07d9      	lsls	r1, r3, #31
 80178fa:	d405      	bmi.n	8017908 <_vfiprintf_r+0x220>
 80178fc:	89ab      	ldrh	r3, [r5, #12]
 80178fe:	059a      	lsls	r2, r3, #22
 8017900:	d402      	bmi.n	8017908 <_vfiprintf_r+0x220>
 8017902:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017904:	f7ff fddd 	bl	80174c2 <__retarget_lock_release_recursive>
 8017908:	89ab      	ldrh	r3, [r5, #12]
 801790a:	065b      	lsls	r3, r3, #25
 801790c:	f53f af12 	bmi.w	8017734 <_vfiprintf_r+0x4c>
 8017910:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017912:	e711      	b.n	8017738 <_vfiprintf_r+0x50>
 8017914:	ab03      	add	r3, sp, #12
 8017916:	9300      	str	r3, [sp, #0]
 8017918:	462a      	mov	r2, r5
 801791a:	4b09      	ldr	r3, [pc, #36]	; (8017940 <_vfiprintf_r+0x258>)
 801791c:	a904      	add	r1, sp, #16
 801791e:	4630      	mov	r0, r6
 8017920:	f000 f880 	bl	8017a24 <_printf_i>
 8017924:	e7e4      	b.n	80178f0 <_vfiprintf_r+0x208>
 8017926:	bf00      	nop
 8017928:	0801ae44 	.word	0x0801ae44
 801792c:	0801ae64 	.word	0x0801ae64
 8017930:	0801ae24 	.word	0x0801ae24
 8017934:	0801ae84 	.word	0x0801ae84
 8017938:	0801ae8e 	.word	0x0801ae8e
 801793c:	00000000 	.word	0x00000000
 8017940:	080176c3 	.word	0x080176c3
 8017944:	0801ae8a 	.word	0x0801ae8a

08017948 <_printf_common>:
 8017948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801794c:	4616      	mov	r6, r2
 801794e:	4699      	mov	r9, r3
 8017950:	688a      	ldr	r2, [r1, #8]
 8017952:	690b      	ldr	r3, [r1, #16]
 8017954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017958:	4293      	cmp	r3, r2
 801795a:	bfb8      	it	lt
 801795c:	4613      	movlt	r3, r2
 801795e:	6033      	str	r3, [r6, #0]
 8017960:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017964:	4607      	mov	r7, r0
 8017966:	460c      	mov	r4, r1
 8017968:	b10a      	cbz	r2, 801796e <_printf_common+0x26>
 801796a:	3301      	adds	r3, #1
 801796c:	6033      	str	r3, [r6, #0]
 801796e:	6823      	ldr	r3, [r4, #0]
 8017970:	0699      	lsls	r1, r3, #26
 8017972:	bf42      	ittt	mi
 8017974:	6833      	ldrmi	r3, [r6, #0]
 8017976:	3302      	addmi	r3, #2
 8017978:	6033      	strmi	r3, [r6, #0]
 801797a:	6825      	ldr	r5, [r4, #0]
 801797c:	f015 0506 	ands.w	r5, r5, #6
 8017980:	d106      	bne.n	8017990 <_printf_common+0x48>
 8017982:	f104 0a19 	add.w	sl, r4, #25
 8017986:	68e3      	ldr	r3, [r4, #12]
 8017988:	6832      	ldr	r2, [r6, #0]
 801798a:	1a9b      	subs	r3, r3, r2
 801798c:	42ab      	cmp	r3, r5
 801798e:	dc26      	bgt.n	80179de <_printf_common+0x96>
 8017990:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017994:	1e13      	subs	r3, r2, #0
 8017996:	6822      	ldr	r2, [r4, #0]
 8017998:	bf18      	it	ne
 801799a:	2301      	movne	r3, #1
 801799c:	0692      	lsls	r2, r2, #26
 801799e:	d42b      	bmi.n	80179f8 <_printf_common+0xb0>
 80179a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80179a4:	4649      	mov	r1, r9
 80179a6:	4638      	mov	r0, r7
 80179a8:	47c0      	blx	r8
 80179aa:	3001      	adds	r0, #1
 80179ac:	d01e      	beq.n	80179ec <_printf_common+0xa4>
 80179ae:	6823      	ldr	r3, [r4, #0]
 80179b0:	68e5      	ldr	r5, [r4, #12]
 80179b2:	6832      	ldr	r2, [r6, #0]
 80179b4:	f003 0306 	and.w	r3, r3, #6
 80179b8:	2b04      	cmp	r3, #4
 80179ba:	bf08      	it	eq
 80179bc:	1aad      	subeq	r5, r5, r2
 80179be:	68a3      	ldr	r3, [r4, #8]
 80179c0:	6922      	ldr	r2, [r4, #16]
 80179c2:	bf0c      	ite	eq
 80179c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80179c8:	2500      	movne	r5, #0
 80179ca:	4293      	cmp	r3, r2
 80179cc:	bfc4      	itt	gt
 80179ce:	1a9b      	subgt	r3, r3, r2
 80179d0:	18ed      	addgt	r5, r5, r3
 80179d2:	2600      	movs	r6, #0
 80179d4:	341a      	adds	r4, #26
 80179d6:	42b5      	cmp	r5, r6
 80179d8:	d11a      	bne.n	8017a10 <_printf_common+0xc8>
 80179da:	2000      	movs	r0, #0
 80179dc:	e008      	b.n	80179f0 <_printf_common+0xa8>
 80179de:	2301      	movs	r3, #1
 80179e0:	4652      	mov	r2, sl
 80179e2:	4649      	mov	r1, r9
 80179e4:	4638      	mov	r0, r7
 80179e6:	47c0      	blx	r8
 80179e8:	3001      	adds	r0, #1
 80179ea:	d103      	bne.n	80179f4 <_printf_common+0xac>
 80179ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80179f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179f4:	3501      	adds	r5, #1
 80179f6:	e7c6      	b.n	8017986 <_printf_common+0x3e>
 80179f8:	18e1      	adds	r1, r4, r3
 80179fa:	1c5a      	adds	r2, r3, #1
 80179fc:	2030      	movs	r0, #48	; 0x30
 80179fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017a02:	4422      	add	r2, r4
 8017a04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017a08:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017a0c:	3302      	adds	r3, #2
 8017a0e:	e7c7      	b.n	80179a0 <_printf_common+0x58>
 8017a10:	2301      	movs	r3, #1
 8017a12:	4622      	mov	r2, r4
 8017a14:	4649      	mov	r1, r9
 8017a16:	4638      	mov	r0, r7
 8017a18:	47c0      	blx	r8
 8017a1a:	3001      	adds	r0, #1
 8017a1c:	d0e6      	beq.n	80179ec <_printf_common+0xa4>
 8017a1e:	3601      	adds	r6, #1
 8017a20:	e7d9      	b.n	80179d6 <_printf_common+0x8e>
	...

08017a24 <_printf_i>:
 8017a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a28:	7e0f      	ldrb	r7, [r1, #24]
 8017a2a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017a2c:	2f78      	cmp	r7, #120	; 0x78
 8017a2e:	4691      	mov	r9, r2
 8017a30:	4680      	mov	r8, r0
 8017a32:	460c      	mov	r4, r1
 8017a34:	469a      	mov	sl, r3
 8017a36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017a3a:	d807      	bhi.n	8017a4c <_printf_i+0x28>
 8017a3c:	2f62      	cmp	r7, #98	; 0x62
 8017a3e:	d80a      	bhi.n	8017a56 <_printf_i+0x32>
 8017a40:	2f00      	cmp	r7, #0
 8017a42:	f000 80d8 	beq.w	8017bf6 <_printf_i+0x1d2>
 8017a46:	2f58      	cmp	r7, #88	; 0x58
 8017a48:	f000 80a3 	beq.w	8017b92 <_printf_i+0x16e>
 8017a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017a54:	e03a      	b.n	8017acc <_printf_i+0xa8>
 8017a56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017a5a:	2b15      	cmp	r3, #21
 8017a5c:	d8f6      	bhi.n	8017a4c <_printf_i+0x28>
 8017a5e:	a101      	add	r1, pc, #4	; (adr r1, 8017a64 <_printf_i+0x40>)
 8017a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017a64:	08017abd 	.word	0x08017abd
 8017a68:	08017ad1 	.word	0x08017ad1
 8017a6c:	08017a4d 	.word	0x08017a4d
 8017a70:	08017a4d 	.word	0x08017a4d
 8017a74:	08017a4d 	.word	0x08017a4d
 8017a78:	08017a4d 	.word	0x08017a4d
 8017a7c:	08017ad1 	.word	0x08017ad1
 8017a80:	08017a4d 	.word	0x08017a4d
 8017a84:	08017a4d 	.word	0x08017a4d
 8017a88:	08017a4d 	.word	0x08017a4d
 8017a8c:	08017a4d 	.word	0x08017a4d
 8017a90:	08017bdd 	.word	0x08017bdd
 8017a94:	08017b01 	.word	0x08017b01
 8017a98:	08017bbf 	.word	0x08017bbf
 8017a9c:	08017a4d 	.word	0x08017a4d
 8017aa0:	08017a4d 	.word	0x08017a4d
 8017aa4:	08017bff 	.word	0x08017bff
 8017aa8:	08017a4d 	.word	0x08017a4d
 8017aac:	08017b01 	.word	0x08017b01
 8017ab0:	08017a4d 	.word	0x08017a4d
 8017ab4:	08017a4d 	.word	0x08017a4d
 8017ab8:	08017bc7 	.word	0x08017bc7
 8017abc:	682b      	ldr	r3, [r5, #0]
 8017abe:	1d1a      	adds	r2, r3, #4
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	602a      	str	r2, [r5, #0]
 8017ac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017ac8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017acc:	2301      	movs	r3, #1
 8017ace:	e0a3      	b.n	8017c18 <_printf_i+0x1f4>
 8017ad0:	6820      	ldr	r0, [r4, #0]
 8017ad2:	6829      	ldr	r1, [r5, #0]
 8017ad4:	0606      	lsls	r6, r0, #24
 8017ad6:	f101 0304 	add.w	r3, r1, #4
 8017ada:	d50a      	bpl.n	8017af2 <_printf_i+0xce>
 8017adc:	680e      	ldr	r6, [r1, #0]
 8017ade:	602b      	str	r3, [r5, #0]
 8017ae0:	2e00      	cmp	r6, #0
 8017ae2:	da03      	bge.n	8017aec <_printf_i+0xc8>
 8017ae4:	232d      	movs	r3, #45	; 0x2d
 8017ae6:	4276      	negs	r6, r6
 8017ae8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017aec:	485e      	ldr	r0, [pc, #376]	; (8017c68 <_printf_i+0x244>)
 8017aee:	230a      	movs	r3, #10
 8017af0:	e019      	b.n	8017b26 <_printf_i+0x102>
 8017af2:	680e      	ldr	r6, [r1, #0]
 8017af4:	602b      	str	r3, [r5, #0]
 8017af6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017afa:	bf18      	it	ne
 8017afc:	b236      	sxthne	r6, r6
 8017afe:	e7ef      	b.n	8017ae0 <_printf_i+0xbc>
 8017b00:	682b      	ldr	r3, [r5, #0]
 8017b02:	6820      	ldr	r0, [r4, #0]
 8017b04:	1d19      	adds	r1, r3, #4
 8017b06:	6029      	str	r1, [r5, #0]
 8017b08:	0601      	lsls	r1, r0, #24
 8017b0a:	d501      	bpl.n	8017b10 <_printf_i+0xec>
 8017b0c:	681e      	ldr	r6, [r3, #0]
 8017b0e:	e002      	b.n	8017b16 <_printf_i+0xf2>
 8017b10:	0646      	lsls	r6, r0, #25
 8017b12:	d5fb      	bpl.n	8017b0c <_printf_i+0xe8>
 8017b14:	881e      	ldrh	r6, [r3, #0]
 8017b16:	4854      	ldr	r0, [pc, #336]	; (8017c68 <_printf_i+0x244>)
 8017b18:	2f6f      	cmp	r7, #111	; 0x6f
 8017b1a:	bf0c      	ite	eq
 8017b1c:	2308      	moveq	r3, #8
 8017b1e:	230a      	movne	r3, #10
 8017b20:	2100      	movs	r1, #0
 8017b22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017b26:	6865      	ldr	r5, [r4, #4]
 8017b28:	60a5      	str	r5, [r4, #8]
 8017b2a:	2d00      	cmp	r5, #0
 8017b2c:	bfa2      	ittt	ge
 8017b2e:	6821      	ldrge	r1, [r4, #0]
 8017b30:	f021 0104 	bicge.w	r1, r1, #4
 8017b34:	6021      	strge	r1, [r4, #0]
 8017b36:	b90e      	cbnz	r6, 8017b3c <_printf_i+0x118>
 8017b38:	2d00      	cmp	r5, #0
 8017b3a:	d04d      	beq.n	8017bd8 <_printf_i+0x1b4>
 8017b3c:	4615      	mov	r5, r2
 8017b3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017b42:	fb03 6711 	mls	r7, r3, r1, r6
 8017b46:	5dc7      	ldrb	r7, [r0, r7]
 8017b48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017b4c:	4637      	mov	r7, r6
 8017b4e:	42bb      	cmp	r3, r7
 8017b50:	460e      	mov	r6, r1
 8017b52:	d9f4      	bls.n	8017b3e <_printf_i+0x11a>
 8017b54:	2b08      	cmp	r3, #8
 8017b56:	d10b      	bne.n	8017b70 <_printf_i+0x14c>
 8017b58:	6823      	ldr	r3, [r4, #0]
 8017b5a:	07de      	lsls	r6, r3, #31
 8017b5c:	d508      	bpl.n	8017b70 <_printf_i+0x14c>
 8017b5e:	6923      	ldr	r3, [r4, #16]
 8017b60:	6861      	ldr	r1, [r4, #4]
 8017b62:	4299      	cmp	r1, r3
 8017b64:	bfde      	ittt	le
 8017b66:	2330      	movle	r3, #48	; 0x30
 8017b68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017b6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8017b70:	1b52      	subs	r2, r2, r5
 8017b72:	6122      	str	r2, [r4, #16]
 8017b74:	f8cd a000 	str.w	sl, [sp]
 8017b78:	464b      	mov	r3, r9
 8017b7a:	aa03      	add	r2, sp, #12
 8017b7c:	4621      	mov	r1, r4
 8017b7e:	4640      	mov	r0, r8
 8017b80:	f7ff fee2 	bl	8017948 <_printf_common>
 8017b84:	3001      	adds	r0, #1
 8017b86:	d14c      	bne.n	8017c22 <_printf_i+0x1fe>
 8017b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b8c:	b004      	add	sp, #16
 8017b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b92:	4835      	ldr	r0, [pc, #212]	; (8017c68 <_printf_i+0x244>)
 8017b94:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017b98:	6829      	ldr	r1, [r5, #0]
 8017b9a:	6823      	ldr	r3, [r4, #0]
 8017b9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017ba0:	6029      	str	r1, [r5, #0]
 8017ba2:	061d      	lsls	r5, r3, #24
 8017ba4:	d514      	bpl.n	8017bd0 <_printf_i+0x1ac>
 8017ba6:	07df      	lsls	r7, r3, #31
 8017ba8:	bf44      	itt	mi
 8017baa:	f043 0320 	orrmi.w	r3, r3, #32
 8017bae:	6023      	strmi	r3, [r4, #0]
 8017bb0:	b91e      	cbnz	r6, 8017bba <_printf_i+0x196>
 8017bb2:	6823      	ldr	r3, [r4, #0]
 8017bb4:	f023 0320 	bic.w	r3, r3, #32
 8017bb8:	6023      	str	r3, [r4, #0]
 8017bba:	2310      	movs	r3, #16
 8017bbc:	e7b0      	b.n	8017b20 <_printf_i+0xfc>
 8017bbe:	6823      	ldr	r3, [r4, #0]
 8017bc0:	f043 0320 	orr.w	r3, r3, #32
 8017bc4:	6023      	str	r3, [r4, #0]
 8017bc6:	2378      	movs	r3, #120	; 0x78
 8017bc8:	4828      	ldr	r0, [pc, #160]	; (8017c6c <_printf_i+0x248>)
 8017bca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017bce:	e7e3      	b.n	8017b98 <_printf_i+0x174>
 8017bd0:	0659      	lsls	r1, r3, #25
 8017bd2:	bf48      	it	mi
 8017bd4:	b2b6      	uxthmi	r6, r6
 8017bd6:	e7e6      	b.n	8017ba6 <_printf_i+0x182>
 8017bd8:	4615      	mov	r5, r2
 8017bda:	e7bb      	b.n	8017b54 <_printf_i+0x130>
 8017bdc:	682b      	ldr	r3, [r5, #0]
 8017bde:	6826      	ldr	r6, [r4, #0]
 8017be0:	6961      	ldr	r1, [r4, #20]
 8017be2:	1d18      	adds	r0, r3, #4
 8017be4:	6028      	str	r0, [r5, #0]
 8017be6:	0635      	lsls	r5, r6, #24
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	d501      	bpl.n	8017bf0 <_printf_i+0x1cc>
 8017bec:	6019      	str	r1, [r3, #0]
 8017bee:	e002      	b.n	8017bf6 <_printf_i+0x1d2>
 8017bf0:	0670      	lsls	r0, r6, #25
 8017bf2:	d5fb      	bpl.n	8017bec <_printf_i+0x1c8>
 8017bf4:	8019      	strh	r1, [r3, #0]
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	6123      	str	r3, [r4, #16]
 8017bfa:	4615      	mov	r5, r2
 8017bfc:	e7ba      	b.n	8017b74 <_printf_i+0x150>
 8017bfe:	682b      	ldr	r3, [r5, #0]
 8017c00:	1d1a      	adds	r2, r3, #4
 8017c02:	602a      	str	r2, [r5, #0]
 8017c04:	681d      	ldr	r5, [r3, #0]
 8017c06:	6862      	ldr	r2, [r4, #4]
 8017c08:	2100      	movs	r1, #0
 8017c0a:	4628      	mov	r0, r5
 8017c0c:	f7e8 fb10 	bl	8000230 <memchr>
 8017c10:	b108      	cbz	r0, 8017c16 <_printf_i+0x1f2>
 8017c12:	1b40      	subs	r0, r0, r5
 8017c14:	6060      	str	r0, [r4, #4]
 8017c16:	6863      	ldr	r3, [r4, #4]
 8017c18:	6123      	str	r3, [r4, #16]
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c20:	e7a8      	b.n	8017b74 <_printf_i+0x150>
 8017c22:	6923      	ldr	r3, [r4, #16]
 8017c24:	462a      	mov	r2, r5
 8017c26:	4649      	mov	r1, r9
 8017c28:	4640      	mov	r0, r8
 8017c2a:	47d0      	blx	sl
 8017c2c:	3001      	adds	r0, #1
 8017c2e:	d0ab      	beq.n	8017b88 <_printf_i+0x164>
 8017c30:	6823      	ldr	r3, [r4, #0]
 8017c32:	079b      	lsls	r3, r3, #30
 8017c34:	d413      	bmi.n	8017c5e <_printf_i+0x23a>
 8017c36:	68e0      	ldr	r0, [r4, #12]
 8017c38:	9b03      	ldr	r3, [sp, #12]
 8017c3a:	4298      	cmp	r0, r3
 8017c3c:	bfb8      	it	lt
 8017c3e:	4618      	movlt	r0, r3
 8017c40:	e7a4      	b.n	8017b8c <_printf_i+0x168>
 8017c42:	2301      	movs	r3, #1
 8017c44:	4632      	mov	r2, r6
 8017c46:	4649      	mov	r1, r9
 8017c48:	4640      	mov	r0, r8
 8017c4a:	47d0      	blx	sl
 8017c4c:	3001      	adds	r0, #1
 8017c4e:	d09b      	beq.n	8017b88 <_printf_i+0x164>
 8017c50:	3501      	adds	r5, #1
 8017c52:	68e3      	ldr	r3, [r4, #12]
 8017c54:	9903      	ldr	r1, [sp, #12]
 8017c56:	1a5b      	subs	r3, r3, r1
 8017c58:	42ab      	cmp	r3, r5
 8017c5a:	dcf2      	bgt.n	8017c42 <_printf_i+0x21e>
 8017c5c:	e7eb      	b.n	8017c36 <_printf_i+0x212>
 8017c5e:	2500      	movs	r5, #0
 8017c60:	f104 0619 	add.w	r6, r4, #25
 8017c64:	e7f5      	b.n	8017c52 <_printf_i+0x22e>
 8017c66:	bf00      	nop
 8017c68:	0801ae95 	.word	0x0801ae95
 8017c6c:	0801aea6 	.word	0x0801aea6

08017c70 <_sbrk_r>:
 8017c70:	b538      	push	{r3, r4, r5, lr}
 8017c72:	4d06      	ldr	r5, [pc, #24]	; (8017c8c <_sbrk_r+0x1c>)
 8017c74:	2300      	movs	r3, #0
 8017c76:	4604      	mov	r4, r0
 8017c78:	4608      	mov	r0, r1
 8017c7a:	602b      	str	r3, [r5, #0]
 8017c7c:	f7ea fc2a 	bl	80024d4 <_sbrk>
 8017c80:	1c43      	adds	r3, r0, #1
 8017c82:	d102      	bne.n	8017c8a <_sbrk_r+0x1a>
 8017c84:	682b      	ldr	r3, [r5, #0]
 8017c86:	b103      	cbz	r3, 8017c8a <_sbrk_r+0x1a>
 8017c88:	6023      	str	r3, [r4, #0]
 8017c8a:	bd38      	pop	{r3, r4, r5, pc}
 8017c8c:	20009440 	.word	0x20009440

08017c90 <__sread>:
 8017c90:	b510      	push	{r4, lr}
 8017c92:	460c      	mov	r4, r1
 8017c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c98:	f000 fa6e 	bl	8018178 <_read_r>
 8017c9c:	2800      	cmp	r0, #0
 8017c9e:	bfab      	itete	ge
 8017ca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8017ca4:	181b      	addge	r3, r3, r0
 8017ca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017caa:	bfac      	ite	ge
 8017cac:	6563      	strge	r3, [r4, #84]	; 0x54
 8017cae:	81a3      	strhlt	r3, [r4, #12]
 8017cb0:	bd10      	pop	{r4, pc}

08017cb2 <__swrite>:
 8017cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb6:	461f      	mov	r7, r3
 8017cb8:	898b      	ldrh	r3, [r1, #12]
 8017cba:	05db      	lsls	r3, r3, #23
 8017cbc:	4605      	mov	r5, r0
 8017cbe:	460c      	mov	r4, r1
 8017cc0:	4616      	mov	r6, r2
 8017cc2:	d505      	bpl.n	8017cd0 <__swrite+0x1e>
 8017cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cc8:	2302      	movs	r3, #2
 8017cca:	2200      	movs	r2, #0
 8017ccc:	f000 f9d0 	bl	8018070 <_lseek_r>
 8017cd0:	89a3      	ldrh	r3, [r4, #12]
 8017cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017cda:	81a3      	strh	r3, [r4, #12]
 8017cdc:	4632      	mov	r2, r6
 8017cde:	463b      	mov	r3, r7
 8017ce0:	4628      	mov	r0, r5
 8017ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ce6:	f000 b869 	b.w	8017dbc <_write_r>

08017cea <__sseek>:
 8017cea:	b510      	push	{r4, lr}
 8017cec:	460c      	mov	r4, r1
 8017cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cf2:	f000 f9bd 	bl	8018070 <_lseek_r>
 8017cf6:	1c43      	adds	r3, r0, #1
 8017cf8:	89a3      	ldrh	r3, [r4, #12]
 8017cfa:	bf15      	itete	ne
 8017cfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8017cfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017d02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017d06:	81a3      	strheq	r3, [r4, #12]
 8017d08:	bf18      	it	ne
 8017d0a:	81a3      	strhne	r3, [r4, #12]
 8017d0c:	bd10      	pop	{r4, pc}

08017d0e <__sclose>:
 8017d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d12:	f000 b8db 	b.w	8017ecc <_close_r>
	...

08017d18 <__swbuf_r>:
 8017d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d1a:	460e      	mov	r6, r1
 8017d1c:	4614      	mov	r4, r2
 8017d1e:	4605      	mov	r5, r0
 8017d20:	b118      	cbz	r0, 8017d2a <__swbuf_r+0x12>
 8017d22:	6983      	ldr	r3, [r0, #24]
 8017d24:	b90b      	cbnz	r3, 8017d2a <__swbuf_r+0x12>
 8017d26:	f7ff fb1b 	bl	8017360 <__sinit>
 8017d2a:	4b21      	ldr	r3, [pc, #132]	; (8017db0 <__swbuf_r+0x98>)
 8017d2c:	429c      	cmp	r4, r3
 8017d2e:	d12b      	bne.n	8017d88 <__swbuf_r+0x70>
 8017d30:	686c      	ldr	r4, [r5, #4]
 8017d32:	69a3      	ldr	r3, [r4, #24]
 8017d34:	60a3      	str	r3, [r4, #8]
 8017d36:	89a3      	ldrh	r3, [r4, #12]
 8017d38:	071a      	lsls	r2, r3, #28
 8017d3a:	d52f      	bpl.n	8017d9c <__swbuf_r+0x84>
 8017d3c:	6923      	ldr	r3, [r4, #16]
 8017d3e:	b36b      	cbz	r3, 8017d9c <__swbuf_r+0x84>
 8017d40:	6923      	ldr	r3, [r4, #16]
 8017d42:	6820      	ldr	r0, [r4, #0]
 8017d44:	1ac0      	subs	r0, r0, r3
 8017d46:	6963      	ldr	r3, [r4, #20]
 8017d48:	b2f6      	uxtb	r6, r6
 8017d4a:	4283      	cmp	r3, r0
 8017d4c:	4637      	mov	r7, r6
 8017d4e:	dc04      	bgt.n	8017d5a <__swbuf_r+0x42>
 8017d50:	4621      	mov	r1, r4
 8017d52:	4628      	mov	r0, r5
 8017d54:	f000 f950 	bl	8017ff8 <_fflush_r>
 8017d58:	bb30      	cbnz	r0, 8017da8 <__swbuf_r+0x90>
 8017d5a:	68a3      	ldr	r3, [r4, #8]
 8017d5c:	3b01      	subs	r3, #1
 8017d5e:	60a3      	str	r3, [r4, #8]
 8017d60:	6823      	ldr	r3, [r4, #0]
 8017d62:	1c5a      	adds	r2, r3, #1
 8017d64:	6022      	str	r2, [r4, #0]
 8017d66:	701e      	strb	r6, [r3, #0]
 8017d68:	6963      	ldr	r3, [r4, #20]
 8017d6a:	3001      	adds	r0, #1
 8017d6c:	4283      	cmp	r3, r0
 8017d6e:	d004      	beq.n	8017d7a <__swbuf_r+0x62>
 8017d70:	89a3      	ldrh	r3, [r4, #12]
 8017d72:	07db      	lsls	r3, r3, #31
 8017d74:	d506      	bpl.n	8017d84 <__swbuf_r+0x6c>
 8017d76:	2e0a      	cmp	r6, #10
 8017d78:	d104      	bne.n	8017d84 <__swbuf_r+0x6c>
 8017d7a:	4621      	mov	r1, r4
 8017d7c:	4628      	mov	r0, r5
 8017d7e:	f000 f93b 	bl	8017ff8 <_fflush_r>
 8017d82:	b988      	cbnz	r0, 8017da8 <__swbuf_r+0x90>
 8017d84:	4638      	mov	r0, r7
 8017d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d88:	4b0a      	ldr	r3, [pc, #40]	; (8017db4 <__swbuf_r+0x9c>)
 8017d8a:	429c      	cmp	r4, r3
 8017d8c:	d101      	bne.n	8017d92 <__swbuf_r+0x7a>
 8017d8e:	68ac      	ldr	r4, [r5, #8]
 8017d90:	e7cf      	b.n	8017d32 <__swbuf_r+0x1a>
 8017d92:	4b09      	ldr	r3, [pc, #36]	; (8017db8 <__swbuf_r+0xa0>)
 8017d94:	429c      	cmp	r4, r3
 8017d96:	bf08      	it	eq
 8017d98:	68ec      	ldreq	r4, [r5, #12]
 8017d9a:	e7ca      	b.n	8017d32 <__swbuf_r+0x1a>
 8017d9c:	4621      	mov	r1, r4
 8017d9e:	4628      	mov	r0, r5
 8017da0:	f000 f81e 	bl	8017de0 <__swsetup_r>
 8017da4:	2800      	cmp	r0, #0
 8017da6:	d0cb      	beq.n	8017d40 <__swbuf_r+0x28>
 8017da8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8017dac:	e7ea      	b.n	8017d84 <__swbuf_r+0x6c>
 8017dae:	bf00      	nop
 8017db0:	0801ae44 	.word	0x0801ae44
 8017db4:	0801ae64 	.word	0x0801ae64
 8017db8:	0801ae24 	.word	0x0801ae24

08017dbc <_write_r>:
 8017dbc:	b538      	push	{r3, r4, r5, lr}
 8017dbe:	4d07      	ldr	r5, [pc, #28]	; (8017ddc <_write_r+0x20>)
 8017dc0:	4604      	mov	r4, r0
 8017dc2:	4608      	mov	r0, r1
 8017dc4:	4611      	mov	r1, r2
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	602a      	str	r2, [r5, #0]
 8017dca:	461a      	mov	r2, r3
 8017dcc:	f7fe fd84 	bl	80168d8 <_write>
 8017dd0:	1c43      	adds	r3, r0, #1
 8017dd2:	d102      	bne.n	8017dda <_write_r+0x1e>
 8017dd4:	682b      	ldr	r3, [r5, #0]
 8017dd6:	b103      	cbz	r3, 8017dda <_write_r+0x1e>
 8017dd8:	6023      	str	r3, [r4, #0]
 8017dda:	bd38      	pop	{r3, r4, r5, pc}
 8017ddc:	20009440 	.word	0x20009440

08017de0 <__swsetup_r>:
 8017de0:	4b32      	ldr	r3, [pc, #200]	; (8017eac <__swsetup_r+0xcc>)
 8017de2:	b570      	push	{r4, r5, r6, lr}
 8017de4:	681d      	ldr	r5, [r3, #0]
 8017de6:	4606      	mov	r6, r0
 8017de8:	460c      	mov	r4, r1
 8017dea:	b125      	cbz	r5, 8017df6 <__swsetup_r+0x16>
 8017dec:	69ab      	ldr	r3, [r5, #24]
 8017dee:	b913      	cbnz	r3, 8017df6 <__swsetup_r+0x16>
 8017df0:	4628      	mov	r0, r5
 8017df2:	f7ff fab5 	bl	8017360 <__sinit>
 8017df6:	4b2e      	ldr	r3, [pc, #184]	; (8017eb0 <__swsetup_r+0xd0>)
 8017df8:	429c      	cmp	r4, r3
 8017dfa:	d10f      	bne.n	8017e1c <__swsetup_r+0x3c>
 8017dfc:	686c      	ldr	r4, [r5, #4]
 8017dfe:	89a3      	ldrh	r3, [r4, #12]
 8017e00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017e04:	0719      	lsls	r1, r3, #28
 8017e06:	d42c      	bmi.n	8017e62 <__swsetup_r+0x82>
 8017e08:	06dd      	lsls	r5, r3, #27
 8017e0a:	d411      	bmi.n	8017e30 <__swsetup_r+0x50>
 8017e0c:	2309      	movs	r3, #9
 8017e0e:	6033      	str	r3, [r6, #0]
 8017e10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017e14:	81a3      	strh	r3, [r4, #12]
 8017e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017e1a:	e03e      	b.n	8017e9a <__swsetup_r+0xba>
 8017e1c:	4b25      	ldr	r3, [pc, #148]	; (8017eb4 <__swsetup_r+0xd4>)
 8017e1e:	429c      	cmp	r4, r3
 8017e20:	d101      	bne.n	8017e26 <__swsetup_r+0x46>
 8017e22:	68ac      	ldr	r4, [r5, #8]
 8017e24:	e7eb      	b.n	8017dfe <__swsetup_r+0x1e>
 8017e26:	4b24      	ldr	r3, [pc, #144]	; (8017eb8 <__swsetup_r+0xd8>)
 8017e28:	429c      	cmp	r4, r3
 8017e2a:	bf08      	it	eq
 8017e2c:	68ec      	ldreq	r4, [r5, #12]
 8017e2e:	e7e6      	b.n	8017dfe <__swsetup_r+0x1e>
 8017e30:	0758      	lsls	r0, r3, #29
 8017e32:	d512      	bpl.n	8017e5a <__swsetup_r+0x7a>
 8017e34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017e36:	b141      	cbz	r1, 8017e4a <__swsetup_r+0x6a>
 8017e38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e3c:	4299      	cmp	r1, r3
 8017e3e:	d002      	beq.n	8017e46 <__swsetup_r+0x66>
 8017e40:	4630      	mov	r0, r6
 8017e42:	f7ff fb47 	bl	80174d4 <_free_r>
 8017e46:	2300      	movs	r3, #0
 8017e48:	6363      	str	r3, [r4, #52]	; 0x34
 8017e4a:	89a3      	ldrh	r3, [r4, #12]
 8017e4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017e50:	81a3      	strh	r3, [r4, #12]
 8017e52:	2300      	movs	r3, #0
 8017e54:	6063      	str	r3, [r4, #4]
 8017e56:	6923      	ldr	r3, [r4, #16]
 8017e58:	6023      	str	r3, [r4, #0]
 8017e5a:	89a3      	ldrh	r3, [r4, #12]
 8017e5c:	f043 0308 	orr.w	r3, r3, #8
 8017e60:	81a3      	strh	r3, [r4, #12]
 8017e62:	6923      	ldr	r3, [r4, #16]
 8017e64:	b94b      	cbnz	r3, 8017e7a <__swsetup_r+0x9a>
 8017e66:	89a3      	ldrh	r3, [r4, #12]
 8017e68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e70:	d003      	beq.n	8017e7a <__swsetup_r+0x9a>
 8017e72:	4621      	mov	r1, r4
 8017e74:	4630      	mov	r0, r6
 8017e76:	f000 f933 	bl	80180e0 <__smakebuf_r>
 8017e7a:	89a0      	ldrh	r0, [r4, #12]
 8017e7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017e80:	f010 0301 	ands.w	r3, r0, #1
 8017e84:	d00a      	beq.n	8017e9c <__swsetup_r+0xbc>
 8017e86:	2300      	movs	r3, #0
 8017e88:	60a3      	str	r3, [r4, #8]
 8017e8a:	6963      	ldr	r3, [r4, #20]
 8017e8c:	425b      	negs	r3, r3
 8017e8e:	61a3      	str	r3, [r4, #24]
 8017e90:	6923      	ldr	r3, [r4, #16]
 8017e92:	b943      	cbnz	r3, 8017ea6 <__swsetup_r+0xc6>
 8017e94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017e98:	d1ba      	bne.n	8017e10 <__swsetup_r+0x30>
 8017e9a:	bd70      	pop	{r4, r5, r6, pc}
 8017e9c:	0781      	lsls	r1, r0, #30
 8017e9e:	bf58      	it	pl
 8017ea0:	6963      	ldrpl	r3, [r4, #20]
 8017ea2:	60a3      	str	r3, [r4, #8]
 8017ea4:	e7f4      	b.n	8017e90 <__swsetup_r+0xb0>
 8017ea6:	2000      	movs	r0, #0
 8017ea8:	e7f7      	b.n	8017e9a <__swsetup_r+0xba>
 8017eaa:	bf00      	nop
 8017eac:	2000002c 	.word	0x2000002c
 8017eb0:	0801ae44 	.word	0x0801ae44
 8017eb4:	0801ae64 	.word	0x0801ae64
 8017eb8:	0801ae24 	.word	0x0801ae24

08017ebc <abort>:
 8017ebc:	b508      	push	{r3, lr}
 8017ebe:	2006      	movs	r0, #6
 8017ec0:	f000 f994 	bl	80181ec <raise>
 8017ec4:	2001      	movs	r0, #1
 8017ec6:	f7ea fac7 	bl	8002458 <_exit>
	...

08017ecc <_close_r>:
 8017ecc:	b538      	push	{r3, r4, r5, lr}
 8017ece:	4d06      	ldr	r5, [pc, #24]	; (8017ee8 <_close_r+0x1c>)
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	4604      	mov	r4, r0
 8017ed4:	4608      	mov	r0, r1
 8017ed6:	602b      	str	r3, [r5, #0]
 8017ed8:	f7ea fac8 	bl	800246c <_close>
 8017edc:	1c43      	adds	r3, r0, #1
 8017ede:	d102      	bne.n	8017ee6 <_close_r+0x1a>
 8017ee0:	682b      	ldr	r3, [r5, #0]
 8017ee2:	b103      	cbz	r3, 8017ee6 <_close_r+0x1a>
 8017ee4:	6023      	str	r3, [r4, #0]
 8017ee6:	bd38      	pop	{r3, r4, r5, pc}
 8017ee8:	20009440 	.word	0x20009440

08017eec <__sflush_r>:
 8017eec:	898a      	ldrh	r2, [r1, #12]
 8017eee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ef2:	4605      	mov	r5, r0
 8017ef4:	0710      	lsls	r0, r2, #28
 8017ef6:	460c      	mov	r4, r1
 8017ef8:	d458      	bmi.n	8017fac <__sflush_r+0xc0>
 8017efa:	684b      	ldr	r3, [r1, #4]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	dc05      	bgt.n	8017f0c <__sflush_r+0x20>
 8017f00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	dc02      	bgt.n	8017f0c <__sflush_r+0x20>
 8017f06:	2000      	movs	r0, #0
 8017f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017f0e:	2e00      	cmp	r6, #0
 8017f10:	d0f9      	beq.n	8017f06 <__sflush_r+0x1a>
 8017f12:	2300      	movs	r3, #0
 8017f14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017f18:	682f      	ldr	r7, [r5, #0]
 8017f1a:	602b      	str	r3, [r5, #0]
 8017f1c:	d032      	beq.n	8017f84 <__sflush_r+0x98>
 8017f1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017f20:	89a3      	ldrh	r3, [r4, #12]
 8017f22:	075a      	lsls	r2, r3, #29
 8017f24:	d505      	bpl.n	8017f32 <__sflush_r+0x46>
 8017f26:	6863      	ldr	r3, [r4, #4]
 8017f28:	1ac0      	subs	r0, r0, r3
 8017f2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017f2c:	b10b      	cbz	r3, 8017f32 <__sflush_r+0x46>
 8017f2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017f30:	1ac0      	subs	r0, r0, r3
 8017f32:	2300      	movs	r3, #0
 8017f34:	4602      	mov	r2, r0
 8017f36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017f38:	6a21      	ldr	r1, [r4, #32]
 8017f3a:	4628      	mov	r0, r5
 8017f3c:	47b0      	blx	r6
 8017f3e:	1c43      	adds	r3, r0, #1
 8017f40:	89a3      	ldrh	r3, [r4, #12]
 8017f42:	d106      	bne.n	8017f52 <__sflush_r+0x66>
 8017f44:	6829      	ldr	r1, [r5, #0]
 8017f46:	291d      	cmp	r1, #29
 8017f48:	d82c      	bhi.n	8017fa4 <__sflush_r+0xb8>
 8017f4a:	4a2a      	ldr	r2, [pc, #168]	; (8017ff4 <__sflush_r+0x108>)
 8017f4c:	40ca      	lsrs	r2, r1
 8017f4e:	07d6      	lsls	r6, r2, #31
 8017f50:	d528      	bpl.n	8017fa4 <__sflush_r+0xb8>
 8017f52:	2200      	movs	r2, #0
 8017f54:	6062      	str	r2, [r4, #4]
 8017f56:	04d9      	lsls	r1, r3, #19
 8017f58:	6922      	ldr	r2, [r4, #16]
 8017f5a:	6022      	str	r2, [r4, #0]
 8017f5c:	d504      	bpl.n	8017f68 <__sflush_r+0x7c>
 8017f5e:	1c42      	adds	r2, r0, #1
 8017f60:	d101      	bne.n	8017f66 <__sflush_r+0x7a>
 8017f62:	682b      	ldr	r3, [r5, #0]
 8017f64:	b903      	cbnz	r3, 8017f68 <__sflush_r+0x7c>
 8017f66:	6560      	str	r0, [r4, #84]	; 0x54
 8017f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f6a:	602f      	str	r7, [r5, #0]
 8017f6c:	2900      	cmp	r1, #0
 8017f6e:	d0ca      	beq.n	8017f06 <__sflush_r+0x1a>
 8017f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f74:	4299      	cmp	r1, r3
 8017f76:	d002      	beq.n	8017f7e <__sflush_r+0x92>
 8017f78:	4628      	mov	r0, r5
 8017f7a:	f7ff faab 	bl	80174d4 <_free_r>
 8017f7e:	2000      	movs	r0, #0
 8017f80:	6360      	str	r0, [r4, #52]	; 0x34
 8017f82:	e7c1      	b.n	8017f08 <__sflush_r+0x1c>
 8017f84:	6a21      	ldr	r1, [r4, #32]
 8017f86:	2301      	movs	r3, #1
 8017f88:	4628      	mov	r0, r5
 8017f8a:	47b0      	blx	r6
 8017f8c:	1c41      	adds	r1, r0, #1
 8017f8e:	d1c7      	bne.n	8017f20 <__sflush_r+0x34>
 8017f90:	682b      	ldr	r3, [r5, #0]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d0c4      	beq.n	8017f20 <__sflush_r+0x34>
 8017f96:	2b1d      	cmp	r3, #29
 8017f98:	d001      	beq.n	8017f9e <__sflush_r+0xb2>
 8017f9a:	2b16      	cmp	r3, #22
 8017f9c:	d101      	bne.n	8017fa2 <__sflush_r+0xb6>
 8017f9e:	602f      	str	r7, [r5, #0]
 8017fa0:	e7b1      	b.n	8017f06 <__sflush_r+0x1a>
 8017fa2:	89a3      	ldrh	r3, [r4, #12]
 8017fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fa8:	81a3      	strh	r3, [r4, #12]
 8017faa:	e7ad      	b.n	8017f08 <__sflush_r+0x1c>
 8017fac:	690f      	ldr	r7, [r1, #16]
 8017fae:	2f00      	cmp	r7, #0
 8017fb0:	d0a9      	beq.n	8017f06 <__sflush_r+0x1a>
 8017fb2:	0793      	lsls	r3, r2, #30
 8017fb4:	680e      	ldr	r6, [r1, #0]
 8017fb6:	bf08      	it	eq
 8017fb8:	694b      	ldreq	r3, [r1, #20]
 8017fba:	600f      	str	r7, [r1, #0]
 8017fbc:	bf18      	it	ne
 8017fbe:	2300      	movne	r3, #0
 8017fc0:	eba6 0807 	sub.w	r8, r6, r7
 8017fc4:	608b      	str	r3, [r1, #8]
 8017fc6:	f1b8 0f00 	cmp.w	r8, #0
 8017fca:	dd9c      	ble.n	8017f06 <__sflush_r+0x1a>
 8017fcc:	6a21      	ldr	r1, [r4, #32]
 8017fce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017fd0:	4643      	mov	r3, r8
 8017fd2:	463a      	mov	r2, r7
 8017fd4:	4628      	mov	r0, r5
 8017fd6:	47b0      	blx	r6
 8017fd8:	2800      	cmp	r0, #0
 8017fda:	dc06      	bgt.n	8017fea <__sflush_r+0xfe>
 8017fdc:	89a3      	ldrh	r3, [r4, #12]
 8017fde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017fe2:	81a3      	strh	r3, [r4, #12]
 8017fe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017fe8:	e78e      	b.n	8017f08 <__sflush_r+0x1c>
 8017fea:	4407      	add	r7, r0
 8017fec:	eba8 0800 	sub.w	r8, r8, r0
 8017ff0:	e7e9      	b.n	8017fc6 <__sflush_r+0xda>
 8017ff2:	bf00      	nop
 8017ff4:	20400001 	.word	0x20400001

08017ff8 <_fflush_r>:
 8017ff8:	b538      	push	{r3, r4, r5, lr}
 8017ffa:	690b      	ldr	r3, [r1, #16]
 8017ffc:	4605      	mov	r5, r0
 8017ffe:	460c      	mov	r4, r1
 8018000:	b913      	cbnz	r3, 8018008 <_fflush_r+0x10>
 8018002:	2500      	movs	r5, #0
 8018004:	4628      	mov	r0, r5
 8018006:	bd38      	pop	{r3, r4, r5, pc}
 8018008:	b118      	cbz	r0, 8018012 <_fflush_r+0x1a>
 801800a:	6983      	ldr	r3, [r0, #24]
 801800c:	b90b      	cbnz	r3, 8018012 <_fflush_r+0x1a>
 801800e:	f7ff f9a7 	bl	8017360 <__sinit>
 8018012:	4b14      	ldr	r3, [pc, #80]	; (8018064 <_fflush_r+0x6c>)
 8018014:	429c      	cmp	r4, r3
 8018016:	d11b      	bne.n	8018050 <_fflush_r+0x58>
 8018018:	686c      	ldr	r4, [r5, #4]
 801801a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d0ef      	beq.n	8018002 <_fflush_r+0xa>
 8018022:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018024:	07d0      	lsls	r0, r2, #31
 8018026:	d404      	bmi.n	8018032 <_fflush_r+0x3a>
 8018028:	0599      	lsls	r1, r3, #22
 801802a:	d402      	bmi.n	8018032 <_fflush_r+0x3a>
 801802c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801802e:	f7ff fa47 	bl	80174c0 <__retarget_lock_acquire_recursive>
 8018032:	4628      	mov	r0, r5
 8018034:	4621      	mov	r1, r4
 8018036:	f7ff ff59 	bl	8017eec <__sflush_r>
 801803a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801803c:	07da      	lsls	r2, r3, #31
 801803e:	4605      	mov	r5, r0
 8018040:	d4e0      	bmi.n	8018004 <_fflush_r+0xc>
 8018042:	89a3      	ldrh	r3, [r4, #12]
 8018044:	059b      	lsls	r3, r3, #22
 8018046:	d4dd      	bmi.n	8018004 <_fflush_r+0xc>
 8018048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801804a:	f7ff fa3a 	bl	80174c2 <__retarget_lock_release_recursive>
 801804e:	e7d9      	b.n	8018004 <_fflush_r+0xc>
 8018050:	4b05      	ldr	r3, [pc, #20]	; (8018068 <_fflush_r+0x70>)
 8018052:	429c      	cmp	r4, r3
 8018054:	d101      	bne.n	801805a <_fflush_r+0x62>
 8018056:	68ac      	ldr	r4, [r5, #8]
 8018058:	e7df      	b.n	801801a <_fflush_r+0x22>
 801805a:	4b04      	ldr	r3, [pc, #16]	; (801806c <_fflush_r+0x74>)
 801805c:	429c      	cmp	r4, r3
 801805e:	bf08      	it	eq
 8018060:	68ec      	ldreq	r4, [r5, #12]
 8018062:	e7da      	b.n	801801a <_fflush_r+0x22>
 8018064:	0801ae44 	.word	0x0801ae44
 8018068:	0801ae64 	.word	0x0801ae64
 801806c:	0801ae24 	.word	0x0801ae24

08018070 <_lseek_r>:
 8018070:	b538      	push	{r3, r4, r5, lr}
 8018072:	4d07      	ldr	r5, [pc, #28]	; (8018090 <_lseek_r+0x20>)
 8018074:	4604      	mov	r4, r0
 8018076:	4608      	mov	r0, r1
 8018078:	4611      	mov	r1, r2
 801807a:	2200      	movs	r2, #0
 801807c:	602a      	str	r2, [r5, #0]
 801807e:	461a      	mov	r2, r3
 8018080:	f7ea fa1b 	bl	80024ba <_lseek>
 8018084:	1c43      	adds	r3, r0, #1
 8018086:	d102      	bne.n	801808e <_lseek_r+0x1e>
 8018088:	682b      	ldr	r3, [r5, #0]
 801808a:	b103      	cbz	r3, 801808e <_lseek_r+0x1e>
 801808c:	6023      	str	r3, [r4, #0]
 801808e:	bd38      	pop	{r3, r4, r5, pc}
 8018090:	20009440 	.word	0x20009440

08018094 <__swhatbuf_r>:
 8018094:	b570      	push	{r4, r5, r6, lr}
 8018096:	460e      	mov	r6, r1
 8018098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801809c:	2900      	cmp	r1, #0
 801809e:	b096      	sub	sp, #88	; 0x58
 80180a0:	4614      	mov	r4, r2
 80180a2:	461d      	mov	r5, r3
 80180a4:	da08      	bge.n	80180b8 <__swhatbuf_r+0x24>
 80180a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80180aa:	2200      	movs	r2, #0
 80180ac:	602a      	str	r2, [r5, #0]
 80180ae:	061a      	lsls	r2, r3, #24
 80180b0:	d410      	bmi.n	80180d4 <__swhatbuf_r+0x40>
 80180b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80180b6:	e00e      	b.n	80180d6 <__swhatbuf_r+0x42>
 80180b8:	466a      	mov	r2, sp
 80180ba:	f000 f8b3 	bl	8018224 <_fstat_r>
 80180be:	2800      	cmp	r0, #0
 80180c0:	dbf1      	blt.n	80180a6 <__swhatbuf_r+0x12>
 80180c2:	9a01      	ldr	r2, [sp, #4]
 80180c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80180c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80180cc:	425a      	negs	r2, r3
 80180ce:	415a      	adcs	r2, r3
 80180d0:	602a      	str	r2, [r5, #0]
 80180d2:	e7ee      	b.n	80180b2 <__swhatbuf_r+0x1e>
 80180d4:	2340      	movs	r3, #64	; 0x40
 80180d6:	2000      	movs	r0, #0
 80180d8:	6023      	str	r3, [r4, #0]
 80180da:	b016      	add	sp, #88	; 0x58
 80180dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080180e0 <__smakebuf_r>:
 80180e0:	898b      	ldrh	r3, [r1, #12]
 80180e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80180e4:	079d      	lsls	r5, r3, #30
 80180e6:	4606      	mov	r6, r0
 80180e8:	460c      	mov	r4, r1
 80180ea:	d507      	bpl.n	80180fc <__smakebuf_r+0x1c>
 80180ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80180f0:	6023      	str	r3, [r4, #0]
 80180f2:	6123      	str	r3, [r4, #16]
 80180f4:	2301      	movs	r3, #1
 80180f6:	6163      	str	r3, [r4, #20]
 80180f8:	b002      	add	sp, #8
 80180fa:	bd70      	pop	{r4, r5, r6, pc}
 80180fc:	ab01      	add	r3, sp, #4
 80180fe:	466a      	mov	r2, sp
 8018100:	f7ff ffc8 	bl	8018094 <__swhatbuf_r>
 8018104:	9900      	ldr	r1, [sp, #0]
 8018106:	4605      	mov	r5, r0
 8018108:	4630      	mov	r0, r6
 801810a:	f7ff fa4f 	bl	80175ac <_malloc_r>
 801810e:	b948      	cbnz	r0, 8018124 <__smakebuf_r+0x44>
 8018110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018114:	059a      	lsls	r2, r3, #22
 8018116:	d4ef      	bmi.n	80180f8 <__smakebuf_r+0x18>
 8018118:	f023 0303 	bic.w	r3, r3, #3
 801811c:	f043 0302 	orr.w	r3, r3, #2
 8018120:	81a3      	strh	r3, [r4, #12]
 8018122:	e7e3      	b.n	80180ec <__smakebuf_r+0xc>
 8018124:	4b0d      	ldr	r3, [pc, #52]	; (801815c <__smakebuf_r+0x7c>)
 8018126:	62b3      	str	r3, [r6, #40]	; 0x28
 8018128:	89a3      	ldrh	r3, [r4, #12]
 801812a:	6020      	str	r0, [r4, #0]
 801812c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018130:	81a3      	strh	r3, [r4, #12]
 8018132:	9b00      	ldr	r3, [sp, #0]
 8018134:	6163      	str	r3, [r4, #20]
 8018136:	9b01      	ldr	r3, [sp, #4]
 8018138:	6120      	str	r0, [r4, #16]
 801813a:	b15b      	cbz	r3, 8018154 <__smakebuf_r+0x74>
 801813c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018140:	4630      	mov	r0, r6
 8018142:	f000 f881 	bl	8018248 <_isatty_r>
 8018146:	b128      	cbz	r0, 8018154 <__smakebuf_r+0x74>
 8018148:	89a3      	ldrh	r3, [r4, #12]
 801814a:	f023 0303 	bic.w	r3, r3, #3
 801814e:	f043 0301 	orr.w	r3, r3, #1
 8018152:	81a3      	strh	r3, [r4, #12]
 8018154:	89a0      	ldrh	r0, [r4, #12]
 8018156:	4305      	orrs	r5, r0
 8018158:	81a5      	strh	r5, [r4, #12]
 801815a:	e7cd      	b.n	80180f8 <__smakebuf_r+0x18>
 801815c:	080172f9 	.word	0x080172f9

08018160 <__malloc_lock>:
 8018160:	4801      	ldr	r0, [pc, #4]	; (8018168 <__malloc_lock+0x8>)
 8018162:	f7ff b9ad 	b.w	80174c0 <__retarget_lock_acquire_recursive>
 8018166:	bf00      	nop
 8018168:	20009444 	.word	0x20009444

0801816c <__malloc_unlock>:
 801816c:	4801      	ldr	r0, [pc, #4]	; (8018174 <__malloc_unlock+0x8>)
 801816e:	f7ff b9a8 	b.w	80174c2 <__retarget_lock_release_recursive>
 8018172:	bf00      	nop
 8018174:	20009444 	.word	0x20009444

08018178 <_read_r>:
 8018178:	b538      	push	{r3, r4, r5, lr}
 801817a:	4d07      	ldr	r5, [pc, #28]	; (8018198 <_read_r+0x20>)
 801817c:	4604      	mov	r4, r0
 801817e:	4608      	mov	r0, r1
 8018180:	4611      	mov	r1, r2
 8018182:	2200      	movs	r2, #0
 8018184:	602a      	str	r2, [r5, #0]
 8018186:	461a      	mov	r2, r3
 8018188:	f7fe fbbc 	bl	8016904 <_read>
 801818c:	1c43      	adds	r3, r0, #1
 801818e:	d102      	bne.n	8018196 <_read_r+0x1e>
 8018190:	682b      	ldr	r3, [r5, #0]
 8018192:	b103      	cbz	r3, 8018196 <_read_r+0x1e>
 8018194:	6023      	str	r3, [r4, #0]
 8018196:	bd38      	pop	{r3, r4, r5, pc}
 8018198:	20009440 	.word	0x20009440

0801819c <_raise_r>:
 801819c:	291f      	cmp	r1, #31
 801819e:	b538      	push	{r3, r4, r5, lr}
 80181a0:	4604      	mov	r4, r0
 80181a2:	460d      	mov	r5, r1
 80181a4:	d904      	bls.n	80181b0 <_raise_r+0x14>
 80181a6:	2316      	movs	r3, #22
 80181a8:	6003      	str	r3, [r0, #0]
 80181aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80181ae:	bd38      	pop	{r3, r4, r5, pc}
 80181b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80181b2:	b112      	cbz	r2, 80181ba <_raise_r+0x1e>
 80181b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80181b8:	b94b      	cbnz	r3, 80181ce <_raise_r+0x32>
 80181ba:	4620      	mov	r0, r4
 80181bc:	f000 f830 	bl	8018220 <_getpid_r>
 80181c0:	462a      	mov	r2, r5
 80181c2:	4601      	mov	r1, r0
 80181c4:	4620      	mov	r0, r4
 80181c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181ca:	f000 b817 	b.w	80181fc <_kill_r>
 80181ce:	2b01      	cmp	r3, #1
 80181d0:	d00a      	beq.n	80181e8 <_raise_r+0x4c>
 80181d2:	1c59      	adds	r1, r3, #1
 80181d4:	d103      	bne.n	80181de <_raise_r+0x42>
 80181d6:	2316      	movs	r3, #22
 80181d8:	6003      	str	r3, [r0, #0]
 80181da:	2001      	movs	r0, #1
 80181dc:	e7e7      	b.n	80181ae <_raise_r+0x12>
 80181de:	2400      	movs	r4, #0
 80181e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80181e4:	4628      	mov	r0, r5
 80181e6:	4798      	blx	r3
 80181e8:	2000      	movs	r0, #0
 80181ea:	e7e0      	b.n	80181ae <_raise_r+0x12>

080181ec <raise>:
 80181ec:	4b02      	ldr	r3, [pc, #8]	; (80181f8 <raise+0xc>)
 80181ee:	4601      	mov	r1, r0
 80181f0:	6818      	ldr	r0, [r3, #0]
 80181f2:	f7ff bfd3 	b.w	801819c <_raise_r>
 80181f6:	bf00      	nop
 80181f8:	2000002c 	.word	0x2000002c

080181fc <_kill_r>:
 80181fc:	b538      	push	{r3, r4, r5, lr}
 80181fe:	4d07      	ldr	r5, [pc, #28]	; (801821c <_kill_r+0x20>)
 8018200:	2300      	movs	r3, #0
 8018202:	4604      	mov	r4, r0
 8018204:	4608      	mov	r0, r1
 8018206:	4611      	mov	r1, r2
 8018208:	602b      	str	r3, [r5, #0]
 801820a:	f7ea f913 	bl	8002434 <_kill>
 801820e:	1c43      	adds	r3, r0, #1
 8018210:	d102      	bne.n	8018218 <_kill_r+0x1c>
 8018212:	682b      	ldr	r3, [r5, #0]
 8018214:	b103      	cbz	r3, 8018218 <_kill_r+0x1c>
 8018216:	6023      	str	r3, [r4, #0]
 8018218:	bd38      	pop	{r3, r4, r5, pc}
 801821a:	bf00      	nop
 801821c:	20009440 	.word	0x20009440

08018220 <_getpid_r>:
 8018220:	f7ea b900 	b.w	8002424 <_getpid>

08018224 <_fstat_r>:
 8018224:	b538      	push	{r3, r4, r5, lr}
 8018226:	4d07      	ldr	r5, [pc, #28]	; (8018244 <_fstat_r+0x20>)
 8018228:	2300      	movs	r3, #0
 801822a:	4604      	mov	r4, r0
 801822c:	4608      	mov	r0, r1
 801822e:	4611      	mov	r1, r2
 8018230:	602b      	str	r3, [r5, #0]
 8018232:	f7ea f927 	bl	8002484 <_fstat>
 8018236:	1c43      	adds	r3, r0, #1
 8018238:	d102      	bne.n	8018240 <_fstat_r+0x1c>
 801823a:	682b      	ldr	r3, [r5, #0]
 801823c:	b103      	cbz	r3, 8018240 <_fstat_r+0x1c>
 801823e:	6023      	str	r3, [r4, #0]
 8018240:	bd38      	pop	{r3, r4, r5, pc}
 8018242:	bf00      	nop
 8018244:	20009440 	.word	0x20009440

08018248 <_isatty_r>:
 8018248:	b538      	push	{r3, r4, r5, lr}
 801824a:	4d06      	ldr	r5, [pc, #24]	; (8018264 <_isatty_r+0x1c>)
 801824c:	2300      	movs	r3, #0
 801824e:	4604      	mov	r4, r0
 8018250:	4608      	mov	r0, r1
 8018252:	602b      	str	r3, [r5, #0]
 8018254:	f7ea f926 	bl	80024a4 <_isatty>
 8018258:	1c43      	adds	r3, r0, #1
 801825a:	d102      	bne.n	8018262 <_isatty_r+0x1a>
 801825c:	682b      	ldr	r3, [r5, #0]
 801825e:	b103      	cbz	r3, 8018262 <_isatty_r+0x1a>
 8018260:	6023      	str	r3, [r4, #0]
 8018262:	bd38      	pop	{r3, r4, r5, pc}
 8018264:	20009440 	.word	0x20009440

08018268 <_init>:
 8018268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801826a:	bf00      	nop
 801826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801826e:	bc08      	pop	{r3}
 8018270:	469e      	mov	lr, r3
 8018272:	4770      	bx	lr

08018274 <_fini>:
 8018274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018276:	bf00      	nop
 8018278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801827a:	bc08      	pop	{r3}
 801827c:	469e      	mov	lr, r3
 801827e:	4770      	bx	lr
