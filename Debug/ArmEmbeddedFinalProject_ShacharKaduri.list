
ArmEmbeddedFinalProject_ShacharKaduri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000185c0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c38  08018790  08018790  00028790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b3c8  0801b3c8  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b3c8  0801b3c8  0002b3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b3d0  0801b3d0  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b3d0  0801b3d0  0002b3d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b3d4  0801b3d4  0002b3d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801b3d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  0801b468  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  0801b508  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000968c  200001d0  0801b5a8  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000985c  0801b5a8  0003985c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00033d29  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007779  00000000  00000000  00063f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000025f0  00000000  00000000  0006b6a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002440  00000000  00000000  0006dc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037a14  00000000  00000000  000700d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003d06e  00000000  00000000  000a7aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011512d  00000000  00000000  000e4b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f9c87  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a8e4  00000000  00000000  001f9cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018778 	.word	0x08018778

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08018778 	.word	0x08018778

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f001 fd7a 	bl	800297c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 f820 	bl	8000ecc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8000e8c:	f000 fada 	bl	8001444 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e90:	f000 fb62 	bl	8001558 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e94:	f000 fa48 	bl	8001328 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000e98:	f000 faa6 	bl	80013e8 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 8000e9c:	f00b f834 	bl	800bf08 <MX_LWIP_Init>
  MX_UART4_Init();
 8000ea0:	f000 fa12 	bl	80012c8 <MX_UART4_Init>
  MX_DMA_Init();
 8000ea4:	f000 face 	bl	8001444 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ea8:	f000 f8c8 	bl	800103c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000eac:	f000 f906 	bl	80010bc <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8000eb0:	f000 fa6a 	bl	8001388 <MX_USART6_UART_Init>
  MX_SPI4_Init();
 8000eb4:	f000 f980 	bl	80011b8 <MX_SPI4_Init>
  MX_SPI1_Init();
 8000eb8:	f000 f940 	bl	800113c <MX_SPI1_Init>
  MX_ADC1_Init();
 8000ebc:	f000 f86c 	bl	8000f98 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ec0:	f000 f9b2 	bl	8001228 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  UUT_main();
 8000ec4:	f016 f818 	bl	8016ef8 <UUT_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <main+0x48>
	...

08000ecc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b094      	sub	sp, #80	; 0x50
 8000ed0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	2230      	movs	r2, #48	; 0x30
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f016 fbf4 	bl	80176c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef0:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <SystemClock_Config+0xc4>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a26      	ldr	r2, [pc, #152]	; (8000f90 <SystemClock_Config+0xc4>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <SystemClock_Config+0xc4>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <SystemClock_Config+0xc8>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f10:	4a20      	ldr	r2, [pc, #128]	; (8000f94 <SystemClock_Config+0xc8>)
 8000f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1e      	ldr	r3, [pc, #120]	; (8000f94 <SystemClock_Config+0xc8>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f3c:	2348      	movs	r3, #72	; 0x48
 8000f3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f44:	2303      	movs	r3, #3
 8000f46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f006 fccd 	bl	80078ec <HAL_RCC_OscConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000f58:	f000 fbbc 	bl	80016d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f60:	2302      	movs	r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2102      	movs	r1, #2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f006 ff5b 	bl	8007e34 <HAL_RCC_ClockConfig>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000f84:	f000 fba6 	bl	80016d4 <Error_Handler>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	3750      	adds	r7, #80	; 0x50
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000

08000f98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fac:	4a21      	ldr	r2, [pc, #132]	; (8001034 <MX_ADC1_Init+0x9c>)
 8000fae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fb2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb8:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fca:	4b19      	ldr	r3, [pc, #100]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <MX_ADC1_Init+0xa0>)
 8000fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_ADC1_Init+0x98>)
 8000fec:	2201      	movs	r2, #1
 8000fee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_ADC1_Init+0x98>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <MX_ADC1_Init+0x98>)
 8000ffa:	f001 fd41 	bl	8002a80 <HAL_ADC_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001004:	f000 fb66 	bl	80016d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001008:	2303      	movs	r3, #3
 800100a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800100c:	2301      	movs	r3, #1
 800100e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001010:	2304      	movs	r3, #4
 8001012:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_ADC1_Init+0x98>)
 800101a:	f002 f86b 	bl	80030f4 <HAL_ADC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001024:	f000 fb56 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200001ec 	.word	0x200001ec
 8001034:	40012000 	.word	0x40012000
 8001038:	0f000001 	.word	0x0f000001

0800103c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001042:	4a1c      	ldr	r2, [pc, #112]	; (80010b4 <MX_I2C1_Init+0x78>)
 8001044:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 8001046:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001048:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <MX_I2C1_Init+0x7c>)
 800104a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 30;
 800104c:	4b18      	ldr	r3, [pc, #96]	; (80010b0 <MX_I2C1_Init+0x74>)
 800104e:	221e      	movs	r2, #30
 8001050:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001054:	2201      	movs	r2, #1
 8001056:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001058:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <MX_I2C1_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_I2C1_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <MX_I2C1_Init+0x74>)
 8001078:	f004 fb20 	bl	80056bc <HAL_I2C_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001082:	f000 fb27 	bl	80016d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001086:	2100      	movs	r1, #0
 8001088:	4809      	ldr	r0, [pc, #36]	; (80010b0 <MX_I2C1_Init+0x74>)
 800108a:	f006 fa4f 	bl	800752c <HAL_I2CEx_ConfigAnalogFilter>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001094:	f000 fb1e 	bl	80016d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001098:	2100      	movs	r1, #0
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_I2C1_Init+0x74>)
 800109c:	f006 fa91 	bl	80075c2 <HAL_I2CEx_ConfigDigitalFilter>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010a6:	f000 fb15 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000294 	.word	0x20000294
 80010b4:	40005400 	.word	0x40005400
 80010b8:	10808dd3 	.word	0x10808dd3

080010bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <MX_I2C2_Init+0x74>)
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <MX_I2C2_Init+0x78>)
 80010c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10808DD3;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <MX_I2C2_Init+0x74>)
 80010c8:	4a1b      	ldr	r2, [pc, #108]	; (8001138 <MX_I2C2_Init+0x7c>)
 80010ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <MX_I2C2_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_I2C2_Init+0x74>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <MX_I2C2_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_I2C2_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C2_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_I2C2_Init+0x74>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C2_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010f6:	480e      	ldr	r0, [pc, #56]	; (8001130 <MX_I2C2_Init+0x74>)
 80010f8:	f004 fae0 	bl	80056bc <HAL_I2C_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001102:	f000 fae7 	bl	80016d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001106:	2100      	movs	r1, #0
 8001108:	4809      	ldr	r0, [pc, #36]	; (8001130 <MX_I2C2_Init+0x74>)
 800110a:	f006 fa0f 	bl	800752c <HAL_I2CEx_ConfigAnalogFilter>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001114:	f000 fade 	bl	80016d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001118:	2100      	movs	r1, #0
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_I2C2_Init+0x74>)
 800111c:	f006 fa51 	bl	80075c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001126:	f000 fad5 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200002e8 	.word	0x200002e8
 8001134:	40005800 	.word	0x40005800
 8001138:	10808dd3 	.word	0x10808dd3

0800113c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MX_SPI1_Init+0x74>)
 8001142:	4a1c      	ldr	r2, [pc, #112]	; (80011b4 <MX_SPI1_Init+0x78>)
 8001144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <MX_SPI1_Init+0x74>)
 8001148:	f44f 7282 	mov.w	r2, #260	; 0x104
 800114c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MX_SPI1_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <MX_SPI1_Init+0x74>)
 8001156:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800115a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_SPI1_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_SPI1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_SPI1_Init+0x74>)
 800116a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800116e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_SPI1_Init+0x74>)
 8001172:	2218      	movs	r2, #24
 8001174:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_SPI1_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_SPI1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_SPI1_Init+0x74>)
 8001184:	2200      	movs	r2, #0
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_SPI1_Init+0x74>)
 800118a:	2207      	movs	r2, #7
 800118c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_SPI1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_SPI1_Init+0x74>)
 8001196:	2208      	movs	r2, #8
 8001198:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_SPI1_Init+0x74>)
 800119c:	f007 fc60 	bl	8008a60 <HAL_SPI_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80011a6:	f000 fa95 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	200004bc 	.word	0x200004bc
 80011b4:	40013000 	.word	0x40013000

080011b8 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80011bc:	4b18      	ldr	r3, [pc, #96]	; (8001220 <MX_SPI4_Init+0x68>)
 80011be:	4a19      	ldr	r2, [pc, #100]	; (8001224 <MX_SPI4_Init+0x6c>)
 80011c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <MX_SPI4_Init+0x68>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80011c8:	4b15      	ldr	r3, [pc, #84]	; (8001220 <MX_SPI4_Init+0x68>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ce:	4b14      	ldr	r3, [pc, #80]	; (8001220 <MX_SPI4_Init+0x68>)
 80011d0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <MX_SPI4_Init+0x68>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_SPI4_Init+0x68>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <MX_SPI4_Init+0x68>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <MX_SPI4_Init+0x68>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_SPI4_Init+0x68>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <MX_SPI4_Init+0x68>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_SPI4_Init+0x68>)
 80011fc:	2207      	movs	r2, #7
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001200:	4b07      	ldr	r3, [pc, #28]	; (8001220 <MX_SPI4_Init+0x68>)
 8001202:	2200      	movs	r2, #0
 8001204:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_SPI4_Init+0x68>)
 8001208:	2200      	movs	r2, #0
 800120a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	; (8001220 <MX_SPI4_Init+0x68>)
 800120e:	f007 fc27 	bl	8008a60 <HAL_SPI_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8001218:	f000 fa5c 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000520 	.word	0x20000520
 8001224:	40013400 	.word	0x40013400

08001228 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	1d3b      	adds	r3, r7, #4
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_TIM3_Init+0x98>)
 8001248:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <MX_TIM3_Init+0x9c>)
 800124a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_TIM3_Init+0x98>)
 800124e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001252:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_TIM3_Init+0x98>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_TIM3_Init+0x98>)
 800125c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001260:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_TIM3_Init+0x98>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_TIM3_Init+0x98>)
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800126e:	4814      	ldr	r0, [pc, #80]	; (80012c0 <MX_TIM3_Init+0x98>)
 8001270:	f008 fa4a 	bl	8009708 <HAL_TIM_Base_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800127a:	f000 fa2b 	bl	80016d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001282:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_TIM3_Init+0x98>)
 800128c:	f008 fc5a 	bl	8009b44 <HAL_TIM_ConfigClockSource>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001296:	f000 fa1d 	bl	80016d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MX_TIM3_Init+0x98>)
 80012a8:	f008 fe78 	bl	8009f9c <HAL_TIMEx_MasterConfigSynchronization>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80012b2:	f000 fa0f 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3720      	adds	r7, #32
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000704 	.word	0x20000704
 80012c4:	40000400 	.word	0x40000400

080012c8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80012cc:	4b14      	ldr	r3, [pc, #80]	; (8001320 <MX_UART4_Init+0x58>)
 80012ce:	4a15      	ldr	r2, [pc, #84]	; (8001324 <MX_UART4_Init+0x5c>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <MX_UART4_Init+0x58>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <MX_UART4_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <MX_UART4_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <MX_UART4_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <MX_UART4_Init+0x58>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <MX_UART4_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <MX_UART4_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <MX_UART4_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <MX_UART4_Init+0x58>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800130a:	4805      	ldr	r0, [pc, #20]	; (8001320 <MX_UART4_Init+0x58>)
 800130c:	f008 fef2 	bl	800a0f4 <HAL_UART_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001316:	f000 f9dd 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000750 	.word	0x20000750
 8001324:	40004c00 	.word	0x40004c00

08001328 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800132c:	4b14      	ldr	r3, [pc, #80]	; (8001380 <MX_USART3_UART_Init+0x58>)
 800132e:	4a15      	ldr	r2, [pc, #84]	; (8001384 <MX_USART3_UART_Init+0x5c>)
 8001330:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <MX_USART3_UART_Init+0x58>)
 8001334:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001338:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800133a:	4b11      	ldr	r3, [pc, #68]	; (8001380 <MX_USART3_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <MX_USART3_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001346:	4b0e      	ldr	r3, [pc, #56]	; (8001380 <MX_USART3_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <MX_USART3_UART_Init+0x58>)
 800134e:	220c      	movs	r2, #12
 8001350:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <MX_USART3_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001358:	4b09      	ldr	r3, [pc, #36]	; (8001380 <MX_USART3_UART_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <MX_USART3_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <MX_USART3_UART_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <MX_USART3_UART_Init+0x58>)
 800136c:	f008 fec2 	bl	800a0f4 <HAL_UART_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001376:	f000 f9ad 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200007d8 	.word	0x200007d8
 8001384:	40004800 	.word	0x40004800

08001388 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_USART6_UART_Init+0x58>)
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <MX_USART6_UART_Init+0x5c>)
 8001390:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_USART6_UART_Init+0x58>)
 8001394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001398:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART6_UART_Init+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_USART6_UART_Init+0x58>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART6_UART_Init+0x58>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART6_UART_Init+0x58>)
 80013ae:	220c      	movs	r2, #12
 80013b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART6_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART6_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART6_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART6_UART_Init+0x58>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART6_UART_Init+0x58>)
 80013cc:	f008 fe92 	bl	800a0f4 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80013d6:	f000 f97d 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000860 	.word	0x20000860
 80013e4:	40011400 	.word	0x40011400

080013e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013ec:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013f6:	2206      	movs	r2, #6
 80013f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001408:	2202      	movs	r2, #2
 800140a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800140e:	2201      	movs	r2, #1
 8001410:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001414:	2200      	movs	r2, #0
 8001416:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001420:	2201      	movs	r2, #1
 8001422:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001426:	2200      	movs	r2, #0
 8001428:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800142c:	f006 f915 	bl	800765a <HAL_PCD_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001436:	f000 f94d 	bl	80016d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000a68 	.word	0x20000a68

08001444 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144a:	4b42      	ldr	r3, [pc, #264]	; (8001554 <MX_DMA_Init+0x110>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a41      	ldr	r2, [pc, #260]	; (8001554 <MX_DMA_Init+0x110>)
 8001450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <MX_DMA_Init+0x110>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001462:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <MX_DMA_Init+0x110>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a3b      	ldr	r2, [pc, #236]	; (8001554 <MX_DMA_Init+0x110>)
 8001468:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b39      	ldr	r3, [pc, #228]	; (8001554 <MX_DMA_Init+0x110>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	200d      	movs	r0, #13
 8001480:	f002 f9ef 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001484:	200d      	movs	r0, #13
 8001486:	f002 fa08 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	200e      	movs	r0, #14
 8001490:	f002 f9e7 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001494:	200e      	movs	r0, #14
 8001496:	f002 fa00 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	200f      	movs	r0, #15
 80014a0:	f002 f9df 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80014a4:	200f      	movs	r0, #15
 80014a6:	f002 f9f8 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	2010      	movs	r0, #16
 80014b0:	f002 f9d7 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80014b4:	2010      	movs	r0, #16
 80014b6:	f002 f9f0 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2011      	movs	r0, #17
 80014c0:	f002 f9cf 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80014c4:	2011      	movs	r0, #17
 80014c6:	f002 f9e8 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	202f      	movs	r0, #47	; 0x2f
 80014d0:	f002 f9c7 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80014d4:	202f      	movs	r0, #47	; 0x2f
 80014d6:	f002 f9e0 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	2038      	movs	r0, #56	; 0x38
 80014e0:	f002 f9bf 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014e4:	2038      	movs	r0, #56	; 0x38
 80014e6:	f002 f9d8 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2100      	movs	r1, #0
 80014ee:	2039      	movs	r0, #57	; 0x39
 80014f0:	f002 f9b7 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80014f4:	2039      	movs	r0, #57	; 0x39
 80014f6:	f002 f9d0 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	203a      	movs	r0, #58	; 0x3a
 8001500:	f002 f9af 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001504:	203a      	movs	r0, #58	; 0x3a
 8001506:	f002 f9c8 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	203b      	movs	r0, #59	; 0x3b
 8001510:	f002 f9a7 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001514:	203b      	movs	r0, #59	; 0x3b
 8001516:	f002 f9c0 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	203c      	movs	r0, #60	; 0x3c
 8001520:	f002 f99f 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001524:	203c      	movs	r0, #60	; 0x3c
 8001526:	f002 f9b8 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2044      	movs	r0, #68	; 0x44
 8001530:	f002 f997 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001534:	2044      	movs	r0, #68	; 0x44
 8001536:	f002 f9b0 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2045      	movs	r0, #69	; 0x45
 8001540:	f002 f98f 	bl	8003862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001544:	2045      	movs	r0, #69	; 0x45
 8001546:	f002 f9a8 	bl	800389a <HAL_NVIC_EnableIRQ>

}
 800154a:	bf00      	nop
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800

08001558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b08c      	sub	sp, #48	; 0x30
 800155c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155e:	f107 031c 	add.w	r3, r7, #28
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	4b55      	ldr	r3, [pc, #340]	; (80016c4 <MX_GPIO_Init+0x16c>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a54      	ldr	r2, [pc, #336]	; (80016c4 <MX_GPIO_Init+0x16c>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b52      	ldr	r3, [pc, #328]	; (80016c4 <MX_GPIO_Init+0x16c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001586:	4b4f      	ldr	r3, [pc, #316]	; (80016c4 <MX_GPIO_Init+0x16c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a4e      	ldr	r2, [pc, #312]	; (80016c4 <MX_GPIO_Init+0x16c>)
 800158c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b4c      	ldr	r3, [pc, #304]	; (80016c4 <MX_GPIO_Init+0x16c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <MX_GPIO_Init+0x16c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a48      	ldr	r2, [pc, #288]	; (80016c4 <MX_GPIO_Init+0x16c>)
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b46      	ldr	r3, [pc, #280]	; (80016c4 <MX_GPIO_Init+0x16c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	4b43      	ldr	r3, [pc, #268]	; (80016c4 <MX_GPIO_Init+0x16c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a42      	ldr	r2, [pc, #264]	; (80016c4 <MX_GPIO_Init+0x16c>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <MX_GPIO_Init+0x16c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ce:	4b3d      	ldr	r3, [pc, #244]	; (80016c4 <MX_GPIO_Init+0x16c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a3c      	ldr	r2, [pc, #240]	; (80016c4 <MX_GPIO_Init+0x16c>)
 80015d4:	f043 0310 	orr.w	r3, r3, #16
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b3a      	ldr	r3, [pc, #232]	; (80016c4 <MX_GPIO_Init+0x16c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0310 	and.w	r3, r3, #16
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <MX_GPIO_Init+0x16c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a36      	ldr	r2, [pc, #216]	; (80016c4 <MX_GPIO_Init+0x16c>)
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b34      	ldr	r3, [pc, #208]	; (80016c4 <MX_GPIO_Init+0x16c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <MX_GPIO_Init+0x16c>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a30      	ldr	r2, [pc, #192]	; (80016c4 <MX_GPIO_Init+0x16c>)
 8001604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <MX_GPIO_Init+0x16c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f244 0181 	movw	r1, #16513	; 0x4081
 800161c:	482a      	ldr	r0, [pc, #168]	; (80016c8 <MX_GPIO_Init+0x170>)
 800161e:	f004 f819 	bl	8005654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	4829      	ldr	r0, [pc, #164]	; (80016cc <MX_GPIO_Init+0x174>)
 8001628:	f004 f814 	bl	8005654 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800162c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001632:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	4823      	ldr	r0, [pc, #140]	; (80016d0 <MX_GPIO_Init+0x178>)
 8001644:	f003 fe5a 	bl	80052fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001648:	f244 0381 	movw	r3, #16513	; 0x4081
 800164c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164e:	2301      	movs	r3, #1
 8001650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	4619      	mov	r1, r3
 8001660:	4819      	ldr	r0, [pc, #100]	; (80016c8 <MX_GPIO_Init+0x170>)
 8001662:	f003 fe4b 	bl	80052fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166c:	2302      	movs	r3, #2
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001678:	2305      	movs	r3, #5
 800167a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	4811      	ldr	r0, [pc, #68]	; (80016c8 <MX_GPIO_Init+0x170>)
 8001684:	f003 fe3a 	bl	80052fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001688:	2340      	movs	r3, #64	; 0x40
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 031c 	add.w	r3, r7, #28
 800169c:	4619      	mov	r1, r3
 800169e:	480b      	ldr	r0, [pc, #44]	; (80016cc <MX_GPIO_Init+0x174>)
 80016a0:	f003 fe2c 	bl	80052fc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016b0:	f107 031c 	add.w	r3, r7, #28
 80016b4:	4619      	mov	r1, r3
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_GPIO_Init+0x174>)
 80016b8:	f003 fe20 	bl	80052fc <HAL_GPIO_Init>

}
 80016bc:	bf00      	nop
 80016be:	3730      	adds	r7, #48	; 0x30
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40020400 	.word	0x40020400
 80016cc:	40021800 	.word	0x40021800
 80016d0:	40020800 	.word	0x40020800

080016d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d8:	b672      	cpsid	i
}
 80016da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016dc:	e7fe      	b.n	80016dc <Error_Handler+0x8>
	...

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_MspInit+0x44>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_MspInit+0x44>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <HAL_MspInit+0x44>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_MspInit+0x44>)
 8001700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <HAL_MspInit+0x44>)
 8001704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001708:	6453      	str	r3, [r2, #68]	; 0x44
 800170a:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_MspInit+0x44>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a31      	ldr	r2, [pc, #196]	; (800180c <HAL_ADC_MspInit+0xe4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d15b      	bne.n	8001802 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800174a:	4b31      	ldr	r3, [pc, #196]	; (8001810 <HAL_ADC_MspInit+0xe8>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a30      	ldr	r2, [pc, #192]	; (8001810 <HAL_ADC_MspInit+0xe8>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b2e      	ldr	r3, [pc, #184]	; (8001810 <HAL_ADC_MspInit+0xe8>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <HAL_ADC_MspInit+0xe8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a2a      	ldr	r2, [pc, #168]	; (8001810 <HAL_ADC_MspInit+0xe8>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b28      	ldr	r3, [pc, #160]	; (8001810 <HAL_ADC_MspInit+0xe8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800177a:	2308      	movs	r3, #8
 800177c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177e:	2303      	movs	r3, #3
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	4821      	ldr	r0, [pc, #132]	; (8001814 <HAL_ADC_MspInit+0xec>)
 800178e:	f003 fdb5 	bl	80052fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <HAL_ADC_MspInit+0xf4>)
 8001796:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800179e:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017a4:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017aa:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 80017ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 80017b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 80017bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 80017c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017d6:	4810      	ldr	r0, [pc, #64]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 80017d8:	f002 f87a 	bl	80038d0 <HAL_DMA_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80017e2:	f7ff ff77 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a0b      	ldr	r2, [pc, #44]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 80017ea:	639a      	str	r2, [r3, #56]	; 0x38
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_ADC_MspInit+0xf0>)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	2012      	movs	r0, #18
 80017f8:	f002 f833 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017fc:	2012      	movs	r0, #18
 80017fe:	f002 f84c 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40012000 	.word	0x40012000
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000
 8001818:	20000234 	.word	0x20000234
 800181c:	40026470 	.word	0x40026470

08001820 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b0ac      	sub	sp, #176	; 0xb0
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001838:	f107 0318 	add.w	r3, r7, #24
 800183c:	2284      	movs	r2, #132	; 0x84
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f015 ff41 	bl	80176c8 <memset>
  if(hi2c->Instance==I2C1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a57      	ldr	r2, [pc, #348]	; (80019a8 <HAL_I2C_MspInit+0x188>)
 800184c:	4293      	cmp	r3, r2
 800184e:	f040 80b9 	bne.w	80019c4 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001856:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8001858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800185c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185e:	f107 0318 	add.w	r3, r7, #24
 8001862:	4618      	mov	r0, r3
 8001864:	f006 fd0c 	bl	8008280 <HAL_RCCEx_PeriphCLKConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_I2C_MspInit+0x52>
    {
      Error_Handler();
 800186e:	f7ff ff31 	bl	80016d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001872:	4b4e      	ldr	r3, [pc, #312]	; (80019ac <HAL_I2C_MspInit+0x18c>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a4d      	ldr	r2, [pc, #308]	; (80019ac <HAL_I2C_MspInit+0x18c>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <HAL_I2C_MspInit+0x18c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_1_CLK_Slave_DMA_Pin|I2C_1_SDA_Slave_DMA_Pin;
 800188a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800188e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001892:	2312      	movs	r3, #18
 8001894:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001898:	2301      	movs	r3, #1
 800189a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189e:	2303      	movs	r3, #3
 80018a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018a4:	2304      	movs	r3, #4
 80018a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018ae:	4619      	mov	r1, r3
 80018b0:	483f      	ldr	r0, [pc, #252]	; (80019b0 <HAL_I2C_MspInit+0x190>)
 80018b2:	f003 fd23 	bl	80052fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <HAL_I2C_MspInit+0x18c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a3c      	ldr	r2, [pc, #240]	; (80019ac <HAL_I2C_MspInit+0x18c>)
 80018bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <HAL_I2C_MspInit+0x18c>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80018ce:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 80018d0:	4a39      	ldr	r2, [pc, #228]	; (80019b8 <HAL_I2C_MspInit+0x198>)
 80018d2:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80018d4:	4b37      	ldr	r3, [pc, #220]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 80018d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80018da:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e2:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018e8:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 80018ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f0:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 80018fe:	2200      	movs	r2, #0
 8001900:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001902:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 8001904:	2200      	movs	r2, #0
 8001906:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 800190a:	2200      	movs	r2, #0
 800190c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800190e:	4829      	ldr	r0, [pc, #164]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 8001910:	f001 ffde 	bl	80038d0 <HAL_DMA_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_I2C_MspInit+0xfe>
    {
      Error_Handler();
 800191a:	f7ff fedb 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a24      	ldr	r2, [pc, #144]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 8001922:	63da      	str	r2, [r3, #60]	; 0x3c
 8001924:	4a23      	ldr	r2, [pc, #140]	; (80019b4 <HAL_I2C_MspInit+0x194>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800192a:	4b24      	ldr	r3, [pc, #144]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 800192c:	4a24      	ldr	r2, [pc, #144]	; (80019c0 <HAL_I2C_MspInit+0x1a0>)
 800192e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 8001932:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001936:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 800193a:	2240      	movs	r2, #64	; 0x40
 800193c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 8001946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 800194e:	2200      	movs	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800195e:	4b17      	ldr	r3, [pc, #92]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800196a:	4814      	ldr	r0, [pc, #80]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 800196c:	f001 ffb0 	bl	80038d0 <HAL_DMA_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_I2C_MspInit+0x15a>
    {
      Error_Handler();
 8001976:	f7ff fead 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 800197e:	639a      	str	r2, [r3, #56]	; 0x38
 8001980:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_I2C_MspInit+0x19c>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	201f      	movs	r0, #31
 800198c:	f001 ff69 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001990:	201f      	movs	r0, #31
 8001992:	f001 ff82 	bl	800389a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	2020      	movs	r0, #32
 800199c:	f001 ff61 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80019a0:	2020      	movs	r0, #32
 80019a2:	f001 ff7a 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019a6:	e0be      	b.n	8001b26 <HAL_I2C_MspInit+0x306>
 80019a8:	40005400 	.word	0x40005400
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020400 	.word	0x40020400
 80019b4:	2000033c 	.word	0x2000033c
 80019b8:	40026088 	.word	0x40026088
 80019bc:	2000039c 	.word	0x2000039c
 80019c0:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a59      	ldr	r2, [pc, #356]	; (8001b30 <HAL_I2C_MspInit+0x310>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	f040 80ab 	bne.w	8001b26 <HAL_I2C_MspInit+0x306>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 80019d6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019de:	f107 0318 	add.w	r3, r7, #24
 80019e2:	4618      	mov	r0, r3
 80019e4:	f006 fc4c 	bl	8008280 <HAL_RCCEx_PeriphCLKConfig>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_I2C_MspInit+0x1d2>
      Error_Handler();
 80019ee:	f7ff fe71 	bl	80016d4 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_I2C_MspInit+0x314>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a4f      	ldr	r2, [pc, #316]	; (8001b34 <HAL_I2C_MspInit+0x314>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <HAL_I2C_MspInit+0x314>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_2_CLK_Master_DMA_Pin|I2C_2_DATA_Master_DMA_Pin;
 8001a0a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a12:	2312      	movs	r3, #18
 8001a14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a24:	2304      	movs	r3, #4
 8001a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4841      	ldr	r0, [pc, #260]	; (8001b38 <HAL_I2C_MspInit+0x318>)
 8001a32:	f003 fc63 	bl	80052fc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a36:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <HAL_I2C_MspInit+0x314>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a3e      	ldr	r2, [pc, #248]	; (8001b34 <HAL_I2C_MspInit+0x314>)
 8001a3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b3c      	ldr	r3, [pc, #240]	; (8001b34 <HAL_I2C_MspInit+0x314>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4a:	60bb      	str	r3, [r7, #8]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001a50:	4a3b      	ldr	r2, [pc, #236]	; (8001b40 <HAL_I2C_MspInit+0x320>)
 8001a52:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8001a54:	4b39      	ldr	r3, [pc, #228]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001a56:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001a5a:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a5c:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a62:	4b36      	ldr	r3, [pc, #216]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a68:	4b34      	ldr	r3, [pc, #208]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a6e:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a70:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a76:	4b31      	ldr	r3, [pc, #196]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001a7c:	4b2f      	ldr	r3, [pc, #188]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a82:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a88:	4b2c      	ldr	r3, [pc, #176]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001a8e:	482b      	ldr	r0, [pc, #172]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001a90:	f001 ff1e 	bl	80038d0 <HAL_DMA_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_I2C_MspInit+0x27e>
      Error_Handler();
 8001a9a:	f7ff fe1b 	bl	80016d4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a26      	ldr	r2, [pc, #152]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001aa2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aa4:	4a25      	ldr	r2, [pc, #148]	; (8001b3c <HAL_I2C_MspInit+0x31c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001aaa:	4b26      	ldr	r3, [pc, #152]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001aac:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_I2C_MspInit+0x328>)
 8001aae:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001ab2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001ab6:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001aba:	2240      	movs	r2, #64	; 0x40
 8001abc:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ac4:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001ac6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aca:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001ad8:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ae4:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001aea:	4816      	ldr	r0, [pc, #88]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001aec:	f001 fef0 	bl	80038d0 <HAL_DMA_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2C_MspInit+0x2da>
      Error_Handler();
 8001af6:	f7ff fded 	bl	80016d4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a11      	ldr	r2, [pc, #68]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001afe:	639a      	str	r2, [r3, #56]	; 0x38
 8001b00:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <HAL_I2C_MspInit+0x324>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2021      	movs	r0, #33	; 0x21
 8001b0c:	f001 fea9 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001b10:	2021      	movs	r0, #33	; 0x21
 8001b12:	f001 fec2 	bl	800389a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	2022      	movs	r0, #34	; 0x22
 8001b1c:	f001 fea1 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001b20:	2022      	movs	r0, #34	; 0x22
 8001b22:	f001 feba 	bl	800389a <HAL_NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	37b0      	adds	r7, #176	; 0xb0
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40005800 	.word	0x40005800
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020400 	.word	0x40020400
 8001b3c:	200003fc 	.word	0x200003fc
 8001b40:	40026058 	.word	0x40026058
 8001b44:	2000045c 	.word	0x2000045c
 8001b48:	400260b8 	.word	0x400260b8

08001b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08c      	sub	sp, #48	; 0x30
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a56      	ldr	r2, [pc, #344]	; (8001cc4 <HAL_SPI_MspInit+0x178>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	f040 80ba 	bne.w	8001ce4 <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b70:	4b55      	ldr	r3, [pc, #340]	; (8001cc8 <HAL_SPI_MspInit+0x17c>)
 8001b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b74:	4a54      	ldr	r2, [pc, #336]	; (8001cc8 <HAL_SPI_MspInit+0x17c>)
 8001b76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b7a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7c:	4b52      	ldr	r3, [pc, #328]	; (8001cc8 <HAL_SPI_MspInit+0x17c>)
 8001b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_SPI_MspInit+0x17c>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	4a4e      	ldr	r2, [pc, #312]	; (8001cc8 <HAL_SPI_MspInit+0x17c>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6313      	str	r3, [r2, #48]	; 0x30
 8001b94:	4b4c      	ldr	r3, [pc, #304]	; (8001cc8 <HAL_SPI_MspInit+0x17c>)
 8001b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba0:	4b49      	ldr	r3, [pc, #292]	; (8001cc8 <HAL_SPI_MspInit+0x17c>)
 8001ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba4:	4a48      	ldr	r2, [pc, #288]	; (8001cc8 <HAL_SPI_MspInit+0x17c>)
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	6313      	str	r3, [r2, #48]	; 0x30
 8001bac:	4b46      	ldr	r3, [pc, #280]	; (8001cc8 <HAL_SPI_MspInit+0x17c>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	613b      	str	r3, [r7, #16]
 8001bb6:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bb8:	2310      	movs	r3, #16
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bc8:	2305      	movs	r3, #5
 8001bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	483e      	ldr	r0, [pc, #248]	; (8001ccc <HAL_SPI_MspInit+0x180>)
 8001bd4:	f003 fb92 	bl	80052fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bd8:	2338      	movs	r3, #56	; 0x38
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001be8:	2305      	movs	r3, #5
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4837      	ldr	r0, [pc, #220]	; (8001cd0 <HAL_SPI_MspInit+0x184>)
 8001bf4:	f003 fb82 	bl	80052fc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001bfa:	4a37      	ldr	r2, [pc, #220]	; (8001cd8 <HAL_SPI_MspInit+0x18c>)
 8001bfc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001bfe:	4b35      	ldr	r3, [pc, #212]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001c00:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001c04:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c06:	4b33      	ldr	r3, [pc, #204]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0c:	4b31      	ldr	r3, [pc, #196]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c12:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c18:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c1a:	4b2e      	ldr	r3, [pc, #184]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c20:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001c26:	4b2b      	ldr	r3, [pc, #172]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2c:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c32:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001c38:	4826      	ldr	r0, [pc, #152]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001c3a:	f001 fe49 	bl	80038d0 <HAL_DMA_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001c44:	f7ff fd46 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001c4c:	659a      	str	r2, [r3, #88]	; 0x58
 8001c4e:	4a21      	ldr	r2, [pc, #132]	; (8001cd4 <HAL_SPI_MspInit+0x188>)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8001c54:	4b21      	ldr	r3, [pc, #132]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001c56:	4a22      	ldr	r2, [pc, #136]	; (8001ce0 <HAL_SPI_MspInit+0x194>)
 8001c58:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001c5a:	4b20      	ldr	r3, [pc, #128]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001c5c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001c60:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001c64:	2240      	movs	r2, #64	; 0x40
 8001c66:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c68:	4b1c      	ldr	r3, [pc, #112]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c74:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c76:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c7c:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001c94:	4811      	ldr	r0, [pc, #68]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001c96:	f001 fe1b 	bl	80038d0 <HAL_DMA_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001ca0:	f7ff fd18 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
 8001caa:	4a0c      	ldr	r2, [pc, #48]	; (8001cdc <HAL_SPI_MspInit+0x190>)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2023      	movs	r0, #35	; 0x23
 8001cb6:	f001 fdd4 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001cba:	2023      	movs	r0, #35	; 0x23
 8001cbc:	f001 fded 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001cc0:	e0a3      	b.n	8001e0a <HAL_SPI_MspInit+0x2be>
 8001cc2:	bf00      	nop
 8001cc4:	40013000 	.word	0x40013000
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	20000584 	.word	0x20000584
 8001cd8:	40026410 	.word	0x40026410
 8001cdc:	200005e4 	.word	0x200005e4
 8001ce0:	40026488 	.word	0x40026488
  else if(hspi->Instance==SPI4)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a4a      	ldr	r2, [pc, #296]	; (8001e14 <HAL_SPI_MspInit+0x2c8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	f040 808d 	bne.w	8001e0a <HAL_SPI_MspInit+0x2be>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001cf0:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <HAL_SPI_MspInit+0x2cc>)
 8001cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf4:	4a48      	ldr	r2, [pc, #288]	; (8001e18 <HAL_SPI_MspInit+0x2cc>)
 8001cf6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfc:	4b46      	ldr	r3, [pc, #280]	; (8001e18 <HAL_SPI_MspInit+0x2cc>)
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d08:	4b43      	ldr	r3, [pc, #268]	; (8001e18 <HAL_SPI_MspInit+0x2cc>)
 8001d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0c:	4a42      	ldr	r2, [pc, #264]	; (8001e18 <HAL_SPI_MspInit+0x2cc>)
 8001d0e:	f043 0310 	orr.w	r3, r3, #16
 8001d12:	6313      	str	r3, [r2, #48]	; 0x30
 8001d14:	4b40      	ldr	r3, [pc, #256]	; (8001e18 <HAL_SPI_MspInit+0x2cc>)
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	f003 0310 	and.w	r3, r3, #16
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001d20:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d32:	2305      	movs	r3, #5
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d36:	f107 031c 	add.w	r3, r7, #28
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4837      	ldr	r0, [pc, #220]	; (8001e1c <HAL_SPI_MspInit+0x2d0>)
 8001d3e:	f003 fadd 	bl	80052fc <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream3;
 8001d42:	4b37      	ldr	r3, [pc, #220]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d44:	4a37      	ldr	r2, [pc, #220]	; (8001e24 <HAL_SPI_MspInit+0x2d8>)
 8001d46:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_5;
 8001d48:	4b35      	ldr	r3, [pc, #212]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d4a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001d4e:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d50:	4b33      	ldr	r3, [pc, #204]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d56:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d62:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d64:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001d70:	4b2b      	ldr	r3, [pc, #172]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d76:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d7c:	4b28      	ldr	r3, [pc, #160]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001d82:	4827      	ldr	r0, [pc, #156]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d84:	f001 fda4 	bl	80038d0 <HAL_DMA_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_SPI_MspInit+0x246>
      Error_Handler();
 8001d8e:	f7ff fca1 	bl	80016d4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a22      	ldr	r2, [pc, #136]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d96:	659a      	str	r2, [r3, #88]	; 0x58
 8001d98:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <HAL_SPI_MspInit+0x2d4>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001da0:	4a22      	ldr	r2, [pc, #136]	; (8001e2c <HAL_SPI_MspInit+0x2e0>)
 8001da2:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001da4:	4b20      	ldr	r3, [pc, #128]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001da6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001daa:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001dae:	2240      	movs	r2, #64	; 0x40
 8001db0:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001db8:	4b1b      	ldr	r3, [pc, #108]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001dba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dbe:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc0:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001dcc:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001dde:	4812      	ldr	r0, [pc, #72]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001de0:	f001 fd76 	bl	80038d0 <HAL_DMA_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_SPI_MspInit+0x2a2>
      Error_Handler();
 8001dea:	f7ff fc73 	bl	80016d4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
 8001df4:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <HAL_SPI_MspInit+0x2dc>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2054      	movs	r0, #84	; 0x54
 8001e00:	f001 fd2f 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001e04:	2054      	movs	r0, #84	; 0x54
 8001e06:	f001 fd48 	bl	800389a <HAL_NVIC_EnableIRQ>
}
 8001e0a:	bf00      	nop
 8001e0c:	3730      	adds	r7, #48	; 0x30
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40013400 	.word	0x40013400
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	20000644 	.word	0x20000644
 8001e24:	40026458 	.word	0x40026458
 8001e28:	200006a4 	.word	0x200006a4
 8001e2c:	40026428 	.word	0x40026428

08001e30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <HAL_TIM_Base_MspInit+0x44>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d113      	bne.n	8001e6a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_TIM_Base_MspInit+0x48>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a0c      	ldr	r2, [pc, #48]	; (8001e78 <HAL_TIM_Base_MspInit+0x48>)
 8001e48:	f043 0302 	orr.w	r3, r3, #2
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_TIM_Base_MspInit+0x48>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	201d      	movs	r0, #29
 8001e60:	f001 fcff 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e64:	201d      	movs	r0, #29
 8001e66:	f001 fd18 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40023800 	.word	0x40023800

08001e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b0ae      	sub	sp, #184	; 0xb8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e94:	f107 0320 	add.w	r3, r7, #32
 8001e98:	2284      	movs	r2, #132	; 0x84
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f015 fc13 	bl	80176c8 <memset>
  if(huart->Instance==UART4)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a74      	ldr	r2, [pc, #464]	; (8002078 <HAL_UART_MspInit+0x1fc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	f040 80a2 	bne.w	8001ff2 <HAL_UART_MspInit+0x176>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eb2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_SYSCLK;
 8001eb4:	2340      	movs	r3, #64	; 0x40
 8001eb6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb8:	f107 0320 	add.w	r3, r7, #32
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f006 f9df 	bl	8008280 <HAL_RCCEx_PeriphCLKConfig>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001ec8:	f7ff fc04 	bl	80016d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ecc:	4b6b      	ldr	r3, [pc, #428]	; (800207c <HAL_UART_MspInit+0x200>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed0:	4a6a      	ldr	r2, [pc, #424]	; (800207c <HAL_UART_MspInit+0x200>)
 8001ed2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed8:	4b68      	ldr	r3, [pc, #416]	; (800207c <HAL_UART_MspInit+0x200>)
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee4:	4b65      	ldr	r3, [pc, #404]	; (800207c <HAL_UART_MspInit+0x200>)
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee8:	4a64      	ldr	r2, [pc, #400]	; (800207c <HAL_UART_MspInit+0x200>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef0:	4b62      	ldr	r3, [pc, #392]	; (800207c <HAL_UART_MspInit+0x200>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
 8001efa:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_DMA_Pin|UART4_RX_DMA_Pin;
 8001efc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f10:	2303      	movs	r3, #3
 8001f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f16:	2308      	movs	r3, #8
 8001f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4857      	ldr	r0, [pc, #348]	; (8002080 <HAL_UART_MspInit+0x204>)
 8001f24:	f003 f9ea 	bl	80052fc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001f28:	4b56      	ldr	r3, [pc, #344]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f2a:	4a57      	ldr	r2, [pc, #348]	; (8002088 <HAL_UART_MspInit+0x20c>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001f2e:	4b55      	ldr	r3, [pc, #340]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f34:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f36:	4b53      	ldr	r3, [pc, #332]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3c:	4b51      	ldr	r3, [pc, #324]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f42:	4b50      	ldr	r3, [pc, #320]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f48:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f4a:	4b4e      	ldr	r3, [pc, #312]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f50:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001f56:	4b4b      	ldr	r3, [pc, #300]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5c:	4b49      	ldr	r3, [pc, #292]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f62:	4b48      	ldr	r3, [pc, #288]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001f68:	4846      	ldr	r0, [pc, #280]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f6a:	f001 fcb1 	bl	80038d0 <HAL_DMA_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8001f74:	f7ff fbae 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a42      	ldr	r2, [pc, #264]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f7c:	675a      	str	r2, [r3, #116]	; 0x74
 8001f7e:	4a41      	ldr	r2, [pc, #260]	; (8002084 <HAL_UART_MspInit+0x208>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001f84:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_UART_MspInit+0x210>)
 8001f86:	4a42      	ldr	r2, [pc, #264]	; (8002090 <HAL_UART_MspInit+0x214>)
 8001f88:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001f8a:	4b40      	ldr	r3, [pc, #256]	; (800208c <HAL_UART_MspInit+0x210>)
 8001f8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f90:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f92:	4b3e      	ldr	r3, [pc, #248]	; (800208c <HAL_UART_MspInit+0x210>)
 8001f94:	2240      	movs	r2, #64	; 0x40
 8001f96:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f98:	4b3c      	ldr	r3, [pc, #240]	; (800208c <HAL_UART_MspInit+0x210>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	; (800208c <HAL_UART_MspInit+0x210>)
 8001fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_UART_MspInit+0x210>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fac:	4b37      	ldr	r3, [pc, #220]	; (800208c <HAL_UART_MspInit+0x210>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001fb2:	4b36      	ldr	r3, [pc, #216]	; (800208c <HAL_UART_MspInit+0x210>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fb8:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_UART_MspInit+0x210>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fbe:	4b33      	ldr	r3, [pc, #204]	; (800208c <HAL_UART_MspInit+0x210>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001fc4:	4831      	ldr	r0, [pc, #196]	; (800208c <HAL_UART_MspInit+0x210>)
 8001fc6:	f001 fc83 	bl	80038d0 <HAL_DMA_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8001fd0:	f7ff fb80 	bl	80016d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a2d      	ldr	r2, [pc, #180]	; (800208c <HAL_UART_MspInit+0x210>)
 8001fd8:	671a      	str	r2, [r3, #112]	; 0x70
 8001fda:	4a2c      	ldr	r2, [pc, #176]	; (800208c <HAL_UART_MspInit+0x210>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2034      	movs	r0, #52	; 0x34
 8001fe6:	f001 fc3c 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001fea:	2034      	movs	r0, #52	; 0x34
 8001fec:	f001 fc55 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ff0:	e0fb      	b.n	80021ea <HAL_UART_MspInit+0x36e>
  else if(huart->Instance==USART3)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a27      	ldr	r2, [pc, #156]	; (8002094 <HAL_UART_MspInit+0x218>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d14f      	bne.n	800209c <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002000:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002002:	2300      	movs	r3, #0
 8002004:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002006:	f107 0320 	add.w	r3, r7, #32
 800200a:	4618      	mov	r0, r3
 800200c:	f006 f938 	bl	8008280 <HAL_RCCEx_PeriphCLKConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8002016:	f7ff fb5d 	bl	80016d4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800201a:	4b18      	ldr	r3, [pc, #96]	; (800207c <HAL_UART_MspInit+0x200>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a17      	ldr	r2, [pc, #92]	; (800207c <HAL_UART_MspInit+0x200>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <HAL_UART_MspInit+0x200>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_UART_MspInit+0x200>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	4a11      	ldr	r2, [pc, #68]	; (800207c <HAL_UART_MspInit+0x200>)
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	6313      	str	r3, [r2, #48]	; 0x30
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_UART_MspInit+0x200>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800204a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800204e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002064:	2307      	movs	r3, #7
 8002066:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800206a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800206e:	4619      	mov	r1, r3
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <HAL_UART_MspInit+0x21c>)
 8002072:	f003 f943 	bl	80052fc <HAL_GPIO_Init>
}
 8002076:	e0b8      	b.n	80021ea <HAL_UART_MspInit+0x36e>
 8002078:	40004c00 	.word	0x40004c00
 800207c:	40023800 	.word	0x40023800
 8002080:	40020800 	.word	0x40020800
 8002084:	200008e8 	.word	0x200008e8
 8002088:	40026040 	.word	0x40026040
 800208c:	20000948 	.word	0x20000948
 8002090:	40026070 	.word	0x40026070
 8002094:	40004800 	.word	0x40004800
 8002098:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART6)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a54      	ldr	r2, [pc, #336]	; (80021f4 <HAL_UART_MspInit+0x378>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	f040 80a1 	bne.w	80021ea <HAL_UART_MspInit+0x36e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80020a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020ac:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80020ae:	2300      	movs	r3, #0
 80020b0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020b2:	f107 0320 	add.w	r3, r7, #32
 80020b6:	4618      	mov	r0, r3
 80020b8:	f006 f8e2 	bl	8008280 <HAL_RCCEx_PeriphCLKConfig>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 80020c2:	f7ff fb07 	bl	80016d4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020c6:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_UART_MspInit+0x37c>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <HAL_UART_MspInit+0x37c>)
 80020cc:	f043 0320 	orr.w	r3, r3, #32
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b49      	ldr	r3, [pc, #292]	; (80021f8 <HAL_UART_MspInit+0x37c>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020de:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <HAL_UART_MspInit+0x37c>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a45      	ldr	r2, [pc, #276]	; (80021f8 <HAL_UART_MspInit+0x37c>)
 80020e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_UART_MspInit+0x37c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART6_RX_DMA_Pin|USART6_TX_DMA_Pin;
 80020f6:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80020fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002104:	2301      	movs	r3, #1
 8002106:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210a:	2303      	movs	r3, #3
 800210c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002110:	2308      	movs	r3, #8
 8002112:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002116:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800211a:	4619      	mov	r1, r3
 800211c:	4837      	ldr	r0, [pc, #220]	; (80021fc <HAL_UART_MspInit+0x380>)
 800211e:	f003 f8ed 	bl	80052fc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8002122:	4b37      	ldr	r3, [pc, #220]	; (8002200 <HAL_UART_MspInit+0x384>)
 8002124:	4a37      	ldr	r2, [pc, #220]	; (8002204 <HAL_UART_MspInit+0x388>)
 8002126:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002128:	4b35      	ldr	r3, [pc, #212]	; (8002200 <HAL_UART_MspInit+0x384>)
 800212a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800212e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002130:	4b33      	ldr	r3, [pc, #204]	; (8002200 <HAL_UART_MspInit+0x384>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002136:	4b32      	ldr	r3, [pc, #200]	; (8002200 <HAL_UART_MspInit+0x384>)
 8002138:	2200      	movs	r2, #0
 800213a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_UART_MspInit+0x384>)
 800213e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002142:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002144:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_UART_MspInit+0x384>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800214a:	4b2d      	ldr	r3, [pc, #180]	; (8002200 <HAL_UART_MspInit+0x384>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002150:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <HAL_UART_MspInit+0x384>)
 8002152:	2200      	movs	r2, #0
 8002154:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <HAL_UART_MspInit+0x384>)
 8002158:	2200      	movs	r2, #0
 800215a:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800215c:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_UART_MspInit+0x384>)
 800215e:	2200      	movs	r2, #0
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002162:	4827      	ldr	r0, [pc, #156]	; (8002200 <HAL_UART_MspInit+0x384>)
 8002164:	f001 fbb4 	bl	80038d0 <HAL_DMA_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 800216e:	f7ff fab1 	bl	80016d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a22      	ldr	r2, [pc, #136]	; (8002200 <HAL_UART_MspInit+0x384>)
 8002176:	675a      	str	r2, [r3, #116]	; 0x74
 8002178:	4a21      	ldr	r2, [pc, #132]	; (8002200 <HAL_UART_MspInit+0x384>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800217e:	4b22      	ldr	r3, [pc, #136]	; (8002208 <HAL_UART_MspInit+0x38c>)
 8002180:	4a22      	ldr	r2, [pc, #136]	; (800220c <HAL_UART_MspInit+0x390>)
 8002182:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_UART_MspInit+0x38c>)
 8002186:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800218a:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_UART_MspInit+0x38c>)
 800218e:	2240      	movs	r2, #64	; 0x40
 8002190:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_UART_MspInit+0x38c>)
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002198:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_UART_MspInit+0x38c>)
 800219a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219e:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a0:	4b19      	ldr	r3, [pc, #100]	; (8002208 <HAL_UART_MspInit+0x38c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_UART_MspInit+0x38c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80021ac:	4b16      	ldr	r3, [pc, #88]	; (8002208 <HAL_UART_MspInit+0x38c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021b2:	4b15      	ldr	r3, [pc, #84]	; (8002208 <HAL_UART_MspInit+0x38c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_UART_MspInit+0x38c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80021be:	4812      	ldr	r0, [pc, #72]	; (8002208 <HAL_UART_MspInit+0x38c>)
 80021c0:	f001 fb86 	bl	80038d0 <HAL_DMA_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_UART_MspInit+0x352>
      Error_Handler();
 80021ca:	f7ff fa83 	bl	80016d4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a0d      	ldr	r2, [pc, #52]	; (8002208 <HAL_UART_MspInit+0x38c>)
 80021d2:	671a      	str	r2, [r3, #112]	; 0x70
 80021d4:	4a0c      	ldr	r2, [pc, #48]	; (8002208 <HAL_UART_MspInit+0x38c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	2047      	movs	r0, #71	; 0x47
 80021e0:	f001 fb3f 	bl	8003862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80021e4:	2047      	movs	r0, #71	; 0x47
 80021e6:	f001 fb58 	bl	800389a <HAL_NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	37b8      	adds	r7, #184	; 0xb8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40011400 	.word	0x40011400
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40021800 	.word	0x40021800
 8002200:	200009a8 	.word	0x200009a8
 8002204:	40026440 	.word	0x40026440
 8002208:	20000a08 	.word	0x20000a08
 800220c:	400264a0 	.word	0x400264a0

08002210 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0ac      	sub	sp, #176	; 0xb0
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002218:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	605a      	str	r2, [r3, #4]
 8002222:	609a      	str	r2, [r3, #8]
 8002224:	60da      	str	r2, [r3, #12]
 8002226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	2284      	movs	r2, #132	; 0x84
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f015 fa49 	bl	80176c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800223e:	d159      	bne.n	80022f4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002240:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002244:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800224c:	f107 0318 	add.w	r3, r7, #24
 8002250:	4618      	mov	r0, r3
 8002252:	f006 f815 	bl	8008280 <HAL_RCCEx_PeriphCLKConfig>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800225c:	f7ff fa3a 	bl	80016d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4b26      	ldr	r3, [pc, #152]	; (80022fc <HAL_PCD_MspInit+0xec>)
 8002262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002264:	4a25      	ldr	r2, [pc, #148]	; (80022fc <HAL_PCD_MspInit+0xec>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6313      	str	r3, [r2, #48]	; 0x30
 800226c:	4b23      	ldr	r3, [pc, #140]	; (80022fc <HAL_PCD_MspInit+0xec>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	f003 0301 	and.w	r3, r3, #1
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002278:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800227c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002280:	2302      	movs	r3, #2
 8002282:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228c:	2303      	movs	r3, #3
 800228e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002292:	230a      	movs	r3, #10
 8002294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002298:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800229c:	4619      	mov	r1, r3
 800229e:	4818      	ldr	r0, [pc, #96]	; (8002300 <HAL_PCD_MspInit+0xf0>)
 80022a0:	f003 f82c 	bl	80052fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80022a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022bc:	4619      	mov	r1, r3
 80022be:	4810      	ldr	r0, [pc, #64]	; (8002300 <HAL_PCD_MspInit+0xf0>)
 80022c0:	f003 f81c 	bl	80052fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80022c4:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_PCD_MspInit+0xec>)
 80022c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c8:	4a0c      	ldr	r2, [pc, #48]	; (80022fc <HAL_PCD_MspInit+0xec>)
 80022ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ce:	6353      	str	r3, [r2, #52]	; 0x34
 80022d0:	4b0a      	ldr	r3, [pc, #40]	; (80022fc <HAL_PCD_MspInit+0xec>)
 80022d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4b07      	ldr	r3, [pc, #28]	; (80022fc <HAL_PCD_MspInit+0xec>)
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	4a06      	ldr	r2, [pc, #24]	; (80022fc <HAL_PCD_MspInit+0xec>)
 80022e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e6:	6453      	str	r3, [r2, #68]	; 0x44
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <HAL_PCD_MspInit+0xec>)
 80022ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80022f4:	bf00      	nop
 80022f6:	37b0      	adds	r7, #176	; 0xb0
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	40020000 	.word	0x40020000

08002304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002308:	e7fe      	b.n	8002308 <NMI_Handler+0x4>

0800230a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800230e:	e7fe      	b.n	800230e <HardFault_Handler+0x4>

08002310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002314:	e7fe      	b.n	8002314 <MemManage_Handler+0x4>

08002316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002316:	b480      	push	{r7}
 8002318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231a:	e7fe      	b.n	800231a <BusFault_Handler+0x4>

0800231c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002320:	e7fe      	b.n	8002320 <UsageFault_Handler+0x4>

08002322 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002326:	bf00      	nop
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800233e:	b480      	push	{r7}
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002350:	f000 fb52 	bl	80029f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002354:	bf00      	nop
 8002356:	bd80      	pop	{r7, pc}

08002358 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800235c:	4802      	ldr	r0, [pc, #8]	; (8002368 <DMA1_Stream2_IRQHandler+0x10>)
 800235e:	f001 fc57 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200008e8 	.word	0x200008e8

0800236c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002370:	4802      	ldr	r0, [pc, #8]	; (800237c <DMA1_Stream3_IRQHandler+0x10>)
 8002372:	f001 fc4d 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200003fc 	.word	0x200003fc

08002380 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002384:	4802      	ldr	r0, [pc, #8]	; (8002390 <DMA1_Stream4_IRQHandler+0x10>)
 8002386:	f001 fc43 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000948 	.word	0x20000948

08002394 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002398:	4802      	ldr	r0, [pc, #8]	; (80023a4 <DMA1_Stream5_IRQHandler+0x10>)
 800239a:	f001 fc39 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000033c 	.word	0x2000033c

080023a8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80023ac:	4802      	ldr	r0, [pc, #8]	; (80023b8 <DMA1_Stream6_IRQHandler+0x10>)
 80023ae:	f001 fc2f 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	2000039c 	.word	0x2000039c

080023bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80023c0:	4802      	ldr	r0, [pc, #8]	; (80023cc <ADC_IRQHandler+0x10>)
 80023c2:	f000 fc6f 	bl	8002ca4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200001ec 	.word	0x200001ec

080023d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023d4:	4802      	ldr	r0, [pc, #8]	; (80023e0 <TIM3_IRQHandler+0x10>)
 80023d6:	f007 fa96 	bl	8009906 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000704 	.word	0x20000704

080023e4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <I2C1_EV_IRQHandler+0x10>)
 80023ea:	f003 fd43 	bl	8005e74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000294 	.word	0x20000294

080023f8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <I2C1_ER_IRQHandler+0x10>)
 80023fe:	f003 fd53 	bl	8005ea8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000294 	.word	0x20000294

0800240c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002410:	4802      	ldr	r0, [pc, #8]	; (800241c <I2C2_EV_IRQHandler+0x10>)
 8002412:	f003 fd2f 	bl	8005e74 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200002e8 	.word	0x200002e8

08002420 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <I2C2_ER_IRQHandler+0x10>)
 8002426:	f003 fd3f 	bl	8005ea8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	200002e8 	.word	0x200002e8

08002434 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002438:	4802      	ldr	r0, [pc, #8]	; (8002444 <SPI1_IRQHandler+0x10>)
 800243a:	f006 fd49 	bl	8008ed0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	200004bc 	.word	0x200004bc

08002448 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800244c:	4802      	ldr	r0, [pc, #8]	; (8002458 <DMA1_Stream7_IRQHandler+0x10>)
 800244e:	f001 fbdf 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002452:	bf00      	nop
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	2000045c 	.word	0x2000045c

0800245c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002460:	4802      	ldr	r0, [pc, #8]	; (800246c <UART4_IRQHandler+0x10>)
 8002462:	f008 f89d 	bl	800a5a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20000750 	.word	0x20000750

08002470 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <DMA2_Stream0_IRQHandler+0x10>)
 8002476:	f001 fbcb 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000584 	.word	0x20000584

08002484 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <DMA2_Stream1_IRQHandler+0x10>)
 800248a:	f001 fbc1 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200006a4 	.word	0x200006a4

08002498 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800249c:	4802      	ldr	r0, [pc, #8]	; (80024a8 <DMA2_Stream2_IRQHandler+0x10>)
 800249e:	f001 fbb7 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200009a8 	.word	0x200009a8

080024ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <DMA2_Stream3_IRQHandler+0x10>)
 80024b2:	f001 fbad 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000644 	.word	0x20000644

080024c0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <DMA2_Stream4_IRQHandler+0x10>)
 80024c6:	f001 fba3 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000234 	.word	0x20000234

080024d4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80024d8:	4802      	ldr	r0, [pc, #8]	; (80024e4 <DMA2_Stream5_IRQHandler+0x10>)
 80024da:	f001 fb99 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200005e4 	.word	0x200005e4

080024e8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80024ec:	4802      	ldr	r0, [pc, #8]	; (80024f8 <DMA2_Stream6_IRQHandler+0x10>)
 80024ee:	f001 fb8f 	bl	8003c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000a08 	.word	0x20000a08

080024fc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002500:	4802      	ldr	r0, [pc, #8]	; (800250c <USART6_IRQHandler+0x10>)
 8002502:	f008 f84d 	bl	800a5a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000860 	.word	0x20000860

08002510 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <SPI4_IRQHandler+0x10>)
 8002516:	f006 fcdb 	bl	8008ed0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20000520 	.word	0x20000520

08002524 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
	return 1;
 8002528:	2301      	movs	r3, #1
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <_kill>:

int _kill(int pid, int sig)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <_kill+0x20>)
 8002540:	2216      	movs	r2, #22
 8002542:	601a      	str	r2, [r3, #0]
	return -1;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	2000984c 	.word	0x2000984c

08002558 <_exit>:

void _exit (int status)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002560:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ffe5 	bl	8002534 <_kill>
	while (1) {}		/* Make sure we hang here */
 800256a:	e7fe      	b.n	800256a <_exit+0x12>

0800256c <_close>:
	}
	return len;
}

int _close(int file)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
	return -1;
 8002574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002594:	605a      	str	r2, [r3, #4]
	return 0;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_isatty>:

int _isatty(int file)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	return 1;
 80025ac:	2301      	movs	r3, #1
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b085      	sub	sp, #20
 80025be:	af00      	add	r7, sp, #0
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	607a      	str	r2, [r7, #4]
	return 0;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025dc:	4a14      	ldr	r2, [pc, #80]	; (8002630 <_sbrk+0x5c>)
 80025de:	4b15      	ldr	r3, [pc, #84]	; (8002634 <_sbrk+0x60>)
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e8:	4b13      	ldr	r3, [pc, #76]	; (8002638 <_sbrk+0x64>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d102      	bne.n	80025f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <_sbrk+0x64>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <_sbrk+0x68>)
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <_sbrk+0x64>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4413      	add	r3, r2
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	429a      	cmp	r2, r3
 8002602:	d205      	bcs.n	8002610 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002604:	4b0e      	ldr	r3, [pc, #56]	; (8002640 <_sbrk+0x6c>)
 8002606:	220c      	movs	r2, #12
 8002608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800260a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800260e:	e009      	b.n	8002624 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <_sbrk+0x64>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <_sbrk+0x64>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	4a06      	ldr	r2, [pc, #24]	; (8002638 <_sbrk+0x64>)
 8002620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	4618      	mov	r0, r3
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	20050000 	.word	0x20050000
 8002634:	00000400 	.word	0x00000400
 8002638:	20000f70 	.word	0x20000f70
 800263c:	20009860 	.word	0x20009860
 8002640:	2000984c 	.word	0x2000984c

08002644 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <SystemInit+0x20>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <SystemInit+0x20>)
 8002650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	e000ed00 	.word	0xe000ed00

08002668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800266c:	480d      	ldr	r0, [pc, #52]	; (80026a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800266e:	490e      	ldr	r1, [pc, #56]	; (80026a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002670:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002674:	e002      	b.n	800267c <LoopCopyDataInit>

08002676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800267a:	3304      	adds	r3, #4

0800267c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800267c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800267e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002680:	d3f9      	bcc.n	8002676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002682:	4a0b      	ldr	r2, [pc, #44]	; (80026b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002684:	4c0b      	ldr	r4, [pc, #44]	; (80026b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002688:	e001      	b.n	800268e <LoopFillZerobss>

0800268a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800268a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800268c:	3204      	adds	r2, #4

0800268e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800268e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002690:	d3fb      	bcc.n	800268a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002692:	f7ff ffd7 	bl	8002644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002696:	f014 ffd5 	bl	8017644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800269a:	f7fe fbf1 	bl	8000e80 <main>
  bx  lr    
 800269e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80026a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026a8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80026ac:	0801b3d8 	.word	0x0801b3d8
  ldr r2, =_sbss
 80026b0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80026b4:	2000985c 	.word	0x2000985c

080026b8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026b8:	e7fe      	b.n	80026b8 <CAN1_RX0_IRQHandler>

080026ba <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <LAN8742_RegisterBusIO+0x28>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d007      	beq.n	80026e2 <LAN8742_RegisterBusIO+0x28>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <LAN8742_RegisterBusIO+0x28>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026e6:	e014      	b.n	8002712 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d17c      	bne.n	8002838 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	e01c      	b.n	8002792 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f107 0208 	add.w	r2, r7, #8
 8002760:	2112      	movs	r1, #18
 8002762:	6978      	ldr	r0, [r7, #20]
 8002764:	4798      	blx	r3
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	da03      	bge.n	8002774 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800276c:	f06f 0304 	mvn.w	r3, #4
 8002770:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002772:	e00b      	b.n	800278c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	d105      	bne.n	800278c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
         break;
 800278a:	e005      	b.n	8002798 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3301      	adds	r3, #1
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b1f      	cmp	r3, #31
 8002796:	d9df      	bls.n	8002758 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b1f      	cmp	r3, #31
 800279e:	d902      	bls.n	80027a6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80027a0:	f06f 0302 	mvn.w	r3, #2
 80027a4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d145      	bne.n	8002838 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6810      	ldr	r0, [r2, #0]
 80027b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027b8:	2100      	movs	r1, #0
 80027ba:	4798      	blx	r3
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	db37      	blt.n	8002832 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6810      	ldr	r0, [r2, #0]
 80027ca:	f107 0208 	add.w	r2, r7, #8
 80027ce:	2100      	movs	r1, #0
 80027d0:	4798      	blx	r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	db28      	blt.n	800282a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	4798      	blx	r3
 80027de:	4603      	mov	r3, r0
 80027e0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80027e2:	e01c      	b.n	800281e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4798      	blx	r3
 80027ea:	4603      	mov	r3, r0
 80027ec:	461a      	mov	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027f6:	d80e      	bhi.n	8002816 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	6810      	ldr	r0, [r2, #0]
 8002800:	f107 0208 	add.w	r2, r7, #8
 8002804:	2100      	movs	r1, #0
 8002806:	4798      	blx	r3
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	da07      	bge.n	800281e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800280e:	f06f 0304 	mvn.w	r3, #4
 8002812:	613b      	str	r3, [r7, #16]
                 break;
 8002814:	e010      	b.n	8002838 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002816:	f06f 0301 	mvn.w	r3, #1
 800281a:	613b      	str	r3, [r7, #16]
               break;
 800281c:	e00c      	b.n	8002838 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1dd      	bne.n	80027e4 <LAN8742_Init+0xc6>
 8002828:	e006      	b.n	8002838 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800282a:	f06f 0304 	mvn.w	r3, #4
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	e002      	b.n	8002838 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002832:	f06f 0303 	mvn.w	r3, #3
 8002836:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d112      	bne.n	8002864 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	4798      	blx	r3
 8002844:	4603      	mov	r3, r0
 8002846:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002848:	bf00      	nop
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	4798      	blx	r3
 8002850:	4603      	mov	r3, r0
 8002852:	461a      	mov	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800285c:	d9f5      	bls.n	800284a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002864:	693b      	ldr	r3, [r7, #16]
 }
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6810      	ldr	r0, [r2, #0]
 8002882:	f107 020c 	add.w	r2, r7, #12
 8002886:	2101      	movs	r1, #1
 8002888:	4798      	blx	r3
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	da02      	bge.n	8002896 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002890:	f06f 0304 	mvn.w	r3, #4
 8002894:	e06e      	b.n	8002974 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6810      	ldr	r0, [r2, #0]
 800289e:	f107 020c 	add.w	r2, r7, #12
 80028a2:	2101      	movs	r1, #1
 80028a4:	4798      	blx	r3
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	da02      	bge.n	80028b2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80028ac:	f06f 0304 	mvn.w	r3, #4
 80028b0:	e060      	b.n	8002974 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80028bc:	2301      	movs	r3, #1
 80028be:	e059      	b.n	8002974 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6810      	ldr	r0, [r2, #0]
 80028c8:	f107 020c 	add.w	r2, r7, #12
 80028cc:	2100      	movs	r1, #0
 80028ce:	4798      	blx	r3
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	da02      	bge.n	80028dc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80028d6:	f06f 0304 	mvn.w	r3, #4
 80028da:	e04b      	b.n	8002974 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d11b      	bne.n	800291e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d006      	beq.n	80028fe <LAN8742_GetLinkState+0x90>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80028fa:	2302      	movs	r3, #2
 80028fc:	e03a      	b.n	8002974 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002908:	2303      	movs	r3, #3
 800290a:	e033      	b.n	8002974 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002916:	2304      	movs	r3, #4
 8002918:	e02c      	b.n	8002974 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800291a:	2305      	movs	r3, #5
 800291c:	e02a      	b.n	8002974 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6810      	ldr	r0, [r2, #0]
 8002926:	f107 020c 	add.w	r2, r7, #12
 800292a:	211f      	movs	r1, #31
 800292c:	4798      	blx	r3
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	da02      	bge.n	800293a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002934:	f06f 0304 	mvn.w	r3, #4
 8002938:	e01c      	b.n	8002974 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002944:	2306      	movs	r3, #6
 8002946:	e015      	b.n	8002974 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f003 031c 	and.w	r3, r3, #28
 800294e:	2b18      	cmp	r3, #24
 8002950:	d101      	bne.n	8002956 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002952:	2302      	movs	r3, #2
 8002954:	e00e      	b.n	8002974 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 031c 	and.w	r3, r3, #28
 800295c:	2b08      	cmp	r3, #8
 800295e:	d101      	bne.n	8002964 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002960:	2303      	movs	r3, #3
 8002962:	e007      	b.n	8002974 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 031c 	and.w	r3, r3, #28
 800296a:	2b14      	cmp	r3, #20
 800296c:	d101      	bne.n	8002972 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800296e:	2304      	movs	r3, #4
 8002970:	e000      	b.n	8002974 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002972:	2305      	movs	r3, #5
    }				
  }
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002980:	2003      	movs	r0, #3
 8002982:	f000 ff63 	bl	800384c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002986:	2000      	movs	r0, #0
 8002988:	f000 f806 	bl	8002998 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800298c:	f7fe fea8 	bl	80016e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	bd80      	pop	{r7, pc}
	...

08002998 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_InitTick+0x54>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b12      	ldr	r3, [pc, #72]	; (80029f0 <HAL_InitTick+0x58>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	4619      	mov	r1, r3
 80029aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80029b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 ff7d 	bl	80038b6 <HAL_SYSTICK_Config>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e00e      	b.n	80029e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b0f      	cmp	r3, #15
 80029ca:	d80a      	bhi.n	80029e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029d4:	f000 ff45 	bl	8003862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d8:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <HAL_InitTick+0x5c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000008 	.word	0x20000008
 80029f4:	20000004 	.word	0x20000004

080029f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_IncTick+0x20>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_IncTick+0x24>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4413      	add	r3, r2
 8002a08:	4a04      	ldr	r2, [pc, #16]	; (8002a1c <HAL_IncTick+0x24>)
 8002a0a:	6013      	str	r3, [r2, #0]
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20000008 	.word	0x20000008
 8002a1c:	20000f74 	.word	0x20000f74

08002a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return uwTick;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_GetTick+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000f74 	.word	0x20000f74

08002a38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a40:	f7ff ffee 	bl	8002a20 <HAL_GetTick>
 8002a44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a50:	d005      	beq.n	8002a5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_Delay+0x44>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a5e:	bf00      	nop
 8002a60:	f7ff ffde 	bl	8002a20 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d8f7      	bhi.n	8002a60 <HAL_Delay+0x28>
  {
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000008 	.word	0x20000008

08002a80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e031      	b.n	8002afa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7fe fe42 	bl	8001728 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d116      	bne.n	8002aec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <HAL_ADC_Init+0x84>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	f043 0202 	orr.w	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fc66 	bl	80033a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f023 0303 	bic.w	r3, r3, #3
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8002aea:	e001      	b.n	8002af0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	ffffeefd 	.word	0xffffeefd

08002b08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_Start+0x1a>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e0ad      	b.n	8002c7e <HAL_ADC_Start+0x176>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d018      	beq.n	8002b6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002b48:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <HAL_ADC_Start+0x184>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a50      	ldr	r2, [pc, #320]	; (8002c90 <HAL_ADC_Start+0x188>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0c9a      	lsrs	r2, r3, #18
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002b5c:	e002      	b.n	8002b64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d175      	bne.n	8002c64 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b7c:	4b45      	ldr	r3, [pc, #276]	; (8002c94 <HAL_ADC_Start+0x18c>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d007      	beq.n	8002ba6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b9e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb2:	d106      	bne.n	8002bc2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb8:	f023 0206 	bic.w	r2, r3, #6
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
 8002bc0:	e002      	b.n	8002bc8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bd8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002bda:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <HAL_ADC_Start+0x190>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10f      	bne.n	8002c06 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d143      	bne.n	8002c7c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	e03a      	b.n	8002c7c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a24      	ldr	r2, [pc, #144]	; (8002c9c <HAL_ADC_Start+0x194>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10e      	bne.n	8002c2e <HAL_ADC_Start+0x126>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d107      	bne.n	8002c2e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c2c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_ADC_Start+0x190>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d120      	bne.n	8002c7c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a18      	ldr	r2, [pc, #96]	; (8002ca0 <HAL_ADC_Start+0x198>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d11b      	bne.n	8002c7c <HAL_ADC_Start+0x174>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d114      	bne.n	8002c7c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	e00b      	b.n	8002c7c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f043 0210 	orr.w	r2, r3, #16
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000000 	.word	0x20000000
 8002c90:	431bde83 	.word	0x431bde83
 8002c94:	fffff8fe 	.word	0xfffff8fe
 8002c98:	40012300 	.word	0x40012300
 8002c9c:	40012000 	.word	0x40012000
 8002ca0:	40012200 	.word	0x40012200

08002ca4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d049      	beq.n	8002d6e <HAL_ADC_IRQHandler+0xca>
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d046      	beq.n	8002d6e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d105      	bne.n	8002cf8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d12b      	bne.n	8002d5e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d127      	bne.n	8002d5e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d119      	bne.n	8002d5e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0220 	bic.w	r2, r2, #32
 8002d38:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d105      	bne.n	8002d5e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f013 ff28 	bl	8016bb4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0212 	mvn.w	r2, #18
 8002d6c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0304 	and.w	r3, r3, #4
 8002d74:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d057      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x190>
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d054      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d139      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d12b      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d124      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d11d      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d119      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dfe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d105      	bne.n	8002e24 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1c:	f043 0201 	orr.w	r2, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fc37 	bl	8003698 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f06f 020c 	mvn.w	r2, #12
 8002e32:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d017      	beq.n	8002e7a <HAL_ADC_IRQHandler+0x1d6>
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d014      	beq.n	8002e7a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d10d      	bne.n	8002e7a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f92e 	bl	80030cc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f06f 0201 	mvn.w	r2, #1
 8002e78:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e88:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d015      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x218>
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d012      	beq.n	8002ebc <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f043 0202 	orr.w	r2, r3, #2
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f06f 0220 	mvn.w	r2, #32
 8002eaa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f917 	bl	80030e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f06f 0220 	mvn.w	r2, #32
 8002eba:	601a      	str	r2, [r3, #0]
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_Start_DMA+0x1e>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e0d4      	b.n	800308c <HAL_ADC_Start_DMA+0x1c8>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d018      	beq.n	8002f2a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002f08:	4b62      	ldr	r3, [pc, #392]	; (8003094 <HAL_ADC_Start_DMA+0x1d0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a62      	ldr	r2, [pc, #392]	; (8003098 <HAL_ADC_Start_DMA+0x1d4>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	0c9a      	lsrs	r2, r3, #18
 8002f14:	4613      	mov	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	4413      	add	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002f1c:	e002      	b.n	8002f24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f9      	bne.n	8002f1e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	f040 809c 	bne.w	8003072 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f3e:	4b57      	ldr	r3, [pc, #348]	; (800309c <HAL_ADC_Start_DMA+0x1d8>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d106      	bne.n	8002f84 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f023 0206 	bic.w	r2, r3, #6
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44
 8002f82:	e002      	b.n	8002f8a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	4a42      	ldr	r2, [pc, #264]	; (80030a0 <HAL_ADC_Start_DMA+0x1dc>)
 8002f98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	4a41      	ldr	r2, [pc, #260]	; (80030a4 <HAL_ADC_Start_DMA+0x1e0>)
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	4a40      	ldr	r2, [pc, #256]	; (80030a8 <HAL_ADC_Start_DMA+0x1e4>)
 8002fa8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fb2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fc2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	334c      	adds	r3, #76	; 0x4c
 8002fde:	4619      	mov	r1, r3
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f000 fd22 	bl	8003a2c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002fe8:	4b30      	ldr	r3, [pc, #192]	; (80030ac <HAL_ADC_Start_DMA+0x1e8>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10f      	bne.n	8003014 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d143      	bne.n	800308a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	e03a      	b.n	800308a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a25      	ldr	r2, [pc, #148]	; (80030b0 <HAL_ADC_Start_DMA+0x1ec>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d10e      	bne.n	800303c <HAL_ADC_Start_DMA+0x178>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800303a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_ADC_Start_DMA+0x1e8>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	d120      	bne.n	800308a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a19      	ldr	r2, [pc, #100]	; (80030b4 <HAL_ADC_Start_DMA+0x1f0>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d11b      	bne.n	800308a <HAL_ADC_Start_DMA+0x1c6>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d114      	bne.n	800308a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e00b      	b.n	800308a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f043 0210 	orr.w	r2, r3, #16
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000000 	.word	0x20000000
 8003098:	431bde83 	.word	0x431bde83
 800309c:	fffff8fe 	.word	0xfffff8fe
 80030a0:	08003595 	.word	0x08003595
 80030a4:	0800364f 	.word	0x0800364f
 80030a8:	0800366b 	.word	0x0800366b
 80030ac:	40012300 	.word	0x40012300
 80030b0:	40012000 	.word	0x40012000
 80030b4:	40012200 	.word	0x40012200

080030b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003108:	2b01      	cmp	r3, #1
 800310a:	d101      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1c>
 800310c:	2302      	movs	r3, #2
 800310e:	e136      	b.n	800337e <HAL_ADC_ConfigChannel+0x28a>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b09      	cmp	r3, #9
 800311e:	d93a      	bls.n	8003196 <HAL_ADC_ConfigChannel+0xa2>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003128:	d035      	beq.n	8003196 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68d9      	ldr	r1, [r3, #12]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	4613      	mov	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	3b1e      	subs	r3, #30
 8003140:	2207      	movs	r2, #7
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	400a      	ands	r2, r1
 800314e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a8d      	ldr	r2, [pc, #564]	; (800338c <HAL_ADC_ConfigChannel+0x298>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10a      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68d9      	ldr	r1, [r3, #12]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	061a      	lsls	r2, r3, #24
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800316e:	e035      	b.n	80031dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68d9      	ldr	r1, [r3, #12]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	b29b      	uxth	r3, r3
 8003180:	4618      	mov	r0, r3
 8003182:	4603      	mov	r3, r0
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4403      	add	r3, r0
 8003188:	3b1e      	subs	r3, #30
 800318a:	409a      	lsls	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003194:	e022      	b.n	80031dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	6919      	ldr	r1, [r3, #16]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	461a      	mov	r2, r3
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	2207      	movs	r2, #7
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	43da      	mvns	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	400a      	ands	r2, r1
 80031b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6919      	ldr	r1, [r3, #16]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	4603      	mov	r3, r0
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4403      	add	r3, r0
 80031d2:	409a      	lsls	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b06      	cmp	r3, #6
 80031e2:	d824      	bhi.n	800322e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4413      	add	r3, r2
 80031f4:	3b05      	subs	r3, #5
 80031f6:	221f      	movs	r2, #31
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43da      	mvns	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	400a      	ands	r2, r1
 8003204:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	4618      	mov	r0, r3
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	3b05      	subs	r3, #5
 8003220:	fa00 f203 	lsl.w	r2, r0, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	635a      	str	r2, [r3, #52]	; 0x34
 800322c:	e04c      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b0c      	cmp	r3, #12
 8003234:	d824      	bhi.n	8003280 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	3b23      	subs	r3, #35	; 0x23
 8003248:	221f      	movs	r2, #31
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	400a      	ands	r2, r1
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	4618      	mov	r0, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	3b23      	subs	r3, #35	; 0x23
 8003272:	fa00 f203 	lsl.w	r2, r0, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	631a      	str	r2, [r3, #48]	; 0x30
 800327e:	e023      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	3b41      	subs	r3, #65	; 0x41
 8003292:	221f      	movs	r2, #31
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	43da      	mvns	r2, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	400a      	ands	r2, r1
 80032a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4618      	mov	r0, r3
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	3b41      	subs	r3, #65	; 0x41
 80032bc:	fa00 f203 	lsl.w	r2, r0, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a30      	ldr	r2, [pc, #192]	; (8003390 <HAL_ADC_ConfigChannel+0x29c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d10a      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x1f4>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032da:	d105      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80032dc:	4b2d      	ldr	r3, [pc, #180]	; (8003394 <HAL_ADC_ConfigChannel+0x2a0>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a2c      	ldr	r2, [pc, #176]	; (8003394 <HAL_ADC_ConfigChannel+0x2a0>)
 80032e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80032e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a28      	ldr	r2, [pc, #160]	; (8003390 <HAL_ADC_ConfigChannel+0x29c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d10f      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x21e>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b12      	cmp	r3, #18
 80032f8:	d10b      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80032fa:	4b26      	ldr	r3, [pc, #152]	; (8003394 <HAL_ADC_ConfigChannel+0x2a0>)
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4a25      	ldr	r2, [pc, #148]	; (8003394 <HAL_ADC_ConfigChannel+0x2a0>)
 8003300:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003304:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003306:	4b23      	ldr	r3, [pc, #140]	; (8003394 <HAL_ADC_ConfigChannel+0x2a0>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a22      	ldr	r2, [pc, #136]	; (8003394 <HAL_ADC_ConfigChannel+0x2a0>)
 800330c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003310:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <HAL_ADC_ConfigChannel+0x29c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d12b      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x280>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a1a      	ldr	r2, [pc, #104]	; (800338c <HAL_ADC_ConfigChannel+0x298>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d003      	beq.n	800332e <HAL_ADC_ConfigChannel+0x23a>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b11      	cmp	r3, #17
 800332c:	d122      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <HAL_ADC_ConfigChannel+0x2a0>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	4a18      	ldr	r2, [pc, #96]	; (8003394 <HAL_ADC_ConfigChannel+0x2a0>)
 8003334:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003338:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <HAL_ADC_ConfigChannel+0x2a0>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4a15      	ldr	r2, [pc, #84]	; (8003394 <HAL_ADC_ConfigChannel+0x2a0>)
 8003340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003344:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a10      	ldr	r2, [pc, #64]	; (800338c <HAL_ADC_ConfigChannel+0x298>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d111      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_ADC_ConfigChannel+0x2a4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a11      	ldr	r2, [pc, #68]	; (800339c <HAL_ADC_ConfigChannel+0x2a8>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	0c9a      	lsrs	r2, r3, #18
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003366:	e002      	b.n	800336e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	3b01      	subs	r3, #1
 800336c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f9      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	10000012 	.word	0x10000012
 8003390:	40012000 	.word	0x40012000
 8003394:	40012300 	.word	0x40012300
 8003398:	20000000 	.word	0x20000000
 800339c:	431bde83 	.word	0x431bde83

080033a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80033a8:	4b78      	ldr	r3, [pc, #480]	; (800358c <ADC_Init+0x1ec>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4a77      	ldr	r2, [pc, #476]	; (800358c <ADC_Init+0x1ec>)
 80033ae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80033b2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80033b4:	4b75      	ldr	r3, [pc, #468]	; (800358c <ADC_Init+0x1ec>)
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	4973      	ldr	r1, [pc, #460]	; (800358c <ADC_Init+0x1ec>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	021a      	lsls	r2, r3, #8
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003416:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342e:	4a58      	ldr	r2, [pc, #352]	; (8003590 <ADC_Init+0x1f0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003442:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6899      	ldr	r1, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003464:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6899      	ldr	r1, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
 8003478:	e00f      	b.n	800349a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003488:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003498:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0202 	bic.w	r2, r2, #2
 80034a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6899      	ldr	r1, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	005a      	lsls	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d01b      	beq.n	8003500 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	3b01      	subs	r3, #1
 80034f4:	035a      	lsls	r2, r3, #13
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	e007      	b.n	8003510 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	3b01      	subs	r3, #1
 800352c:	051a      	lsls	r2, r3, #20
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003544:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6899      	ldr	r1, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003552:	025a      	lsls	r2, r3, #9
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6899      	ldr	r1, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	029a      	lsls	r2, r3, #10
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	609a      	str	r2, [r3, #8]
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	40012300 	.word	0x40012300
 8003590:	0f000001 	.word	0x0f000001

08003594 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d13c      	bne.n	8003628 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d12b      	bne.n	8003620 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d127      	bne.n	8003620 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d119      	bne.n	8003620 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0220 	bic.w	r2, r2, #32
 80035fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d105      	bne.n	8003620 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f043 0201 	orr.w	r2, r3, #1
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f013 fac7 	bl	8016bb4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003626:	e00e      	b.n	8003646 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7ff fd53 	bl	80030e0 <HAL_ADC_ErrorCallback>
}
 800363a:	e004      	b.n	8003646 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4798      	blx	r3
}
 8003646:	bf00      	nop
 8003648:	3710      	adds	r7, #16
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800365c:	68f8      	ldr	r0, [r7, #12]
 800365e:	f7ff fd2b 	bl	80030b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003662:	bf00      	nop
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2240      	movs	r2, #64	; 0x40
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	f043 0204 	orr.w	r2, r3, #4
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f7ff fd28 	bl	80030e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <__NVIC_SetPriorityGrouping+0x40>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c8:	4013      	ands	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80036d4:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <__NVIC_SetPriorityGrouping+0x40>)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	60d3      	str	r3, [r2, #12]
}
 80036e0:	bf00      	nop
 80036e2:	3714      	adds	r7, #20
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	e000ed00 	.word	0xe000ed00
 80036f0:	05fa0000 	.word	0x05fa0000

080036f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <__NVIC_GetPriorityGrouping+0x18>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	f003 0307 	and.w	r3, r3, #7
}
 8003702:	4618      	mov	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	2b00      	cmp	r3, #0
 8003720:	db0b      	blt.n	800373a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	f003 021f 	and.w	r2, r3, #31
 8003728:	4907      	ldr	r1, [pc, #28]	; (8003748 <__NVIC_EnableIRQ+0x38>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2001      	movs	r0, #1
 8003732:	fa00 f202 	lsl.w	r2, r0, r2
 8003736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	e000e100 	.word	0xe000e100

0800374c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	6039      	str	r1, [r7, #0]
 8003756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375c:	2b00      	cmp	r3, #0
 800375e:	db0a      	blt.n	8003776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	b2da      	uxtb	r2, r3
 8003764:	490c      	ldr	r1, [pc, #48]	; (8003798 <__NVIC_SetPriority+0x4c>)
 8003766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376a:	0112      	lsls	r2, r2, #4
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	440b      	add	r3, r1
 8003770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003774:	e00a      	b.n	800378c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	4908      	ldr	r1, [pc, #32]	; (800379c <__NVIC_SetPriority+0x50>)
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	3b04      	subs	r3, #4
 8003784:	0112      	lsls	r2, r2, #4
 8003786:	b2d2      	uxtb	r2, r2
 8003788:	440b      	add	r3, r1
 800378a:	761a      	strb	r2, [r3, #24]
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	e000e100 	.word	0xe000e100
 800379c:	e000ed00 	.word	0xe000ed00

080037a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	; 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f1c3 0307 	rsb	r3, r3, #7
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	bf28      	it	cs
 80037be:	2304      	movcs	r3, #4
 80037c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	3304      	adds	r3, #4
 80037c6:	2b06      	cmp	r3, #6
 80037c8:	d902      	bls.n	80037d0 <NVIC_EncodePriority+0x30>
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3b03      	subs	r3, #3
 80037ce:	e000      	b.n	80037d2 <NVIC_EncodePriority+0x32>
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	43da      	mvns	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	401a      	ands	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	fa01 f303 	lsl.w	r3, r1, r3
 80037f2:	43d9      	mvns	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f8:	4313      	orrs	r3, r2
         );
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3724      	adds	r7, #36	; 0x24
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3b01      	subs	r3, #1
 8003814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003818:	d301      	bcc.n	800381e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800381a:	2301      	movs	r3, #1
 800381c:	e00f      	b.n	800383e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800381e:	4a0a      	ldr	r2, [pc, #40]	; (8003848 <SysTick_Config+0x40>)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3b01      	subs	r3, #1
 8003824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003826:	210f      	movs	r1, #15
 8003828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800382c:	f7ff ff8e 	bl	800374c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <SysTick_Config+0x40>)
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003836:	4b04      	ldr	r3, [pc, #16]	; (8003848 <SysTick_Config+0x40>)
 8003838:	2207      	movs	r2, #7
 800383a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	e000e010 	.word	0xe000e010

0800384c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff29 	bl	80036ac <__NVIC_SetPriorityGrouping>
}
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003862:	b580      	push	{r7, lr}
 8003864:	b086      	sub	sp, #24
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	60b9      	str	r1, [r7, #8]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003874:	f7ff ff3e 	bl	80036f4 <__NVIC_GetPriorityGrouping>
 8003878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	6978      	ldr	r0, [r7, #20]
 8003880:	f7ff ff8e 	bl	80037a0 <NVIC_EncodePriority>
 8003884:	4602      	mov	r2, r0
 8003886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff5d 	bl	800374c <__NVIC_SetPriority>
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	4603      	mov	r3, r0
 80038a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff31 	bl	8003710 <__NVIC_EnableIRQ>
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ffa2 	bl	8003808 <SysTick_Config>
 80038c4:	4603      	mov	r3, r0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038dc:	f7ff f8a0 	bl	8002a20 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e099      	b.n	8003a20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800390c:	e00f      	b.n	800392e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800390e:	f7ff f887 	bl	8002a20 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b05      	cmp	r3, #5
 800391a:	d908      	bls.n	800392e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2203      	movs	r2, #3
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e078      	b.n	8003a20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e8      	bne.n	800390e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <HAL_DMA_Init+0x158>)
 8003948:	4013      	ands	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800395a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003966:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	699b      	ldr	r3, [r3, #24]
 800396c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003972:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003984:	2b04      	cmp	r3, #4
 8003986:	d107      	bne.n	8003998 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003990:	4313      	orrs	r3, r2
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f023 0307 	bic.w	r3, r3, #7
 80039ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d117      	bne.n	80039f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00e      	beq.n	80039f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fb23 	bl	8004020 <DMA_CheckFifoParam>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2240      	movs	r2, #64	; 0x40
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039ee:	2301      	movs	r3, #1
 80039f0:	e016      	b.n	8003a20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fada 	bl	8003fb4 <DMA_CalcBaseAndBitshift>
 8003a00:	4603      	mov	r3, r0
 8003a02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a08:	223f      	movs	r2, #63	; 0x3f
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	f010803f 	.word	0xf010803f

08003a2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d101      	bne.n	8003a52 <HAL_DMA_Start_IT+0x26>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	e048      	b.n	8003ae4 <HAL_DMA_Start_IT+0xb8>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d137      	bne.n	8003ad6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fa6c 	bl	8003f58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a84:	223f      	movs	r2, #63	; 0x3f
 8003a86:	409a      	lsls	r2, r3
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0216 	orr.w	r2, r2, #22
 8003a9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695a      	ldr	r2, [r3, #20]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003aaa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0208 	orr.w	r2, r2, #8
 8003ac2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	e005      	b.n	8003ae2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003afa:	f7fe ff91 	bl	8002a20 <HAL_GetTick>
 8003afe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d008      	beq.n	8003b1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2280      	movs	r2, #128	; 0x80
 8003b10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e052      	b.n	8003bc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f022 0216 	bic.w	r2, r2, #22
 8003b2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d103      	bne.n	8003b4e <HAL_DMA_Abort+0x62>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0208 	bic.w	r2, r2, #8
 8003b5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 0201 	bic.w	r2, r2, #1
 8003b6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b6e:	e013      	b.n	8003b98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b70:	f7fe ff56 	bl	8002a20 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b05      	cmp	r3, #5
 8003b7c:	d90c      	bls.n	8003b98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2203      	movs	r2, #3
 8003b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e015      	b.n	8003bc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1e4      	bne.n	8003b70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003baa:	223f      	movs	r2, #63	; 0x3f
 8003bac:	409a      	lsls	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d004      	beq.n	8003bea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e00c      	b.n	8003c04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2205      	movs	r2, #5
 8003bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0201 	bic.w	r2, r2, #1
 8003c00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003c1c:	4b8e      	ldr	r3, [pc, #568]	; (8003e58 <HAL_DMA_IRQHandler+0x248>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a8e      	ldr	r2, [pc, #568]	; (8003e5c <HAL_DMA_IRQHandler+0x24c>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0a9b      	lsrs	r3, r3, #10
 8003c28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d01a      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d013      	beq.n	8003c7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	2208      	movs	r2, #8
 8003c6a:	409a      	lsls	r2, r3
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	f043 0201 	orr.w	r2, r3, #1
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c80:	2201      	movs	r2, #1
 8003c82:	409a      	lsls	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d012      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00b      	beq.n	8003cb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003caa:	f043 0202 	orr.w	r2, r3, #2
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb6:	2204      	movs	r2, #4
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d012      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00b      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce0:	f043 0204 	orr.w	r2, r3, #4
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cec:	2210      	movs	r2, #16
 8003cee:	409a      	lsls	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d043      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d03c      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	409a      	lsls	r2, r3
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d018      	beq.n	8003d52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d108      	bne.n	8003d40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d024      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
 8003d3e:	e01f      	b.n	8003d80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01b      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	4798      	blx	r3
 8003d50:	e016      	b.n	8003d80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d107      	bne.n	8003d70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0208 	bic.w	r2, r2, #8
 8003d6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d84:	2220      	movs	r2, #32
 8003d86:	409a      	lsls	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 808f 	beq.w	8003eb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f000 8087 	beq.w	8003eb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da6:	2220      	movs	r2, #32
 8003da8:	409a      	lsls	r2, r3
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b05      	cmp	r3, #5
 8003db8:	d136      	bne.n	8003e28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0216 	bic.w	r2, r2, #22
 8003dc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d103      	bne.n	8003dea <HAL_DMA_IRQHandler+0x1da>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d007      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0208 	bic.w	r2, r2, #8
 8003df8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dfe:	223f      	movs	r2, #63	; 0x3f
 8003e00:	409a      	lsls	r2, r3
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d07e      	beq.n	8003f1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	4798      	blx	r3
        }
        return;
 8003e26:	e079      	b.n	8003f1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d01d      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10d      	bne.n	8003e60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d031      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4798      	blx	r3
 8003e54:	e02c      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x2a0>
 8003e56:	bf00      	nop
 8003e58:	20000000 	.word	0x20000000
 8003e5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d023      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	4798      	blx	r3
 8003e70:	e01e      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10f      	bne.n	8003ea0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0210 	bic.w	r2, r2, #16
 8003e8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d032      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d022      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2205      	movs	r2, #5
 8003ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0201 	bic.w	r2, r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d307      	bcc.n	8003ef8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f2      	bne.n	8003edc <HAL_DMA_IRQHandler+0x2cc>
 8003ef6:	e000      	b.n	8003efa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ef8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d005      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
 8003f1a:	e000      	b.n	8003f1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f1c:	bf00      	nop
    }
  }
}
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f32:	b2db      	uxtb	r3, r3
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	2b40      	cmp	r3, #64	; 0x40
 8003f84:	d108      	bne.n	8003f98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f96:	e007      	b.n	8003fa8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	60da      	str	r2, [r3, #12]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	3b10      	subs	r3, #16
 8003fc4:	4a13      	ldr	r2, [pc, #76]	; (8004014 <DMA_CalcBaseAndBitshift+0x60>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003fce:	4a12      	ldr	r2, [pc, #72]	; (8004018 <DMA_CalcBaseAndBitshift+0x64>)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2b03      	cmp	r3, #3
 8003fe0:	d908      	bls.n	8003ff4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	4b0c      	ldr	r3, [pc, #48]	; (800401c <DMA_CalcBaseAndBitshift+0x68>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	1d1a      	adds	r2, r3, #4
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	659a      	str	r2, [r3, #88]	; 0x58
 8003ff2:	e006      	b.n	8004002 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4b08      	ldr	r3, [pc, #32]	; (800401c <DMA_CalcBaseAndBitshift+0x68>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004006:	4618      	mov	r0, r3
 8004008:	3714      	adds	r7, #20
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	aaaaaaab 	.word	0xaaaaaaab
 8004018:	0801b188 	.word	0x0801b188
 800401c:	fffffc00 	.word	0xfffffc00

08004020 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004030:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d11f      	bne.n	800407a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b03      	cmp	r3, #3
 800403e:	d856      	bhi.n	80040ee <DMA_CheckFifoParam+0xce>
 8004040:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <DMA_CheckFifoParam+0x28>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	08004059 	.word	0x08004059
 800404c:	0800406b 	.word	0x0800406b
 8004050:	08004059 	.word	0x08004059
 8004054:	080040ef 	.word	0x080040ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d046      	beq.n	80040f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004068:	e043      	b.n	80040f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004072:	d140      	bne.n	80040f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004078:	e03d      	b.n	80040f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004082:	d121      	bne.n	80040c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d837      	bhi.n	80040fa <DMA_CheckFifoParam+0xda>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <DMA_CheckFifoParam+0x70>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040a1 	.word	0x080040a1
 8004094:	080040a7 	.word	0x080040a7
 8004098:	080040a1 	.word	0x080040a1
 800409c:	080040b9 	.word	0x080040b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	73fb      	strb	r3, [r7, #15]
      break;
 80040a4:	e030      	b.n	8004108 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d025      	beq.n	80040fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040b6:	e022      	b.n	80040fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040c0:	d11f      	bne.n	8004102 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040c6:	e01c      	b.n	8004102 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d903      	bls.n	80040d6 <DMA_CheckFifoParam+0xb6>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d003      	beq.n	80040dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80040d4:	e018      	b.n	8004108 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	73fb      	strb	r3, [r7, #15]
      break;
 80040da:	e015      	b.n	8004108 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	73fb      	strb	r3, [r7, #15]
      break;
 80040ec:	e00b      	b.n	8004106 <DMA_CheckFifoParam+0xe6>
      break;
 80040ee:	bf00      	nop
 80040f0:	e00a      	b.n	8004108 <DMA_CheckFifoParam+0xe8>
      break;
 80040f2:	bf00      	nop
 80040f4:	e008      	b.n	8004108 <DMA_CheckFifoParam+0xe8>
      break;
 80040f6:	bf00      	nop
 80040f8:	e006      	b.n	8004108 <DMA_CheckFifoParam+0xe8>
      break;
 80040fa:	bf00      	nop
 80040fc:	e004      	b.n	8004108 <DMA_CheckFifoParam+0xe8>
      break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <DMA_CheckFifoParam+0xe8>
      break;   
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <DMA_CheckFifoParam+0xe8>
      break;
 8004106:	bf00      	nop
    }
  } 
  
  return status; 
 8004108:	7bfb      	ldrb	r3, [r7, #15]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop

08004118 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e06a      	b.n	8004200 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004130:	2b00      	cmp	r3, #0
 8004132:	d106      	bne.n	8004142 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2223      	movs	r2, #35	; 0x23
 8004138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f008 f9ef 	bl	800c520 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004142:	4b31      	ldr	r3, [pc, #196]	; (8004208 <HAL_ETH_Init+0xf0>)
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	4a30      	ldr	r2, [pc, #192]	; (8004208 <HAL_ETH_Init+0xf0>)
 8004148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800414c:	6453      	str	r3, [r2, #68]	; 0x44
 800414e:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <HAL_ETH_Init+0xf0>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800415a:	4b2c      	ldr	r3, [pc, #176]	; (800420c <HAL_ETH_Init+0xf4>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	4a2b      	ldr	r2, [pc, #172]	; (800420c <HAL_ETH_Init+0xf4>)
 8004160:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004164:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004166:	4b29      	ldr	r3, [pc, #164]	; (800420c <HAL_ETH_Init+0xf4>)
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	4927      	ldr	r1, [pc, #156]	; (800420c <HAL_ETH_Init+0xf4>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004174:	4b25      	ldr	r3, [pc, #148]	; (800420c <HAL_ETH_Init+0xf4>)
 8004176:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6812      	ldr	r2, [r2, #0]
 8004186:	f043 0301 	orr.w	r3, r3, #1
 800418a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800418e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004190:	f7fe fc46 	bl	8002a20 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004196:	e011      	b.n	80041bc <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004198:	f7fe fc42 	bl	8002a20 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041a6:	d909      	bls.n	80041bc <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2204      	movs	r2, #4
 80041ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	22e0      	movs	r2, #224	; 0xe0
 80041b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e021      	b.n	8004200 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e4      	bne.n	8004198 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 fdf0 	bl	8004db4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 fe97 	bl	8004f08 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 feed 	bl	8004fba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	461a      	mov	r2, r3
 80041e6:	2100      	movs	r1, #0
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 fe55 	bl	8004e98 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2210      	movs	r2, #16
 80041fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40023800 	.word	0x40023800
 800420c:	40013800 	.word	0x40013800

08004210 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421e:	2b10      	cmp	r3, #16
 8004220:	d150      	bne.n	80042c4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2223      	movs	r2, #35	; 0x23
 8004226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2204      	movs	r2, #4
 800422e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f9fd 	bl	8004630 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0208 	orr.w	r2, r2, #8
 8004244:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800424e:	2001      	movs	r0, #1
 8004250:	f7fe fbf2 	bl	8002a38 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0204 	orr.w	r2, r2, #4
 800426a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004274:	2001      	movs	r0, #1
 8004276:	f7fe fbdf 	bl	8002a38 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fc36 	bl	8004af4 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800429a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800429e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	f043 0302 	orr.w	r3, r3, #2
 80042b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042b6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2223      	movs	r2, #35	; 0x23
 80042bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80042c0:	2300      	movs	r3, #0
 80042c2:	e000      	b.n	80042c6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
  }
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042dc:	2b23      	cmp	r3, #35	; 0x23
 80042de:	d14a      	bne.n	8004376 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2223      	movs	r2, #35	; 0x23
 80042e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042fe:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	f023 0302 	bic.w	r3, r3, #2
 8004312:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004316:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0204 	bic.w	r2, r2, #4
 8004326:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004330:	2001      	movs	r0, #1
 8004332:	f7fe fb81 	bl	8002a38 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 fbd8 	bl	8004af4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0208 	bic.w	r2, r2, #8
 8004352:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800435c:	2001      	movs	r0, #1
 800435e:	f7fe fb6b 	bl	8002a38 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2210      	movs	r2, #16
 800436e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e000      	b.n	8004378 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	f043 0201 	orr.w	r2, r3, #1
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e07c      	b.n	80044a0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043ac:	2b23      	cmp	r3, #35	; 0x23
 80043ae:	d176      	bne.n	800449e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80043b0:	2200      	movs	r2, #0
 80043b2:	68b9      	ldr	r1, [r7, #8]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 fe6d 	bl	8005094 <ETH_Prepare_Tx_Descriptors>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c6:	f043 0202 	orr.w	r2, r3, #2
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e065      	b.n	80044a0 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80043d4:	f3bf 8f4f 	dsb	sy
}
 80043d8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3206      	adds	r2, #6
 80043e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	629a      	str	r2, [r3, #40]	; 0x28
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d904      	bls.n	8004404 <HAL_ETH_Transmit+0x84>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	1f1a      	subs	r2, r3, #4
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3106      	adds	r1, #6
 8004410:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004414:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004418:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 800441a:	f7fe fb01 	bl	8002a20 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004420:	e037      	b.n	8004492 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d011      	beq.n	8004458 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443a:	f043 0208 	orr.w	r2, r3, #8
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444c:	695a      	ldr	r2, [r3, #20]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e023      	b.n	80044a0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800445e:	d018      	beq.n	8004492 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004460:	f7fe fade 	bl	8002a20 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	429a      	cmp	r2, r3
 800446e:	d302      	bcc.n	8004476 <HAL_ETH_Transmit+0xf6>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d10d      	bne.n	8004492 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447c:	f043 0204 	orr.w	r2, r3, #4
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800448c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e006      	b.n	80044a0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	dbc3      	blt.n	8004422 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800449a:	2300      	movs	r3, #0
 800449c:	e000      	b.n	80044a0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
  }
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b088      	sub	sp, #32
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80044b2:	2300      	movs	r3, #0
 80044b4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d109      	bne.n	80044d4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	f043 0201 	orr.w	r2, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0a8      	b.n	8004626 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044da:	2b23      	cmp	r3, #35	; 0x23
 80044dc:	d001      	beq.n	80044e2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0a1      	b.n	8004626 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69fa      	ldr	r2, [r7, #28]
 80044ec:	3212      	adds	r2, #18
 80044ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f8:	f1c3 0304 	rsb	r3, r3, #4
 80044fc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80044fe:	e06a      	b.n	80045d6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800451c:	69bb      	ldr	r3, [r7, #24]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <HAL_ETH_ReadData+0x88>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800452c:	2b00      	cmp	r3, #0
 800452e:	d040      	beq.n	80045b2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00c      	beq.n	8004574 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	0c1b      	lsrs	r3, r3, #16
 8004560:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004564:	3b04      	subs	r3, #4
 8004566:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004570:	2301      	movs	r3, #1
 8004572:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	689a      	ldr	r2, [r3, #8]
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800458c:	461a      	mov	r2, r3
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	b29b      	uxth	r3, r3
 8004592:	f008 f987 	bl	800c8a4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	441a      	add	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2200      	movs	r2, #0
 80045b0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	3301      	adds	r3, #1
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2b03      	cmp	r3, #3
 80045bc:	d902      	bls.n	80045c4 <HAL_ETH_ReadData+0x11c>
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	3b04      	subs	r3, #4
 80045c2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	3212      	adds	r2, #18
 80045ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045ce:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3301      	adds	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	db06      	blt.n	80045ec <HAL_ETH_ReadData+0x144>
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d202      	bcs.n	80045ec <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d089      	beq.n	8004500 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	441a      	add	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f815 	bl	8004630 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69fa      	ldr	r2, [r7, #28]
 800460a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d108      	bne.n	8004624 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	e000      	b.n	8004626 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
}
 8004626:	4618      	mov	r0, r3
 8004628:	3720      	adds	r7, #32
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004638:	2300      	movs	r3, #0
 800463a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800463c:	2301      	movs	r3, #1
 800463e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004644:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69fa      	ldr	r2, [r7, #28]
 800464a:	3212      	adds	r2, #18
 800464c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004650:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004656:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004658:	e040      	b.n	80046dc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d112      	bne.n	8004688 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004662:	f107 030c 	add.w	r3, r7, #12
 8004666:	4618      	mov	r0, r3
 8004668:	f008 f8ec 	bl	800c844 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d102      	bne.n	8004678 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004672:	2300      	movs	r3, #0
 8004674:	74fb      	strb	r3, [r7, #19]
 8004676:	e007      	b.n	8004688 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	461a      	mov	r2, r3
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	461a      	mov	r2, r3
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004688:	7cfb      	ldrb	r3, [r7, #19]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d026      	beq.n	80046dc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <ETH_UpdateDescriptor+0xe4>)
 800469a:	605a      	str	r2, [r3, #4]
 800469c:	e003      	b.n	80046a6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80046a4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80046a6:	f3bf 8f5f 	dmb	sy
}
 80046aa:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	3301      	adds	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b03      	cmp	r3, #3
 80046c2:	d902      	bls.n	80046ca <ETH_UpdateDescriptor+0x9a>
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	3b04      	subs	r3, #4
 80046c8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	3212      	adds	r2, #18
 80046d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d4:	617b      	str	r3, [r7, #20]
      desccount--;
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	3b01      	subs	r3, #1
 80046da:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d002      	beq.n	80046e8 <ETH_UpdateDescriptor+0xb8>
 80046e2:	7cfb      	ldrb	r3, [r7, #19]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1b8      	bne.n	800465a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d00c      	beq.n	800470c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fa:	461a      	mov	r2, r3
 80046fc:	2300      	movs	r3, #0
 80046fe:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800470c:	bf00      	nop
 800470e:	3720      	adds	r7, #32
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	800045f8 	.word	0x800045f8

08004718 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
 8004724:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f003 031c 	and.w	r3, r3, #28
 8004734:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	02db      	lsls	r3, r3, #11
 800473a:	b29b      	uxth	r3, r3
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	019b      	lsls	r3, r3, #6
 8004746:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0302 	bic.w	r3, r3, #2
 8004756:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004768:	f7fe f95a 	bl	8002a20 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800476e:	e00d      	b.n	800478c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004770:	f7fe f956 	bl	8002a20 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477e:	d301      	bcc.n	8004784 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e010      	b.n	80047a6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1ec      	bne.n	8004770 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	b29b      	uxth	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b086      	sub	sp, #24
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f003 031c 	and.w	r3, r3, #28
 80047ca:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	02db      	lsls	r3, r3, #11
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	019b      	lsls	r3, r3, #6
 80047dc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f043 0302 	orr.w	r3, r3, #2
 80047ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004808:	f7fe f90a 	bl	8002a20 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800480e:	e00d      	b.n	800482c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004810:	f7fe f906 	bl	8002a20 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800481e:	d301      	bcc.n	8004824 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e009      	b.n	8004838 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1ec      	bne.n	8004810 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e0d9      	b.n	8004a08 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b00      	cmp	r3, #0
 8004860:	bf14      	ite	ne
 8004862:	2301      	movne	r3, #1
 8004864:	2300      	moveq	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	461a      	mov	r2, r3
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf0c      	ite	eq
 80048c2:	2301      	moveq	r3, #1
 80048c4:	2300      	movne	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	bf14      	ite	ne
 80048dc:	2301      	movne	r3, #1
 80048de:	2300      	moveq	r3, #0
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf0c      	ite	eq
 8004912:	2301      	moveq	r3, #1
 8004914:	2300      	movne	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	461a      	mov	r2, r3
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	bf14      	ite	ne
 8004946:	2301      	movne	r3, #1
 8004948:	2300      	moveq	r3, #0
 800494a:	b2db      	uxtb	r3, r3
 800494c:	461a      	mov	r2, r3
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf14      	ite	ne
 800496e:	2301      	movne	r3, #1
 8004970:	2300      	moveq	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	461a      	mov	r2, r3
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	bf0c      	ite	eq
 80049a4:	2301      	moveq	r3, #1
 80049a6:	2300      	movne	r3, #0
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	0c1b      	lsrs	r3, r3, #16
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bf14      	ite	ne
 80049f8:	2301      	movne	r3, #1
 80049fa:	2300      	moveq	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e00b      	b.n	8004a40 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a2e:	2b10      	cmp	r3, #16
 8004a30:	d105      	bne.n	8004a3e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f883 	bl	8004b40 <ETH_SetMACConfig>

    return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e000      	b.n	8004a40 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 031c 	bic.w	r3, r3, #28
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004a60:	f003 fbda 	bl	8008218 <HAL_RCC_GetHCLKFreq>
 8004a64:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	4a1d      	ldr	r2, [pc, #116]	; (8004ae0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d908      	bls.n	8004a80 <HAL_ETH_SetMDIOClockRange+0x38>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	4a1c      	ldr	r2, [pc, #112]	; (8004ae4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d804      	bhi.n	8004a80 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f043 0308 	orr.w	r3, r3, #8
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e027      	b.n	8004ad0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4a18      	ldr	r2, [pc, #96]	; (8004ae4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d908      	bls.n	8004a9a <HAL_ETH_SetMDIOClockRange+0x52>
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	4a17      	ldr	r2, [pc, #92]	; (8004ae8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d204      	bcs.n	8004a9a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f043 030c 	orr.w	r3, r3, #12
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e01a      	b.n	8004ad0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4a12      	ldr	r2, [pc, #72]	; (8004ae8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d303      	bcc.n	8004aaa <HAL_ETH_SetMDIOClockRange+0x62>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4a11      	ldr	r2, [pc, #68]	; (8004aec <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d911      	bls.n	8004ace <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4a0f      	ldr	r2, [pc, #60]	; (8004aec <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d908      	bls.n	8004ac4 <HAL_ETH_SetMDIOClockRange+0x7c>
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4a0e      	ldr	r2, [pc, #56]	; (8004af0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d804      	bhi.n	8004ac4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f043 0304 	orr.w	r3, r3, #4
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	e005      	b.n	8004ad0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f043 0310 	orr.w	r3, r3, #16
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	e000      	b.n	8004ad0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004ace:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	611a      	str	r2, [r3, #16]
}
 8004ad8:	bf00      	nop
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	01312cff 	.word	0x01312cff
 8004ae4:	02160ebf 	.word	0x02160ebf
 8004ae8:	03938700 	.word	0x03938700
 8004aec:	05f5e0ff 	.word	0x05f5e0ff
 8004af0:	08f0d17f 	.word	0x08f0d17f

08004af4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b16:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b24:	2001      	movs	r0, #1
 8004b26:	f7fd ff87 	bl	8002a38 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b34:	6193      	str	r3, [r2, #24]
}
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4b51      	ldr	r3, [pc, #324]	; (8004c9c <ETH_SetMACConfig+0x15c>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	7c1b      	ldrb	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d102      	bne.n	8004b68 <ETH_SetMACConfig+0x28>
 8004b62:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004b66:	e000      	b.n	8004b6a <ETH_SetMACConfig+0x2a>
 8004b68:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	7c5b      	ldrb	r3, [r3, #17]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d102      	bne.n	8004b78 <ETH_SetMACConfig+0x38>
 8004b72:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004b76:	e000      	b.n	8004b7a <ETH_SetMACConfig+0x3a>
 8004b78:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004b7a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004b80:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	7fdb      	ldrb	r3, [r3, #31]
 8004b86:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8004b88:	431a      	orrs	r2, r3
                        macconf->Speed |
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004b8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	7f92      	ldrb	r2, [r2, #30]
 8004b94:	2a00      	cmp	r2, #0
 8004b96:	d102      	bne.n	8004b9e <ETH_SetMACConfig+0x5e>
 8004b98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b9c:	e000      	b.n	8004ba0 <ETH_SetMACConfig+0x60>
 8004b9e:	2200      	movs	r2, #0
                        macconf->Speed |
 8004ba0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	7f1b      	ldrb	r3, [r3, #28]
 8004ba6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004ba8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004bae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	791b      	ldrb	r3, [r3, #4]
 8004bb4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8004bb6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004bbe:	2a00      	cmp	r2, #0
 8004bc0:	d102      	bne.n	8004bc8 <ETH_SetMACConfig+0x88>
 8004bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bc6:	e000      	b.n	8004bca <ETH_SetMACConfig+0x8a>
 8004bc8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004bca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	7bdb      	ldrb	r3, [r3, #15]
 8004bd0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004bd2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004bd8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004be0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8004be2:	4313      	orrs	r3, r2
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	f7fd ff1c 	bl	8002a38 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004c16:	4013      	ands	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004c26:	2a00      	cmp	r2, #0
 8004c28:	d101      	bne.n	8004c2e <ETH_SetMACConfig+0xee>
 8004c2a:	2280      	movs	r2, #128	; 0x80
 8004c2c:	e000      	b.n	8004c30 <ETH_SetMACConfig+0xf0>
 8004c2e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c30:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004c36:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8004c3e:	2a01      	cmp	r2, #1
 8004c40:	d101      	bne.n	8004c46 <ETH_SetMACConfig+0x106>
 8004c42:	2208      	movs	r2, #8
 8004c44:	e000      	b.n	8004c48 <ETH_SetMACConfig+0x108>
 8004c46:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004c48:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8004c50:	2a01      	cmp	r2, #1
 8004c52:	d101      	bne.n	8004c58 <ETH_SetMACConfig+0x118>
 8004c54:	2204      	movs	r2, #4
 8004c56:	e000      	b.n	8004c5a <ETH_SetMACConfig+0x11a>
 8004c58:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004c5a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8004c62:	2a01      	cmp	r2, #1
 8004c64:	d101      	bne.n	8004c6a <ETH_SetMACConfig+0x12a>
 8004c66:	2202      	movs	r2, #2
 8004c68:	e000      	b.n	8004c6c <ETH_SetMACConfig+0x12c>
 8004c6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004c84:	2001      	movs	r0, #1
 8004c86:	f7fd fed7 	bl	8002a38 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	619a      	str	r2, [r3, #24]
}
 8004c92:	bf00      	nop
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	ff20810f 	.word	0xff20810f

08004ca0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	4b3d      	ldr	r3, [pc, #244]	; (8004db0 <ETH_SetDMAConfig+0x110>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	7b1b      	ldrb	r3, [r3, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d102      	bne.n	8004ccc <ETH_SetDMAConfig+0x2c>
 8004cc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004cca:	e000      	b.n	8004cce <ETH_SetDMAConfig+0x2e>
 8004ccc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	7b5b      	ldrb	r3, [r3, #13]
 8004cd2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004cd4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	7f52      	ldrb	r2, [r2, #29]
 8004cda:	2a00      	cmp	r2, #0
 8004cdc:	d102      	bne.n	8004ce4 <ETH_SetDMAConfig+0x44>
 8004cde:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004ce2:	e000      	b.n	8004ce6 <ETH_SetDMAConfig+0x46>
 8004ce4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004ce6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	7b9b      	ldrb	r3, [r3, #14]
 8004cec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004cee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004cf4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	7f1b      	ldrb	r3, [r3, #28]
 8004cfa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004cfc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	7f9b      	ldrb	r3, [r3, #30]
 8004d02:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004d04:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004d0a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d12:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004d14:	4313      	orrs	r3, r2
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d24:	461a      	mov	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d36:	2001      	movs	r0, #1
 8004d38:	f7fd fe7e 	bl	8002a38 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d44:	461a      	mov	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	791b      	ldrb	r3, [r3, #4]
 8004d4e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d54:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004d5a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004d60:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d68:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004d6a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d70:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004d72:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004d78:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d86:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004d94:	2001      	movs	r0, #1
 8004d96:	f7fd fe4f 	bl	8002a38 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da2:	461a      	mov	r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6013      	str	r3, [r2, #0]
}
 8004da8:	bf00      	nop
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	f8de3f23 	.word	0xf8de3f23

08004db4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b0a6      	sub	sp, #152	; 0x98
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8004dde:	2301      	movs	r3, #1
 8004de0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004df0:	2300      	movs	r3, #0
 8004df2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004df4:	2300      	movs	r3, #0
 8004df6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004e04:	2300      	movs	r3, #0
 8004e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004e16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e1a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e20:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff fe86 	bl	8004b40 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004e34:	2301      	movs	r3, #1
 8004e36:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004e42:	2301      	movs	r3, #1
 8004e44:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004e50:	2300      	movs	r3, #0
 8004e52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004e56:	2300      	movs	r3, #0
 8004e58:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004e60:	2301      	movs	r3, #1
 8004e62:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004e68:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004e6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004e6e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e74:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004e80:	2300      	movs	r3, #0
 8004e82:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004e84:	f107 0308 	add.w	r3, r7, #8
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff ff08 	bl	8004ca0 <ETH_SetDMAConfig>
}
 8004e90:	bf00      	nop
 8004e92:	3798      	adds	r7, #152	; 0x98
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3305      	adds	r3, #5
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	3204      	adds	r2, #4
 8004eb0:	7812      	ldrb	r2, [r2, #0]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	4b11      	ldr	r3, [pc, #68]	; (8004f00 <ETH_MACAddressConfig+0x68>)
 8004eba:	4413      	add	r3, r2
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3303      	adds	r3, #3
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	061a      	lsls	r2, r3, #24
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3302      	adds	r3, #2
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	041b      	lsls	r3, r3, #16
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	021b      	lsls	r3, r3, #8
 8004edc:	4313      	orrs	r3, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	7812      	ldrb	r2, [r2, #0]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <ETH_MACAddressConfig+0x6c>)
 8004eea:	4413      	add	r3, r2
 8004eec:	461a      	mov	r2, r3
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6013      	str	r3, [r2, #0]
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40028040 	.word	0x40028040
 8004f04:	40028044 	.word	0x40028044

08004f08 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e03e      	b.n	8004f94 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68d9      	ldr	r1, [r3, #12]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	440b      	add	r3, r1
 8004f26:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2200      	movs	r2, #0
 8004f32:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	2200      	movs	r2, #0
 8004f38:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004f40:	68b9      	ldr	r1, [r7, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	3206      	adds	r2, #6
 8004f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d80c      	bhi.n	8004f78 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68d9      	ldr	r1, [r3, #12]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	4613      	mov	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4413      	add	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	440b      	add	r3, r1
 8004f70:	461a      	mov	r2, r3
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	60da      	str	r2, [r3, #12]
 8004f76:	e004      	b.n	8004f82 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3301      	adds	r3, #1
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	d9bd      	bls.n	8004f16 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fac:	611a      	str	r2, [r3, #16]
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e046      	b.n	8005056 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6919      	ldr	r1, [r3, #16]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	440b      	add	r3, r1
 8004fd8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005004:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800500c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	3212      	adds	r2, #18
 8005022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b02      	cmp	r3, #2
 800502a:	d80c      	bhi.n	8005046 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6919      	ldr	r1, [r3, #16]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	1c5a      	adds	r2, r3, #1
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	440b      	add	r3, r1
 800503e:	461a      	mov	r2, r3
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	60da      	str	r2, [r3, #12]
 8005044:	e004      	b.n	8005050 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	461a      	mov	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	3301      	adds	r3, #1
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2b03      	cmp	r3, #3
 800505a:	d9b5      	bls.n	8004fc8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005086:	60da      	str	r2, [r3, #12]
}
 8005088:	bf00      	nop
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005094:	b480      	push	{r7}
 8005096:	b08d      	sub	sp, #52	; 0x34
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3318      	adds	r3, #24
 80050a4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80050b2:	2300      	movs	r3, #0
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050be:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050d6:	d007      	beq.n	80050e8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050dc:	3304      	adds	r3, #4
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	4413      	add	r3, r2
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d001      	beq.n	80050ec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80050e8:	2302      	movs	r3, #2
 80050ea:	e0ff      	b.n	80052ec <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	3301      	adds	r3, #1
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	4b7d      	ldr	r3, [pc, #500]	; (80052f8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8005102:	4013      	ands	r3, r2
 8005104:	69fa      	ldr	r2, [r7, #28]
 8005106:	6852      	ldr	r2, [r2, #4]
 8005108:	431a      	orrs	r2, r3
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d008      	beq.n	800512c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	431a      	orrs	r2, r3
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d008      	beq.n	800514a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	431a      	orrs	r2, r3
 8005146:	6a3b      	ldr	r3, [r7, #32]
 8005148:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b00      	cmp	r3, #0
 8005154:	d005      	beq.n	8005162 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005156:	6a3b      	ldr	r3, [r7, #32]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800516e:	f3bf 8f5f 	dmb	sy
}
 8005172:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800517c:	6a3b      	ldr	r3, [r7, #32]
 800517e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005180:	e082      	b.n	8005288 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d006      	beq.n	80051a2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	e005      	b.n	80051ae <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	3301      	adds	r3, #1
 80051b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d902      	bls.n	80051c0 <ETH_Prepare_Tx_Descriptors+0x12c>
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	3b04      	subs	r3, #4
 80051be:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e2:	d007      	beq.n	80051f4 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	3304      	adds	r3, #4
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d029      	beq.n	8005248 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005200:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005202:	2300      	movs	r3, #0
 8005204:	62bb      	str	r3, [r7, #40]	; 0x28
 8005206:	e019      	b.n	800523c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8005208:	f3bf 8f5f 	dmb	sy
}
 800520c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800521a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521c:	3301      	adds	r3, #1
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005222:	2b03      	cmp	r3, #3
 8005224:	d902      	bls.n	800522c <ETH_Prepare_Tx_Descriptors+0x198>
 8005226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005228:	3b04      	subs	r3, #4
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005234:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005238:	3301      	adds	r3, #1
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28
 800523c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	429a      	cmp	r2, r3
 8005242:	d3e1      	bcc.n	8005208 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8005244:	2302      	movs	r3, #2
 8005246:	e051      	b.n	80052ec <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	3301      	adds	r3, #1
 800524c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	4b25      	ldr	r3, [pc, #148]	; (80052f8 <ETH_Prepare_Tx_Descriptors+0x264>)
 8005264:	4013      	ands	r3, r2
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	6852      	ldr	r2, [r2, #4]
 800526a:	431a      	orrs	r2, r3
 800526c:	6a3b      	ldr	r3, [r7, #32]
 800526e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	3301      	adds	r3, #1
 8005274:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005276:	f3bf 8f5f 	dmb	sy
}
 800527a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	2b00      	cmp	r3, #0
 800528e:	f47f af78 	bne.w	8005182 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d006      	beq.n	80052a6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	601a      	str	r2, [r3, #0]
 80052a4:	e005      	b.n	80052b2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80052ae:	6a3b      	ldr	r3, [r7, #32]
 80052b0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052c2:	6979      	ldr	r1, [r7, #20]
 80052c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c6:	3304      	adds	r3, #4
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	440b      	add	r3, r1
 80052cc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80052d4:	b672      	cpsid	i
}
 80052d6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	4413      	add	r3, r2
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80052e6:	b662      	cpsie	i
}
 80052e8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3734      	adds	r7, #52	; 0x34
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr
 80052f8:	ffffe000 	.word	0xffffe000

080052fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b089      	sub	sp, #36	; 0x24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005306:	2300      	movs	r3, #0
 8005308:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800530e:	2300      	movs	r3, #0
 8005310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	e175      	b.n	8005608 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800531c:	2201      	movs	r2, #1
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4013      	ands	r3, r2
 800532e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	429a      	cmp	r2, r3
 8005336:	f040 8164 	bne.w	8005602 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b01      	cmp	r3, #1
 8005344:	d005      	beq.n	8005352 <HAL_GPIO_Init+0x56>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d130      	bne.n	80053b4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	2203      	movs	r2, #3
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	43db      	mvns	r3, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4013      	ands	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4313      	orrs	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005388:	2201      	movs	r2, #1
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	43db      	mvns	r3, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4013      	ands	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f003 0201 	and.w	r2, r3, #1
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d017      	beq.n	80053f0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	2203      	movs	r2, #3
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	4013      	ands	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d123      	bne.n	8005444 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	08da      	lsrs	r2, r3, #3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3208      	adds	r2, #8
 8005404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	220f      	movs	r2, #15
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4013      	ands	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	4313      	orrs	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	08da      	lsrs	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3208      	adds	r2, #8
 800543e:	69b9      	ldr	r1, [r7, #24]
 8005440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	2203      	movs	r2, #3
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4013      	ands	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 0203 	and.w	r2, r3, #3
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	4313      	orrs	r3, r2
 8005470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 80be 	beq.w	8005602 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005486:	4b66      	ldr	r3, [pc, #408]	; (8005620 <HAL_GPIO_Init+0x324>)
 8005488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548a:	4a65      	ldr	r2, [pc, #404]	; (8005620 <HAL_GPIO_Init+0x324>)
 800548c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005490:	6453      	str	r3, [r2, #68]	; 0x44
 8005492:	4b63      	ldr	r3, [pc, #396]	; (8005620 <HAL_GPIO_Init+0x324>)
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800549e:	4a61      	ldr	r2, [pc, #388]	; (8005624 <HAL_GPIO_Init+0x328>)
 80054a0:	69fb      	ldr	r3, [r7, #28]
 80054a2:	089b      	lsrs	r3, r3, #2
 80054a4:	3302      	adds	r3, #2
 80054a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	220f      	movs	r2, #15
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	43db      	mvns	r3, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a58      	ldr	r2, [pc, #352]	; (8005628 <HAL_GPIO_Init+0x32c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d037      	beq.n	800553a <HAL_GPIO_Init+0x23e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a57      	ldr	r2, [pc, #348]	; (800562c <HAL_GPIO_Init+0x330>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d031      	beq.n	8005536 <HAL_GPIO_Init+0x23a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a56      	ldr	r2, [pc, #344]	; (8005630 <HAL_GPIO_Init+0x334>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d02b      	beq.n	8005532 <HAL_GPIO_Init+0x236>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a55      	ldr	r2, [pc, #340]	; (8005634 <HAL_GPIO_Init+0x338>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d025      	beq.n	800552e <HAL_GPIO_Init+0x232>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a54      	ldr	r2, [pc, #336]	; (8005638 <HAL_GPIO_Init+0x33c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01f      	beq.n	800552a <HAL_GPIO_Init+0x22e>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a53      	ldr	r2, [pc, #332]	; (800563c <HAL_GPIO_Init+0x340>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d019      	beq.n	8005526 <HAL_GPIO_Init+0x22a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a52      	ldr	r2, [pc, #328]	; (8005640 <HAL_GPIO_Init+0x344>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d013      	beq.n	8005522 <HAL_GPIO_Init+0x226>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a51      	ldr	r2, [pc, #324]	; (8005644 <HAL_GPIO_Init+0x348>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00d      	beq.n	800551e <HAL_GPIO_Init+0x222>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a50      	ldr	r2, [pc, #320]	; (8005648 <HAL_GPIO_Init+0x34c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d007      	beq.n	800551a <HAL_GPIO_Init+0x21e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a4f      	ldr	r2, [pc, #316]	; (800564c <HAL_GPIO_Init+0x350>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d101      	bne.n	8005516 <HAL_GPIO_Init+0x21a>
 8005512:	2309      	movs	r3, #9
 8005514:	e012      	b.n	800553c <HAL_GPIO_Init+0x240>
 8005516:	230a      	movs	r3, #10
 8005518:	e010      	b.n	800553c <HAL_GPIO_Init+0x240>
 800551a:	2308      	movs	r3, #8
 800551c:	e00e      	b.n	800553c <HAL_GPIO_Init+0x240>
 800551e:	2307      	movs	r3, #7
 8005520:	e00c      	b.n	800553c <HAL_GPIO_Init+0x240>
 8005522:	2306      	movs	r3, #6
 8005524:	e00a      	b.n	800553c <HAL_GPIO_Init+0x240>
 8005526:	2305      	movs	r3, #5
 8005528:	e008      	b.n	800553c <HAL_GPIO_Init+0x240>
 800552a:	2304      	movs	r3, #4
 800552c:	e006      	b.n	800553c <HAL_GPIO_Init+0x240>
 800552e:	2303      	movs	r3, #3
 8005530:	e004      	b.n	800553c <HAL_GPIO_Init+0x240>
 8005532:	2302      	movs	r3, #2
 8005534:	e002      	b.n	800553c <HAL_GPIO_Init+0x240>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <HAL_GPIO_Init+0x240>
 800553a:	2300      	movs	r3, #0
 800553c:	69fa      	ldr	r2, [r7, #28]
 800553e:	f002 0203 	and.w	r2, r2, #3
 8005542:	0092      	lsls	r2, r2, #2
 8005544:	4093      	lsls	r3, r2
 8005546:	69ba      	ldr	r2, [r7, #24]
 8005548:	4313      	orrs	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800554c:	4935      	ldr	r1, [pc, #212]	; (8005624 <HAL_GPIO_Init+0x328>)
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	089b      	lsrs	r3, r3, #2
 8005552:	3302      	adds	r3, #2
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800555a:	4b3d      	ldr	r3, [pc, #244]	; (8005650 <HAL_GPIO_Init+0x354>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	43db      	mvns	r3, r3
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	4013      	ands	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800557e:	4a34      	ldr	r2, [pc, #208]	; (8005650 <HAL_GPIO_Init+0x354>)
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005584:	4b32      	ldr	r3, [pc, #200]	; (8005650 <HAL_GPIO_Init+0x354>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	43db      	mvns	r3, r3
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	4013      	ands	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055a8:	4a29      	ldr	r2, [pc, #164]	; (8005650 <HAL_GPIO_Init+0x354>)
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80055ae:	4b28      	ldr	r3, [pc, #160]	; (8005650 <HAL_GPIO_Init+0x354>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	43db      	mvns	r3, r3
 80055b8:	69ba      	ldr	r2, [r7, #24]
 80055ba:	4013      	ands	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80055d2:	4a1f      	ldr	r2, [pc, #124]	; (8005650 <HAL_GPIO_Init+0x354>)
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80055d8:	4b1d      	ldr	r3, [pc, #116]	; (8005650 <HAL_GPIO_Init+0x354>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	43db      	mvns	r3, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	4013      	ands	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80055fc:	4a14      	ldr	r2, [pc, #80]	; (8005650 <HAL_GPIO_Init+0x354>)
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	3301      	adds	r3, #1
 8005606:	61fb      	str	r3, [r7, #28]
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	2b0f      	cmp	r3, #15
 800560c:	f67f ae86 	bls.w	800531c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	3724      	adds	r7, #36	; 0x24
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40023800 	.word	0x40023800
 8005624:	40013800 	.word	0x40013800
 8005628:	40020000 	.word	0x40020000
 800562c:	40020400 	.word	0x40020400
 8005630:	40020800 	.word	0x40020800
 8005634:	40020c00 	.word	0x40020c00
 8005638:	40021000 	.word	0x40021000
 800563c:	40021400 	.word	0x40021400
 8005640:	40021800 	.word	0x40021800
 8005644:	40021c00 	.word	0x40021c00
 8005648:	40022000 	.word	0x40022000
 800564c:	40022400 	.word	0x40022400
 8005650:	40013c00 	.word	0x40013c00

08005654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	460b      	mov	r3, r1
 800565e:	807b      	strh	r3, [r7, #2]
 8005660:	4613      	mov	r3, r2
 8005662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005664:	787b      	ldrb	r3, [r7, #1]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800566a:	887a      	ldrh	r2, [r7, #2]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005670:	e003      	b.n	800567a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005672:	887b      	ldrh	r3, [r7, #2]
 8005674:	041a      	lsls	r2, r3, #16
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	619a      	str	r2, [r3, #24]
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005686:	b480      	push	{r7}
 8005688:	b085      	sub	sp, #20
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	460b      	mov	r3, r1
 8005690:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005698:	887a      	ldrh	r2, [r7, #2]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4013      	ands	r3, r2
 800569e:	041a      	lsls	r2, r3, #16
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	43d9      	mvns	r1, r3
 80056a4:	887b      	ldrh	r3, [r7, #2]
 80056a6:	400b      	ands	r3, r1
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	619a      	str	r2, [r3, #24]
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e07f      	b.n	80057ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fc f89c 	bl	8001820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2224      	movs	r2, #36	; 0x24
 80056ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800570c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800571c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d107      	bne.n	8005736 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	689a      	ldr	r2, [r3, #8]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005732:	609a      	str	r2, [r3, #8]
 8005734:	e006      	b.n	8005744 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005742:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2b02      	cmp	r3, #2
 800574a:	d104      	bne.n	8005756 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005754:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6859      	ldr	r1, [r3, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	4b1d      	ldr	r3, [pc, #116]	; (80057d8 <HAL_I2C_Init+0x11c>)
 8005762:	430b      	orrs	r3, r1
 8005764:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005774:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	691a      	ldr	r2, [r3, #16]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69d9      	ldr	r1, [r3, #28]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1a      	ldr	r2, [r3, #32]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	430a      	orrs	r2, r1
 800579e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2220      	movs	r2, #32
 80057ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	02008000 	.word	0x02008000

080057dc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af02      	add	r7, sp, #8
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	607a      	str	r2, [r7, #4]
 80057e6:	461a      	mov	r2, r3
 80057e8:	460b      	mov	r3, r1
 80057ea:	817b      	strh	r3, [r7, #10]
 80057ec:	4613      	mov	r3, r2
 80057ee:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	f040 80cd 	bne.w	8005998 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005808:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800580c:	d101      	bne.n	8005812 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 800580e:	2302      	movs	r3, #2
 8005810:	e0c3      	b.n	800599a <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_I2C_Master_Transmit_DMA+0x44>
 800581c:	2302      	movs	r3, #2
 800581e:	e0bc      	b.n	800599a <HAL_I2C_Master_Transmit_DMA+0x1be>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2221      	movs	r2, #33	; 0x21
 800582c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2210      	movs	r2, #16
 8005834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	893a      	ldrh	r2, [r7, #8]
 8005848:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4a55      	ldr	r2, [pc, #340]	; (80059a4 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 800584e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4a55      	ldr	r2, [pc, #340]	; (80059a8 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8005854:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800585a:	b29b      	uxth	r3, r3
 800585c:	2bff      	cmp	r3, #255	; 0xff
 800585e:	d906      	bls.n	800586e <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	22ff      	movs	r2, #255	; 0xff
 8005864:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005866:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	e007      	b.n	800587e <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800587c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005882:	2b00      	cmp	r3, #0
 8005884:	d070      	beq.n	8005968 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	2b00      	cmp	r3, #0
 800588c:	d020      	beq.n	80058d0 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	4a46      	ldr	r2, [pc, #280]	; (80059ac <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8005894:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	4a45      	ldr	r2, [pc, #276]	; (80059b0 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 800589c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	2200      	movs	r2, #0
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	2200      	movs	r2, #0
 80058ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	3328      	adds	r3, #40	; 0x28
 80058ba:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80058c0:	f7fe f8b4 	bl	8003a2c <HAL_DMA_Start_IT>
 80058c4:	4603      	mov	r3, r0
 80058c6:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80058c8:	7cfb      	ldrb	r3, [r7, #19]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d138      	bne.n	8005940 <HAL_I2C_Master_Transmit_DMA+0x164>
 80058ce:	e013      	b.n	80058f8 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e050      	b.n	800599a <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	8979      	ldrh	r1, [r7, #10]
 8005900:	4b2c      	ldr	r3, [pc, #176]	; (80059b4 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f001 fd16 	bl	8007338 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005910:	b29a      	uxth	r2, r3
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005926:	2110      	movs	r1, #16
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f001 fd37 	bl	800739c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	e029      	b.n	8005994 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005954:	f043 0210 	orr.w	r2, r3, #16
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e018      	b.n	800599a <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	4a13      	ldr	r2, [pc, #76]	; (80059b8 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 800596c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005972:	b2da      	uxtb	r2, r3
 8005974:	8979      	ldrh	r1, [r7, #10]
 8005976:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f001 fcda 	bl	8007338 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800598c:	2101      	movs	r1, #1
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f001 fd04 	bl	800739c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	e000      	b.n	800599a <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005998:	2302      	movs	r3, #2
  }
}
 800599a:	4618      	mov	r0, r3
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	ffff0000 	.word	0xffff0000
 80059a8:	08006469 	.word	0x08006469
 80059ac:	080070d7 	.word	0x080070d7
 80059b0:	08007289 	.word	0x08007289
 80059b4:	80002000 	.word	0x80002000
 80059b8:	08006013 	.word	0x08006013

080059bc <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af02      	add	r7, sp, #8
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	461a      	mov	r2, r3
 80059c8:	460b      	mov	r3, r1
 80059ca:	817b      	strh	r3, [r7, #10]
 80059cc:	4613      	mov	r3, r2
 80059ce:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b20      	cmp	r3, #32
 80059da:	f040 80cd 	bne.w	8005b78 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ec:	d101      	bne.n	80059f2 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 80059ee:	2302      	movs	r3, #2
 80059f0:	e0c3      	b.n	8005b7a <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_I2C_Master_Receive_DMA+0x44>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e0bc      	b.n	8005b7a <HAL_I2C_Master_Receive_DMA+0x1be>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2222      	movs	r2, #34	; 0x22
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2210      	movs	r2, #16
 8005a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	893a      	ldrh	r2, [r7, #8]
 8005a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4a55      	ldr	r2, [pc, #340]	; (8005b84 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8005a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4a55      	ldr	r2, [pc, #340]	; (8005b88 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8005a34:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	2bff      	cmp	r3, #255	; 0xff
 8005a3e:	d906      	bls.n	8005a4e <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	22ff      	movs	r2, #255	; 0xff
 8005a44:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8005a46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e007      	b.n	8005a5e <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a5c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d070      	beq.n	8005b48 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d020      	beq.n	8005ab0 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	4a46      	ldr	r2, [pc, #280]	; (8005b8c <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005a74:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7a:	4a45      	ldr	r2, [pc, #276]	; (8005b90 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005a7c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a82:	2200      	movs	r2, #0
 8005a84:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3324      	adds	r3, #36	; 0x24
 8005a98:	4619      	mov	r1, r3
 8005a9a:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005aa0:	f7fd ffc4 	bl	8003a2c <HAL_DMA_Start_IT>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005aa8:	7cfb      	ldrb	r3, [r7, #19]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d138      	bne.n	8005b20 <HAL_I2C_Master_Receive_DMA+0x164>
 8005aae:	e013      	b.n	8005ad8 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2220      	movs	r2, #32
 8005ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e050      	b.n	8005b7a <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	8979      	ldrh	r1, [r7, #10]
 8005ae0:	4b2c      	ldr	r3, [pc, #176]	; (8005b94 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f001 fc26 	bl	8007338 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af0:	b29a      	uxth	r2, r3
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005b06:	2110      	movs	r1, #16
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f001 fc47 	bl	800739c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e029      	b.n	8005b74 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b34:	f043 0210 	orr.w	r2, r3, #16
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e018      	b.n	8005b7a <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4a13      	ldr	r2, [pc, #76]	; (8005b98 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005b4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	8979      	ldrh	r1, [r7, #10]
 8005b56:	4b0f      	ldr	r3, [pc, #60]	; (8005b94 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f001 fbea 	bl	8007338 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b6c:	2101      	movs	r1, #1
 8005b6e:	68f8      	ldr	r0, [r7, #12]
 8005b70:	f001 fc14 	bl	800739c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	e000      	b.n	8005b7a <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005b78:	2302      	movs	r3, #2
  }
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	ffff0000 	.word	0xffff0000
 8005b88:	08006469 	.word	0x08006469
 8005b8c:	080071ad 	.word	0x080071ad
 8005b90:	08007289 	.word	0x08007289
 8005b94:	80002400 	.word	0x80002400
 8005b98:	08006013 	.word	0x08006013

08005b9c <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	f040 809b 	bne.w	8005cee <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8005bbe:	88fb      	ldrh	r3, [r7, #6]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e08f      	b.n	8005cf0 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d101      	bne.n	8005bde <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e088      	b.n	8005cf0 <HAL_I2C_Slave_Transmit_DMA+0x154>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2221      	movs	r2, #33	; 0x21
 8005bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a38      	ldr	r2, [pc, #224]	; (8005cf8 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 8005c16:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4a38      	ldr	r2, [pc, #224]	; (8005cfc <HAL_I2C_Slave_Transmit_DMA+0x160>)
 8005c1c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d020      	beq.n	8005c68 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	4a35      	ldr	r2, [pc, #212]	; (8005d00 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 8005c2c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	4a34      	ldr	r2, [pc, #208]	; (8005d04 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 8005c34:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c42:	2200      	movs	r2, #0
 8005c44:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005c4a:	68b9      	ldr	r1, [r7, #8]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3328      	adds	r3, #40	; 0x28
 8005c52:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005c58:	f7fd fee8 	bl	8003a2c <HAL_DMA_Start_IT>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005c60:	7dfb      	ldrb	r3, [r7, #23]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d12f      	bne.n	8005cc6 <HAL_I2C_Slave_Transmit_DMA+0x12a>
 8005c66:	e013      	b.n	8005c90 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2228      	movs	r2, #40	; 0x28
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e02f      	b.n	8005cf0 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005c9e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ca8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f001 fb75 	bl	800739c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cc0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	e014      	b.n	8005cf0 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2228      	movs	r2, #40	; 0x28
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cda:	f043 0210 	orr.w	r2, r3, #16
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005cee:	2302      	movs	r3, #2
  }
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	ffff0000 	.word	0xffff0000
 8005cfc:	0800664f 	.word	0x0800664f
 8005d00:	0800716d 	.word	0x0800716d
 8005d04:	08007289 	.word	0x08007289

08005d08 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	f040 809b 	bne.w	8005e5a <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <HAL_I2C_Slave_Receive_DMA+0x28>
 8005d2a:	88fb      	ldrh	r3, [r7, #6]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d105      	bne.n	8005d3c <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e08f      	b.n	8005e5c <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d101      	bne.n	8005d4a <HAL_I2C_Slave_Receive_DMA+0x42>
 8005d46:	2302      	movs	r3, #2
 8005d48:	e088      	b.n	8005e5c <HAL_I2C_Slave_Receive_DMA+0x154>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2222      	movs	r2, #34	; 0x22
 8005d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	88fa      	ldrh	r2, [r7, #6]
 8005d72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4a38      	ldr	r2, [pc, #224]	; (8005e64 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005d82:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4a38      	ldr	r2, [pc, #224]	; (8005e68 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005d88:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d020      	beq.n	8005dd4 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	4a35      	ldr	r2, [pc, #212]	; (8005e6c <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005d98:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	4a34      	ldr	r2, [pc, #208]	; (8005e70 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005da0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	2200      	movs	r2, #0
 8005da8:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dae:	2200      	movs	r2, #0
 8005db0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3324      	adds	r3, #36	; 0x24
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005dc4:	f7fd fe32 	bl	8003a2c <HAL_DMA_Start_IT>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d12f      	bne.n	8005e32 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005dd2:	e013      	b.n	8005dfc <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2228      	movs	r2, #40	; 0x28
 8005dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e02f      	b.n	8005e5c <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685a      	ldr	r2, [r3, #4]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e0a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005e14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f001 fabf 	bl	800739c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e2c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e014      	b.n	8005e5c <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2228      	movs	r2, #40	; 0x28
 8005e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e46:	f043 0210 	orr.w	r2, r3, #16
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e000      	b.n	8005e5c <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005e5a:	2302      	movs	r3, #2
  }
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}
 8005e64:	ffff0000 	.word	0xffff0000
 8005e68:	0800664f 	.word	0x0800664f
 8005e6c:	08007243 	.word	0x08007243
 8005e70:	08007289 	.word	0x08007289

08005e74 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d005      	beq.n	8005ea0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	68f9      	ldr	r1, [r7, #12]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	4798      	blx	r3
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d010      	beq.n	8005eee <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	09db      	lsrs	r3, r3, #7
 8005ed0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00a      	beq.n	8005eee <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005edc:	f043 0201 	orr.w	r2, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005eec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	0a9b      	lsrs	r3, r3, #10
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d010      	beq.n	8005f1c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	09db      	lsrs	r3, r3, #7
 8005efe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f0a:	f043 0208 	orr.w	r2, r3, #8
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f1a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	0a5b      	lsrs	r3, r3, #9
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d010      	beq.n	8005f4a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	09db      	lsrs	r3, r3, #7
 8005f2c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f38:	f043 0202 	orr.w	r2, r3, #2
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f48:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f003 030b 	and.w	r3, r3, #11
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005f5a:	68f9      	ldr	r1, [r7, #12]
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 ff9f 	bl	8006ea0 <I2C_ITError>
  }
}
 8005f62:	bf00      	nop
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr

08005f7e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b083      	sub	sp, #12
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005f86:	bf00      	nop
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	70fb      	strb	r3, [r7, #3]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005fde:	bf00      	nop
 8005fe0:	370c      	adds	r7, #12
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b088      	sub	sp, #32
 8006016:	af02      	add	r7, sp, #8
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <I2C_Master_ISR_IT+0x1e>
 800602c:	2302      	movs	r3, #2
 800602e:	e114      	b.n	800625a <I2C_Master_ISR_IT+0x248>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	091b      	lsrs	r3, r3, #4
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d013      	beq.n	800606c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	091b      	lsrs	r3, r3, #4
 8006048:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00d      	beq.n	800606c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2210      	movs	r2, #16
 8006056:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800605c:	f043 0204 	orr.w	r2, r3, #4
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f001 f812 	bl	800708e <I2C_Flush_TXDR>
 800606a:	e0e1      	b.n	8006230 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	089b      	lsrs	r3, r3, #2
 8006070:	f003 0301 	and.w	r3, r3, #1
 8006074:	2b00      	cmp	r3, #0
 8006076:	d023      	beq.n	80060c0 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	089b      	lsrs	r3, r3, #2
 800607c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01d      	beq.n	80060c0 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0304 	bic.w	r3, r3, #4
 800608a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006096:	b2d2      	uxtb	r2, r2
 8006098:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	1c5a      	adds	r2, r3, #1
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a8:	3b01      	subs	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	3b01      	subs	r3, #1
 80060b8:	b29a      	uxth	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060be:	e0b7      	b.n	8006230 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	085b      	lsrs	r3, r3, #1
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d01e      	beq.n	800610a <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	085b      	lsrs	r3, r3, #1
 80060d0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d018      	beq.n	800610a <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	781a      	ldrb	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006108:	e092      	b.n	8006230 <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	09db      	lsrs	r3, r3, #7
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d05d      	beq.n	80061d2 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	099b      	lsrs	r3, r3, #6
 800611a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800611e:	2b00      	cmp	r3, #0
 8006120:	d057      	beq.n	80061d2 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	d040      	beq.n	80061ae <I2C_Master_ISR_IT+0x19c>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006130:	2b00      	cmp	r3, #0
 8006132:	d13c      	bne.n	80061ae <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006140:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006146:	b29b      	uxth	r3, r3
 8006148:	2bff      	cmp	r3, #255	; 0xff
 800614a:	d90e      	bls.n	800616a <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	22ff      	movs	r2, #255	; 0xff
 8006150:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006156:	b2da      	uxtb	r2, r3
 8006158:	8a79      	ldrh	r1, [r7, #18]
 800615a:	2300      	movs	r3, #0
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f001 f8e8 	bl	8007338 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006168:	e032      	b.n	80061d0 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616e:	b29a      	uxth	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800617c:	d00b      	beq.n	8006196 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006182:	b2da      	uxtb	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	8a79      	ldrh	r1, [r7, #18]
 800618a:	2000      	movs	r0, #0
 800618c:	9000      	str	r0, [sp, #0]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f001 f8d2 	bl	8007338 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006194:	e01c      	b.n	80061d0 <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619a:	b2da      	uxtb	r2, r3
 800619c:	8a79      	ldrh	r1, [r7, #18]
 800619e:	2300      	movs	r3, #0
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f001 f8c6 	bl	8007338 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061ac:	e010      	b.n	80061d0 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80061bc:	d003      	beq.n	80061c6 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fba9 	bl	8006916 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061c4:	e034      	b.n	8006230 <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80061c6:	2140      	movs	r1, #64	; 0x40
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 fe69 	bl	8006ea0 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80061ce:	e02f      	b.n	8006230 <I2C_Master_ISR_IT+0x21e>
 80061d0:	e02e      	b.n	8006230 <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	099b      	lsrs	r3, r3, #6
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d028      	beq.n	8006230 <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	099b      	lsrs	r3, r3, #6
 80061e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d022      	beq.n	8006230 <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d119      	bne.n	8006228 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006202:	d015      	beq.n	8006230 <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006208:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800620c:	d108      	bne.n	8006220 <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800621c:	605a      	str	r2, [r3, #4]
 800621e:	e007      	b.n	8006230 <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 fb78 	bl	8006916 <I2C_ITMasterSeqCplt>
 8006226:	e003      	b.n	8006230 <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006228:	2140      	movs	r1, #64	; 0x40
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 fe38 	bl	8006ea0 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	f003 0301 	and.w	r3, r3, #1
 8006238:	2b00      	cmp	r3, #0
 800623a:	d009      	beq.n	8006250 <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	095b      	lsrs	r3, r3, #5
 8006240:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006248:	6979      	ldr	r1, [r7, #20]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 fbfe 	bl	8006a4c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b086      	sub	sp, #24
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006272:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <I2C_Slave_ISR_IT+0x24>
 8006282:	2302      	movs	r3, #2
 8006284:	e0ec      	b.n	8006460 <I2C_Slave_ISR_IT+0x1fe>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	095b      	lsrs	r3, r3, #5
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d009      	beq.n	80062ae <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80062a6:	6939      	ldr	r1, [r7, #16]
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 fc99 	bl	8006be0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	091b      	lsrs	r3, r3, #4
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d04d      	beq.n	8006356 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	091b      	lsrs	r3, r3, #4
 80062be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d047      	beq.n	8006356 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d128      	bne.n	8006322 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b28      	cmp	r3, #40	; 0x28
 80062da:	d108      	bne.n	80062ee <I2C_Slave_ISR_IT+0x8c>
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062e2:	d104      	bne.n	80062ee <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80062e4:	6939      	ldr	r1, [r7, #16]
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fd84 	bl	8006df4 <I2C_ITListenCplt>
 80062ec:	e032      	b.n	8006354 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b29      	cmp	r3, #41	; 0x29
 80062f8:	d10e      	bne.n	8006318 <I2C_Slave_ISR_IT+0xb6>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006300:	d00a      	beq.n	8006318 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2210      	movs	r2, #16
 8006308:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f000 febf 	bl	800708e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 fb3d 	bl	8006990 <I2C_ITSlaveSeqCplt>
 8006316:	e01d      	b.n	8006354 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2210      	movs	r2, #16
 800631e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006320:	e096      	b.n	8006450 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2210      	movs	r2, #16
 8006328:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632e:	f043 0204 	orr.w	r2, r3, #4
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <I2C_Slave_ISR_IT+0xe4>
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006342:	f040 8085 	bne.w	8006450 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634a:	4619      	mov	r1, r3
 800634c:	68f8      	ldr	r0, [r7, #12]
 800634e:	f000 fda7 	bl	8006ea0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006352:	e07d      	b.n	8006450 <I2C_Slave_ISR_IT+0x1ee>
 8006354:	e07c      	b.n	8006450 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	089b      	lsrs	r3, r3, #2
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d030      	beq.n	80063c4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	089b      	lsrs	r3, r3, #2
 8006366:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800636a:	2b00      	cmp	r3, #0
 800636c:	d02a      	beq.n	80063c4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d018      	beq.n	80063aa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d14f      	bne.n	8006454 <I2C_Slave_ISR_IT+0x1f2>
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063ba:	d04b      	beq.n	8006454 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80063bc:	68f8      	ldr	r0, [r7, #12]
 80063be:	f000 fae7 	bl	8006990 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80063c2:	e047      	b.n	8006454 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	08db      	lsrs	r3, r3, #3
 80063c8:	f003 0301 	and.w	r3, r3, #1
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	08db      	lsrs	r3, r3, #3
 80063d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d004      	beq.n	80063e6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80063dc:	6939      	ldr	r1, [r7, #16]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fa15 	bl	800680e <I2C_ITAddrCplt>
 80063e4:	e037      	b.n	8006456 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	085b      	lsrs	r3, r3, #1
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d031      	beq.n	8006456 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	085b      	lsrs	r3, r3, #1
 80063f6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d02b      	beq.n	8006456 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006402:	b29b      	uxth	r3, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	d018      	beq.n	800643a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640c:	781a      	ldrb	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	1c5a      	adds	r2, r3, #1
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006422:	b29b      	uxth	r3, r3
 8006424:	3b01      	subs	r3, #1
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006430:	3b01      	subs	r3, #1
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	851a      	strh	r2, [r3, #40]	; 0x28
 8006438:	e00d      	b.n	8006456 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006440:	d002      	beq.n	8006448 <I2C_Slave_ISR_IT+0x1e6>
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d106      	bne.n	8006456 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 faa1 	bl	8006990 <I2C_ITSlaveSeqCplt>
 800644e:	e002      	b.n	8006456 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8006450:	bf00      	nop
 8006452:	e000      	b.n	8006456 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8006454:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <I2C_Master_ISR_DMA+0x1a>
 800647e:	2302      	movs	r3, #2
 8006480:	e0e1      	b.n	8006646 <I2C_Master_ISR_DMA+0x1de>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	091b      	lsrs	r3, r3, #4
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d017      	beq.n	80064c6 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	091b      	lsrs	r3, r3, #4
 800649a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d011      	beq.n	80064c6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2210      	movs	r2, #16
 80064a8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ae:	f043 0204 	orr.w	r2, r3, #4
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064b6:	2120      	movs	r1, #32
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 ff6f 	bl	800739c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fde5 	bl	800708e <I2C_Flush_TXDR>
 80064c4:	e0ba      	b.n	800663c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	09db      	lsrs	r3, r3, #7
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d072      	beq.n	80065b8 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	099b      	lsrs	r3, r3, #6
 80064d6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d06c      	beq.n	80065b8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ec:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d04e      	beq.n	8006596 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006504:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650a:	b29b      	uxth	r3, r3
 800650c:	2bff      	cmp	r3, #255	; 0xff
 800650e:	d906      	bls.n	800651e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	22ff      	movs	r2, #255	; 0xff
 8006514:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006516:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	e010      	b.n	8006540 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006530:	d003      	beq.n	800653a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	e002      	b.n	8006540 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800653a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800653e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006544:	b2da      	uxtb	r2, r3
 8006546:	8a79      	ldrh	r1, [r7, #18]
 8006548:	2300      	movs	r3, #0
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 fef2 	bl	8007338 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b22      	cmp	r3, #34	; 0x22
 8006570:	d108      	bne.n	8006584 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006580:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006582:	e05b      	b.n	800663c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006592:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006594:	e052      	b.n	800663c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065a4:	d003      	beq.n	80065ae <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 f9b5 	bl	8006916 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80065ac:	e046      	b.n	800663c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065ae:	2140      	movs	r1, #64	; 0x40
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fc75 	bl	8006ea0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80065b6:	e041      	b.n	800663c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	099b      	lsrs	r3, r3, #6
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d029      	beq.n	8006618 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	099b      	lsrs	r3, r3, #6
 80065c8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d023      	beq.n	8006618 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d119      	bne.n	800660e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065e8:	d027      	beq.n	800663a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80065f2:	d108      	bne.n	8006606 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006602:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006604:	e019      	b.n	800663a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f000 f985 	bl	8006916 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800660c:	e015      	b.n	800663a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800660e:	2140      	movs	r1, #64	; 0x40
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fc45 	bl	8006ea0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006616:	e010      	b.n	800663a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 fa0a 	bl	8006a4c <I2C_ITMasterCplt>
 8006638:	e000      	b.n	800663c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800663a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b088      	sub	sp, #32
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <I2C_Slave_ISR_DMA+0x24>
 800666e:	2302      	movs	r3, #2
 8006670:	e0c9      	b.n	8006806 <I2C_Slave_ISR_DMA+0x1b8>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d009      	beq.n	800669a <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800668e:	2b00      	cmp	r3, #0
 8006690:	d003      	beq.n	800669a <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 faa3 	bl	8006be0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	091b      	lsrs	r3, r3, #4
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 809a 	beq.w	80067dc <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	091b      	lsrs	r3, r3, #4
 80066ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 8093 	beq.w	80067dc <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0b9b      	lsrs	r3, r3, #14
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d105      	bne.n	80066ce <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	0bdb      	lsrs	r3, r3, #15
 80066c6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d07f      	beq.n	80067ce <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00d      	beq.n	80066f2 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	0bdb      	lsrs	r3, r3, #15
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d007      	beq.n	80066f2 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80066ee:	2301      	movs	r3, #1
 80066f0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00d      	beq.n	8006716 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	0b9b      	lsrs	r3, r3, #14
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d007      	beq.n	8006716 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8006712:	2301      	movs	r3, #1
 8006714:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d128      	bne.n	800676e <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b28      	cmp	r3, #40	; 0x28
 8006726:	d108      	bne.n	800673a <I2C_Slave_ISR_DMA+0xec>
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800672e:	d104      	bne.n	800673a <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 fb5e 	bl	8006df4 <I2C_ITListenCplt>
 8006738:	e048      	b.n	80067cc <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b29      	cmp	r3, #41	; 0x29
 8006744:	d10e      	bne.n	8006764 <I2C_Slave_ISR_DMA+0x116>
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800674c:	d00a      	beq.n	8006764 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2210      	movs	r2, #16
 8006754:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 fc99 	bl	800708e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f917 	bl	8006990 <I2C_ITSlaveSeqCplt>
 8006762:	e033      	b.n	80067cc <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2210      	movs	r2, #16
 800676a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800676c:	e034      	b.n	80067d8 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2210      	movs	r2, #16
 8006774:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800677a:	f043 0204 	orr.w	r2, r3, #4
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006788:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <I2C_Slave_ISR_DMA+0x14a>
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006796:	d11f      	bne.n	80067d8 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006798:	7dfb      	ldrb	r3, [r7, #23]
 800679a:	2b21      	cmp	r3, #33	; 0x21
 800679c:	d002      	beq.n	80067a4 <I2C_Slave_ISR_DMA+0x156>
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	2b29      	cmp	r3, #41	; 0x29
 80067a2:	d103      	bne.n	80067ac <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2221      	movs	r2, #33	; 0x21
 80067a8:	631a      	str	r2, [r3, #48]	; 0x30
 80067aa:	e008      	b.n	80067be <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	2b22      	cmp	r3, #34	; 0x22
 80067b0:	d002      	beq.n	80067b8 <I2C_Slave_ISR_DMA+0x16a>
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
 80067b4:	2b2a      	cmp	r3, #42	; 0x2a
 80067b6:	d102      	bne.n	80067be <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2222      	movs	r2, #34	; 0x22
 80067bc:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	4619      	mov	r1, r3
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fb6b 	bl	8006ea0 <I2C_ITError>
      if (treatdmanack == 1U)
 80067ca:	e005      	b.n	80067d8 <I2C_Slave_ISR_DMA+0x18a>
 80067cc:	e004      	b.n	80067d8 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2210      	movs	r2, #16
 80067d4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80067d6:	e011      	b.n	80067fc <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80067d8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80067da:	e00f      	b.n	80067fc <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	08db      	lsrs	r3, r3, #3
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d009      	beq.n	80067fc <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	08db      	lsrs	r3, r3, #3
 80067ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 f809 	bl	800680e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3720      	adds	r7, #32
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800681e:	b2db      	uxtb	r3, r3
 8006820:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006824:	2b28      	cmp	r3, #40	; 0x28
 8006826:	d16a      	bne.n	80068fe <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	0c1b      	lsrs	r3, r3, #16
 8006830:	b2db      	uxtb	r3, r3
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	0c1b      	lsrs	r3, r3, #16
 8006840:	b29b      	uxth	r3, r3
 8006842:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006846:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	b29b      	uxth	r3, r3
 8006850:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006854:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	b29b      	uxth	r3, r3
 800685e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006862:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	2b02      	cmp	r3, #2
 800686a:	d138      	bne.n	80068de <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800686c:	897b      	ldrh	r3, [r7, #10]
 800686e:	09db      	lsrs	r3, r3, #7
 8006870:	b29a      	uxth	r2, r3
 8006872:	89bb      	ldrh	r3, [r7, #12]
 8006874:	4053      	eors	r3, r2
 8006876:	b29b      	uxth	r3, r3
 8006878:	f003 0306 	and.w	r3, r3, #6
 800687c:	2b00      	cmp	r3, #0
 800687e:	d11c      	bne.n	80068ba <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006880:	897b      	ldrh	r3, [r7, #10]
 8006882:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006892:	2b02      	cmp	r3, #2
 8006894:	d13b      	bne.n	800690e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2208      	movs	r2, #8
 80068a2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80068ac:	89ba      	ldrh	r2, [r7, #12]
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	4619      	mov	r1, r3
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7ff fb6d 	bl	8005f92 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80068b8:	e029      	b.n	800690e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80068ba:	893b      	ldrh	r3, [r7, #8]
 80068bc:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80068be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fdd4 	bl	8007470 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80068d0:	89ba      	ldrh	r2, [r7, #12]
 80068d2:	7bfb      	ldrb	r3, [r7, #15]
 80068d4:	4619      	mov	r1, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff fb5b 	bl	8005f92 <HAL_I2C_AddrCallback>
}
 80068dc:	e017      	b.n	800690e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80068de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fdc4 	bl	8007470 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80068f0:	89ba      	ldrh	r2, [r7, #12]
 80068f2:	7bfb      	ldrb	r3, [r7, #15]
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff fb4b 	bl	8005f92 <HAL_I2C_AddrCallback>
}
 80068fc:	e007      	b.n	800690e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2208      	movs	r2, #8
 8006904:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800690e:	bf00      	nop
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b21      	cmp	r3, #33	; 0x21
 8006930:	d115      	bne.n	800695e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2211      	movs	r2, #17
 800693e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006946:	2101      	movs	r1, #1
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fd91 	bl	8007470 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f7ff fb07 	bl	8005f6a <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800695c:	e014      	b.n	8006988 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2212      	movs	r2, #18
 800696a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006972:	2102      	movs	r1, #2
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 fd7b 	bl	8007470 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f010 fa08 	bl	8016d98 <HAL_I2C_MasterRxCpltCallback>
}
 8006988:	bf00      	nop
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	0b9b      	lsrs	r3, r3, #14
 80069ac:	f003 0301 	and.w	r3, r3, #1
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	e00d      	b.n	80069e2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	0bdb      	lsrs	r3, r3, #15
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b29      	cmp	r3, #41	; 0x29
 80069ec:	d112      	bne.n	8006a14 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2228      	movs	r2, #40	; 0x28
 80069f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2221      	movs	r2, #33	; 0x21
 80069fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069fc:	2101      	movs	r1, #1
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fd36 	bl	8007470 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff fab6 	bl	8005f7e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a12:	e017      	b.n	8006a44 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a1e:	d111      	bne.n	8006a44 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2228      	movs	r2, #40	; 0x28
 8006a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2222      	movs	r2, #34	; 0x22
 8006a2c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a2e:	2102      	movs	r1, #2
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fd1d 	bl	8007470 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f010 f9c2 	bl	8016dc8 <HAL_I2C_SlaveRxCpltCallback>
}
 8006a44:	bf00      	nop
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b21      	cmp	r3, #33	; 0x21
 8006a6c:	d107      	bne.n	8006a7e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a6e:	2101      	movs	r1, #1
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fcfd 	bl	8007470 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2211      	movs	r2, #17
 8006a7a:	631a      	str	r2, [r3, #48]	; 0x30
 8006a7c:	e00c      	b.n	8006a98 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b22      	cmp	r3, #34	; 0x22
 8006a88:	d106      	bne.n	8006a98 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a8a:	2102      	movs	r1, #2
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fcef 	bl	8007470 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2212      	movs	r2, #18
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	6859      	ldr	r1, [r3, #4]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4b4d      	ldr	r3, [pc, #308]	; (8006bd8 <I2C_ITMasterCplt+0x18c>)
 8006aa4:	400b      	ands	r3, r1
 8006aa6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a4a      	ldr	r2, [pc, #296]	; (8006bdc <I2C_ITMasterCplt+0x190>)
 8006ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	091b      	lsrs	r3, r3, #4
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d009      	beq.n	8006ad4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2210      	movs	r2, #16
 8006ac6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006acc:	f043 0204 	orr.w	r2, r3, #4
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b60      	cmp	r3, #96	; 0x60
 8006ade:	d10b      	bne.n	8006af8 <I2C_ITMasterCplt+0xac>
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	089b      	lsrs	r3, r3, #2
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006af6:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fac8 	bl	800708e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b02:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b60      	cmp	r3, #96	; 0x60
 8006b0e:	d002      	beq.n	8006b16 <I2C_ITMasterCplt+0xca>
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d006      	beq.n	8006b24 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f9bf 	bl	8006ea0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b22:	e054      	b.n	8006bce <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b21      	cmp	r3, #33	; 0x21
 8006b2e:	d124      	bne.n	8006b7a <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b40      	cmp	r3, #64	; 0x40
 8006b48:	d10b      	bne.n	8006b62 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff fa31 	bl	8005fc2 <HAL_I2C_MemTxCpltCallback>
}
 8006b60:	e035      	b.n	8006bce <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7ff f9f9 	bl	8005f6a <HAL_I2C_MasterTxCpltCallback>
}
 8006b78:	e029      	b.n	8006bce <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b22      	cmp	r3, #34	; 0x22
 8006b84:	d123      	bne.n	8006bce <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b40      	cmp	r3, #64	; 0x40
 8006b9e:	d10b      	bne.n	8006bb8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff fa10 	bl	8005fd6 <HAL_I2C_MemRxCpltCallback>
}
 8006bb6:	e00a      	b.n	8006bce <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f010 f8e5 	bl	8016d98 <HAL_I2C_MasterRxCpltCallback>
}
 8006bce:	bf00      	nop
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	fe00e800 	.word	0xfe00e800
 8006bdc:	ffff0000 	.word	0xffff0000

08006be0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bfc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2220      	movs	r2, #32
 8006c04:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b21      	cmp	r3, #33	; 0x21
 8006c0a:	d002      	beq.n	8006c12 <I2C_ITSlaveCplt+0x32>
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	2b29      	cmp	r3, #41	; 0x29
 8006c10:	d108      	bne.n	8006c24 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006c12:	f248 0101 	movw	r1, #32769	; 0x8001
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fc2a 	bl	8007470 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2221      	movs	r2, #33	; 0x21
 8006c20:	631a      	str	r2, [r3, #48]	; 0x30
 8006c22:	e00d      	b.n	8006c40 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	2b22      	cmp	r3, #34	; 0x22
 8006c28:	d002      	beq.n	8006c30 <I2C_ITSlaveCplt+0x50>
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c2e:	d107      	bne.n	8006c40 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006c30:	f248 0102 	movw	r1, #32770	; 0x8002
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fc1b 	bl	8007470 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2222      	movs	r2, #34	; 0x22
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c4e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	6859      	ldr	r1, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	4b64      	ldr	r3, [pc, #400]	; (8006dec <I2C_ITSlaveCplt+0x20c>)
 8006c5c:	400b      	ands	r3, r1
 8006c5e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fa14 	bl	800708e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	0b9b      	lsrs	r3, r3, #14
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d013      	beq.n	8006c9a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c80:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d020      	beq.n	8006ccc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c98:	e018      	b.n	8006ccc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	0bdb      	lsrs	r3, r3, #15
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d012      	beq.n	8006ccc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006cb4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d006      	beq.n	8006ccc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	089b      	lsrs	r3, r3, #2
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d020      	beq.n	8006d1a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f023 0304 	bic.w	r3, r3, #4
 8006cde:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	b2d2      	uxtb	r2, r2
 8006cec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00c      	beq.n	8006d1a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d28:	f043 0204 	orr.w	r2, r3, #4
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d010      	beq.n	8006d68 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f8a7 	bl	8006ea0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b28      	cmp	r3, #40	; 0x28
 8006d5c:	d141      	bne.n	8006de2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006d5e:	6979      	ldr	r1, [r7, #20]
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f847 	bl	8006df4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006d66:	e03c      	b.n	8006de2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d70:	d014      	beq.n	8006d9c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff fe0c 	bl	8006990 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a1d      	ldr	r2, [pc, #116]	; (8006df0 <I2C_ITSlaveCplt+0x210>)
 8006d7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff f90a 	bl	8005fae <HAL_I2C_ListenCpltCallback>
}
 8006d9a:	e022      	b.n	8006de2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b22      	cmp	r3, #34	; 0x22
 8006da6:	d10e      	bne.n	8006dc6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f010 f802 	bl	8016dc8 <HAL_I2C_SlaveRxCpltCallback>
}
 8006dc4:	e00d      	b.n	8006de2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff f8ce 	bl	8005f7e <HAL_I2C_SlaveTxCpltCallback>
}
 8006de2:	bf00      	nop
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	fe00e800 	.word	0xfe00e800
 8006df0:	ffff0000 	.word	0xffff0000

08006df4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a26      	ldr	r2, [pc, #152]	; (8006e9c <I2C_ITListenCplt+0xa8>)
 8006e02:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	089b      	lsrs	r3, r3, #2
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d022      	beq.n	8006e72 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d012      	beq.n	8006e72 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6a:	f043 0204 	orr.w	r2, r3, #4
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006e72:	f248 0103 	movw	r1, #32771	; 0x8003
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fafa 	bl	8007470 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2210      	movs	r2, #16
 8006e82:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff f88e 	bl	8005fae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	ffff0000 	.word	0xffff0000

08006ea0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a5d      	ldr	r2, [pc, #372]	; (8007034 <I2C_ITError+0x194>)
 8006ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	431a      	orrs	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	2b28      	cmp	r3, #40	; 0x28
 8006ed6:	d005      	beq.n	8006ee4 <I2C_ITError+0x44>
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
 8006eda:	2b29      	cmp	r3, #41	; 0x29
 8006edc:	d002      	beq.n	8006ee4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
 8006ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee2:	d10b      	bne.n	8006efc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ee4:	2103      	movs	r1, #3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 fac2 	bl	8007470 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2228      	movs	r2, #40	; 0x28
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a50      	ldr	r2, [pc, #320]	; (8007038 <I2C_ITError+0x198>)
 8006ef8:	635a      	str	r2, [r3, #52]	; 0x34
 8006efa:	e011      	b.n	8006f20 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006efc:	f248 0103 	movw	r1, #32771	; 0x8003
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fab5 	bl	8007470 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b60      	cmp	r3, #96	; 0x60
 8006f10:	d003      	beq.n	8006f1a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2220      	movs	r2, #32
 8006f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f24:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d039      	beq.n	8006fa2 <I2C_ITError+0x102>
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b11      	cmp	r3, #17
 8006f32:	d002      	beq.n	8006f3a <I2C_ITError+0x9a>
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	2b21      	cmp	r3, #33	; 0x21
 8006f38:	d133      	bne.n	8006fa2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f48:	d107      	bne.n	8006f5a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f58:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fc ffe0 	bl	8003f24 <HAL_DMA_GetState>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d017      	beq.n	8006f9a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	4a33      	ldr	r2, [pc, #204]	; (800703c <I2C_ITError+0x19c>)
 8006f70:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fc fe24 	bl	8003bcc <HAL_DMA_Abort_IT>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d04d      	beq.n	8007026 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f94:	4610      	mov	r0, r2
 8006f96:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006f98:	e045      	b.n	8007026 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f850 	bl	8007040 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006fa0:	e041      	b.n	8007026 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d039      	beq.n	800701e <I2C_ITError+0x17e>
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2b12      	cmp	r3, #18
 8006fae:	d002      	beq.n	8006fb6 <I2C_ITError+0x116>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b22      	cmp	r3, #34	; 0x22
 8006fb4:	d133      	bne.n	800701e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fc4:	d107      	bne.n	8006fd6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fd4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fc ffa2 	bl	8003f24 <HAL_DMA_GetState>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d017      	beq.n	8007016 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fea:	4a14      	ldr	r2, [pc, #80]	; (800703c <I2C_ITError+0x19c>)
 8006fec:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fc fde6 	bl	8003bcc <HAL_DMA_Abort_IT>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d011      	beq.n	800702a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800700a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007014:	e009      	b.n	800702a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f812 	bl	8007040 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800701c:	e005      	b.n	800702a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f80e 	bl	8007040 <I2C_TreatErrorCallback>
  }
}
 8007024:	e002      	b.n	800702c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007026:	bf00      	nop
 8007028:	e000      	b.n	800702c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800702a:	bf00      	nop
}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	ffff0000 	.word	0xffff0000
 8007038:	08006263 	.word	0x08006263
 800703c:	080072fd 	.word	0x080072fd

08007040 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b60      	cmp	r3, #96	; 0x60
 8007052:	d10e      	bne.n	8007072 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2220      	movs	r2, #32
 8007058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fe ffc7 	bl	8005ffe <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007070:	e009      	b.n	8007086 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7fe ffb2 	bl	8005fea <HAL_I2C_ErrorCallback>
}
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800708e:	b480      	push	{r7}
 8007090:	b083      	sub	sp, #12
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d103      	bne.n	80070ac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2200      	movs	r2, #0
 80070aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d007      	beq.n	80070ca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	699a      	ldr	r2, [r3, #24]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0201 	orr.w	r2, r2, #1
 80070c8:	619a      	str	r2, [r3, #24]
  }
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b084      	sub	sp, #16
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070f2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d104      	bne.n	8007108 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80070fe:	2120      	movs	r1, #32
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 f94b 	bl	800739c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007106:	e02d      	b.n	8007164 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007110:	441a      	add	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711a:	b29b      	uxth	r3, r3
 800711c:	2bff      	cmp	r3, #255	; 0xff
 800711e:	d903      	bls.n	8007128 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	22ff      	movs	r2, #255	; 0xff
 8007124:	851a      	strh	r2, [r3, #40]	; 0x28
 8007126:	e004      	b.n	8007132 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713a:	4619      	mov	r1, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3328      	adds	r3, #40	; 0x28
 8007142:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007148:	f7fc fc70 	bl	8003a2c <HAL_DMA_Start_IT>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d004      	beq.n	800715c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007152:	2110      	movs	r1, #16
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f7ff fea3 	bl	8006ea0 <I2C_ITError>
}
 800715a:	e003      	b.n	8007164 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800715c:	2140      	movs	r1, #64	; 0x40
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f91c 	bl	800739c <I2C_Enable_IRQ>
}
 8007164:	bf00      	nop
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007186:	d002      	beq.n	800718e <I2C_DMASlaveTransmitCplt+0x22>
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10a      	bne.n	80071a4 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800719c:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f7ff fbf6 	bl	8006990 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	681a      	ldr	r2, [r3, #0]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071c8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80071d4:	2120      	movs	r1, #32
 80071d6:	68f8      	ldr	r0, [r7, #12]
 80071d8:	f000 f8e0 	bl	800739c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80071dc:	e02d      	b.n	800723a <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80071e6:	441a      	add	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	2bff      	cmp	r3, #255	; 0xff
 80071f4:	d903      	bls.n	80071fe <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	22ff      	movs	r2, #255	; 0xff
 80071fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80071fc:	e004      	b.n	8007208 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007202:	b29a      	uxth	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3324      	adds	r3, #36	; 0x24
 8007212:	4619      	mov	r1, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007218:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800721e:	f7fc fc05 	bl	8003a2c <HAL_DMA_Start_IT>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d004      	beq.n	8007232 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007228:	2110      	movs	r1, #16
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f7ff fe38 	bl	8006ea0 <I2C_ITError>
}
 8007230:	e003      	b.n	800723a <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007232:	2140      	movs	r1, #64	; 0x40
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f8b1 	bl	800739c <I2C_Enable_IRQ>
}
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10e      	bne.n	8007280 <I2C_DMASlaveReceiveCplt+0x3e>
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007268:	d00a      	beq.n	8007280 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007278:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f7ff fb88 	bl	8006990 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007280:	bf00      	nop
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007298:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80072ae:	2301      	movs	r3, #1
 80072b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80072c6:	2301      	movs	r3, #1
 80072c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fc fe38 	bl	8003f40 <HAL_DMA_GetError>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d00e      	beq.n	80072f4 <I2C_DMAError+0x6c>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00b      	beq.n	80072f4 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072ea:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80072ec:	2110      	movs	r1, #16
 80072ee:	68b8      	ldr	r0, [r7, #8]
 80072f0:	f7ff fdd6 	bl	8006ea0 <I2C_ITError>
  }
}
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007308:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	2b00      	cmp	r3, #0
 8007310:	d003      	beq.n	800731a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007316:	2200      	movs	r2, #0
 8007318:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007326:	2200      	movs	r2, #0
 8007328:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f7ff fe88 	bl	8007040 <I2C_TreatErrorCallback>
}
 8007330:	bf00      	nop
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	607b      	str	r3, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	817b      	strh	r3, [r7, #10]
 8007346:	4613      	mov	r3, r2
 8007348:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800734a:	897b      	ldrh	r3, [r7, #10]
 800734c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007350:	7a7b      	ldrb	r3, [r7, #9]
 8007352:	041b      	lsls	r3, r3, #16
 8007354:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007358:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	4313      	orrs	r3, r2
 8007362:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007366:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	0d5b      	lsrs	r3, r3, #21
 8007372:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007376:	4b08      	ldr	r3, [pc, #32]	; (8007398 <I2C_TransferConfig+0x60>)
 8007378:	430b      	orrs	r3, r1
 800737a:	43db      	mvns	r3, r3
 800737c:	ea02 0103 	and.w	r1, r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	03ff63ff 	.word	0x03ff63ff

0800739c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b0:	4a2d      	ldr	r2, [pc, #180]	; (8007468 <I2C_Enable_IRQ+0xcc>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d004      	beq.n	80073c0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80073ba:	4a2c      	ldr	r2, [pc, #176]	; (800746c <I2C_Enable_IRQ+0xd0>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d11d      	bne.n	80073fc <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80073c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	da03      	bge.n	80073d0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80073ce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80073d0:	887b      	ldrh	r3, [r7, #2]
 80073d2:	2b10      	cmp	r3, #16
 80073d4:	d103      	bne.n	80073de <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80073dc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80073de:	887b      	ldrh	r3, [r7, #2]
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	d103      	bne.n	80073ec <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80073ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80073ec:	887b      	ldrh	r3, [r7, #2]
 80073ee:	2b40      	cmp	r3, #64	; 0x40
 80073f0:	d12c      	bne.n	800744c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073f8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80073fa:	e027      	b.n	800744c <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80073fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007400:	2b00      	cmp	r3, #0
 8007402:	da03      	bge.n	800740c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800740a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800740c:	887b      	ldrh	r3, [r7, #2]
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800741c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800741e:	887b      	ldrh	r3, [r7, #2]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	2b00      	cmp	r3, #0
 8007426:	d003      	beq.n	8007430 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800742e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007430:	887b      	ldrh	r3, [r7, #2]
 8007432:	2b10      	cmp	r3, #16
 8007434:	d103      	bne.n	800743e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800743c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800743e:	887b      	ldrh	r3, [r7, #2]
 8007440:	2b20      	cmp	r3, #32
 8007442:	d103      	bne.n	800744c <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f043 0320 	orr.w	r3, r3, #32
 800744a:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6819      	ldr	r1, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	430a      	orrs	r2, r1
 800745a:	601a      	str	r2, [r3, #0]
}
 800745c:	bf00      	nop
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	08006469 	.word	0x08006469
 800746c:	0800664f 	.word	0x0800664f

08007470 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
 8007478:	460b      	mov	r3, r1
 800747a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007480:	887b      	ldrh	r3, [r7, #2]
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00f      	beq.n	80074aa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007490:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007498:	b2db      	uxtb	r3, r3
 800749a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800749e:	2b28      	cmp	r3, #40	; 0x28
 80074a0:	d003      	beq.n	80074aa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80074a8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80074aa:	887b      	ldrh	r3, [r7, #2]
 80074ac:	f003 0302 	and.w	r3, r3, #2
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00f      	beq.n	80074d4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80074ba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80074c8:	2b28      	cmp	r3, #40	; 0x28
 80074ca:	d003      	beq.n	80074d4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80074d2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80074d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	da03      	bge.n	80074e4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80074e2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80074e4:	887b      	ldrh	r3, [r7, #2]
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d103      	bne.n	80074f2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80074f0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80074f2:	887b      	ldrh	r3, [r7, #2]
 80074f4:	2b20      	cmp	r3, #32
 80074f6:	d103      	bne.n	8007500 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f043 0320 	orr.w	r3, r3, #32
 80074fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007500:	887b      	ldrh	r3, [r7, #2]
 8007502:	2b40      	cmp	r3, #64	; 0x40
 8007504:	d103      	bne.n	800750e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800750c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6819      	ldr	r1, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	43da      	mvns	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	400a      	ands	r2, r1
 800751e:	601a      	str	r2, [r3, #0]
}
 8007520:	bf00      	nop
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b20      	cmp	r3, #32
 8007540:	d138      	bne.n	80075b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007548:	2b01      	cmp	r3, #1
 800754a:	d101      	bne.n	8007550 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800754c:	2302      	movs	r3, #2
 800754e:	e032      	b.n	80075b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2224      	movs	r2, #36	; 0x24
 800755c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0201 	bic.w	r2, r2, #1
 800756e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800757e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6819      	ldr	r1, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f042 0201 	orr.w	r2, r2, #1
 800759e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2220      	movs	r2, #32
 80075a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	e000      	b.n	80075b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80075b4:	2302      	movs	r3, #2
  }
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b085      	sub	sp, #20
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
 80075ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	2b20      	cmp	r3, #32
 80075d6:	d139      	bne.n	800764c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d101      	bne.n	80075e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80075e2:	2302      	movs	r3, #2
 80075e4:	e033      	b.n	800764e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2224      	movs	r2, #36	; 0x24
 80075f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f022 0201 	bic.w	r2, r2, #1
 8007604:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007614:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	021b      	lsls	r3, r3, #8
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	4313      	orrs	r3, r2
 800761e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0201 	orr.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2220      	movs	r2, #32
 800763c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	e000      	b.n	800764e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800764c:	2302      	movs	r3, #2
  }
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800765a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800765c:	b08f      	sub	sp, #60	; 0x3c
 800765e:	af0a      	add	r7, sp, #40	; 0x28
 8007660:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e116      	b.n	800789a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	d106      	bne.n	800768c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7fa fdc2 	bl	8002210 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2203      	movs	r2, #3
 8007690:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769c:	2b00      	cmp	r3, #0
 800769e:	d102      	bne.n	80076a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f004 f990 	bl	800b9d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	603b      	str	r3, [r7, #0]
 80076b6:	687e      	ldr	r6, [r7, #4]
 80076b8:	466d      	mov	r5, sp
 80076ba:	f106 0410 	add.w	r4, r6, #16
 80076be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80076ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80076ce:	1d33      	adds	r3, r6, #4
 80076d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80076d2:	6838      	ldr	r0, [r7, #0]
 80076d4:	f004 f924 	bl	800b920 <USB_CoreInit>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e0d7      	b.n	800789a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2100      	movs	r1, #0
 80076f0:	4618      	mov	r0, r3
 80076f2:	f004 f97e 	bl	800b9f2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]
 80076fa:	e04a      	b.n	8007792 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80076fc:	7bfa      	ldrb	r2, [r7, #15]
 80076fe:	6879      	ldr	r1, [r7, #4]
 8007700:	4613      	mov	r3, r2
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4413      	add	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	440b      	add	r3, r1
 800770a:	333d      	adds	r3, #61	; 0x3d
 800770c:	2201      	movs	r2, #1
 800770e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007710:	7bfa      	ldrb	r2, [r7, #15]
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	4613      	mov	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	440b      	add	r3, r1
 800771e:	333c      	adds	r3, #60	; 0x3c
 8007720:	7bfa      	ldrb	r2, [r7, #15]
 8007722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007724:	7bfa      	ldrb	r2, [r7, #15]
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	b298      	uxth	r0, r3
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	4613      	mov	r3, r2
 800772e:	00db      	lsls	r3, r3, #3
 8007730:	4413      	add	r3, r2
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	440b      	add	r3, r1
 8007736:	3344      	adds	r3, #68	; 0x44
 8007738:	4602      	mov	r2, r0
 800773a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800773c:	7bfa      	ldrb	r2, [r7, #15]
 800773e:	6879      	ldr	r1, [r7, #4]
 8007740:	4613      	mov	r3, r2
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	4413      	add	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	440b      	add	r3, r1
 800774a:	3340      	adds	r3, #64	; 0x40
 800774c:	2200      	movs	r2, #0
 800774e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007750:	7bfa      	ldrb	r2, [r7, #15]
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	4413      	add	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	440b      	add	r3, r1
 800775e:	3348      	adds	r3, #72	; 0x48
 8007760:	2200      	movs	r2, #0
 8007762:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007764:	7bfa      	ldrb	r2, [r7, #15]
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	4613      	mov	r3, r2
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	4413      	add	r3, r2
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	440b      	add	r3, r1
 8007772:	334c      	adds	r3, #76	; 0x4c
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007778:	7bfa      	ldrb	r2, [r7, #15]
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	3354      	adds	r3, #84	; 0x54
 8007788:	2200      	movs	r2, #0
 800778a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800778c:	7bfb      	ldrb	r3, [r7, #15]
 800778e:	3301      	adds	r3, #1
 8007790:	73fb      	strb	r3, [r7, #15]
 8007792:	7bfa      	ldrb	r2, [r7, #15]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	429a      	cmp	r2, r3
 800779a:	d3af      	bcc.n	80076fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800779c:	2300      	movs	r3, #0
 800779e:	73fb      	strb	r3, [r7, #15]
 80077a0:	e044      	b.n	800782c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80077a2:	7bfa      	ldrb	r2, [r7, #15]
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	4613      	mov	r3, r2
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	440b      	add	r3, r1
 80077b0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80077b4:	2200      	movs	r2, #0
 80077b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80077b8:	7bfa      	ldrb	r2, [r7, #15]
 80077ba:	6879      	ldr	r1, [r7, #4]
 80077bc:	4613      	mov	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80077ca:	7bfa      	ldrb	r2, [r7, #15]
 80077cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80077ce:	7bfa      	ldrb	r2, [r7, #15]
 80077d0:	6879      	ldr	r1, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80077e0:	2200      	movs	r2, #0
 80077e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80077e4:	7bfa      	ldrb	r2, [r7, #15]
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	4613      	mov	r3, r2
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	440b      	add	r3, r1
 80077f2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80077fa:	7bfa      	ldrb	r2, [r7, #15]
 80077fc:	6879      	ldr	r1, [r7, #4]
 80077fe:	4613      	mov	r3, r2
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	440b      	add	r3, r1
 8007808:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007810:	7bfa      	ldrb	r2, [r7, #15]
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	4613      	mov	r3, r2
 8007816:	00db      	lsls	r3, r3, #3
 8007818:	4413      	add	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	440b      	add	r3, r1
 800781e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007822:	2200      	movs	r2, #0
 8007824:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007826:	7bfb      	ldrb	r3, [r7, #15]
 8007828:	3301      	adds	r3, #1
 800782a:	73fb      	strb	r3, [r7, #15]
 800782c:	7bfa      	ldrb	r2, [r7, #15]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	429a      	cmp	r2, r3
 8007834:	d3b5      	bcc.n	80077a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	687e      	ldr	r6, [r7, #4]
 800783e:	466d      	mov	r5, sp
 8007840:	f106 0410 	add.w	r4, r6, #16
 8007844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800784a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800784c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007850:	e885 0003 	stmia.w	r5, {r0, r1}
 8007854:	1d33      	adds	r3, r6, #4
 8007856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007858:	6838      	ldr	r0, [r7, #0]
 800785a:	f004 f917 	bl	800ba8c <USB_DevInit>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e014      	b.n	800789a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	2b01      	cmp	r3, #1
 8007886:	d102      	bne.n	800788e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f80b 	bl	80078a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4618      	mov	r0, r3
 8007894:	f004 fad5 	bl	800be42 <USB_DevDisconnect>

  return HAL_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080078a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078d2:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80078da:	2300      	movs	r3, #0
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	10000003 	.word	0x10000003

080078ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80078f4:	2300      	movs	r3, #0
 80078f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e291      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 8087 	beq.w	8007a1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007910:	4b96      	ldr	r3, [pc, #600]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 030c 	and.w	r3, r3, #12
 8007918:	2b04      	cmp	r3, #4
 800791a:	d00c      	beq.n	8007936 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800791c:	4b93      	ldr	r3, [pc, #588]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 030c 	and.w	r3, r3, #12
 8007924:	2b08      	cmp	r3, #8
 8007926:	d112      	bne.n	800794e <HAL_RCC_OscConfig+0x62>
 8007928:	4b90      	ldr	r3, [pc, #576]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007934:	d10b      	bne.n	800794e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007936:	4b8d      	ldr	r3, [pc, #564]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d06c      	beq.n	8007a1c <HAL_RCC_OscConfig+0x130>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d168      	bne.n	8007a1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e26b      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007956:	d106      	bne.n	8007966 <HAL_RCC_OscConfig+0x7a>
 8007958:	4b84      	ldr	r3, [pc, #528]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a83      	ldr	r2, [pc, #524]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 800795e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007962:	6013      	str	r3, [r2, #0]
 8007964:	e02e      	b.n	80079c4 <HAL_RCC_OscConfig+0xd8>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10c      	bne.n	8007988 <HAL_RCC_OscConfig+0x9c>
 800796e:	4b7f      	ldr	r3, [pc, #508]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a7e      	ldr	r2, [pc, #504]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	4b7c      	ldr	r3, [pc, #496]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a7b      	ldr	r2, [pc, #492]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007980:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	e01d      	b.n	80079c4 <HAL_RCC_OscConfig+0xd8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007990:	d10c      	bne.n	80079ac <HAL_RCC_OscConfig+0xc0>
 8007992:	4b76      	ldr	r3, [pc, #472]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a75      	ldr	r2, [pc, #468]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007998:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	4b73      	ldr	r3, [pc, #460]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a72      	ldr	r2, [pc, #456]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e00b      	b.n	80079c4 <HAL_RCC_OscConfig+0xd8>
 80079ac:	4b6f      	ldr	r3, [pc, #444]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a6e      	ldr	r2, [pc, #440]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	4b6c      	ldr	r3, [pc, #432]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a6b      	ldr	r2, [pc, #428]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d013      	beq.n	80079f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079cc:	f7fb f828 	bl	8002a20 <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079d4:	f7fb f824 	bl	8002a20 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b64      	cmp	r3, #100	; 0x64
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e21f      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079e6:	4b61      	ldr	r3, [pc, #388]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0f0      	beq.n	80079d4 <HAL_RCC_OscConfig+0xe8>
 80079f2:	e014      	b.n	8007a1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f4:	f7fb f814 	bl	8002a20 <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079fc:	f7fb f810 	bl	8002a20 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b64      	cmp	r3, #100	; 0x64
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e20b      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a0e:	4b57      	ldr	r3, [pc, #348]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1f0      	bne.n	80079fc <HAL_RCC_OscConfig+0x110>
 8007a1a:	e000      	b.n	8007a1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d069      	beq.n	8007afe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a2a:	4b50      	ldr	r3, [pc, #320]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f003 030c 	and.w	r3, r3, #12
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00b      	beq.n	8007a4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a36:	4b4d      	ldr	r3, [pc, #308]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 030c 	and.w	r3, r3, #12
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d11c      	bne.n	8007a7c <HAL_RCC_OscConfig+0x190>
 8007a42:	4b4a      	ldr	r3, [pc, #296]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d116      	bne.n	8007a7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a4e:	4b47      	ldr	r3, [pc, #284]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0302 	and.w	r3, r3, #2
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d005      	beq.n	8007a66 <HAL_RCC_OscConfig+0x17a>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d001      	beq.n	8007a66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e1df      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a66:	4b41      	ldr	r3, [pc, #260]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	493d      	ldr	r1, [pc, #244]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a76:	4313      	orrs	r3, r2
 8007a78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a7a:	e040      	b.n	8007afe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d023      	beq.n	8007acc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a84:	4b39      	ldr	r3, [pc, #228]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a38      	ldr	r2, [pc, #224]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007a8a:	f043 0301 	orr.w	r3, r3, #1
 8007a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a90:	f7fa ffc6 	bl	8002a20 <HAL_GetTick>
 8007a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a96:	e008      	b.n	8007aaa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a98:	f7fa ffc2 	bl	8002a20 <HAL_GetTick>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	d901      	bls.n	8007aaa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e1bd      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aaa:	4b30      	ldr	r3, [pc, #192]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d0f0      	beq.n	8007a98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ab6:	4b2d      	ldr	r3, [pc, #180]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	4929      	ldr	r1, [pc, #164]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	600b      	str	r3, [r1, #0]
 8007aca:	e018      	b.n	8007afe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007acc:	4b27      	ldr	r3, [pc, #156]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a26      	ldr	r2, [pc, #152]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007ad2:	f023 0301 	bic.w	r3, r3, #1
 8007ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad8:	f7fa ffa2 	bl	8002a20 <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ade:	e008      	b.n	8007af2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ae0:	f7fa ff9e 	bl	8002a20 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d901      	bls.n	8007af2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e199      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007af2:	4b1e      	ldr	r3, [pc, #120]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1f0      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0308 	and.w	r3, r3, #8
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d038      	beq.n	8007b7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d019      	beq.n	8007b46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b12:	4b16      	ldr	r3, [pc, #88]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b16:	4a15      	ldr	r2, [pc, #84]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007b18:	f043 0301 	orr.w	r3, r3, #1
 8007b1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b1e:	f7fa ff7f 	bl	8002a20 <HAL_GetTick>
 8007b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b24:	e008      	b.n	8007b38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b26:	f7fa ff7b 	bl	8002a20 <HAL_GetTick>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	2b02      	cmp	r3, #2
 8007b32:	d901      	bls.n	8007b38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e176      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b38:	4b0c      	ldr	r3, [pc, #48]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d0f0      	beq.n	8007b26 <HAL_RCC_OscConfig+0x23a>
 8007b44:	e01a      	b.n	8007b7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b46:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b4a:	4a08      	ldr	r2, [pc, #32]	; (8007b6c <HAL_RCC_OscConfig+0x280>)
 8007b4c:	f023 0301 	bic.w	r3, r3, #1
 8007b50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b52:	f7fa ff65 	bl	8002a20 <HAL_GetTick>
 8007b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b58:	e00a      	b.n	8007b70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b5a:	f7fa ff61 	bl	8002a20 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d903      	bls.n	8007b70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e15c      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
 8007b6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b70:	4b91      	ldr	r3, [pc, #580]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1ee      	bne.n	8007b5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0304 	and.w	r3, r3, #4
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 80a4 	beq.w	8007cd2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b8a:	4b8b      	ldr	r3, [pc, #556]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10d      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b96:	4b88      	ldr	r3, [pc, #544]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	4a87      	ldr	r2, [pc, #540]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8007ba2:	4b85      	ldr	r3, [pc, #532]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007baa:	60bb      	str	r3, [r7, #8]
 8007bac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bb2:	4b82      	ldr	r3, [pc, #520]	; (8007dbc <HAL_RCC_OscConfig+0x4d0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d118      	bne.n	8007bf0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007bbe:	4b7f      	ldr	r3, [pc, #508]	; (8007dbc <HAL_RCC_OscConfig+0x4d0>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a7e      	ldr	r2, [pc, #504]	; (8007dbc <HAL_RCC_OscConfig+0x4d0>)
 8007bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bca:	f7fa ff29 	bl	8002a20 <HAL_GetTick>
 8007bce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bd0:	e008      	b.n	8007be4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bd2:	f7fa ff25 	bl	8002a20 <HAL_GetTick>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	2b64      	cmp	r3, #100	; 0x64
 8007bde:	d901      	bls.n	8007be4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007be0:	2303      	movs	r3, #3
 8007be2:	e120      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007be4:	4b75      	ldr	r3, [pc, #468]	; (8007dbc <HAL_RCC_OscConfig+0x4d0>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d0f0      	beq.n	8007bd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d106      	bne.n	8007c06 <HAL_RCC_OscConfig+0x31a>
 8007bf8:	4b6f      	ldr	r3, [pc, #444]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfc:	4a6e      	ldr	r2, [pc, #440]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007bfe:	f043 0301 	orr.w	r3, r3, #1
 8007c02:	6713      	str	r3, [r2, #112]	; 0x70
 8007c04:	e02d      	b.n	8007c62 <HAL_RCC_OscConfig+0x376>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10c      	bne.n	8007c28 <HAL_RCC_OscConfig+0x33c>
 8007c0e:	4b6a      	ldr	r3, [pc, #424]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c12:	4a69      	ldr	r2, [pc, #420]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c14:	f023 0301 	bic.w	r3, r3, #1
 8007c18:	6713      	str	r3, [r2, #112]	; 0x70
 8007c1a:	4b67      	ldr	r3, [pc, #412]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c1e:	4a66      	ldr	r2, [pc, #408]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c20:	f023 0304 	bic.w	r3, r3, #4
 8007c24:	6713      	str	r3, [r2, #112]	; 0x70
 8007c26:	e01c      	b.n	8007c62 <HAL_RCC_OscConfig+0x376>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2b05      	cmp	r3, #5
 8007c2e:	d10c      	bne.n	8007c4a <HAL_RCC_OscConfig+0x35e>
 8007c30:	4b61      	ldr	r3, [pc, #388]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c34:	4a60      	ldr	r2, [pc, #384]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c36:	f043 0304 	orr.w	r3, r3, #4
 8007c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c3c:	4b5e      	ldr	r3, [pc, #376]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c40:	4a5d      	ldr	r2, [pc, #372]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	6713      	str	r3, [r2, #112]	; 0x70
 8007c48:	e00b      	b.n	8007c62 <HAL_RCC_OscConfig+0x376>
 8007c4a:	4b5b      	ldr	r3, [pc, #364]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4e:	4a5a      	ldr	r2, [pc, #360]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c50:	f023 0301 	bic.w	r3, r3, #1
 8007c54:	6713      	str	r3, [r2, #112]	; 0x70
 8007c56:	4b58      	ldr	r3, [pc, #352]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5a:	4a57      	ldr	r2, [pc, #348]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c5c:	f023 0304 	bic.w	r3, r3, #4
 8007c60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d015      	beq.n	8007c96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c6a:	f7fa fed9 	bl	8002a20 <HAL_GetTick>
 8007c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c70:	e00a      	b.n	8007c88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c72:	f7fa fed5 	bl	8002a20 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d901      	bls.n	8007c88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e0ce      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c88:	4b4b      	ldr	r3, [pc, #300]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d0ee      	beq.n	8007c72 <HAL_RCC_OscConfig+0x386>
 8007c94:	e014      	b.n	8007cc0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c96:	f7fa fec3 	bl	8002a20 <HAL_GetTick>
 8007c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c9c:	e00a      	b.n	8007cb4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c9e:	f7fa febf 	bl	8002a20 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d901      	bls.n	8007cb4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e0b8      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cb4:	4b40      	ldr	r3, [pc, #256]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1ee      	bne.n	8007c9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007cc0:	7dfb      	ldrb	r3, [r7, #23]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d105      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cc6:	4b3c      	ldr	r3, [pc, #240]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	4a3b      	ldr	r2, [pc, #236]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f000 80a4 	beq.w	8007e24 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cdc:	4b36      	ldr	r3, [pc, #216]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f003 030c 	and.w	r3, r3, #12
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d06b      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d149      	bne.n	8007d84 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cf0:	4b31      	ldr	r3, [pc, #196]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a30      	ldr	r2, [pc, #192]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfc:	f7fa fe90 	bl	8002a20 <HAL_GetTick>
 8007d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d04:	f7fa fe8c 	bl	8002a20 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e087      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d16:	4b28      	ldr	r3, [pc, #160]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1f0      	bne.n	8007d04 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	69da      	ldr	r2, [r3, #28]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	019b      	lsls	r3, r3, #6
 8007d32:	431a      	orrs	r2, r3
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	085b      	lsrs	r3, r3, #1
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	041b      	lsls	r3, r3, #16
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d44:	061b      	lsls	r3, r3, #24
 8007d46:	4313      	orrs	r3, r2
 8007d48:	4a1b      	ldr	r2, [pc, #108]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d4e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d50:	4b19      	ldr	r3, [pc, #100]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a18      	ldr	r2, [pc, #96]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d5c:	f7fa fe60 	bl	8002a20 <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d62:	e008      	b.n	8007d76 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d64:	f7fa fe5c 	bl	8002a20 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d901      	bls.n	8007d76 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e057      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d76:	4b10      	ldr	r3, [pc, #64]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0f0      	beq.n	8007d64 <HAL_RCC_OscConfig+0x478>
 8007d82:	e04f      	b.n	8007e24 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d84:	4b0c      	ldr	r3, [pc, #48]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a0b      	ldr	r2, [pc, #44]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d90:	f7fa fe46 	bl	8002a20 <HAL_GetTick>
 8007d94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d96:	e008      	b.n	8007daa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d98:	f7fa fe42 	bl	8002a20 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	2b02      	cmp	r3, #2
 8007da4:	d901      	bls.n	8007daa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e03d      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007daa:	4b03      	ldr	r3, [pc, #12]	; (8007db8 <HAL_RCC_OscConfig+0x4cc>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1f0      	bne.n	8007d98 <HAL_RCC_OscConfig+0x4ac>
 8007db6:	e035      	b.n	8007e24 <HAL_RCC_OscConfig+0x538>
 8007db8:	40023800 	.word	0x40023800
 8007dbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007dc0:	4b1b      	ldr	r3, [pc, #108]	; (8007e30 <HAL_RCC_OscConfig+0x544>)
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d028      	beq.n	8007e20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d121      	bne.n	8007e20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d11a      	bne.n	8007e20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007df0:	4013      	ands	r3, r2
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007df6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d111      	bne.n	8007e20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e06:	085b      	lsrs	r3, r3, #1
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d107      	bne.n	8007e20 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d001      	beq.n	8007e24 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e000      	b.n	8007e26 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3718      	adds	r7, #24
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	40023800 	.word	0x40023800

08007e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e0d0      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e4c:	4b6a      	ldr	r3, [pc, #424]	; (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 030f 	and.w	r3, r3, #15
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d910      	bls.n	8007e7c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e5a:	4b67      	ldr	r3, [pc, #412]	; (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f023 020f 	bic.w	r2, r3, #15
 8007e62:	4965      	ldr	r1, [pc, #404]	; (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	4313      	orrs	r3, r2
 8007e68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e6a:	4b63      	ldr	r3, [pc, #396]	; (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f003 030f 	and.w	r3, r3, #15
 8007e72:	683a      	ldr	r2, [r7, #0]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d001      	beq.n	8007e7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e0b8      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f003 0302 	and.w	r3, r3, #2
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d020      	beq.n	8007eca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d005      	beq.n	8007ea0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e94:	4b59      	ldr	r3, [pc, #356]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	4a58      	ldr	r2, [pc, #352]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007e9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0308 	and.w	r3, r3, #8
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d005      	beq.n	8007eb8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007eac:	4b53      	ldr	r3, [pc, #332]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	4a52      	ldr	r2, [pc, #328]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007eb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007eb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007eb8:	4b50      	ldr	r3, [pc, #320]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	494d      	ldr	r1, [pc, #308]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d040      	beq.n	8007f58 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d107      	bne.n	8007eee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ede:	4b47      	ldr	r3, [pc, #284]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d115      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e07f      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d107      	bne.n	8007f06 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ef6:	4b41      	ldr	r3, [pc, #260]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d109      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e073      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f06:	4b3d      	ldr	r3, [pc, #244]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e06b      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f16:	4b39      	ldr	r3, [pc, #228]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f023 0203 	bic.w	r2, r3, #3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	4936      	ldr	r1, [pc, #216]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f28:	f7fa fd7a 	bl	8002a20 <HAL_GetTick>
 8007f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f2e:	e00a      	b.n	8007f46 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f30:	f7fa fd76 	bl	8002a20 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e053      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f46:	4b2d      	ldr	r3, [pc, #180]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 020c 	and.w	r2, r3, #12
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d1eb      	bne.n	8007f30 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f58:	4b27      	ldr	r3, [pc, #156]	; (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 030f 	and.w	r3, r3, #15
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d210      	bcs.n	8007f88 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f66:	4b24      	ldr	r3, [pc, #144]	; (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f023 020f 	bic.w	r2, r3, #15
 8007f6e:	4922      	ldr	r1, [pc, #136]	; (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f76:	4b20      	ldr	r3, [pc, #128]	; (8007ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d001      	beq.n	8007f88 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	e032      	b.n	8007fee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d008      	beq.n	8007fa6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f94:	4b19      	ldr	r3, [pc, #100]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	4916      	ldr	r1, [pc, #88]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0308 	and.w	r3, r3, #8
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007fb2:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	490e      	ldr	r1, [pc, #56]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007fc6:	f000 f821 	bl	800800c <HAL_RCC_GetSysClockFreq>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	4b0b      	ldr	r3, [pc, #44]	; (8007ffc <HAL_RCC_ClockConfig+0x1c8>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	091b      	lsrs	r3, r3, #4
 8007fd2:	f003 030f 	and.w	r3, r3, #15
 8007fd6:	490a      	ldr	r1, [pc, #40]	; (8008000 <HAL_RCC_ClockConfig+0x1cc>)
 8007fd8:	5ccb      	ldrb	r3, [r1, r3]
 8007fda:	fa22 f303 	lsr.w	r3, r2, r3
 8007fde:	4a09      	ldr	r2, [pc, #36]	; (8008004 <HAL_RCC_ClockConfig+0x1d0>)
 8007fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007fe2:	4b09      	ldr	r3, [pc, #36]	; (8008008 <HAL_RCC_ClockConfig+0x1d4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fa fcd6 	bl	8002998 <HAL_InitTick>

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	40023c00 	.word	0x40023c00
 8007ffc:	40023800 	.word	0x40023800
 8008000:	0801b170 	.word	0x0801b170
 8008004:	20000000 	.word	0x20000000
 8008008:	20000004 	.word	0x20000004

0800800c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800800c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008010:	b094      	sub	sp, #80	; 0x50
 8008012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008014:	2300      	movs	r3, #0
 8008016:	647b      	str	r3, [r7, #68]	; 0x44
 8008018:	2300      	movs	r3, #0
 800801a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800801c:	2300      	movs	r3, #0
 800801e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8008020:	2300      	movs	r3, #0
 8008022:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008024:	4b79      	ldr	r3, [pc, #484]	; (800820c <HAL_RCC_GetSysClockFreq+0x200>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f003 030c 	and.w	r3, r3, #12
 800802c:	2b08      	cmp	r3, #8
 800802e:	d00d      	beq.n	800804c <HAL_RCC_GetSysClockFreq+0x40>
 8008030:	2b08      	cmp	r3, #8
 8008032:	f200 80e1 	bhi.w	80081f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <HAL_RCC_GetSysClockFreq+0x34>
 800803a:	2b04      	cmp	r3, #4
 800803c:	d003      	beq.n	8008046 <HAL_RCC_GetSysClockFreq+0x3a>
 800803e:	e0db      	b.n	80081f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008040:	4b73      	ldr	r3, [pc, #460]	; (8008210 <HAL_RCC_GetSysClockFreq+0x204>)
 8008042:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008044:	e0db      	b.n	80081fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008046:	4b73      	ldr	r3, [pc, #460]	; (8008214 <HAL_RCC_GetSysClockFreq+0x208>)
 8008048:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800804a:	e0d8      	b.n	80081fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800804c:	4b6f      	ldr	r3, [pc, #444]	; (800820c <HAL_RCC_GetSysClockFreq+0x200>)
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008054:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008056:	4b6d      	ldr	r3, [pc, #436]	; (800820c <HAL_RCC_GetSysClockFreq+0x200>)
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800805e:	2b00      	cmp	r3, #0
 8008060:	d063      	beq.n	800812a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008062:	4b6a      	ldr	r3, [pc, #424]	; (800820c <HAL_RCC_GetSysClockFreq+0x200>)
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	099b      	lsrs	r3, r3, #6
 8008068:	2200      	movs	r2, #0
 800806a:	63bb      	str	r3, [r7, #56]	; 0x38
 800806c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800806e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008074:	633b      	str	r3, [r7, #48]	; 0x30
 8008076:	2300      	movs	r3, #0
 8008078:	637b      	str	r3, [r7, #52]	; 0x34
 800807a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800807e:	4622      	mov	r2, r4
 8008080:	462b      	mov	r3, r5
 8008082:	f04f 0000 	mov.w	r0, #0
 8008086:	f04f 0100 	mov.w	r1, #0
 800808a:	0159      	lsls	r1, r3, #5
 800808c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008090:	0150      	lsls	r0, r2, #5
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4621      	mov	r1, r4
 8008098:	1a51      	subs	r1, r2, r1
 800809a:	6139      	str	r1, [r7, #16]
 800809c:	4629      	mov	r1, r5
 800809e:	eb63 0301 	sbc.w	r3, r3, r1
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	f04f 0200 	mov.w	r2, #0
 80080a8:	f04f 0300 	mov.w	r3, #0
 80080ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80080b0:	4659      	mov	r1, fp
 80080b2:	018b      	lsls	r3, r1, #6
 80080b4:	4651      	mov	r1, sl
 80080b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80080ba:	4651      	mov	r1, sl
 80080bc:	018a      	lsls	r2, r1, #6
 80080be:	4651      	mov	r1, sl
 80080c0:	ebb2 0801 	subs.w	r8, r2, r1
 80080c4:	4659      	mov	r1, fp
 80080c6:	eb63 0901 	sbc.w	r9, r3, r1
 80080ca:	f04f 0200 	mov.w	r2, #0
 80080ce:	f04f 0300 	mov.w	r3, #0
 80080d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080de:	4690      	mov	r8, r2
 80080e0:	4699      	mov	r9, r3
 80080e2:	4623      	mov	r3, r4
 80080e4:	eb18 0303 	adds.w	r3, r8, r3
 80080e8:	60bb      	str	r3, [r7, #8]
 80080ea:	462b      	mov	r3, r5
 80080ec:	eb49 0303 	adc.w	r3, r9, r3
 80080f0:	60fb      	str	r3, [r7, #12]
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	f04f 0300 	mov.w	r3, #0
 80080fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80080fe:	4629      	mov	r1, r5
 8008100:	024b      	lsls	r3, r1, #9
 8008102:	4621      	mov	r1, r4
 8008104:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008108:	4621      	mov	r1, r4
 800810a:	024a      	lsls	r2, r1, #9
 800810c:	4610      	mov	r0, r2
 800810e:	4619      	mov	r1, r3
 8008110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008112:	2200      	movs	r2, #0
 8008114:	62bb      	str	r3, [r7, #40]	; 0x28
 8008116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008118:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800811c:	f7f8 fd2e 	bl	8000b7c <__aeabi_uldivmod>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4613      	mov	r3, r2
 8008126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008128:	e058      	b.n	80081dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800812a:	4b38      	ldr	r3, [pc, #224]	; (800820c <HAL_RCC_GetSysClockFreq+0x200>)
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	099b      	lsrs	r3, r3, #6
 8008130:	2200      	movs	r2, #0
 8008132:	4618      	mov	r0, r3
 8008134:	4611      	mov	r1, r2
 8008136:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800813a:	623b      	str	r3, [r7, #32]
 800813c:	2300      	movs	r3, #0
 800813e:	627b      	str	r3, [r7, #36]	; 0x24
 8008140:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008144:	4642      	mov	r2, r8
 8008146:	464b      	mov	r3, r9
 8008148:	f04f 0000 	mov.w	r0, #0
 800814c:	f04f 0100 	mov.w	r1, #0
 8008150:	0159      	lsls	r1, r3, #5
 8008152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008156:	0150      	lsls	r0, r2, #5
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4641      	mov	r1, r8
 800815e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008162:	4649      	mov	r1, r9
 8008164:	eb63 0b01 	sbc.w	fp, r3, r1
 8008168:	f04f 0200 	mov.w	r2, #0
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008174:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008178:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800817c:	ebb2 040a 	subs.w	r4, r2, sl
 8008180:	eb63 050b 	sbc.w	r5, r3, fp
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	f04f 0300 	mov.w	r3, #0
 800818c:	00eb      	lsls	r3, r5, #3
 800818e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008192:	00e2      	lsls	r2, r4, #3
 8008194:	4614      	mov	r4, r2
 8008196:	461d      	mov	r5, r3
 8008198:	4643      	mov	r3, r8
 800819a:	18e3      	adds	r3, r4, r3
 800819c:	603b      	str	r3, [r7, #0]
 800819e:	464b      	mov	r3, r9
 80081a0:	eb45 0303 	adc.w	r3, r5, r3
 80081a4:	607b      	str	r3, [r7, #4]
 80081a6:	f04f 0200 	mov.w	r2, #0
 80081aa:	f04f 0300 	mov.w	r3, #0
 80081ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80081b2:	4629      	mov	r1, r5
 80081b4:	028b      	lsls	r3, r1, #10
 80081b6:	4621      	mov	r1, r4
 80081b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80081bc:	4621      	mov	r1, r4
 80081be:	028a      	lsls	r2, r1, #10
 80081c0:	4610      	mov	r0, r2
 80081c2:	4619      	mov	r1, r3
 80081c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081c6:	2200      	movs	r2, #0
 80081c8:	61bb      	str	r3, [r7, #24]
 80081ca:	61fa      	str	r2, [r7, #28]
 80081cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081d0:	f7f8 fcd4 	bl	8000b7c <__aeabi_uldivmod>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4613      	mov	r3, r2
 80081da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80081dc:	4b0b      	ldr	r3, [pc, #44]	; (800820c <HAL_RCC_GetSysClockFreq+0x200>)
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	0c1b      	lsrs	r3, r3, #16
 80081e2:	f003 0303 	and.w	r3, r3, #3
 80081e6:	3301      	adds	r3, #1
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80081ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80081ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081f6:	e002      	b.n	80081fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081f8:	4b05      	ldr	r3, [pc, #20]	; (8008210 <HAL_RCC_GetSysClockFreq+0x204>)
 80081fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80081fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008200:	4618      	mov	r0, r3
 8008202:	3750      	adds	r7, #80	; 0x50
 8008204:	46bd      	mov	sp, r7
 8008206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800820a:	bf00      	nop
 800820c:	40023800 	.word	0x40023800
 8008210:	00f42400 	.word	0x00f42400
 8008214:	007a1200 	.word	0x007a1200

08008218 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800821c:	4b03      	ldr	r3, [pc, #12]	; (800822c <HAL_RCC_GetHCLKFreq+0x14>)
 800821e:	681b      	ldr	r3, [r3, #0]
}
 8008220:	4618      	mov	r0, r3
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	20000000 	.word	0x20000000

08008230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008234:	f7ff fff0 	bl	8008218 <HAL_RCC_GetHCLKFreq>
 8008238:	4602      	mov	r2, r0
 800823a:	4b05      	ldr	r3, [pc, #20]	; (8008250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	0a9b      	lsrs	r3, r3, #10
 8008240:	f003 0307 	and.w	r3, r3, #7
 8008244:	4903      	ldr	r1, [pc, #12]	; (8008254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008246:	5ccb      	ldrb	r3, [r1, r3]
 8008248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800824c:	4618      	mov	r0, r3
 800824e:	bd80      	pop	{r7, pc}
 8008250:	40023800 	.word	0x40023800
 8008254:	0801b180 	.word	0x0801b180

08008258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800825c:	f7ff ffdc 	bl	8008218 <HAL_RCC_GetHCLKFreq>
 8008260:	4602      	mov	r2, r0
 8008262:	4b05      	ldr	r3, [pc, #20]	; (8008278 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008264:	689b      	ldr	r3, [r3, #8]
 8008266:	0b5b      	lsrs	r3, r3, #13
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	4903      	ldr	r1, [pc, #12]	; (800827c <HAL_RCC_GetPCLK2Freq+0x24>)
 800826e:	5ccb      	ldrb	r3, [r1, r3]
 8008270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008274:	4618      	mov	r0, r3
 8008276:	bd80      	pop	{r7, pc}
 8008278:	40023800 	.word	0x40023800
 800827c:	0801b180 	.word	0x0801b180

08008280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008288:	2300      	movs	r3, #0
 800828a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800828c:	2300      	movs	r3, #0
 800828e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008294:	2300      	movs	r3, #0
 8008296:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0301 	and.w	r3, r3, #1
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d012      	beq.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082a8:	4b69      	ldr	r3, [pc, #420]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	4a68      	ldr	r2, [pc, #416]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80082b2:	6093      	str	r3, [r2, #8]
 80082b4:	4b66      	ldr	r3, [pc, #408]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082b6:	689a      	ldr	r2, [r3, #8]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082bc:	4964      	ldr	r1, [pc, #400]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80082ca:	2301      	movs	r3, #1
 80082cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d017      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082da:	4b5d      	ldr	r3, [pc, #372]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e8:	4959      	ldr	r1, [pc, #356]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ea:	4313      	orrs	r3, r2
 80082ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082f8:	d101      	bne.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80082fa:	2301      	movs	r3, #1
 80082fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008306:	2301      	movs	r3, #1
 8008308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d017      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008316:	4b4e      	ldr	r3, [pc, #312]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008318:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800831c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008324:	494a      	ldr	r1, [pc, #296]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008326:	4313      	orrs	r3, r2
 8008328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008334:	d101      	bne.n	800833a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008336:	2301      	movs	r3, #1
 8008338:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008342:	2301      	movs	r3, #1
 8008344:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008352:	2301      	movs	r3, #1
 8008354:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b00      	cmp	r3, #0
 8008360:	f000 808b 	beq.w	800847a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008364:	4b3a      	ldr	r3, [pc, #232]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	4a39      	ldr	r2, [pc, #228]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800836a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800836e:	6413      	str	r3, [r2, #64]	; 0x40
 8008370:	4b37      	ldr	r3, [pc, #220]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008378:	60bb      	str	r3, [r7, #8]
 800837a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800837c:	4b35      	ldr	r3, [pc, #212]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a34      	ldr	r2, [pc, #208]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008388:	f7fa fb4a 	bl	8002a20 <HAL_GetTick>
 800838c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800838e:	e008      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008390:	f7fa fb46 	bl	8002a20 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b64      	cmp	r3, #100	; 0x64
 800839c:	d901      	bls.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e357      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083a2:	4b2c      	ldr	r3, [pc, #176]	; (8008454 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d0f0      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083ae:	4b28      	ldr	r3, [pc, #160]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d035      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d02e      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083cc:	4b20      	ldr	r3, [pc, #128]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083d6:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083da:	4a1d      	ldr	r2, [pc, #116]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083e2:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e6:	4a1a      	ldr	r2, [pc, #104]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80083ee:	4a18      	ldr	r2, [pc, #96]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083f4:	4b16      	ldr	r3, [pc, #88]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d114      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008400:	f7fa fb0e 	bl	8002a20 <HAL_GetTick>
 8008404:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008406:	e00a      	b.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008408:	f7fa fb0a 	bl	8002a20 <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	f241 3288 	movw	r2, #5000	; 0x1388
 8008416:	4293      	cmp	r3, r2
 8008418:	d901      	bls.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e319      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800841e:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008422:	f003 0302 	and.w	r3, r3, #2
 8008426:	2b00      	cmp	r3, #0
 8008428:	d0ee      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008436:	d111      	bne.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008438:	4b05      	ldr	r3, [pc, #20]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008444:	4b04      	ldr	r3, [pc, #16]	; (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008446:	400b      	ands	r3, r1
 8008448:	4901      	ldr	r1, [pc, #4]	; (8008450 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800844a:	4313      	orrs	r3, r2
 800844c:	608b      	str	r3, [r1, #8]
 800844e:	e00b      	b.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008450:	40023800 	.word	0x40023800
 8008454:	40007000 	.word	0x40007000
 8008458:	0ffffcff 	.word	0x0ffffcff
 800845c:	4baa      	ldr	r3, [pc, #680]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	4aa9      	ldr	r2, [pc, #676]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008462:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008466:	6093      	str	r3, [r2, #8]
 8008468:	4ba7      	ldr	r3, [pc, #668]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800846a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008474:	49a4      	ldr	r1, [pc, #656]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008476:	4313      	orrs	r3, r2
 8008478:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0310 	and.w	r3, r3, #16
 8008482:	2b00      	cmp	r3, #0
 8008484:	d010      	beq.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008486:	4ba0      	ldr	r3, [pc, #640]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800848c:	4a9e      	ldr	r2, [pc, #632]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800848e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008492:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008496:	4b9c      	ldr	r3, [pc, #624]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008498:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	4999      	ldr	r1, [pc, #612]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00a      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084b4:	4b94      	ldr	r3, [pc, #592]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084c2:	4991      	ldr	r1, [pc, #580]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00a      	beq.n	80084ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084d6:	4b8c      	ldr	r3, [pc, #560]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084e4:	4988      	ldr	r1, [pc, #544]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00a      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084f8:	4b83      	ldr	r3, [pc, #524]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008506:	4980      	ldr	r1, [pc, #512]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008508:	4313      	orrs	r3, r2
 800850a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00a      	beq.n	8008530 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800851a:	4b7b      	ldr	r3, [pc, #492]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800851c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008528:	4977      	ldr	r1, [pc, #476]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800852a:	4313      	orrs	r3, r2
 800852c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00a      	beq.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800853c:	4b72      	ldr	r3, [pc, #456]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800853e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008542:	f023 0203 	bic.w	r2, r3, #3
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854a:	496f      	ldr	r1, [pc, #444]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854c:	4313      	orrs	r3, r2
 800854e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800855e:	4b6a      	ldr	r3, [pc, #424]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008564:	f023 020c 	bic.w	r2, r3, #12
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800856c:	4966      	ldr	r1, [pc, #408]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800856e:	4313      	orrs	r3, r2
 8008570:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00a      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008580:	4b61      	ldr	r3, [pc, #388]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008586:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800858e:	495e      	ldr	r1, [pc, #376]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008590:	4313      	orrs	r3, r2
 8008592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085a2:	4b59      	ldr	r3, [pc, #356]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085b0:	4955      	ldr	r1, [pc, #340]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00a      	beq.n	80085da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085c4:	4b50      	ldr	r3, [pc, #320]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085d2:	494d      	ldr	r1, [pc, #308]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d4:	4313      	orrs	r3, r2
 80085d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00a      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80085e6:	4b48      	ldr	r3, [pc, #288]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f4:	4944      	ldr	r1, [pc, #272]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00a      	beq.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008608:	4b3f      	ldr	r3, [pc, #252]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800860a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800860e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008616:	493c      	ldr	r1, [pc, #240]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008618:	4313      	orrs	r3, r2
 800861a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800862a:	4b37      	ldr	r3, [pc, #220]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800862c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008638:	4933      	ldr	r1, [pc, #204]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863a:	4313      	orrs	r3, r2
 800863c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800864c:	4b2e      	ldr	r3, [pc, #184]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800864e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008652:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800865a:	492b      	ldr	r1, [pc, #172]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800865c:	4313      	orrs	r3, r2
 800865e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d011      	beq.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800866e:	4b26      	ldr	r3, [pc, #152]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008674:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800867c:	4922      	ldr	r1, [pc, #136]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800867e:	4313      	orrs	r3, r2
 8008680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800868c:	d101      	bne.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800868e:	2301      	movs	r3, #1
 8008690:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800869e:	2301      	movs	r3, #1
 80086a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00a      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086ae:	4b16      	ldr	r3, [pc, #88]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086bc:	4912      	ldr	r1, [pc, #72]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086be:	4313      	orrs	r3, r2
 80086c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00b      	beq.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80086d0:	4b0d      	ldr	r3, [pc, #52]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086e0:	4909      	ldr	r1, [pc, #36]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e2:	4313      	orrs	r3, r2
 80086e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	2b01      	cmp	r3, #1
 80086ec:	d006      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 80d9 	beq.w	80088ae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a01      	ldr	r2, [pc, #4]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008706:	e001      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008708:	40023800 	.word	0x40023800
 800870c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800870e:	f7fa f987 	bl	8002a20 <HAL_GetTick>
 8008712:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008714:	e008      	b.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008716:	f7fa f983 	bl	8002a20 <HAL_GetTick>
 800871a:	4602      	mov	r2, r0
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	2b64      	cmp	r3, #100	; 0x64
 8008722:	d901      	bls.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008724:	2303      	movs	r3, #3
 8008726:	e194      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008728:	4b6c      	ldr	r3, [pc, #432]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1f0      	bne.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	2b00      	cmp	r3, #0
 800873e:	d021      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008744:	2b00      	cmp	r3, #0
 8008746:	d11d      	bne.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008748:	4b64      	ldr	r3, [pc, #400]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800874a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800874e:	0c1b      	lsrs	r3, r3, #16
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008756:	4b61      	ldr	r3, [pc, #388]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800875c:	0e1b      	lsrs	r3, r3, #24
 800875e:	f003 030f 	and.w	r3, r3, #15
 8008762:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	019a      	lsls	r2, r3, #6
 800876a:	693b      	ldr	r3, [r7, #16]
 800876c:	041b      	lsls	r3, r3, #16
 800876e:	431a      	orrs	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	061b      	lsls	r3, r3, #24
 8008774:	431a      	orrs	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	071b      	lsls	r3, r3, #28
 800877c:	4957      	ldr	r1, [pc, #348]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800877e:	4313      	orrs	r3, r2
 8008780:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d004      	beq.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008798:	d00a      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d02e      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087ae:	d129      	bne.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087b0:	4b4a      	ldr	r3, [pc, #296]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087b6:	0c1b      	lsrs	r3, r3, #16
 80087b8:	f003 0303 	and.w	r3, r3, #3
 80087bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087be:	4b47      	ldr	r3, [pc, #284]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087c4:	0f1b      	lsrs	r3, r3, #28
 80087c6:	f003 0307 	and.w	r3, r3, #7
 80087ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	019a      	lsls	r2, r3, #6
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	041b      	lsls	r3, r3, #16
 80087d6:	431a      	orrs	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	061b      	lsls	r3, r3, #24
 80087de:	431a      	orrs	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	071b      	lsls	r3, r3, #28
 80087e4:	493d      	ldr	r1, [pc, #244]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80087ec:	4b3b      	ldr	r3, [pc, #236]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087f2:	f023 021f 	bic.w	r2, r3, #31
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fa:	3b01      	subs	r3, #1
 80087fc:	4937      	ldr	r1, [pc, #220]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d01d      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008810:	4b32      	ldr	r3, [pc, #200]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008816:	0e1b      	lsrs	r3, r3, #24
 8008818:	f003 030f 	and.w	r3, r3, #15
 800881c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800881e:	4b2f      	ldr	r3, [pc, #188]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008824:	0f1b      	lsrs	r3, r3, #28
 8008826:	f003 0307 	and.w	r3, r3, #7
 800882a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	019a      	lsls	r2, r3, #6
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	041b      	lsls	r3, r3, #16
 8008838:	431a      	orrs	r2, r3
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	061b      	lsls	r3, r3, #24
 800883e:	431a      	orrs	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	071b      	lsls	r3, r3, #28
 8008844:	4925      	ldr	r1, [pc, #148]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008846:	4313      	orrs	r3, r2
 8008848:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d011      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	019a      	lsls	r2, r3, #6
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	041b      	lsls	r3, r3, #16
 8008864:	431a      	orrs	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	061b      	lsls	r3, r3, #24
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	689b      	ldr	r3, [r3, #8]
 8008872:	071b      	lsls	r3, r3, #28
 8008874:	4919      	ldr	r1, [pc, #100]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008876:	4313      	orrs	r3, r2
 8008878:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800887c:	4b17      	ldr	r3, [pc, #92]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a16      	ldr	r2, [pc, #88]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008886:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008888:	f7fa f8ca 	bl	8002a20 <HAL_GetTick>
 800888c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800888e:	e008      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008890:	f7fa f8c6 	bl	8002a20 <HAL_GetTick>
 8008894:	4602      	mov	r2, r0
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	2b64      	cmp	r3, #100	; 0x64
 800889c:	d901      	bls.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800889e:	2303      	movs	r3, #3
 80088a0:	e0d7      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088a2:	4b0e      	ldr	r3, [pc, #56]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d0f0      	beq.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	f040 80cd 	bne.w	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088b6:	4b09      	ldr	r3, [pc, #36]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a08      	ldr	r2, [pc, #32]	; (80088dc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088c2:	f7fa f8ad 	bl	8002a20 <HAL_GetTick>
 80088c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088c8:	e00a      	b.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088ca:	f7fa f8a9 	bl	8002a20 <HAL_GetTick>
 80088ce:	4602      	mov	r2, r0
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	1ad3      	subs	r3, r2, r3
 80088d4:	2b64      	cmp	r3, #100	; 0x64
 80088d6:	d903      	bls.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088d8:	2303      	movs	r3, #3
 80088da:	e0ba      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80088dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088e0:	4b5e      	ldr	r3, [pc, #376]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ec:	d0ed      	beq.n	80088ca <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d009      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800890a:	2b00      	cmp	r3, #0
 800890c:	d02e      	beq.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	2b00      	cmp	r3, #0
 8008914:	d12a      	bne.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008916:	4b51      	ldr	r3, [pc, #324]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800891c:	0c1b      	lsrs	r3, r3, #16
 800891e:	f003 0303 	and.w	r3, r3, #3
 8008922:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008924:	4b4d      	ldr	r3, [pc, #308]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800892a:	0f1b      	lsrs	r3, r3, #28
 800892c:	f003 0307 	and.w	r3, r3, #7
 8008930:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	019a      	lsls	r2, r3, #6
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	041b      	lsls	r3, r3, #16
 800893c:	431a      	orrs	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	061b      	lsls	r3, r3, #24
 8008944:	431a      	orrs	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	071b      	lsls	r3, r3, #28
 800894a:	4944      	ldr	r1, [pc, #272]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800894c:	4313      	orrs	r3, r2
 800894e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008952:	4b42      	ldr	r3, [pc, #264]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008958:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008960:	3b01      	subs	r3, #1
 8008962:	021b      	lsls	r3, r3, #8
 8008964:	493d      	ldr	r1, [pc, #244]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008966:	4313      	orrs	r3, r2
 8008968:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d022      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800897c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008980:	d11d      	bne.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008982:	4b36      	ldr	r3, [pc, #216]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008988:	0e1b      	lsrs	r3, r3, #24
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008990:	4b32      	ldr	r3, [pc, #200]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008996:	0f1b      	lsrs	r3, r3, #28
 8008998:	f003 0307 	and.w	r3, r3, #7
 800899c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	019a      	lsls	r2, r3, #6
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a1b      	ldr	r3, [r3, #32]
 80089a8:	041b      	lsls	r3, r3, #16
 80089aa:	431a      	orrs	r2, r3
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	061b      	lsls	r3, r3, #24
 80089b0:	431a      	orrs	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	071b      	lsls	r3, r3, #28
 80089b6:	4929      	ldr	r1, [pc, #164]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0308 	and.w	r3, r3, #8
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d028      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089ca:	4b24      	ldr	r3, [pc, #144]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d0:	0e1b      	lsrs	r3, r3, #24
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089d8:	4b20      	ldr	r3, [pc, #128]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089de:	0c1b      	lsrs	r3, r3, #16
 80089e0:	f003 0303 	and.w	r3, r3, #3
 80089e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	019a      	lsls	r2, r3, #6
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	041b      	lsls	r3, r3, #16
 80089f0:	431a      	orrs	r2, r3
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	061b      	lsls	r3, r3, #24
 80089f6:	431a      	orrs	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	69db      	ldr	r3, [r3, #28]
 80089fc:	071b      	lsls	r3, r3, #28
 80089fe:	4917      	ldr	r1, [pc, #92]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a06:	4b15      	ldr	r3, [pc, #84]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	4911      	ldr	r1, [pc, #68]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a16:	4313      	orrs	r3, r2
 8008a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a1c:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a0e      	ldr	r2, [pc, #56]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a28:	f7f9 fffa 	bl	8002a20 <HAL_GetTick>
 8008a2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a2e:	e008      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a30:	f7f9 fff6 	bl	8002a20 <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	2b64      	cmp	r3, #100	; 0x64
 8008a3c:	d901      	bls.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	e007      	b.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a42:	4b06      	ldr	r3, [pc, #24]	; (8008a5c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a4e:	d1ef      	bne.n	8008a30 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3720      	adds	r7, #32
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	40023800 	.word	0x40023800

08008a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e09d      	b.n	8008bae <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d108      	bne.n	8008a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a82:	d009      	beq.n	8008a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	61da      	str	r2, [r3, #28]
 8008a8a:	e005      	b.n	8008a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d106      	bne.n	8008ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7f9 f84a 	bl	8001b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ace:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008ad8:	d902      	bls.n	8008ae0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60fb      	str	r3, [r7, #12]
 8008ade:	e002      	b.n	8008ae6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ae4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008aee:	d007      	beq.n	8008b00 <HAL_SPI_Init+0xa0>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008af8:	d002      	beq.n	8008b00 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008b10:	431a      	orrs	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	f003 0302 	and.w	r3, r3, #2
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	695b      	ldr	r3, [r3, #20]
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	431a      	orrs	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	69db      	ldr	r3, [r3, #28]
 8008b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b42:	ea42 0103 	orr.w	r1, r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	430a      	orrs	r2, r1
 8008b54:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	0c1b      	lsrs	r3, r3, #16
 8008b5c:	f003 0204 	and.w	r2, r3, #4
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	f003 0310 	and.w	r3, r3, #16
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6e:	f003 0308 	and.w	r3, r3, #8
 8008b72:	431a      	orrs	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008b7c:	ea42 0103 	orr.w	r1, r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	430a      	orrs	r2, r1
 8008b8c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	69da      	ldr	r2, [r3, #28]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b9c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
	...

08008bb8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b086      	sub	sp, #24
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d101      	bne.n	8008bd8 <HAL_SPI_TransmitReceive_DMA+0x20>
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	e16c      	b.n	8008eb2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008be6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008bee:	7dbb      	ldrb	r3, [r7, #22]
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d00d      	beq.n	8008c10 <HAL_SPI_TransmitReceive_DMA+0x58>
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008bfa:	d106      	bne.n	8008c0a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	689b      	ldr	r3, [r3, #8]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d102      	bne.n	8008c0a <HAL_SPI_TransmitReceive_DMA+0x52>
 8008c04:	7dbb      	ldrb	r3, [r7, #22]
 8008c06:	2b04      	cmp	r3, #4
 8008c08:	d002      	beq.n	8008c10 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8008c0a:	2302      	movs	r3, #2
 8008c0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c0e:	e14b      	b.n	8008ea8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d005      	beq.n	8008c22 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d002      	beq.n	8008c22 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8008c1c:	887b      	ldrh	r3, [r7, #2]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d102      	bne.n	8008c28 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008c26:	e13f      	b.n	8008ea8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d003      	beq.n	8008c3c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2205      	movs	r2, #5
 8008c38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	887a      	ldrh	r2, [r7, #2]
 8008c4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	887a      	ldrh	r2, [r7, #2]
 8008c52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	887a      	ldrh	r2, [r7, #2]
 8008c5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	887a      	ldrh	r2, [r7, #2]
 8008c66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8008c84:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c8e:	d908      	bls.n	8008ca2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c9e:	605a      	str	r2, [r3, #4]
 8008ca0:	e06f      	b.n	8008d82 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	685a      	ldr	r2, [r3, #4]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008cb0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cbc:	d126      	bne.n	8008d0c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10f      	bne.n	8008cea <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	685a      	ldr	r2, [r3, #4]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008cd8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	085b      	lsrs	r3, r3, #1
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008ce8:	e010      	b.n	8008d0c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008cf8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	085b      	lsrs	r3, r3, #1
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	3301      	adds	r3, #1
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d16:	d134      	bne.n	8008d82 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685a      	ldr	r2, [r3, #4]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d26:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	f003 0301 	and.w	r3, r3, #1
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d111      	bne.n	8008d5c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d46:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	085b      	lsrs	r3, r3, #1
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008d5a:	e012      	b.n	8008d82 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d6a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	085b      	lsrs	r3, r3, #1
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	3301      	adds	r3, #1
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	2b04      	cmp	r3, #4
 8008d8c:	d108      	bne.n	8008da0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d92:	4a4a      	ldr	r2, [pc, #296]	; (8008ebc <HAL_SPI_TransmitReceive_DMA+0x304>)
 8008d94:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9a:	4a49      	ldr	r2, [pc, #292]	; (8008ec0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8008d9c:	63da      	str	r2, [r3, #60]	; 0x3c
 8008d9e:	e007      	b.n	8008db0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da4:	4a47      	ldr	r2, [pc, #284]	; (8008ec4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8008da6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dac:	4a46      	ldr	r2, [pc, #280]	; (8008ec8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8008dae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db4:	4a45      	ldr	r2, [pc, #276]	; (8008ecc <HAL_SPI_TransmitReceive_DMA+0x314>)
 8008db6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	330c      	adds	r3, #12
 8008dca:	4619      	mov	r1, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd0:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008dd8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008dda:	f7fa fe27 	bl	8003a2c <HAL_DMA_Start_IT>
 8008dde:	4603      	mov	r3, r0
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d00c      	beq.n	8008dfe <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008de8:	f043 0210 	orr.w	r2, r3, #16
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2201      	movs	r2, #1
 8008df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008dfc:	e054      	b.n	8008ea8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f042 0201 	orr.w	r2, r2, #1
 8008e0c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e12:	2200      	movs	r2, #0
 8008e14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e22:	2200      	movs	r2, #0
 8008e24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	4619      	mov	r1, r3
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	330c      	adds	r3, #12
 8008e3e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e44:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008e46:	f7fa fdf1 	bl	8003a2c <HAL_DMA_Start_IT>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d00c      	beq.n	8008e6a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e54:	f043 0210 	orr.w	r2, r3, #16
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2201      	movs	r2, #1
 8008e64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008e68:	e01e      	b.n	8008ea8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e74:	2b40      	cmp	r3, #64	; 0x40
 8008e76:	d007      	beq.n	8008e88 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e86:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685a      	ldr	r2, [r3, #4]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0220 	orr.w	r2, r2, #32
 8008e96:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	685a      	ldr	r2, [r3, #4]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f042 0202 	orr.w	r2, r2, #2
 8008ea6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	0800925d 	.word	0x0800925d
 8008ec0:	08009121 	.word	0x08009121
 8008ec4:	08009279 	.word	0x08009279
 8008ec8:	080091cb 	.word	0x080091cb
 8008ecc:	08009295 	.word	0x08009295

08008ed0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b088      	sub	sp, #32
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	099b      	lsrs	r3, r3, #6
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10f      	bne.n	8008f14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008ef4:	69bb      	ldr	r3, [r7, #24]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d00a      	beq.n	8008f14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	099b      	lsrs	r3, r3, #6
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d004      	beq.n	8008f14 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
    return;
 8008f12:	e0d7      	b.n	80090c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	085b      	lsrs	r3, r3, #1
 8008f18:	f003 0301 	and.w	r3, r3, #1
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00a      	beq.n	8008f36 <HAL_SPI_IRQHandler+0x66>
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	09db      	lsrs	r3, r3, #7
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d004      	beq.n	8008f36 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	4798      	blx	r3
    return;
 8008f34:	e0c6      	b.n	80090c4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	095b      	lsrs	r3, r3, #5
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d10c      	bne.n	8008f5c <HAL_SPI_IRQHandler+0x8c>
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	099b      	lsrs	r3, r3, #6
 8008f46:	f003 0301 	and.w	r3, r3, #1
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d106      	bne.n	8008f5c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	0a1b      	lsrs	r3, r3, #8
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 80b4 	beq.w	80090c4 <HAL_SPI_IRQHandler+0x1f4>
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	095b      	lsrs	r3, r3, #5
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 80ad 	beq.w	80090c4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	099b      	lsrs	r3, r3, #6
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d023      	beq.n	8008fbe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	d011      	beq.n	8008fa6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f86:	f043 0204 	orr.w	r2, r3, #4
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008f8e:	2300      	movs	r3, #0
 8008f90:	617b      	str	r3, [r7, #20]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	617b      	str	r3, [r7, #20]
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	e00b      	b.n	8008fbe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	613b      	str	r3, [r7, #16]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	68db      	ldr	r3, [r3, #12]
 8008fb0:	613b      	str	r3, [r7, #16]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	613b      	str	r3, [r7, #16]
 8008fba:	693b      	ldr	r3, [r7, #16]
        return;
 8008fbc:	e082      	b.n	80090c4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	095b      	lsrs	r3, r3, #5
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d014      	beq.n	8008ff4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fce:	f043 0201 	orr.w	r2, r3, #1
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681a      	ldr	r2, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ff0:	601a      	str	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	0a1b      	lsrs	r3, r3, #8
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00c      	beq.n	800901a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009004:	f043 0208 	orr.w	r2, r3, #8
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800900c:	2300      	movs	r3, #0
 800900e:	60bb      	str	r3, [r7, #8]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	60bb      	str	r3, [r7, #8]
 8009018:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800901e:	2b00      	cmp	r3, #0
 8009020:	d04f      	beq.n	80090c2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009030:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d104      	bne.n	800904e <HAL_SPI_IRQHandler+0x17e>
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d034      	beq.n	80090b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0203 	bic.w	r2, r2, #3
 800905c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009062:	2b00      	cmp	r3, #0
 8009064:	d011      	beq.n	800908a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906a:	4a18      	ldr	r2, [pc, #96]	; (80090cc <HAL_SPI_IRQHandler+0x1fc>)
 800906c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009072:	4618      	mov	r0, r3
 8009074:	f7fa fdaa 	bl	8003bcc <HAL_DMA_Abort_IT>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908e:	2b00      	cmp	r3, #0
 8009090:	d016      	beq.n	80090c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009096:	4a0d      	ldr	r2, [pc, #52]	; (80090cc <HAL_SPI_IRQHandler+0x1fc>)
 8009098:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800909e:	4618      	mov	r0, r3
 80090a0:	f7fa fd94 	bl	8003bcc <HAL_DMA_Abort_IT>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d00a      	beq.n	80090c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80090b6:	e003      	b.n	80090c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f827 	bl	800910c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80090be:	e000      	b.n	80090c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80090c0:	bf00      	nop
    return;
 80090c2:	bf00      	nop
  }
}
 80090c4:	3720      	adds	r7, #32
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	080092d5 	.word	0x080092d5

080090d0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800912e:	f7f9 fc77 	bl	8002a20 <HAL_GetTick>
 8009132:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009142:	d03c      	beq.n	80091be <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 0220 	bic.w	r2, r2, #32
 8009152:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10d      	bne.n	8009178 <SPI_DMAReceiveCplt+0x58>
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009164:	d108      	bne.n	8009178 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	685a      	ldr	r2, [r3, #4]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0203 	bic.w	r2, r2, #3
 8009174:	605a      	str	r2, [r3, #4]
 8009176:	e007      	b.n	8009188 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f022 0201 	bic.w	r2, r2, #1
 8009186:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	2164      	movs	r1, #100	; 0x64
 800918c:	68f8      	ldr	r0, [r7, #12]
 800918e:	f000 f9d5 	bl	800953c <SPI_EndRxTransaction>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2220      	movs	r2, #32
 800919c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80091b6:	68f8      	ldr	r0, [r7, #12]
 80091b8:	f7ff ffa8 	bl	800910c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80091bc:	e002      	b.n	80091c4 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f7ff ff86 	bl	80090d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}

080091ca <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091ca:	b580      	push	{r7, lr}
 80091cc:	b084      	sub	sp, #16
 80091ce:	af00      	add	r7, sp, #0
 80091d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80091d8:	f7f9 fc22 	bl	8002a20 <HAL_GetTick>
 80091dc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ec:	d030      	beq.n	8009250 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 0220 	bic.w	r2, r2, #32
 80091fc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	2164      	movs	r1, #100	; 0x64
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 fa16 	bl	8009634 <SPI_EndRxTxTransaction>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d005      	beq.n	800921a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009212:	f043 0220 	orr.w	r2, r3, #32
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f022 0203 	bic.w	r2, r2, #3
 8009228:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	2200      	movs	r2, #0
 800922e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2201      	movs	r2, #1
 800923c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f7ff ff5f 	bl	800910c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800924e:	e002      	b.n	8009256 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f00d fee3 	bl	801701c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009268:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f7ff ff3a 	bl	80090e4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009270:	bf00      	nop
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009284:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009286:	68f8      	ldr	r0, [r7, #12]
 8009288:	f7ff ff36 	bl	80090f8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800928c:	bf00      	nop
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	685a      	ldr	r2, [r3, #4]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f022 0203 	bic.w	r2, r2, #3
 80092b0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092b6:	f043 0210 	orr.w	r2, r3, #16
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2201      	movs	r2, #1
 80092c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f7ff ff20 	bl	800910c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092cc:	bf00      	nop
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2200      	movs	r2, #0
 80092ee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f7ff ff0b 	bl	800910c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80092f6:	bf00      	nop
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
	...

08009300 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b088      	sub	sp, #32
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	603b      	str	r3, [r7, #0]
 800930c:	4613      	mov	r3, r2
 800930e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009310:	f7f9 fb86 	bl	8002a20 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009318:	1a9b      	subs	r3, r3, r2
 800931a:	683a      	ldr	r2, [r7, #0]
 800931c:	4413      	add	r3, r2
 800931e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009320:	f7f9 fb7e 	bl	8002a20 <HAL_GetTick>
 8009324:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009326:	4b39      	ldr	r3, [pc, #228]	; (800940c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	015b      	lsls	r3, r3, #5
 800932c:	0d1b      	lsrs	r3, r3, #20
 800932e:	69fa      	ldr	r2, [r7, #28]
 8009330:	fb02 f303 	mul.w	r3, r2, r3
 8009334:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009336:	e054      	b.n	80093e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800933e:	d050      	beq.n	80093e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009340:	f7f9 fb6e 	bl	8002a20 <HAL_GetTick>
 8009344:	4602      	mov	r2, r0
 8009346:	69bb      	ldr	r3, [r7, #24]
 8009348:	1ad3      	subs	r3, r2, r3
 800934a:	69fa      	ldr	r2, [r7, #28]
 800934c:	429a      	cmp	r2, r3
 800934e:	d902      	bls.n	8009356 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d13d      	bne.n	80093d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009364:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800936e:	d111      	bne.n	8009394 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009378:	d004      	beq.n	8009384 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009382:	d107      	bne.n	8009394 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009392:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009398:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800939c:	d10f      	bne.n	80093be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093ac:	601a      	str	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e017      	b.n	8009402 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	3b01      	subs	r3, #1
 80093e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	4013      	ands	r3, r2
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	bf0c      	ite	eq
 80093f2:	2301      	moveq	r3, #1
 80093f4:	2300      	movne	r3, #0
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	461a      	mov	r2, r3
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d19b      	bne.n	8009338 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3720      	adds	r7, #32
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	20000000 	.word	0x20000000

08009410 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b08a      	sub	sp, #40	; 0x28
 8009414:	af00      	add	r7, sp, #0
 8009416:	60f8      	str	r0, [r7, #12]
 8009418:	60b9      	str	r1, [r7, #8]
 800941a:	607a      	str	r2, [r7, #4]
 800941c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009422:	f7f9 fafd 	bl	8002a20 <HAL_GetTick>
 8009426:	4602      	mov	r2, r0
 8009428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942a:	1a9b      	subs	r3, r3, r2
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	4413      	add	r3, r2
 8009430:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009432:	f7f9 faf5 	bl	8002a20 <HAL_GetTick>
 8009436:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	330c      	adds	r3, #12
 800943e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009440:	4b3d      	ldr	r3, [pc, #244]	; (8009538 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	00da      	lsls	r2, r3, #3
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	0d1b      	lsrs	r3, r3, #20
 8009450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009452:	fb02 f303 	mul.w	r3, r2, r3
 8009456:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009458:	e060      	b.n	800951c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009460:	d107      	bne.n	8009472 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d104      	bne.n	8009472 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009468:	69fb      	ldr	r3, [r7, #28]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009470:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009478:	d050      	beq.n	800951c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800947a:	f7f9 fad1 	bl	8002a20 <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009486:	429a      	cmp	r2, r3
 8009488:	d902      	bls.n	8009490 <SPI_WaitFifoStateUntilTimeout+0x80>
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	2b00      	cmp	r3, #0
 800948e:	d13d      	bne.n	800950c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685a      	ldr	r2, [r3, #4]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800949e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	685b      	ldr	r3, [r3, #4]
 80094a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80094a8:	d111      	bne.n	80094ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094b2:	d004      	beq.n	80094be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094bc:	d107      	bne.n	80094ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094d6:	d10f      	bne.n	80094f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681a      	ldr	r2, [r3, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094e6:	601a      	str	r2, [r3, #0]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2200      	movs	r2, #0
 8009504:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009508:	2303      	movs	r3, #3
 800950a:	e010      	b.n	800952e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800950c:	69bb      	ldr	r3, [r7, #24]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009512:	2300      	movs	r3, #0
 8009514:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	3b01      	subs	r3, #1
 800951a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	689a      	ldr	r2, [r3, #8]
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	4013      	ands	r3, r2
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	d196      	bne.n	800945a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3728      	adds	r7, #40	; 0x28
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	20000000 	.word	0x20000000

0800953c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af02      	add	r7, sp, #8
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009550:	d111      	bne.n	8009576 <SPI_EndRxTransaction+0x3a>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800955a:	d004      	beq.n	8009566 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009564:	d107      	bne.n	8009576 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009574:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800957e:	d112      	bne.n	80095a6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	9300      	str	r3, [sp, #0]
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	2200      	movs	r2, #0
 8009588:	2180      	movs	r1, #128	; 0x80
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f7ff feb8 	bl	8009300 <SPI_WaitFlagStateUntilTimeout>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d021      	beq.n	80095da <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800959a:	f043 0220 	orr.w	r2, r3, #32
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e03d      	b.n	8009622 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80095a6:	4b21      	ldr	r3, [pc, #132]	; (800962c <SPI_EndRxTransaction+0xf0>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a21      	ldr	r2, [pc, #132]	; (8009630 <SPI_EndRxTransaction+0xf4>)
 80095ac:	fba2 2303 	umull	r2, r3, r2, r3
 80095b0:	0d5b      	lsrs	r3, r3, #21
 80095b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095b6:	fb02 f303 	mul.w	r3, r2, r3
 80095ba:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d00a      	beq.n	80095d8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	3b01      	subs	r3, #1
 80095c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	689b      	ldr	r3, [r3, #8]
 80095ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d2:	2b80      	cmp	r3, #128	; 0x80
 80095d4:	d0f2      	beq.n	80095bc <SPI_EndRxTransaction+0x80>
 80095d6:	e000      	b.n	80095da <SPI_EndRxTransaction+0x9e>
        break;
 80095d8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095e2:	d11d      	bne.n	8009620 <SPI_EndRxTransaction+0xe4>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ec:	d004      	beq.n	80095f8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095f6:	d113      	bne.n	8009620 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	2200      	movs	r2, #0
 8009600:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f7ff ff03 	bl	8009410 <SPI_WaitFifoStateUntilTimeout>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d007      	beq.n	8009620 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009614:	f043 0220 	orr.w	r2, r3, #32
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	e000      	b.n	8009622 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	20000000 	.word	0x20000000
 8009630:	165e9f81 	.word	0x165e9f81

08009634 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b088      	sub	sp, #32
 8009638:	af02      	add	r7, sp, #8
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2200      	movs	r2, #0
 8009648:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7ff fedf 	bl	8009410 <SPI_WaitFifoStateUntilTimeout>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d007      	beq.n	8009668 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800965c:	f043 0220 	orr.w	r2, r3, #32
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009664:	2303      	movs	r3, #3
 8009666:	e046      	b.n	80096f6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009668:	4b25      	ldr	r3, [pc, #148]	; (8009700 <SPI_EndRxTxTransaction+0xcc>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a25      	ldr	r2, [pc, #148]	; (8009704 <SPI_EndRxTxTransaction+0xd0>)
 800966e:	fba2 2303 	umull	r2, r3, r2, r3
 8009672:	0d5b      	lsrs	r3, r3, #21
 8009674:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009678:	fb02 f303 	mul.w	r3, r2, r3
 800967c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009686:	d112      	bne.n	80096ae <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	9300      	str	r3, [sp, #0]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	2200      	movs	r2, #0
 8009690:	2180      	movs	r1, #128	; 0x80
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f7ff fe34 	bl	8009300 <SPI_WaitFlagStateUntilTimeout>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d016      	beq.n	80096cc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096a2:	f043 0220 	orr.w	r2, r3, #32
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e023      	b.n	80096f6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00a      	beq.n	80096ca <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	3b01      	subs	r3, #1
 80096b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	689b      	ldr	r3, [r3, #8]
 80096c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096c4:	2b80      	cmp	r3, #128	; 0x80
 80096c6:	d0f2      	beq.n	80096ae <SPI_EndRxTxTransaction+0x7a>
 80096c8:	e000      	b.n	80096cc <SPI_EndRxTxTransaction+0x98>
        break;
 80096ca:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7ff fe99 	bl	8009410 <SPI_WaitFifoStateUntilTimeout>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d007      	beq.n	80096f4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096e8:	f043 0220 	orr.w	r2, r3, #32
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	e000      	b.n	80096f6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80096f4:	2300      	movs	r3, #0
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3718      	adds	r7, #24
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	20000000 	.word	0x20000000
 8009704:	165e9f81 	.word	0x165e9f81

08009708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e049      	b.n	80097ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d106      	bne.n	8009734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f7f8 fb7e 	bl	8001e30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3304      	adds	r3, #4
 8009744:	4619      	mov	r1, r3
 8009746:	4610      	mov	r0, r2
 8009748:	f000 faee 	bl	8009d28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2201      	movs	r2, #1
 8009750:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2201      	movs	r2, #1
 8009760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2201      	movs	r2, #1
 8009770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
	...

080097b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d001      	beq.n	80097d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e054      	b.n	800987a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2202      	movs	r2, #2
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	68da      	ldr	r2, [r3, #12]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f042 0201 	orr.w	r2, r2, #1
 80097e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a26      	ldr	r2, [pc, #152]	; (8009888 <HAL_TIM_Base_Start_IT+0xd0>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d022      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097fa:	d01d      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a22      	ldr	r2, [pc, #136]	; (800988c <HAL_TIM_Base_Start_IT+0xd4>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d018      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a21      	ldr	r2, [pc, #132]	; (8009890 <HAL_TIM_Base_Start_IT+0xd8>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d013      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a1f      	ldr	r2, [pc, #124]	; (8009894 <HAL_TIM_Base_Start_IT+0xdc>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00e      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a1e      	ldr	r2, [pc, #120]	; (8009898 <HAL_TIM_Base_Start_IT+0xe0>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d009      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a1c      	ldr	r2, [pc, #112]	; (800989c <HAL_TIM_Base_Start_IT+0xe4>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d004      	beq.n	8009838 <HAL_TIM_Base_Start_IT+0x80>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a1b      	ldr	r2, [pc, #108]	; (80098a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d115      	bne.n	8009864 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	689a      	ldr	r2, [r3, #8]
 800983e:	4b19      	ldr	r3, [pc, #100]	; (80098a4 <HAL_TIM_Base_Start_IT+0xec>)
 8009840:	4013      	ands	r3, r2
 8009842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b06      	cmp	r3, #6
 8009848:	d015      	beq.n	8009876 <HAL_TIM_Base_Start_IT+0xbe>
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009850:	d011      	beq.n	8009876 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f042 0201 	orr.w	r2, r2, #1
 8009860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009862:	e008      	b.n	8009876 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f042 0201 	orr.w	r2, r2, #1
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	e000      	b.n	8009878 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009876:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	40010000 	.word	0x40010000
 800988c:	40000400 	.word	0x40000400
 8009890:	40000800 	.word	0x40000800
 8009894:	40000c00 	.word	0x40000c00
 8009898:	40010400 	.word	0x40010400
 800989c:	40014000 	.word	0x40014000
 80098a0:	40001800 	.word	0x40001800
 80098a4:	00010007 	.word	0x00010007

080098a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	68da      	ldr	r2, [r3, #12]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f022 0201 	bic.w	r2, r2, #1
 80098be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6a1a      	ldr	r2, [r3, #32]
 80098c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80098ca:	4013      	ands	r3, r2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d10f      	bne.n	80098f0 <HAL_TIM_Base_Stop_IT+0x48>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6a1a      	ldr	r2, [r3, #32]
 80098d6:	f240 4344 	movw	r3, #1092	; 0x444
 80098da:	4013      	ands	r3, r2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d107      	bne.n	80098f0 <HAL_TIM_Base_Stop_IT+0x48>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f022 0201 	bic.w	r2, r2, #1
 80098ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2201      	movs	r2, #1
 80098f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b082      	sub	sp, #8
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	f003 0302 	and.w	r3, r3, #2
 8009918:	2b02      	cmp	r3, #2
 800991a:	d122      	bne.n	8009962 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	2b02      	cmp	r3, #2
 8009928:	d11b      	bne.n	8009962 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f06f 0202 	mvn.w	r2, #2
 8009932:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	f003 0303 	and.w	r3, r3, #3
 8009944:	2b00      	cmp	r3, #0
 8009946:	d003      	beq.n	8009950 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f000 f9cf 	bl	8009cec <HAL_TIM_IC_CaptureCallback>
 800994e:	e005      	b.n	800995c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 f9c1 	bl	8009cd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f9d2 	bl	8009d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	f003 0304 	and.w	r3, r3, #4
 800996c:	2b04      	cmp	r3, #4
 800996e:	d122      	bne.n	80099b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	f003 0304 	and.w	r3, r3, #4
 800997a:	2b04      	cmp	r3, #4
 800997c:	d11b      	bne.n	80099b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f06f 0204 	mvn.w	r2, #4
 8009986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009998:	2b00      	cmp	r3, #0
 800999a:	d003      	beq.n	80099a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f9a5 	bl	8009cec <HAL_TIM_IC_CaptureCallback>
 80099a2:	e005      	b.n	80099b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 f997 	bl	8009cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f9a8 	bl	8009d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2200      	movs	r2, #0
 80099b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	691b      	ldr	r3, [r3, #16]
 80099bc:	f003 0308 	and.w	r3, r3, #8
 80099c0:	2b08      	cmp	r3, #8
 80099c2:	d122      	bne.n	8009a0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f003 0308 	and.w	r3, r3, #8
 80099ce:	2b08      	cmp	r3, #8
 80099d0:	d11b      	bne.n	8009a0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f06f 0208 	mvn.w	r2, #8
 80099da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2204      	movs	r2, #4
 80099e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	f003 0303 	and.w	r3, r3, #3
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d003      	beq.n	80099f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f97b 	bl	8009cec <HAL_TIM_IC_CaptureCallback>
 80099f6:	e005      	b.n	8009a04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f96d 	bl	8009cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f97e 	bl	8009d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	f003 0310 	and.w	r3, r3, #16
 8009a14:	2b10      	cmp	r3, #16
 8009a16:	d122      	bne.n	8009a5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f003 0310 	and.w	r3, r3, #16
 8009a22:	2b10      	cmp	r3, #16
 8009a24:	d11b      	bne.n	8009a5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f06f 0210 	mvn.w	r2, #16
 8009a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2208      	movs	r2, #8
 8009a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	69db      	ldr	r3, [r3, #28]
 8009a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d003      	beq.n	8009a4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 f951 	bl	8009cec <HAL_TIM_IC_CaptureCallback>
 8009a4a:	e005      	b.n	8009a58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f943 	bl	8009cd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f954 	bl	8009d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d10e      	bne.n	8009a8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d107      	bne.n	8009a8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f06f 0201 	mvn.w	r2, #1
 8009a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f00d fbc5 	bl	8017214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a94:	2b80      	cmp	r3, #128	; 0x80
 8009a96:	d10e      	bne.n	8009ab6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	68db      	ldr	r3, [r3, #12]
 8009a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa2:	2b80      	cmp	r3, #128	; 0x80
 8009aa4:	d107      	bne.n	8009ab6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fb0b 	bl	800a0cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ac4:	d10e      	bne.n	8009ae4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ad0:	2b80      	cmp	r3, #128	; 0x80
 8009ad2:	d107      	bne.n	8009ae4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fafe 	bl	800a0e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aee:	2b40      	cmp	r3, #64	; 0x40
 8009af0:	d10e      	bne.n	8009b10 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afc:	2b40      	cmp	r3, #64	; 0x40
 8009afe:	d107      	bne.n	8009b10 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 f902 	bl	8009d14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	f003 0320 	and.w	r3, r3, #32
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	d10e      	bne.n	8009b3c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	f003 0320 	and.w	r3, r3, #32
 8009b28:	2b20      	cmp	r3, #32
 8009b2a:	d107      	bne.n	8009b3c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f06f 0220 	mvn.w	r2, #32
 8009b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fabe 	bl	800a0b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b3c:	bf00      	nop
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d101      	bne.n	8009b60 <HAL_TIM_ConfigClockSource+0x1c>
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	e0b4      	b.n	8009cca <HAL_TIM_ConfigClockSource+0x186>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	4b56      	ldr	r3, [pc, #344]	; (8009cd4 <HAL_TIM_ConfigClockSource+0x190>)
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009b86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	68ba      	ldr	r2, [r7, #8]
 8009b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b98:	d03e      	beq.n	8009c18 <HAL_TIM_ConfigClockSource+0xd4>
 8009b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b9e:	f200 8087 	bhi.w	8009cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8009ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba6:	f000 8086 	beq.w	8009cb6 <HAL_TIM_ConfigClockSource+0x172>
 8009baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bae:	d87f      	bhi.n	8009cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bb0:	2b70      	cmp	r3, #112	; 0x70
 8009bb2:	d01a      	beq.n	8009bea <HAL_TIM_ConfigClockSource+0xa6>
 8009bb4:	2b70      	cmp	r3, #112	; 0x70
 8009bb6:	d87b      	bhi.n	8009cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bb8:	2b60      	cmp	r3, #96	; 0x60
 8009bba:	d050      	beq.n	8009c5e <HAL_TIM_ConfigClockSource+0x11a>
 8009bbc:	2b60      	cmp	r3, #96	; 0x60
 8009bbe:	d877      	bhi.n	8009cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc0:	2b50      	cmp	r3, #80	; 0x50
 8009bc2:	d03c      	beq.n	8009c3e <HAL_TIM_ConfigClockSource+0xfa>
 8009bc4:	2b50      	cmp	r3, #80	; 0x50
 8009bc6:	d873      	bhi.n	8009cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc8:	2b40      	cmp	r3, #64	; 0x40
 8009bca:	d058      	beq.n	8009c7e <HAL_TIM_ConfigClockSource+0x13a>
 8009bcc:	2b40      	cmp	r3, #64	; 0x40
 8009bce:	d86f      	bhi.n	8009cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd0:	2b30      	cmp	r3, #48	; 0x30
 8009bd2:	d064      	beq.n	8009c9e <HAL_TIM_ConfigClockSource+0x15a>
 8009bd4:	2b30      	cmp	r3, #48	; 0x30
 8009bd6:	d86b      	bhi.n	8009cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd8:	2b20      	cmp	r3, #32
 8009bda:	d060      	beq.n	8009c9e <HAL_TIM_ConfigClockSource+0x15a>
 8009bdc:	2b20      	cmp	r3, #32
 8009bde:	d867      	bhi.n	8009cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d05c      	beq.n	8009c9e <HAL_TIM_ConfigClockSource+0x15a>
 8009be4:	2b10      	cmp	r3, #16
 8009be6:	d05a      	beq.n	8009c9e <HAL_TIM_ConfigClockSource+0x15a>
 8009be8:	e062      	b.n	8009cb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6818      	ldr	r0, [r3, #0]
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	6899      	ldr	r1, [r3, #8]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	685a      	ldr	r2, [r3, #4]
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	f000 f9af 	bl	8009f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	609a      	str	r2, [r3, #8]
      break;
 8009c16:	e04f      	b.n	8009cb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6818      	ldr	r0, [r3, #0]
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	6899      	ldr	r1, [r3, #8]
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	68db      	ldr	r3, [r3, #12]
 8009c28:	f000 f998 	bl	8009f5c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	689a      	ldr	r2, [r3, #8]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c3a:	609a      	str	r2, [r3, #8]
      break;
 8009c3c:	e03c      	b.n	8009cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6818      	ldr	r0, [r3, #0]
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	6859      	ldr	r1, [r3, #4]
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	461a      	mov	r2, r3
 8009c4c:	f000 f90c 	bl	8009e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2150      	movs	r1, #80	; 0x50
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 f965 	bl	8009f26 <TIM_ITRx_SetConfig>
      break;
 8009c5c:	e02c      	b.n	8009cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6818      	ldr	r0, [r3, #0]
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	6859      	ldr	r1, [r3, #4]
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	68db      	ldr	r3, [r3, #12]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f000 f92b 	bl	8009ec6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2160      	movs	r1, #96	; 0x60
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 f955 	bl	8009f26 <TIM_ITRx_SetConfig>
      break;
 8009c7c:	e01c      	b.n	8009cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6818      	ldr	r0, [r3, #0]
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	6859      	ldr	r1, [r3, #4]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	f000 f8ec 	bl	8009e68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	2140      	movs	r1, #64	; 0x40
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 f945 	bl	8009f26 <TIM_ITRx_SetConfig>
      break;
 8009c9c:	e00c      	b.n	8009cb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4610      	mov	r0, r2
 8009caa:	f000 f93c 	bl	8009f26 <TIM_ITRx_SetConfig>
      break;
 8009cae:	e003      	b.n	8009cb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8009cb4:	e000      	b.n	8009cb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	fffeff88 	.word	0xfffeff88

08009cd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cf4:	bf00      	nop
 8009cf6:	370c      	adds	r7, #12
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a40      	ldr	r2, [pc, #256]	; (8009e3c <TIM_Base_SetConfig+0x114>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d013      	beq.n	8009d68 <TIM_Base_SetConfig+0x40>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d46:	d00f      	beq.n	8009d68 <TIM_Base_SetConfig+0x40>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a3d      	ldr	r2, [pc, #244]	; (8009e40 <TIM_Base_SetConfig+0x118>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d00b      	beq.n	8009d68 <TIM_Base_SetConfig+0x40>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a3c      	ldr	r2, [pc, #240]	; (8009e44 <TIM_Base_SetConfig+0x11c>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d007      	beq.n	8009d68 <TIM_Base_SetConfig+0x40>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a3b      	ldr	r2, [pc, #236]	; (8009e48 <TIM_Base_SetConfig+0x120>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d003      	beq.n	8009d68 <TIM_Base_SetConfig+0x40>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a3a      	ldr	r2, [pc, #232]	; (8009e4c <TIM_Base_SetConfig+0x124>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d108      	bne.n	8009d7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a2f      	ldr	r2, [pc, #188]	; (8009e3c <TIM_Base_SetConfig+0x114>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d02b      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d88:	d027      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a2c      	ldr	r2, [pc, #176]	; (8009e40 <TIM_Base_SetConfig+0x118>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d023      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a2b      	ldr	r2, [pc, #172]	; (8009e44 <TIM_Base_SetConfig+0x11c>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d01f      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a2a      	ldr	r2, [pc, #168]	; (8009e48 <TIM_Base_SetConfig+0x120>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d01b      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a29      	ldr	r2, [pc, #164]	; (8009e4c <TIM_Base_SetConfig+0x124>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d017      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a28      	ldr	r2, [pc, #160]	; (8009e50 <TIM_Base_SetConfig+0x128>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d013      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a27      	ldr	r2, [pc, #156]	; (8009e54 <TIM_Base_SetConfig+0x12c>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d00f      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a26      	ldr	r2, [pc, #152]	; (8009e58 <TIM_Base_SetConfig+0x130>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d00b      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a25      	ldr	r2, [pc, #148]	; (8009e5c <TIM_Base_SetConfig+0x134>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d007      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a24      	ldr	r2, [pc, #144]	; (8009e60 <TIM_Base_SetConfig+0x138>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d003      	beq.n	8009dda <TIM_Base_SetConfig+0xb2>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a23      	ldr	r2, [pc, #140]	; (8009e64 <TIM_Base_SetConfig+0x13c>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d108      	bne.n	8009dec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009de0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	695b      	ldr	r3, [r3, #20]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a0a      	ldr	r2, [pc, #40]	; (8009e3c <TIM_Base_SetConfig+0x114>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d003      	beq.n	8009e20 <TIM_Base_SetConfig+0xf8>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a0c      	ldr	r2, [pc, #48]	; (8009e4c <TIM_Base_SetConfig+0x124>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d103      	bne.n	8009e28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	691a      	ldr	r2, [r3, #16]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	615a      	str	r2, [r3, #20]
}
 8009e2e:	bf00      	nop
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	40010000 	.word	0x40010000
 8009e40:	40000400 	.word	0x40000400
 8009e44:	40000800 	.word	0x40000800
 8009e48:	40000c00 	.word	0x40000c00
 8009e4c:	40010400 	.word	0x40010400
 8009e50:	40014000 	.word	0x40014000
 8009e54:	40014400 	.word	0x40014400
 8009e58:	40014800 	.word	0x40014800
 8009e5c:	40001800 	.word	0x40001800
 8009e60:	40001c00 	.word	0x40001c00
 8009e64:	40002000 	.word	0x40002000

08009e68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b087      	sub	sp, #28
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6a1b      	ldr	r3, [r3, #32]
 8009e78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	f023 0201 	bic.w	r2, r3, #1
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	699b      	ldr	r3, [r3, #24]
 8009e8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	011b      	lsls	r3, r3, #4
 8009e98:	693a      	ldr	r2, [r7, #16]
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	f023 030a 	bic.w	r3, r3, #10
 8009ea4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	697a      	ldr	r2, [r7, #20]
 8009eb8:	621a      	str	r2, [r3, #32]
}
 8009eba:	bf00      	nop
 8009ebc:	371c      	adds	r7, #28
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b087      	sub	sp, #28
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6a1b      	ldr	r3, [r3, #32]
 8009ed6:	f023 0210 	bic.w	r2, r3, #16
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6a1b      	ldr	r3, [r3, #32]
 8009ee8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ef0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	031b      	lsls	r3, r3, #12
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	011b      	lsls	r3, r3, #4
 8009f08:	693a      	ldr	r2, [r7, #16]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	621a      	str	r2, [r3, #32]
}
 8009f1a:	bf00      	nop
 8009f1c:	371c      	adds	r7, #28
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b085      	sub	sp, #20
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	f043 0307 	orr.w	r3, r3, #7
 8009f48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	68fa      	ldr	r2, [r7, #12]
 8009f4e:	609a      	str	r2, [r3, #8]
}
 8009f50:	bf00      	nop
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	b087      	sub	sp, #28
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	021a      	lsls	r2, r3, #8
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	431a      	orrs	r2, r3
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	697a      	ldr	r2, [r7, #20]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	697a      	ldr	r2, [r7, #20]
 8009f8e:	609a      	str	r2, [r3, #8]
}
 8009f90:	bf00      	nop
 8009f92:	371c      	adds	r7, #28
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d101      	bne.n	8009fb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fb0:	2302      	movs	r3, #2
 8009fb2:	e06d      	b.n	800a090 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a30      	ldr	r2, [pc, #192]	; (800a09c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d004      	beq.n	8009fe8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a2f      	ldr	r2, [pc, #188]	; (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d108      	bne.n	8009ffa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009fee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	68fa      	ldr	r2, [r7, #12]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a000:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	68fa      	ldr	r2, [r7, #12]
 800a008:	4313      	orrs	r3, r2
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a20      	ldr	r2, [pc, #128]	; (800a09c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d022      	beq.n	800a064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a026:	d01d      	beq.n	800a064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a1d      	ldr	r2, [pc, #116]	; (800a0a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d018      	beq.n	800a064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4a1c      	ldr	r2, [pc, #112]	; (800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d013      	beq.n	800a064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a1a      	ldr	r2, [pc, #104]	; (800a0ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d00e      	beq.n	800a064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a15      	ldr	r2, [pc, #84]	; (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d009      	beq.n	800a064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a16      	ldr	r2, [pc, #88]	; (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a056:	4293      	cmp	r3, r2
 800a058:	d004      	beq.n	800a064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a15      	ldr	r2, [pc, #84]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d10c      	bne.n	800a07e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a06a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	68ba      	ldr	r2, [r7, #8]
 800a072:	4313      	orrs	r3, r2
 800a074:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr
 800a09c:	40010000 	.word	0x40010000
 800a0a0:	40010400 	.word	0x40010400
 800a0a4:	40000400 	.word	0x40000400
 800a0a8:	40000800 	.word	0x40000800
 800a0ac:	40000c00 	.word	0x40000c00
 800a0b0:	40014000 	.word	0x40014000
 800a0b4:	40001800 	.word	0x40001800

0800a0b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	e040      	b.n	800a188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d106      	bne.n	800a11c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f7f7 feb0 	bl	8001e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2224      	movs	r2, #36	; 0x24
 800a120:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f022 0201 	bic.w	r2, r2, #1
 800a130:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fd3a 	bl	800abac <UART_SetConfig>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d101      	bne.n	800a142 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a13e:	2301      	movs	r3, #1
 800a140:	e022      	b.n	800a188 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	2b00      	cmp	r3, #0
 800a148:	d002      	beq.n	800a150 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 ff92 	bl	800b074 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a15e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	689a      	ldr	r2, [r3, #8]
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a16e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f042 0201 	orr.w	r2, r2, #1
 800a17e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f001 f819 	bl	800b1b8 <UART_CheckIdleState>
 800a186:	4603      	mov	r3, r0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3708      	adds	r7, #8
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b08a      	sub	sp, #40	; 0x28
 800a194:	af02      	add	r7, sp, #8
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	603b      	str	r3, [r7, #0]
 800a19c:	4613      	mov	r3, r2
 800a19e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1a4:	2b20      	cmp	r3, #32
 800a1a6:	d171      	bne.n	800a28c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <HAL_UART_Transmit+0x24>
 800a1ae:	88fb      	ldrh	r3, [r7, #6]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d101      	bne.n	800a1b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e06a      	b.n	800a28e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2221      	movs	r2, #33	; 0x21
 800a1c4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1c6:	f7f8 fc2b 	bl	8002a20 <HAL_GetTick>
 800a1ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	88fa      	ldrh	r2, [r7, #6]
 800a1d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	88fa      	ldrh	r2, [r7, #6]
 800a1d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1e4:	d108      	bne.n	800a1f8 <HAL_UART_Transmit+0x68>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d104      	bne.n	800a1f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	61bb      	str	r3, [r7, #24]
 800a1f6:	e003      	b.n	800a200 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a200:	e02c      	b.n	800a25c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	9300      	str	r3, [sp, #0]
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	2200      	movs	r2, #0
 800a20a:	2180      	movs	r1, #128	; 0x80
 800a20c:	68f8      	ldr	r0, [r7, #12]
 800a20e:	f001 f80a 	bl	800b226 <UART_WaitOnFlagUntilTimeout>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e038      	b.n	800a28e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d10b      	bne.n	800a23a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a222:	69bb      	ldr	r3, [r7, #24]
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a230:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	3302      	adds	r3, #2
 800a236:	61bb      	str	r3, [r7, #24]
 800a238:	e007      	b.n	800a24a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	781a      	ldrb	r2, [r3, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	3301      	adds	r3, #1
 800a248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a250:	b29b      	uxth	r3, r3
 800a252:	3b01      	subs	r3, #1
 800a254:	b29a      	uxth	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a262:	b29b      	uxth	r3, r3
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1cc      	bne.n	800a202 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	2200      	movs	r2, #0
 800a270:	2140      	movs	r1, #64	; 0x40
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	f000 ffd7 	bl	800b226 <UART_WaitOnFlagUntilTimeout>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e005      	b.n	800a28e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2220      	movs	r2, #32
 800a286:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	e000      	b.n	800a28e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a28c:	2302      	movs	r3, #2
  }
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3720      	adds	r7, #32
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b08a      	sub	sp, #40	; 0x28
 800a29a:	af02      	add	r7, sp, #8
 800a29c:	60f8      	str	r0, [r7, #12]
 800a29e:	60b9      	str	r1, [r7, #8]
 800a2a0:	603b      	str	r3, [r7, #0]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2ac:	2b20      	cmp	r3, #32
 800a2ae:	f040 80b1 	bne.w	800a414 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d002      	beq.n	800a2be <HAL_UART_Receive+0x28>
 800a2b8:	88fb      	ldrh	r3, [r7, #6]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e0a9      	b.n	800a416 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2222      	movs	r2, #34	; 0x22
 800a2ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2d8:	f7f8 fba2 	bl	8002a20 <HAL_GetTick>
 800a2dc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	88fa      	ldrh	r2, [r7, #6]
 800a2e2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	88fa      	ldrh	r2, [r7, #6]
 800a2ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2f6:	d10e      	bne.n	800a316 <HAL_UART_Receive+0x80>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	691b      	ldr	r3, [r3, #16]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d105      	bne.n	800a30c <HAL_UART_Receive+0x76>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a306:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a30a:	e02d      	b.n	800a368 <HAL_UART_Receive+0xd2>
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	22ff      	movs	r2, #255	; 0xff
 800a310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a314:	e028      	b.n	800a368 <HAL_UART_Receive+0xd2>
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	689b      	ldr	r3, [r3, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10d      	bne.n	800a33a <HAL_UART_Receive+0xa4>
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d104      	bne.n	800a330 <HAL_UART_Receive+0x9a>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	22ff      	movs	r2, #255	; 0xff
 800a32a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a32e:	e01b      	b.n	800a368 <HAL_UART_Receive+0xd2>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	227f      	movs	r2, #127	; 0x7f
 800a334:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a338:	e016      	b.n	800a368 <HAL_UART_Receive+0xd2>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a342:	d10d      	bne.n	800a360 <HAL_UART_Receive+0xca>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d104      	bne.n	800a356 <HAL_UART_Receive+0xc0>
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	227f      	movs	r2, #127	; 0x7f
 800a350:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a354:	e008      	b.n	800a368 <HAL_UART_Receive+0xd2>
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	223f      	movs	r2, #63	; 0x3f
 800a35a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a35e:	e003      	b.n	800a368 <HAL_UART_Receive+0xd2>
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a36e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a378:	d108      	bne.n	800a38c <HAL_UART_Receive+0xf6>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d104      	bne.n	800a38c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a382:	2300      	movs	r3, #0
 800a384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	61bb      	str	r3, [r7, #24]
 800a38a:	e003      	b.n	800a394 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a390:	2300      	movs	r3, #0
 800a392:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a394:	e032      	b.n	800a3fc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2200      	movs	r2, #0
 800a39e:	2120      	movs	r1, #32
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f000 ff40 	bl	800b226 <UART_WaitOnFlagUntilTimeout>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e032      	b.n	800a416 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10c      	bne.n	800a3d0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	b29a      	uxth	r2, r3
 800a3be:	8a7b      	ldrh	r3, [r7, #18]
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	b29a      	uxth	r2, r3
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a3c8:	69bb      	ldr	r3, [r7, #24]
 800a3ca:	3302      	adds	r3, #2
 800a3cc:	61bb      	str	r3, [r7, #24]
 800a3ce:	e00c      	b.n	800a3ea <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	8a7b      	ldrh	r3, [r7, #18]
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	4013      	ands	r3, r2
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a402:	b29b      	uxth	r3, r3
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1c6      	bne.n	800a396 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2220      	movs	r2, #32
 800a40c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	e000      	b.n	800a416 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800a414:	2302      	movs	r3, #2
  }
}
 800a416:	4618      	mov	r0, r3
 800a418:	3720      	adds	r7, #32
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
	...

0800a420 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b08a      	sub	sp, #40	; 0x28
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	4613      	mov	r3, r2
 800a42c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a432:	2b20      	cmp	r3, #32
 800a434:	d165      	bne.n	800a502 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <HAL_UART_Transmit_DMA+0x22>
 800a43c:	88fb      	ldrh	r3, [r7, #6]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d101      	bne.n	800a446 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	e05e      	b.n	800a504 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	68ba      	ldr	r2, [r7, #8]
 800a44a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	88fa      	ldrh	r2, [r7, #6]
 800a450:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	88fa      	ldrh	r2, [r7, #6]
 800a458:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2221      	movs	r2, #33	; 0x21
 800a468:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d027      	beq.n	800a4c2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a476:	4a25      	ldr	r2, [pc, #148]	; (800a50c <HAL_UART_Transmit_DMA+0xec>)
 800a478:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a47e:	4a24      	ldr	r2, [pc, #144]	; (800a510 <HAL_UART_Transmit_DMA+0xf0>)
 800a480:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a486:	4a23      	ldr	r2, [pc, #140]	; (800a514 <HAL_UART_Transmit_DMA+0xf4>)
 800a488:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48e:	2200      	movs	r2, #0
 800a490:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a49a:	4619      	mov	r1, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3328      	adds	r3, #40	; 0x28
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	88fb      	ldrh	r3, [r7, #6]
 800a4a6:	f7f9 fac1 	bl	8003a2c <HAL_DMA_Start_IT>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d008      	beq.n	800a4c2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2210      	movs	r2, #16
 800a4b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2220      	movs	r2, #32
 800a4bc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e020      	b.n	800a504 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2240      	movs	r2, #64	; 0x40
 800a4c8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	e853 3f00 	ldrex	r3, [r3]
 800a4d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	3308      	adds	r3, #8
 800a4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ea:	623a      	str	r2, [r7, #32]
 800a4ec:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ee:	69f9      	ldr	r1, [r7, #28]
 800a4f0:	6a3a      	ldr	r2, [r7, #32]
 800a4f2:	e841 2300 	strex	r3, r2, [r1]
 800a4f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d1e5      	bne.n	800a4ca <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	e000      	b.n	800a504 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800a502:	2302      	movs	r3, #2
  }
}
 800a504:	4618      	mov	r0, r3
 800a506:	3728      	adds	r7, #40	; 0x28
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}
 800a50c:	0800b609 	.word	0x0800b609
 800a510:	0800b69f 	.word	0x0800b69f
 800a514:	0800b821 	.word	0x0800b821

0800a518 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b08a      	sub	sp, #40	; 0x28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	4613      	mov	r3, r2
 800a524:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a52c:	2b20      	cmp	r3, #32
 800a52e:	d132      	bne.n	800a596 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d002      	beq.n	800a53c <HAL_UART_Receive_DMA+0x24>
 800a536:	88fb      	ldrh	r3, [r7, #6]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e02b      	b.n	800a598 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a550:	2b00      	cmp	r3, #0
 800a552:	d018      	beq.n	800a586 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	e853 3f00 	ldrex	r3, [r3]
 800a560:	613b      	str	r3, [r7, #16]
   return(result);
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a568:	627b      	str	r3, [r7, #36]	; 0x24
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	461a      	mov	r2, r3
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	623b      	str	r3, [r7, #32]
 800a574:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a576:	69f9      	ldr	r1, [r7, #28]
 800a578:	6a3a      	ldr	r2, [r7, #32]
 800a57a:	e841 2300 	strex	r3, r2, [r1]
 800a57e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a580:	69bb      	ldr	r3, [r7, #24]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1e6      	bne.n	800a554 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a586:	88fb      	ldrh	r3, [r7, #6]
 800a588:	461a      	mov	r2, r3
 800a58a:	68b9      	ldr	r1, [r7, #8]
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 ff11 	bl	800b3b4 <UART_Start_Receive_DMA>
 800a592:	4603      	mov	r3, r0
 800a594:	e000      	b.n	800a598 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a596:	2302      	movs	r3, #2
  }
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3728      	adds	r7, #40	; 0x28
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b0ba      	sub	sp, #232	; 0xe8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	69db      	ldr	r3, [r3, #28]
 800a5ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a5c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a5ca:	f640 030f 	movw	r3, #2063	; 0x80f
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a5d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d115      	bne.n	800a608 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a5dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5e0:	f003 0320 	and.w	r3, r3, #32
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00f      	beq.n	800a608 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a5e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5ec:	f003 0320 	and.w	r3, r3, #32
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d009      	beq.n	800a608 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f000 8297 	beq.w	800ab2c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	4798      	blx	r3
      }
      return;
 800a606:	e291      	b.n	800ab2c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 8117 	beq.w	800a840 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d106      	bne.n	800a62c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800a61e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a622:	4b85      	ldr	r3, [pc, #532]	; (800a838 <HAL_UART_IRQHandler+0x298>)
 800a624:	4013      	ands	r3, r2
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 810a 	beq.w	800a840 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a62c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	2b00      	cmp	r3, #0
 800a636:	d011      	beq.n	800a65c <HAL_UART_IRQHandler+0xbc>
 800a638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a63c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a640:	2b00      	cmp	r3, #0
 800a642:	d00b      	beq.n	800a65c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2201      	movs	r2, #1
 800a64a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a652:	f043 0201 	orr.w	r2, r3, #1
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a65c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a660:	f003 0302 	and.w	r3, r3, #2
 800a664:	2b00      	cmp	r3, #0
 800a666:	d011      	beq.n	800a68c <HAL_UART_IRQHandler+0xec>
 800a668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00b      	beq.n	800a68c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2202      	movs	r2, #2
 800a67a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a682:	f043 0204 	orr.w	r2, r3, #4
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a68c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a690:	f003 0304 	and.w	r3, r3, #4
 800a694:	2b00      	cmp	r3, #0
 800a696:	d011      	beq.n	800a6bc <HAL_UART_IRQHandler+0x11c>
 800a698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a69c:	f003 0301 	and.w	r3, r3, #1
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00b      	beq.n	800a6bc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	2204      	movs	r2, #4
 800a6aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6b2:	f043 0202 	orr.w	r2, r3, #2
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a6bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6c0:	f003 0308 	and.w	r3, r3, #8
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d017      	beq.n	800a6f8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a6c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6cc:	f003 0320 	and.w	r3, r3, #32
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d105      	bne.n	800a6e0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a6d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6d8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00b      	beq.n	800a6f8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2208      	movs	r2, #8
 800a6e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6ee:	f043 0208 	orr.w	r2, r3, #8
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a6f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a700:	2b00      	cmp	r3, #0
 800a702:	d012      	beq.n	800a72a <HAL_UART_IRQHandler+0x18a>
 800a704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a708:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00c      	beq.n	800a72a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a720:	f043 0220 	orr.w	r2, r3, #32
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a730:	2b00      	cmp	r3, #0
 800a732:	f000 81fd 	beq.w	800ab30 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a73a:	f003 0320 	and.w	r3, r3, #32
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00d      	beq.n	800a75e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a746:	f003 0320 	and.w	r3, r3, #32
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d007      	beq.n	800a75e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a752:	2b00      	cmp	r3, #0
 800a754:	d003      	beq.n	800a75e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a764:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	689b      	ldr	r3, [r3, #8]
 800a76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a772:	2b40      	cmp	r3, #64	; 0x40
 800a774:	d005      	beq.n	800a782 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a77a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d04f      	beq.n	800a822 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f000 fedc 	bl	800b540 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a792:	2b40      	cmp	r3, #64	; 0x40
 800a794:	d141      	bne.n	800a81a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3308      	adds	r3, #8
 800a79c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a7a4:	e853 3f00 	ldrex	r3, [r3]
 800a7a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a7ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3308      	adds	r3, #8
 800a7be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a7c2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a7c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a7ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a7d2:	e841 2300 	strex	r3, r2, [r1]
 800a7d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a7da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1d9      	bne.n	800a796 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d013      	beq.n	800a812 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7ee:	4a13      	ldr	r2, [pc, #76]	; (800a83c <HAL_UART_IRQHandler+0x29c>)
 800a7f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7f9 f9e8 	bl	8003bcc <HAL_DMA_Abort_IT>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d017      	beq.n	800a832 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a808:	687a      	ldr	r2, [r7, #4]
 800a80a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a80c:	4610      	mov	r0, r2
 800a80e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a810:	e00f      	b.n	800a832 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 f9b4 	bl	800ab80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a818:	e00b      	b.n	800a832 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 f9b0 	bl	800ab80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a820:	e007      	b.n	800a832 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f9ac 	bl	800ab80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800a830:	e17e      	b.n	800ab30 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a832:	bf00      	nop
    return;
 800a834:	e17c      	b.n	800ab30 <HAL_UART_IRQHandler+0x590>
 800a836:	bf00      	nop
 800a838:	04000120 	.word	0x04000120
 800a83c:	0800b89f 	.word	0x0800b89f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a844:	2b01      	cmp	r3, #1
 800a846:	f040 814c 	bne.w	800aae2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a84a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a84e:	f003 0310 	and.w	r3, r3, #16
 800a852:	2b00      	cmp	r3, #0
 800a854:	f000 8145 	beq.w	800aae2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a85c:	f003 0310 	and.w	r3, r3, #16
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 813e 	beq.w	800aae2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	2210      	movs	r2, #16
 800a86c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a878:	2b40      	cmp	r3, #64	; 0x40
 800a87a:	f040 80b6 	bne.w	800a9ea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	685b      	ldr	r3, [r3, #4]
 800a886:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a88a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a88e:	2b00      	cmp	r3, #0
 800a890:	f000 8150 	beq.w	800ab34 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a89a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	f080 8148 	bcs.w	800ab34 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a8aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8b2:	69db      	ldr	r3, [r3, #28]
 800a8b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8b8:	f000 8086 	beq.w	800a9c8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a8d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a8d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a8ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a8f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a8f6:	e841 2300 	strex	r3, r2, [r1]
 800a8fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a8fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1da      	bne.n	800a8bc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	3308      	adds	r3, #8
 800a90c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a90e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a910:	e853 3f00 	ldrex	r3, [r3]
 800a914:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a918:	f023 0301 	bic.w	r3, r3, #1
 800a91c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3308      	adds	r3, #8
 800a926:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a92a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a92e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a930:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a932:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a936:	e841 2300 	strex	r3, r2, [r1]
 800a93a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a93c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1e1      	bne.n	800a906 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	3308      	adds	r3, #8
 800a948:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a958:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3308      	adds	r3, #8
 800a962:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a966:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a968:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a96c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a96e:	e841 2300 	strex	r3, r2, [r1]
 800a972:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1e3      	bne.n	800a942 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2220      	movs	r2, #32
 800a97e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a990:	e853 3f00 	ldrex	r3, [r3]
 800a994:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a998:	f023 0310 	bic.w	r3, r3, #16
 800a99c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	461a      	mov	r2, r3
 800a9a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a9b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a9b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e4      	bne.n	800a988 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7f9 f892 	bl	8003aec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2202      	movs	r2, #2
 800a9cc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f8d6 	bl	800ab94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9e8:	e0a4      	b.n	800ab34 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	1ad3      	subs	r3, r2, r3
 800a9fa:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aa04:	b29b      	uxth	r3, r3
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 8096 	beq.w	800ab38 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800aa0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	f000 8091 	beq.w	800ab38 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa1e:	e853 3f00 	ldrex	r3, [r3]
 800aa22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aa24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800aa2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	461a      	mov	r2, r3
 800aa34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aa38:	647b      	str	r3, [r7, #68]	; 0x44
 800aa3a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aa3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa40:	e841 2300 	strex	r3, r2, [r1]
 800aa44:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800aa46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e4      	bne.n	800aa16 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	3308      	adds	r3, #8
 800aa52:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	623b      	str	r3, [r7, #32]
   return(result);
 800aa5c:	6a3b      	ldr	r3, [r7, #32]
 800aa5e:	f023 0301 	bic.w	r3, r3, #1
 800aa62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	3308      	adds	r3, #8
 800aa6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800aa70:	633a      	str	r2, [r7, #48]	; 0x30
 800aa72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aa76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa78:	e841 2300 	strex	r3, r2, [r1]
 800aa7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800aa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e3      	bne.n	800aa4c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2220      	movs	r2, #32
 800aa88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	e853 3f00 	ldrex	r3, [r3]
 800aaa4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	f023 0310 	bic.w	r3, r3, #16
 800aaac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	461a      	mov	r2, r3
 800aab6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aaba:	61fb      	str	r3, [r7, #28]
 800aabc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aabe:	69b9      	ldr	r1, [r7, #24]
 800aac0:	69fa      	ldr	r2, [r7, #28]
 800aac2:	e841 2300 	strex	r3, r2, [r1]
 800aac6:	617b      	str	r3, [r7, #20]
   return(result);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1e4      	bne.n	800aa98 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2202      	movs	r2, #2
 800aad2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aad4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800aad8:	4619      	mov	r1, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 f85a 	bl	800ab94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aae0:	e02a      	b.n	800ab38 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800aae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00e      	beq.n	800ab0c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800aaee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d008      	beq.n	800ab0c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d01c      	beq.n	800ab3c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	4798      	blx	r3
    }
    return;
 800ab0a:	e017      	b.n	800ab3c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ab10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d012      	beq.n	800ab3e <HAL_UART_IRQHandler+0x59e>
 800ab18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00c      	beq.n	800ab3e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fed0 	bl	800b8ca <UART_EndTransmit_IT>
    return;
 800ab2a:	e008      	b.n	800ab3e <HAL_UART_IRQHandler+0x59e>
      return;
 800ab2c:	bf00      	nop
 800ab2e:	e006      	b.n	800ab3e <HAL_UART_IRQHandler+0x59e>
    return;
 800ab30:	bf00      	nop
 800ab32:	e004      	b.n	800ab3e <HAL_UART_IRQHandler+0x59e>
      return;
 800ab34:	bf00      	nop
 800ab36:	e002      	b.n	800ab3e <HAL_UART_IRQHandler+0x59e>
      return;
 800ab38:	bf00      	nop
 800ab3a:	e000      	b.n	800ab3e <HAL_UART_IRQHandler+0x59e>
    return;
 800ab3c:	bf00      	nop
  }

}
 800ab3e:	37e8      	adds	r7, #232	; 0xe8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ab74:	bf00      	nop
 800ab76:	370c      	adds	r7, #12
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr

0800ab80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab88:	bf00      	nop
 800ab8a:	370c      	adds	r7, #12
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b083      	sub	sp, #12
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b088      	sub	sp, #32
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	689a      	ldr	r2, [r3, #8]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	431a      	orrs	r2, r3
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	431a      	orrs	r2, r3
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	69db      	ldr	r3, [r3, #28]
 800abcc:	4313      	orrs	r3, r2
 800abce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	4ba6      	ldr	r3, [pc, #664]	; (800ae70 <UART_SetConfig+0x2c4>)
 800abd8:	4013      	ands	r3, r2
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	6812      	ldr	r2, [r2, #0]
 800abde:	6979      	ldr	r1, [r7, #20]
 800abe0:	430b      	orrs	r3, r1
 800abe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	68da      	ldr	r2, [r3, #12]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	430a      	orrs	r2, r1
 800abf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	699b      	ldr	r3, [r3, #24]
 800abfe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	4313      	orrs	r3, r2
 800ac08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a94      	ldr	r2, [pc, #592]	; (800ae74 <UART_SetConfig+0x2c8>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d120      	bne.n	800ac6a <UART_SetConfig+0xbe>
 800ac28:	4b93      	ldr	r3, [pc, #588]	; (800ae78 <UART_SetConfig+0x2cc>)
 800ac2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac2e:	f003 0303 	and.w	r3, r3, #3
 800ac32:	2b03      	cmp	r3, #3
 800ac34:	d816      	bhi.n	800ac64 <UART_SetConfig+0xb8>
 800ac36:	a201      	add	r2, pc, #4	; (adr r2, 800ac3c <UART_SetConfig+0x90>)
 800ac38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac3c:	0800ac4d 	.word	0x0800ac4d
 800ac40:	0800ac59 	.word	0x0800ac59
 800ac44:	0800ac53 	.word	0x0800ac53
 800ac48:	0800ac5f 	.word	0x0800ac5f
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	77fb      	strb	r3, [r7, #31]
 800ac50:	e150      	b.n	800aef4 <UART_SetConfig+0x348>
 800ac52:	2302      	movs	r3, #2
 800ac54:	77fb      	strb	r3, [r7, #31]
 800ac56:	e14d      	b.n	800aef4 <UART_SetConfig+0x348>
 800ac58:	2304      	movs	r3, #4
 800ac5a:	77fb      	strb	r3, [r7, #31]
 800ac5c:	e14a      	b.n	800aef4 <UART_SetConfig+0x348>
 800ac5e:	2308      	movs	r3, #8
 800ac60:	77fb      	strb	r3, [r7, #31]
 800ac62:	e147      	b.n	800aef4 <UART_SetConfig+0x348>
 800ac64:	2310      	movs	r3, #16
 800ac66:	77fb      	strb	r3, [r7, #31]
 800ac68:	e144      	b.n	800aef4 <UART_SetConfig+0x348>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a83      	ldr	r2, [pc, #524]	; (800ae7c <UART_SetConfig+0x2d0>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d132      	bne.n	800acda <UART_SetConfig+0x12e>
 800ac74:	4b80      	ldr	r3, [pc, #512]	; (800ae78 <UART_SetConfig+0x2cc>)
 800ac76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac7a:	f003 030c 	and.w	r3, r3, #12
 800ac7e:	2b0c      	cmp	r3, #12
 800ac80:	d828      	bhi.n	800acd4 <UART_SetConfig+0x128>
 800ac82:	a201      	add	r2, pc, #4	; (adr r2, 800ac88 <UART_SetConfig+0xdc>)
 800ac84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac88:	0800acbd 	.word	0x0800acbd
 800ac8c:	0800acd5 	.word	0x0800acd5
 800ac90:	0800acd5 	.word	0x0800acd5
 800ac94:	0800acd5 	.word	0x0800acd5
 800ac98:	0800acc9 	.word	0x0800acc9
 800ac9c:	0800acd5 	.word	0x0800acd5
 800aca0:	0800acd5 	.word	0x0800acd5
 800aca4:	0800acd5 	.word	0x0800acd5
 800aca8:	0800acc3 	.word	0x0800acc3
 800acac:	0800acd5 	.word	0x0800acd5
 800acb0:	0800acd5 	.word	0x0800acd5
 800acb4:	0800acd5 	.word	0x0800acd5
 800acb8:	0800accf 	.word	0x0800accf
 800acbc:	2300      	movs	r3, #0
 800acbe:	77fb      	strb	r3, [r7, #31]
 800acc0:	e118      	b.n	800aef4 <UART_SetConfig+0x348>
 800acc2:	2302      	movs	r3, #2
 800acc4:	77fb      	strb	r3, [r7, #31]
 800acc6:	e115      	b.n	800aef4 <UART_SetConfig+0x348>
 800acc8:	2304      	movs	r3, #4
 800acca:	77fb      	strb	r3, [r7, #31]
 800accc:	e112      	b.n	800aef4 <UART_SetConfig+0x348>
 800acce:	2308      	movs	r3, #8
 800acd0:	77fb      	strb	r3, [r7, #31]
 800acd2:	e10f      	b.n	800aef4 <UART_SetConfig+0x348>
 800acd4:	2310      	movs	r3, #16
 800acd6:	77fb      	strb	r3, [r7, #31]
 800acd8:	e10c      	b.n	800aef4 <UART_SetConfig+0x348>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a68      	ldr	r2, [pc, #416]	; (800ae80 <UART_SetConfig+0x2d4>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d120      	bne.n	800ad26 <UART_SetConfig+0x17a>
 800ace4:	4b64      	ldr	r3, [pc, #400]	; (800ae78 <UART_SetConfig+0x2cc>)
 800ace6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800acee:	2b30      	cmp	r3, #48	; 0x30
 800acf0:	d013      	beq.n	800ad1a <UART_SetConfig+0x16e>
 800acf2:	2b30      	cmp	r3, #48	; 0x30
 800acf4:	d814      	bhi.n	800ad20 <UART_SetConfig+0x174>
 800acf6:	2b20      	cmp	r3, #32
 800acf8:	d009      	beq.n	800ad0e <UART_SetConfig+0x162>
 800acfa:	2b20      	cmp	r3, #32
 800acfc:	d810      	bhi.n	800ad20 <UART_SetConfig+0x174>
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d002      	beq.n	800ad08 <UART_SetConfig+0x15c>
 800ad02:	2b10      	cmp	r3, #16
 800ad04:	d006      	beq.n	800ad14 <UART_SetConfig+0x168>
 800ad06:	e00b      	b.n	800ad20 <UART_SetConfig+0x174>
 800ad08:	2300      	movs	r3, #0
 800ad0a:	77fb      	strb	r3, [r7, #31]
 800ad0c:	e0f2      	b.n	800aef4 <UART_SetConfig+0x348>
 800ad0e:	2302      	movs	r3, #2
 800ad10:	77fb      	strb	r3, [r7, #31]
 800ad12:	e0ef      	b.n	800aef4 <UART_SetConfig+0x348>
 800ad14:	2304      	movs	r3, #4
 800ad16:	77fb      	strb	r3, [r7, #31]
 800ad18:	e0ec      	b.n	800aef4 <UART_SetConfig+0x348>
 800ad1a:	2308      	movs	r3, #8
 800ad1c:	77fb      	strb	r3, [r7, #31]
 800ad1e:	e0e9      	b.n	800aef4 <UART_SetConfig+0x348>
 800ad20:	2310      	movs	r3, #16
 800ad22:	77fb      	strb	r3, [r7, #31]
 800ad24:	e0e6      	b.n	800aef4 <UART_SetConfig+0x348>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a56      	ldr	r2, [pc, #344]	; (800ae84 <UART_SetConfig+0x2d8>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d120      	bne.n	800ad72 <UART_SetConfig+0x1c6>
 800ad30:	4b51      	ldr	r3, [pc, #324]	; (800ae78 <UART_SetConfig+0x2cc>)
 800ad32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ad3a:	2bc0      	cmp	r3, #192	; 0xc0
 800ad3c:	d013      	beq.n	800ad66 <UART_SetConfig+0x1ba>
 800ad3e:	2bc0      	cmp	r3, #192	; 0xc0
 800ad40:	d814      	bhi.n	800ad6c <UART_SetConfig+0x1c0>
 800ad42:	2b80      	cmp	r3, #128	; 0x80
 800ad44:	d009      	beq.n	800ad5a <UART_SetConfig+0x1ae>
 800ad46:	2b80      	cmp	r3, #128	; 0x80
 800ad48:	d810      	bhi.n	800ad6c <UART_SetConfig+0x1c0>
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d002      	beq.n	800ad54 <UART_SetConfig+0x1a8>
 800ad4e:	2b40      	cmp	r3, #64	; 0x40
 800ad50:	d006      	beq.n	800ad60 <UART_SetConfig+0x1b4>
 800ad52:	e00b      	b.n	800ad6c <UART_SetConfig+0x1c0>
 800ad54:	2300      	movs	r3, #0
 800ad56:	77fb      	strb	r3, [r7, #31]
 800ad58:	e0cc      	b.n	800aef4 <UART_SetConfig+0x348>
 800ad5a:	2302      	movs	r3, #2
 800ad5c:	77fb      	strb	r3, [r7, #31]
 800ad5e:	e0c9      	b.n	800aef4 <UART_SetConfig+0x348>
 800ad60:	2304      	movs	r3, #4
 800ad62:	77fb      	strb	r3, [r7, #31]
 800ad64:	e0c6      	b.n	800aef4 <UART_SetConfig+0x348>
 800ad66:	2308      	movs	r3, #8
 800ad68:	77fb      	strb	r3, [r7, #31]
 800ad6a:	e0c3      	b.n	800aef4 <UART_SetConfig+0x348>
 800ad6c:	2310      	movs	r3, #16
 800ad6e:	77fb      	strb	r3, [r7, #31]
 800ad70:	e0c0      	b.n	800aef4 <UART_SetConfig+0x348>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a44      	ldr	r2, [pc, #272]	; (800ae88 <UART_SetConfig+0x2dc>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d125      	bne.n	800adc8 <UART_SetConfig+0x21c>
 800ad7c:	4b3e      	ldr	r3, [pc, #248]	; (800ae78 <UART_SetConfig+0x2cc>)
 800ad7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad8a:	d017      	beq.n	800adbc <UART_SetConfig+0x210>
 800ad8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad90:	d817      	bhi.n	800adc2 <UART_SetConfig+0x216>
 800ad92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad96:	d00b      	beq.n	800adb0 <UART_SetConfig+0x204>
 800ad98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad9c:	d811      	bhi.n	800adc2 <UART_SetConfig+0x216>
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d003      	beq.n	800adaa <UART_SetConfig+0x1fe>
 800ada2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ada6:	d006      	beq.n	800adb6 <UART_SetConfig+0x20a>
 800ada8:	e00b      	b.n	800adc2 <UART_SetConfig+0x216>
 800adaa:	2300      	movs	r3, #0
 800adac:	77fb      	strb	r3, [r7, #31]
 800adae:	e0a1      	b.n	800aef4 <UART_SetConfig+0x348>
 800adb0:	2302      	movs	r3, #2
 800adb2:	77fb      	strb	r3, [r7, #31]
 800adb4:	e09e      	b.n	800aef4 <UART_SetConfig+0x348>
 800adb6:	2304      	movs	r3, #4
 800adb8:	77fb      	strb	r3, [r7, #31]
 800adba:	e09b      	b.n	800aef4 <UART_SetConfig+0x348>
 800adbc:	2308      	movs	r3, #8
 800adbe:	77fb      	strb	r3, [r7, #31]
 800adc0:	e098      	b.n	800aef4 <UART_SetConfig+0x348>
 800adc2:	2310      	movs	r3, #16
 800adc4:	77fb      	strb	r3, [r7, #31]
 800adc6:	e095      	b.n	800aef4 <UART_SetConfig+0x348>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a2f      	ldr	r2, [pc, #188]	; (800ae8c <UART_SetConfig+0x2e0>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d125      	bne.n	800ae1e <UART_SetConfig+0x272>
 800add2:	4b29      	ldr	r3, [pc, #164]	; (800ae78 <UART_SetConfig+0x2cc>)
 800add4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800add8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800addc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ade0:	d017      	beq.n	800ae12 <UART_SetConfig+0x266>
 800ade2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ade6:	d817      	bhi.n	800ae18 <UART_SetConfig+0x26c>
 800ade8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adec:	d00b      	beq.n	800ae06 <UART_SetConfig+0x25a>
 800adee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adf2:	d811      	bhi.n	800ae18 <UART_SetConfig+0x26c>
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d003      	beq.n	800ae00 <UART_SetConfig+0x254>
 800adf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adfc:	d006      	beq.n	800ae0c <UART_SetConfig+0x260>
 800adfe:	e00b      	b.n	800ae18 <UART_SetConfig+0x26c>
 800ae00:	2301      	movs	r3, #1
 800ae02:	77fb      	strb	r3, [r7, #31]
 800ae04:	e076      	b.n	800aef4 <UART_SetConfig+0x348>
 800ae06:	2302      	movs	r3, #2
 800ae08:	77fb      	strb	r3, [r7, #31]
 800ae0a:	e073      	b.n	800aef4 <UART_SetConfig+0x348>
 800ae0c:	2304      	movs	r3, #4
 800ae0e:	77fb      	strb	r3, [r7, #31]
 800ae10:	e070      	b.n	800aef4 <UART_SetConfig+0x348>
 800ae12:	2308      	movs	r3, #8
 800ae14:	77fb      	strb	r3, [r7, #31]
 800ae16:	e06d      	b.n	800aef4 <UART_SetConfig+0x348>
 800ae18:	2310      	movs	r3, #16
 800ae1a:	77fb      	strb	r3, [r7, #31]
 800ae1c:	e06a      	b.n	800aef4 <UART_SetConfig+0x348>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a1b      	ldr	r2, [pc, #108]	; (800ae90 <UART_SetConfig+0x2e4>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d138      	bne.n	800ae9a <UART_SetConfig+0x2ee>
 800ae28:	4b13      	ldr	r3, [pc, #76]	; (800ae78 <UART_SetConfig+0x2cc>)
 800ae2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ae32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae36:	d017      	beq.n	800ae68 <UART_SetConfig+0x2bc>
 800ae38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae3c:	d82a      	bhi.n	800ae94 <UART_SetConfig+0x2e8>
 800ae3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae42:	d00b      	beq.n	800ae5c <UART_SetConfig+0x2b0>
 800ae44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae48:	d824      	bhi.n	800ae94 <UART_SetConfig+0x2e8>
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d003      	beq.n	800ae56 <UART_SetConfig+0x2aa>
 800ae4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae52:	d006      	beq.n	800ae62 <UART_SetConfig+0x2b6>
 800ae54:	e01e      	b.n	800ae94 <UART_SetConfig+0x2e8>
 800ae56:	2300      	movs	r3, #0
 800ae58:	77fb      	strb	r3, [r7, #31]
 800ae5a:	e04b      	b.n	800aef4 <UART_SetConfig+0x348>
 800ae5c:	2302      	movs	r3, #2
 800ae5e:	77fb      	strb	r3, [r7, #31]
 800ae60:	e048      	b.n	800aef4 <UART_SetConfig+0x348>
 800ae62:	2304      	movs	r3, #4
 800ae64:	77fb      	strb	r3, [r7, #31]
 800ae66:	e045      	b.n	800aef4 <UART_SetConfig+0x348>
 800ae68:	2308      	movs	r3, #8
 800ae6a:	77fb      	strb	r3, [r7, #31]
 800ae6c:	e042      	b.n	800aef4 <UART_SetConfig+0x348>
 800ae6e:	bf00      	nop
 800ae70:	efff69f3 	.word	0xefff69f3
 800ae74:	40011000 	.word	0x40011000
 800ae78:	40023800 	.word	0x40023800
 800ae7c:	40004400 	.word	0x40004400
 800ae80:	40004800 	.word	0x40004800
 800ae84:	40004c00 	.word	0x40004c00
 800ae88:	40005000 	.word	0x40005000
 800ae8c:	40011400 	.word	0x40011400
 800ae90:	40007800 	.word	0x40007800
 800ae94:	2310      	movs	r3, #16
 800ae96:	77fb      	strb	r3, [r7, #31]
 800ae98:	e02c      	b.n	800aef4 <UART_SetConfig+0x348>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a72      	ldr	r2, [pc, #456]	; (800b068 <UART_SetConfig+0x4bc>)
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d125      	bne.n	800aef0 <UART_SetConfig+0x344>
 800aea4:	4b71      	ldr	r3, [pc, #452]	; (800b06c <UART_SetConfig+0x4c0>)
 800aea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeaa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800aeae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aeb2:	d017      	beq.n	800aee4 <UART_SetConfig+0x338>
 800aeb4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800aeb8:	d817      	bhi.n	800aeea <UART_SetConfig+0x33e>
 800aeba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aebe:	d00b      	beq.n	800aed8 <UART_SetConfig+0x32c>
 800aec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aec4:	d811      	bhi.n	800aeea <UART_SetConfig+0x33e>
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d003      	beq.n	800aed2 <UART_SetConfig+0x326>
 800aeca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aece:	d006      	beq.n	800aede <UART_SetConfig+0x332>
 800aed0:	e00b      	b.n	800aeea <UART_SetConfig+0x33e>
 800aed2:	2300      	movs	r3, #0
 800aed4:	77fb      	strb	r3, [r7, #31]
 800aed6:	e00d      	b.n	800aef4 <UART_SetConfig+0x348>
 800aed8:	2302      	movs	r3, #2
 800aeda:	77fb      	strb	r3, [r7, #31]
 800aedc:	e00a      	b.n	800aef4 <UART_SetConfig+0x348>
 800aede:	2304      	movs	r3, #4
 800aee0:	77fb      	strb	r3, [r7, #31]
 800aee2:	e007      	b.n	800aef4 <UART_SetConfig+0x348>
 800aee4:	2308      	movs	r3, #8
 800aee6:	77fb      	strb	r3, [r7, #31]
 800aee8:	e004      	b.n	800aef4 <UART_SetConfig+0x348>
 800aeea:	2310      	movs	r3, #16
 800aeec:	77fb      	strb	r3, [r7, #31]
 800aeee:	e001      	b.n	800aef4 <UART_SetConfig+0x348>
 800aef0:	2310      	movs	r3, #16
 800aef2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aefc:	d15b      	bne.n	800afb6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800aefe:	7ffb      	ldrb	r3, [r7, #31]
 800af00:	2b08      	cmp	r3, #8
 800af02:	d828      	bhi.n	800af56 <UART_SetConfig+0x3aa>
 800af04:	a201      	add	r2, pc, #4	; (adr r2, 800af0c <UART_SetConfig+0x360>)
 800af06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0a:	bf00      	nop
 800af0c:	0800af31 	.word	0x0800af31
 800af10:	0800af39 	.word	0x0800af39
 800af14:	0800af41 	.word	0x0800af41
 800af18:	0800af57 	.word	0x0800af57
 800af1c:	0800af47 	.word	0x0800af47
 800af20:	0800af57 	.word	0x0800af57
 800af24:	0800af57 	.word	0x0800af57
 800af28:	0800af57 	.word	0x0800af57
 800af2c:	0800af4f 	.word	0x0800af4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af30:	f7fd f97e 	bl	8008230 <HAL_RCC_GetPCLK1Freq>
 800af34:	61b8      	str	r0, [r7, #24]
        break;
 800af36:	e013      	b.n	800af60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af38:	f7fd f98e 	bl	8008258 <HAL_RCC_GetPCLK2Freq>
 800af3c:	61b8      	str	r0, [r7, #24]
        break;
 800af3e:	e00f      	b.n	800af60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800af40:	4b4b      	ldr	r3, [pc, #300]	; (800b070 <UART_SetConfig+0x4c4>)
 800af42:	61bb      	str	r3, [r7, #24]
        break;
 800af44:	e00c      	b.n	800af60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af46:	f7fd f861 	bl	800800c <HAL_RCC_GetSysClockFreq>
 800af4a:	61b8      	str	r0, [r7, #24]
        break;
 800af4c:	e008      	b.n	800af60 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800af52:	61bb      	str	r3, [r7, #24]
        break;
 800af54:	e004      	b.n	800af60 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800af56:	2300      	movs	r3, #0
 800af58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800af5a:	2301      	movs	r3, #1
 800af5c:	77bb      	strb	r3, [r7, #30]
        break;
 800af5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d074      	beq.n	800b050 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	005a      	lsls	r2, r3, #1
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	085b      	lsrs	r3, r3, #1
 800af70:	441a      	add	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	fbb2 f3f3 	udiv	r3, r2, r3
 800af7a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	2b0f      	cmp	r3, #15
 800af80:	d916      	bls.n	800afb0 <UART_SetConfig+0x404>
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af88:	d212      	bcs.n	800afb0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	f023 030f 	bic.w	r3, r3, #15
 800af92:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	085b      	lsrs	r3, r3, #1
 800af98:	b29b      	uxth	r3, r3
 800af9a:	f003 0307 	and.w	r3, r3, #7
 800af9e:	b29a      	uxth	r2, r3
 800afa0:	89fb      	ldrh	r3, [r7, #14]
 800afa2:	4313      	orrs	r3, r2
 800afa4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	89fa      	ldrh	r2, [r7, #14]
 800afac:	60da      	str	r2, [r3, #12]
 800afae:	e04f      	b.n	800b050 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	77bb      	strb	r3, [r7, #30]
 800afb4:	e04c      	b.n	800b050 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800afb6:	7ffb      	ldrb	r3, [r7, #31]
 800afb8:	2b08      	cmp	r3, #8
 800afba:	d828      	bhi.n	800b00e <UART_SetConfig+0x462>
 800afbc:	a201      	add	r2, pc, #4	; (adr r2, 800afc4 <UART_SetConfig+0x418>)
 800afbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc2:	bf00      	nop
 800afc4:	0800afe9 	.word	0x0800afe9
 800afc8:	0800aff1 	.word	0x0800aff1
 800afcc:	0800aff9 	.word	0x0800aff9
 800afd0:	0800b00f 	.word	0x0800b00f
 800afd4:	0800afff 	.word	0x0800afff
 800afd8:	0800b00f 	.word	0x0800b00f
 800afdc:	0800b00f 	.word	0x0800b00f
 800afe0:	0800b00f 	.word	0x0800b00f
 800afe4:	0800b007 	.word	0x0800b007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afe8:	f7fd f922 	bl	8008230 <HAL_RCC_GetPCLK1Freq>
 800afec:	61b8      	str	r0, [r7, #24]
        break;
 800afee:	e013      	b.n	800b018 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aff0:	f7fd f932 	bl	8008258 <HAL_RCC_GetPCLK2Freq>
 800aff4:	61b8      	str	r0, [r7, #24]
        break;
 800aff6:	e00f      	b.n	800b018 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aff8:	4b1d      	ldr	r3, [pc, #116]	; (800b070 <UART_SetConfig+0x4c4>)
 800affa:	61bb      	str	r3, [r7, #24]
        break;
 800affc:	e00c      	b.n	800b018 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800affe:	f7fd f805 	bl	800800c <HAL_RCC_GetSysClockFreq>
 800b002:	61b8      	str	r0, [r7, #24]
        break;
 800b004:	e008      	b.n	800b018 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b00a:	61bb      	str	r3, [r7, #24]
        break;
 800b00c:	e004      	b.n	800b018 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b00e:	2300      	movs	r3, #0
 800b010:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	77bb      	strb	r3, [r7, #30]
        break;
 800b016:	bf00      	nop
    }

    if (pclk != 0U)
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d018      	beq.n	800b050 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	085a      	lsrs	r2, r3, #1
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	441a      	add	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b030:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	2b0f      	cmp	r3, #15
 800b036:	d909      	bls.n	800b04c <UART_SetConfig+0x4a0>
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b03e:	d205      	bcs.n	800b04c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	b29a      	uxth	r2, r3
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	60da      	str	r2, [r3, #12]
 800b04a:	e001      	b.n	800b050 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b04c:	2301      	movs	r3, #1
 800b04e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2200      	movs	r2, #0
 800b054:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2200      	movs	r2, #0
 800b05a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800b05c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3720      	adds	r7, #32
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	40007c00 	.word	0x40007c00
 800b06c:	40023800 	.word	0x40023800
 800b070:	00f42400 	.word	0x00f42400

0800b074 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b074:	b480      	push	{r7}
 800b076:	b083      	sub	sp, #12
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b080:	f003 0301 	and.w	r3, r3, #1
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00a      	beq.n	800b09e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	430a      	orrs	r2, r1
 800b09c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00a      	beq.n	800b0c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	430a      	orrs	r2, r1
 800b0be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c4:	f003 0304 	and.w	r3, r3, #4
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d00a      	beq.n	800b0e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	430a      	orrs	r2, r1
 800b0e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e6:	f003 0308 	and.w	r3, r3, #8
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00a      	beq.n	800b104 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	430a      	orrs	r2, r1
 800b102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b108:	f003 0310 	and.w	r3, r3, #16
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00a      	beq.n	800b126 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	430a      	orrs	r2, r1
 800b124:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12a:	f003 0320 	and.w	r3, r3, #32
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00a      	beq.n	800b148 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	430a      	orrs	r2, r1
 800b146:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b150:	2b00      	cmp	r3, #0
 800b152:	d01a      	beq.n	800b18a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	430a      	orrs	r2, r1
 800b168:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b172:	d10a      	bne.n	800b18a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	430a      	orrs	r2, r1
 800b188:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00a      	beq.n	800b1ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	430a      	orrs	r2, r1
 800b1aa:	605a      	str	r2, [r3, #4]
  }
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af02      	add	r7, sp, #8
 800b1be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b1c8:	f7f7 fc2a 	bl	8002a20 <HAL_GetTick>
 800b1cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 0308 	and.w	r3, r3, #8
 800b1d8:	2b08      	cmp	r3, #8
 800b1da:	d10e      	bne.n	800b1fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f81b 	bl	800b226 <UART_WaitOnFlagUntilTimeout>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d001      	beq.n	800b1fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1f6:	2303      	movs	r3, #3
 800b1f8:	e011      	b.n	800b21e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2220      	movs	r2, #32
 800b1fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2220      	movs	r2, #32
 800b204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2200      	movs	r2, #0
 800b20c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b09c      	sub	sp, #112	; 0x70
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	603b      	str	r3, [r7, #0]
 800b232:	4613      	mov	r3, r2
 800b234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b236:	e0a7      	b.n	800b388 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b23a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b23e:	f000 80a3 	beq.w	800b388 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b242:	f7f7 fbed 	bl	8002a20 <HAL_GetTick>
 800b246:	4602      	mov	r2, r0
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	1ad3      	subs	r3, r2, r3
 800b24c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b24e:	429a      	cmp	r2, r3
 800b250:	d302      	bcc.n	800b258 <UART_WaitOnFlagUntilTimeout+0x32>
 800b252:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b254:	2b00      	cmp	r3, #0
 800b256:	d13f      	bne.n	800b2d8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b260:	e853 3f00 	ldrex	r3, [r3]
 800b264:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b268:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b26c:	667b      	str	r3, [r7, #100]	; 0x64
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	461a      	mov	r2, r3
 800b274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b276:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b278:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b27c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b27e:	e841 2300 	strex	r3, r2, [r1]
 800b282:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1e6      	bne.n	800b258 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	3308      	adds	r3, #8
 800b290:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b294:	e853 3f00 	ldrex	r3, [r3]
 800b298:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	f023 0301 	bic.w	r3, r3, #1
 800b2a0:	663b      	str	r3, [r7, #96]	; 0x60
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	3308      	adds	r3, #8
 800b2a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b2aa:	64ba      	str	r2, [r7, #72]	; 0x48
 800b2ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2b2:	e841 2300 	strex	r3, r2, [r1]
 800b2b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b2b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d1e5      	bne.n	800b28a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2220      	movs	r2, #32
 800b2c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e068      	b.n	800b3aa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f003 0304 	and.w	r3, r3, #4
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d050      	beq.n	800b388 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	69db      	ldr	r3, [r3, #28]
 800b2ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2f4:	d148      	bne.n	800b388 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2fe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b308:	e853 3f00 	ldrex	r3, [r3]
 800b30c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b30e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b310:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b314:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	461a      	mov	r2, r3
 800b31c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b31e:	637b      	str	r3, [r7, #52]	; 0x34
 800b320:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b322:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b326:	e841 2300 	strex	r3, r2, [r1]
 800b32a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d1e6      	bne.n	800b300 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3308      	adds	r3, #8
 800b338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	e853 3f00 	ldrex	r3, [r3]
 800b340:	613b      	str	r3, [r7, #16]
   return(result);
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	f023 0301 	bic.w	r3, r3, #1
 800b348:	66bb      	str	r3, [r7, #104]	; 0x68
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	3308      	adds	r3, #8
 800b350:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b352:	623a      	str	r2, [r7, #32]
 800b354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b356:	69f9      	ldr	r1, [r7, #28]
 800b358:	6a3a      	ldr	r2, [r7, #32]
 800b35a:	e841 2300 	strex	r3, r2, [r1]
 800b35e:	61bb      	str	r3, [r7, #24]
   return(result);
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1e5      	bne.n	800b332 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2220      	movs	r2, #32
 800b36a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2220      	movs	r2, #32
 800b370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2220      	movs	r2, #32
 800b378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2200      	movs	r2, #0
 800b380:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800b384:	2303      	movs	r3, #3
 800b386:	e010      	b.n	800b3aa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	69da      	ldr	r2, [r3, #28]
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	4013      	ands	r3, r2
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	429a      	cmp	r2, r3
 800b396:	bf0c      	ite	eq
 800b398:	2301      	moveq	r3, #1
 800b39a:	2300      	movne	r3, #0
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	461a      	mov	r2, r3
 800b3a0:	79fb      	ldrb	r3, [r7, #7]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	f43f af48 	beq.w	800b238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3770      	adds	r7, #112	; 0x70
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
	...

0800b3b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b096      	sub	sp, #88	; 0x58
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	4613      	mov	r3, r2
 800b3c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	68ba      	ldr	r2, [r7, #8]
 800b3c6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	88fa      	ldrh	r2, [r7, #6]
 800b3cc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2222      	movs	r2, #34	; 0x22
 800b3dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d028      	beq.n	800b43a <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3ec:	4a3e      	ldr	r2, [pc, #248]	; (800b4e8 <UART_Start_Receive_DMA+0x134>)
 800b3ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3f4:	4a3d      	ldr	r2, [pc, #244]	; (800b4ec <UART_Start_Receive_DMA+0x138>)
 800b3f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3fc:	4a3c      	ldr	r2, [pc, #240]	; (800b4f0 <UART_Start_Receive_DMA+0x13c>)
 800b3fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b404:	2200      	movs	r2, #0
 800b406:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	3324      	adds	r3, #36	; 0x24
 800b412:	4619      	mov	r1, r3
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b418:	461a      	mov	r2, r3
 800b41a:	88fb      	ldrh	r3, [r7, #6]
 800b41c:	f7f8 fb06 	bl	8003a2c <HAL_DMA_Start_IT>
 800b420:	4603      	mov	r3, r0
 800b422:	2b00      	cmp	r3, #0
 800b424:	d009      	beq.n	800b43a <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2210      	movs	r2, #16
 800b42a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2220      	movs	r2, #32
 800b432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e051      	b.n	800b4de <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d018      	beq.n	800b474 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b44a:	e853 3f00 	ldrex	r3, [r3]
 800b44e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b452:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b456:	657b      	str	r3, [r7, #84]	; 0x54
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	461a      	mov	r2, r3
 800b45e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b460:	64bb      	str	r3, [r7, #72]	; 0x48
 800b462:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b464:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b468:	e841 2300 	strex	r3, r2, [r1]
 800b46c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b46e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b470:	2b00      	cmp	r3, #0
 800b472:	d1e6      	bne.n	800b442 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	3308      	adds	r3, #8
 800b47a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47e:	e853 3f00 	ldrex	r3, [r3]
 800b482:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	f043 0301 	orr.w	r3, r3, #1
 800b48a:	653b      	str	r3, [r7, #80]	; 0x50
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	3308      	adds	r3, #8
 800b492:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b494:	637a      	str	r2, [r7, #52]	; 0x34
 800b496:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b498:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b49a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b49c:	e841 2300 	strex	r3, r2, [r1]
 800b4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1e5      	bne.n	800b474 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3308      	adds	r3, #8
 800b4ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	e853 3f00 	ldrex	r3, [r3]
 800b4b6:	613b      	str	r3, [r7, #16]
   return(result);
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4be:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3308      	adds	r3, #8
 800b4c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b4c8:	623a      	str	r2, [r7, #32]
 800b4ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4cc:	69f9      	ldr	r1, [r7, #28]
 800b4ce:	6a3a      	ldr	r2, [r7, #32]
 800b4d0:	e841 2300 	strex	r3, r2, [r1]
 800b4d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1e5      	bne.n	800b4a8 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3758      	adds	r7, #88	; 0x58
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	0800b6bb 	.word	0x0800b6bb
 800b4ec:	0800b7e3 	.word	0x0800b7e3
 800b4f0:	0800b821 	.word	0x0800b821

0800b4f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b089      	sub	sp, #36	; 0x24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	e853 3f00 	ldrex	r3, [r3]
 800b508:	60bb      	str	r3, [r7, #8]
   return(result);
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b510:	61fb      	str	r3, [r7, #28]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	461a      	mov	r2, r3
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	61bb      	str	r3, [r7, #24]
 800b51c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51e:	6979      	ldr	r1, [r7, #20]
 800b520:	69ba      	ldr	r2, [r7, #24]
 800b522:	e841 2300 	strex	r3, r2, [r1]
 800b526:	613b      	str	r3, [r7, #16]
   return(result);
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d1e6      	bne.n	800b4fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2220      	movs	r2, #32
 800b532:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800b534:	bf00      	nop
 800b536:	3724      	adds	r7, #36	; 0x24
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b540:	b480      	push	{r7}
 800b542:	b095      	sub	sp, #84	; 0x54
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b550:	e853 3f00 	ldrex	r3, [r3]
 800b554:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b558:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b55c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	461a      	mov	r2, r3
 800b564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b566:	643b      	str	r3, [r7, #64]	; 0x40
 800b568:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b56c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b56e:	e841 2300 	strex	r3, r2, [r1]
 800b572:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1e6      	bne.n	800b548 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	3308      	adds	r3, #8
 800b580:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b582:	6a3b      	ldr	r3, [r7, #32]
 800b584:	e853 3f00 	ldrex	r3, [r3]
 800b588:	61fb      	str	r3, [r7, #28]
   return(result);
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	f023 0301 	bic.w	r3, r3, #1
 800b590:	64bb      	str	r3, [r7, #72]	; 0x48
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	3308      	adds	r3, #8
 800b598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b59a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b59c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b59e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b5a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5a2:	e841 2300 	strex	r3, r2, [r1]
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d1e5      	bne.n	800b57a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d118      	bne.n	800b5e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	e853 3f00 	ldrex	r3, [r3]
 800b5c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	f023 0310 	bic.w	r3, r3, #16
 800b5ca:	647b      	str	r3, [r7, #68]	; 0x44
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5d4:	61bb      	str	r3, [r7, #24]
 800b5d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d8:	6979      	ldr	r1, [r7, #20]
 800b5da:	69ba      	ldr	r2, [r7, #24]
 800b5dc:	e841 2300 	strex	r3, r2, [r1]
 800b5e0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d1e6      	bne.n	800b5b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2220      	movs	r2, #32
 800b5ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b5fc:	bf00      	nop
 800b5fe:	3754      	adds	r7, #84	; 0x54
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b090      	sub	sp, #64	; 0x40
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b614:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	69db      	ldr	r3, [r3, #28]
 800b61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b61e:	d037      	beq.n	800b690 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b622:	2200      	movs	r2, #0
 800b624:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b628:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	3308      	adds	r3, #8
 800b62e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	e853 3f00 	ldrex	r3, [r3]
 800b636:	623b      	str	r3, [r7, #32]
   return(result);
 800b638:	6a3b      	ldr	r3, [r7, #32]
 800b63a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b63e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	3308      	adds	r3, #8
 800b646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b648:	633a      	str	r2, [r7, #48]	; 0x30
 800b64a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b64c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b64e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b650:	e841 2300 	strex	r3, r2, [r1]
 800b654:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1e5      	bne.n	800b628 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	e853 3f00 	ldrex	r3, [r3]
 800b668:	60fb      	str	r3, [r7, #12]
   return(result);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b670:	637b      	str	r3, [r7, #52]	; 0x34
 800b672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	461a      	mov	r2, r3
 800b678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b67a:	61fb      	str	r3, [r7, #28]
 800b67c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b67e:	69b9      	ldr	r1, [r7, #24]
 800b680:	69fa      	ldr	r2, [r7, #28]
 800b682:	e841 2300 	strex	r3, r2, [r1]
 800b686:	617b      	str	r3, [r7, #20]
   return(result);
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1e6      	bne.n	800b65c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b68e:	e002      	b.n	800b696 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b690:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b692:	f7ff fa57 	bl	800ab44 <HAL_UART_TxCpltCallback>
}
 800b696:	bf00      	nop
 800b698:	3740      	adds	r7, #64	; 0x40
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}

0800b69e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b69e:	b580      	push	{r7, lr}
 800b6a0:	b084      	sub	sp, #16
 800b6a2:	af00      	add	r7, sp, #0
 800b6a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f7ff fa53 	bl	800ab58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6b2:	bf00      	nop
 800b6b4:	3710      	adds	r7, #16
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b09c      	sub	sp, #112	; 0x70
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	69db      	ldr	r3, [r3, #28]
 800b6cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6d0:	d071      	beq.n	800b7b6 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b6d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6e2:	e853 3f00 	ldrex	r3, [r3]
 800b6e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b6e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6ee:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b6f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b6fa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b6fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b700:	e841 2300 	strex	r3, r2, [r1]
 800b704:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1e6      	bne.n	800b6da <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b70c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	3308      	adds	r3, #8
 800b712:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b716:	e853 3f00 	ldrex	r3, [r3]
 800b71a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b71c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71e:	f023 0301 	bic.w	r3, r3, #1
 800b722:	667b      	str	r3, [r7, #100]	; 0x64
 800b724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3308      	adds	r3, #8
 800b72a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b72c:	647a      	str	r2, [r7, #68]	; 0x44
 800b72e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b730:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b734:	e841 2300 	strex	r3, r2, [r1]
 800b738:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b73a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d1e5      	bne.n	800b70c <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	3308      	adds	r3, #8
 800b746:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	e853 3f00 	ldrex	r3, [r3]
 800b74e:	623b      	str	r3, [r7, #32]
   return(result);
 800b750:	6a3b      	ldr	r3, [r7, #32]
 800b752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b756:	663b      	str	r3, [r7, #96]	; 0x60
 800b758:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3308      	adds	r3, #8
 800b75e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b760:	633a      	str	r2, [r7, #48]	; 0x30
 800b762:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b766:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b768:	e841 2300 	strex	r3, r2, [r1]
 800b76c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1e5      	bne.n	800b740 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b776:	2220      	movs	r2, #32
 800b778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b77c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b77e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b780:	2b01      	cmp	r3, #1
 800b782:	d118      	bne.n	800b7b6 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	e853 3f00 	ldrex	r3, [r3]
 800b790:	60fb      	str	r3, [r7, #12]
   return(result);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f023 0310 	bic.w	r3, r3, #16
 800b798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b79a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	461a      	mov	r2, r3
 800b7a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7a2:	61fb      	str	r3, [r7, #28]
 800b7a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7a6:	69b9      	ldr	r1, [r7, #24]
 800b7a8:	69fa      	ldr	r2, [r7, #28]
 800b7aa:	e841 2300 	strex	r3, r2, [r1]
 800b7ae:	617b      	str	r3, [r7, #20]
   return(result);
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1e6      	bne.n	800b784 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d107      	bne.n	800b7d4 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b7c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b7ce:	f7ff f9e1 	bl	800ab94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b7d2:	e002      	b.n	800b7da <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b7d4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b7d6:	f00b fded 	bl	80173b4 <HAL_UART_RxCpltCallback>
}
 800b7da:	bf00      	nop
 800b7dc:	3770      	adds	r7, #112	; 0x70
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b084      	sub	sp, #16
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ee:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d109      	bne.n	800b812 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b804:	085b      	lsrs	r3, r3, #1
 800b806:	b29b      	uxth	r3, r3
 800b808:	4619      	mov	r1, r3
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f7ff f9c2 	bl	800ab94 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b810:	e002      	b.n	800b818 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f7ff f9aa 	bl	800ab6c <HAL_UART_RxHalfCpltCallback>
}
 800b818:	bf00      	nop
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b086      	sub	sp, #24
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b82c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b832:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b83a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b846:	2b80      	cmp	r3, #128	; 0x80
 800b848:	d109      	bne.n	800b85e <UART_DMAError+0x3e>
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	2b21      	cmp	r3, #33	; 0x21
 800b84e:	d106      	bne.n	800b85e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	2200      	movs	r2, #0
 800b854:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800b858:	6978      	ldr	r0, [r7, #20]
 800b85a:	f7ff fe4b 	bl	800b4f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b868:	2b40      	cmp	r3, #64	; 0x40
 800b86a:	d109      	bne.n	800b880 <UART_DMAError+0x60>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b22      	cmp	r3, #34	; 0x22
 800b870:	d106      	bne.n	800b880 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	2200      	movs	r2, #0
 800b876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800b87a:	6978      	ldr	r0, [r7, #20]
 800b87c:	f7ff fe60 	bl	800b540 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b886:	f043 0210 	orr.w	r2, r3, #16
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b890:	6978      	ldr	r0, [r7, #20]
 800b892:	f7ff f975 	bl	800ab80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b896:	bf00      	nop
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}

0800b89e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b89e:	b580      	push	{r7, lr}
 800b8a0:	b084      	sub	sp, #16
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f7ff f95f 	bl	800ab80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b8c2:	bf00      	nop
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b8ca:	b580      	push	{r7, lr}
 800b8cc:	b088      	sub	sp, #32
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	e853 3f00 	ldrex	r3, [r3]
 800b8de:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8e6:	61fb      	str	r3, [r7, #28]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	61bb      	str	r3, [r7, #24]
 800b8f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f4:	6979      	ldr	r1, [r7, #20]
 800b8f6:	69ba      	ldr	r2, [r7, #24]
 800b8f8:	e841 2300 	strex	r3, r2, [r1]
 800b8fc:	613b      	str	r3, [r7, #16]
   return(result);
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1e6      	bne.n	800b8d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2220      	movs	r2, #32
 800b908:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2200      	movs	r2, #0
 800b90e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f7ff f917 	bl	800ab44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b916:	bf00      	nop
 800b918:	3720      	adds	r7, #32
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
	...

0800b920 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b920:	b084      	sub	sp, #16
 800b922:	b580      	push	{r7, lr}
 800b924:	b084      	sub	sp, #16
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	f107 001c 	add.w	r0, r7, #28
 800b92e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b934:	2b01      	cmp	r3, #1
 800b936:	d120      	bne.n	800b97a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	68da      	ldr	r2, [r3, #12]
 800b948:	4b20      	ldr	r3, [pc, #128]	; (800b9cc <USB_CoreInit+0xac>)
 800b94a:	4013      	ands	r3, r2
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b95c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d105      	bne.n	800b96e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	68db      	ldr	r3, [r3, #12]
 800b966:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 fa96 	bl	800bea0 <USB_CoreReset>
 800b974:	4603      	mov	r3, r0
 800b976:	73fb      	strb	r3, [r7, #15]
 800b978:	e010      	b.n	800b99c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	68db      	ldr	r3, [r3, #12]
 800b97e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fa8a 	bl	800bea0 <USB_CoreReset>
 800b98c:	4603      	mov	r3, r0
 800b98e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b994:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d10b      	bne.n	800b9ba <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	f043 0206 	orr.w	r2, r3, #6
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	689b      	ldr	r3, [r3, #8]
 800b9b2:	f043 0220 	orr.w	r2, r3, #32
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3710      	adds	r7, #16
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9c6:	b004      	add	sp, #16
 800b9c8:	4770      	bx	lr
 800b9ca:	bf00      	nop
 800b9cc:	ffbdffbf 	.word	0xffbdffbf

0800b9d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	f023 0201 	bic.w	r2, r3, #1
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b084      	sub	sp, #16
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	68db      	ldr	r3, [r3, #12]
 800ba06:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ba0e:	78fb      	ldrb	r3, [r7, #3]
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d115      	bne.n	800ba40 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba20:	2001      	movs	r0, #1
 800ba22:	f7f7 f809 	bl	8002a38 <HAL_Delay>
      ms++;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fa29 	bl	800be84 <USB_GetMode>
 800ba32:	4603      	mov	r3, r0
 800ba34:	2b01      	cmp	r3, #1
 800ba36:	d01e      	beq.n	800ba76 <USB_SetCurrentMode+0x84>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2b31      	cmp	r3, #49	; 0x31
 800ba3c:	d9f0      	bls.n	800ba20 <USB_SetCurrentMode+0x2e>
 800ba3e:	e01a      	b.n	800ba76 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ba40:	78fb      	ldrb	r3, [r7, #3]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d115      	bne.n	800ba72 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	68db      	ldr	r3, [r3, #12]
 800ba4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ba52:	2001      	movs	r0, #1
 800ba54:	f7f6 fff0 	bl	8002a38 <HAL_Delay>
      ms++;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fa10 	bl	800be84 <USB_GetMode>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d005      	beq.n	800ba76 <USB_SetCurrentMode+0x84>
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2b31      	cmp	r3, #49	; 0x31
 800ba6e:	d9f0      	bls.n	800ba52 <USB_SetCurrentMode+0x60>
 800ba70:	e001      	b.n	800ba76 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ba72:	2301      	movs	r3, #1
 800ba74:	e005      	b.n	800ba82 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	2b32      	cmp	r3, #50	; 0x32
 800ba7a:	d101      	bne.n	800ba80 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e000      	b.n	800ba82 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ba80:	2300      	movs	r3, #0
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}
	...

0800ba8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b086      	sub	sp, #24
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
 800ba96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ba9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800baa6:	2300      	movs	r3, #0
 800baa8:	613b      	str	r3, [r7, #16]
 800baaa:	e009      	b.n	800bac0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	693b      	ldr	r3, [r7, #16]
 800bab0:	3340      	adds	r3, #64	; 0x40
 800bab2:	009b      	lsls	r3, r3, #2
 800bab4:	4413      	add	r3, r2
 800bab6:	2200      	movs	r2, #0
 800bab8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	3301      	adds	r3, #1
 800babe:	613b      	str	r3, [r7, #16]
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	2b0e      	cmp	r3, #14
 800bac4:	d9f2      	bls.n	800baac <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d11c      	bne.n	800bb06 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bada:	f043 0302 	orr.w	r3, r3, #2
 800bade:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	e005      	b.n	800bb12 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bb18:	461a      	mov	r2, r3
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb24:	4619      	mov	r1, r3
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	680b      	ldr	r3, [r1, #0]
 800bb30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bb32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d10c      	bne.n	800bb52 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d104      	bne.n	800bb48 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bb3e:	2100      	movs	r1, #0
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 f965 	bl	800be10 <USB_SetDevSpeed>
 800bb46:	e008      	b.n	800bb5a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bb48:	2101      	movs	r1, #1
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f960 	bl	800be10 <USB_SetDevSpeed>
 800bb50:	e003      	b.n	800bb5a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bb52:	2103      	movs	r1, #3
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 f95b 	bl	800be10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bb5a:	2110      	movs	r1, #16
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 f8f3 	bl	800bd48 <USB_FlushTxFifo>
 800bb62:	4603      	mov	r3, r0
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d001      	beq.n	800bb6c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bb68:	2301      	movs	r3, #1
 800bb6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 f91f 	bl	800bdb0 <USB_FlushRxFifo>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d001      	beq.n	800bb7c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb82:	461a      	mov	r2, r3
 800bb84:	2300      	movs	r3, #0
 800bb86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb8e:	461a      	mov	r2, r3
 800bb90:	2300      	movs	r3, #0
 800bb92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bba0:	2300      	movs	r3, #0
 800bba2:	613b      	str	r3, [r7, #16]
 800bba4:	e043      	b.n	800bc2e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bba6:	693b      	ldr	r3, [r7, #16]
 800bba8:	015a      	lsls	r2, r3, #5
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	4413      	add	r3, r2
 800bbae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbbc:	d118      	bne.n	800bbf0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d10a      	bne.n	800bbda <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	015a      	lsls	r2, r3, #5
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	4413      	add	r3, r2
 800bbcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bbd6:	6013      	str	r3, [r2, #0]
 800bbd8:	e013      	b.n	800bc02 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	015a      	lsls	r2, r3, #5
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bbec:	6013      	str	r3, [r2, #0]
 800bbee:	e008      	b.n	800bc02 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	015a      	lsls	r2, r3, #5
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	2300      	movs	r3, #0
 800bc00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	015a      	lsls	r2, r3, #5
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	4413      	add	r3, r2
 800bc0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc0e:	461a      	mov	r2, r3
 800bc10:	2300      	movs	r3, #0
 800bc12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	015a      	lsls	r2, r3, #5
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc20:	461a      	mov	r2, r3
 800bc22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bc26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	613b      	str	r3, [r7, #16]
 800bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d3b7      	bcc.n	800bba6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bc36:	2300      	movs	r3, #0
 800bc38:	613b      	str	r3, [r7, #16]
 800bc3a:	e043      	b.n	800bcc4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	015a      	lsls	r2, r3, #5
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	4413      	add	r3, r2
 800bc44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc52:	d118      	bne.n	800bc86 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10a      	bne.n	800bc70 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bc5a:	693b      	ldr	r3, [r7, #16]
 800bc5c:	015a      	lsls	r2, r3, #5
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	4413      	add	r3, r2
 800bc62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc66:	461a      	mov	r2, r3
 800bc68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bc6c:	6013      	str	r3, [r2, #0]
 800bc6e:	e013      	b.n	800bc98 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	015a      	lsls	r2, r3, #5
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	4413      	add	r3, r2
 800bc78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bc82:	6013      	str	r3, [r2, #0]
 800bc84:	e008      	b.n	800bc98 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	015a      	lsls	r2, r3, #5
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc92:	461a      	mov	r2, r3
 800bc94:	2300      	movs	r3, #0
 800bc96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	015a      	lsls	r2, r3, #5
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	4413      	add	r3, r2
 800bca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bca4:	461a      	mov	r2, r3
 800bca6:	2300      	movs	r3, #0
 800bca8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	015a      	lsls	r2, r3, #5
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb6:	461a      	mov	r2, r3
 800bcb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bcbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	613b      	str	r3, [r7, #16]
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc6:	693a      	ldr	r2, [r7, #16]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d3b7      	bcc.n	800bc3c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bcda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bcde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bcec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d105      	bne.n	800bd00 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	f043 0210 	orr.w	r2, r3, #16
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	699a      	ldr	r2, [r3, #24]
 800bd04:	4b0e      	ldr	r3, [pc, #56]	; (800bd40 <USB_DevInit+0x2b4>)
 800bd06:	4313      	orrs	r3, r2
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bd0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d005      	beq.n	800bd1e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	699b      	ldr	r3, [r3, #24]
 800bd16:	f043 0208 	orr.w	r2, r3, #8
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bd1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d105      	bne.n	800bd30 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	699a      	ldr	r2, [r3, #24]
 800bd28:	4b06      	ldr	r3, [pc, #24]	; (800bd44 <USB_DevInit+0x2b8>)
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	687a      	ldr	r2, [r7, #4]
 800bd2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bd30:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3718      	adds	r7, #24
 800bd36:	46bd      	mov	sp, r7
 800bd38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd3c:	b004      	add	sp, #16
 800bd3e:	4770      	bx	lr
 800bd40:	803c3800 	.word	0x803c3800
 800bd44:	40000004 	.word	0x40000004

0800bd48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bd52:	2300      	movs	r3, #0
 800bd54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4a13      	ldr	r2, [pc, #76]	; (800bdac <USB_FlushTxFifo+0x64>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d901      	bls.n	800bd68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	e01b      	b.n	800bda0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	691b      	ldr	r3, [r3, #16]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	daf2      	bge.n	800bd56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bd70:	2300      	movs	r3, #0
 800bd72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	019b      	lsls	r3, r3, #6
 800bd78:	f043 0220 	orr.w	r2, r3, #32
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	3301      	adds	r3, #1
 800bd84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4a08      	ldr	r2, [pc, #32]	; (800bdac <USB_FlushTxFifo+0x64>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d901      	bls.n	800bd92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	e006      	b.n	800bda0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	f003 0320 	and.w	r3, r3, #32
 800bd9a:	2b20      	cmp	r3, #32
 800bd9c:	d0f0      	beq.n	800bd80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3714      	adds	r7, #20
 800bda4:	46bd      	mov	sp, r7
 800bda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdaa:	4770      	bx	lr
 800bdac:	00030d40 	.word	0x00030d40

0800bdb0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b085      	sub	sp, #20
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bdb8:	2300      	movs	r3, #0
 800bdba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	4a11      	ldr	r2, [pc, #68]	; (800be0c <USB_FlushRxFifo+0x5c>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d901      	bls.n	800bdce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bdca:	2303      	movs	r3, #3
 800bdcc:	e018      	b.n	800be00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	daf2      	bge.n	800bdbc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2210      	movs	r2, #16
 800bdde:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	3301      	adds	r3, #1
 800bde4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	4a08      	ldr	r2, [pc, #32]	; (800be0c <USB_FlushRxFifo+0x5c>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d901      	bls.n	800bdf2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	e006      	b.n	800be00 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	f003 0310 	and.w	r3, r3, #16
 800bdfa:	2b10      	cmp	r3, #16
 800bdfc:	d0f0      	beq.n	800bde0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bdfe:	2300      	movs	r3, #0
}
 800be00:	4618      	mov	r0, r3
 800be02:	3714      	adds	r7, #20
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr
 800be0c:	00030d40 	.word	0x00030d40

0800be10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	460b      	mov	r3, r1
 800be1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be26:	681a      	ldr	r2, [r3, #0]
 800be28:	78fb      	ldrb	r3, [r7, #3]
 800be2a:	68f9      	ldr	r1, [r7, #12]
 800be2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be30:	4313      	orrs	r3, r2
 800be32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800be34:	2300      	movs	r3, #0
}
 800be36:	4618      	mov	r0, r3
 800be38:	3714      	adds	r7, #20
 800be3a:	46bd      	mov	sp, r7
 800be3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be40:	4770      	bx	lr

0800be42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800be42:	b480      	push	{r7}
 800be44:	b085      	sub	sp, #20
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800be5c:	f023 0303 	bic.w	r3, r3, #3
 800be60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be68:	685b      	ldr	r3, [r3, #4]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be70:	f043 0302 	orr.w	r3, r3, #2
 800be74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3714      	adds	r7, #20
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	695b      	ldr	r3, [r3, #20]
 800be90:	f003 0301 	and.w	r3, r3, #1
}
 800be94:	4618      	mov	r0, r3
 800be96:	370c      	adds	r7, #12
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bea8:	2300      	movs	r3, #0
 800beaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	3301      	adds	r3, #1
 800beb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	4a13      	ldr	r2, [pc, #76]	; (800bf04 <USB_CoreReset+0x64>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d901      	bls.n	800bebe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800beba:	2303      	movs	r3, #3
 800bebc:	e01b      	b.n	800bef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	daf2      	bge.n	800beac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bec6:	2300      	movs	r3, #0
 800bec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	f043 0201 	orr.w	r2, r3, #1
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3301      	adds	r3, #1
 800beda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4a09      	ldr	r2, [pc, #36]	; (800bf04 <USB_CoreReset+0x64>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d901      	bls.n	800bee8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e006      	b.n	800bef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	f003 0301 	and.w	r3, r3, #1
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d0f0      	beq.n	800bed6 <USB_CoreReset+0x36>

  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3714      	adds	r7, #20
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	00030d40 	.word	0x00030d40

0800bf08 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800bf0e:	4b8d      	ldr	r3, [pc, #564]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf10:	22c0      	movs	r2, #192	; 0xc0
 800bf12:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800bf14:	4b8b      	ldr	r3, [pc, #556]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf16:	22a8      	movs	r2, #168	; 0xa8
 800bf18:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800bf1a:	4b8a      	ldr	r3, [pc, #552]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800bf20:	4b88      	ldr	r3, [pc, #544]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf22:	2202      	movs	r2, #2
 800bf24:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800bf26:	4b88      	ldr	r3, [pc, #544]	; (800c148 <MX_LWIP_Init+0x240>)
 800bf28:	22ff      	movs	r2, #255	; 0xff
 800bf2a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800bf2c:	4b86      	ldr	r3, [pc, #536]	; (800c148 <MX_LWIP_Init+0x240>)
 800bf2e:	22ff      	movs	r2, #255	; 0xff
 800bf30:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800bf32:	4b85      	ldr	r3, [pc, #532]	; (800c148 <MX_LWIP_Init+0x240>)
 800bf34:	22ff      	movs	r2, #255	; 0xff
 800bf36:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800bf38:	4b83      	ldr	r3, [pc, #524]	; (800c148 <MX_LWIP_Init+0x240>)
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800bf3e:	4b83      	ldr	r3, [pc, #524]	; (800c14c <MX_LWIP_Init+0x244>)
 800bf40:	2200      	movs	r2, #0
 800bf42:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800bf44:	4b81      	ldr	r3, [pc, #516]	; (800c14c <MX_LWIP_Init+0x244>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800bf4a:	4b80      	ldr	r3, [pc, #512]	; (800c14c <MX_LWIP_Init+0x244>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800bf50:	4b7e      	ldr	r3, [pc, #504]	; (800c14c <MX_LWIP_Init+0x244>)
 800bf52:	2200      	movs	r2, #0
 800bf54:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800bf56:	f000 fd15 	bl	800c984 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800bf5a:	4b7a      	ldr	r3, [pc, #488]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	061a      	lsls	r2, r3, #24
 800bf60:	4b78      	ldr	r3, [pc, #480]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf62:	785b      	ldrb	r3, [r3, #1]
 800bf64:	041b      	lsls	r3, r3, #16
 800bf66:	431a      	orrs	r2, r3
 800bf68:	4b76      	ldr	r3, [pc, #472]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf6a:	789b      	ldrb	r3, [r3, #2]
 800bf6c:	021b      	lsls	r3, r3, #8
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	4a74      	ldr	r2, [pc, #464]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf72:	78d2      	ldrb	r2, [r2, #3]
 800bf74:	4313      	orrs	r3, r2
 800bf76:	061a      	lsls	r2, r3, #24
 800bf78:	4b72      	ldr	r3, [pc, #456]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	0619      	lsls	r1, r3, #24
 800bf7e:	4b71      	ldr	r3, [pc, #452]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf80:	785b      	ldrb	r3, [r3, #1]
 800bf82:	041b      	lsls	r3, r3, #16
 800bf84:	4319      	orrs	r1, r3
 800bf86:	4b6f      	ldr	r3, [pc, #444]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf88:	789b      	ldrb	r3, [r3, #2]
 800bf8a:	021b      	lsls	r3, r3, #8
 800bf8c:	430b      	orrs	r3, r1
 800bf8e:	496d      	ldr	r1, [pc, #436]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf90:	78c9      	ldrb	r1, [r1, #3]
 800bf92:	430b      	orrs	r3, r1
 800bf94:	021b      	lsls	r3, r3, #8
 800bf96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bf9a:	431a      	orrs	r2, r3
 800bf9c:	4b69      	ldr	r3, [pc, #420]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	0619      	lsls	r1, r3, #24
 800bfa2:	4b68      	ldr	r3, [pc, #416]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bfa4:	785b      	ldrb	r3, [r3, #1]
 800bfa6:	041b      	lsls	r3, r3, #16
 800bfa8:	4319      	orrs	r1, r3
 800bfaa:	4b66      	ldr	r3, [pc, #408]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bfac:	789b      	ldrb	r3, [r3, #2]
 800bfae:	021b      	lsls	r3, r3, #8
 800bfb0:	430b      	orrs	r3, r1
 800bfb2:	4964      	ldr	r1, [pc, #400]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bfb4:	78c9      	ldrb	r1, [r1, #3]
 800bfb6:	430b      	orrs	r3, r1
 800bfb8:	0a1b      	lsrs	r3, r3, #8
 800bfba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bfbe:	431a      	orrs	r2, r3
 800bfc0:	4b60      	ldr	r3, [pc, #384]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	0619      	lsls	r1, r3, #24
 800bfc6:	4b5f      	ldr	r3, [pc, #380]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bfc8:	785b      	ldrb	r3, [r3, #1]
 800bfca:	041b      	lsls	r3, r3, #16
 800bfcc:	4319      	orrs	r1, r3
 800bfce:	4b5d      	ldr	r3, [pc, #372]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bfd0:	789b      	ldrb	r3, [r3, #2]
 800bfd2:	021b      	lsls	r3, r3, #8
 800bfd4:	430b      	orrs	r3, r1
 800bfd6:	495b      	ldr	r1, [pc, #364]	; (800c144 <MX_LWIP_Init+0x23c>)
 800bfd8:	78c9      	ldrb	r1, [r1, #3]
 800bfda:	430b      	orrs	r3, r1
 800bfdc:	0e1b      	lsrs	r3, r3, #24
 800bfde:	4313      	orrs	r3, r2
 800bfe0:	4a5b      	ldr	r2, [pc, #364]	; (800c150 <MX_LWIP_Init+0x248>)
 800bfe2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800bfe4:	4b58      	ldr	r3, [pc, #352]	; (800c148 <MX_LWIP_Init+0x240>)
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	061a      	lsls	r2, r3, #24
 800bfea:	4b57      	ldr	r3, [pc, #348]	; (800c148 <MX_LWIP_Init+0x240>)
 800bfec:	785b      	ldrb	r3, [r3, #1]
 800bfee:	041b      	lsls	r3, r3, #16
 800bff0:	431a      	orrs	r2, r3
 800bff2:	4b55      	ldr	r3, [pc, #340]	; (800c148 <MX_LWIP_Init+0x240>)
 800bff4:	789b      	ldrb	r3, [r3, #2]
 800bff6:	021b      	lsls	r3, r3, #8
 800bff8:	4313      	orrs	r3, r2
 800bffa:	4a53      	ldr	r2, [pc, #332]	; (800c148 <MX_LWIP_Init+0x240>)
 800bffc:	78d2      	ldrb	r2, [r2, #3]
 800bffe:	4313      	orrs	r3, r2
 800c000:	061a      	lsls	r2, r3, #24
 800c002:	4b51      	ldr	r3, [pc, #324]	; (800c148 <MX_LWIP_Init+0x240>)
 800c004:	781b      	ldrb	r3, [r3, #0]
 800c006:	0619      	lsls	r1, r3, #24
 800c008:	4b4f      	ldr	r3, [pc, #316]	; (800c148 <MX_LWIP_Init+0x240>)
 800c00a:	785b      	ldrb	r3, [r3, #1]
 800c00c:	041b      	lsls	r3, r3, #16
 800c00e:	4319      	orrs	r1, r3
 800c010:	4b4d      	ldr	r3, [pc, #308]	; (800c148 <MX_LWIP_Init+0x240>)
 800c012:	789b      	ldrb	r3, [r3, #2]
 800c014:	021b      	lsls	r3, r3, #8
 800c016:	430b      	orrs	r3, r1
 800c018:	494b      	ldr	r1, [pc, #300]	; (800c148 <MX_LWIP_Init+0x240>)
 800c01a:	78c9      	ldrb	r1, [r1, #3]
 800c01c:	430b      	orrs	r3, r1
 800c01e:	021b      	lsls	r3, r3, #8
 800c020:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c024:	431a      	orrs	r2, r3
 800c026:	4b48      	ldr	r3, [pc, #288]	; (800c148 <MX_LWIP_Init+0x240>)
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	0619      	lsls	r1, r3, #24
 800c02c:	4b46      	ldr	r3, [pc, #280]	; (800c148 <MX_LWIP_Init+0x240>)
 800c02e:	785b      	ldrb	r3, [r3, #1]
 800c030:	041b      	lsls	r3, r3, #16
 800c032:	4319      	orrs	r1, r3
 800c034:	4b44      	ldr	r3, [pc, #272]	; (800c148 <MX_LWIP_Init+0x240>)
 800c036:	789b      	ldrb	r3, [r3, #2]
 800c038:	021b      	lsls	r3, r3, #8
 800c03a:	430b      	orrs	r3, r1
 800c03c:	4942      	ldr	r1, [pc, #264]	; (800c148 <MX_LWIP_Init+0x240>)
 800c03e:	78c9      	ldrb	r1, [r1, #3]
 800c040:	430b      	orrs	r3, r1
 800c042:	0a1b      	lsrs	r3, r3, #8
 800c044:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c048:	431a      	orrs	r2, r3
 800c04a:	4b3f      	ldr	r3, [pc, #252]	; (800c148 <MX_LWIP_Init+0x240>)
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	0619      	lsls	r1, r3, #24
 800c050:	4b3d      	ldr	r3, [pc, #244]	; (800c148 <MX_LWIP_Init+0x240>)
 800c052:	785b      	ldrb	r3, [r3, #1]
 800c054:	041b      	lsls	r3, r3, #16
 800c056:	4319      	orrs	r1, r3
 800c058:	4b3b      	ldr	r3, [pc, #236]	; (800c148 <MX_LWIP_Init+0x240>)
 800c05a:	789b      	ldrb	r3, [r3, #2]
 800c05c:	021b      	lsls	r3, r3, #8
 800c05e:	430b      	orrs	r3, r1
 800c060:	4939      	ldr	r1, [pc, #228]	; (800c148 <MX_LWIP_Init+0x240>)
 800c062:	78c9      	ldrb	r1, [r1, #3]
 800c064:	430b      	orrs	r3, r1
 800c066:	0e1b      	lsrs	r3, r3, #24
 800c068:	4313      	orrs	r3, r2
 800c06a:	4a3a      	ldr	r2, [pc, #232]	; (800c154 <MX_LWIP_Init+0x24c>)
 800c06c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c06e:	4b37      	ldr	r3, [pc, #220]	; (800c14c <MX_LWIP_Init+0x244>)
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	061a      	lsls	r2, r3, #24
 800c074:	4b35      	ldr	r3, [pc, #212]	; (800c14c <MX_LWIP_Init+0x244>)
 800c076:	785b      	ldrb	r3, [r3, #1]
 800c078:	041b      	lsls	r3, r3, #16
 800c07a:	431a      	orrs	r2, r3
 800c07c:	4b33      	ldr	r3, [pc, #204]	; (800c14c <MX_LWIP_Init+0x244>)
 800c07e:	789b      	ldrb	r3, [r3, #2]
 800c080:	021b      	lsls	r3, r3, #8
 800c082:	4313      	orrs	r3, r2
 800c084:	4a31      	ldr	r2, [pc, #196]	; (800c14c <MX_LWIP_Init+0x244>)
 800c086:	78d2      	ldrb	r2, [r2, #3]
 800c088:	4313      	orrs	r3, r2
 800c08a:	061a      	lsls	r2, r3, #24
 800c08c:	4b2f      	ldr	r3, [pc, #188]	; (800c14c <MX_LWIP_Init+0x244>)
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	0619      	lsls	r1, r3, #24
 800c092:	4b2e      	ldr	r3, [pc, #184]	; (800c14c <MX_LWIP_Init+0x244>)
 800c094:	785b      	ldrb	r3, [r3, #1]
 800c096:	041b      	lsls	r3, r3, #16
 800c098:	4319      	orrs	r1, r3
 800c09a:	4b2c      	ldr	r3, [pc, #176]	; (800c14c <MX_LWIP_Init+0x244>)
 800c09c:	789b      	ldrb	r3, [r3, #2]
 800c09e:	021b      	lsls	r3, r3, #8
 800c0a0:	430b      	orrs	r3, r1
 800c0a2:	492a      	ldr	r1, [pc, #168]	; (800c14c <MX_LWIP_Init+0x244>)
 800c0a4:	78c9      	ldrb	r1, [r1, #3]
 800c0a6:	430b      	orrs	r3, r1
 800c0a8:	021b      	lsls	r3, r3, #8
 800c0aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c0ae:	431a      	orrs	r2, r3
 800c0b0:	4b26      	ldr	r3, [pc, #152]	; (800c14c <MX_LWIP_Init+0x244>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	0619      	lsls	r1, r3, #24
 800c0b6:	4b25      	ldr	r3, [pc, #148]	; (800c14c <MX_LWIP_Init+0x244>)
 800c0b8:	785b      	ldrb	r3, [r3, #1]
 800c0ba:	041b      	lsls	r3, r3, #16
 800c0bc:	4319      	orrs	r1, r3
 800c0be:	4b23      	ldr	r3, [pc, #140]	; (800c14c <MX_LWIP_Init+0x244>)
 800c0c0:	789b      	ldrb	r3, [r3, #2]
 800c0c2:	021b      	lsls	r3, r3, #8
 800c0c4:	430b      	orrs	r3, r1
 800c0c6:	4921      	ldr	r1, [pc, #132]	; (800c14c <MX_LWIP_Init+0x244>)
 800c0c8:	78c9      	ldrb	r1, [r1, #3]
 800c0ca:	430b      	orrs	r3, r1
 800c0cc:	0a1b      	lsrs	r3, r3, #8
 800c0ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c0d2:	431a      	orrs	r2, r3
 800c0d4:	4b1d      	ldr	r3, [pc, #116]	; (800c14c <MX_LWIP_Init+0x244>)
 800c0d6:	781b      	ldrb	r3, [r3, #0]
 800c0d8:	0619      	lsls	r1, r3, #24
 800c0da:	4b1c      	ldr	r3, [pc, #112]	; (800c14c <MX_LWIP_Init+0x244>)
 800c0dc:	785b      	ldrb	r3, [r3, #1]
 800c0de:	041b      	lsls	r3, r3, #16
 800c0e0:	4319      	orrs	r1, r3
 800c0e2:	4b1a      	ldr	r3, [pc, #104]	; (800c14c <MX_LWIP_Init+0x244>)
 800c0e4:	789b      	ldrb	r3, [r3, #2]
 800c0e6:	021b      	lsls	r3, r3, #8
 800c0e8:	430b      	orrs	r3, r1
 800c0ea:	4918      	ldr	r1, [pc, #96]	; (800c14c <MX_LWIP_Init+0x244>)
 800c0ec:	78c9      	ldrb	r1, [r1, #3]
 800c0ee:	430b      	orrs	r3, r1
 800c0f0:	0e1b      	lsrs	r3, r3, #24
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	4a18      	ldr	r2, [pc, #96]	; (800c158 <MX_LWIP_Init+0x250>)
 800c0f6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800c0f8:	4b18      	ldr	r3, [pc, #96]	; (800c15c <MX_LWIP_Init+0x254>)
 800c0fa:	9302      	str	r3, [sp, #8]
 800c0fc:	4b18      	ldr	r3, [pc, #96]	; (800c160 <MX_LWIP_Init+0x258>)
 800c0fe:	9301      	str	r3, [sp, #4]
 800c100:	2300      	movs	r3, #0
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	4b14      	ldr	r3, [pc, #80]	; (800c158 <MX_LWIP_Init+0x250>)
 800c106:	4a13      	ldr	r2, [pc, #76]	; (800c154 <MX_LWIP_Init+0x24c>)
 800c108:	4911      	ldr	r1, [pc, #68]	; (800c150 <MX_LWIP_Init+0x248>)
 800c10a:	4816      	ldr	r0, [pc, #88]	; (800c164 <MX_LWIP_Init+0x25c>)
 800c10c:	f001 f926 	bl	800d35c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c110:	4814      	ldr	r0, [pc, #80]	; (800c164 <MX_LWIP_Init+0x25c>)
 800c112:	f001 fad5 	bl	800d6c0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800c116:	4b13      	ldr	r3, [pc, #76]	; (800c164 <MX_LWIP_Init+0x25c>)
 800c118:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c11c:	089b      	lsrs	r3, r3, #2
 800c11e:	f003 0301 	and.w	r3, r3, #1
 800c122:	b2db      	uxtb	r3, r3
 800c124:	2b00      	cmp	r3, #0
 800c126:	d003      	beq.n	800c130 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800c128:	480e      	ldr	r0, [pc, #56]	; (800c164 <MX_LWIP_Init+0x25c>)
 800c12a:	f001 fad9 	bl	800d6e0 <netif_set_up>
 800c12e:	e002      	b.n	800c136 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800c130:	480c      	ldr	r0, [pc, #48]	; (800c164 <MX_LWIP_Init+0x25c>)
 800c132:	f001 fb41 	bl	800d7b8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c136:	490c      	ldr	r1, [pc, #48]	; (800c168 <MX_LWIP_Init+0x260>)
 800c138:	480a      	ldr	r0, [pc, #40]	; (800c164 <MX_LWIP_Init+0x25c>)
 800c13a:	f001 fbd3 	bl	800d8e4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c13e:	bf00      	nop
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	20000fb8 	.word	0x20000fb8
 800c148:	20000fbc 	.word	0x20000fbc
 800c14c:	20000fc0 	.word	0x20000fc0
 800c150:	20000fac 	.word	0x20000fac
 800c154:	20000fb0 	.word	0x20000fb0
 800c158:	20000fb4 	.word	0x20000fb4
 800c15c:	08016a09 	.word	0x08016a09
 800c160:	0800c481 	.word	0x0800c481
 800c164:	20000f78 	.word	0x20000f78
 800c168:	0800c16d 	.word	0x0800c16d

0800c16c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c174:	bf00      	nop
 800c176:	370c      	adds	r7, #12
 800c178:	46bd      	mov	sp, r7
 800c17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17e:	4770      	bx	lr

0800c180 <SCB_InvalidateDCache_by_Addr>:
{
 800c180:	b480      	push	{r7}
 800c182:	b087      	sub	sp, #28
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800c192:	2320      	movs	r3, #32
 800c194:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c196:	f3bf 8f4f 	dsb	sy
}
 800c19a:	bf00      	nop
    while (op_size > 0) {
 800c19c:	e00b      	b.n	800c1b6 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800c19e:	4a0d      	ldr	r2, [pc, #52]	; (800c1d4 <SCB_InvalidateDCache_by_Addr+0x54>)
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	dcf0      	bgt.n	800c19e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c1bc:	f3bf 8f4f 	dsb	sy
}
 800c1c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c1c2:	f3bf 8f6f 	isb	sy
}
 800c1c6:	bf00      	nop
}
 800c1c8:	bf00      	nop
 800c1ca:	371c      	adds	r7, #28
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d2:	4770      	bx	lr
 800c1d4:	e000ed00 	.word	0xe000ed00

0800c1d8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c1e4:	4b40      	ldr	r3, [pc, #256]	; (800c2e8 <low_level_init+0x110>)
 800c1e6:	4a41      	ldr	r2, [pc, #260]	; (800c2ec <low_level_init+0x114>)
 800c1e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c1ee:	2380      	movs	r3, #128	; 0x80
 800c1f0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c1f2:	23e1      	movs	r3, #225	; 0xe1
 800c1f4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c1fe:	2300      	movs	r3, #0
 800c200:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c202:	4a39      	ldr	r2, [pc, #228]	; (800c2e8 <low_level_init+0x110>)
 800c204:	f107 0308 	add.w	r3, r7, #8
 800c208:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c20a:	4b37      	ldr	r3, [pc, #220]	; (800c2e8 <low_level_init+0x110>)
 800c20c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800c210:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c212:	4b35      	ldr	r3, [pc, #212]	; (800c2e8 <low_level_init+0x110>)
 800c214:	4a36      	ldr	r2, [pc, #216]	; (800c2f0 <low_level_init+0x118>)
 800c216:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c218:	4b33      	ldr	r3, [pc, #204]	; (800c2e8 <low_level_init+0x110>)
 800c21a:	4a36      	ldr	r2, [pc, #216]	; (800c2f4 <low_level_init+0x11c>)
 800c21c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c21e:	4b32      	ldr	r3, [pc, #200]	; (800c2e8 <low_level_init+0x110>)
 800c220:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800c224:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c226:	4830      	ldr	r0, [pc, #192]	; (800c2e8 <low_level_init+0x110>)
 800c228:	f7f7 ff76 	bl	8004118 <HAL_ETH_Init>
 800c22c:	4603      	mov	r3, r0
 800c22e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c230:	2238      	movs	r2, #56	; 0x38
 800c232:	2100      	movs	r1, #0
 800c234:	4830      	ldr	r0, [pc, #192]	; (800c2f8 <low_level_init+0x120>)
 800c236:	f00b fa47 	bl	80176c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c23a:	4b2f      	ldr	r3, [pc, #188]	; (800c2f8 <low_level_init+0x120>)
 800c23c:	2221      	movs	r2, #33	; 0x21
 800c23e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c240:	4b2d      	ldr	r3, [pc, #180]	; (800c2f8 <low_level_init+0x120>)
 800c242:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800c246:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c248:	4b2b      	ldr	r3, [pc, #172]	; (800c2f8 <low_level_init+0x120>)
 800c24a:	2200      	movs	r2, #0
 800c24c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c24e:	482b      	ldr	r0, [pc, #172]	; (800c2fc <low_level_init+0x124>)
 800c250:	f000 ff4c 	bl	800d0ec <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2206      	movs	r2, #6
 800c258:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c25c:	4b22      	ldr	r3, [pc, #136]	; (800c2e8 <low_level_init+0x110>)
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	781a      	ldrb	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c268:	4b1f      	ldr	r3, [pc, #124]	; (800c2e8 <low_level_init+0x110>)
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	785a      	ldrb	r2, [r3, #1]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c274:	4b1c      	ldr	r3, [pc, #112]	; (800c2e8 <low_level_init+0x110>)
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	789a      	ldrb	r2, [r3, #2]
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c280:	4b19      	ldr	r3, [pc, #100]	; (800c2e8 <low_level_init+0x110>)
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	78da      	ldrb	r2, [r3, #3]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c28c:	4b16      	ldr	r3, [pc, #88]	; (800c2e8 <low_level_init+0x110>)
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	791a      	ldrb	r2, [r3, #4]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c298:	4b13      	ldr	r3, [pc, #76]	; (800c2e8 <low_level_init+0x110>)
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	795a      	ldrb	r2, [r3, #5]
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c2aa:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c2b2:	f043 030a 	orr.w	r3, r3, #10
 800c2b6:	b2da      	uxtb	r2, r3
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c2be:	4910      	ldr	r1, [pc, #64]	; (800c300 <low_level_init+0x128>)
 800c2c0:	4810      	ldr	r0, [pc, #64]	; (800c304 <low_level_init+0x12c>)
 800c2c2:	f7f6 f9fa 	bl	80026ba <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800c2c6:	480f      	ldr	r0, [pc, #60]	; (800c304 <low_level_init+0x12c>)
 800c2c8:	f7f6 fa29 	bl	800271e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d103      	bne.n	800c2da <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fa2a 	bl	800c72c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800c2d8:	e001      	b.n	800c2de <low_level_init+0x106>
    Error_Handler();
 800c2da:	f7f5 f9fb 	bl	80016d4 <Error_Handler>
}
 800c2de:	bf00      	nop
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	20005950 	.word	0x20005950
 800c2ec:	40028000 	.word	0x40028000
 800c2f0:	20000130 	.word	0x20000130
 800c2f4:	20000090 	.word	0x20000090
 800c2f8:	20005a00 	.word	0x20005a00
 800c2fc:	0801b190 	.word	0x0801b190
 800c300:	2000000c 	.word	0x2000000c
 800c304:	20005a38 	.word	0x20005a38

0800c308 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b092      	sub	sp, #72	; 0x48
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
 800c310:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c312:	2300      	movs	r3, #0
 800c314:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800c316:	2300      	movs	r3, #0
 800c318:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800c31a:	2300      	movs	r3, #0
 800c31c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c320:	f107 030c 	add.w	r3, r7, #12
 800c324:	2230      	movs	r2, #48	; 0x30
 800c326:	2100      	movs	r1, #0
 800c328:	4618      	mov	r0, r3
 800c32a:	f00b f9cd 	bl	80176c8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c32e:	f107 030c 	add.w	r3, r7, #12
 800c332:	2230      	movs	r2, #48	; 0x30
 800c334:	2100      	movs	r1, #0
 800c336:	4618      	mov	r0, r3
 800c338:	f00b f9c6 	bl	80176c8 <memset>

  for(q = p; q != NULL; q = q->next)
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	643b      	str	r3, [r7, #64]	; 0x40
 800c340:	e045      	b.n	800c3ce <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c344:	2b03      	cmp	r3, #3
 800c346:	d902      	bls.n	800c34e <low_level_output+0x46>
      return ERR_IF;
 800c348:	f06f 030b 	mvn.w	r3, #11
 800c34c:	e055      	b.n	800c3fa <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800c34e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c350:	6859      	ldr	r1, [r3, #4]
 800c352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c354:	4613      	mov	r3, r2
 800c356:	005b      	lsls	r3, r3, #1
 800c358:	4413      	add	r3, r2
 800c35a:	009b      	lsls	r3, r3, #2
 800c35c:	3348      	adds	r3, #72	; 0x48
 800c35e:	443b      	add	r3, r7
 800c360:	3b3c      	subs	r3, #60	; 0x3c
 800c362:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c366:	895b      	ldrh	r3, [r3, #10]
 800c368:	4619      	mov	r1, r3
 800c36a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c36c:	4613      	mov	r3, r2
 800c36e:	005b      	lsls	r3, r3, #1
 800c370:	4413      	add	r3, r2
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	3348      	adds	r3, #72	; 0x48
 800c376:	443b      	add	r3, r7
 800c378:	3b38      	subs	r3, #56	; 0x38
 800c37a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c37c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d011      	beq.n	800c3a6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c382:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c384:	1e5a      	subs	r2, r3, #1
 800c386:	f107 000c 	add.w	r0, r7, #12
 800c38a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c38c:	460b      	mov	r3, r1
 800c38e:	005b      	lsls	r3, r3, #1
 800c390:	440b      	add	r3, r1
 800c392:	009b      	lsls	r3, r3, #2
 800c394:	18c1      	adds	r1, r0, r3
 800c396:	4613      	mov	r3, r2
 800c398:	005b      	lsls	r3, r3, #1
 800c39a:	4413      	add	r3, r2
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	3348      	adds	r3, #72	; 0x48
 800c3a0:	443b      	add	r3, r7
 800c3a2:	3b34      	subs	r3, #52	; 0x34
 800c3a4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c3a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d109      	bne.n	800c3c2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c3ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	4413      	add	r3, r2
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	3348      	adds	r3, #72	; 0x48
 800c3ba:	443b      	add	r3, r7
 800c3bc:	3b34      	subs	r3, #52	; 0x34
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c3c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800c3c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	643b      	str	r3, [r7, #64]	; 0x40
 800c3ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1b6      	bne.n	800c342 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	891b      	ldrh	r3, [r3, #8]
 800c3d8:	461a      	mov	r2, r3
 800c3da:	4b0a      	ldr	r3, [pc, #40]	; (800c404 <low_level_output+0xfc>)
 800c3dc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c3de:	4a09      	ldr	r2, [pc, #36]	; (800c404 <low_level_output+0xfc>)
 800c3e0:	f107 030c 	add.w	r3, r7, #12
 800c3e4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c3e6:	4a07      	ldr	r2, [pc, #28]	; (800c404 <low_level_output+0xfc>)
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800c3ec:	2214      	movs	r2, #20
 800c3ee:	4905      	ldr	r1, [pc, #20]	; (800c404 <low_level_output+0xfc>)
 800c3f0:	4805      	ldr	r0, [pc, #20]	; (800c408 <low_level_output+0x100>)
 800c3f2:	f7f7 ffc5 	bl	8004380 <HAL_ETH_Transmit>

  return errval;
 800c3f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3748      	adds	r7, #72	; 0x48
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	20005a00 	.word	0x20005a00
 800c408:	20005950 	.word	0x20005950

0800c40c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c414:	2300      	movs	r3, #0
 800c416:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c418:	4b07      	ldr	r3, [pc, #28]	; (800c438 <low_level_input+0x2c>)
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d105      	bne.n	800c42c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c420:	f107 030c 	add.w	r3, r7, #12
 800c424:	4619      	mov	r1, r3
 800c426:	4805      	ldr	r0, [pc, #20]	; (800c43c <low_level_input+0x30>)
 800c428:	f7f8 f83e 	bl	80044a8 <HAL_ETH_ReadData>
  }

  return p;
 800c42c:	68fb      	ldr	r3, [r7, #12]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3710      	adds	r7, #16
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	2000594c 	.word	0x2000594c
 800c43c:	20005950 	.word	0x20005950

0800c440 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c448:	2300      	movs	r3, #0
 800c44a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7ff ffdd 	bl	800c40c <low_level_input>
 800c452:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d00a      	beq.n	800c470 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	691b      	ldr	r3, [r3, #16]
 800c45e:	6879      	ldr	r1, [r7, #4]
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	4798      	blx	r3
 800c464:	4603      	mov	r3, r0
 800c466:	2b00      	cmp	r3, #0
 800c468:	d002      	beq.n	800c470 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800c46a:	68f8      	ldr	r0, [r7, #12]
 800c46c:	f001 fdba 	bl	800dfe4 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1ea      	bne.n	800c44c <ethernetif_input+0xc>
}
 800c476:	bf00      	nop
 800c478:	bf00      	nop
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b082      	sub	sp, #8
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d106      	bne.n	800c49c <ethernetif_init+0x1c>
 800c48e:	4b0e      	ldr	r3, [pc, #56]	; (800c4c8 <ethernetif_init+0x48>)
 800c490:	f240 127b 	movw	r2, #379	; 0x17b
 800c494:	490d      	ldr	r1, [pc, #52]	; (800c4cc <ethernetif_init+0x4c>)
 800c496:	480e      	ldr	r0, [pc, #56]	; (800c4d0 <ethernetif_init+0x50>)
 800c498:	f00b f91e 	bl	80176d8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2273      	movs	r2, #115	; 0x73
 800c4a0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2274      	movs	r2, #116	; 0x74
 800c4a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	4a09      	ldr	r2, [pc, #36]	; (800c4d4 <ethernetif_init+0x54>)
 800c4b0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a08      	ldr	r2, [pc, #32]	; (800c4d8 <ethernetif_init+0x58>)
 800c4b6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f7ff fe8d 	bl	800c1d8 <low_level_init>

  return ERR_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3708      	adds	r7, #8
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	08018790 	.word	0x08018790
 800c4cc:	080187ac 	.word	0x080187ac
 800c4d0:	080187bc 	.word	0x080187bc
 800c4d4:	08014ec1 	.word	0x08014ec1
 800c4d8:	0800c309 	.word	0x0800c309

0800c4dc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c4e8:	68f9      	ldr	r1, [r7, #12]
 800c4ea:	4807      	ldr	r0, [pc, #28]	; (800c508 <pbuf_free_custom+0x2c>)
 800c4ec:	f000 fee0 	bl	800d2b0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c4f0:	4b06      	ldr	r3, [pc, #24]	; (800c50c <pbuf_free_custom+0x30>)
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d102      	bne.n	800c4fe <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c4f8:	4b04      	ldr	r3, [pc, #16]	; (800c50c <pbuf_free_custom+0x30>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	701a      	strb	r2, [r3, #0]
  }
}
 800c4fe:	bf00      	nop
 800c500:	3710      	adds	r7, #16
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	0801b190 	.word	0x0801b190
 800c50c:	2000594c 	.word	0x2000594c

0800c510 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c514:	f7f6 fa84 	bl	8002a20 <HAL_GetTick>
 800c518:	4603      	mov	r3, r0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b08e      	sub	sp, #56	; 0x38
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c52c:	2200      	movs	r2, #0
 800c52e:	601a      	str	r2, [r3, #0]
 800c530:	605a      	str	r2, [r3, #4]
 800c532:	609a      	str	r2, [r3, #8]
 800c534:	60da      	str	r2, [r3, #12]
 800c536:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	4a4e      	ldr	r2, [pc, #312]	; (800c678 <HAL_ETH_MspInit+0x158>)
 800c53e:	4293      	cmp	r3, r2
 800c540:	f040 8096 	bne.w	800c670 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c544:	4b4d      	ldr	r3, [pc, #308]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c548:	4a4c      	ldr	r2, [pc, #304]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c54a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c54e:	6313      	str	r3, [r2, #48]	; 0x30
 800c550:	4b4a      	ldr	r3, [pc, #296]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c558:	623b      	str	r3, [r7, #32]
 800c55a:	6a3b      	ldr	r3, [r7, #32]
 800c55c:	4b47      	ldr	r3, [pc, #284]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c560:	4a46      	ldr	r2, [pc, #280]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c562:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c566:	6313      	str	r3, [r2, #48]	; 0x30
 800c568:	4b44      	ldr	r3, [pc, #272]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c56c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c570:	61fb      	str	r3, [r7, #28]
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	4b41      	ldr	r3, [pc, #260]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c578:	4a40      	ldr	r2, [pc, #256]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c57a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c57e:	6313      	str	r3, [r2, #48]	; 0x30
 800c580:	4b3e      	ldr	r3, [pc, #248]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c588:	61bb      	str	r3, [r7, #24]
 800c58a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c58c:	4b3b      	ldr	r3, [pc, #236]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c590:	4a3a      	ldr	r2, [pc, #232]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c592:	f043 0304 	orr.w	r3, r3, #4
 800c596:	6313      	str	r3, [r2, #48]	; 0x30
 800c598:	4b38      	ldr	r3, [pc, #224]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c59a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c59c:	f003 0304 	and.w	r3, r3, #4
 800c5a0:	617b      	str	r3, [r7, #20]
 800c5a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5a4:	4b35      	ldr	r3, [pc, #212]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c5a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5a8:	4a34      	ldr	r2, [pc, #208]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c5aa:	f043 0301 	orr.w	r3, r3, #1
 800c5ae:	6313      	str	r3, [r2, #48]	; 0x30
 800c5b0:	4b32      	ldr	r3, [pc, #200]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c5b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b4:	f003 0301 	and.w	r3, r3, #1
 800c5b8:	613b      	str	r3, [r7, #16]
 800c5ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c5bc:	4b2f      	ldr	r3, [pc, #188]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c0:	4a2e      	ldr	r2, [pc, #184]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c5c2:	f043 0302 	orr.w	r3, r3, #2
 800c5c6:	6313      	str	r3, [r2, #48]	; 0x30
 800c5c8:	4b2c      	ldr	r3, [pc, #176]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5cc:	f003 0302 	and.w	r3, r3, #2
 800c5d0:	60fb      	str	r3, [r7, #12]
 800c5d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c5d4:	4b29      	ldr	r3, [pc, #164]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d8:	4a28      	ldr	r2, [pc, #160]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c5da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5de:	6313      	str	r3, [r2, #48]	; 0x30
 800c5e0:	4b26      	ldr	r3, [pc, #152]	; (800c67c <HAL_ETH_MspInit+0x15c>)
 800c5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e8:	60bb      	str	r3, [r7, #8]
 800c5ea:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800c5ec:	2332      	movs	r3, #50	; 0x32
 800c5ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c5f0:	2302      	movs	r3, #2
 800c5f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c5fc:	230b      	movs	r3, #11
 800c5fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c604:	4619      	mov	r1, r3
 800c606:	481e      	ldr	r0, [pc, #120]	; (800c680 <HAL_ETH_MspInit+0x160>)
 800c608:	f7f8 fe78 	bl	80052fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800c60c:	2386      	movs	r3, #134	; 0x86
 800c60e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c610:	2302      	movs	r3, #2
 800c612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c614:	2300      	movs	r3, #0
 800c616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c618:	2303      	movs	r3, #3
 800c61a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c61c:	230b      	movs	r3, #11
 800c61e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c624:	4619      	mov	r1, r3
 800c626:	4817      	ldr	r0, [pc, #92]	; (800c684 <HAL_ETH_MspInit+0x164>)
 800c628:	f7f8 fe68 	bl	80052fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800c62c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c632:	2302      	movs	r3, #2
 800c634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c636:	2300      	movs	r3, #0
 800c638:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c63a:	2303      	movs	r3, #3
 800c63c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c63e:	230b      	movs	r3, #11
 800c640:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800c642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c646:	4619      	mov	r1, r3
 800c648:	480f      	ldr	r0, [pc, #60]	; (800c688 <HAL_ETH_MspInit+0x168>)
 800c64a:	f7f8 fe57 	bl	80052fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800c64e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c652:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c654:	2302      	movs	r3, #2
 800c656:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c658:	2300      	movs	r3, #0
 800c65a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c65c:	2303      	movs	r3, #3
 800c65e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c660:	230b      	movs	r3, #11
 800c662:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c668:	4619      	mov	r1, r3
 800c66a:	4808      	ldr	r0, [pc, #32]	; (800c68c <HAL_ETH_MspInit+0x16c>)
 800c66c:	f7f8 fe46 	bl	80052fc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c670:	bf00      	nop
 800c672:	3738      	adds	r7, #56	; 0x38
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	40028000 	.word	0x40028000
 800c67c:	40023800 	.word	0x40023800
 800c680:	40020800 	.word	0x40020800
 800c684:	40020000 	.word	0x40020000
 800c688:	40020400 	.word	0x40020400
 800c68c:	40021800 	.word	0x40021800

0800c690 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c694:	4802      	ldr	r0, [pc, #8]	; (800c6a0 <ETH_PHY_IO_Init+0x10>)
 800c696:	f7f8 f9d7 	bl	8004a48 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c69a:	2300      	movs	r3, #0
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	20005950 	.word	0x20005950

0800c6a4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c6a4:	b480      	push	{r7}
 800c6a6:	af00      	add	r7, sp, #0
  return 0;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	60b9      	str	r1, [r7, #8]
 800c6be:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	68f9      	ldr	r1, [r7, #12]
 800c6c6:	4807      	ldr	r0, [pc, #28]	; (800c6e4 <ETH_PHY_IO_ReadReg+0x30>)
 800c6c8:	f7f8 f826 	bl	8004718 <HAL_ETH_ReadPHYRegister>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d002      	beq.n	800c6d8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c6d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c6d6:	e000      	b.n	800c6da <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c6d8:	2300      	movs	r3, #0
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3710      	adds	r7, #16
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	20005950 	.word	0x20005950

0800c6e8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	68ba      	ldr	r2, [r7, #8]
 800c6f8:	68f9      	ldr	r1, [r7, #12]
 800c6fa:	4807      	ldr	r0, [pc, #28]	; (800c718 <ETH_PHY_IO_WriteReg+0x30>)
 800c6fc:	f7f8 f857 	bl	80047ae <HAL_ETH_WritePHYRegister>
 800c700:	4603      	mov	r3, r0
 800c702:	2b00      	cmp	r3, #0
 800c704:	d002      	beq.n	800c70c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c70a:	e000      	b.n	800c70e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3710      	adds	r7, #16
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	20005950 	.word	0x20005950

0800c71c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c720:	f7f6 f97e 	bl	8002a20 <HAL_GetTick>
 800c724:	4603      	mov	r3, r0
}
 800c726:	4618      	mov	r0, r3
 800c728:	bd80      	pop	{r7, pc}
	...

0800c72c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b0a0      	sub	sp, #128	; 0x80
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c734:	f107 030c 	add.w	r3, r7, #12
 800c738:	2264      	movs	r2, #100	; 0x64
 800c73a:	2100      	movs	r1, #0
 800c73c:	4618      	mov	r0, r3
 800c73e:	f00a ffc3 	bl	80176c8 <memset>
  int32_t PHYLinkState = 0;
 800c742:	2300      	movs	r3, #0
 800c744:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c746:	2300      	movs	r3, #0
 800c748:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c74a:	2300      	movs	r3, #0
 800c74c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c74e:	2300      	movs	r3, #0
 800c750:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c752:	483a      	ldr	r0, [pc, #232]	; (800c83c <ethernet_link_check_state+0x110>)
 800c754:	f7f6 f88b 	bl	800286e <LAN8742_GetLinkState>
 800c758:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c760:	089b      	lsrs	r3, r3, #2
 800c762:	f003 0301 	and.w	r3, r3, #1
 800c766:	b2db      	uxtb	r3, r3
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d00c      	beq.n	800c786 <ethernet_link_check_state+0x5a>
 800c76c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c76e:	2b01      	cmp	r3, #1
 800c770:	dc09      	bgt.n	800c786 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800c772:	4833      	ldr	r0, [pc, #204]	; (800c840 <ethernet_link_check_state+0x114>)
 800c774:	f7f7 fdab 	bl	80042ce <HAL_ETH_Stop>
    netif_set_down(netif);
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f001 f81d 	bl	800d7b8 <netif_set_down>
    netif_set_link_down(netif);
 800c77e:	6878      	ldr	r0, [r7, #4]
 800c780:	f001 f880 	bl	800d884 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800c784:	e055      	b.n	800c832 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c78c:	f003 0304 	and.w	r3, r3, #4
 800c790:	2b00      	cmp	r3, #0
 800c792:	d14e      	bne.n	800c832 <ethernet_link_check_state+0x106>
 800c794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c796:	2b01      	cmp	r3, #1
 800c798:	dd4b      	ble.n	800c832 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800c79a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c79c:	3b02      	subs	r3, #2
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d82a      	bhi.n	800c7f8 <ethernet_link_check_state+0xcc>
 800c7a2:	a201      	add	r2, pc, #4	; (adr r2, 800c7a8 <ethernet_link_check_state+0x7c>)
 800c7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7a8:	0800c7b9 	.word	0x0800c7b9
 800c7ac:	0800c7cb 	.word	0x0800c7cb
 800c7b0:	0800c7db 	.word	0x0800c7db
 800c7b4:	0800c7eb 	.word	0x0800c7eb
      duplex = ETH_FULLDUPLEX_MODE;
 800c7b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c7bc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c7be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c7c2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c7c8:	e017      	b.n	800c7fa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c7ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c7d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c7d8:	e00f      	b.n	800c7fa <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800c7da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c7de:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c7e8:	e007      	b.n	800c7fa <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c7f6:	e000      	b.n	800c7fa <ethernet_link_check_state+0xce>
      break;
 800c7f8:	bf00      	nop
    if(linkchanged)
 800c7fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d018      	beq.n	800c832 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c800:	f107 030c 	add.w	r3, r7, #12
 800c804:	4619      	mov	r1, r3
 800c806:	480e      	ldr	r0, [pc, #56]	; (800c840 <ethernet_link_check_state+0x114>)
 800c808:	f7f8 f81a 	bl	8004840 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c80c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c80e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800c810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c812:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c814:	f107 030c 	add.w	r3, r7, #12
 800c818:	4619      	mov	r1, r3
 800c81a:	4809      	ldr	r0, [pc, #36]	; (800c840 <ethernet_link_check_state+0x114>)
 800c81c:	f7f8 f8fa 	bl	8004a14 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800c820:	4807      	ldr	r0, [pc, #28]	; (800c840 <ethernet_link_check_state+0x114>)
 800c822:	f7f7 fcf5 	bl	8004210 <HAL_ETH_Start>
      netif_set_up(netif);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 ff5a 	bl	800d6e0 <netif_set_up>
      netif_set_link_up(netif);
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 fff5 	bl	800d81c <netif_set_link_up>
}
 800c832:	bf00      	nop
 800c834:	3780      	adds	r7, #128	; 0x80
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop
 800c83c:	20005a38 	.word	0x20005a38
 800c840:	20005950 	.word	0x20005950

0800c844 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b086      	sub	sp, #24
 800c848:	af02      	add	r7, sp, #8
 800c84a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800c84c:	4812      	ldr	r0, [pc, #72]	; (800c898 <HAL_ETH_RxAllocateCallback+0x54>)
 800c84e:	f000 fcc1 	bl	800d1d4 <memp_malloc_pool>
 800c852:	60f8      	str	r0, [r7, #12]
  if (p)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d014      	beq.n	800c884 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f103 0220 	add.w	r2, r3, #32
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	4a0d      	ldr	r2, [pc, #52]	; (800c89c <HAL_ETH_RxAllocateCallback+0x58>)
 800c868:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800c872:	9201      	str	r2, [sp, #4]
 800c874:	9300      	str	r3, [sp, #0]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2241      	movs	r2, #65	; 0x41
 800c87a:	2100      	movs	r1, #0
 800c87c:	2000      	movs	r0, #0
 800c87e:	f001 f9f7 	bl	800dc70 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800c882:	e005      	b.n	800c890 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800c884:	4b06      	ldr	r3, [pc, #24]	; (800c8a0 <HAL_ETH_RxAllocateCallback+0x5c>)
 800c886:	2201      	movs	r2, #1
 800c888:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2200      	movs	r2, #0
 800c88e:	601a      	str	r2, [r3, #0]
}
 800c890:	bf00      	nop
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	0801b190 	.word	0x0801b190
 800c89c:	0800c4dd 	.word	0x0800c4dd
 800c8a0:	2000594c 	.word	0x2000594c

0800c8a4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b088      	sub	sp, #32
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	607a      	str	r2, [r7, #4]
 800c8b0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	3b20      	subs	r3, #32
 800c8c2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800c8d0:	69fb      	ldr	r3, [r7, #28]
 800c8d2:	887a      	ldrh	r2, [r7, #2]
 800c8d4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d103      	bne.n	800c8e6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	69fa      	ldr	r2, [r7, #28]
 800c8e2:	601a      	str	r2, [r3, #0]
 800c8e4:	e003      	b.n	800c8ee <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	69fa      	ldr	r2, [r7, #28]
 800c8ec:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	69fa      	ldr	r2, [r7, #28]
 800c8f2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	61fb      	str	r3, [r7, #28]
 800c8fa:	e009      	b.n	800c910 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800c8fc:	69fb      	ldr	r3, [r7, #28]
 800c8fe:	891a      	ldrh	r2, [r3, #8]
 800c900:	887b      	ldrh	r3, [r7, #2]
 800c902:	4413      	add	r3, r2
 800c904:	b29a      	uxth	r2, r3
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	61fb      	str	r3, [r7, #28]
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d1f2      	bne.n	800c8fc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800c916:	887b      	ldrh	r3, [r7, #2]
 800c918:	4619      	mov	r1, r3
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7ff fc30 	bl	800c180 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800c920:	bf00      	nop
 800c922:	3720      	adds	r7, #32
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	4603      	mov	r3, r0
 800c930:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c932:	88fb      	ldrh	r3, [r7, #6]
 800c934:	021b      	lsls	r3, r3, #8
 800c936:	b21a      	sxth	r2, r3
 800c938:	88fb      	ldrh	r3, [r7, #6]
 800c93a:	0a1b      	lsrs	r3, r3, #8
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	b21b      	sxth	r3, r3
 800c940:	4313      	orrs	r3, r2
 800c942:	b21b      	sxth	r3, r3
 800c944:	b29b      	uxth	r3, r3
}
 800c946:	4618      	mov	r0, r3
 800c948:	370c      	adds	r7, #12
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr

0800c952 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c952:	b480      	push	{r7}
 800c954:	b083      	sub	sp, #12
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	061a      	lsls	r2, r3, #24
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	021b      	lsls	r3, r3, #8
 800c962:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c966:	431a      	orrs	r2, r3
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	0a1b      	lsrs	r3, r3, #8
 800c96c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c970:	431a      	orrs	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	0e1b      	lsrs	r3, r3, #24
 800c976:	4313      	orrs	r3, r2
}
 800c978:	4618      	mov	r0, r3
 800c97a:	370c      	adds	r7, #12
 800c97c:	46bd      	mov	sp, r7
 800c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c982:	4770      	bx	lr

0800c984 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c98a:	2300      	movs	r3, #0
 800c98c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800c98e:	f000 f8d5 	bl	800cb3c <mem_init>
  memp_init();
 800c992:	f000 fbdb 	bl	800d14c <memp_init>
  pbuf_init();
  netif_init();
 800c996:	f000 fcd9 	bl	800d34c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c99a:	f007 f8f9 	bl	8013b90 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c99e:	f001 fe51 	bl	800e644 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c9a2:	f007 f86b 	bl	8013a7c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c9a6:	bf00      	nop
 800c9a8:	3708      	adds	r7, #8
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
	...

0800c9b0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c9ba:	4b05      	ldr	r3, [pc, #20]	; (800c9d0 <ptr_to_mem+0x20>)
 800c9bc:	681a      	ldr	r2, [r3, #0]
 800c9be:	88fb      	ldrh	r3, [r7, #6]
 800c9c0:	4413      	add	r3, r2
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	370c      	adds	r7, #12
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	200060c4 	.word	0x200060c4

0800c9d4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c9dc:	4b05      	ldr	r3, [pc, #20]	; (800c9f4 <mem_to_ptr+0x20>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	687a      	ldr	r2, [r7, #4]
 800c9e2:	1ad3      	subs	r3, r2, r3
 800c9e4:	b29b      	uxth	r3, r3
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	200060c4 	.word	0x200060c4

0800c9f8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c9f8:	b590      	push	{r4, r7, lr}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ca00:	4b45      	ldr	r3, [pc, #276]	; (800cb18 <plug_holes+0x120>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d206      	bcs.n	800ca18 <plug_holes+0x20>
 800ca0a:	4b44      	ldr	r3, [pc, #272]	; (800cb1c <plug_holes+0x124>)
 800ca0c:	f240 12df 	movw	r2, #479	; 0x1df
 800ca10:	4943      	ldr	r1, [pc, #268]	; (800cb20 <plug_holes+0x128>)
 800ca12:	4844      	ldr	r0, [pc, #272]	; (800cb24 <plug_holes+0x12c>)
 800ca14:	f00a fe60 	bl	80176d8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ca18:	4b43      	ldr	r3, [pc, #268]	; (800cb28 <plug_holes+0x130>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	687a      	ldr	r2, [r7, #4]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d306      	bcc.n	800ca30 <plug_holes+0x38>
 800ca22:	4b3e      	ldr	r3, [pc, #248]	; (800cb1c <plug_holes+0x124>)
 800ca24:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ca28:	4940      	ldr	r1, [pc, #256]	; (800cb2c <plug_holes+0x134>)
 800ca2a:	483e      	ldr	r0, [pc, #248]	; (800cb24 <plug_holes+0x12c>)
 800ca2c:	f00a fe54 	bl	80176d8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	791b      	ldrb	r3, [r3, #4]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d006      	beq.n	800ca46 <plug_holes+0x4e>
 800ca38:	4b38      	ldr	r3, [pc, #224]	; (800cb1c <plug_holes+0x124>)
 800ca3a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ca3e:	493c      	ldr	r1, [pc, #240]	; (800cb30 <plug_holes+0x138>)
 800ca40:	4838      	ldr	r0, [pc, #224]	; (800cb24 <plug_holes+0x12c>)
 800ca42:	f00a fe49 	bl	80176d8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	881b      	ldrh	r3, [r3, #0]
 800ca4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca4e:	d906      	bls.n	800ca5e <plug_holes+0x66>
 800ca50:	4b32      	ldr	r3, [pc, #200]	; (800cb1c <plug_holes+0x124>)
 800ca52:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ca56:	4937      	ldr	r1, [pc, #220]	; (800cb34 <plug_holes+0x13c>)
 800ca58:	4832      	ldr	r0, [pc, #200]	; (800cb24 <plug_holes+0x12c>)
 800ca5a:	f00a fe3d 	bl	80176d8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	881b      	ldrh	r3, [r3, #0]
 800ca62:	4618      	mov	r0, r3
 800ca64:	f7ff ffa4 	bl	800c9b0 <ptr_to_mem>
 800ca68:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d024      	beq.n	800cabc <plug_holes+0xc4>
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	791b      	ldrb	r3, [r3, #4]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d120      	bne.n	800cabc <plug_holes+0xc4>
 800ca7a:	4b2b      	ldr	r3, [pc, #172]	; (800cb28 <plug_holes+0x130>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d01b      	beq.n	800cabc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ca84:	4b2c      	ldr	r3, [pc, #176]	; (800cb38 <plug_holes+0x140>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d102      	bne.n	800ca94 <plug_holes+0x9c>
      lfree = mem;
 800ca8e:	4a2a      	ldr	r2, [pc, #168]	; (800cb38 <plug_holes+0x140>)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	881a      	ldrh	r2, [r3, #0]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	881b      	ldrh	r3, [r3, #0]
 800caa0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800caa4:	d00a      	beq.n	800cabc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	881b      	ldrh	r3, [r3, #0]
 800caaa:	4618      	mov	r0, r3
 800caac:	f7ff ff80 	bl	800c9b0 <ptr_to_mem>
 800cab0:	4604      	mov	r4, r0
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff ff8e 	bl	800c9d4 <mem_to_ptr>
 800cab8:	4603      	mov	r3, r0
 800caba:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	885b      	ldrh	r3, [r3, #2]
 800cac0:	4618      	mov	r0, r3
 800cac2:	f7ff ff75 	bl	800c9b0 <ptr_to_mem>
 800cac6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d01f      	beq.n	800cb10 <plug_holes+0x118>
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	791b      	ldrb	r3, [r3, #4]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d11b      	bne.n	800cb10 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cad8:	4b17      	ldr	r3, [pc, #92]	; (800cb38 <plug_holes+0x140>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d102      	bne.n	800cae8 <plug_holes+0xf0>
      lfree = pmem;
 800cae2:	4a15      	ldr	r2, [pc, #84]	; (800cb38 <plug_holes+0x140>)
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	881a      	ldrh	r2, [r3, #0]
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	881b      	ldrh	r3, [r3, #0]
 800caf4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800caf8:	d00a      	beq.n	800cb10 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	881b      	ldrh	r3, [r3, #0]
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7ff ff56 	bl	800c9b0 <ptr_to_mem>
 800cb04:	4604      	mov	r4, r0
 800cb06:	68b8      	ldr	r0, [r7, #8]
 800cb08:	f7ff ff64 	bl	800c9d4 <mem_to_ptr>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800cb10:	bf00      	nop
 800cb12:	3714      	adds	r7, #20
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd90      	pop	{r4, r7, pc}
 800cb18:	200060c4 	.word	0x200060c4
 800cb1c:	080187e4 	.word	0x080187e4
 800cb20:	08018814 	.word	0x08018814
 800cb24:	0801882c 	.word	0x0801882c
 800cb28:	200060c8 	.word	0x200060c8
 800cb2c:	08018854 	.word	0x08018854
 800cb30:	08018870 	.word	0x08018870
 800cb34:	0801888c 	.word	0x0801888c
 800cb38:	200060cc 	.word	0x200060cc

0800cb3c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800cb42:	4b18      	ldr	r3, [pc, #96]	; (800cba4 <mem_init+0x68>)
 800cb44:	3303      	adds	r3, #3
 800cb46:	f023 0303 	bic.w	r3, r3, #3
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	4b16      	ldr	r3, [pc, #88]	; (800cba8 <mem_init+0x6c>)
 800cb4e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800cb50:	4b15      	ldr	r3, [pc, #84]	; (800cba8 <mem_init+0x6c>)
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cb5c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	2200      	movs	r2, #0
 800cb68:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800cb6a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800cb6e:	f7ff ff1f 	bl	800c9b0 <ptr_to_mem>
 800cb72:	4603      	mov	r3, r0
 800cb74:	4a0d      	ldr	r2, [pc, #52]	; (800cbac <mem_init+0x70>)
 800cb76:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800cb78:	4b0c      	ldr	r3, [pc, #48]	; (800cbac <mem_init+0x70>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800cb80:	4b0a      	ldr	r3, [pc, #40]	; (800cbac <mem_init+0x70>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cb88:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800cb8a:	4b08      	ldr	r3, [pc, #32]	; (800cbac <mem_init+0x70>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800cb92:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800cb94:	4b04      	ldr	r3, [pc, #16]	; (800cba8 <mem_init+0x6c>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a05      	ldr	r2, [pc, #20]	; (800cbb0 <mem_init+0x74>)
 800cb9a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800cb9c:	bf00      	nop
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	20005a70 	.word	0x20005a70
 800cba8:	200060c4 	.word	0x200060c4
 800cbac:	200060c8 	.word	0x200060c8
 800cbb0:	200060cc 	.word	0x200060cc

0800cbb4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b086      	sub	sp, #24
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7ff ff09 	bl	800c9d4 <mem_to_ptr>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	881b      	ldrh	r3, [r3, #0]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7ff fef0 	bl	800c9b0 <ptr_to_mem>
 800cbd0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	885b      	ldrh	r3, [r3, #2]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7ff feea 	bl	800c9b0 <ptr_to_mem>
 800cbdc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cbe6:	d818      	bhi.n	800cc1a <mem_link_valid+0x66>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	885b      	ldrh	r3, [r3, #2]
 800cbec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cbf0:	d813      	bhi.n	800cc1a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800cbf6:	8afa      	ldrh	r2, [r7, #22]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d004      	beq.n	800cc06 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	8afa      	ldrh	r2, [r7, #22]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d109      	bne.n	800cc1a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cc06:	4b08      	ldr	r3, [pc, #32]	; (800cc28 <mem_link_valid+0x74>)
 800cc08:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800cc0a:	693a      	ldr	r2, [r7, #16]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d006      	beq.n	800cc1e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	885b      	ldrh	r3, [r3, #2]
 800cc14:	8afa      	ldrh	r2, [r7, #22]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d001      	beq.n	800cc1e <mem_link_valid+0x6a>
    return 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	e000      	b.n	800cc20 <mem_link_valid+0x6c>
  }
  return 1;
 800cc1e:	2301      	movs	r3, #1
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3718      	adds	r7, #24
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	200060c8 	.word	0x200060c8

0800cc2c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d04c      	beq.n	800ccd4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f003 0303 	and.w	r3, r3, #3
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d007      	beq.n	800cc54 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800cc44:	4b25      	ldr	r3, [pc, #148]	; (800ccdc <mem_free+0xb0>)
 800cc46:	f240 2273 	movw	r2, #627	; 0x273
 800cc4a:	4925      	ldr	r1, [pc, #148]	; (800cce0 <mem_free+0xb4>)
 800cc4c:	4825      	ldr	r0, [pc, #148]	; (800cce4 <mem_free+0xb8>)
 800cc4e:	f00a fd43 	bl	80176d8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cc52:	e040      	b.n	800ccd6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	3b08      	subs	r3, #8
 800cc58:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800cc5a:	4b23      	ldr	r3, [pc, #140]	; (800cce8 <mem_free+0xbc>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d306      	bcc.n	800cc72 <mem_free+0x46>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f103 020c 	add.w	r2, r3, #12
 800cc6a:	4b20      	ldr	r3, [pc, #128]	; (800ccec <mem_free+0xc0>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d907      	bls.n	800cc82 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800cc72:	4b1a      	ldr	r3, [pc, #104]	; (800ccdc <mem_free+0xb0>)
 800cc74:	f240 227f 	movw	r2, #639	; 0x27f
 800cc78:	491d      	ldr	r1, [pc, #116]	; (800ccf0 <mem_free+0xc4>)
 800cc7a:	481a      	ldr	r0, [pc, #104]	; (800cce4 <mem_free+0xb8>)
 800cc7c:	f00a fd2c 	bl	80176d8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cc80:	e029      	b.n	800ccd6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	791b      	ldrb	r3, [r3, #4]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d107      	bne.n	800cc9a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800cc8a:	4b14      	ldr	r3, [pc, #80]	; (800ccdc <mem_free+0xb0>)
 800cc8c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800cc90:	4918      	ldr	r1, [pc, #96]	; (800ccf4 <mem_free+0xc8>)
 800cc92:	4814      	ldr	r0, [pc, #80]	; (800cce4 <mem_free+0xb8>)
 800cc94:	f00a fd20 	bl	80176d8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800cc98:	e01d      	b.n	800ccd6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f7ff ff8a 	bl	800cbb4 <mem_link_valid>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d107      	bne.n	800ccb6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800cca6:	4b0d      	ldr	r3, [pc, #52]	; (800ccdc <mem_free+0xb0>)
 800cca8:	f240 2295 	movw	r2, #661	; 0x295
 800ccac:	4912      	ldr	r1, [pc, #72]	; (800ccf8 <mem_free+0xcc>)
 800ccae:	480d      	ldr	r0, [pc, #52]	; (800cce4 <mem_free+0xb8>)
 800ccb0:	f00a fd12 	bl	80176d8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800ccb4:	e00f      	b.n	800ccd6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ccbc:	4b0f      	ldr	r3, [pc, #60]	; (800ccfc <mem_free+0xd0>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d202      	bcs.n	800cccc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ccc6:	4a0d      	ldr	r2, [pc, #52]	; (800ccfc <mem_free+0xd0>)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800cccc:	68f8      	ldr	r0, [r7, #12]
 800ccce:	f7ff fe93 	bl	800c9f8 <plug_holes>
 800ccd2:	e000      	b.n	800ccd6 <mem_free+0xaa>
    return;
 800ccd4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800ccd6:	3710      	adds	r7, #16
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	080187e4 	.word	0x080187e4
 800cce0:	080188b8 	.word	0x080188b8
 800cce4:	0801882c 	.word	0x0801882c
 800cce8:	200060c4 	.word	0x200060c4
 800ccec:	200060c8 	.word	0x200060c8
 800ccf0:	080188dc 	.word	0x080188dc
 800ccf4:	080188f8 	.word	0x080188f8
 800ccf8:	08018920 	.word	0x08018920
 800ccfc:	200060cc 	.word	0x200060cc

0800cd00 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b088      	sub	sp, #32
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
 800cd08:	460b      	mov	r3, r1
 800cd0a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800cd0c:	887b      	ldrh	r3, [r7, #2]
 800cd0e:	3303      	adds	r3, #3
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	f023 0303 	bic.w	r3, r3, #3
 800cd16:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800cd18:	8bfb      	ldrh	r3, [r7, #30]
 800cd1a:	2b0b      	cmp	r3, #11
 800cd1c:	d801      	bhi.n	800cd22 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800cd1e:	230c      	movs	r3, #12
 800cd20:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800cd22:	8bfb      	ldrh	r3, [r7, #30]
 800cd24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cd28:	d803      	bhi.n	800cd32 <mem_trim+0x32>
 800cd2a:	8bfa      	ldrh	r2, [r7, #30]
 800cd2c:	887b      	ldrh	r3, [r7, #2]
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d201      	bcs.n	800cd36 <mem_trim+0x36>
    return NULL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	e0cc      	b.n	800ced0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800cd36:	4b68      	ldr	r3, [pc, #416]	; (800ced8 <mem_trim+0x1d8>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d304      	bcc.n	800cd4a <mem_trim+0x4a>
 800cd40:	4b66      	ldr	r3, [pc, #408]	; (800cedc <mem_trim+0x1dc>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d306      	bcc.n	800cd58 <mem_trim+0x58>
 800cd4a:	4b65      	ldr	r3, [pc, #404]	; (800cee0 <mem_trim+0x1e0>)
 800cd4c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800cd50:	4964      	ldr	r1, [pc, #400]	; (800cee4 <mem_trim+0x1e4>)
 800cd52:	4865      	ldr	r0, [pc, #404]	; (800cee8 <mem_trim+0x1e8>)
 800cd54:	f00a fcc0 	bl	80176d8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800cd58:	4b5f      	ldr	r3, [pc, #380]	; (800ced8 <mem_trim+0x1d8>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d304      	bcc.n	800cd6c <mem_trim+0x6c>
 800cd62:	4b5e      	ldr	r3, [pc, #376]	; (800cedc <mem_trim+0x1dc>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d301      	bcc.n	800cd70 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	e0af      	b.n	800ced0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3b08      	subs	r3, #8
 800cd74:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800cd76:	69b8      	ldr	r0, [r7, #24]
 800cd78:	f7ff fe2c 	bl	800c9d4 <mem_to_ptr>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	881a      	ldrh	r2, [r3, #0]
 800cd84:	8afb      	ldrh	r3, [r7, #22]
 800cd86:	1ad3      	subs	r3, r2, r3
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	3b08      	subs	r3, #8
 800cd8c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800cd8e:	8bfa      	ldrh	r2, [r7, #30]
 800cd90:	8abb      	ldrh	r3, [r7, #20]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d906      	bls.n	800cda4 <mem_trim+0xa4>
 800cd96:	4b52      	ldr	r3, [pc, #328]	; (800cee0 <mem_trim+0x1e0>)
 800cd98:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800cd9c:	4953      	ldr	r1, [pc, #332]	; (800ceec <mem_trim+0x1ec>)
 800cd9e:	4852      	ldr	r0, [pc, #328]	; (800cee8 <mem_trim+0x1e8>)
 800cda0:	f00a fc9a 	bl	80176d8 <iprintf>
  if (newsize > size) {
 800cda4:	8bfa      	ldrh	r2, [r7, #30]
 800cda6:	8abb      	ldrh	r3, [r7, #20]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d901      	bls.n	800cdb0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800cdac:	2300      	movs	r3, #0
 800cdae:	e08f      	b.n	800ced0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800cdb0:	8bfa      	ldrh	r2, [r7, #30]
 800cdb2:	8abb      	ldrh	r3, [r7, #20]
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d101      	bne.n	800cdbc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	e089      	b.n	800ced0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	881b      	ldrh	r3, [r3, #0]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff fdf5 	bl	800c9b0 <ptr_to_mem>
 800cdc6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	791b      	ldrb	r3, [r3, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d13f      	bne.n	800ce50 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800cdd0:	69bb      	ldr	r3, [r7, #24]
 800cdd2:	881b      	ldrh	r3, [r3, #0]
 800cdd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cdd8:	d106      	bne.n	800cde8 <mem_trim+0xe8>
 800cdda:	4b41      	ldr	r3, [pc, #260]	; (800cee0 <mem_trim+0x1e0>)
 800cddc:	f240 22f5 	movw	r2, #757	; 0x2f5
 800cde0:	4943      	ldr	r1, [pc, #268]	; (800cef0 <mem_trim+0x1f0>)
 800cde2:	4841      	ldr	r0, [pc, #260]	; (800cee8 <mem_trim+0x1e8>)
 800cde4:	f00a fc78 	bl	80176d8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800cdee:	8afa      	ldrh	r2, [r7, #22]
 800cdf0:	8bfb      	ldrh	r3, [r7, #30]
 800cdf2:	4413      	add	r3, r2
 800cdf4:	b29b      	uxth	r3, r3
 800cdf6:	3308      	adds	r3, #8
 800cdf8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800cdfa:	4b3e      	ldr	r3, [pc, #248]	; (800cef4 <mem_trim+0x1f4>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	693a      	ldr	r2, [r7, #16]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d106      	bne.n	800ce12 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800ce04:	89fb      	ldrh	r3, [r7, #14]
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7ff fdd2 	bl	800c9b0 <ptr_to_mem>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	4a39      	ldr	r2, [pc, #228]	; (800cef4 <mem_trim+0x1f4>)
 800ce10:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ce12:	89fb      	ldrh	r3, [r7, #14]
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7ff fdcb 	bl	800c9b0 <ptr_to_mem>
 800ce1a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	89ba      	ldrh	r2, [r7, #12]
 800ce26:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	8afa      	ldrh	r2, [r7, #22]
 800ce2c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	89fa      	ldrh	r2, [r7, #14]
 800ce32:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce3c:	d047      	beq.n	800cece <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	881b      	ldrh	r3, [r3, #0]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7ff fdb4 	bl	800c9b0 <ptr_to_mem>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	89fb      	ldrh	r3, [r7, #14]
 800ce4c:	8053      	strh	r3, [r2, #2]
 800ce4e:	e03e      	b.n	800cece <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ce50:	8bfb      	ldrh	r3, [r7, #30]
 800ce52:	f103 0214 	add.w	r2, r3, #20
 800ce56:	8abb      	ldrh	r3, [r7, #20]
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d838      	bhi.n	800cece <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ce5c:	8afa      	ldrh	r2, [r7, #22]
 800ce5e:	8bfb      	ldrh	r3, [r7, #30]
 800ce60:	4413      	add	r3, r2
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	3308      	adds	r3, #8
 800ce66:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	881b      	ldrh	r3, [r3, #0]
 800ce6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ce70:	d106      	bne.n	800ce80 <mem_trim+0x180>
 800ce72:	4b1b      	ldr	r3, [pc, #108]	; (800cee0 <mem_trim+0x1e0>)
 800ce74:	f240 3216 	movw	r2, #790	; 0x316
 800ce78:	491d      	ldr	r1, [pc, #116]	; (800cef0 <mem_trim+0x1f0>)
 800ce7a:	481b      	ldr	r0, [pc, #108]	; (800cee8 <mem_trim+0x1e8>)
 800ce7c:	f00a fc2c 	bl	80176d8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ce80:	89fb      	ldrh	r3, [r7, #14]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7ff fd94 	bl	800c9b0 <ptr_to_mem>
 800ce88:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ce8a:	4b1a      	ldr	r3, [pc, #104]	; (800cef4 <mem_trim+0x1f4>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	693a      	ldr	r2, [r7, #16]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d202      	bcs.n	800ce9a <mem_trim+0x19a>
      lfree = mem2;
 800ce94:	4a17      	ldr	r2, [pc, #92]	; (800cef4 <mem_trim+0x1f4>)
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	881a      	ldrh	r2, [r3, #0]
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	8afa      	ldrh	r2, [r7, #22]
 800ceac:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ceae:	69bb      	ldr	r3, [r7, #24]
 800ceb0:	89fa      	ldrh	r2, [r7, #14]
 800ceb2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	881b      	ldrh	r3, [r3, #0]
 800ceb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cebc:	d007      	beq.n	800cece <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	881b      	ldrh	r3, [r3, #0]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7ff fd74 	bl	800c9b0 <ptr_to_mem>
 800cec8:	4602      	mov	r2, r0
 800ceca:	89fb      	ldrh	r3, [r7, #14]
 800cecc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800cece:	687b      	ldr	r3, [r7, #4]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3720      	adds	r7, #32
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	200060c4 	.word	0x200060c4
 800cedc:	200060c8 	.word	0x200060c8
 800cee0:	080187e4 	.word	0x080187e4
 800cee4:	08018954 	.word	0x08018954
 800cee8:	0801882c 	.word	0x0801882c
 800ceec:	0801896c 	.word	0x0801896c
 800cef0:	0801898c 	.word	0x0801898c
 800cef4:	200060cc 	.word	0x200060cc

0800cef8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b088      	sub	sp, #32
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	4603      	mov	r3, r0
 800cf00:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800cf02:	88fb      	ldrh	r3, [r7, #6]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d101      	bne.n	800cf0c <mem_malloc+0x14>
    return NULL;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	e0d9      	b.n	800d0c0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800cf0c:	88fb      	ldrh	r3, [r7, #6]
 800cf0e:	3303      	adds	r3, #3
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	f023 0303 	bic.w	r3, r3, #3
 800cf16:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800cf18:	8bbb      	ldrh	r3, [r7, #28]
 800cf1a:	2b0b      	cmp	r3, #11
 800cf1c:	d801      	bhi.n	800cf22 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800cf1e:	230c      	movs	r3, #12
 800cf20:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800cf22:	8bbb      	ldrh	r3, [r7, #28]
 800cf24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf28:	d803      	bhi.n	800cf32 <mem_malloc+0x3a>
 800cf2a:	8bba      	ldrh	r2, [r7, #28]
 800cf2c:	88fb      	ldrh	r3, [r7, #6]
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d201      	bcs.n	800cf36 <mem_malloc+0x3e>
    return NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	e0c4      	b.n	800d0c0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cf36:	4b64      	ldr	r3, [pc, #400]	; (800d0c8 <mem_malloc+0x1d0>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7ff fd4a 	bl	800c9d4 <mem_to_ptr>
 800cf40:	4603      	mov	r3, r0
 800cf42:	83fb      	strh	r3, [r7, #30]
 800cf44:	e0b4      	b.n	800d0b0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800cf46:	8bfb      	ldrh	r3, [r7, #30]
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7ff fd31 	bl	800c9b0 <ptr_to_mem>
 800cf4e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	791b      	ldrb	r3, [r3, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f040 80a4 	bne.w	800d0a2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	881b      	ldrh	r3, [r3, #0]
 800cf5e:	461a      	mov	r2, r3
 800cf60:	8bfb      	ldrh	r3, [r7, #30]
 800cf62:	1ad3      	subs	r3, r2, r3
 800cf64:	f1a3 0208 	sub.w	r2, r3, #8
 800cf68:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	f0c0 8099 	bcc.w	800d0a2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	881b      	ldrh	r3, [r3, #0]
 800cf74:	461a      	mov	r2, r3
 800cf76:	8bfb      	ldrh	r3, [r7, #30]
 800cf78:	1ad3      	subs	r3, r2, r3
 800cf7a:	f1a3 0208 	sub.w	r2, r3, #8
 800cf7e:	8bbb      	ldrh	r3, [r7, #28]
 800cf80:	3314      	adds	r3, #20
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d333      	bcc.n	800cfee <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800cf86:	8bfa      	ldrh	r2, [r7, #30]
 800cf88:	8bbb      	ldrh	r3, [r7, #28]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	3308      	adds	r3, #8
 800cf90:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800cf92:	8a7b      	ldrh	r3, [r7, #18]
 800cf94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf98:	d106      	bne.n	800cfa8 <mem_malloc+0xb0>
 800cf9a:	4b4c      	ldr	r3, [pc, #304]	; (800d0cc <mem_malloc+0x1d4>)
 800cf9c:	f240 3287 	movw	r2, #903	; 0x387
 800cfa0:	494b      	ldr	r1, [pc, #300]	; (800d0d0 <mem_malloc+0x1d8>)
 800cfa2:	484c      	ldr	r0, [pc, #304]	; (800d0d4 <mem_malloc+0x1dc>)
 800cfa4:	f00a fb98 	bl	80176d8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800cfa8:	8a7b      	ldrh	r3, [r7, #18]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7ff fd00 	bl	800c9b0 <ptr_to_mem>
 800cfb0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	881a      	ldrh	r2, [r3, #0]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	8bfa      	ldrh	r2, [r7, #30]
 800cfc4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	8a7a      	ldrh	r2, [r7, #18]
 800cfca:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	881b      	ldrh	r3, [r3, #0]
 800cfd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cfda:	d00b      	beq.n	800cff4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	881b      	ldrh	r3, [r3, #0]
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7ff fce5 	bl	800c9b0 <ptr_to_mem>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	8a7b      	ldrh	r3, [r7, #18]
 800cfea:	8053      	strh	r3, [r2, #2]
 800cfec:	e002      	b.n	800cff4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	2201      	movs	r2, #1
 800cff2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800cff4:	4b34      	ldr	r3, [pc, #208]	; (800d0c8 <mem_malloc+0x1d0>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	697a      	ldr	r2, [r7, #20]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d127      	bne.n	800d04e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800cffe:	4b32      	ldr	r3, [pc, #200]	; (800d0c8 <mem_malloc+0x1d0>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d004:	e005      	b.n	800d012 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	881b      	ldrh	r3, [r3, #0]
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7ff fcd0 	bl	800c9b0 <ptr_to_mem>
 800d010:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d012:	69bb      	ldr	r3, [r7, #24]
 800d014:	791b      	ldrb	r3, [r3, #4]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d004      	beq.n	800d024 <mem_malloc+0x12c>
 800d01a:	4b2f      	ldr	r3, [pc, #188]	; (800d0d8 <mem_malloc+0x1e0>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	69ba      	ldr	r2, [r7, #24]
 800d020:	429a      	cmp	r2, r3
 800d022:	d1f0      	bne.n	800d006 <mem_malloc+0x10e>
          }
          lfree = cur;
 800d024:	4a28      	ldr	r2, [pc, #160]	; (800d0c8 <mem_malloc+0x1d0>)
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d02a:	4b27      	ldr	r3, [pc, #156]	; (800d0c8 <mem_malloc+0x1d0>)
 800d02c:	681a      	ldr	r2, [r3, #0]
 800d02e:	4b2a      	ldr	r3, [pc, #168]	; (800d0d8 <mem_malloc+0x1e0>)
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	429a      	cmp	r2, r3
 800d034:	d00b      	beq.n	800d04e <mem_malloc+0x156>
 800d036:	4b24      	ldr	r3, [pc, #144]	; (800d0c8 <mem_malloc+0x1d0>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	791b      	ldrb	r3, [r3, #4]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d006      	beq.n	800d04e <mem_malloc+0x156>
 800d040:	4b22      	ldr	r3, [pc, #136]	; (800d0cc <mem_malloc+0x1d4>)
 800d042:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d046:	4925      	ldr	r1, [pc, #148]	; (800d0dc <mem_malloc+0x1e4>)
 800d048:	4822      	ldr	r0, [pc, #136]	; (800d0d4 <mem_malloc+0x1dc>)
 800d04a:	f00a fb45 	bl	80176d8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d04e:	8bba      	ldrh	r2, [r7, #28]
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	4413      	add	r3, r2
 800d054:	3308      	adds	r3, #8
 800d056:	4a20      	ldr	r2, [pc, #128]	; (800d0d8 <mem_malloc+0x1e0>)
 800d058:	6812      	ldr	r2, [r2, #0]
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d906      	bls.n	800d06c <mem_malloc+0x174>
 800d05e:	4b1b      	ldr	r3, [pc, #108]	; (800d0cc <mem_malloc+0x1d4>)
 800d060:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d064:	491e      	ldr	r1, [pc, #120]	; (800d0e0 <mem_malloc+0x1e8>)
 800d066:	481b      	ldr	r0, [pc, #108]	; (800d0d4 <mem_malloc+0x1dc>)
 800d068:	f00a fb36 	bl	80176d8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	f003 0303 	and.w	r3, r3, #3
 800d072:	2b00      	cmp	r3, #0
 800d074:	d006      	beq.n	800d084 <mem_malloc+0x18c>
 800d076:	4b15      	ldr	r3, [pc, #84]	; (800d0cc <mem_malloc+0x1d4>)
 800d078:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d07c:	4919      	ldr	r1, [pc, #100]	; (800d0e4 <mem_malloc+0x1ec>)
 800d07e:	4815      	ldr	r0, [pc, #84]	; (800d0d4 <mem_malloc+0x1dc>)
 800d080:	f00a fb2a 	bl	80176d8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	f003 0303 	and.w	r3, r3, #3
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d006      	beq.n	800d09c <mem_malloc+0x1a4>
 800d08e:	4b0f      	ldr	r3, [pc, #60]	; (800d0cc <mem_malloc+0x1d4>)
 800d090:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d094:	4914      	ldr	r1, [pc, #80]	; (800d0e8 <mem_malloc+0x1f0>)
 800d096:	480f      	ldr	r0, [pc, #60]	; (800d0d4 <mem_malloc+0x1dc>)
 800d098:	f00a fb1e 	bl	80176d8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	3308      	adds	r3, #8
 800d0a0:	e00e      	b.n	800d0c0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800d0a2:	8bfb      	ldrh	r3, [r7, #30]
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	f7ff fc83 	bl	800c9b0 <ptr_to_mem>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	881b      	ldrh	r3, [r3, #0]
 800d0ae:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d0b0:	8bfa      	ldrh	r2, [r7, #30]
 800d0b2:	8bbb      	ldrh	r3, [r7, #28]
 800d0b4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	f4ff af44 	bcc.w	800cf46 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d0be:	2300      	movs	r3, #0
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3720      	adds	r7, #32
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}
 800d0c8:	200060cc 	.word	0x200060cc
 800d0cc:	080187e4 	.word	0x080187e4
 800d0d0:	0801898c 	.word	0x0801898c
 800d0d4:	0801882c 	.word	0x0801882c
 800d0d8:	200060c8 	.word	0x200060c8
 800d0dc:	080189a0 	.word	0x080189a0
 800d0e0:	080189bc 	.word	0x080189bc
 800d0e4:	080189ec 	.word	0x080189ec
 800d0e8:	08018a1c 	.word	0x08018a1c

0800d0ec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	3303      	adds	r3, #3
 800d102:	f023 0303 	bic.w	r3, r3, #3
 800d106:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d108:	2300      	movs	r3, #0
 800d10a:	60fb      	str	r3, [r7, #12]
 800d10c:	e011      	b.n	800d132 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	681a      	ldr	r2, [r3, #0]
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	881b      	ldrh	r3, [r3, #0]
 800d124:	461a      	mov	r2, r3
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	4413      	add	r3, r2
 800d12a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	3301      	adds	r3, #1
 800d130:	60fb      	str	r3, [r7, #12]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	885b      	ldrh	r3, [r3, #2]
 800d136:	461a      	mov	r2, r3
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	4293      	cmp	r3, r2
 800d13c:	dbe7      	blt.n	800d10e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d13e:	bf00      	nop
 800d140:	bf00      	nop
 800d142:	3714      	adds	r7, #20
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d152:	2300      	movs	r3, #0
 800d154:	80fb      	strh	r3, [r7, #6]
 800d156:	e009      	b.n	800d16c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d158:	88fb      	ldrh	r3, [r7, #6]
 800d15a:	4a08      	ldr	r2, [pc, #32]	; (800d17c <memp_init+0x30>)
 800d15c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d160:	4618      	mov	r0, r3
 800d162:	f7ff ffc3 	bl	800d0ec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d166:	88fb      	ldrh	r3, [r7, #6]
 800d168:	3301      	adds	r3, #1
 800d16a:	80fb      	strh	r3, [r7, #6]
 800d16c:	88fb      	ldrh	r3, [r7, #6]
 800d16e:	2b08      	cmp	r3, #8
 800d170:	d9f2      	bls.n	800d158 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d172:	bf00      	nop
 800d174:	bf00      	nop
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	0801b208 	.word	0x0801b208

0800d180 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d012      	beq.n	800d1bc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	6812      	ldr	r2, [r2, #0]
 800d19e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f003 0303 	and.w	r3, r3, #3
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d006      	beq.n	800d1b8 <do_memp_malloc_pool+0x38>
 800d1aa:	4b07      	ldr	r3, [pc, #28]	; (800d1c8 <do_memp_malloc_pool+0x48>)
 800d1ac:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d1b0:	4906      	ldr	r1, [pc, #24]	; (800d1cc <do_memp_malloc_pool+0x4c>)
 800d1b2:	4807      	ldr	r0, [pc, #28]	; (800d1d0 <do_memp_malloc_pool+0x50>)
 800d1b4:	f00a fa90 	bl	80176d8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	e000      	b.n	800d1be <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	08018a40 	.word	0x08018a40
 800d1cc:	08018a70 	.word	0x08018a70
 800d1d0:	08018a94 	.word	0x08018a94

0800d1d4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <memp_malloc_pool+0x1c>
 800d1e2:	4b0a      	ldr	r3, [pc, #40]	; (800d20c <memp_malloc_pool+0x38>)
 800d1e4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800d1e8:	4909      	ldr	r1, [pc, #36]	; (800d210 <memp_malloc_pool+0x3c>)
 800d1ea:	480a      	ldr	r0, [pc, #40]	; (800d214 <memp_malloc_pool+0x40>)
 800d1ec:	f00a fa74 	bl	80176d8 <iprintf>
  if (desc == NULL) {
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d101      	bne.n	800d1fa <memp_malloc_pool+0x26>
    return NULL;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	e003      	b.n	800d202 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f7ff ffc0 	bl	800d180 <do_memp_malloc_pool>
 800d200:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800d202:	4618      	mov	r0, r3
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	08018a40 	.word	0x08018a40
 800d210:	08018abc 	.word	0x08018abc
 800d214:	08018a94 	.word	0x08018a94

0800d218 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	4603      	mov	r3, r0
 800d220:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d222:	79fb      	ldrb	r3, [r7, #7]
 800d224:	2b08      	cmp	r3, #8
 800d226:	d908      	bls.n	800d23a <memp_malloc+0x22>
 800d228:	4b0a      	ldr	r3, [pc, #40]	; (800d254 <memp_malloc+0x3c>)
 800d22a:	f240 1257 	movw	r2, #343	; 0x157
 800d22e:	490a      	ldr	r1, [pc, #40]	; (800d258 <memp_malloc+0x40>)
 800d230:	480a      	ldr	r0, [pc, #40]	; (800d25c <memp_malloc+0x44>)
 800d232:	f00a fa51 	bl	80176d8 <iprintf>
 800d236:	2300      	movs	r3, #0
 800d238:	e008      	b.n	800d24c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d23a:	79fb      	ldrb	r3, [r7, #7]
 800d23c:	4a08      	ldr	r2, [pc, #32]	; (800d260 <memp_malloc+0x48>)
 800d23e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d242:	4618      	mov	r0, r3
 800d244:	f7ff ff9c 	bl	800d180 <do_memp_malloc_pool>
 800d248:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d24a:	68fb      	ldr	r3, [r7, #12]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}
 800d254:	08018a40 	.word	0x08018a40
 800d258:	08018ad0 	.word	0x08018ad0
 800d25c:	08018a94 	.word	0x08018a94
 800d260:	0801b208 	.word	0x0801b208

0800d264 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b084      	sub	sp, #16
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
 800d26c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	f003 0303 	and.w	r3, r3, #3
 800d274:	2b00      	cmp	r3, #0
 800d276:	d006      	beq.n	800d286 <do_memp_free_pool+0x22>
 800d278:	4b0a      	ldr	r3, [pc, #40]	; (800d2a4 <do_memp_free_pool+0x40>)
 800d27a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d27e:	490a      	ldr	r1, [pc, #40]	; (800d2a8 <do_memp_free_pool+0x44>)
 800d280:	480a      	ldr	r0, [pc, #40]	; (800d2ac <do_memp_free_pool+0x48>)
 800d282:	f00a fa29 	bl	80176d8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	689b      	ldr	r3, [r3, #8]
 800d28e:	681a      	ldr	r2, [r3, #0]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	68fa      	ldr	r2, [r7, #12]
 800d29a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800d29c:	bf00      	nop
 800d29e:	3710      	adds	r7, #16
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	08018a40 	.word	0x08018a40
 800d2a8:	08018af0 	.word	0x08018af0
 800d2ac:	08018a94 	.word	0x08018a94

0800d2b0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d106      	bne.n	800d2ce <memp_free_pool+0x1e>
 800d2c0:	4b0a      	ldr	r3, [pc, #40]	; (800d2ec <memp_free_pool+0x3c>)
 800d2c2:	f240 1295 	movw	r2, #405	; 0x195
 800d2c6:	490a      	ldr	r1, [pc, #40]	; (800d2f0 <memp_free_pool+0x40>)
 800d2c8:	480a      	ldr	r0, [pc, #40]	; (800d2f4 <memp_free_pool+0x44>)
 800d2ca:	f00a fa05 	bl	80176d8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d007      	beq.n	800d2e4 <memp_free_pool+0x34>
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d004      	beq.n	800d2e4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800d2da:	6839      	ldr	r1, [r7, #0]
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff ffc1 	bl	800d264 <do_memp_free_pool>
 800d2e2:	e000      	b.n	800d2e6 <memp_free_pool+0x36>
    return;
 800d2e4:	bf00      	nop
}
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	08018a40 	.word	0x08018a40
 800d2f0:	08018abc 	.word	0x08018abc
 800d2f4:	08018a94 	.word	0x08018a94

0800d2f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	6039      	str	r1, [r7, #0]
 800d302:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d304:	79fb      	ldrb	r3, [r7, #7]
 800d306:	2b08      	cmp	r3, #8
 800d308:	d907      	bls.n	800d31a <memp_free+0x22>
 800d30a:	4b0c      	ldr	r3, [pc, #48]	; (800d33c <memp_free+0x44>)
 800d30c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d310:	490b      	ldr	r1, [pc, #44]	; (800d340 <memp_free+0x48>)
 800d312:	480c      	ldr	r0, [pc, #48]	; (800d344 <memp_free+0x4c>)
 800d314:	f00a f9e0 	bl	80176d8 <iprintf>
 800d318:	e00c      	b.n	800d334 <memp_free+0x3c>

  if (mem == NULL) {
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d008      	beq.n	800d332 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d320:	79fb      	ldrb	r3, [r7, #7]
 800d322:	4a09      	ldr	r2, [pc, #36]	; (800d348 <memp_free+0x50>)
 800d324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d328:	6839      	ldr	r1, [r7, #0]
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7ff ff9a 	bl	800d264 <do_memp_free_pool>
 800d330:	e000      	b.n	800d334 <memp_free+0x3c>
    return;
 800d332:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d334:	3708      	adds	r7, #8
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}
 800d33a:	bf00      	nop
 800d33c:	08018a40 	.word	0x08018a40
 800d340:	08018b10 	.word	0x08018b10
 800d344:	08018a94 	.word	0x08018a94
 800d348:	0801b208 	.word	0x0801b208

0800d34c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d34c:	b480      	push	{r7}
 800d34e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d350:	bf00      	nop
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr
	...

0800d35c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
 800d362:	60f8      	str	r0, [r7, #12]
 800d364:	60b9      	str	r1, [r7, #8]
 800d366:	607a      	str	r2, [r7, #4]
 800d368:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d108      	bne.n	800d382 <netif_add+0x26>
 800d370:	4b57      	ldr	r3, [pc, #348]	; (800d4d0 <netif_add+0x174>)
 800d372:	f240 1227 	movw	r2, #295	; 0x127
 800d376:	4957      	ldr	r1, [pc, #348]	; (800d4d4 <netif_add+0x178>)
 800d378:	4857      	ldr	r0, [pc, #348]	; (800d4d8 <netif_add+0x17c>)
 800d37a:	f00a f9ad 	bl	80176d8 <iprintf>
 800d37e:	2300      	movs	r3, #0
 800d380:	e0a2      	b.n	800d4c8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d384:	2b00      	cmp	r3, #0
 800d386:	d108      	bne.n	800d39a <netif_add+0x3e>
 800d388:	4b51      	ldr	r3, [pc, #324]	; (800d4d0 <netif_add+0x174>)
 800d38a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d38e:	4953      	ldr	r1, [pc, #332]	; (800d4dc <netif_add+0x180>)
 800d390:	4851      	ldr	r0, [pc, #324]	; (800d4d8 <netif_add+0x17c>)
 800d392:	f00a f9a1 	bl	80176d8 <iprintf>
 800d396:	2300      	movs	r3, #0
 800d398:	e096      	b.n	800d4c8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d101      	bne.n	800d3a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d3a0:	4b4f      	ldr	r3, [pc, #316]	; (800d4e0 <netif_add+0x184>)
 800d3a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d101      	bne.n	800d3ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d3aa:	4b4d      	ldr	r3, [pc, #308]	; (800d4e0 <netif_add+0x184>)
 800d3ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d101      	bne.n	800d3b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d3b4:	4b4a      	ldr	r3, [pc, #296]	; (800d4e0 <netif_add+0x184>)
 800d3b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	4a45      	ldr	r2, [pc, #276]	; (800d4e4 <netif_add+0x188>)
 800d3ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6a3a      	ldr	r2, [r7, #32]
 800d3e8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d3ea:	4b3f      	ldr	r3, [pc, #252]	; (800d4e8 <netif_add+0x18c>)
 800d3ec:	781a      	ldrb	r2, [r3, #0]
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	68b9      	ldr	r1, [r7, #8]
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f000 f913 	bl	800d62c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	4798      	blx	r3
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <netif_add+0xba>
    return NULL;
 800d412:	2300      	movs	r3, #0
 800d414:	e058      	b.n	800d4c8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d41c:	2bff      	cmp	r3, #255	; 0xff
 800d41e:	d103      	bne.n	800d428 <netif_add+0xcc>
        netif->num = 0;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2200      	movs	r2, #0
 800d424:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d428:	2300      	movs	r3, #0
 800d42a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d42c:	4b2f      	ldr	r3, [pc, #188]	; (800d4ec <netif_add+0x190>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	617b      	str	r3, [r7, #20]
 800d432:	e02b      	b.n	800d48c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d434:	697a      	ldr	r2, [r7, #20]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	429a      	cmp	r2, r3
 800d43a:	d106      	bne.n	800d44a <netif_add+0xee>
 800d43c:	4b24      	ldr	r3, [pc, #144]	; (800d4d0 <netif_add+0x174>)
 800d43e:	f240 128b 	movw	r2, #395	; 0x18b
 800d442:	492b      	ldr	r1, [pc, #172]	; (800d4f0 <netif_add+0x194>)
 800d444:	4824      	ldr	r0, [pc, #144]	; (800d4d8 <netif_add+0x17c>)
 800d446:	f00a f947 	bl	80176d8 <iprintf>
        num_netifs++;
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	3301      	adds	r3, #1
 800d44e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	2bff      	cmp	r3, #255	; 0xff
 800d454:	dd06      	ble.n	800d464 <netif_add+0x108>
 800d456:	4b1e      	ldr	r3, [pc, #120]	; (800d4d0 <netif_add+0x174>)
 800d458:	f240 128d 	movw	r2, #397	; 0x18d
 800d45c:	4925      	ldr	r1, [pc, #148]	; (800d4f4 <netif_add+0x198>)
 800d45e:	481e      	ldr	r0, [pc, #120]	; (800d4d8 <netif_add+0x17c>)
 800d460:	f00a f93a 	bl	80176d8 <iprintf>
        if (netif2->num == netif->num) {
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d470:	429a      	cmp	r2, r3
 800d472:	d108      	bne.n	800d486 <netif_add+0x12a>
          netif->num++;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d47a:	3301      	adds	r3, #1
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d484:	e005      	b.n	800d492 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d486:	697b      	ldr	r3, [r7, #20]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	617b      	str	r3, [r7, #20]
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d1d0      	bne.n	800d434 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d1be      	bne.n	800d416 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d49e:	2bfe      	cmp	r3, #254	; 0xfe
 800d4a0:	d103      	bne.n	800d4aa <netif_add+0x14e>
    netif_num = 0;
 800d4a2:	4b11      	ldr	r3, [pc, #68]	; (800d4e8 <netif_add+0x18c>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	701a      	strb	r2, [r3, #0]
 800d4a8:	e006      	b.n	800d4b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	b2da      	uxtb	r2, r3
 800d4b4:	4b0c      	ldr	r3, [pc, #48]	; (800d4e8 <netif_add+0x18c>)
 800d4b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d4b8:	4b0c      	ldr	r3, [pc, #48]	; (800d4ec <netif_add+0x190>)
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d4c0:	4a0a      	ldr	r2, [pc, #40]	; (800d4ec <netif_add+0x190>)
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3718      	adds	r7, #24
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	08018b2c 	.word	0x08018b2c
 800d4d4:	08018bc0 	.word	0x08018bc0
 800d4d8:	08018b7c 	.word	0x08018b7c
 800d4dc:	08018bdc 	.word	0x08018bdc
 800d4e0:	0801b26c 	.word	0x0801b26c
 800d4e4:	0800d907 	.word	0x0800d907
 800d4e8:	20008fc4 	.word	0x20008fc4
 800d4ec:	20008fbc 	.word	0x20008fbc
 800d4f0:	08018c00 	.word	0x08018c00
 800d4f4:	08018c14 	.word	0x08018c14

0800d4f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800d502:	6839      	ldr	r1, [r7, #0]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f002 fbe5 	bl	800fcd4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f007 f85b 	bl	80145c8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d512:	bf00      	nop
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
	...

0800d51c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b086      	sub	sp, #24
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d106      	bne.n	800d53c <netif_do_set_ipaddr+0x20>
 800d52e:	4b1d      	ldr	r3, [pc, #116]	; (800d5a4 <netif_do_set_ipaddr+0x88>)
 800d530:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d534:	491c      	ldr	r1, [pc, #112]	; (800d5a8 <netif_do_set_ipaddr+0x8c>)
 800d536:	481d      	ldr	r0, [pc, #116]	; (800d5ac <netif_do_set_ipaddr+0x90>)
 800d538:	f00a f8ce 	bl	80176d8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d106      	bne.n	800d550 <netif_do_set_ipaddr+0x34>
 800d542:	4b18      	ldr	r3, [pc, #96]	; (800d5a4 <netif_do_set_ipaddr+0x88>)
 800d544:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d548:	4917      	ldr	r1, [pc, #92]	; (800d5a8 <netif_do_set_ipaddr+0x8c>)
 800d54a:	4818      	ldr	r0, [pc, #96]	; (800d5ac <netif_do_set_ipaddr+0x90>)
 800d54c:	f00a f8c4 	bl	80176d8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	3304      	adds	r3, #4
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	429a      	cmp	r2, r3
 800d55c:	d01c      	beq.n	800d598 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d55e:	68bb      	ldr	r3, [r7, #8]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	3304      	adds	r3, #4
 800d568:	681a      	ldr	r2, [r3, #0]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d56e:	f107 0314 	add.w	r3, r7, #20
 800d572:	4619      	mov	r1, r3
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f7ff ffbf 	bl	800d4f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <netif_do_set_ipaddr+0x6a>
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	e000      	b.n	800d588 <netif_do_set_ipaddr+0x6c>
 800d586:	2300      	movs	r3, #0
 800d588:	68fa      	ldr	r2, [r7, #12]
 800d58a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d58c:	2101      	movs	r1, #1
 800d58e:	68f8      	ldr	r0, [r7, #12]
 800d590:	f000 f8d2 	bl	800d738 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d594:	2301      	movs	r3, #1
 800d596:	e000      	b.n	800d59a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d598:	2300      	movs	r3, #0
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3718      	adds	r7, #24
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	08018b2c 	.word	0x08018b2c
 800d5a8:	08018c44 	.word	0x08018c44
 800d5ac:	08018b7c 	.word	0x08018b7c

0800d5b0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d5b0:	b480      	push	{r7}
 800d5b2:	b085      	sub	sp, #20
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	60f8      	str	r0, [r7, #12]
 800d5b8:	60b9      	str	r1, [r7, #8]
 800d5ba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	3308      	adds	r3, #8
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d00a      	beq.n	800d5e0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <netif_do_set_netmask+0x26>
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	e000      	b.n	800d5d8 <netif_do_set_netmask+0x28>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	68fa      	ldr	r2, [r7, #12]
 800d5da:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e000      	b.n	800d5e2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d5e0:	2300      	movs	r3, #0
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3714      	adds	r7, #20
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d5ee:	b480      	push	{r7}
 800d5f0:	b085      	sub	sp, #20
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	60f8      	str	r0, [r7, #12]
 800d5f6:	60b9      	str	r1, [r7, #8]
 800d5f8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	330c      	adds	r3, #12
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	429a      	cmp	r2, r3
 800d606:	d00a      	beq.n	800d61e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d002      	beq.n	800d614 <netif_do_set_gw+0x26>
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	e000      	b.n	800d616 <netif_do_set_gw+0x28>
 800d614:	2300      	movs	r3, #0
 800d616:	68fa      	ldr	r2, [r7, #12]
 800d618:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d61a:	2301      	movs	r3, #1
 800d61c:	e000      	b.n	800d620 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d61e:	2300      	movs	r3, #0
}
 800d620:	4618      	mov	r0, r3
 800d622:	3714      	adds	r7, #20
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b088      	sub	sp, #32
 800d630:	af00      	add	r7, sp, #0
 800d632:	60f8      	str	r0, [r7, #12]
 800d634:	60b9      	str	r1, [r7, #8]
 800d636:	607a      	str	r2, [r7, #4]
 800d638:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d63a:	2300      	movs	r3, #0
 800d63c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d63e:	2300      	movs	r3, #0
 800d640:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d101      	bne.n	800d64c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d648:	4b1c      	ldr	r3, [pc, #112]	; (800d6bc <netif_set_addr+0x90>)
 800d64a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d101      	bne.n	800d656 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d652:	4b1a      	ldr	r3, [pc, #104]	; (800d6bc <netif_set_addr+0x90>)
 800d654:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d101      	bne.n	800d660 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d65c:	4b17      	ldr	r3, [pc, #92]	; (800d6bc <netif_set_addr+0x90>)
 800d65e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <netif_set_addr+0x42>
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <netif_set_addr+0x46>
 800d66e:	2301      	movs	r3, #1
 800d670:	e000      	b.n	800d674 <netif_set_addr+0x48>
 800d672:	2300      	movs	r3, #0
 800d674:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d006      	beq.n	800d68a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d67c:	f107 0310 	add.w	r3, r7, #16
 800d680:	461a      	mov	r2, r3
 800d682:	68b9      	ldr	r1, [r7, #8]
 800d684:	68f8      	ldr	r0, [r7, #12]
 800d686:	f7ff ff49 	bl	800d51c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d68a:	69fa      	ldr	r2, [r7, #28]
 800d68c:	6879      	ldr	r1, [r7, #4]
 800d68e:	68f8      	ldr	r0, [r7, #12]
 800d690:	f7ff ff8e 	bl	800d5b0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d694:	69ba      	ldr	r2, [r7, #24]
 800d696:	6839      	ldr	r1, [r7, #0]
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f7ff ffa8 	bl	800d5ee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d106      	bne.n	800d6b2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d6a4:	f107 0310 	add.w	r3, r7, #16
 800d6a8:	461a      	mov	r2, r3
 800d6aa:	68b9      	ldr	r1, [r7, #8]
 800d6ac:	68f8      	ldr	r0, [r7, #12]
 800d6ae:	f7ff ff35 	bl	800d51c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d6b2:	bf00      	nop
 800d6b4:	3720      	adds	r7, #32
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	0801b26c 	.word	0x0801b26c

0800d6c0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d6c8:	4a04      	ldr	r2, [pc, #16]	; (800d6dc <netif_set_default+0x1c>)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d6ce:	bf00      	nop
 800d6d0:	370c      	adds	r7, #12
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr
 800d6da:	bf00      	nop
 800d6dc:	20008fc0 	.word	0x20008fc0

0800d6e0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d107      	bne.n	800d6fe <netif_set_up+0x1e>
 800d6ee:	4b0f      	ldr	r3, [pc, #60]	; (800d72c <netif_set_up+0x4c>)
 800d6f0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d6f4:	490e      	ldr	r1, [pc, #56]	; (800d730 <netif_set_up+0x50>)
 800d6f6:	480f      	ldr	r0, [pc, #60]	; (800d734 <netif_set_up+0x54>)
 800d6f8:	f009 ffee 	bl	80176d8 <iprintf>
 800d6fc:	e013      	b.n	800d726 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d704:	f003 0301 	and.w	r3, r3, #1
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10c      	bne.n	800d726 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d712:	f043 0301 	orr.w	r3, r3, #1
 800d716:	b2da      	uxtb	r2, r3
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d71e:	2103      	movs	r1, #3
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 f809 	bl	800d738 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d726:	3708      	adds	r7, #8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	08018b2c 	.word	0x08018b2c
 800d730:	08018cb4 	.word	0x08018cb4
 800d734:	08018b7c 	.word	0x08018b7c

0800d738 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	460b      	mov	r3, r1
 800d742:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d106      	bne.n	800d758 <netif_issue_reports+0x20>
 800d74a:	4b18      	ldr	r3, [pc, #96]	; (800d7ac <netif_issue_reports+0x74>)
 800d74c:	f240 326d 	movw	r2, #877	; 0x36d
 800d750:	4917      	ldr	r1, [pc, #92]	; (800d7b0 <netif_issue_reports+0x78>)
 800d752:	4818      	ldr	r0, [pc, #96]	; (800d7b4 <netif_issue_reports+0x7c>)
 800d754:	f009 ffc0 	bl	80176d8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d75e:	f003 0304 	and.w	r3, r3, #4
 800d762:	2b00      	cmp	r3, #0
 800d764:	d01e      	beq.n	800d7a4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d76c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d770:	2b00      	cmp	r3, #0
 800d772:	d017      	beq.n	800d7a4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d774:	78fb      	ldrb	r3, [r7, #3]
 800d776:	f003 0301 	and.w	r3, r3, #1
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d013      	beq.n	800d7a6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	3304      	adds	r3, #4
 800d782:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d784:	2b00      	cmp	r3, #0
 800d786:	d00e      	beq.n	800d7a6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d78e:	f003 0308 	and.w	r3, r3, #8
 800d792:	2b00      	cmp	r3, #0
 800d794:	d007      	beq.n	800d7a6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	3304      	adds	r3, #4
 800d79a:	4619      	mov	r1, r3
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f007 fe7d 	bl	801549c <etharp_request>
 800d7a2:	e000      	b.n	800d7a6 <netif_issue_reports+0x6e>
    return;
 800d7a4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d7a6:	3708      	adds	r7, #8
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}
 800d7ac:	08018b2c 	.word	0x08018b2c
 800d7b0:	08018cd0 	.word	0x08018cd0
 800d7b4:	08018b7c 	.word	0x08018b7c

0800d7b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b082      	sub	sp, #8
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d107      	bne.n	800d7d6 <netif_set_down+0x1e>
 800d7c6:	4b12      	ldr	r3, [pc, #72]	; (800d810 <netif_set_down+0x58>)
 800d7c8:	f240 329b 	movw	r2, #923	; 0x39b
 800d7cc:	4911      	ldr	r1, [pc, #68]	; (800d814 <netif_set_down+0x5c>)
 800d7ce:	4812      	ldr	r0, [pc, #72]	; (800d818 <netif_set_down+0x60>)
 800d7d0:	f009 ff82 	bl	80176d8 <iprintf>
 800d7d4:	e019      	b.n	800d80a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d012      	beq.n	800d80a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7ea:	f023 0301 	bic.w	r3, r3, #1
 800d7ee:	b2da      	uxtb	r2, r3
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d7fc:	f003 0308 	and.w	r3, r3, #8
 800d800:	2b00      	cmp	r3, #0
 800d802:	d002      	beq.n	800d80a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f007 fa07 	bl	8014c18 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}
 800d810:	08018b2c 	.word	0x08018b2c
 800d814:	08018cf4 	.word	0x08018cf4
 800d818:	08018b7c 	.word	0x08018b7c

0800d81c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d107      	bne.n	800d83a <netif_set_link_up+0x1e>
 800d82a:	4b13      	ldr	r3, [pc, #76]	; (800d878 <netif_set_link_up+0x5c>)
 800d82c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d830:	4912      	ldr	r1, [pc, #72]	; (800d87c <netif_set_link_up+0x60>)
 800d832:	4813      	ldr	r0, [pc, #76]	; (800d880 <netif_set_link_up+0x64>)
 800d834:	f009 ff50 	bl	80176d8 <iprintf>
 800d838:	e01b      	b.n	800d872 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d840:	f003 0304 	and.w	r3, r3, #4
 800d844:	2b00      	cmp	r3, #0
 800d846:	d114      	bne.n	800d872 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d84e:	f043 0304 	orr.w	r3, r3, #4
 800d852:	b2da      	uxtb	r2, r3
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d85a:	2103      	movs	r1, #3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f7ff ff6b 	bl	800d738 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	69db      	ldr	r3, [r3, #28]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d003      	beq.n	800d872 <netif_set_link_up+0x56>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	69db      	ldr	r3, [r3, #28]
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	08018b2c 	.word	0x08018b2c
 800d87c:	08018d14 	.word	0x08018d14
 800d880:	08018b7c 	.word	0x08018b7c

0800d884 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b082      	sub	sp, #8
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d107      	bne.n	800d8a2 <netif_set_link_down+0x1e>
 800d892:	4b11      	ldr	r3, [pc, #68]	; (800d8d8 <netif_set_link_down+0x54>)
 800d894:	f240 4206 	movw	r2, #1030	; 0x406
 800d898:	4910      	ldr	r1, [pc, #64]	; (800d8dc <netif_set_link_down+0x58>)
 800d89a:	4811      	ldr	r0, [pc, #68]	; (800d8e0 <netif_set_link_down+0x5c>)
 800d89c:	f009 ff1c 	bl	80176d8 <iprintf>
 800d8a0:	e017      	b.n	800d8d2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8a8:	f003 0304 	and.w	r3, r3, #4
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d010      	beq.n	800d8d2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d8b6:	f023 0304 	bic.w	r3, r3, #4
 800d8ba:	b2da      	uxtb	r2, r3
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	69db      	ldr	r3, [r3, #28]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d003      	beq.n	800d8d2 <netif_set_link_down+0x4e>
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	69db      	ldr	r3, [r3, #28]
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}
 800d8d8:	08018b2c 	.word	0x08018b2c
 800d8dc:	08018d38 	.word	0x08018d38
 800d8e0:	08018b7c 	.word	0x08018b7c

0800d8e4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d002      	beq.n	800d8fa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	683a      	ldr	r2, [r7, #0]
 800d8f8:	61da      	str	r2, [r3, #28]
  }
}
 800d8fa:	bf00      	nop
 800d8fc:	370c      	adds	r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d906:	b480      	push	{r7}
 800d908:	b085      	sub	sp, #20
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	60f8      	str	r0, [r7, #12]
 800d90e:	60b9      	str	r1, [r7, #8]
 800d910:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d912:	f06f 030b 	mvn.w	r3, #11
}
 800d916:	4618      	mov	r0, r3
 800d918:	3714      	adds	r7, #20
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr
	...

0800d924 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d924:	b480      	push	{r7}
 800d926:	b085      	sub	sp, #20
 800d928:	af00      	add	r7, sp, #0
 800d92a:	4603      	mov	r3, r0
 800d92c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d92e:	79fb      	ldrb	r3, [r7, #7]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d013      	beq.n	800d95c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d934:	4b0d      	ldr	r3, [pc, #52]	; (800d96c <netif_get_by_index+0x48>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	60fb      	str	r3, [r7, #12]
 800d93a:	e00c      	b.n	800d956 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d942:	3301      	adds	r3, #1
 800d944:	b2db      	uxtb	r3, r3
 800d946:	79fa      	ldrb	r2, [r7, #7]
 800d948:	429a      	cmp	r2, r3
 800d94a:	d101      	bne.n	800d950 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	e006      	b.n	800d95e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	60fb      	str	r3, [r7, #12]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d1ef      	bne.n	800d93c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d95c:	2300      	movs	r3, #0
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3714      	adds	r7, #20
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	20008fbc 	.word	0x20008fbc

0800d970 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d976:	4b0c      	ldr	r3, [pc, #48]	; (800d9a8 <pbuf_free_ooseq+0x38>)
 800d978:	2200      	movs	r2, #0
 800d97a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d97c:	4b0b      	ldr	r3, [pc, #44]	; (800d9ac <pbuf_free_ooseq+0x3c>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	607b      	str	r3, [r7, #4]
 800d982:	e00a      	b.n	800d99a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d003      	beq.n	800d994 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d98c:	6878      	ldr	r0, [r7, #4]
 800d98e:	f002 f9df 	bl	800fd50 <tcp_free_ooseq>
      return;
 800d992:	e005      	b.n	800d9a0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	68db      	ldr	r3, [r3, #12]
 800d998:	607b      	str	r3, [r7, #4]
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d1f1      	bne.n	800d984 <pbuf_free_ooseq+0x14>
    }
  }
}
 800d9a0:	3708      	adds	r7, #8
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	20008fc5 	.word	0x20008fc5
 800d9ac:	20008fd4 	.word	0x20008fd4

0800d9b0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800d9b4:	4b03      	ldr	r3, [pc, #12]	; (800d9c4 <pbuf_pool_is_empty+0x14>)
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d9ba:	bf00      	nop
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr
 800d9c4:	20008fc5 	.word	0x20008fc5

0800d9c8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	4611      	mov	r1, r2
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	80fb      	strh	r3, [r7, #6]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	68ba      	ldr	r2, [r7, #8]
 800d9e8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	88fa      	ldrh	r2, [r7, #6]
 800d9ee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	88ba      	ldrh	r2, [r7, #4]
 800d9f4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d9f6:	8b3b      	ldrh	r3, [r7, #24]
 800d9f8:	b2da      	uxtb	r2, r3
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	7f3a      	ldrb	r2, [r7, #28]
 800da02:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	2201      	movs	r2, #1
 800da08:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	2200      	movs	r2, #0
 800da0e:	73da      	strb	r2, [r3, #15]
}
 800da10:	bf00      	nop
 800da12:	3714      	adds	r7, #20
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b08c      	sub	sp, #48	; 0x30
 800da20:	af02      	add	r7, sp, #8
 800da22:	4603      	mov	r3, r0
 800da24:	71fb      	strb	r3, [r7, #7]
 800da26:	460b      	mov	r3, r1
 800da28:	80bb      	strh	r3, [r7, #4]
 800da2a:	4613      	mov	r3, r2
 800da2c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800da2e:	79fb      	ldrb	r3, [r7, #7]
 800da30:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800da32:	887b      	ldrh	r3, [r7, #2]
 800da34:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800da38:	d07f      	beq.n	800db3a <pbuf_alloc+0x11e>
 800da3a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800da3e:	f300 80c8 	bgt.w	800dbd2 <pbuf_alloc+0x1b6>
 800da42:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800da46:	d010      	beq.n	800da6a <pbuf_alloc+0x4e>
 800da48:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800da4c:	f300 80c1 	bgt.w	800dbd2 <pbuf_alloc+0x1b6>
 800da50:	2b01      	cmp	r3, #1
 800da52:	d002      	beq.n	800da5a <pbuf_alloc+0x3e>
 800da54:	2b41      	cmp	r3, #65	; 0x41
 800da56:	f040 80bc 	bne.w	800dbd2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800da5a:	887a      	ldrh	r2, [r7, #2]
 800da5c:	88bb      	ldrh	r3, [r7, #4]
 800da5e:	4619      	mov	r1, r3
 800da60:	2000      	movs	r0, #0
 800da62:	f000 f8d1 	bl	800dc08 <pbuf_alloc_reference>
 800da66:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800da68:	e0bd      	b.n	800dbe6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800da6a:	2300      	movs	r3, #0
 800da6c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800da6e:	2300      	movs	r3, #0
 800da70:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800da72:	88bb      	ldrh	r3, [r7, #4]
 800da74:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800da76:	2008      	movs	r0, #8
 800da78:	f7ff fbce 	bl	800d218 <memp_malloc>
 800da7c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d109      	bne.n	800da98 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800da84:	f7ff ff94 	bl	800d9b0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800da88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d002      	beq.n	800da94 <pbuf_alloc+0x78>
            pbuf_free(p);
 800da8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da90:	f000 faa8 	bl	800dfe4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800da94:	2300      	movs	r3, #0
 800da96:	e0a7      	b.n	800dbe8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800da98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da9a:	3303      	adds	r3, #3
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	f023 0303 	bic.w	r3, r3, #3
 800daa2:	b29b      	uxth	r3, r3
 800daa4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	8b7a      	ldrh	r2, [r7, #26]
 800daac:	4293      	cmp	r3, r2
 800daae:	bf28      	it	cs
 800dab0:	4613      	movcs	r3, r2
 800dab2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800dab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dab6:	3310      	adds	r3, #16
 800dab8:	693a      	ldr	r2, [r7, #16]
 800daba:	4413      	add	r3, r2
 800dabc:	3303      	adds	r3, #3
 800dabe:	f023 0303 	bic.w	r3, r3, #3
 800dac2:	4618      	mov	r0, r3
 800dac4:	89f9      	ldrh	r1, [r7, #14]
 800dac6:	8b7a      	ldrh	r2, [r7, #26]
 800dac8:	2300      	movs	r3, #0
 800daca:	9301      	str	r3, [sp, #4]
 800dacc:	887b      	ldrh	r3, [r7, #2]
 800dace:	9300      	str	r3, [sp, #0]
 800dad0:	460b      	mov	r3, r1
 800dad2:	4601      	mov	r1, r0
 800dad4:	6938      	ldr	r0, [r7, #16]
 800dad6:	f7ff ff77 	bl	800d9c8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	f003 0303 	and.w	r3, r3, #3
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d006      	beq.n	800daf4 <pbuf_alloc+0xd8>
 800dae6:	4b42      	ldr	r3, [pc, #264]	; (800dbf0 <pbuf_alloc+0x1d4>)
 800dae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800daec:	4941      	ldr	r1, [pc, #260]	; (800dbf4 <pbuf_alloc+0x1d8>)
 800daee:	4842      	ldr	r0, [pc, #264]	; (800dbf8 <pbuf_alloc+0x1dc>)
 800daf0:	f009 fdf2 	bl	80176d8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800daf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800daf6:	3303      	adds	r3, #3
 800daf8:	f023 0303 	bic.w	r3, r3, #3
 800dafc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800db00:	d106      	bne.n	800db10 <pbuf_alloc+0xf4>
 800db02:	4b3b      	ldr	r3, [pc, #236]	; (800dbf0 <pbuf_alloc+0x1d4>)
 800db04:	f44f 7281 	mov.w	r2, #258	; 0x102
 800db08:	493c      	ldr	r1, [pc, #240]	; (800dbfc <pbuf_alloc+0x1e0>)
 800db0a:	483b      	ldr	r0, [pc, #236]	; (800dbf8 <pbuf_alloc+0x1dc>)
 800db0c:	f009 fde4 	bl	80176d8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800db10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db12:	2b00      	cmp	r3, #0
 800db14:	d102      	bne.n	800db1c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	627b      	str	r3, [r7, #36]	; 0x24
 800db1a:	e002      	b.n	800db22 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	693a      	ldr	r2, [r7, #16]
 800db20:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800db26:	8b7a      	ldrh	r2, [r7, #26]
 800db28:	89fb      	ldrh	r3, [r7, #14]
 800db2a:	1ad3      	subs	r3, r2, r3
 800db2c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800db2e:	2300      	movs	r3, #0
 800db30:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800db32:	8b7b      	ldrh	r3, [r7, #26]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d19e      	bne.n	800da76 <pbuf_alloc+0x5a>
      break;
 800db38:	e055      	b.n	800dbe6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800db3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db3c:	3303      	adds	r3, #3
 800db3e:	b29b      	uxth	r3, r3
 800db40:	f023 0303 	bic.w	r3, r3, #3
 800db44:	b29a      	uxth	r2, r3
 800db46:	88bb      	ldrh	r3, [r7, #4]
 800db48:	3303      	adds	r3, #3
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	f023 0303 	bic.w	r3, r3, #3
 800db50:	b29b      	uxth	r3, r3
 800db52:	4413      	add	r3, r2
 800db54:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800db56:	8b3b      	ldrh	r3, [r7, #24]
 800db58:	3310      	adds	r3, #16
 800db5a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800db5c:	8b3a      	ldrh	r2, [r7, #24]
 800db5e:	88bb      	ldrh	r3, [r7, #4]
 800db60:	3303      	adds	r3, #3
 800db62:	f023 0303 	bic.w	r3, r3, #3
 800db66:	429a      	cmp	r2, r3
 800db68:	d306      	bcc.n	800db78 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800db6a:	8afa      	ldrh	r2, [r7, #22]
 800db6c:	88bb      	ldrh	r3, [r7, #4]
 800db6e:	3303      	adds	r3, #3
 800db70:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800db74:	429a      	cmp	r2, r3
 800db76:	d201      	bcs.n	800db7c <pbuf_alloc+0x160>
        return NULL;
 800db78:	2300      	movs	r3, #0
 800db7a:	e035      	b.n	800dbe8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800db7c:	8afb      	ldrh	r3, [r7, #22]
 800db7e:	4618      	mov	r0, r3
 800db80:	f7ff f9ba 	bl	800cef8 <mem_malloc>
 800db84:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800db86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d101      	bne.n	800db90 <pbuf_alloc+0x174>
        return NULL;
 800db8c:	2300      	movs	r3, #0
 800db8e:	e02b      	b.n	800dbe8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800db90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db92:	3310      	adds	r3, #16
 800db94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db96:	4413      	add	r3, r2
 800db98:	3303      	adds	r3, #3
 800db9a:	f023 0303 	bic.w	r3, r3, #3
 800db9e:	4618      	mov	r0, r3
 800dba0:	88b9      	ldrh	r1, [r7, #4]
 800dba2:	88ba      	ldrh	r2, [r7, #4]
 800dba4:	2300      	movs	r3, #0
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	887b      	ldrh	r3, [r7, #2]
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	460b      	mov	r3, r1
 800dbae:	4601      	mov	r1, r0
 800dbb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbb2:	f7ff ff09 	bl	800d9c8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800dbb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	f003 0303 	and.w	r3, r3, #3
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d010      	beq.n	800dbe4 <pbuf_alloc+0x1c8>
 800dbc2:	4b0b      	ldr	r3, [pc, #44]	; (800dbf0 <pbuf_alloc+0x1d4>)
 800dbc4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800dbc8:	490d      	ldr	r1, [pc, #52]	; (800dc00 <pbuf_alloc+0x1e4>)
 800dbca:	480b      	ldr	r0, [pc, #44]	; (800dbf8 <pbuf_alloc+0x1dc>)
 800dbcc:	f009 fd84 	bl	80176d8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800dbd0:	e008      	b.n	800dbe4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800dbd2:	4b07      	ldr	r3, [pc, #28]	; (800dbf0 <pbuf_alloc+0x1d4>)
 800dbd4:	f240 1227 	movw	r2, #295	; 0x127
 800dbd8:	490a      	ldr	r1, [pc, #40]	; (800dc04 <pbuf_alloc+0x1e8>)
 800dbda:	4807      	ldr	r0, [pc, #28]	; (800dbf8 <pbuf_alloc+0x1dc>)
 800dbdc:	f009 fd7c 	bl	80176d8 <iprintf>
      return NULL;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	e001      	b.n	800dbe8 <pbuf_alloc+0x1cc>
      break;
 800dbe4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800dbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3728      	adds	r7, #40	; 0x28
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	08018d5c 	.word	0x08018d5c
 800dbf4:	08018d8c 	.word	0x08018d8c
 800dbf8:	08018dbc 	.word	0x08018dbc
 800dbfc:	08018de4 	.word	0x08018de4
 800dc00:	08018e18 	.word	0x08018e18
 800dc04:	08018e44 	.word	0x08018e44

0800dc08 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b086      	sub	sp, #24
 800dc0c:	af02      	add	r7, sp, #8
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	460b      	mov	r3, r1
 800dc12:	807b      	strh	r3, [r7, #2]
 800dc14:	4613      	mov	r3, r2
 800dc16:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800dc18:	883b      	ldrh	r3, [r7, #0]
 800dc1a:	2b41      	cmp	r3, #65	; 0x41
 800dc1c:	d009      	beq.n	800dc32 <pbuf_alloc_reference+0x2a>
 800dc1e:	883b      	ldrh	r3, [r7, #0]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d006      	beq.n	800dc32 <pbuf_alloc_reference+0x2a>
 800dc24:	4b0f      	ldr	r3, [pc, #60]	; (800dc64 <pbuf_alloc_reference+0x5c>)
 800dc26:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800dc2a:	490f      	ldr	r1, [pc, #60]	; (800dc68 <pbuf_alloc_reference+0x60>)
 800dc2c:	480f      	ldr	r0, [pc, #60]	; (800dc6c <pbuf_alloc_reference+0x64>)
 800dc2e:	f009 fd53 	bl	80176d8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800dc32:	2007      	movs	r0, #7
 800dc34:	f7ff faf0 	bl	800d218 <memp_malloc>
 800dc38:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d101      	bne.n	800dc44 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800dc40:	2300      	movs	r3, #0
 800dc42:	e00b      	b.n	800dc5c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800dc44:	8879      	ldrh	r1, [r7, #2]
 800dc46:	887a      	ldrh	r2, [r7, #2]
 800dc48:	2300      	movs	r3, #0
 800dc4a:	9301      	str	r3, [sp, #4]
 800dc4c:	883b      	ldrh	r3, [r7, #0]
 800dc4e:	9300      	str	r3, [sp, #0]
 800dc50:	460b      	mov	r3, r1
 800dc52:	6879      	ldr	r1, [r7, #4]
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f7ff feb7 	bl	800d9c8 <pbuf_init_alloced_pbuf>
  return p;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	08018d5c 	.word	0x08018d5c
 800dc68:	08018e60 	.word	0x08018e60
 800dc6c:	08018dbc 	.word	0x08018dbc

0800dc70 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b088      	sub	sp, #32
 800dc74:	af02      	add	r7, sp, #8
 800dc76:	607b      	str	r3, [r7, #4]
 800dc78:	4603      	mov	r3, r0
 800dc7a:	73fb      	strb	r3, [r7, #15]
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	81bb      	strh	r3, [r7, #12]
 800dc80:	4613      	mov	r3, r2
 800dc82:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800dc84:	7bfb      	ldrb	r3, [r7, #15]
 800dc86:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800dc88:	8a7b      	ldrh	r3, [r7, #18]
 800dc8a:	3303      	adds	r3, #3
 800dc8c:	f023 0203 	bic.w	r2, r3, #3
 800dc90:	89bb      	ldrh	r3, [r7, #12]
 800dc92:	441a      	add	r2, r3
 800dc94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d901      	bls.n	800dc9e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	e018      	b.n	800dcd0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800dc9e:	6a3b      	ldr	r3, [r7, #32]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d007      	beq.n	800dcb4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800dca4:	8a7b      	ldrh	r3, [r7, #18]
 800dca6:	3303      	adds	r3, #3
 800dca8:	f023 0303 	bic.w	r3, r3, #3
 800dcac:	6a3a      	ldr	r2, [r7, #32]
 800dcae:	4413      	add	r3, r2
 800dcb0:	617b      	str	r3, [r7, #20]
 800dcb2:	e001      	b.n	800dcb8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	89b9      	ldrh	r1, [r7, #12]
 800dcbc:	89ba      	ldrh	r2, [r7, #12]
 800dcbe:	2302      	movs	r3, #2
 800dcc0:	9301      	str	r3, [sp, #4]
 800dcc2:	897b      	ldrh	r3, [r7, #10]
 800dcc4:	9300      	str	r3, [sp, #0]
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	6979      	ldr	r1, [r7, #20]
 800dcca:	f7ff fe7d 	bl	800d9c8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800dcce:	687b      	ldr	r3, [r7, #4]
}
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	3718      	adds	r7, #24
 800dcd4:	46bd      	mov	sp, r7
 800dcd6:	bd80      	pop	{r7, pc}

0800dcd8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	460b      	mov	r3, r1
 800dce2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d106      	bne.n	800dcf8 <pbuf_realloc+0x20>
 800dcea:	4b3a      	ldr	r3, [pc, #232]	; (800ddd4 <pbuf_realloc+0xfc>)
 800dcec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800dcf0:	4939      	ldr	r1, [pc, #228]	; (800ddd8 <pbuf_realloc+0x100>)
 800dcf2:	483a      	ldr	r0, [pc, #232]	; (800dddc <pbuf_realloc+0x104>)
 800dcf4:	f009 fcf0 	bl	80176d8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	891b      	ldrh	r3, [r3, #8]
 800dcfc:	887a      	ldrh	r2, [r7, #2]
 800dcfe:	429a      	cmp	r2, r3
 800dd00:	d263      	bcs.n	800ddca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	891a      	ldrh	r2, [r3, #8]
 800dd06:	887b      	ldrh	r3, [r7, #2]
 800dd08:	1ad3      	subs	r3, r2, r3
 800dd0a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800dd0c:	887b      	ldrh	r3, [r7, #2]
 800dd0e:	817b      	strh	r3, [r7, #10]
  q = p;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800dd14:	e018      	b.n	800dd48 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	895b      	ldrh	r3, [r3, #10]
 800dd1a:	897a      	ldrh	r2, [r7, #10]
 800dd1c:	1ad3      	subs	r3, r2, r3
 800dd1e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	891a      	ldrh	r2, [r3, #8]
 800dd24:	893b      	ldrh	r3, [r7, #8]
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d106      	bne.n	800dd48 <pbuf_realloc+0x70>
 800dd3a:	4b26      	ldr	r3, [pc, #152]	; (800ddd4 <pbuf_realloc+0xfc>)
 800dd3c:	f240 12af 	movw	r2, #431	; 0x1af
 800dd40:	4927      	ldr	r1, [pc, #156]	; (800dde0 <pbuf_realloc+0x108>)
 800dd42:	4826      	ldr	r0, [pc, #152]	; (800dddc <pbuf_realloc+0x104>)
 800dd44:	f009 fcc8 	bl	80176d8 <iprintf>
  while (rem_len > q->len) {
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	895b      	ldrh	r3, [r3, #10]
 800dd4c:	897a      	ldrh	r2, [r7, #10]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d8e1      	bhi.n	800dd16 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	7b1b      	ldrb	r3, [r3, #12]
 800dd56:	f003 030f 	and.w	r3, r3, #15
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d121      	bne.n	800dda2 <pbuf_realloc+0xca>
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	895b      	ldrh	r3, [r3, #10]
 800dd62:	897a      	ldrh	r2, [r7, #10]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d01c      	beq.n	800dda2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	7b5b      	ldrb	r3, [r3, #13]
 800dd6c:	f003 0302 	and.w	r3, r3, #2
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d116      	bne.n	800dda2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	685a      	ldr	r2, [r3, #4]
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	1ad3      	subs	r3, r2, r3
 800dd7c:	b29a      	uxth	r2, r3
 800dd7e:	897b      	ldrh	r3, [r7, #10]
 800dd80:	4413      	add	r3, r2
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	4619      	mov	r1, r3
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f7fe ffba 	bl	800cd00 <mem_trim>
 800dd8c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d106      	bne.n	800dda2 <pbuf_realloc+0xca>
 800dd94:	4b0f      	ldr	r3, [pc, #60]	; (800ddd4 <pbuf_realloc+0xfc>)
 800dd96:	f240 12bd 	movw	r2, #445	; 0x1bd
 800dd9a:	4912      	ldr	r1, [pc, #72]	; (800dde4 <pbuf_realloc+0x10c>)
 800dd9c:	480f      	ldr	r0, [pc, #60]	; (800dddc <pbuf_realloc+0x104>)
 800dd9e:	f009 fc9b 	bl	80176d8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	897a      	ldrh	r2, [r7, #10]
 800dda6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	895a      	ldrh	r2, [r3, #10]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d004      	beq.n	800ddc2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f000 f911 	bl	800dfe4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2200      	movs	r2, #0
 800ddc6:	601a      	str	r2, [r3, #0]
 800ddc8:	e000      	b.n	800ddcc <pbuf_realloc+0xf4>
    return;
 800ddca:	bf00      	nop

}
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	08018d5c 	.word	0x08018d5c
 800ddd8:	08018e74 	.word	0x08018e74
 800dddc:	08018dbc 	.word	0x08018dbc
 800dde0:	08018e8c 	.word	0x08018e8c
 800dde4:	08018ea4 	.word	0x08018ea4

0800dde8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b086      	sub	sp, #24
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d106      	bne.n	800de0a <pbuf_add_header_impl+0x22>
 800ddfc:	4b2b      	ldr	r3, [pc, #172]	; (800deac <pbuf_add_header_impl+0xc4>)
 800ddfe:	f240 12df 	movw	r2, #479	; 0x1df
 800de02:	492b      	ldr	r1, [pc, #172]	; (800deb0 <pbuf_add_header_impl+0xc8>)
 800de04:	482b      	ldr	r0, [pc, #172]	; (800deb4 <pbuf_add_header_impl+0xcc>)
 800de06:	f009 fc67 	bl	80176d8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d003      	beq.n	800de18 <pbuf_add_header_impl+0x30>
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de16:	d301      	bcc.n	800de1c <pbuf_add_header_impl+0x34>
    return 1;
 800de18:	2301      	movs	r3, #1
 800de1a:	e043      	b.n	800dea4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d101      	bne.n	800de26 <pbuf_add_header_impl+0x3e>
    return 0;
 800de22:	2300      	movs	r3, #0
 800de24:	e03e      	b.n	800dea4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	891a      	ldrh	r2, [r3, #8]
 800de2e:	8a7b      	ldrh	r3, [r7, #18]
 800de30:	4413      	add	r3, r2
 800de32:	b29b      	uxth	r3, r3
 800de34:	8a7a      	ldrh	r2, [r7, #18]
 800de36:	429a      	cmp	r2, r3
 800de38:	d901      	bls.n	800de3e <pbuf_add_header_impl+0x56>
    return 1;
 800de3a:	2301      	movs	r3, #1
 800de3c:	e032      	b.n	800dea4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	7b1b      	ldrb	r3, [r3, #12]
 800de42:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800de44:	8a3b      	ldrh	r3, [r7, #16]
 800de46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d00c      	beq.n	800de68 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	685a      	ldr	r2, [r3, #4]
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	425b      	negs	r3, r3
 800de56:	4413      	add	r3, r2
 800de58:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	3310      	adds	r3, #16
 800de5e:	697a      	ldr	r2, [r7, #20]
 800de60:	429a      	cmp	r2, r3
 800de62:	d20d      	bcs.n	800de80 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800de64:	2301      	movs	r3, #1
 800de66:	e01d      	b.n	800dea4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800de68:	79fb      	ldrb	r3, [r7, #7]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d006      	beq.n	800de7c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	685a      	ldr	r2, [r3, #4]
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	425b      	negs	r3, r3
 800de76:	4413      	add	r3, r2
 800de78:	617b      	str	r3, [r7, #20]
 800de7a:	e001      	b.n	800de80 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800de7c:	2301      	movs	r3, #1
 800de7e:	e011      	b.n	800dea4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	697a      	ldr	r2, [r7, #20]
 800de84:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	895a      	ldrh	r2, [r3, #10]
 800de8a:	8a7b      	ldrh	r3, [r7, #18]
 800de8c:	4413      	add	r3, r2
 800de8e:	b29a      	uxth	r2, r3
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	891a      	ldrh	r2, [r3, #8]
 800de98:	8a7b      	ldrh	r3, [r7, #18]
 800de9a:	4413      	add	r3, r2
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	811a      	strh	r2, [r3, #8]


  return 0;
 800dea2:	2300      	movs	r3, #0
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3718      	adds	r7, #24
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}
 800deac:	08018d5c 	.word	0x08018d5c
 800deb0:	08018ec0 	.word	0x08018ec0
 800deb4:	08018dbc 	.word	0x08018dbc

0800deb8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b082      	sub	sp, #8
 800debc:	af00      	add	r7, sp, #0
 800debe:	6078      	str	r0, [r7, #4]
 800dec0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800dec2:	2200      	movs	r2, #0
 800dec4:	6839      	ldr	r1, [r7, #0]
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7ff ff8e 	bl	800dde8 <pbuf_add_header_impl>
 800decc:	4603      	mov	r3, r0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}
	...

0800ded8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b084      	sub	sp, #16
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d106      	bne.n	800def6 <pbuf_remove_header+0x1e>
 800dee8:	4b20      	ldr	r3, [pc, #128]	; (800df6c <pbuf_remove_header+0x94>)
 800deea:	f240 224b 	movw	r2, #587	; 0x24b
 800deee:	4920      	ldr	r1, [pc, #128]	; (800df70 <pbuf_remove_header+0x98>)
 800def0:	4820      	ldr	r0, [pc, #128]	; (800df74 <pbuf_remove_header+0x9c>)
 800def2:	f009 fbf1 	bl	80176d8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d003      	beq.n	800df04 <pbuf_remove_header+0x2c>
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df02:	d301      	bcc.n	800df08 <pbuf_remove_header+0x30>
    return 1;
 800df04:	2301      	movs	r3, #1
 800df06:	e02c      	b.n	800df62 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d101      	bne.n	800df12 <pbuf_remove_header+0x3a>
    return 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	e027      	b.n	800df62 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	895b      	ldrh	r3, [r3, #10]
 800df1a:	89fa      	ldrh	r2, [r7, #14]
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d908      	bls.n	800df32 <pbuf_remove_header+0x5a>
 800df20:	4b12      	ldr	r3, [pc, #72]	; (800df6c <pbuf_remove_header+0x94>)
 800df22:	f240 2255 	movw	r2, #597	; 0x255
 800df26:	4914      	ldr	r1, [pc, #80]	; (800df78 <pbuf_remove_header+0xa0>)
 800df28:	4812      	ldr	r0, [pc, #72]	; (800df74 <pbuf_remove_header+0x9c>)
 800df2a:	f009 fbd5 	bl	80176d8 <iprintf>
 800df2e:	2301      	movs	r3, #1
 800df30:	e017      	b.n	800df62 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	685b      	ldr	r3, [r3, #4]
 800df36:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	685a      	ldr	r2, [r3, #4]
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	441a      	add	r2, r3
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	895a      	ldrh	r2, [r3, #10]
 800df48:	89fb      	ldrh	r3, [r7, #14]
 800df4a:	1ad3      	subs	r3, r2, r3
 800df4c:	b29a      	uxth	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	891a      	ldrh	r2, [r3, #8]
 800df56:	89fb      	ldrh	r3, [r7, #14]
 800df58:	1ad3      	subs	r3, r2, r3
 800df5a:	b29a      	uxth	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800df60:	2300      	movs	r3, #0
}
 800df62:	4618      	mov	r0, r3
 800df64:	3710      	adds	r7, #16
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop
 800df6c:	08018d5c 	.word	0x08018d5c
 800df70:	08018ec0 	.word	0x08018ec0
 800df74:	08018dbc 	.word	0x08018dbc
 800df78:	08018ecc 	.word	0x08018ecc

0800df7c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	460b      	mov	r3, r1
 800df86:	807b      	strh	r3, [r7, #2]
 800df88:	4613      	mov	r3, r2
 800df8a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800df8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800df90:	2b00      	cmp	r3, #0
 800df92:	da08      	bge.n	800dfa6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800df94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800df98:	425b      	negs	r3, r3
 800df9a:	4619      	mov	r1, r3
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f7ff ff9b 	bl	800ded8 <pbuf_remove_header>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	e007      	b.n	800dfb6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dfa6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dfaa:	787a      	ldrb	r2, [r7, #1]
 800dfac:	4619      	mov	r1, r3
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7ff ff1a 	bl	800dde8 <pbuf_add_header_impl>
 800dfb4:	4603      	mov	r3, r0
  }
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3708      	adds	r7, #8
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800dfbe:	b580      	push	{r7, lr}
 800dfc0:	b082      	sub	sp, #8
 800dfc2:	af00      	add	r7, sp, #0
 800dfc4:	6078      	str	r0, [r7, #4]
 800dfc6:	460b      	mov	r3, r1
 800dfc8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800dfca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dfce:	2201      	movs	r2, #1
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f7ff ffd2 	bl	800df7c <pbuf_header_impl>
 800dfd8:	4603      	mov	r3, r0
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
	...

0800dfe4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b086      	sub	sp, #24
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d10b      	bne.n	800e00a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d106      	bne.n	800e006 <pbuf_free+0x22>
 800dff8:	4b38      	ldr	r3, [pc, #224]	; (800e0dc <pbuf_free+0xf8>)
 800dffa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800dffe:	4938      	ldr	r1, [pc, #224]	; (800e0e0 <pbuf_free+0xfc>)
 800e000:	4838      	ldr	r0, [pc, #224]	; (800e0e4 <pbuf_free+0x100>)
 800e002:	f009 fb69 	bl	80176d8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e006:	2300      	movs	r3, #0
 800e008:	e063      	b.n	800e0d2 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e00a:	2300      	movs	r3, #0
 800e00c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e00e:	e05c      	b.n	800e0ca <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	7b9b      	ldrb	r3, [r3, #14]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d106      	bne.n	800e026 <pbuf_free+0x42>
 800e018:	4b30      	ldr	r3, [pc, #192]	; (800e0dc <pbuf_free+0xf8>)
 800e01a:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e01e:	4932      	ldr	r1, [pc, #200]	; (800e0e8 <pbuf_free+0x104>)
 800e020:	4830      	ldr	r0, [pc, #192]	; (800e0e4 <pbuf_free+0x100>)
 800e022:	f009 fb59 	bl	80176d8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	7b9b      	ldrb	r3, [r3, #14]
 800e02a:	3b01      	subs	r3, #1
 800e02c:	b2da      	uxtb	r2, r3
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	739a      	strb	r2, [r3, #14]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	7b9b      	ldrb	r3, [r3, #14]
 800e036:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e038:	7dbb      	ldrb	r3, [r7, #22]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d143      	bne.n	800e0c6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	7b1b      	ldrb	r3, [r3, #12]
 800e048:	f003 030f 	and.w	r3, r3, #15
 800e04c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	7b5b      	ldrb	r3, [r3, #13]
 800e052:	f003 0302 	and.w	r3, r3, #2
 800e056:	2b00      	cmp	r3, #0
 800e058:	d011      	beq.n	800e07e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d106      	bne.n	800e074 <pbuf_free+0x90>
 800e066:	4b1d      	ldr	r3, [pc, #116]	; (800e0dc <pbuf_free+0xf8>)
 800e068:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e06c:	491f      	ldr	r1, [pc, #124]	; (800e0ec <pbuf_free+0x108>)
 800e06e:	481d      	ldr	r0, [pc, #116]	; (800e0e4 <pbuf_free+0x100>)
 800e070:	f009 fb32 	bl	80176d8 <iprintf>
        pc->custom_free_function(p);
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	691b      	ldr	r3, [r3, #16]
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	4798      	blx	r3
 800e07c:	e01d      	b.n	800e0ba <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e07e:	7bfb      	ldrb	r3, [r7, #15]
 800e080:	2b02      	cmp	r3, #2
 800e082:	d104      	bne.n	800e08e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800e084:	6879      	ldr	r1, [r7, #4]
 800e086:	2008      	movs	r0, #8
 800e088:	f7ff f936 	bl	800d2f8 <memp_free>
 800e08c:	e015      	b.n	800e0ba <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e08e:	7bfb      	ldrb	r3, [r7, #15]
 800e090:	2b01      	cmp	r3, #1
 800e092:	d104      	bne.n	800e09e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800e094:	6879      	ldr	r1, [r7, #4]
 800e096:	2007      	movs	r0, #7
 800e098:	f7ff f92e 	bl	800d2f8 <memp_free>
 800e09c:	e00d      	b.n	800e0ba <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e09e:	7bfb      	ldrb	r3, [r7, #15]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d103      	bne.n	800e0ac <pbuf_free+0xc8>
          mem_free(p);
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f7fe fdc1 	bl	800cc2c <mem_free>
 800e0aa:	e006      	b.n	800e0ba <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e0ac:	4b0b      	ldr	r3, [pc, #44]	; (800e0dc <pbuf_free+0xf8>)
 800e0ae:	f240 320f 	movw	r2, #783	; 0x30f
 800e0b2:	490f      	ldr	r1, [pc, #60]	; (800e0f0 <pbuf_free+0x10c>)
 800e0b4:	480b      	ldr	r0, [pc, #44]	; (800e0e4 <pbuf_free+0x100>)
 800e0b6:	f009 fb0f 	bl	80176d8 <iprintf>
        }
      }
      count++;
 800e0ba:	7dfb      	ldrb	r3, [r7, #23]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	607b      	str	r3, [r7, #4]
 800e0c4:	e001      	b.n	800e0ca <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d19f      	bne.n	800e010 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3718      	adds	r7, #24
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	08018d5c 	.word	0x08018d5c
 800e0e0:	08018ec0 	.word	0x08018ec0
 800e0e4:	08018dbc 	.word	0x08018dbc
 800e0e8:	08018eec 	.word	0x08018eec
 800e0ec:	08018f04 	.word	0x08018f04
 800e0f0:	08018f28 	.word	0x08018f28

0800e0f4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e100:	e005      	b.n	800e10e <pbuf_clen+0x1a>
    ++len;
 800e102:	89fb      	ldrh	r3, [r7, #14]
 800e104:	3301      	adds	r3, #1
 800e106:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1f6      	bne.n	800e102 <pbuf_clen+0xe>
  }
  return len;
 800e114:	89fb      	ldrh	r3, [r7, #14]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3714      	adds	r7, #20
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr
	...

0800e124 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d010      	beq.n	800e154 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	7b9b      	ldrb	r3, [r3, #14]
 800e136:	3301      	adds	r3, #1
 800e138:	b2da      	uxtb	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	7b9b      	ldrb	r3, [r3, #14]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d106      	bne.n	800e154 <pbuf_ref+0x30>
 800e146:	4b05      	ldr	r3, [pc, #20]	; (800e15c <pbuf_ref+0x38>)
 800e148:	f240 3242 	movw	r2, #834	; 0x342
 800e14c:	4904      	ldr	r1, [pc, #16]	; (800e160 <pbuf_ref+0x3c>)
 800e14e:	4805      	ldr	r0, [pc, #20]	; (800e164 <pbuf_ref+0x40>)
 800e150:	f009 fac2 	bl	80176d8 <iprintf>
  }
}
 800e154:	bf00      	nop
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	08018d5c 	.word	0x08018d5c
 800e160:	08018f3c 	.word	0x08018f3c
 800e164:	08018dbc 	.word	0x08018dbc

0800e168 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d002      	beq.n	800e17e <pbuf_cat+0x16>
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d107      	bne.n	800e18e <pbuf_cat+0x26>
 800e17e:	4b20      	ldr	r3, [pc, #128]	; (800e200 <pbuf_cat+0x98>)
 800e180:	f240 3259 	movw	r2, #857	; 0x359
 800e184:	491f      	ldr	r1, [pc, #124]	; (800e204 <pbuf_cat+0x9c>)
 800e186:	4820      	ldr	r0, [pc, #128]	; (800e208 <pbuf_cat+0xa0>)
 800e188:	f009 faa6 	bl	80176d8 <iprintf>
 800e18c:	e034      	b.n	800e1f8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	60fb      	str	r3, [r7, #12]
 800e192:	e00a      	b.n	800e1aa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	891a      	ldrh	r2, [r3, #8]
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	891b      	ldrh	r3, [r3, #8]
 800e19c:	4413      	add	r3, r2
 800e19e:	b29a      	uxth	r2, r3
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	60fb      	str	r3, [r7, #12]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d1f0      	bne.n	800e194 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	891a      	ldrh	r2, [r3, #8]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	895b      	ldrh	r3, [r3, #10]
 800e1ba:	429a      	cmp	r2, r3
 800e1bc:	d006      	beq.n	800e1cc <pbuf_cat+0x64>
 800e1be:	4b10      	ldr	r3, [pc, #64]	; (800e200 <pbuf_cat+0x98>)
 800e1c0:	f240 3262 	movw	r2, #866	; 0x362
 800e1c4:	4911      	ldr	r1, [pc, #68]	; (800e20c <pbuf_cat+0xa4>)
 800e1c6:	4810      	ldr	r0, [pc, #64]	; (800e208 <pbuf_cat+0xa0>)
 800e1c8:	f009 fa86 	bl	80176d8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d006      	beq.n	800e1e2 <pbuf_cat+0x7a>
 800e1d4:	4b0a      	ldr	r3, [pc, #40]	; (800e200 <pbuf_cat+0x98>)
 800e1d6:	f240 3263 	movw	r2, #867	; 0x363
 800e1da:	490d      	ldr	r1, [pc, #52]	; (800e210 <pbuf_cat+0xa8>)
 800e1dc:	480a      	ldr	r0, [pc, #40]	; (800e208 <pbuf_cat+0xa0>)
 800e1de:	f009 fa7b 	bl	80176d8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	891a      	ldrh	r2, [r3, #8]
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	891b      	ldrh	r3, [r3, #8]
 800e1ea:	4413      	add	r3, r2
 800e1ec:	b29a      	uxth	r2, r3
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	683a      	ldr	r2, [r7, #0]
 800e1f6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e1f8:	3710      	adds	r7, #16
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	08018d5c 	.word	0x08018d5c
 800e204:	08018f50 	.word	0x08018f50
 800e208:	08018dbc 	.word	0x08018dbc
 800e20c:	08018f88 	.word	0x08018f88
 800e210:	08018fb8 	.word	0x08018fb8

0800e214 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e21e:	6839      	ldr	r1, [r7, #0]
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f7ff ffa1 	bl	800e168 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e226:	6838      	ldr	r0, [r7, #0]
 800e228:	f7ff ff7c 	bl	800e124 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e22c:	bf00      	nop
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b086      	sub	sp, #24
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e23e:	2300      	movs	r3, #0
 800e240:	617b      	str	r3, [r7, #20]
 800e242:	2300      	movs	r3, #0
 800e244:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d008      	beq.n	800e25e <pbuf_copy+0x2a>
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d005      	beq.n	800e25e <pbuf_copy+0x2a>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	891a      	ldrh	r2, [r3, #8]
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	891b      	ldrh	r3, [r3, #8]
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d209      	bcs.n	800e272 <pbuf_copy+0x3e>
 800e25e:	4b57      	ldr	r3, [pc, #348]	; (800e3bc <pbuf_copy+0x188>)
 800e260:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e264:	4956      	ldr	r1, [pc, #344]	; (800e3c0 <pbuf_copy+0x18c>)
 800e266:	4857      	ldr	r0, [pc, #348]	; (800e3c4 <pbuf_copy+0x190>)
 800e268:	f009 fa36 	bl	80176d8 <iprintf>
 800e26c:	f06f 030f 	mvn.w	r3, #15
 800e270:	e09f      	b.n	800e3b2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	895b      	ldrh	r3, [r3, #10]
 800e276:	461a      	mov	r2, r3
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	1ad2      	subs	r2, r2, r3
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	895b      	ldrh	r3, [r3, #10]
 800e280:	4619      	mov	r1, r3
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	1acb      	subs	r3, r1, r3
 800e286:	429a      	cmp	r2, r3
 800e288:	d306      	bcc.n	800e298 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	895b      	ldrh	r3, [r3, #10]
 800e28e:	461a      	mov	r2, r3
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	1ad3      	subs	r3, r2, r3
 800e294:	60fb      	str	r3, [r7, #12]
 800e296:	e005      	b.n	800e2a4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	895b      	ldrh	r3, [r3, #10]
 800e29c:	461a      	mov	r2, r3
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	1ad3      	subs	r3, r2, r3
 800e2a2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	685a      	ldr	r2, [r3, #4]
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	18d0      	adds	r0, r2, r3
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	685a      	ldr	r2, [r3, #4]
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	68fa      	ldr	r2, [r7, #12]
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	f009 f9f8 	bl	80176ac <memcpy>
    offset_to += len;
 800e2bc:	697a      	ldr	r2, [r7, #20]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e2c4:	693a      	ldr	r2, [r7, #16]
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	4413      	add	r3, r2
 800e2ca:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	895b      	ldrh	r3, [r3, #10]
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d906      	bls.n	800e2e6 <pbuf_copy+0xb2>
 800e2d8:	4b38      	ldr	r3, [pc, #224]	; (800e3bc <pbuf_copy+0x188>)
 800e2da:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e2de:	493a      	ldr	r1, [pc, #232]	; (800e3c8 <pbuf_copy+0x194>)
 800e2e0:	4838      	ldr	r0, [pc, #224]	; (800e3c4 <pbuf_copy+0x190>)
 800e2e2:	f009 f9f9 	bl	80176d8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	895b      	ldrh	r3, [r3, #10]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d906      	bls.n	800e300 <pbuf_copy+0xcc>
 800e2f2:	4b32      	ldr	r3, [pc, #200]	; (800e3bc <pbuf_copy+0x188>)
 800e2f4:	f240 32da 	movw	r2, #986	; 0x3da
 800e2f8:	4934      	ldr	r1, [pc, #208]	; (800e3cc <pbuf_copy+0x198>)
 800e2fa:	4832      	ldr	r0, [pc, #200]	; (800e3c4 <pbuf_copy+0x190>)
 800e2fc:	f009 f9ec 	bl	80176d8 <iprintf>
    if (offset_from >= p_from->len) {
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	895b      	ldrh	r3, [r3, #10]
 800e304:	461a      	mov	r2, r3
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	4293      	cmp	r3, r2
 800e30a:	d304      	bcc.n	800e316 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e30c:	2300      	movs	r3, #0
 800e30e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	895b      	ldrh	r3, [r3, #10]
 800e31a:	461a      	mov	r2, r3
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	4293      	cmp	r3, r2
 800e320:	d114      	bne.n	800e34c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e322:	2300      	movs	r3, #0
 800e324:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10c      	bne.n	800e34c <pbuf_copy+0x118>
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d009      	beq.n	800e34c <pbuf_copy+0x118>
 800e338:	4b20      	ldr	r3, [pc, #128]	; (800e3bc <pbuf_copy+0x188>)
 800e33a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e33e:	4924      	ldr	r1, [pc, #144]	; (800e3d0 <pbuf_copy+0x19c>)
 800e340:	4820      	ldr	r0, [pc, #128]	; (800e3c4 <pbuf_copy+0x190>)
 800e342:	f009 f9c9 	bl	80176d8 <iprintf>
 800e346:	f06f 030f 	mvn.w	r3, #15
 800e34a:	e032      	b.n	800e3b2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d013      	beq.n	800e37a <pbuf_copy+0x146>
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	895a      	ldrh	r2, [r3, #10]
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	891b      	ldrh	r3, [r3, #8]
 800e35a:	429a      	cmp	r2, r3
 800e35c:	d10d      	bne.n	800e37a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d009      	beq.n	800e37a <pbuf_copy+0x146>
 800e366:	4b15      	ldr	r3, [pc, #84]	; (800e3bc <pbuf_copy+0x188>)
 800e368:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e36c:	4919      	ldr	r1, [pc, #100]	; (800e3d4 <pbuf_copy+0x1a0>)
 800e36e:	4815      	ldr	r0, [pc, #84]	; (800e3c4 <pbuf_copy+0x190>)
 800e370:	f009 f9b2 	bl	80176d8 <iprintf>
 800e374:	f06f 0305 	mvn.w	r3, #5
 800e378:	e01b      	b.n	800e3b2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d013      	beq.n	800e3a8 <pbuf_copy+0x174>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	895a      	ldrh	r2, [r3, #10]
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	891b      	ldrh	r3, [r3, #8]
 800e388:	429a      	cmp	r2, r3
 800e38a:	d10d      	bne.n	800e3a8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	2b00      	cmp	r3, #0
 800e392:	d009      	beq.n	800e3a8 <pbuf_copy+0x174>
 800e394:	4b09      	ldr	r3, [pc, #36]	; (800e3bc <pbuf_copy+0x188>)
 800e396:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e39a:	490e      	ldr	r1, [pc, #56]	; (800e3d4 <pbuf_copy+0x1a0>)
 800e39c:	4809      	ldr	r0, [pc, #36]	; (800e3c4 <pbuf_copy+0x190>)
 800e39e:	f009 f99b 	bl	80176d8 <iprintf>
 800e3a2:	f06f 0305 	mvn.w	r3, #5
 800e3a6:	e004      	b.n	800e3b2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f47f af61 	bne.w	800e272 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3718      	adds	r7, #24
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	08018d5c 	.word	0x08018d5c
 800e3c0:	08019004 	.word	0x08019004
 800e3c4:	08018dbc 	.word	0x08018dbc
 800e3c8:	08019034 	.word	0x08019034
 800e3cc:	0801904c 	.word	0x0801904c
 800e3d0:	08019068 	.word	0x08019068
 800e3d4:	08019078 	.word	0x08019078

0800e3d8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b088      	sub	sp, #32
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	4611      	mov	r1, r2
 800e3e4:	461a      	mov	r2, r3
 800e3e6:	460b      	mov	r3, r1
 800e3e8:	80fb      	strh	r3, [r7, #6]
 800e3ea:	4613      	mov	r3, r2
 800e3ec:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d108      	bne.n	800e40e <pbuf_copy_partial+0x36>
 800e3fc:	4b2b      	ldr	r3, [pc, #172]	; (800e4ac <pbuf_copy_partial+0xd4>)
 800e3fe:	f240 420a 	movw	r2, #1034	; 0x40a
 800e402:	492b      	ldr	r1, [pc, #172]	; (800e4b0 <pbuf_copy_partial+0xd8>)
 800e404:	482b      	ldr	r0, [pc, #172]	; (800e4b4 <pbuf_copy_partial+0xdc>)
 800e406:	f009 f967 	bl	80176d8 <iprintf>
 800e40a:	2300      	movs	r3, #0
 800e40c:	e04a      	b.n	800e4a4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d108      	bne.n	800e426 <pbuf_copy_partial+0x4e>
 800e414:	4b25      	ldr	r3, [pc, #148]	; (800e4ac <pbuf_copy_partial+0xd4>)
 800e416:	f240 420b 	movw	r2, #1035	; 0x40b
 800e41a:	4927      	ldr	r1, [pc, #156]	; (800e4b8 <pbuf_copy_partial+0xe0>)
 800e41c:	4825      	ldr	r0, [pc, #148]	; (800e4b4 <pbuf_copy_partial+0xdc>)
 800e41e:	f009 f95b 	bl	80176d8 <iprintf>
 800e422:	2300      	movs	r3, #0
 800e424:	e03e      	b.n	800e4a4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	61fb      	str	r3, [r7, #28]
 800e42a:	e034      	b.n	800e496 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800e42c:	88bb      	ldrh	r3, [r7, #4]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d00a      	beq.n	800e448 <pbuf_copy_partial+0x70>
 800e432:	69fb      	ldr	r3, [r7, #28]
 800e434:	895b      	ldrh	r3, [r3, #10]
 800e436:	88ba      	ldrh	r2, [r7, #4]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d305      	bcc.n	800e448 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800e43c:	69fb      	ldr	r3, [r7, #28]
 800e43e:	895b      	ldrh	r3, [r3, #10]
 800e440:	88ba      	ldrh	r2, [r7, #4]
 800e442:	1ad3      	subs	r3, r2, r3
 800e444:	80bb      	strh	r3, [r7, #4]
 800e446:	e023      	b.n	800e490 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	895a      	ldrh	r2, [r3, #10]
 800e44c:	88bb      	ldrh	r3, [r7, #4]
 800e44e:	1ad3      	subs	r3, r2, r3
 800e450:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800e452:	8b3a      	ldrh	r2, [r7, #24]
 800e454:	88fb      	ldrh	r3, [r7, #6]
 800e456:	429a      	cmp	r2, r3
 800e458:	d901      	bls.n	800e45e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800e45a:	88fb      	ldrh	r3, [r7, #6]
 800e45c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800e45e:	8b7b      	ldrh	r3, [r7, #26]
 800e460:	68ba      	ldr	r2, [r7, #8]
 800e462:	18d0      	adds	r0, r2, r3
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	685a      	ldr	r2, [r3, #4]
 800e468:	88bb      	ldrh	r3, [r7, #4]
 800e46a:	4413      	add	r3, r2
 800e46c:	8b3a      	ldrh	r2, [r7, #24]
 800e46e:	4619      	mov	r1, r3
 800e470:	f009 f91c 	bl	80176ac <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800e474:	8afa      	ldrh	r2, [r7, #22]
 800e476:	8b3b      	ldrh	r3, [r7, #24]
 800e478:	4413      	add	r3, r2
 800e47a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800e47c:	8b7a      	ldrh	r2, [r7, #26]
 800e47e:	8b3b      	ldrh	r3, [r7, #24]
 800e480:	4413      	add	r3, r2
 800e482:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800e484:	88fa      	ldrh	r2, [r7, #6]
 800e486:	8b3b      	ldrh	r3, [r7, #24]
 800e488:	1ad3      	subs	r3, r2, r3
 800e48a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800e48c:	2300      	movs	r3, #0
 800e48e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800e490:	69fb      	ldr	r3, [r7, #28]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	61fb      	str	r3, [r7, #28]
 800e496:	88fb      	ldrh	r3, [r7, #6]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d002      	beq.n	800e4a2 <pbuf_copy_partial+0xca>
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d1c4      	bne.n	800e42c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e4a2:	8afb      	ldrh	r3, [r7, #22]
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3720      	adds	r7, #32
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	08018d5c 	.word	0x08018d5c
 800e4b0:	080190a4 	.word	0x080190a4
 800e4b4:	08018dbc 	.word	0x08018dbc
 800e4b8:	080190c4 	.word	0x080190c4

0800e4bc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b088      	sub	sp, #32
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800e4ca:	88fb      	ldrh	r3, [r7, #6]
 800e4cc:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d109      	bne.n	800e4ec <pbuf_take+0x30>
 800e4d8:	4b3a      	ldr	r3, [pc, #232]	; (800e5c4 <pbuf_take+0x108>)
 800e4da:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800e4de:	493a      	ldr	r1, [pc, #232]	; (800e5c8 <pbuf_take+0x10c>)
 800e4e0:	483a      	ldr	r0, [pc, #232]	; (800e5cc <pbuf_take+0x110>)
 800e4e2:	f009 f8f9 	bl	80176d8 <iprintf>
 800e4e6:	f06f 030f 	mvn.w	r3, #15
 800e4ea:	e067      	b.n	800e5bc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d109      	bne.n	800e506 <pbuf_take+0x4a>
 800e4f2:	4b34      	ldr	r3, [pc, #208]	; (800e5c4 <pbuf_take+0x108>)
 800e4f4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800e4f8:	4935      	ldr	r1, [pc, #212]	; (800e5d0 <pbuf_take+0x114>)
 800e4fa:	4834      	ldr	r0, [pc, #208]	; (800e5cc <pbuf_take+0x110>)
 800e4fc:	f009 f8ec 	bl	80176d8 <iprintf>
 800e500:	f06f 030f 	mvn.w	r3, #15
 800e504:	e05a      	b.n	800e5bc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	891b      	ldrh	r3, [r3, #8]
 800e50a:	88fa      	ldrh	r2, [r7, #6]
 800e50c:	429a      	cmp	r2, r3
 800e50e:	d909      	bls.n	800e524 <pbuf_take+0x68>
 800e510:	4b2c      	ldr	r3, [pc, #176]	; (800e5c4 <pbuf_take+0x108>)
 800e512:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800e516:	492f      	ldr	r1, [pc, #188]	; (800e5d4 <pbuf_take+0x118>)
 800e518:	482c      	ldr	r0, [pc, #176]	; (800e5cc <pbuf_take+0x110>)
 800e51a:	f009 f8dd 	bl	80176d8 <iprintf>
 800e51e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e522:	e04b      	b.n	800e5bc <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d007      	beq.n	800e53a <pbuf_take+0x7e>
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d004      	beq.n	800e53a <pbuf_take+0x7e>
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	891b      	ldrh	r3, [r3, #8]
 800e534:	88fa      	ldrh	r2, [r7, #6]
 800e536:	429a      	cmp	r2, r3
 800e538:	d902      	bls.n	800e540 <pbuf_take+0x84>
    return ERR_ARG;
 800e53a:	f06f 030f 	mvn.w	r3, #15
 800e53e:	e03d      	b.n	800e5bc <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	61fb      	str	r3, [r7, #28]
 800e544:	e028      	b.n	800e598 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800e546:	69fb      	ldr	r3, [r7, #28]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d106      	bne.n	800e55a <pbuf_take+0x9e>
 800e54c:	4b1d      	ldr	r3, [pc, #116]	; (800e5c4 <pbuf_take+0x108>)
 800e54e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800e552:	4921      	ldr	r1, [pc, #132]	; (800e5d8 <pbuf_take+0x11c>)
 800e554:	481d      	ldr	r0, [pc, #116]	; (800e5cc <pbuf_take+0x110>)
 800e556:	f009 f8bf 	bl	80176d8 <iprintf>
    buf_copy_len = total_copy_len;
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800e55e:	69fb      	ldr	r3, [r7, #28]
 800e560:	895b      	ldrh	r3, [r3, #10]
 800e562:	461a      	mov	r2, r3
 800e564:	69bb      	ldr	r3, [r7, #24]
 800e566:	4293      	cmp	r3, r2
 800e568:	d902      	bls.n	800e570 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800e56a:	69fb      	ldr	r3, [r7, #28]
 800e56c:	895b      	ldrh	r3, [r3, #10]
 800e56e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	6858      	ldr	r0, [r3, #4]
 800e574:	68ba      	ldr	r2, [r7, #8]
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	4413      	add	r3, r2
 800e57a:	69ba      	ldr	r2, [r7, #24]
 800e57c:	4619      	mov	r1, r3
 800e57e:	f009 f895 	bl	80176ac <memcpy>
    total_copy_len -= buf_copy_len;
 800e582:	697a      	ldr	r2, [r7, #20]
 800e584:	69bb      	ldr	r3, [r7, #24]
 800e586:	1ad3      	subs	r3, r2, r3
 800e588:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800e58a:	693a      	ldr	r2, [r7, #16]
 800e58c:	69bb      	ldr	r3, [r7, #24]
 800e58e:	4413      	add	r3, r2
 800e590:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	61fb      	str	r3, [r7, #28]
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d1d3      	bne.n	800e546 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d103      	bne.n	800e5ac <pbuf_take+0xf0>
 800e5a4:	88fb      	ldrh	r3, [r7, #6]
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d006      	beq.n	800e5ba <pbuf_take+0xfe>
 800e5ac:	4b05      	ldr	r3, [pc, #20]	; (800e5c4 <pbuf_take+0x108>)
 800e5ae:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800e5b2:	490a      	ldr	r1, [pc, #40]	; (800e5dc <pbuf_take+0x120>)
 800e5b4:	4805      	ldr	r0, [pc, #20]	; (800e5cc <pbuf_take+0x110>)
 800e5b6:	f009 f88f 	bl	80176d8 <iprintf>
  return ERR_OK;
 800e5ba:	2300      	movs	r3, #0
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3720      	adds	r7, #32
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	08018d5c 	.word	0x08018d5c
 800e5c8:	08019134 	.word	0x08019134
 800e5cc:	08018dbc 	.word	0x08018dbc
 800e5d0:	0801914c 	.word	0x0801914c
 800e5d4:	08019168 	.word	0x08019168
 800e5d8:	08019188 	.word	0x08019188
 800e5dc:	080191a0 	.word	0x080191a0

0800e5e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b084      	sub	sp, #16
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	603a      	str	r2, [r7, #0]
 800e5ea:	71fb      	strb	r3, [r7, #7]
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	8919      	ldrh	r1, [r3, #8]
 800e5f4:	88ba      	ldrh	r2, [r7, #4]
 800e5f6:	79fb      	ldrb	r3, [r7, #7]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f7ff fa0f 	bl	800da1c <pbuf_alloc>
 800e5fe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d101      	bne.n	800e60a <pbuf_clone+0x2a>
    return NULL;
 800e606:	2300      	movs	r3, #0
 800e608:	e011      	b.n	800e62e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e60a:	6839      	ldr	r1, [r7, #0]
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f7ff fe11 	bl	800e234 <pbuf_copy>
 800e612:	4603      	mov	r3, r0
 800e614:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e616:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d006      	beq.n	800e62c <pbuf_clone+0x4c>
 800e61e:	4b06      	ldr	r3, [pc, #24]	; (800e638 <pbuf_clone+0x58>)
 800e620:	f240 5224 	movw	r2, #1316	; 0x524
 800e624:	4905      	ldr	r1, [pc, #20]	; (800e63c <pbuf_clone+0x5c>)
 800e626:	4806      	ldr	r0, [pc, #24]	; (800e640 <pbuf_clone+0x60>)
 800e628:	f009 f856 	bl	80176d8 <iprintf>
  return q;
 800e62c:	68fb      	ldr	r3, [r7, #12]
}
 800e62e:	4618      	mov	r0, r3
 800e630:	3710      	adds	r7, #16
 800e632:	46bd      	mov	sp, r7
 800e634:	bd80      	pop	{r7, pc}
 800e636:	bf00      	nop
 800e638:	08018d5c 	.word	0x08018d5c
 800e63c:	080191d0 	.word	0x080191d0
 800e640:	08018dbc 	.word	0x08018dbc

0800e644 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e648:	f009 f85e 	bl	8017708 <rand>
 800e64c:	4603      	mov	r3, r0
 800e64e:	b29b      	uxth	r3, r3
 800e650:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e654:	b29b      	uxth	r3, r3
 800e656:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e65a:	b29a      	uxth	r2, r3
 800e65c:	4b01      	ldr	r3, [pc, #4]	; (800e664 <tcp_init+0x20>)
 800e65e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e660:	bf00      	nop
 800e662:	bd80      	pop	{r7, pc}
 800e664:	20000020 	.word	0x20000020

0800e668 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	7d1b      	ldrb	r3, [r3, #20]
 800e674:	2b01      	cmp	r3, #1
 800e676:	d105      	bne.n	800e684 <tcp_free+0x1c>
 800e678:	4b06      	ldr	r3, [pc, #24]	; (800e694 <tcp_free+0x2c>)
 800e67a:	22d4      	movs	r2, #212	; 0xd4
 800e67c:	4906      	ldr	r1, [pc, #24]	; (800e698 <tcp_free+0x30>)
 800e67e:	4807      	ldr	r0, [pc, #28]	; (800e69c <tcp_free+0x34>)
 800e680:	f009 f82a 	bl	80176d8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e684:	6879      	ldr	r1, [r7, #4]
 800e686:	2001      	movs	r0, #1
 800e688:	f7fe fe36 	bl	800d2f8 <memp_free>
}
 800e68c:	bf00      	nop
 800e68e:	3708      	adds	r7, #8
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	0801925c 	.word	0x0801925c
 800e698:	0801928c 	.word	0x0801928c
 800e69c:	080192a0 	.word	0x080192a0

0800e6a0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	7d1b      	ldrb	r3, [r3, #20]
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d105      	bne.n	800e6bc <tcp_free_listen+0x1c>
 800e6b0:	4b06      	ldr	r3, [pc, #24]	; (800e6cc <tcp_free_listen+0x2c>)
 800e6b2:	22df      	movs	r2, #223	; 0xdf
 800e6b4:	4906      	ldr	r1, [pc, #24]	; (800e6d0 <tcp_free_listen+0x30>)
 800e6b6:	4807      	ldr	r0, [pc, #28]	; (800e6d4 <tcp_free_listen+0x34>)
 800e6b8:	f009 f80e 	bl	80176d8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e6bc:	6879      	ldr	r1, [r7, #4]
 800e6be:	2002      	movs	r0, #2
 800e6c0:	f7fe fe1a 	bl	800d2f8 <memp_free>
}
 800e6c4:	bf00      	nop
 800e6c6:	3708      	adds	r7, #8
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}
 800e6cc:	0801925c 	.word	0x0801925c
 800e6d0:	080192c8 	.word	0x080192c8
 800e6d4:	080192a0 	.word	0x080192a0

0800e6d8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e6dc:	f000 fea2 	bl	800f424 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e6e0:	4b07      	ldr	r3, [pc, #28]	; (800e700 <tcp_tmr+0x28>)
 800e6e2:	781b      	ldrb	r3, [r3, #0]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	b2da      	uxtb	r2, r3
 800e6e8:	4b05      	ldr	r3, [pc, #20]	; (800e700 <tcp_tmr+0x28>)
 800e6ea:	701a      	strb	r2, [r3, #0]
 800e6ec:	4b04      	ldr	r3, [pc, #16]	; (800e700 <tcp_tmr+0x28>)
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	f003 0301 	and.w	r3, r3, #1
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d001      	beq.n	800e6fc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e6f8:	f000 fb54 	bl	800eda4 <tcp_slowtmr>
  }
}
 800e6fc:	bf00      	nop
 800e6fe:	bd80      	pop	{r7, pc}
 800e700:	20008fdd 	.word	0x20008fdd

0800e704 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d105      	bne.n	800e720 <tcp_remove_listener+0x1c>
 800e714:	4b0d      	ldr	r3, [pc, #52]	; (800e74c <tcp_remove_listener+0x48>)
 800e716:	22ff      	movs	r2, #255	; 0xff
 800e718:	490d      	ldr	r1, [pc, #52]	; (800e750 <tcp_remove_listener+0x4c>)
 800e71a:	480e      	ldr	r0, [pc, #56]	; (800e754 <tcp_remove_listener+0x50>)
 800e71c:	f008 ffdc 	bl	80176d8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	60fb      	str	r3, [r7, #12]
 800e724:	e00a      	b.n	800e73c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e72a:	683a      	ldr	r2, [r7, #0]
 800e72c:	429a      	cmp	r2, r3
 800e72e:	d102      	bne.n	800e736 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2200      	movs	r2, #0
 800e734:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	68db      	ldr	r3, [r3, #12]
 800e73a:	60fb      	str	r3, [r7, #12]
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d1f1      	bne.n	800e726 <tcp_remove_listener+0x22>
    }
  }
}
 800e742:	bf00      	nop
 800e744:	bf00      	nop
 800e746:	3710      	adds	r7, #16
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	0801925c 	.word	0x0801925c
 800e750:	080192e4 	.word	0x080192e4
 800e754:	080192a0 	.word	0x080192a0

0800e758 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d106      	bne.n	800e774 <tcp_listen_closed+0x1c>
 800e766:	4b14      	ldr	r3, [pc, #80]	; (800e7b8 <tcp_listen_closed+0x60>)
 800e768:	f240 1211 	movw	r2, #273	; 0x111
 800e76c:	4913      	ldr	r1, [pc, #76]	; (800e7bc <tcp_listen_closed+0x64>)
 800e76e:	4814      	ldr	r0, [pc, #80]	; (800e7c0 <tcp_listen_closed+0x68>)
 800e770:	f008 ffb2 	bl	80176d8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	7d1b      	ldrb	r3, [r3, #20]
 800e778:	2b01      	cmp	r3, #1
 800e77a:	d006      	beq.n	800e78a <tcp_listen_closed+0x32>
 800e77c:	4b0e      	ldr	r3, [pc, #56]	; (800e7b8 <tcp_listen_closed+0x60>)
 800e77e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e782:	4910      	ldr	r1, [pc, #64]	; (800e7c4 <tcp_listen_closed+0x6c>)
 800e784:	480e      	ldr	r0, [pc, #56]	; (800e7c0 <tcp_listen_closed+0x68>)
 800e786:	f008 ffa7 	bl	80176d8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e78a:	2301      	movs	r3, #1
 800e78c:	60fb      	str	r3, [r7, #12]
 800e78e:	e00b      	b.n	800e7a8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e790:	4a0d      	ldr	r2, [pc, #52]	; (800e7c8 <tcp_listen_closed+0x70>)
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	6879      	ldr	r1, [r7, #4]
 800e79c:	4618      	mov	r0, r3
 800e79e:	f7ff ffb1 	bl	800e704 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	60fb      	str	r3, [r7, #12]
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2b03      	cmp	r3, #3
 800e7ac:	d9f0      	bls.n	800e790 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e7ae:	bf00      	nop
 800e7b0:	bf00      	nop
 800e7b2:	3710      	adds	r7, #16
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	0801925c 	.word	0x0801925c
 800e7bc:	0801930c 	.word	0x0801930c
 800e7c0:	080192a0 	.word	0x080192a0
 800e7c4:	08019318 	.word	0x08019318
 800e7c8:	0801b244 	.word	0x0801b244

0800e7cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e7cc:	b5b0      	push	{r4, r5, r7, lr}
 800e7ce:	b088      	sub	sp, #32
 800e7d0:	af04      	add	r7, sp, #16
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d106      	bne.n	800e7ec <tcp_close_shutdown+0x20>
 800e7de:	4b63      	ldr	r3, [pc, #396]	; (800e96c <tcp_close_shutdown+0x1a0>)
 800e7e0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e7e4:	4962      	ldr	r1, [pc, #392]	; (800e970 <tcp_close_shutdown+0x1a4>)
 800e7e6:	4863      	ldr	r0, [pc, #396]	; (800e974 <tcp_close_shutdown+0x1a8>)
 800e7e8:	f008 ff76 	bl	80176d8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e7ec:	78fb      	ldrb	r3, [r7, #3]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d066      	beq.n	800e8c0 <tcp_close_shutdown+0xf4>
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	7d1b      	ldrb	r3, [r3, #20]
 800e7f6:	2b04      	cmp	r3, #4
 800e7f8:	d003      	beq.n	800e802 <tcp_close_shutdown+0x36>
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	7d1b      	ldrb	r3, [r3, #20]
 800e7fe:	2b07      	cmp	r3, #7
 800e800:	d15e      	bne.n	800e8c0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e806:	2b00      	cmp	r3, #0
 800e808:	d104      	bne.n	800e814 <tcp_close_shutdown+0x48>
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e80e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e812:	d055      	beq.n	800e8c0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	8b5b      	ldrh	r3, [r3, #26]
 800e818:	f003 0310 	and.w	r3, r3, #16
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d106      	bne.n	800e82e <tcp_close_shutdown+0x62>
 800e820:	4b52      	ldr	r3, [pc, #328]	; (800e96c <tcp_close_shutdown+0x1a0>)
 800e822:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e826:	4954      	ldr	r1, [pc, #336]	; (800e978 <tcp_close_shutdown+0x1ac>)
 800e828:	4852      	ldr	r0, [pc, #328]	; (800e974 <tcp_close_shutdown+0x1a8>)
 800e82a:	f008 ff55 	bl	80176d8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e836:	687d      	ldr	r5, [r7, #4]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	3304      	adds	r3, #4
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	8ad2      	ldrh	r2, [r2, #22]
 800e840:	6879      	ldr	r1, [r7, #4]
 800e842:	8b09      	ldrh	r1, [r1, #24]
 800e844:	9102      	str	r1, [sp, #8]
 800e846:	9201      	str	r2, [sp, #4]
 800e848:	9300      	str	r3, [sp, #0]
 800e84a:	462b      	mov	r3, r5
 800e84c:	4622      	mov	r2, r4
 800e84e:	4601      	mov	r1, r0
 800e850:	6878      	ldr	r0, [r7, #4]
 800e852:	f004 fe91 	bl	8013578 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f001 f8c6 	bl	800f9e8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e85c:	4b47      	ldr	r3, [pc, #284]	; (800e97c <tcp_close_shutdown+0x1b0>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	687a      	ldr	r2, [r7, #4]
 800e862:	429a      	cmp	r2, r3
 800e864:	d105      	bne.n	800e872 <tcp_close_shutdown+0xa6>
 800e866:	4b45      	ldr	r3, [pc, #276]	; (800e97c <tcp_close_shutdown+0x1b0>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	4a43      	ldr	r2, [pc, #268]	; (800e97c <tcp_close_shutdown+0x1b0>)
 800e86e:	6013      	str	r3, [r2, #0]
 800e870:	e013      	b.n	800e89a <tcp_close_shutdown+0xce>
 800e872:	4b42      	ldr	r3, [pc, #264]	; (800e97c <tcp_close_shutdown+0x1b0>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	60fb      	str	r3, [r7, #12]
 800e878:	e00c      	b.n	800e894 <tcp_close_shutdown+0xc8>
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	68db      	ldr	r3, [r3, #12]
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	429a      	cmp	r2, r3
 800e882:	d104      	bne.n	800e88e <tcp_close_shutdown+0xc2>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	68da      	ldr	r2, [r3, #12]
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	60da      	str	r2, [r3, #12]
 800e88c:	e005      	b.n	800e89a <tcp_close_shutdown+0xce>
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	68db      	ldr	r3, [r3, #12]
 800e892:	60fb      	str	r3, [r7, #12]
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d1ef      	bne.n	800e87a <tcp_close_shutdown+0xae>
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	60da      	str	r2, [r3, #12]
 800e8a0:	4b37      	ldr	r3, [pc, #220]	; (800e980 <tcp_close_shutdown+0x1b4>)
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e8a6:	4b37      	ldr	r3, [pc, #220]	; (800e984 <tcp_close_shutdown+0x1b8>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d102      	bne.n	800e8b6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e8b0:	f003 fd5e 	bl	8012370 <tcp_trigger_input_pcb_close>
 800e8b4:	e002      	b.n	800e8bc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f7ff fed6 	bl	800e668 <tcp_free>
      }
      return ERR_OK;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	e050      	b.n	800e962 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	7d1b      	ldrb	r3, [r3, #20]
 800e8c4:	2b02      	cmp	r3, #2
 800e8c6:	d03b      	beq.n	800e940 <tcp_close_shutdown+0x174>
 800e8c8:	2b02      	cmp	r3, #2
 800e8ca:	dc44      	bgt.n	800e956 <tcp_close_shutdown+0x18a>
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d002      	beq.n	800e8d6 <tcp_close_shutdown+0x10a>
 800e8d0:	2b01      	cmp	r3, #1
 800e8d2:	d02a      	beq.n	800e92a <tcp_close_shutdown+0x15e>
 800e8d4:	e03f      	b.n	800e956 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	8adb      	ldrh	r3, [r3, #22]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d021      	beq.n	800e922 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e8de:	4b2a      	ldr	r3, [pc, #168]	; (800e988 <tcp_close_shutdown+0x1bc>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	687a      	ldr	r2, [r7, #4]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d105      	bne.n	800e8f4 <tcp_close_shutdown+0x128>
 800e8e8:	4b27      	ldr	r3, [pc, #156]	; (800e988 <tcp_close_shutdown+0x1bc>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	4a26      	ldr	r2, [pc, #152]	; (800e988 <tcp_close_shutdown+0x1bc>)
 800e8f0:	6013      	str	r3, [r2, #0]
 800e8f2:	e013      	b.n	800e91c <tcp_close_shutdown+0x150>
 800e8f4:	4b24      	ldr	r3, [pc, #144]	; (800e988 <tcp_close_shutdown+0x1bc>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	60bb      	str	r3, [r7, #8]
 800e8fa:	e00c      	b.n	800e916 <tcp_close_shutdown+0x14a>
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	687a      	ldr	r2, [r7, #4]
 800e902:	429a      	cmp	r2, r3
 800e904:	d104      	bne.n	800e910 <tcp_close_shutdown+0x144>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	68da      	ldr	r2, [r3, #12]
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	60da      	str	r2, [r3, #12]
 800e90e:	e005      	b.n	800e91c <tcp_close_shutdown+0x150>
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	60bb      	str	r3, [r7, #8]
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d1ef      	bne.n	800e8fc <tcp_close_shutdown+0x130>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2200      	movs	r2, #0
 800e920:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7ff fea0 	bl	800e668 <tcp_free>
      break;
 800e928:	e01a      	b.n	800e960 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f7ff ff14 	bl	800e758 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e930:	6879      	ldr	r1, [r7, #4]
 800e932:	4816      	ldr	r0, [pc, #88]	; (800e98c <tcp_close_shutdown+0x1c0>)
 800e934:	f001 f8a8 	bl	800fa88 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f7ff feb1 	bl	800e6a0 <tcp_free_listen>
      break;
 800e93e:	e00f      	b.n	800e960 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e940:	6879      	ldr	r1, [r7, #4]
 800e942:	480e      	ldr	r0, [pc, #56]	; (800e97c <tcp_close_shutdown+0x1b0>)
 800e944:	f001 f8a0 	bl	800fa88 <tcp_pcb_remove>
 800e948:	4b0d      	ldr	r3, [pc, #52]	; (800e980 <tcp_close_shutdown+0x1b4>)
 800e94a:	2201      	movs	r2, #1
 800e94c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f7ff fe8a 	bl	800e668 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e954:	e004      	b.n	800e960 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f81a 	bl	800e990 <tcp_close_shutdown_fin>
 800e95c:	4603      	mov	r3, r0
 800e95e:	e000      	b.n	800e962 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3710      	adds	r7, #16
 800e966:	46bd      	mov	sp, r7
 800e968:	bdb0      	pop	{r4, r5, r7, pc}
 800e96a:	bf00      	nop
 800e96c:	0801925c 	.word	0x0801925c
 800e970:	08019330 	.word	0x08019330
 800e974:	080192a0 	.word	0x080192a0
 800e978:	08019350 	.word	0x08019350
 800e97c:	20008fd4 	.word	0x20008fd4
 800e980:	20008fdc 	.word	0x20008fdc
 800e984:	20009014 	.word	0x20009014
 800e988:	20008fcc 	.word	0x20008fcc
 800e98c:	20008fd0 	.word	0x20008fd0

0800e990 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d106      	bne.n	800e9ac <tcp_close_shutdown_fin+0x1c>
 800e99e:	4b2e      	ldr	r3, [pc, #184]	; (800ea58 <tcp_close_shutdown_fin+0xc8>)
 800e9a0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e9a4:	492d      	ldr	r1, [pc, #180]	; (800ea5c <tcp_close_shutdown_fin+0xcc>)
 800e9a6:	482e      	ldr	r0, [pc, #184]	; (800ea60 <tcp_close_shutdown_fin+0xd0>)
 800e9a8:	f008 fe96 	bl	80176d8 <iprintf>

  switch (pcb->state) {
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	7d1b      	ldrb	r3, [r3, #20]
 800e9b0:	2b07      	cmp	r3, #7
 800e9b2:	d020      	beq.n	800e9f6 <tcp_close_shutdown_fin+0x66>
 800e9b4:	2b07      	cmp	r3, #7
 800e9b6:	dc2b      	bgt.n	800ea10 <tcp_close_shutdown_fin+0x80>
 800e9b8:	2b03      	cmp	r3, #3
 800e9ba:	d002      	beq.n	800e9c2 <tcp_close_shutdown_fin+0x32>
 800e9bc:	2b04      	cmp	r3, #4
 800e9be:	d00d      	beq.n	800e9dc <tcp_close_shutdown_fin+0x4c>
 800e9c0:	e026      	b.n	800ea10 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f003 fee6 	bl	8012794 <tcp_send_fin>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e9cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d11f      	bne.n	800ea14 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2205      	movs	r2, #5
 800e9d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9da:	e01b      	b.n	800ea14 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f003 fed9 	bl	8012794 <tcp_send_fin>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e9e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d114      	bne.n	800ea18 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2205      	movs	r2, #5
 800e9f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e9f4:	e010      	b.n	800ea18 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f003 fecc 	bl	8012794 <tcp_send_fin>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ea00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d109      	bne.n	800ea1c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2209      	movs	r2, #9
 800ea0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ea0e:	e005      	b.n	800ea1c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ea10:	2300      	movs	r3, #0
 800ea12:	e01c      	b.n	800ea4e <tcp_close_shutdown_fin+0xbe>
      break;
 800ea14:	bf00      	nop
 800ea16:	e002      	b.n	800ea1e <tcp_close_shutdown_fin+0x8e>
      break;
 800ea18:	bf00      	nop
 800ea1a:	e000      	b.n	800ea1e <tcp_close_shutdown_fin+0x8e>
      break;
 800ea1c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ea1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d103      	bne.n	800ea2e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f003 fff2 	bl	8012a10 <tcp_output>
 800ea2c:	e00d      	b.n	800ea4a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ea2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea36:	d108      	bne.n	800ea4a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	8b5b      	ldrh	r3, [r3, #26]
 800ea3c:	f043 0308 	orr.w	r3, r3, #8
 800ea40:	b29a      	uxth	r2, r3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ea46:	2300      	movs	r3, #0
 800ea48:	e001      	b.n	800ea4e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ea4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3710      	adds	r7, #16
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	bf00      	nop
 800ea58:	0801925c 	.word	0x0801925c
 800ea5c:	0801930c 	.word	0x0801930c
 800ea60:	080192a0 	.word	0x080192a0

0800ea64 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d109      	bne.n	800ea86 <tcp_close+0x22>
 800ea72:	4b0f      	ldr	r3, [pc, #60]	; (800eab0 <tcp_close+0x4c>)
 800ea74:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800ea78:	490e      	ldr	r1, [pc, #56]	; (800eab4 <tcp_close+0x50>)
 800ea7a:	480f      	ldr	r0, [pc, #60]	; (800eab8 <tcp_close+0x54>)
 800ea7c:	f008 fe2c 	bl	80176d8 <iprintf>
 800ea80:	f06f 030f 	mvn.w	r3, #15
 800ea84:	e00f      	b.n	800eaa6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	7d1b      	ldrb	r3, [r3, #20]
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d006      	beq.n	800ea9c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	8b5b      	ldrh	r3, [r3, #26]
 800ea92:	f043 0310 	orr.w	r3, r3, #16
 800ea96:	b29a      	uxth	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ea9c:	2101      	movs	r1, #1
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7ff fe94 	bl	800e7cc <tcp_close_shutdown>
 800eaa4:	4603      	mov	r3, r0
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	0801925c 	.word	0x0801925c
 800eab4:	0801936c 	.word	0x0801936c
 800eab8:	080192a0 	.word	0x080192a0

0800eabc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b08e      	sub	sp, #56	; 0x38
 800eac0:	af04      	add	r7, sp, #16
 800eac2:	6078      	str	r0, [r7, #4]
 800eac4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d107      	bne.n	800eadc <tcp_abandon+0x20>
 800eacc:	4b52      	ldr	r3, [pc, #328]	; (800ec18 <tcp_abandon+0x15c>)
 800eace:	f240 223d 	movw	r2, #573	; 0x23d
 800ead2:	4952      	ldr	r1, [pc, #328]	; (800ec1c <tcp_abandon+0x160>)
 800ead4:	4852      	ldr	r0, [pc, #328]	; (800ec20 <tcp_abandon+0x164>)
 800ead6:	f008 fdff 	bl	80176d8 <iprintf>
 800eada:	e099      	b.n	800ec10 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	7d1b      	ldrb	r3, [r3, #20]
 800eae0:	2b01      	cmp	r3, #1
 800eae2:	d106      	bne.n	800eaf2 <tcp_abandon+0x36>
 800eae4:	4b4c      	ldr	r3, [pc, #304]	; (800ec18 <tcp_abandon+0x15c>)
 800eae6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800eaea:	494e      	ldr	r1, [pc, #312]	; (800ec24 <tcp_abandon+0x168>)
 800eaec:	484c      	ldr	r0, [pc, #304]	; (800ec20 <tcp_abandon+0x164>)
 800eaee:	f008 fdf3 	bl	80176d8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	7d1b      	ldrb	r3, [r3, #20]
 800eaf6:	2b0a      	cmp	r3, #10
 800eaf8:	d107      	bne.n	800eb0a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800eafa:	6879      	ldr	r1, [r7, #4]
 800eafc:	484a      	ldr	r0, [pc, #296]	; (800ec28 <tcp_abandon+0x16c>)
 800eafe:	f000 ffc3 	bl	800fa88 <tcp_pcb_remove>
    tcp_free(pcb);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7ff fdb0 	bl	800e668 <tcp_free>
 800eb08:	e082      	b.n	800ec10 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb16:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb1c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800eb24:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	691b      	ldr	r3, [r3, #16]
 800eb2a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	7d1b      	ldrb	r3, [r3, #20]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d126      	bne.n	800eb82 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	8adb      	ldrh	r3, [r3, #22]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d02e      	beq.n	800eb9a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800eb3c:	4b3b      	ldr	r3, [pc, #236]	; (800ec2c <tcp_abandon+0x170>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	687a      	ldr	r2, [r7, #4]
 800eb42:	429a      	cmp	r2, r3
 800eb44:	d105      	bne.n	800eb52 <tcp_abandon+0x96>
 800eb46:	4b39      	ldr	r3, [pc, #228]	; (800ec2c <tcp_abandon+0x170>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	4a37      	ldr	r2, [pc, #220]	; (800ec2c <tcp_abandon+0x170>)
 800eb4e:	6013      	str	r3, [r2, #0]
 800eb50:	e013      	b.n	800eb7a <tcp_abandon+0xbe>
 800eb52:	4b36      	ldr	r3, [pc, #216]	; (800ec2c <tcp_abandon+0x170>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	61fb      	str	r3, [r7, #28]
 800eb58:	e00c      	b.n	800eb74 <tcp_abandon+0xb8>
 800eb5a:	69fb      	ldr	r3, [r7, #28]
 800eb5c:	68db      	ldr	r3, [r3, #12]
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d104      	bne.n	800eb6e <tcp_abandon+0xb2>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	68da      	ldr	r2, [r3, #12]
 800eb68:	69fb      	ldr	r3, [r7, #28]
 800eb6a:	60da      	str	r2, [r3, #12]
 800eb6c:	e005      	b.n	800eb7a <tcp_abandon+0xbe>
 800eb6e:	69fb      	ldr	r3, [r7, #28]
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	61fb      	str	r3, [r7, #28]
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d1ef      	bne.n	800eb5a <tcp_abandon+0x9e>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	60da      	str	r2, [r3, #12]
 800eb80:	e00b      	b.n	800eb9a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	8adb      	ldrh	r3, [r3, #22]
 800eb8a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800eb8c:	6879      	ldr	r1, [r7, #4]
 800eb8e:	4828      	ldr	r0, [pc, #160]	; (800ec30 <tcp_abandon+0x174>)
 800eb90:	f000 ff7a 	bl	800fa88 <tcp_pcb_remove>
 800eb94:	4b27      	ldr	r3, [pc, #156]	; (800ec34 <tcp_abandon+0x178>)
 800eb96:	2201      	movs	r2, #1
 800eb98:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d004      	beq.n	800ebac <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eba6:	4618      	mov	r0, r3
 800eba8:	f000 fd1c 	bl	800f5e4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d004      	beq.n	800ebbe <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f000 fd13 	bl	800f5e4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d004      	beq.n	800ebd0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f000 fd0a 	bl	800f5e4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d00e      	beq.n	800ebf4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ebd6:	6879      	ldr	r1, [r7, #4]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	3304      	adds	r3, #4
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	8b12      	ldrh	r2, [r2, #24]
 800ebe0:	9202      	str	r2, [sp, #8]
 800ebe2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ebe4:	9201      	str	r2, [sp, #4]
 800ebe6:	9300      	str	r3, [sp, #0]
 800ebe8:	460b      	mov	r3, r1
 800ebea:	697a      	ldr	r2, [r7, #20]
 800ebec:	69b9      	ldr	r1, [r7, #24]
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f004 fcc2 	bl	8013578 <tcp_rst>
    }
    last_state = pcb->state;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	7d1b      	ldrb	r3, [r3, #20]
 800ebf8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ebfa:	6878      	ldr	r0, [r7, #4]
 800ebfc:	f7ff fd34 	bl	800e668 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d004      	beq.n	800ec10 <tcp_abandon+0x154>
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	f06f 010c 	mvn.w	r1, #12
 800ec0c:	68f8      	ldr	r0, [r7, #12]
 800ec0e:	4798      	blx	r3
  }
}
 800ec10:	3728      	adds	r7, #40	; 0x28
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	0801925c 	.word	0x0801925c
 800ec1c:	080193a0 	.word	0x080193a0
 800ec20:	080192a0 	.word	0x080192a0
 800ec24:	080193bc 	.word	0x080193bc
 800ec28:	20008fd8 	.word	0x20008fd8
 800ec2c:	20008fcc 	.word	0x20008fcc
 800ec30:	20008fd4 	.word	0x20008fd4
 800ec34:	20008fdc 	.word	0x20008fdc

0800ec38 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ec40:	2101      	movs	r1, #1
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f7ff ff3a 	bl	800eabc <tcp_abandon>
}
 800ec48:	bf00      	nop
 800ec4a:	3708      	adds	r7, #8
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d106      	bne.n	800ec6c <tcp_update_rcv_ann_wnd+0x1c>
 800ec5e:	4b25      	ldr	r3, [pc, #148]	; (800ecf4 <tcp_update_rcv_ann_wnd+0xa4>)
 800ec60:	f240 32a6 	movw	r2, #934	; 0x3a6
 800ec64:	4924      	ldr	r1, [pc, #144]	; (800ecf8 <tcp_update_rcv_ann_wnd+0xa8>)
 800ec66:	4825      	ldr	r0, [pc, #148]	; (800ecfc <tcp_update_rcv_ann_wnd+0xac>)
 800ec68:	f008 fd36 	bl	80176d8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec70:	687a      	ldr	r2, [r7, #4]
 800ec72:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ec74:	4413      	add	r3, r2
 800ec76:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec7c:	687a      	ldr	r2, [r7, #4]
 800ec7e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ec80:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ec84:	bf28      	it	cs
 800ec86:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ec8a:	b292      	uxth	r2, r2
 800ec8c:	4413      	add	r3, r2
 800ec8e:	68fa      	ldr	r2, [r7, #12]
 800ec90:	1ad3      	subs	r3, r2, r3
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	db08      	blt.n	800eca8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca2:	68fa      	ldr	r2, [r7, #12]
 800eca4:	1ad3      	subs	r3, r2, r3
 800eca6:	e020      	b.n	800ecea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb0:	1ad3      	subs	r3, r2, r3
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	dd03      	ble.n	800ecbe <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2200      	movs	r2, #0
 800ecba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ecbc:	e014      	b.n	800ece8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ecd0:	d306      	bcc.n	800ece0 <tcp_update_rcv_ann_wnd+0x90>
 800ecd2:	4b08      	ldr	r3, [pc, #32]	; (800ecf4 <tcp_update_rcv_ann_wnd+0xa4>)
 800ecd4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ecd8:	4909      	ldr	r1, [pc, #36]	; (800ed00 <tcp_update_rcv_ann_wnd+0xb0>)
 800ecda:	4808      	ldr	r0, [pc, #32]	; (800ecfc <tcp_update_rcv_ann_wnd+0xac>)
 800ecdc:	f008 fcfc 	bl	80176d8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	b29a      	uxth	r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ece8:	2300      	movs	r3, #0
  }
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3710      	adds	r7, #16
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}
 800ecf2:	bf00      	nop
 800ecf4:	0801925c 	.word	0x0801925c
 800ecf8:	080194b8 	.word	0x080194b8
 800ecfc:	080192a0 	.word	0x080192a0
 800ed00:	080194dc 	.word	0x080194dc

0800ed04 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d107      	bne.n	800ed26 <tcp_recved+0x22>
 800ed16:	4b1f      	ldr	r3, [pc, #124]	; (800ed94 <tcp_recved+0x90>)
 800ed18:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ed1c:	491e      	ldr	r1, [pc, #120]	; (800ed98 <tcp_recved+0x94>)
 800ed1e:	481f      	ldr	r0, [pc, #124]	; (800ed9c <tcp_recved+0x98>)
 800ed20:	f008 fcda 	bl	80176d8 <iprintf>
 800ed24:	e032      	b.n	800ed8c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	7d1b      	ldrb	r3, [r3, #20]
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d106      	bne.n	800ed3c <tcp_recved+0x38>
 800ed2e:	4b19      	ldr	r3, [pc, #100]	; (800ed94 <tcp_recved+0x90>)
 800ed30:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ed34:	491a      	ldr	r1, [pc, #104]	; (800eda0 <tcp_recved+0x9c>)
 800ed36:	4819      	ldr	r0, [pc, #100]	; (800ed9c <tcp_recved+0x98>)
 800ed38:	f008 fcce 	bl	80176d8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed40:	887b      	ldrh	r3, [r7, #2]
 800ed42:	4413      	add	r3, r2
 800ed44:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ed46:	89fb      	ldrh	r3, [r7, #14]
 800ed48:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ed4c:	d804      	bhi.n	800ed58 <tcp_recved+0x54>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed52:	89fa      	ldrh	r2, [r7, #14]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d204      	bcs.n	800ed62 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ed5e:	851a      	strh	r2, [r3, #40]	; 0x28
 800ed60:	e002      	b.n	800ed68 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	89fa      	ldrh	r2, [r7, #14]
 800ed66:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f7ff ff71 	bl	800ec50 <tcp_update_rcv_ann_wnd>
 800ed6e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ed76:	d309      	bcc.n	800ed8c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	8b5b      	ldrh	r3, [r3, #26]
 800ed7c:	f043 0302 	orr.w	r3, r3, #2
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f003 fe42 	bl	8012a10 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ed8c:	3710      	adds	r7, #16
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	bd80      	pop	{r7, pc}
 800ed92:	bf00      	nop
 800ed94:	0801925c 	.word	0x0801925c
 800ed98:	080194f8 	.word	0x080194f8
 800ed9c:	080192a0 	.word	0x080192a0
 800eda0:	08019510 	.word	0x08019510

0800eda4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800eda4:	b5b0      	push	{r4, r5, r7, lr}
 800eda6:	b090      	sub	sp, #64	; 0x40
 800eda8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800edb0:	4b94      	ldr	r3, [pc, #592]	; (800f004 <tcp_slowtmr+0x260>)
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	3301      	adds	r3, #1
 800edb6:	4a93      	ldr	r2, [pc, #588]	; (800f004 <tcp_slowtmr+0x260>)
 800edb8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800edba:	4b93      	ldr	r3, [pc, #588]	; (800f008 <tcp_slowtmr+0x264>)
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	3301      	adds	r3, #1
 800edc0:	b2da      	uxtb	r2, r3
 800edc2:	4b91      	ldr	r3, [pc, #580]	; (800f008 <tcp_slowtmr+0x264>)
 800edc4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800edc6:	2300      	movs	r3, #0
 800edc8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800edca:	4b90      	ldr	r3, [pc, #576]	; (800f00c <tcp_slowtmr+0x268>)
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800edd0:	e29d      	b.n	800f30e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800edd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edd4:	7d1b      	ldrb	r3, [r3, #20]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d106      	bne.n	800ede8 <tcp_slowtmr+0x44>
 800edda:	4b8d      	ldr	r3, [pc, #564]	; (800f010 <tcp_slowtmr+0x26c>)
 800eddc:	f240 42be 	movw	r2, #1214	; 0x4be
 800ede0:	498c      	ldr	r1, [pc, #560]	; (800f014 <tcp_slowtmr+0x270>)
 800ede2:	488d      	ldr	r0, [pc, #564]	; (800f018 <tcp_slowtmr+0x274>)
 800ede4:	f008 fc78 	bl	80176d8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ede8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edea:	7d1b      	ldrb	r3, [r3, #20]
 800edec:	2b01      	cmp	r3, #1
 800edee:	d106      	bne.n	800edfe <tcp_slowtmr+0x5a>
 800edf0:	4b87      	ldr	r3, [pc, #540]	; (800f010 <tcp_slowtmr+0x26c>)
 800edf2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800edf6:	4989      	ldr	r1, [pc, #548]	; (800f01c <tcp_slowtmr+0x278>)
 800edf8:	4887      	ldr	r0, [pc, #540]	; (800f018 <tcp_slowtmr+0x274>)
 800edfa:	f008 fc6d 	bl	80176d8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800edfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee00:	7d1b      	ldrb	r3, [r3, #20]
 800ee02:	2b0a      	cmp	r3, #10
 800ee04:	d106      	bne.n	800ee14 <tcp_slowtmr+0x70>
 800ee06:	4b82      	ldr	r3, [pc, #520]	; (800f010 <tcp_slowtmr+0x26c>)
 800ee08:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ee0c:	4984      	ldr	r1, [pc, #528]	; (800f020 <tcp_slowtmr+0x27c>)
 800ee0e:	4882      	ldr	r0, [pc, #520]	; (800f018 <tcp_slowtmr+0x274>)
 800ee10:	f008 fc62 	bl	80176d8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ee14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee16:	7f9a      	ldrb	r2, [r3, #30]
 800ee18:	4b7b      	ldr	r3, [pc, #492]	; (800f008 <tcp_slowtmr+0x264>)
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d105      	bne.n	800ee2c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ee20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee22:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ee24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ee2a:	e270      	b.n	800f30e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ee2c:	4b76      	ldr	r3, [pc, #472]	; (800f008 <tcp_slowtmr+0x264>)
 800ee2e:	781a      	ldrb	r2, [r3, #0]
 800ee30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee32:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ee34:	2300      	movs	r3, #0
 800ee36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ee40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee42:	7d1b      	ldrb	r3, [r3, #20]
 800ee44:	2b02      	cmp	r3, #2
 800ee46:	d10a      	bne.n	800ee5e <tcp_slowtmr+0xba>
 800ee48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee4e:	2b05      	cmp	r3, #5
 800ee50:	d905      	bls.n	800ee5e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ee52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee56:	3301      	adds	r3, #1
 800ee58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee5c:	e11e      	b.n	800f09c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ee5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee64:	2b0b      	cmp	r3, #11
 800ee66:	d905      	bls.n	800ee74 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ee68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee6c:	3301      	adds	r3, #1
 800ee6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee72:	e113      	b.n	800f09c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ee74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d075      	beq.n	800ef6a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ee7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d006      	beq.n	800ee94 <tcp_slowtmr+0xf0>
 800ee86:	4b62      	ldr	r3, [pc, #392]	; (800f010 <tcp_slowtmr+0x26c>)
 800ee88:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ee8c:	4965      	ldr	r1, [pc, #404]	; (800f024 <tcp_slowtmr+0x280>)
 800ee8e:	4862      	ldr	r0, [pc, #392]	; (800f018 <tcp_slowtmr+0x274>)
 800ee90:	f008 fc22 	bl	80176d8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ee94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d106      	bne.n	800eeaa <tcp_slowtmr+0x106>
 800ee9c:	4b5c      	ldr	r3, [pc, #368]	; (800f010 <tcp_slowtmr+0x26c>)
 800ee9e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800eea2:	4961      	ldr	r1, [pc, #388]	; (800f028 <tcp_slowtmr+0x284>)
 800eea4:	485c      	ldr	r0, [pc, #368]	; (800f018 <tcp_slowtmr+0x274>)
 800eea6:	f008 fc17 	bl	80176d8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800eeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeac:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800eeb0:	2b0b      	cmp	r3, #11
 800eeb2:	d905      	bls.n	800eec0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800eeb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeb8:	3301      	adds	r3, #1
 800eeba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eebe:	e0ed      	b.n	800f09c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800eec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800eec6:	3b01      	subs	r3, #1
 800eec8:	4a58      	ldr	r2, [pc, #352]	; (800f02c <tcp_slowtmr+0x288>)
 800eeca:	5cd3      	ldrb	r3, [r2, r3]
 800eecc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800eece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eed4:	7c7a      	ldrb	r2, [r7, #17]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d907      	bls.n	800eeea <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800eeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eedc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eee0:	3301      	adds	r3, #1
 800eee2:	b2da      	uxtb	r2, r3
 800eee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800eeea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800eef0:	7c7a      	ldrb	r2, [r7, #17]
 800eef2:	429a      	cmp	r2, r3
 800eef4:	f200 80d2 	bhi.w	800f09c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800eef8:	2301      	movs	r3, #1
 800eefa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800eefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eefe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d108      	bne.n	800ef18 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ef06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef08:	f004 fc2a 	bl	8013760 <tcp_zero_window_probe>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d014      	beq.n	800ef3c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ef12:	2300      	movs	r3, #0
 800ef14:	623b      	str	r3, [r7, #32]
 800ef16:	e011      	b.n	800ef3c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ef18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef1e:	4619      	mov	r1, r3
 800ef20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef22:	f003 faef 	bl	8012504 <tcp_split_unsent_seg>
 800ef26:	4603      	mov	r3, r0
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d107      	bne.n	800ef3c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ef2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef2e:	f003 fd6f 	bl	8012a10 <tcp_output>
 800ef32:	4603      	mov	r3, r0
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d101      	bne.n	800ef3c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ef3c:	6a3b      	ldr	r3, [r7, #32]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	f000 80ac 	beq.w	800f09c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ef44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef46:	2200      	movs	r2, #0
 800ef48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ef4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef52:	2b06      	cmp	r3, #6
 800ef54:	f200 80a2 	bhi.w	800f09c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ef58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ef5e:	3301      	adds	r3, #1
 800ef60:	b2da      	uxtb	r2, r3
 800ef62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef64:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ef68:	e098      	b.n	800f09c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ef6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	db0f      	blt.n	800ef94 <tcp_slowtmr+0x1f0>
 800ef74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef76:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef7a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d008      	beq.n	800ef94 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ef82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef84:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ef88:	b29b      	uxth	r3, r3
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	b21a      	sxth	r2, r3
 800ef90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef92:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ef94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef96:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ef9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800efa0:	429a      	cmp	r2, r3
 800efa2:	db7b      	blt.n	800f09c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800efa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efa6:	f004 f825 	bl	8012ff4 <tcp_rexmit_rto_prepare>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b00      	cmp	r3, #0
 800efae:	d007      	beq.n	800efc0 <tcp_slowtmr+0x21c>
 800efb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d171      	bne.n	800f09c <tcp_slowtmr+0x2f8>
 800efb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d06d      	beq.n	800f09c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800efc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc2:	7d1b      	ldrb	r3, [r3, #20]
 800efc4:	2b02      	cmp	r3, #2
 800efc6:	d03a      	beq.n	800f03e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800efc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800efce:	2b0c      	cmp	r3, #12
 800efd0:	bf28      	it	cs
 800efd2:	230c      	movcs	r3, #12
 800efd4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800efd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800efdc:	10db      	asrs	r3, r3, #3
 800efde:	b21b      	sxth	r3, r3
 800efe0:	461a      	mov	r2, r3
 800efe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800efe8:	4413      	add	r3, r2
 800efea:	7efa      	ldrb	r2, [r7, #27]
 800efec:	4910      	ldr	r1, [pc, #64]	; (800f030 <tcp_slowtmr+0x28c>)
 800efee:	5c8a      	ldrb	r2, [r1, r2]
 800eff0:	4093      	lsls	r3, r2
 800eff2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800effa:	4293      	cmp	r3, r2
 800effc:	dc1a      	bgt.n	800f034 <tcp_slowtmr+0x290>
 800effe:	697b      	ldr	r3, [r7, #20]
 800f000:	b21a      	sxth	r2, r3
 800f002:	e019      	b.n	800f038 <tcp_slowtmr+0x294>
 800f004:	20008fc8 	.word	0x20008fc8
 800f008:	20008fde 	.word	0x20008fde
 800f00c:	20008fd4 	.word	0x20008fd4
 800f010:	0801925c 	.word	0x0801925c
 800f014:	080195a0 	.word	0x080195a0
 800f018:	080192a0 	.word	0x080192a0
 800f01c:	080195cc 	.word	0x080195cc
 800f020:	080195f8 	.word	0x080195f8
 800f024:	08019628 	.word	0x08019628
 800f028:	0801965c 	.word	0x0801965c
 800f02c:	0801b23c 	.word	0x0801b23c
 800f030:	0801b22c 	.word	0x0801b22c
 800f034:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f03a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800f03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f040:	2200      	movs	r2, #0
 800f042:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800f044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f046:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f04c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f050:	4293      	cmp	r3, r2
 800f052:	bf28      	it	cs
 800f054:	4613      	movcs	r3, r2
 800f056:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800f058:	8a7b      	ldrh	r3, [r7, #18]
 800f05a:	085b      	lsrs	r3, r3, #1
 800f05c:	b29a      	uxth	r2, r3
 800f05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f060:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f06e:	005b      	lsls	r3, r3, #1
 800f070:	b29b      	uxth	r3, r3
 800f072:	429a      	cmp	r2, r3
 800f074:	d206      	bcs.n	800f084 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800f076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f078:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f07a:	005b      	lsls	r3, r3, #1
 800f07c:	b29a      	uxth	r2, r3
 800f07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f080:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800f084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f086:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800f08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f090:	2200      	movs	r2, #0
 800f092:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800f096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f098:	f004 f81c 	bl	80130d4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	7d1b      	ldrb	r3, [r3, #20]
 800f0a0:	2b06      	cmp	r3, #6
 800f0a2:	d111      	bne.n	800f0c8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800f0a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a6:	8b5b      	ldrh	r3, [r3, #26]
 800f0a8:	f003 0310 	and.w	r3, r3, #16
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d00b      	beq.n	800f0c8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0b0:	4b9c      	ldr	r3, [pc, #624]	; (800f324 <tcp_slowtmr+0x580>)
 800f0b2:	681a      	ldr	r2, [r3, #0]
 800f0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b6:	6a1b      	ldr	r3, [r3, #32]
 800f0b8:	1ad3      	subs	r3, r2, r3
 800f0ba:	2b28      	cmp	r3, #40	; 0x28
 800f0bc:	d904      	bls.n	800f0c8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800f0be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ca:	7a5b      	ldrb	r3, [r3, #9]
 800f0cc:	f003 0308 	and.w	r3, r3, #8
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d04a      	beq.n	800f16a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800f0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800f0d8:	2b04      	cmp	r3, #4
 800f0da:	d003      	beq.n	800f0e4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800f0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0de:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800f0e0:	2b07      	cmp	r3, #7
 800f0e2:	d142      	bne.n	800f16a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f0e4:	4b8f      	ldr	r3, [pc, #572]	; (800f324 <tcp_slowtmr+0x580>)
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ea:	6a1b      	ldr	r3, [r3, #32]
 800f0ec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800f0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f0f4:	4b8c      	ldr	r3, [pc, #560]	; (800f328 <tcp_slowtmr+0x584>)
 800f0f6:	440b      	add	r3, r1
 800f0f8:	498c      	ldr	r1, [pc, #560]	; (800f32c <tcp_slowtmr+0x588>)
 800f0fa:	fba1 1303 	umull	r1, r3, r1, r3
 800f0fe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f100:	429a      	cmp	r2, r3
 800f102:	d90a      	bls.n	800f11a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800f104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f108:	3301      	adds	r3, #1
 800f10a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800f10e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f112:	3301      	adds	r3, #1
 800f114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f118:	e027      	b.n	800f16a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f11a:	4b82      	ldr	r3, [pc, #520]	; (800f324 <tcp_slowtmr+0x580>)
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f120:	6a1b      	ldr	r3, [r3, #32]
 800f122:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800f12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f130:	4618      	mov	r0, r3
 800f132:	4b7f      	ldr	r3, [pc, #508]	; (800f330 <tcp_slowtmr+0x58c>)
 800f134:	fb00 f303 	mul.w	r3, r0, r3
 800f138:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800f13a:	497c      	ldr	r1, [pc, #496]	; (800f32c <tcp_slowtmr+0x588>)
 800f13c:	fba1 1303 	umull	r1, r3, r1, r3
 800f140:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f142:	429a      	cmp	r2, r3
 800f144:	d911      	bls.n	800f16a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800f146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f148:	f004 faca 	bl	80136e0 <tcp_keepalive>
 800f14c:	4603      	mov	r3, r0
 800f14e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800f152:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f156:	2b00      	cmp	r3, #0
 800f158:	d107      	bne.n	800f16a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800f15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800f160:	3301      	adds	r3, #1
 800f162:	b2da      	uxtb	r2, r3
 800f164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f166:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800f16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d011      	beq.n	800f196 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800f172:	4b6c      	ldr	r3, [pc, #432]	; (800f324 <tcp_slowtmr+0x580>)
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f178:	6a1b      	ldr	r3, [r3, #32]
 800f17a:	1ad2      	subs	r2, r2, r3
 800f17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f17e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800f182:	4619      	mov	r1, r3
 800f184:	460b      	mov	r3, r1
 800f186:	005b      	lsls	r3, r3, #1
 800f188:	440b      	add	r3, r1
 800f18a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d302      	bcc.n	800f196 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800f190:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f192:	f000 fddd 	bl	800fd50 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800f196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f198:	7d1b      	ldrb	r3, [r3, #20]
 800f19a:	2b03      	cmp	r3, #3
 800f19c:	d10b      	bne.n	800f1b6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800f19e:	4b61      	ldr	r3, [pc, #388]	; (800f324 <tcp_slowtmr+0x580>)
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a4:	6a1b      	ldr	r3, [r3, #32]
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	2b28      	cmp	r3, #40	; 0x28
 800f1aa:	d904      	bls.n	800f1b6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800f1ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800f1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b8:	7d1b      	ldrb	r3, [r3, #20]
 800f1ba:	2b09      	cmp	r3, #9
 800f1bc:	d10b      	bne.n	800f1d6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f1be:	4b59      	ldr	r3, [pc, #356]	; (800f324 <tcp_slowtmr+0x580>)
 800f1c0:	681a      	ldr	r2, [r3, #0]
 800f1c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c4:	6a1b      	ldr	r3, [r3, #32]
 800f1c6:	1ad3      	subs	r3, r2, r3
 800f1c8:	2bf0      	cmp	r3, #240	; 0xf0
 800f1ca:	d904      	bls.n	800f1d6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800f1cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1d0:	3301      	adds	r3, #1
 800f1d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f1d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d060      	beq.n	800f2a0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800f1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f1e4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800f1e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1e8:	f000 fbfe 	bl	800f9e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800f1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d010      	beq.n	800f214 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800f1f2:	4b50      	ldr	r3, [pc, #320]	; (800f334 <tcp_slowtmr+0x590>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d106      	bne.n	800f20a <tcp_slowtmr+0x466>
 800f1fc:	4b4e      	ldr	r3, [pc, #312]	; (800f338 <tcp_slowtmr+0x594>)
 800f1fe:	f240 526d 	movw	r2, #1389	; 0x56d
 800f202:	494e      	ldr	r1, [pc, #312]	; (800f33c <tcp_slowtmr+0x598>)
 800f204:	484e      	ldr	r0, [pc, #312]	; (800f340 <tcp_slowtmr+0x59c>)
 800f206:	f008 fa67 	bl	80176d8 <iprintf>
        prev->next = pcb->next;
 800f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20c:	68da      	ldr	r2, [r3, #12]
 800f20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f210:	60da      	str	r2, [r3, #12]
 800f212:	e00f      	b.n	800f234 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800f214:	4b47      	ldr	r3, [pc, #284]	; (800f334 <tcp_slowtmr+0x590>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d006      	beq.n	800f22c <tcp_slowtmr+0x488>
 800f21e:	4b46      	ldr	r3, [pc, #280]	; (800f338 <tcp_slowtmr+0x594>)
 800f220:	f240 5271 	movw	r2, #1393	; 0x571
 800f224:	4947      	ldr	r1, [pc, #284]	; (800f344 <tcp_slowtmr+0x5a0>)
 800f226:	4846      	ldr	r0, [pc, #280]	; (800f340 <tcp_slowtmr+0x59c>)
 800f228:	f008 fa56 	bl	80176d8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800f22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	4a40      	ldr	r2, [pc, #256]	; (800f334 <tcp_slowtmr+0x590>)
 800f232:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800f234:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d013      	beq.n	800f264 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f242:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f244:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	3304      	adds	r3, #4
 800f24a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f24c:	8ad2      	ldrh	r2, [r2, #22]
 800f24e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f250:	8b09      	ldrh	r1, [r1, #24]
 800f252:	9102      	str	r1, [sp, #8]
 800f254:	9201      	str	r2, [sp, #4]
 800f256:	9300      	str	r3, [sp, #0]
 800f258:	462b      	mov	r3, r5
 800f25a:	4622      	mov	r2, r4
 800f25c:	4601      	mov	r1, r0
 800f25e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f260:	f004 f98a 	bl	8013578 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f266:	691b      	ldr	r3, [r3, #16]
 800f268:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26c:	7d1b      	ldrb	r3, [r3, #20]
 800f26e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f272:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	68db      	ldr	r3, [r3, #12]
 800f278:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f27a:	6838      	ldr	r0, [r7, #0]
 800f27c:	f7ff f9f4 	bl	800e668 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f280:	4b31      	ldr	r3, [pc, #196]	; (800f348 <tcp_slowtmr+0x5a4>)
 800f282:	2200      	movs	r2, #0
 800f284:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d004      	beq.n	800f296 <tcp_slowtmr+0x4f2>
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	f06f 010c 	mvn.w	r1, #12
 800f292:	68b8      	ldr	r0, [r7, #8]
 800f294:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f296:	4b2c      	ldr	r3, [pc, #176]	; (800f348 <tcp_slowtmr+0x5a4>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d037      	beq.n	800f30e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f29e:	e592      	b.n	800edc6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a6:	68db      	ldr	r3, [r3, #12]
 800f2a8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ac:	7f1b      	ldrb	r3, [r3, #28]
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	b2da      	uxtb	r2, r3
 800f2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2b8:	7f1a      	ldrb	r2, [r3, #28]
 800f2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2bc:	7f5b      	ldrb	r3, [r3, #29]
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d325      	bcc.n	800f30e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f2c8:	4b1f      	ldr	r3, [pc, #124]	; (800f348 <tcp_slowtmr+0x5a4>)
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00b      	beq.n	800f2f0 <tcp_slowtmr+0x54c>
 800f2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f2de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2e0:	6912      	ldr	r2, [r2, #16]
 800f2e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f2e4:	4610      	mov	r0, r2
 800f2e6:	4798      	blx	r3
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f2ee:	e002      	b.n	800f2f6 <tcp_slowtmr+0x552>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f2f6:	4b14      	ldr	r3, [pc, #80]	; (800f348 <tcp_slowtmr+0x5a4>)
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d000      	beq.n	800f300 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f2fe:	e562      	b.n	800edc6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f300:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f304:	2b00      	cmp	r3, #0
 800f306:	d102      	bne.n	800f30e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f30a:	f003 fb81 	bl	8012a10 <tcp_output>
  while (pcb != NULL) {
 800f30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f310:	2b00      	cmp	r3, #0
 800f312:	f47f ad5e 	bne.w	800edd2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f316:	2300      	movs	r3, #0
 800f318:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f31a:	4b0c      	ldr	r3, [pc, #48]	; (800f34c <tcp_slowtmr+0x5a8>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f320:	e069      	b.n	800f3f6 <tcp_slowtmr+0x652>
 800f322:	bf00      	nop
 800f324:	20008fc8 	.word	0x20008fc8
 800f328:	000a4cb8 	.word	0x000a4cb8
 800f32c:	10624dd3 	.word	0x10624dd3
 800f330:	000124f8 	.word	0x000124f8
 800f334:	20008fd4 	.word	0x20008fd4
 800f338:	0801925c 	.word	0x0801925c
 800f33c:	08019694 	.word	0x08019694
 800f340:	080192a0 	.word	0x080192a0
 800f344:	080196c0 	.word	0x080196c0
 800f348:	20008fdc 	.word	0x20008fdc
 800f34c:	20008fd8 	.word	0x20008fd8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f352:	7d1b      	ldrb	r3, [r3, #20]
 800f354:	2b0a      	cmp	r3, #10
 800f356:	d006      	beq.n	800f366 <tcp_slowtmr+0x5c2>
 800f358:	4b2b      	ldr	r3, [pc, #172]	; (800f408 <tcp_slowtmr+0x664>)
 800f35a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f35e:	492b      	ldr	r1, [pc, #172]	; (800f40c <tcp_slowtmr+0x668>)
 800f360:	482b      	ldr	r0, [pc, #172]	; (800f410 <tcp_slowtmr+0x66c>)
 800f362:	f008 f9b9 	bl	80176d8 <iprintf>
    pcb_remove = 0;
 800f366:	2300      	movs	r3, #0
 800f368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f36c:	4b29      	ldr	r3, [pc, #164]	; (800f414 <tcp_slowtmr+0x670>)
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f372:	6a1b      	ldr	r3, [r3, #32]
 800f374:	1ad3      	subs	r3, r2, r3
 800f376:	2bf0      	cmp	r3, #240	; 0xf0
 800f378:	d904      	bls.n	800f384 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f37a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f37e:	3301      	adds	r3, #1
 800f380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d02f      	beq.n	800f3ec <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f38c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f38e:	f000 fb2b 	bl	800f9e8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f394:	2b00      	cmp	r3, #0
 800f396:	d010      	beq.n	800f3ba <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f398:	4b1f      	ldr	r3, [pc, #124]	; (800f418 <tcp_slowtmr+0x674>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d106      	bne.n	800f3b0 <tcp_slowtmr+0x60c>
 800f3a2:	4b19      	ldr	r3, [pc, #100]	; (800f408 <tcp_slowtmr+0x664>)
 800f3a4:	f240 52af 	movw	r2, #1455	; 0x5af
 800f3a8:	491c      	ldr	r1, [pc, #112]	; (800f41c <tcp_slowtmr+0x678>)
 800f3aa:	4819      	ldr	r0, [pc, #100]	; (800f410 <tcp_slowtmr+0x66c>)
 800f3ac:	f008 f994 	bl	80176d8 <iprintf>
        prev->next = pcb->next;
 800f3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3b2:	68da      	ldr	r2, [r3, #12]
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	60da      	str	r2, [r3, #12]
 800f3b8:	e00f      	b.n	800f3da <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f3ba:	4b17      	ldr	r3, [pc, #92]	; (800f418 <tcp_slowtmr+0x674>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d006      	beq.n	800f3d2 <tcp_slowtmr+0x62e>
 800f3c4:	4b10      	ldr	r3, [pc, #64]	; (800f408 <tcp_slowtmr+0x664>)
 800f3c6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f3ca:	4915      	ldr	r1, [pc, #84]	; (800f420 <tcp_slowtmr+0x67c>)
 800f3cc:	4810      	ldr	r0, [pc, #64]	; (800f410 <tcp_slowtmr+0x66c>)
 800f3ce:	f008 f983 	bl	80176d8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3d4:	68db      	ldr	r3, [r3, #12]
 800f3d6:	4a10      	ldr	r2, [pc, #64]	; (800f418 <tcp_slowtmr+0x674>)
 800f3d8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3dc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f3e4:	69f8      	ldr	r0, [r7, #28]
 800f3e6:	f7ff f93f 	bl	800e668 <tcp_free>
 800f3ea:	e004      	b.n	800f3f6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1a9      	bne.n	800f350 <tcp_slowtmr+0x5ac>
    }
  }
}
 800f3fc:	bf00      	nop
 800f3fe:	bf00      	nop
 800f400:	3730      	adds	r7, #48	; 0x30
 800f402:	46bd      	mov	sp, r7
 800f404:	bdb0      	pop	{r4, r5, r7, pc}
 800f406:	bf00      	nop
 800f408:	0801925c 	.word	0x0801925c
 800f40c:	080196ec 	.word	0x080196ec
 800f410:	080192a0 	.word	0x080192a0
 800f414:	20008fc8 	.word	0x20008fc8
 800f418:	20008fd8 	.word	0x20008fd8
 800f41c:	0801971c 	.word	0x0801971c
 800f420:	08019744 	.word	0x08019744

0800f424 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b082      	sub	sp, #8
 800f428:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f42a:	4b2d      	ldr	r3, [pc, #180]	; (800f4e0 <tcp_fasttmr+0xbc>)
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	3301      	adds	r3, #1
 800f430:	b2da      	uxtb	r2, r3
 800f432:	4b2b      	ldr	r3, [pc, #172]	; (800f4e0 <tcp_fasttmr+0xbc>)
 800f434:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f436:	4b2b      	ldr	r3, [pc, #172]	; (800f4e4 <tcp_fasttmr+0xc0>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f43c:	e048      	b.n	800f4d0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	7f9a      	ldrb	r2, [r3, #30]
 800f442:	4b27      	ldr	r3, [pc, #156]	; (800f4e0 <tcp_fasttmr+0xbc>)
 800f444:	781b      	ldrb	r3, [r3, #0]
 800f446:	429a      	cmp	r2, r3
 800f448:	d03f      	beq.n	800f4ca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f44a:	4b25      	ldr	r3, [pc, #148]	; (800f4e0 <tcp_fasttmr+0xbc>)
 800f44c:	781a      	ldrb	r2, [r3, #0]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	8b5b      	ldrh	r3, [r3, #26]
 800f456:	f003 0301 	and.w	r3, r3, #1
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d010      	beq.n	800f480 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	8b5b      	ldrh	r3, [r3, #26]
 800f462:	f043 0302 	orr.w	r3, r3, #2
 800f466:	b29a      	uxth	r2, r3
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f003 facf 	bl	8012a10 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	8b5b      	ldrh	r3, [r3, #26]
 800f476:	f023 0303 	bic.w	r3, r3, #3
 800f47a:	b29a      	uxth	r2, r3
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	8b5b      	ldrh	r3, [r3, #26]
 800f484:	f003 0308 	and.w	r3, r3, #8
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d009      	beq.n	800f4a0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	8b5b      	ldrh	r3, [r3, #26]
 800f490:	f023 0308 	bic.w	r3, r3, #8
 800f494:	b29a      	uxth	r2, r3
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f7ff fa78 	bl	800e990 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00a      	beq.n	800f4c4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f4ae:	4b0e      	ldr	r3, [pc, #56]	; (800f4e8 <tcp_fasttmr+0xc4>)
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f000 f819 	bl	800f4ec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f4ba:	4b0b      	ldr	r3, [pc, #44]	; (800f4e8 <tcp_fasttmr+0xc4>)
 800f4bc:	781b      	ldrb	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d000      	beq.n	800f4c4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f4c2:	e7b8      	b.n	800f436 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	607b      	str	r3, [r7, #4]
 800f4c8:	e002      	b.n	800f4d0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	68db      	ldr	r3, [r3, #12]
 800f4ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d1b3      	bne.n	800f43e <tcp_fasttmr+0x1a>
    }
  }
}
 800f4d6:	bf00      	nop
 800f4d8:	bf00      	nop
 800f4da:	3708      	adds	r7, #8
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	20008fde 	.word	0x20008fde
 800f4e4:	20008fd4 	.word	0x20008fd4
 800f4e8:	20008fdc 	.word	0x20008fdc

0800f4ec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f4ec:	b590      	push	{r4, r7, lr}
 800f4ee:	b085      	sub	sp, #20
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d109      	bne.n	800f50e <tcp_process_refused_data+0x22>
 800f4fa:	4b37      	ldr	r3, [pc, #220]	; (800f5d8 <tcp_process_refused_data+0xec>)
 800f4fc:	f240 6209 	movw	r2, #1545	; 0x609
 800f500:	4936      	ldr	r1, [pc, #216]	; (800f5dc <tcp_process_refused_data+0xf0>)
 800f502:	4837      	ldr	r0, [pc, #220]	; (800f5e0 <tcp_process_refused_data+0xf4>)
 800f504:	f008 f8e8 	bl	80176d8 <iprintf>
 800f508:	f06f 030f 	mvn.w	r3, #15
 800f50c:	e060      	b.n	800f5d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f512:	7b5b      	ldrb	r3, [r3, #13]
 800f514:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f51a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2200      	movs	r2, #0
 800f520:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d00b      	beq.n	800f544 <tcp_process_refused_data+0x58>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6918      	ldr	r0, [r3, #16]
 800f536:	2300      	movs	r3, #0
 800f538:	68ba      	ldr	r2, [r7, #8]
 800f53a:	6879      	ldr	r1, [r7, #4]
 800f53c:	47a0      	blx	r4
 800f53e:	4603      	mov	r3, r0
 800f540:	73fb      	strb	r3, [r7, #15]
 800f542:	e007      	b.n	800f554 <tcp_process_refused_data+0x68>
 800f544:	2300      	movs	r3, #0
 800f546:	68ba      	ldr	r2, [r7, #8]
 800f548:	6879      	ldr	r1, [r7, #4]
 800f54a:	2000      	movs	r0, #0
 800f54c:	f000 f8a4 	bl	800f698 <tcp_recv_null>
 800f550:	4603      	mov	r3, r0
 800f552:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d12a      	bne.n	800f5b2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f55c:	7bbb      	ldrb	r3, [r7, #14]
 800f55e:	f003 0320 	and.w	r3, r3, #32
 800f562:	2b00      	cmp	r3, #0
 800f564:	d033      	beq.n	800f5ce <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f56a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f56e:	d005      	beq.n	800f57c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f574:	3301      	adds	r3, #1
 800f576:	b29a      	uxth	r2, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f582:	2b00      	cmp	r3, #0
 800f584:	d00b      	beq.n	800f59e <tcp_process_refused_data+0xb2>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6918      	ldr	r0, [r3, #16]
 800f590:	2300      	movs	r3, #0
 800f592:	2200      	movs	r2, #0
 800f594:	6879      	ldr	r1, [r7, #4]
 800f596:	47a0      	blx	r4
 800f598:	4603      	mov	r3, r0
 800f59a:	73fb      	strb	r3, [r7, #15]
 800f59c:	e001      	b.n	800f5a2 <tcp_process_refused_data+0xb6>
 800f59e:	2300      	movs	r3, #0
 800f5a0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f5a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5a6:	f113 0f0d 	cmn.w	r3, #13
 800f5aa:	d110      	bne.n	800f5ce <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f5ac:	f06f 030c 	mvn.w	r3, #12
 800f5b0:	e00e      	b.n	800f5d0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f5b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f5b6:	f113 0f0d 	cmn.w	r3, #13
 800f5ba:	d102      	bne.n	800f5c2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f5bc:	f06f 030c 	mvn.w	r3, #12
 800f5c0:	e006      	b.n	800f5d0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f5c8:	f06f 0304 	mvn.w	r3, #4
 800f5cc:	e000      	b.n	800f5d0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f5ce:	2300      	movs	r3, #0
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3714      	adds	r7, #20
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd90      	pop	{r4, r7, pc}
 800f5d8:	0801925c 	.word	0x0801925c
 800f5dc:	0801976c 	.word	0x0801976c
 800f5e0:	080192a0 	.word	0x080192a0

0800f5e4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f5ec:	e007      	b.n	800f5fe <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 f80a 	bl	800f60e <tcp_seg_free>
    seg = next;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d1f4      	bne.n	800f5ee <tcp_segs_free+0xa>
  }
}
 800f604:	bf00      	nop
 800f606:	bf00      	nop
 800f608:	3710      	adds	r7, #16
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}

0800f60e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f60e:	b580      	push	{r7, lr}
 800f610:	b082      	sub	sp, #8
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00c      	beq.n	800f636 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	685b      	ldr	r3, [r3, #4]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d004      	beq.n	800f62e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	4618      	mov	r0, r3
 800f62a:	f7fe fcdb 	bl	800dfe4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f62e:	6879      	ldr	r1, [r7, #4]
 800f630:	2003      	movs	r0, #3
 800f632:	f7fd fe61 	bl	800d2f8 <memp_free>
  }
}
 800f636:	bf00      	nop
 800f638:	3708      	adds	r7, #8
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
	...

0800f640 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b084      	sub	sp, #16
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d106      	bne.n	800f65c <tcp_seg_copy+0x1c>
 800f64e:	4b0f      	ldr	r3, [pc, #60]	; (800f68c <tcp_seg_copy+0x4c>)
 800f650:	f240 6282 	movw	r2, #1666	; 0x682
 800f654:	490e      	ldr	r1, [pc, #56]	; (800f690 <tcp_seg_copy+0x50>)
 800f656:	480f      	ldr	r0, [pc, #60]	; (800f694 <tcp_seg_copy+0x54>)
 800f658:	f008 f83e 	bl	80176d8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f65c:	2003      	movs	r0, #3
 800f65e:	f7fd fddb 	bl	800d218 <memp_malloc>
 800f662:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d101      	bne.n	800f66e <tcp_seg_copy+0x2e>
    return NULL;
 800f66a:	2300      	movs	r3, #0
 800f66c:	e00a      	b.n	800f684 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f66e:	2210      	movs	r2, #16
 800f670:	6879      	ldr	r1, [r7, #4]
 800f672:	68f8      	ldr	r0, [r7, #12]
 800f674:	f008 f81a 	bl	80176ac <memcpy>
  pbuf_ref(cseg->p);
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	685b      	ldr	r3, [r3, #4]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7fe fd51 	bl	800e124 <pbuf_ref>
  return cseg;
 800f682:	68fb      	ldr	r3, [r7, #12]
}
 800f684:	4618      	mov	r0, r3
 800f686:	3710      	adds	r7, #16
 800f688:	46bd      	mov	sp, r7
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	0801925c 	.word	0x0801925c
 800f690:	080197b0 	.word	0x080197b0
 800f694:	080192a0 	.word	0x080192a0

0800f698 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	607a      	str	r2, [r7, #4]
 800f6a4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f6a6:	68bb      	ldr	r3, [r7, #8]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d109      	bne.n	800f6c0 <tcp_recv_null+0x28>
 800f6ac:	4b12      	ldr	r3, [pc, #72]	; (800f6f8 <tcp_recv_null+0x60>)
 800f6ae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f6b2:	4912      	ldr	r1, [pc, #72]	; (800f6fc <tcp_recv_null+0x64>)
 800f6b4:	4812      	ldr	r0, [pc, #72]	; (800f700 <tcp_recv_null+0x68>)
 800f6b6:	f008 f80f 	bl	80176d8 <iprintf>
 800f6ba:	f06f 030f 	mvn.w	r3, #15
 800f6be:	e016      	b.n	800f6ee <tcp_recv_null+0x56>

  if (p != NULL) {
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d009      	beq.n	800f6da <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	891b      	ldrh	r3, [r3, #8]
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	68b8      	ldr	r0, [r7, #8]
 800f6ce:	f7ff fb19 	bl	800ed04 <tcp_recved>
    pbuf_free(p);
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f7fe fc86 	bl	800dfe4 <pbuf_free>
 800f6d8:	e008      	b.n	800f6ec <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f6da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d104      	bne.n	800f6ec <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f6e2:	68b8      	ldr	r0, [r7, #8]
 800f6e4:	f7ff f9be 	bl	800ea64 <tcp_close>
 800f6e8:	4603      	mov	r3, r0
 800f6ea:	e000      	b.n	800f6ee <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f6ec:	2300      	movs	r3, #0
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3710      	adds	r7, #16
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	0801925c 	.word	0x0801925c
 800f6fc:	080197cc 	.word	0x080197cc
 800f700:	080192a0 	.word	0x080192a0

0800f704 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b086      	sub	sp, #24
 800f708:	af00      	add	r7, sp, #0
 800f70a:	4603      	mov	r3, r0
 800f70c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f70e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f712:	2b00      	cmp	r3, #0
 800f714:	db01      	blt.n	800f71a <tcp_kill_prio+0x16>
 800f716:	79fb      	ldrb	r3, [r7, #7]
 800f718:	e000      	b.n	800f71c <tcp_kill_prio+0x18>
 800f71a:	237f      	movs	r3, #127	; 0x7f
 800f71c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f71e:	7afb      	ldrb	r3, [r7, #11]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d034      	beq.n	800f78e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f724:	7afb      	ldrb	r3, [r7, #11]
 800f726:	3b01      	subs	r3, #1
 800f728:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f72a:	2300      	movs	r3, #0
 800f72c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f72e:	2300      	movs	r3, #0
 800f730:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f732:	4b19      	ldr	r3, [pc, #100]	; (800f798 <tcp_kill_prio+0x94>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	617b      	str	r3, [r7, #20]
 800f738:	e01f      	b.n	800f77a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	7d5b      	ldrb	r3, [r3, #21]
 800f73e:	7afa      	ldrb	r2, [r7, #11]
 800f740:	429a      	cmp	r2, r3
 800f742:	d80c      	bhi.n	800f75e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f748:	7afa      	ldrb	r2, [r7, #11]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d112      	bne.n	800f774 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f74e:	4b13      	ldr	r3, [pc, #76]	; (800f79c <tcp_kill_prio+0x98>)
 800f750:	681a      	ldr	r2, [r3, #0]
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	6a1b      	ldr	r3, [r3, #32]
 800f756:	1ad3      	subs	r3, r2, r3
 800f758:	68fa      	ldr	r2, [r7, #12]
 800f75a:	429a      	cmp	r2, r3
 800f75c:	d80a      	bhi.n	800f774 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f75e:	4b0f      	ldr	r3, [pc, #60]	; (800f79c <tcp_kill_prio+0x98>)
 800f760:	681a      	ldr	r2, [r3, #0]
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	6a1b      	ldr	r3, [r3, #32]
 800f766:	1ad3      	subs	r3, r2, r3
 800f768:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	7d5b      	ldrb	r3, [r3, #21]
 800f772:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	617b      	str	r3, [r7, #20]
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1dc      	bne.n	800f73a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d004      	beq.n	800f790 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f786:	6938      	ldr	r0, [r7, #16]
 800f788:	f7ff fa56 	bl	800ec38 <tcp_abort>
 800f78c:	e000      	b.n	800f790 <tcp_kill_prio+0x8c>
    return;
 800f78e:	bf00      	nop
  }
}
 800f790:	3718      	adds	r7, #24
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop
 800f798:	20008fd4 	.word	0x20008fd4
 800f79c:	20008fc8 	.word	0x20008fc8

0800f7a0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b086      	sub	sp, #24
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f7aa:	79fb      	ldrb	r3, [r7, #7]
 800f7ac:	2b08      	cmp	r3, #8
 800f7ae:	d009      	beq.n	800f7c4 <tcp_kill_state+0x24>
 800f7b0:	79fb      	ldrb	r3, [r7, #7]
 800f7b2:	2b09      	cmp	r3, #9
 800f7b4:	d006      	beq.n	800f7c4 <tcp_kill_state+0x24>
 800f7b6:	4b1a      	ldr	r3, [pc, #104]	; (800f820 <tcp_kill_state+0x80>)
 800f7b8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f7bc:	4919      	ldr	r1, [pc, #100]	; (800f824 <tcp_kill_state+0x84>)
 800f7be:	481a      	ldr	r0, [pc, #104]	; (800f828 <tcp_kill_state+0x88>)
 800f7c0:	f007 ff8a 	bl	80176d8 <iprintf>

  inactivity = 0;
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7cc:	4b17      	ldr	r3, [pc, #92]	; (800f82c <tcp_kill_state+0x8c>)
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	617b      	str	r3, [r7, #20]
 800f7d2:	e017      	b.n	800f804 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	7d1b      	ldrb	r3, [r3, #20]
 800f7d8:	79fa      	ldrb	r2, [r7, #7]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d10f      	bne.n	800f7fe <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f7de:	4b14      	ldr	r3, [pc, #80]	; (800f830 <tcp_kill_state+0x90>)
 800f7e0:	681a      	ldr	r2, [r3, #0]
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	6a1b      	ldr	r3, [r3, #32]
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	68fa      	ldr	r2, [r7, #12]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d807      	bhi.n	800f7fe <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f7ee:	4b10      	ldr	r3, [pc, #64]	; (800f830 <tcp_kill_state+0x90>)
 800f7f0:	681a      	ldr	r2, [r3, #0]
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	6a1b      	ldr	r3, [r3, #32]
 800f7f6:	1ad3      	subs	r3, r2, r3
 800f7f8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	68db      	ldr	r3, [r3, #12]
 800f802:	617b      	str	r3, [r7, #20]
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d1e4      	bne.n	800f7d4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d003      	beq.n	800f818 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f810:	2100      	movs	r1, #0
 800f812:	6938      	ldr	r0, [r7, #16]
 800f814:	f7ff f952 	bl	800eabc <tcp_abandon>
  }
}
 800f818:	bf00      	nop
 800f81a:	3718      	adds	r7, #24
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}
 800f820:	0801925c 	.word	0x0801925c
 800f824:	080197e8 	.word	0x080197e8
 800f828:	080192a0 	.word	0x080192a0
 800f82c:	20008fd4 	.word	0x20008fd4
 800f830:	20008fc8 	.word	0x20008fc8

0800f834 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f83a:	2300      	movs	r3, #0
 800f83c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f83e:	2300      	movs	r3, #0
 800f840:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f842:	4b12      	ldr	r3, [pc, #72]	; (800f88c <tcp_kill_timewait+0x58>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	60fb      	str	r3, [r7, #12]
 800f848:	e012      	b.n	800f870 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f84a:	4b11      	ldr	r3, [pc, #68]	; (800f890 <tcp_kill_timewait+0x5c>)
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	6a1b      	ldr	r3, [r3, #32]
 800f852:	1ad3      	subs	r3, r2, r3
 800f854:	687a      	ldr	r2, [r7, #4]
 800f856:	429a      	cmp	r2, r3
 800f858:	d807      	bhi.n	800f86a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f85a:	4b0d      	ldr	r3, [pc, #52]	; (800f890 <tcp_kill_timewait+0x5c>)
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	6a1b      	ldr	r3, [r3, #32]
 800f862:	1ad3      	subs	r3, r2, r3
 800f864:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	60fb      	str	r3, [r7, #12]
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d1e9      	bne.n	800f84a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d002      	beq.n	800f882 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f87c:	68b8      	ldr	r0, [r7, #8]
 800f87e:	f7ff f9db 	bl	800ec38 <tcp_abort>
  }
}
 800f882:	bf00      	nop
 800f884:	3710      	adds	r7, #16
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	20008fd8 	.word	0x20008fd8
 800f890:	20008fc8 	.word	0x20008fc8

0800f894 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b082      	sub	sp, #8
 800f898:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f89a:	4b10      	ldr	r3, [pc, #64]	; (800f8dc <tcp_handle_closepend+0x48>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f8a0:	e014      	b.n	800f8cc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	8b5b      	ldrh	r3, [r3, #26]
 800f8ac:	f003 0308 	and.w	r3, r3, #8
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d009      	beq.n	800f8c8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	8b5b      	ldrh	r3, [r3, #26]
 800f8b8:	f023 0308 	bic.w	r3, r3, #8
 800f8bc:	b29a      	uxth	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f7ff f864 	bl	800e990 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1e7      	bne.n	800f8a2 <tcp_handle_closepend+0xe>
  }
}
 800f8d2:	bf00      	nop
 800f8d4:	bf00      	nop
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}
 800f8dc:	20008fd4 	.word	0x20008fd4

0800f8e0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b084      	sub	sp, #16
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	4603      	mov	r3, r0
 800f8e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f8ea:	2001      	movs	r0, #1
 800f8ec:	f7fd fc94 	bl	800d218 <memp_malloc>
 800f8f0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d126      	bne.n	800f946 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f8f8:	f7ff ffcc 	bl	800f894 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f8fc:	f7ff ff9a 	bl	800f834 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f900:	2001      	movs	r0, #1
 800f902:	f7fd fc89 	bl	800d218 <memp_malloc>
 800f906:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d11b      	bne.n	800f946 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f90e:	2009      	movs	r0, #9
 800f910:	f7ff ff46 	bl	800f7a0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f914:	2001      	movs	r0, #1
 800f916:	f7fd fc7f 	bl	800d218 <memp_malloc>
 800f91a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d111      	bne.n	800f946 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f922:	2008      	movs	r0, #8
 800f924:	f7ff ff3c 	bl	800f7a0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f928:	2001      	movs	r0, #1
 800f92a:	f7fd fc75 	bl	800d218 <memp_malloc>
 800f92e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d107      	bne.n	800f946 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	4618      	mov	r0, r3
 800f93a:	f7ff fee3 	bl	800f704 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f93e:	2001      	movs	r0, #1
 800f940:	f7fd fc6a 	bl	800d218 <memp_malloc>
 800f944:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d03f      	beq.n	800f9cc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f94c:	229c      	movs	r2, #156	; 0x9c
 800f94e:	2100      	movs	r1, #0
 800f950:	68f8      	ldr	r0, [r7, #12]
 800f952:	f007 feb9 	bl	80176c8 <memset>
    pcb->prio = prio;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	79fa      	ldrb	r2, [r7, #7]
 800f95a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f962:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f96c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	22ff      	movs	r2, #255	; 0xff
 800f97a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f982:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2206      	movs	r2, #6
 800f988:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2206      	movs	r2, #6
 800f990:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f998:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2201      	movs	r2, #1
 800f99e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f9a2:	4b0d      	ldr	r3, [pc, #52]	; (800f9d8 <tcp_alloc+0xf8>)
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f9aa:	4b0c      	ldr	r3, [pc, #48]	; (800f9dc <tcp_alloc+0xfc>)
 800f9ac:	781a      	ldrb	r2, [r3, #0]
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f9b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	4a08      	ldr	r2, [pc, #32]	; (800f9e0 <tcp_alloc+0x100>)
 800f9c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	4a07      	ldr	r2, [pc, #28]	; (800f9e4 <tcp_alloc+0x104>)
 800f9c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3710      	adds	r7, #16
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
 800f9d6:	bf00      	nop
 800f9d8:	20008fc8 	.word	0x20008fc8
 800f9dc:	20008fde 	.word	0x20008fde
 800f9e0:	0800f699 	.word	0x0800f699
 800f9e4:	006ddd00 	.word	0x006ddd00

0800f9e8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d107      	bne.n	800fa06 <tcp_pcb_purge+0x1e>
 800f9f6:	4b21      	ldr	r3, [pc, #132]	; (800fa7c <tcp_pcb_purge+0x94>)
 800f9f8:	f640 0251 	movw	r2, #2129	; 0x851
 800f9fc:	4920      	ldr	r1, [pc, #128]	; (800fa80 <tcp_pcb_purge+0x98>)
 800f9fe:	4821      	ldr	r0, [pc, #132]	; (800fa84 <tcp_pcb_purge+0x9c>)
 800fa00:	f007 fe6a 	bl	80176d8 <iprintf>
 800fa04:	e037      	b.n	800fa76 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	7d1b      	ldrb	r3, [r3, #20]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d033      	beq.n	800fa76 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800fa12:	2b0a      	cmp	r3, #10
 800fa14:	d02f      	beq.n	800fa76 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800fa1a:	2b01      	cmp	r3, #1
 800fa1c:	d02b      	beq.n	800fa76 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d007      	beq.n	800fa36 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7fe fada 	bl	800dfe4 <pbuf_free>
      pcb->refused_data = NULL;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2200      	movs	r2, #0
 800fa34:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d002      	beq.n	800fa44 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800fa3e:	6878      	ldr	r0, [r7, #4]
 800fa40:	f000 f986 	bl	800fd50 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa4a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7ff fdc7 	bl	800f5e4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7ff fdc2 	bl	800f5e4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	66da      	str	r2, [r3, #108]	; 0x6c
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2200      	movs	r2, #0
 800fa72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fa76:	3708      	adds	r7, #8
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	0801925c 	.word	0x0801925c
 800fa80:	080198a8 	.word	0x080198a8
 800fa84:	080192a0 	.word	0x080192a0

0800fa88 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d106      	bne.n	800faa6 <tcp_pcb_remove+0x1e>
 800fa98:	4b3e      	ldr	r3, [pc, #248]	; (800fb94 <tcp_pcb_remove+0x10c>)
 800fa9a:	f640 0283 	movw	r2, #2179	; 0x883
 800fa9e:	493e      	ldr	r1, [pc, #248]	; (800fb98 <tcp_pcb_remove+0x110>)
 800faa0:	483e      	ldr	r0, [pc, #248]	; (800fb9c <tcp_pcb_remove+0x114>)
 800faa2:	f007 fe19 	bl	80176d8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d106      	bne.n	800faba <tcp_pcb_remove+0x32>
 800faac:	4b39      	ldr	r3, [pc, #228]	; (800fb94 <tcp_pcb_remove+0x10c>)
 800faae:	f640 0284 	movw	r2, #2180	; 0x884
 800fab2:	493b      	ldr	r1, [pc, #236]	; (800fba0 <tcp_pcb_remove+0x118>)
 800fab4:	4839      	ldr	r0, [pc, #228]	; (800fb9c <tcp_pcb_remove+0x114>)
 800fab6:	f007 fe0f 	bl	80176d8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	683a      	ldr	r2, [r7, #0]
 800fac0:	429a      	cmp	r2, r3
 800fac2:	d105      	bne.n	800fad0 <tcp_pcb_remove+0x48>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	68da      	ldr	r2, [r3, #12]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	601a      	str	r2, [r3, #0]
 800face:	e013      	b.n	800faf8 <tcp_pcb_remove+0x70>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	60fb      	str	r3, [r7, #12]
 800fad6:	e00c      	b.n	800faf2 <tcp_pcb_remove+0x6a>
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	68db      	ldr	r3, [r3, #12]
 800fadc:	683a      	ldr	r2, [r7, #0]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d104      	bne.n	800faec <tcp_pcb_remove+0x64>
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	68da      	ldr	r2, [r3, #12]
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	60da      	str	r2, [r3, #12]
 800faea:	e005      	b.n	800faf8 <tcp_pcb_remove+0x70>
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	60fb      	str	r3, [r7, #12]
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d1ef      	bne.n	800fad8 <tcp_pcb_remove+0x50>
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	2200      	movs	r2, #0
 800fafc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fafe:	6838      	ldr	r0, [r7, #0]
 800fb00:	f7ff ff72 	bl	800f9e8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fb04:	683b      	ldr	r3, [r7, #0]
 800fb06:	7d1b      	ldrb	r3, [r3, #20]
 800fb08:	2b0a      	cmp	r3, #10
 800fb0a:	d013      	beq.n	800fb34 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800fb10:	2b01      	cmp	r3, #1
 800fb12:	d00f      	beq.n	800fb34 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800fb14:	683b      	ldr	r3, [r7, #0]
 800fb16:	8b5b      	ldrh	r3, [r3, #26]
 800fb18:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d009      	beq.n	800fb34 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	8b5b      	ldrh	r3, [r3, #26]
 800fb24:	f043 0302 	orr.w	r3, r3, #2
 800fb28:	b29a      	uxth	r2, r3
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fb2e:	6838      	ldr	r0, [r7, #0]
 800fb30:	f002 ff6e 	bl	8012a10 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	7d1b      	ldrb	r3, [r3, #20]
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	d020      	beq.n	800fb7e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d006      	beq.n	800fb52 <tcp_pcb_remove+0xca>
 800fb44:	4b13      	ldr	r3, [pc, #76]	; (800fb94 <tcp_pcb_remove+0x10c>)
 800fb46:	f640 0293 	movw	r2, #2195	; 0x893
 800fb4a:	4916      	ldr	r1, [pc, #88]	; (800fba4 <tcp_pcb_remove+0x11c>)
 800fb4c:	4813      	ldr	r0, [pc, #76]	; (800fb9c <tcp_pcb_remove+0x114>)
 800fb4e:	f007 fdc3 	bl	80176d8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d006      	beq.n	800fb68 <tcp_pcb_remove+0xe0>
 800fb5a:	4b0e      	ldr	r3, [pc, #56]	; (800fb94 <tcp_pcb_remove+0x10c>)
 800fb5c:	f640 0294 	movw	r2, #2196	; 0x894
 800fb60:	4911      	ldr	r1, [pc, #68]	; (800fba8 <tcp_pcb_remove+0x120>)
 800fb62:	480e      	ldr	r0, [pc, #56]	; (800fb9c <tcp_pcb_remove+0x114>)
 800fb64:	f007 fdb8 	bl	80176d8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d006      	beq.n	800fb7e <tcp_pcb_remove+0xf6>
 800fb70:	4b08      	ldr	r3, [pc, #32]	; (800fb94 <tcp_pcb_remove+0x10c>)
 800fb72:	f640 0296 	movw	r2, #2198	; 0x896
 800fb76:	490d      	ldr	r1, [pc, #52]	; (800fbac <tcp_pcb_remove+0x124>)
 800fb78:	4808      	ldr	r0, [pc, #32]	; (800fb9c <tcp_pcb_remove+0x114>)
 800fb7a:	f007 fdad 	bl	80176d8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	2200      	movs	r2, #0
 800fb82:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	2200      	movs	r2, #0
 800fb88:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fb8a:	bf00      	nop
 800fb8c:	3710      	adds	r7, #16
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	bd80      	pop	{r7, pc}
 800fb92:	bf00      	nop
 800fb94:	0801925c 	.word	0x0801925c
 800fb98:	080198c4 	.word	0x080198c4
 800fb9c:	080192a0 	.word	0x080192a0
 800fba0:	080198e0 	.word	0x080198e0
 800fba4:	08019900 	.word	0x08019900
 800fba8:	08019918 	.word	0x08019918
 800fbac:	08019934 	.word	0x08019934

0800fbb0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d106      	bne.n	800fbcc <tcp_next_iss+0x1c>
 800fbbe:	4b0a      	ldr	r3, [pc, #40]	; (800fbe8 <tcp_next_iss+0x38>)
 800fbc0:	f640 02af 	movw	r2, #2223	; 0x8af
 800fbc4:	4909      	ldr	r1, [pc, #36]	; (800fbec <tcp_next_iss+0x3c>)
 800fbc6:	480a      	ldr	r0, [pc, #40]	; (800fbf0 <tcp_next_iss+0x40>)
 800fbc8:	f007 fd86 	bl	80176d8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fbcc:	4b09      	ldr	r3, [pc, #36]	; (800fbf4 <tcp_next_iss+0x44>)
 800fbce:	681a      	ldr	r2, [r3, #0]
 800fbd0:	4b09      	ldr	r3, [pc, #36]	; (800fbf8 <tcp_next_iss+0x48>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	4a07      	ldr	r2, [pc, #28]	; (800fbf4 <tcp_next_iss+0x44>)
 800fbd8:	6013      	str	r3, [r2, #0]
  return iss;
 800fbda:	4b06      	ldr	r3, [pc, #24]	; (800fbf4 <tcp_next_iss+0x44>)
 800fbdc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	3708      	adds	r7, #8
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	bd80      	pop	{r7, pc}
 800fbe6:	bf00      	nop
 800fbe8:	0801925c 	.word	0x0801925c
 800fbec:	0801994c 	.word	0x0801994c
 800fbf0:	080192a0 	.word	0x080192a0
 800fbf4:	20000024 	.word	0x20000024
 800fbf8:	20008fc8 	.word	0x20008fc8

0800fbfc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b086      	sub	sp, #24
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	4603      	mov	r3, r0
 800fc04:	60b9      	str	r1, [r7, #8]
 800fc06:	607a      	str	r2, [r7, #4]
 800fc08:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d106      	bne.n	800fc1e <tcp_eff_send_mss_netif+0x22>
 800fc10:	4b14      	ldr	r3, [pc, #80]	; (800fc64 <tcp_eff_send_mss_netif+0x68>)
 800fc12:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fc16:	4914      	ldr	r1, [pc, #80]	; (800fc68 <tcp_eff_send_mss_netif+0x6c>)
 800fc18:	4814      	ldr	r0, [pc, #80]	; (800fc6c <tcp_eff_send_mss_netif+0x70>)
 800fc1a:	f007 fd5d 	bl	80176d8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d101      	bne.n	800fc28 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fc24:	89fb      	ldrh	r3, [r7, #14]
 800fc26:	e019      	b.n	800fc5c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800fc2c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fc2e:	8afb      	ldrh	r3, [r7, #22]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d012      	beq.n	800fc5a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fc34:	2328      	movs	r3, #40	; 0x28
 800fc36:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fc38:	8afa      	ldrh	r2, [r7, #22]
 800fc3a:	8abb      	ldrh	r3, [r7, #20]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d904      	bls.n	800fc4a <tcp_eff_send_mss_netif+0x4e>
 800fc40:	8afa      	ldrh	r2, [r7, #22]
 800fc42:	8abb      	ldrh	r3, [r7, #20]
 800fc44:	1ad3      	subs	r3, r2, r3
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	e000      	b.n	800fc4c <tcp_eff_send_mss_netif+0x50>
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fc4e:	8a7a      	ldrh	r2, [r7, #18]
 800fc50:	89fb      	ldrh	r3, [r7, #14]
 800fc52:	4293      	cmp	r3, r2
 800fc54:	bf28      	it	cs
 800fc56:	4613      	movcs	r3, r2
 800fc58:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fc5a:	89fb      	ldrh	r3, [r7, #14]
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3718      	adds	r7, #24
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	0801925c 	.word	0x0801925c
 800fc68:	08019968 	.word	0x08019968
 800fc6c:	080192a0 	.word	0x080192a0

0800fc70 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b084      	sub	sp, #16
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fc7a:	683b      	ldr	r3, [r7, #0]
 800fc7c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d119      	bne.n	800fcb8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fc84:	4b10      	ldr	r3, [pc, #64]	; (800fcc8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fc86:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fc8a:	4910      	ldr	r1, [pc, #64]	; (800fccc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fc8c:	4810      	ldr	r0, [pc, #64]	; (800fcd0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fc8e:	f007 fd23 	bl	80176d8 <iprintf>

  while (pcb != NULL) {
 800fc92:	e011      	b.n	800fcb8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	d108      	bne.n	800fcb2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	68db      	ldr	r3, [r3, #12]
 800fca4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fca6:	68f8      	ldr	r0, [r7, #12]
 800fca8:	f7fe ffc6 	bl	800ec38 <tcp_abort>
      pcb = next;
 800fcac:	68bb      	ldr	r3, [r7, #8]
 800fcae:	60fb      	str	r3, [r7, #12]
 800fcb0:	e002      	b.n	800fcb8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	68db      	ldr	r3, [r3, #12]
 800fcb6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d1ea      	bne.n	800fc94 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fcbe:	bf00      	nop
 800fcc0:	bf00      	nop
 800fcc2:	3710      	adds	r7, #16
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	0801925c 	.word	0x0801925c
 800fccc:	08019990 	.word	0x08019990
 800fcd0:	080192a0 	.word	0x080192a0

0800fcd4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b084      	sub	sp, #16
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
 800fcdc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d02a      	beq.n	800fd3a <tcp_netif_ip_addr_changed+0x66>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d026      	beq.n	800fd3a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fcec:	4b15      	ldr	r3, [pc, #84]	; (800fd44 <tcp_netif_ip_addr_changed+0x70>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	4619      	mov	r1, r3
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f7ff ffbc 	bl	800fc70 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fcf8:	4b13      	ldr	r3, [pc, #76]	; (800fd48 <tcp_netif_ip_addr_changed+0x74>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f7ff ffb6 	bl	800fc70 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fd04:	683b      	ldr	r3, [r7, #0]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d017      	beq.n	800fd3a <tcp_netif_ip_addr_changed+0x66>
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d013      	beq.n	800fd3a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fd12:	4b0e      	ldr	r3, [pc, #56]	; (800fd4c <tcp_netif_ip_addr_changed+0x78>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	60fb      	str	r3, [r7, #12]
 800fd18:	e00c      	b.n	800fd34 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d103      	bne.n	800fd2e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	681a      	ldr	r2, [r3, #0]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	68db      	ldr	r3, [r3, #12]
 800fd32:	60fb      	str	r3, [r7, #12]
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d1ef      	bne.n	800fd1a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fd3a:	bf00      	nop
 800fd3c:	3710      	adds	r7, #16
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}
 800fd42:	bf00      	nop
 800fd44:	20008fd4 	.word	0x20008fd4
 800fd48:	20008fcc 	.word	0x20008fcc
 800fd4c:	20008fd0 	.word	0x20008fd0

0800fd50 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b082      	sub	sp, #8
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d007      	beq.n	800fd70 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7ff fc3d 	bl	800f5e4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2200      	movs	r2, #0
 800fd6e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fd70:	bf00      	nop
 800fd72:	3708      	adds	r7, #8
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}

0800fd78 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fd78:	b590      	push	{r4, r7, lr}
 800fd7a:	b08d      	sub	sp, #52	; 0x34
 800fd7c:	af04      	add	r7, sp, #16
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d105      	bne.n	800fd94 <tcp_input+0x1c>
 800fd88:	4b9b      	ldr	r3, [pc, #620]	; (800fff8 <tcp_input+0x280>)
 800fd8a:	2283      	movs	r2, #131	; 0x83
 800fd8c:	499b      	ldr	r1, [pc, #620]	; (800fffc <tcp_input+0x284>)
 800fd8e:	489c      	ldr	r0, [pc, #624]	; (8010000 <tcp_input+0x288>)
 800fd90:	f007 fca2 	bl	80176d8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	4a9a      	ldr	r2, [pc, #616]	; (8010004 <tcp_input+0x28c>)
 800fd9a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	895b      	ldrh	r3, [r3, #10]
 800fda0:	2b13      	cmp	r3, #19
 800fda2:	f240 83d1 	bls.w	8010548 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fda6:	4b98      	ldr	r3, [pc, #608]	; (8010008 <tcp_input+0x290>)
 800fda8:	695b      	ldr	r3, [r3, #20]
 800fdaa:	4a97      	ldr	r2, [pc, #604]	; (8010008 <tcp_input+0x290>)
 800fdac:	6812      	ldr	r2, [r2, #0]
 800fdae:	4611      	mov	r1, r2
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f005 ffa9 	bl	8015d08 <ip4_addr_isbroadcast_u32>
 800fdb6:	4603      	mov	r3, r0
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	f040 83c7 	bne.w	801054c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fdbe:	4b92      	ldr	r3, [pc, #584]	; (8010008 <tcp_input+0x290>)
 800fdc0:	695b      	ldr	r3, [r3, #20]
 800fdc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fdc6:	2be0      	cmp	r3, #224	; 0xe0
 800fdc8:	f000 83c0 	beq.w	801054c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fdcc:	4b8d      	ldr	r3, [pc, #564]	; (8010004 <tcp_input+0x28c>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	899b      	ldrh	r3, [r3, #12]
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7fc fda7 	bl	800c928 <lwip_htons>
 800fdda:	4603      	mov	r3, r0
 800fddc:	0b1b      	lsrs	r3, r3, #12
 800fdde:	b29b      	uxth	r3, r3
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fde6:	7cbb      	ldrb	r3, [r7, #18]
 800fde8:	2b13      	cmp	r3, #19
 800fdea:	f240 83b1 	bls.w	8010550 <tcp_input+0x7d8>
 800fdee:	7cbb      	ldrb	r3, [r7, #18]
 800fdf0:	b29a      	uxth	r2, r3
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	891b      	ldrh	r3, [r3, #8]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	f200 83aa 	bhi.w	8010550 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fdfc:	7cbb      	ldrb	r3, [r7, #18]
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	3b14      	subs	r3, #20
 800fe02:	b29a      	uxth	r2, r3
 800fe04:	4b81      	ldr	r3, [pc, #516]	; (801000c <tcp_input+0x294>)
 800fe06:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fe08:	4b81      	ldr	r3, [pc, #516]	; (8010010 <tcp_input+0x298>)
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	895a      	ldrh	r2, [r3, #10]
 800fe12:	7cbb      	ldrb	r3, [r7, #18]
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d309      	bcc.n	800fe2e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fe1a:	4b7c      	ldr	r3, [pc, #496]	; (801000c <tcp_input+0x294>)
 800fe1c:	881a      	ldrh	r2, [r3, #0]
 800fe1e:	4b7d      	ldr	r3, [pc, #500]	; (8010014 <tcp_input+0x29c>)
 800fe20:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fe22:	7cbb      	ldrb	r3, [r7, #18]
 800fe24:	4619      	mov	r1, r3
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f7fe f856 	bl	800ded8 <pbuf_remove_header>
 800fe2c:	e04e      	b.n	800fecc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d105      	bne.n	800fe42 <tcp_input+0xca>
 800fe36:	4b70      	ldr	r3, [pc, #448]	; (800fff8 <tcp_input+0x280>)
 800fe38:	22c2      	movs	r2, #194	; 0xc2
 800fe3a:	4977      	ldr	r1, [pc, #476]	; (8010018 <tcp_input+0x2a0>)
 800fe3c:	4870      	ldr	r0, [pc, #448]	; (8010000 <tcp_input+0x288>)
 800fe3e:	f007 fc4b 	bl	80176d8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fe42:	2114      	movs	r1, #20
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f7fe f847 	bl	800ded8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	895a      	ldrh	r2, [r3, #10]
 800fe4e:	4b71      	ldr	r3, [pc, #452]	; (8010014 <tcp_input+0x29c>)
 800fe50:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fe52:	4b6e      	ldr	r3, [pc, #440]	; (801000c <tcp_input+0x294>)
 800fe54:	881a      	ldrh	r2, [r3, #0]
 800fe56:	4b6f      	ldr	r3, [pc, #444]	; (8010014 <tcp_input+0x29c>)
 800fe58:	881b      	ldrh	r3, [r3, #0]
 800fe5a:	1ad3      	subs	r3, r2, r3
 800fe5c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fe5e:	4b6d      	ldr	r3, [pc, #436]	; (8010014 <tcp_input+0x29c>)
 800fe60:	881b      	ldrh	r3, [r3, #0]
 800fe62:	4619      	mov	r1, r3
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7fe f837 	bl	800ded8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	895b      	ldrh	r3, [r3, #10]
 800fe70:	8a3a      	ldrh	r2, [r7, #16]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	f200 836e 	bhi.w	8010554 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	4a64      	ldr	r2, [pc, #400]	; (8010010 <tcp_input+0x298>)
 800fe80:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	8a3a      	ldrh	r2, [r7, #16]
 800fe88:	4611      	mov	r1, r2
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f7fe f824 	bl	800ded8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	891a      	ldrh	r2, [r3, #8]
 800fe94:	8a3b      	ldrh	r3, [r7, #16]
 800fe96:	1ad3      	subs	r3, r2, r3
 800fe98:	b29a      	uxth	r2, r3
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	895b      	ldrh	r3, [r3, #10]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d005      	beq.n	800feb2 <tcp_input+0x13a>
 800fea6:	4b54      	ldr	r3, [pc, #336]	; (800fff8 <tcp_input+0x280>)
 800fea8:	22df      	movs	r2, #223	; 0xdf
 800feaa:	495c      	ldr	r1, [pc, #368]	; (801001c <tcp_input+0x2a4>)
 800feac:	4854      	ldr	r0, [pc, #336]	; (8010000 <tcp_input+0x288>)
 800feae:	f007 fc13 	bl	80176d8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	891a      	ldrh	r2, [r3, #8]
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	891b      	ldrh	r3, [r3, #8]
 800febc:	429a      	cmp	r2, r3
 800febe:	d005      	beq.n	800fecc <tcp_input+0x154>
 800fec0:	4b4d      	ldr	r3, [pc, #308]	; (800fff8 <tcp_input+0x280>)
 800fec2:	22e0      	movs	r2, #224	; 0xe0
 800fec4:	4956      	ldr	r1, [pc, #344]	; (8010020 <tcp_input+0x2a8>)
 800fec6:	484e      	ldr	r0, [pc, #312]	; (8010000 <tcp_input+0x288>)
 800fec8:	f007 fc06 	bl	80176d8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fecc:	4b4d      	ldr	r3, [pc, #308]	; (8010004 <tcp_input+0x28c>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	881b      	ldrh	r3, [r3, #0]
 800fed2:	b29b      	uxth	r3, r3
 800fed4:	4a4b      	ldr	r2, [pc, #300]	; (8010004 <tcp_input+0x28c>)
 800fed6:	6814      	ldr	r4, [r2, #0]
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fc fd25 	bl	800c928 <lwip_htons>
 800fede:	4603      	mov	r3, r0
 800fee0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fee2:	4b48      	ldr	r3, [pc, #288]	; (8010004 <tcp_input+0x28c>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	885b      	ldrh	r3, [r3, #2]
 800fee8:	b29b      	uxth	r3, r3
 800feea:	4a46      	ldr	r2, [pc, #280]	; (8010004 <tcp_input+0x28c>)
 800feec:	6814      	ldr	r4, [r2, #0]
 800feee:	4618      	mov	r0, r3
 800fef0:	f7fc fd1a 	bl	800c928 <lwip_htons>
 800fef4:	4603      	mov	r3, r0
 800fef6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fef8:	4b42      	ldr	r3, [pc, #264]	; (8010004 <tcp_input+0x28c>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	4a41      	ldr	r2, [pc, #260]	; (8010004 <tcp_input+0x28c>)
 800ff00:	6814      	ldr	r4, [r2, #0]
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fc fd25 	bl	800c952 <lwip_htonl>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	6063      	str	r3, [r4, #4]
 800ff0c:	6863      	ldr	r3, [r4, #4]
 800ff0e:	4a45      	ldr	r2, [pc, #276]	; (8010024 <tcp_input+0x2ac>)
 800ff10:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ff12:	4b3c      	ldr	r3, [pc, #240]	; (8010004 <tcp_input+0x28c>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	689b      	ldr	r3, [r3, #8]
 800ff18:	4a3a      	ldr	r2, [pc, #232]	; (8010004 <tcp_input+0x28c>)
 800ff1a:	6814      	ldr	r4, [r2, #0]
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	f7fc fd18 	bl	800c952 <lwip_htonl>
 800ff22:	4603      	mov	r3, r0
 800ff24:	60a3      	str	r3, [r4, #8]
 800ff26:	68a3      	ldr	r3, [r4, #8]
 800ff28:	4a3f      	ldr	r2, [pc, #252]	; (8010028 <tcp_input+0x2b0>)
 800ff2a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ff2c:	4b35      	ldr	r3, [pc, #212]	; (8010004 <tcp_input+0x28c>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	89db      	ldrh	r3, [r3, #14]
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	4a33      	ldr	r2, [pc, #204]	; (8010004 <tcp_input+0x28c>)
 800ff36:	6814      	ldr	r4, [r2, #0]
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7fc fcf5 	bl	800c928 <lwip_htons>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ff42:	4b30      	ldr	r3, [pc, #192]	; (8010004 <tcp_input+0x28c>)
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	899b      	ldrh	r3, [r3, #12]
 800ff48:	b29b      	uxth	r3, r3
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7fc fcec 	bl	800c928 <lwip_htons>
 800ff50:	4603      	mov	r3, r0
 800ff52:	b2db      	uxtb	r3, r3
 800ff54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ff58:	b2da      	uxtb	r2, r3
 800ff5a:	4b34      	ldr	r3, [pc, #208]	; (801002c <tcp_input+0x2b4>)
 800ff5c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	891a      	ldrh	r2, [r3, #8]
 800ff62:	4b33      	ldr	r3, [pc, #204]	; (8010030 <tcp_input+0x2b8>)
 800ff64:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ff66:	4b31      	ldr	r3, [pc, #196]	; (801002c <tcp_input+0x2b4>)
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	f003 0303 	and.w	r3, r3, #3
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d00c      	beq.n	800ff8c <tcp_input+0x214>
    tcplen++;
 800ff72:	4b2f      	ldr	r3, [pc, #188]	; (8010030 <tcp_input+0x2b8>)
 800ff74:	881b      	ldrh	r3, [r3, #0]
 800ff76:	3301      	adds	r3, #1
 800ff78:	b29a      	uxth	r2, r3
 800ff7a:	4b2d      	ldr	r3, [pc, #180]	; (8010030 <tcp_input+0x2b8>)
 800ff7c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	891a      	ldrh	r2, [r3, #8]
 800ff82:	4b2b      	ldr	r3, [pc, #172]	; (8010030 <tcp_input+0x2b8>)
 800ff84:	881b      	ldrh	r3, [r3, #0]
 800ff86:	429a      	cmp	r2, r3
 800ff88:	f200 82e6 	bhi.w	8010558 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff90:	4b28      	ldr	r3, [pc, #160]	; (8010034 <tcp_input+0x2bc>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	61fb      	str	r3, [r7, #28]
 800ff96:	e09d      	b.n	80100d4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ff98:	69fb      	ldr	r3, [r7, #28]
 800ff9a:	7d1b      	ldrb	r3, [r3, #20]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d105      	bne.n	800ffac <tcp_input+0x234>
 800ffa0:	4b15      	ldr	r3, [pc, #84]	; (800fff8 <tcp_input+0x280>)
 800ffa2:	22fb      	movs	r2, #251	; 0xfb
 800ffa4:	4924      	ldr	r1, [pc, #144]	; (8010038 <tcp_input+0x2c0>)
 800ffa6:	4816      	ldr	r0, [pc, #88]	; (8010000 <tcp_input+0x288>)
 800ffa8:	f007 fb96 	bl	80176d8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	7d1b      	ldrb	r3, [r3, #20]
 800ffb0:	2b0a      	cmp	r3, #10
 800ffb2:	d105      	bne.n	800ffc0 <tcp_input+0x248>
 800ffb4:	4b10      	ldr	r3, [pc, #64]	; (800fff8 <tcp_input+0x280>)
 800ffb6:	22fc      	movs	r2, #252	; 0xfc
 800ffb8:	4920      	ldr	r1, [pc, #128]	; (801003c <tcp_input+0x2c4>)
 800ffba:	4811      	ldr	r0, [pc, #68]	; (8010000 <tcp_input+0x288>)
 800ffbc:	f007 fb8c 	bl	80176d8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ffc0:	69fb      	ldr	r3, [r7, #28]
 800ffc2:	7d1b      	ldrb	r3, [r3, #20]
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d105      	bne.n	800ffd4 <tcp_input+0x25c>
 800ffc8:	4b0b      	ldr	r3, [pc, #44]	; (800fff8 <tcp_input+0x280>)
 800ffca:	22fd      	movs	r2, #253	; 0xfd
 800ffcc:	491c      	ldr	r1, [pc, #112]	; (8010040 <tcp_input+0x2c8>)
 800ffce:	480c      	ldr	r0, [pc, #48]	; (8010000 <tcp_input+0x288>)
 800ffd0:	f007 fb82 	bl	80176d8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	7a1b      	ldrb	r3, [r3, #8]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d033      	beq.n	8010044 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ffdc:	69fb      	ldr	r3, [r7, #28]
 800ffde:	7a1a      	ldrb	r2, [r3, #8]
 800ffe0:	4b09      	ldr	r3, [pc, #36]	; (8010008 <tcp_input+0x290>)
 800ffe2:	685b      	ldr	r3, [r3, #4]
 800ffe4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffe8:	3301      	adds	r3, #1
 800ffea:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d029      	beq.n	8010044 <tcp_input+0x2cc>
      prev = pcb;
 800fff0:	69fb      	ldr	r3, [r7, #28]
 800fff2:	61bb      	str	r3, [r7, #24]
      continue;
 800fff4:	e06b      	b.n	80100ce <tcp_input+0x356>
 800fff6:	bf00      	nop
 800fff8:	080199c4 	.word	0x080199c4
 800fffc:	080199f8 	.word	0x080199f8
 8010000:	08019a10 	.word	0x08019a10
 8010004:	20008ff0 	.word	0x20008ff0
 8010008:	20005a58 	.word	0x20005a58
 801000c:	20008ff4 	.word	0x20008ff4
 8010010:	20008ff8 	.word	0x20008ff8
 8010014:	20008ff6 	.word	0x20008ff6
 8010018:	08019a38 	.word	0x08019a38
 801001c:	08019a48 	.word	0x08019a48
 8010020:	08019a54 	.word	0x08019a54
 8010024:	20009000 	.word	0x20009000
 8010028:	20009004 	.word	0x20009004
 801002c:	2000900c 	.word	0x2000900c
 8010030:	2000900a 	.word	0x2000900a
 8010034:	20008fd4 	.word	0x20008fd4
 8010038:	08019a74 	.word	0x08019a74
 801003c:	08019a9c 	.word	0x08019a9c
 8010040:	08019ac8 	.word	0x08019ac8
    }

    if (pcb->remote_port == tcphdr->src &&
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	8b1a      	ldrh	r2, [r3, #24]
 8010048:	4b72      	ldr	r3, [pc, #456]	; (8010214 <tcp_input+0x49c>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	881b      	ldrh	r3, [r3, #0]
 801004e:	b29b      	uxth	r3, r3
 8010050:	429a      	cmp	r2, r3
 8010052:	d13a      	bne.n	80100ca <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	8ada      	ldrh	r2, [r3, #22]
 8010058:	4b6e      	ldr	r3, [pc, #440]	; (8010214 <tcp_input+0x49c>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	885b      	ldrh	r3, [r3, #2]
 801005e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010060:	429a      	cmp	r2, r3
 8010062:	d132      	bne.n	80100ca <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010064:	69fb      	ldr	r3, [r7, #28]
 8010066:	685a      	ldr	r2, [r3, #4]
 8010068:	4b6b      	ldr	r3, [pc, #428]	; (8010218 <tcp_input+0x4a0>)
 801006a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801006c:	429a      	cmp	r2, r3
 801006e:	d12c      	bne.n	80100ca <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	4b68      	ldr	r3, [pc, #416]	; (8010218 <tcp_input+0x4a0>)
 8010076:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010078:	429a      	cmp	r2, r3
 801007a:	d126      	bne.n	80100ca <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801007c:	69fb      	ldr	r3, [r7, #28]
 801007e:	68db      	ldr	r3, [r3, #12]
 8010080:	69fa      	ldr	r2, [r7, #28]
 8010082:	429a      	cmp	r2, r3
 8010084:	d106      	bne.n	8010094 <tcp_input+0x31c>
 8010086:	4b65      	ldr	r3, [pc, #404]	; (801021c <tcp_input+0x4a4>)
 8010088:	f240 120d 	movw	r2, #269	; 0x10d
 801008c:	4964      	ldr	r1, [pc, #400]	; (8010220 <tcp_input+0x4a8>)
 801008e:	4865      	ldr	r0, [pc, #404]	; (8010224 <tcp_input+0x4ac>)
 8010090:	f007 fb22 	bl	80176d8 <iprintf>
      if (prev != NULL) {
 8010094:	69bb      	ldr	r3, [r7, #24]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d00a      	beq.n	80100b0 <tcp_input+0x338>
        prev->next = pcb->next;
 801009a:	69fb      	ldr	r3, [r7, #28]
 801009c:	68da      	ldr	r2, [r3, #12]
 801009e:	69bb      	ldr	r3, [r7, #24]
 80100a0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80100a2:	4b61      	ldr	r3, [pc, #388]	; (8010228 <tcp_input+0x4b0>)
 80100a4:	681a      	ldr	r2, [r3, #0]
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80100aa:	4a5f      	ldr	r2, [pc, #380]	; (8010228 <tcp_input+0x4b0>)
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80100b0:	69fb      	ldr	r3, [r7, #28]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	69fa      	ldr	r2, [r7, #28]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d111      	bne.n	80100de <tcp_input+0x366>
 80100ba:	4b58      	ldr	r3, [pc, #352]	; (801021c <tcp_input+0x4a4>)
 80100bc:	f240 1215 	movw	r2, #277	; 0x115
 80100c0:	495a      	ldr	r1, [pc, #360]	; (801022c <tcp_input+0x4b4>)
 80100c2:	4858      	ldr	r0, [pc, #352]	; (8010224 <tcp_input+0x4ac>)
 80100c4:	f007 fb08 	bl	80176d8 <iprintf>
      break;
 80100c8:	e009      	b.n	80100de <tcp_input+0x366>
    }
    prev = pcb;
 80100ca:	69fb      	ldr	r3, [r7, #28]
 80100cc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80100ce:	69fb      	ldr	r3, [r7, #28]
 80100d0:	68db      	ldr	r3, [r3, #12]
 80100d2:	61fb      	str	r3, [r7, #28]
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f47f af5e 	bne.w	800ff98 <tcp_input+0x220>
 80100dc:	e000      	b.n	80100e0 <tcp_input+0x368>
      break;
 80100de:	bf00      	nop
  }

  if (pcb == NULL) {
 80100e0:	69fb      	ldr	r3, [r7, #28]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	f040 80aa 	bne.w	801023c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100e8:	4b51      	ldr	r3, [pc, #324]	; (8010230 <tcp_input+0x4b8>)
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	61fb      	str	r3, [r7, #28]
 80100ee:	e03f      	b.n	8010170 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80100f0:	69fb      	ldr	r3, [r7, #28]
 80100f2:	7d1b      	ldrb	r3, [r3, #20]
 80100f4:	2b0a      	cmp	r3, #10
 80100f6:	d006      	beq.n	8010106 <tcp_input+0x38e>
 80100f8:	4b48      	ldr	r3, [pc, #288]	; (801021c <tcp_input+0x4a4>)
 80100fa:	f240 121f 	movw	r2, #287	; 0x11f
 80100fe:	494d      	ldr	r1, [pc, #308]	; (8010234 <tcp_input+0x4bc>)
 8010100:	4848      	ldr	r0, [pc, #288]	; (8010224 <tcp_input+0x4ac>)
 8010102:	f007 fae9 	bl	80176d8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	7a1b      	ldrb	r3, [r3, #8]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d009      	beq.n	8010122 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	7a1a      	ldrb	r2, [r3, #8]
 8010112:	4b41      	ldr	r3, [pc, #260]	; (8010218 <tcp_input+0x4a0>)
 8010114:	685b      	ldr	r3, [r3, #4]
 8010116:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801011a:	3301      	adds	r3, #1
 801011c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801011e:	429a      	cmp	r2, r3
 8010120:	d122      	bne.n	8010168 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	8b1a      	ldrh	r2, [r3, #24]
 8010126:	4b3b      	ldr	r3, [pc, #236]	; (8010214 <tcp_input+0x49c>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	881b      	ldrh	r3, [r3, #0]
 801012c:	b29b      	uxth	r3, r3
 801012e:	429a      	cmp	r2, r3
 8010130:	d11b      	bne.n	801016a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010132:	69fb      	ldr	r3, [r7, #28]
 8010134:	8ada      	ldrh	r2, [r3, #22]
 8010136:	4b37      	ldr	r3, [pc, #220]	; (8010214 <tcp_input+0x49c>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	885b      	ldrh	r3, [r3, #2]
 801013c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801013e:	429a      	cmp	r2, r3
 8010140:	d113      	bne.n	801016a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	685a      	ldr	r2, [r3, #4]
 8010146:	4b34      	ldr	r3, [pc, #208]	; (8010218 <tcp_input+0x4a0>)
 8010148:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801014a:	429a      	cmp	r2, r3
 801014c:	d10d      	bne.n	801016a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	681a      	ldr	r2, [r3, #0]
 8010152:	4b31      	ldr	r3, [pc, #196]	; (8010218 <tcp_input+0x4a0>)
 8010154:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010156:	429a      	cmp	r2, r3
 8010158:	d107      	bne.n	801016a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801015a:	69f8      	ldr	r0, [r7, #28]
 801015c:	f000 fb56 	bl	801080c <tcp_timewait_input>
        }
        pbuf_free(p);
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f7fd ff3f 	bl	800dfe4 <pbuf_free>
        return;
 8010166:	e1fd      	b.n	8010564 <tcp_input+0x7ec>
        continue;
 8010168:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	68db      	ldr	r3, [r3, #12]
 801016e:	61fb      	str	r3, [r7, #28]
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1bc      	bne.n	80100f0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010176:	2300      	movs	r3, #0
 8010178:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801017a:	4b2f      	ldr	r3, [pc, #188]	; (8010238 <tcp_input+0x4c0>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	617b      	str	r3, [r7, #20]
 8010180:	e02a      	b.n	80101d8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	7a1b      	ldrb	r3, [r3, #8]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d00c      	beq.n	80101a4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801018a:	697b      	ldr	r3, [r7, #20]
 801018c:	7a1a      	ldrb	r2, [r3, #8]
 801018e:	4b22      	ldr	r3, [pc, #136]	; (8010218 <tcp_input+0x4a0>)
 8010190:	685b      	ldr	r3, [r3, #4]
 8010192:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010196:	3301      	adds	r3, #1
 8010198:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801019a:	429a      	cmp	r2, r3
 801019c:	d002      	beq.n	80101a4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	61bb      	str	r3, [r7, #24]
        continue;
 80101a2:	e016      	b.n	80101d2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	8ada      	ldrh	r2, [r3, #22]
 80101a8:	4b1a      	ldr	r3, [pc, #104]	; (8010214 <tcp_input+0x49c>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	885b      	ldrh	r3, [r3, #2]
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d10c      	bne.n	80101ce <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80101b4:	697b      	ldr	r3, [r7, #20]
 80101b6:	681a      	ldr	r2, [r3, #0]
 80101b8:	4b17      	ldr	r3, [pc, #92]	; (8010218 <tcp_input+0x4a0>)
 80101ba:	695b      	ldr	r3, [r3, #20]
 80101bc:	429a      	cmp	r2, r3
 80101be:	d00f      	beq.n	80101e0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80101c0:	697b      	ldr	r3, [r7, #20]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d00d      	beq.n	80101e2 <tcp_input+0x46a>
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d009      	beq.n	80101e2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80101d2:	697b      	ldr	r3, [r7, #20]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	617b      	str	r3, [r7, #20]
 80101d8:	697b      	ldr	r3, [r7, #20]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d1d1      	bne.n	8010182 <tcp_input+0x40a>
 80101de:	e000      	b.n	80101e2 <tcp_input+0x46a>
            break;
 80101e0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80101e2:	697b      	ldr	r3, [r7, #20]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d029      	beq.n	801023c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80101e8:	69bb      	ldr	r3, [r7, #24]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d00a      	beq.n	8010204 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80101ee:	697b      	ldr	r3, [r7, #20]
 80101f0:	68da      	ldr	r2, [r3, #12]
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80101f6:	4b10      	ldr	r3, [pc, #64]	; (8010238 <tcp_input+0x4c0>)
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	697b      	ldr	r3, [r7, #20]
 80101fc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80101fe:	4a0e      	ldr	r2, [pc, #56]	; (8010238 <tcp_input+0x4c0>)
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010204:	6978      	ldr	r0, [r7, #20]
 8010206:	f000 fa03 	bl	8010610 <tcp_listen_input>
      }
      pbuf_free(p);
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f7fd feea 	bl	800dfe4 <pbuf_free>
      return;
 8010210:	e1a8      	b.n	8010564 <tcp_input+0x7ec>
 8010212:	bf00      	nop
 8010214:	20008ff0 	.word	0x20008ff0
 8010218:	20005a58 	.word	0x20005a58
 801021c:	080199c4 	.word	0x080199c4
 8010220:	08019af0 	.word	0x08019af0
 8010224:	08019a10 	.word	0x08019a10
 8010228:	20008fd4 	.word	0x20008fd4
 801022c:	08019b1c 	.word	0x08019b1c
 8010230:	20008fd8 	.word	0x20008fd8
 8010234:	08019b48 	.word	0x08019b48
 8010238:	20008fd0 	.word	0x20008fd0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801023c:	69fb      	ldr	r3, [r7, #28]
 801023e:	2b00      	cmp	r3, #0
 8010240:	f000 8158 	beq.w	80104f4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010244:	4b95      	ldr	r3, [pc, #596]	; (801049c <tcp_input+0x724>)
 8010246:	2200      	movs	r2, #0
 8010248:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	891a      	ldrh	r2, [r3, #8]
 801024e:	4b93      	ldr	r3, [pc, #588]	; (801049c <tcp_input+0x724>)
 8010250:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010252:	4a92      	ldr	r2, [pc, #584]	; (801049c <tcp_input+0x724>)
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010258:	4b91      	ldr	r3, [pc, #580]	; (80104a0 <tcp_input+0x728>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4a8f      	ldr	r2, [pc, #572]	; (801049c <tcp_input+0x724>)
 801025e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010260:	4b90      	ldr	r3, [pc, #576]	; (80104a4 <tcp_input+0x72c>)
 8010262:	2200      	movs	r2, #0
 8010264:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010266:	4b90      	ldr	r3, [pc, #576]	; (80104a8 <tcp_input+0x730>)
 8010268:	2200      	movs	r2, #0
 801026a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801026c:	4b8f      	ldr	r3, [pc, #572]	; (80104ac <tcp_input+0x734>)
 801026e:	2200      	movs	r2, #0
 8010270:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010272:	4b8f      	ldr	r3, [pc, #572]	; (80104b0 <tcp_input+0x738>)
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	f003 0308 	and.w	r3, r3, #8
 801027a:	2b00      	cmp	r3, #0
 801027c:	d006      	beq.n	801028c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	7b5b      	ldrb	r3, [r3, #13]
 8010282:	f043 0301 	orr.w	r3, r3, #1
 8010286:	b2da      	uxtb	r2, r3
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010290:	2b00      	cmp	r3, #0
 8010292:	d017      	beq.n	80102c4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010294:	69f8      	ldr	r0, [r7, #28]
 8010296:	f7ff f929 	bl	800f4ec <tcp_process_refused_data>
 801029a:	4603      	mov	r3, r0
 801029c:	f113 0f0d 	cmn.w	r3, #13
 80102a0:	d007      	beq.n	80102b2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80102a2:	69fb      	ldr	r3, [r7, #28]
 80102a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d00c      	beq.n	80102c4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80102aa:	4b82      	ldr	r3, [pc, #520]	; (80104b4 <tcp_input+0x73c>)
 80102ac:	881b      	ldrh	r3, [r3, #0]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d008      	beq.n	80102c4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80102b2:	69fb      	ldr	r3, [r7, #28]
 80102b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	f040 80e3 	bne.w	8010482 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80102bc:	69f8      	ldr	r0, [r7, #28]
 80102be:	f003 f9ad 	bl	801361c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80102c2:	e0de      	b.n	8010482 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80102c4:	4a7c      	ldr	r2, [pc, #496]	; (80104b8 <tcp_input+0x740>)
 80102c6:	69fb      	ldr	r3, [r7, #28]
 80102c8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80102ca:	69f8      	ldr	r0, [r7, #28]
 80102cc:	f000 fb18 	bl	8010900 <tcp_process>
 80102d0:	4603      	mov	r3, r0
 80102d2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80102d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80102d8:	f113 0f0d 	cmn.w	r3, #13
 80102dc:	f000 80d3 	beq.w	8010486 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80102e0:	4b71      	ldr	r3, [pc, #452]	; (80104a8 <tcp_input+0x730>)
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	f003 0308 	and.w	r3, r3, #8
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d015      	beq.n	8010318 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d008      	beq.n	8010308 <tcp_input+0x590>
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102fc:	69fa      	ldr	r2, [r7, #28]
 80102fe:	6912      	ldr	r2, [r2, #16]
 8010300:	f06f 010d 	mvn.w	r1, #13
 8010304:	4610      	mov	r0, r2
 8010306:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010308:	69f9      	ldr	r1, [r7, #28]
 801030a:	486c      	ldr	r0, [pc, #432]	; (80104bc <tcp_input+0x744>)
 801030c:	f7ff fbbc 	bl	800fa88 <tcp_pcb_remove>
        tcp_free(pcb);
 8010310:	69f8      	ldr	r0, [r7, #28]
 8010312:	f7fe f9a9 	bl	800e668 <tcp_free>
 8010316:	e0da      	b.n	80104ce <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8010318:	2300      	movs	r3, #0
 801031a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801031c:	4b63      	ldr	r3, [pc, #396]	; (80104ac <tcp_input+0x734>)
 801031e:	881b      	ldrh	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d01d      	beq.n	8010360 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8010324:	4b61      	ldr	r3, [pc, #388]	; (80104ac <tcp_input+0x734>)
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801032a:	69fb      	ldr	r3, [r7, #28]
 801032c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010330:	2b00      	cmp	r3, #0
 8010332:	d00a      	beq.n	801034a <tcp_input+0x5d2>
 8010334:	69fb      	ldr	r3, [r7, #28]
 8010336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801033a:	69fa      	ldr	r2, [r7, #28]
 801033c:	6910      	ldr	r0, [r2, #16]
 801033e:	89fa      	ldrh	r2, [r7, #14]
 8010340:	69f9      	ldr	r1, [r7, #28]
 8010342:	4798      	blx	r3
 8010344:	4603      	mov	r3, r0
 8010346:	74fb      	strb	r3, [r7, #19]
 8010348:	e001      	b.n	801034e <tcp_input+0x5d6>
 801034a:	2300      	movs	r3, #0
 801034c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801034e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010352:	f113 0f0d 	cmn.w	r3, #13
 8010356:	f000 8098 	beq.w	801048a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801035a:	4b54      	ldr	r3, [pc, #336]	; (80104ac <tcp_input+0x734>)
 801035c:	2200      	movs	r2, #0
 801035e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8010360:	69f8      	ldr	r0, [r7, #28]
 8010362:	f000 f915 	bl	8010590 <tcp_input_delayed_close>
 8010366:	4603      	mov	r3, r0
 8010368:	2b00      	cmp	r3, #0
 801036a:	f040 8090 	bne.w	801048e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801036e:	4b4d      	ldr	r3, [pc, #308]	; (80104a4 <tcp_input+0x72c>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d041      	beq.n	80103fa <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8010376:	69fb      	ldr	r3, [r7, #28]
 8010378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801037a:	2b00      	cmp	r3, #0
 801037c:	d006      	beq.n	801038c <tcp_input+0x614>
 801037e:	4b50      	ldr	r3, [pc, #320]	; (80104c0 <tcp_input+0x748>)
 8010380:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010384:	494f      	ldr	r1, [pc, #316]	; (80104c4 <tcp_input+0x74c>)
 8010386:	4850      	ldr	r0, [pc, #320]	; (80104c8 <tcp_input+0x750>)
 8010388:	f007 f9a6 	bl	80176d8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801038c:	69fb      	ldr	r3, [r7, #28]
 801038e:	8b5b      	ldrh	r3, [r3, #26]
 8010390:	f003 0310 	and.w	r3, r3, #16
 8010394:	2b00      	cmp	r3, #0
 8010396:	d008      	beq.n	80103aa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8010398:	4b42      	ldr	r3, [pc, #264]	; (80104a4 <tcp_input+0x72c>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4618      	mov	r0, r3
 801039e:	f7fd fe21 	bl	800dfe4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80103a2:	69f8      	ldr	r0, [r7, #28]
 80103a4:	f7fe fc48 	bl	800ec38 <tcp_abort>
            goto aborted;
 80103a8:	e091      	b.n	80104ce <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80103aa:	69fb      	ldr	r3, [r7, #28]
 80103ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d00c      	beq.n	80103ce <tcp_input+0x656>
 80103b4:	69fb      	ldr	r3, [r7, #28]
 80103b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80103ba:	69fb      	ldr	r3, [r7, #28]
 80103bc:	6918      	ldr	r0, [r3, #16]
 80103be:	4b39      	ldr	r3, [pc, #228]	; (80104a4 <tcp_input+0x72c>)
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	2300      	movs	r3, #0
 80103c4:	69f9      	ldr	r1, [r7, #28]
 80103c6:	47a0      	blx	r4
 80103c8:	4603      	mov	r3, r0
 80103ca:	74fb      	strb	r3, [r7, #19]
 80103cc:	e008      	b.n	80103e0 <tcp_input+0x668>
 80103ce:	4b35      	ldr	r3, [pc, #212]	; (80104a4 <tcp_input+0x72c>)
 80103d0:	681a      	ldr	r2, [r3, #0]
 80103d2:	2300      	movs	r3, #0
 80103d4:	69f9      	ldr	r1, [r7, #28]
 80103d6:	2000      	movs	r0, #0
 80103d8:	f7ff f95e 	bl	800f698 <tcp_recv_null>
 80103dc:	4603      	mov	r3, r0
 80103de:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80103e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103e4:	f113 0f0d 	cmn.w	r3, #13
 80103e8:	d053      	beq.n	8010492 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80103ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d003      	beq.n	80103fa <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80103f2:	4b2c      	ldr	r3, [pc, #176]	; (80104a4 <tcp_input+0x72c>)
 80103f4:	681a      	ldr	r2, [r3, #0]
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80103fa:	4b2b      	ldr	r3, [pc, #172]	; (80104a8 <tcp_input+0x730>)
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	f003 0320 	and.w	r3, r3, #32
 8010402:	2b00      	cmp	r3, #0
 8010404:	d030      	beq.n	8010468 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8010406:	69fb      	ldr	r3, [r7, #28]
 8010408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801040a:	2b00      	cmp	r3, #0
 801040c:	d009      	beq.n	8010422 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010412:	7b5a      	ldrb	r2, [r3, #13]
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010418:	f042 0220 	orr.w	r2, r2, #32
 801041c:	b2d2      	uxtb	r2, r2
 801041e:	735a      	strb	r2, [r3, #13]
 8010420:	e022      	b.n	8010468 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010422:	69fb      	ldr	r3, [r7, #28]
 8010424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010426:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801042a:	d005      	beq.n	8010438 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801042c:	69fb      	ldr	r3, [r7, #28]
 801042e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010430:	3301      	adds	r3, #1
 8010432:	b29a      	uxth	r2, r3
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801043e:	2b00      	cmp	r3, #0
 8010440:	d00b      	beq.n	801045a <tcp_input+0x6e2>
 8010442:	69fb      	ldr	r3, [r7, #28]
 8010444:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	6918      	ldr	r0, [r3, #16]
 801044c:	2300      	movs	r3, #0
 801044e:	2200      	movs	r2, #0
 8010450:	69f9      	ldr	r1, [r7, #28]
 8010452:	47a0      	blx	r4
 8010454:	4603      	mov	r3, r0
 8010456:	74fb      	strb	r3, [r7, #19]
 8010458:	e001      	b.n	801045e <tcp_input+0x6e6>
 801045a:	2300      	movs	r3, #0
 801045c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801045e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010462:	f113 0f0d 	cmn.w	r3, #13
 8010466:	d016      	beq.n	8010496 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8010468:	4b13      	ldr	r3, [pc, #76]	; (80104b8 <tcp_input+0x740>)
 801046a:	2200      	movs	r2, #0
 801046c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801046e:	69f8      	ldr	r0, [r7, #28]
 8010470:	f000 f88e 	bl	8010590 <tcp_input_delayed_close>
 8010474:	4603      	mov	r3, r0
 8010476:	2b00      	cmp	r3, #0
 8010478:	d128      	bne.n	80104cc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801047a:	69f8      	ldr	r0, [r7, #28]
 801047c:	f002 fac8 	bl	8012a10 <tcp_output>
 8010480:	e025      	b.n	80104ce <tcp_input+0x756>
        goto aborted;
 8010482:	bf00      	nop
 8010484:	e023      	b.n	80104ce <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8010486:	bf00      	nop
 8010488:	e021      	b.n	80104ce <tcp_input+0x756>
              goto aborted;
 801048a:	bf00      	nop
 801048c:	e01f      	b.n	80104ce <tcp_input+0x756>
          goto aborted;
 801048e:	bf00      	nop
 8010490:	e01d      	b.n	80104ce <tcp_input+0x756>
            goto aborted;
 8010492:	bf00      	nop
 8010494:	e01b      	b.n	80104ce <tcp_input+0x756>
              goto aborted;
 8010496:	bf00      	nop
 8010498:	e019      	b.n	80104ce <tcp_input+0x756>
 801049a:	bf00      	nop
 801049c:	20008fe0 	.word	0x20008fe0
 80104a0:	20008ff0 	.word	0x20008ff0
 80104a4:	20009010 	.word	0x20009010
 80104a8:	2000900d 	.word	0x2000900d
 80104ac:	20009008 	.word	0x20009008
 80104b0:	2000900c 	.word	0x2000900c
 80104b4:	2000900a 	.word	0x2000900a
 80104b8:	20009014 	.word	0x20009014
 80104bc:	20008fd4 	.word	0x20008fd4
 80104c0:	080199c4 	.word	0x080199c4
 80104c4:	08019b78 	.word	0x08019b78
 80104c8:	08019a10 	.word	0x08019a10
          goto aborted;
 80104cc:	bf00      	nop
    tcp_input_pcb = NULL;
 80104ce:	4b27      	ldr	r3, [pc, #156]	; (801056c <tcp_input+0x7f4>)
 80104d0:	2200      	movs	r2, #0
 80104d2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80104d4:	4b26      	ldr	r3, [pc, #152]	; (8010570 <tcp_input+0x7f8>)
 80104d6:	2200      	movs	r2, #0
 80104d8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80104da:	4b26      	ldr	r3, [pc, #152]	; (8010574 <tcp_input+0x7fc>)
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d03f      	beq.n	8010562 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80104e2:	4b24      	ldr	r3, [pc, #144]	; (8010574 <tcp_input+0x7fc>)
 80104e4:	685b      	ldr	r3, [r3, #4]
 80104e6:	4618      	mov	r0, r3
 80104e8:	f7fd fd7c 	bl	800dfe4 <pbuf_free>
      inseg.p = NULL;
 80104ec:	4b21      	ldr	r3, [pc, #132]	; (8010574 <tcp_input+0x7fc>)
 80104ee:	2200      	movs	r2, #0
 80104f0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80104f2:	e036      	b.n	8010562 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80104f4:	4b20      	ldr	r3, [pc, #128]	; (8010578 <tcp_input+0x800>)
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	899b      	ldrh	r3, [r3, #12]
 80104fa:	b29b      	uxth	r3, r3
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7fc fa13 	bl	800c928 <lwip_htons>
 8010502:	4603      	mov	r3, r0
 8010504:	b2db      	uxtb	r3, r3
 8010506:	f003 0304 	and.w	r3, r3, #4
 801050a:	2b00      	cmp	r3, #0
 801050c:	d118      	bne.n	8010540 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801050e:	4b1b      	ldr	r3, [pc, #108]	; (801057c <tcp_input+0x804>)
 8010510:	6819      	ldr	r1, [r3, #0]
 8010512:	4b1b      	ldr	r3, [pc, #108]	; (8010580 <tcp_input+0x808>)
 8010514:	881b      	ldrh	r3, [r3, #0]
 8010516:	461a      	mov	r2, r3
 8010518:	4b1a      	ldr	r3, [pc, #104]	; (8010584 <tcp_input+0x80c>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801051e:	4b16      	ldr	r3, [pc, #88]	; (8010578 <tcp_input+0x800>)
 8010520:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010522:	885b      	ldrh	r3, [r3, #2]
 8010524:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010526:	4a14      	ldr	r2, [pc, #80]	; (8010578 <tcp_input+0x800>)
 8010528:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801052a:	8812      	ldrh	r2, [r2, #0]
 801052c:	b292      	uxth	r2, r2
 801052e:	9202      	str	r2, [sp, #8]
 8010530:	9301      	str	r3, [sp, #4]
 8010532:	4b15      	ldr	r3, [pc, #84]	; (8010588 <tcp_input+0x810>)
 8010534:	9300      	str	r3, [sp, #0]
 8010536:	4b15      	ldr	r3, [pc, #84]	; (801058c <tcp_input+0x814>)
 8010538:	4602      	mov	r2, r0
 801053a:	2000      	movs	r0, #0
 801053c:	f003 f81c 	bl	8013578 <tcp_rst>
    pbuf_free(p);
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7fd fd4f 	bl	800dfe4 <pbuf_free>
  return;
 8010546:	e00c      	b.n	8010562 <tcp_input+0x7ea>
    goto dropped;
 8010548:	bf00      	nop
 801054a:	e006      	b.n	801055a <tcp_input+0x7e2>
    goto dropped;
 801054c:	bf00      	nop
 801054e:	e004      	b.n	801055a <tcp_input+0x7e2>
    goto dropped;
 8010550:	bf00      	nop
 8010552:	e002      	b.n	801055a <tcp_input+0x7e2>
      goto dropped;
 8010554:	bf00      	nop
 8010556:	e000      	b.n	801055a <tcp_input+0x7e2>
      goto dropped;
 8010558:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f7fd fd42 	bl	800dfe4 <pbuf_free>
 8010560:	e000      	b.n	8010564 <tcp_input+0x7ec>
  return;
 8010562:	bf00      	nop
}
 8010564:	3724      	adds	r7, #36	; 0x24
 8010566:	46bd      	mov	sp, r7
 8010568:	bd90      	pop	{r4, r7, pc}
 801056a:	bf00      	nop
 801056c:	20009014 	.word	0x20009014
 8010570:	20009010 	.word	0x20009010
 8010574:	20008fe0 	.word	0x20008fe0
 8010578:	20008ff0 	.word	0x20008ff0
 801057c:	20009004 	.word	0x20009004
 8010580:	2000900a 	.word	0x2000900a
 8010584:	20009000 	.word	0x20009000
 8010588:	20005a68 	.word	0x20005a68
 801058c:	20005a6c 	.word	0x20005a6c

08010590 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b082      	sub	sp, #8
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d106      	bne.n	80105ac <tcp_input_delayed_close+0x1c>
 801059e:	4b17      	ldr	r3, [pc, #92]	; (80105fc <tcp_input_delayed_close+0x6c>)
 80105a0:	f240 225a 	movw	r2, #602	; 0x25a
 80105a4:	4916      	ldr	r1, [pc, #88]	; (8010600 <tcp_input_delayed_close+0x70>)
 80105a6:	4817      	ldr	r0, [pc, #92]	; (8010604 <tcp_input_delayed_close+0x74>)
 80105a8:	f007 f896 	bl	80176d8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80105ac:	4b16      	ldr	r3, [pc, #88]	; (8010608 <tcp_input_delayed_close+0x78>)
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	f003 0310 	and.w	r3, r3, #16
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d01c      	beq.n	80105f2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	8b5b      	ldrh	r3, [r3, #26]
 80105bc:	f003 0310 	and.w	r3, r3, #16
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d10d      	bne.n	80105e0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d008      	beq.n	80105e0 <tcp_input_delayed_close+0x50>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	6912      	ldr	r2, [r2, #16]
 80105d8:	f06f 010e 	mvn.w	r1, #14
 80105dc:	4610      	mov	r0, r2
 80105de:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80105e0:	6879      	ldr	r1, [r7, #4]
 80105e2:	480a      	ldr	r0, [pc, #40]	; (801060c <tcp_input_delayed_close+0x7c>)
 80105e4:	f7ff fa50 	bl	800fa88 <tcp_pcb_remove>
    tcp_free(pcb);
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f7fe f83d 	bl	800e668 <tcp_free>
    return 1;
 80105ee:	2301      	movs	r3, #1
 80105f0:	e000      	b.n	80105f4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80105f2:	2300      	movs	r3, #0
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	080199c4 	.word	0x080199c4
 8010600:	08019b94 	.word	0x08019b94
 8010604:	08019a10 	.word	0x08019a10
 8010608:	2000900d 	.word	0x2000900d
 801060c:	20008fd4 	.word	0x20008fd4

08010610 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8010610:	b590      	push	{r4, r7, lr}
 8010612:	b08b      	sub	sp, #44	; 0x2c
 8010614:	af04      	add	r7, sp, #16
 8010616:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8010618:	4b6f      	ldr	r3, [pc, #444]	; (80107d8 <tcp_listen_input+0x1c8>)
 801061a:	781b      	ldrb	r3, [r3, #0]
 801061c:	f003 0304 	and.w	r3, r3, #4
 8010620:	2b00      	cmp	r3, #0
 8010622:	f040 80d2 	bne.w	80107ca <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d106      	bne.n	801063a <tcp_listen_input+0x2a>
 801062c:	4b6b      	ldr	r3, [pc, #428]	; (80107dc <tcp_listen_input+0x1cc>)
 801062e:	f240 2281 	movw	r2, #641	; 0x281
 8010632:	496b      	ldr	r1, [pc, #428]	; (80107e0 <tcp_listen_input+0x1d0>)
 8010634:	486b      	ldr	r0, [pc, #428]	; (80107e4 <tcp_listen_input+0x1d4>)
 8010636:	f007 f84f 	bl	80176d8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801063a:	4b67      	ldr	r3, [pc, #412]	; (80107d8 <tcp_listen_input+0x1c8>)
 801063c:	781b      	ldrb	r3, [r3, #0]
 801063e:	f003 0310 	and.w	r3, r3, #16
 8010642:	2b00      	cmp	r3, #0
 8010644:	d019      	beq.n	801067a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010646:	4b68      	ldr	r3, [pc, #416]	; (80107e8 <tcp_listen_input+0x1d8>)
 8010648:	6819      	ldr	r1, [r3, #0]
 801064a:	4b68      	ldr	r3, [pc, #416]	; (80107ec <tcp_listen_input+0x1dc>)
 801064c:	881b      	ldrh	r3, [r3, #0]
 801064e:	461a      	mov	r2, r3
 8010650:	4b67      	ldr	r3, [pc, #412]	; (80107f0 <tcp_listen_input+0x1e0>)
 8010652:	681b      	ldr	r3, [r3, #0]
 8010654:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010656:	4b67      	ldr	r3, [pc, #412]	; (80107f4 <tcp_listen_input+0x1e4>)
 8010658:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801065a:	885b      	ldrh	r3, [r3, #2]
 801065c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801065e:	4a65      	ldr	r2, [pc, #404]	; (80107f4 <tcp_listen_input+0x1e4>)
 8010660:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010662:	8812      	ldrh	r2, [r2, #0]
 8010664:	b292      	uxth	r2, r2
 8010666:	9202      	str	r2, [sp, #8]
 8010668:	9301      	str	r3, [sp, #4]
 801066a:	4b63      	ldr	r3, [pc, #396]	; (80107f8 <tcp_listen_input+0x1e8>)
 801066c:	9300      	str	r3, [sp, #0]
 801066e:	4b63      	ldr	r3, [pc, #396]	; (80107fc <tcp_listen_input+0x1ec>)
 8010670:	4602      	mov	r2, r0
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f002 ff80 	bl	8013578 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8010678:	e0a9      	b.n	80107ce <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801067a:	4b57      	ldr	r3, [pc, #348]	; (80107d8 <tcp_listen_input+0x1c8>)
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	f003 0302 	and.w	r3, r3, #2
 8010682:	2b00      	cmp	r3, #0
 8010684:	f000 80a3 	beq.w	80107ce <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	7d5b      	ldrb	r3, [r3, #21]
 801068c:	4618      	mov	r0, r3
 801068e:	f7ff f927 	bl	800f8e0 <tcp_alloc>
 8010692:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d111      	bne.n	80106be <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	699b      	ldr	r3, [r3, #24]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d00a      	beq.n	80106b8 <tcp_listen_input+0xa8>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	699b      	ldr	r3, [r3, #24]
 80106a6:	687a      	ldr	r2, [r7, #4]
 80106a8:	6910      	ldr	r0, [r2, #16]
 80106aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106ae:	2100      	movs	r1, #0
 80106b0:	4798      	blx	r3
 80106b2:	4603      	mov	r3, r0
 80106b4:	73bb      	strb	r3, [r7, #14]
      return;
 80106b6:	e08b      	b.n	80107d0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80106b8:	23f0      	movs	r3, #240	; 0xf0
 80106ba:	73bb      	strb	r3, [r7, #14]
      return;
 80106bc:	e088      	b.n	80107d0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80106be:	4b50      	ldr	r3, [pc, #320]	; (8010800 <tcp_listen_input+0x1f0>)
 80106c0:	695a      	ldr	r2, [r3, #20]
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80106c6:	4b4e      	ldr	r3, [pc, #312]	; (8010800 <tcp_listen_input+0x1f0>)
 80106c8:	691a      	ldr	r2, [r3, #16]
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	8ada      	ldrh	r2, [r3, #22]
 80106d2:	697b      	ldr	r3, [r7, #20]
 80106d4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80106d6:	4b47      	ldr	r3, [pc, #284]	; (80107f4 <tcp_listen_input+0x1e4>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	881b      	ldrh	r3, [r3, #0]
 80106dc:	b29a      	uxth	r2, r3
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	2203      	movs	r2, #3
 80106e6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80106e8:	4b41      	ldr	r3, [pc, #260]	; (80107f0 <tcp_listen_input+0x1e0>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	1c5a      	adds	r2, r3, #1
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80106fa:	6978      	ldr	r0, [r7, #20]
 80106fc:	f7ff fa58 	bl	800fbb0 <tcp_next_iss>
 8010700:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	693a      	ldr	r2, [r7, #16]
 8010706:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	693a      	ldr	r2, [r7, #16]
 801070c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	693a      	ldr	r2, [r7, #16]
 8010712:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	693a      	ldr	r2, [r7, #16]
 8010718:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801071a:	4b35      	ldr	r3, [pc, #212]	; (80107f0 <tcp_listen_input+0x1e0>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	1e5a      	subs	r2, r3, #1
 8010720:	697b      	ldr	r3, [r7, #20]
 8010722:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	691a      	ldr	r2, [r3, #16]
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801072c:	697b      	ldr	r3, [r7, #20]
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	7a5b      	ldrb	r3, [r3, #9]
 8010736:	f003 030c 	and.w	r3, r3, #12
 801073a:	b2da      	uxtb	r2, r3
 801073c:	697b      	ldr	r3, [r7, #20]
 801073e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	7a1a      	ldrb	r2, [r3, #8]
 8010744:	697b      	ldr	r3, [r7, #20]
 8010746:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8010748:	4b2e      	ldr	r3, [pc, #184]	; (8010804 <tcp_listen_input+0x1f4>)
 801074a:	681a      	ldr	r2, [r3, #0]
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	60da      	str	r2, [r3, #12]
 8010750:	4a2c      	ldr	r2, [pc, #176]	; (8010804 <tcp_listen_input+0x1f4>)
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	6013      	str	r3, [r2, #0]
 8010756:	f003 f8d1 	bl	80138fc <tcp_timer_needed>
 801075a:	4b2b      	ldr	r3, [pc, #172]	; (8010808 <tcp_listen_input+0x1f8>)
 801075c:	2201      	movs	r2, #1
 801075e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8010760:	6978      	ldr	r0, [r7, #20]
 8010762:	f001 fd8f 	bl	8012284 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010766:	4b23      	ldr	r3, [pc, #140]	; (80107f4 <tcp_listen_input+0x1e4>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	89db      	ldrh	r3, [r3, #14]
 801076c:	b29a      	uxth	r2, r3
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	3304      	adds	r3, #4
 8010788:	4618      	mov	r0, r3
 801078a:	f005 f827 	bl	80157dc <ip4_route>
 801078e:	4601      	mov	r1, r0
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	3304      	adds	r3, #4
 8010794:	461a      	mov	r2, r3
 8010796:	4620      	mov	r0, r4
 8010798:	f7ff fa30 	bl	800fbfc <tcp_eff_send_mss_netif>
 801079c:	4603      	mov	r3, r0
 801079e:	461a      	mov	r2, r3
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80107a4:	2112      	movs	r1, #18
 80107a6:	6978      	ldr	r0, [r7, #20]
 80107a8:	f002 f844 	bl	8012834 <tcp_enqueue_flags>
 80107ac:	4603      	mov	r3, r0
 80107ae:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80107b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d004      	beq.n	80107c2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80107b8:	2100      	movs	r1, #0
 80107ba:	6978      	ldr	r0, [r7, #20]
 80107bc:	f7fe f97e 	bl	800eabc <tcp_abandon>
      return;
 80107c0:	e006      	b.n	80107d0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80107c2:	6978      	ldr	r0, [r7, #20]
 80107c4:	f002 f924 	bl	8012a10 <tcp_output>
  return;
 80107c8:	e001      	b.n	80107ce <tcp_listen_input+0x1be>
    return;
 80107ca:	bf00      	nop
 80107cc:	e000      	b.n	80107d0 <tcp_listen_input+0x1c0>
  return;
 80107ce:	bf00      	nop
}
 80107d0:	371c      	adds	r7, #28
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd90      	pop	{r4, r7, pc}
 80107d6:	bf00      	nop
 80107d8:	2000900c 	.word	0x2000900c
 80107dc:	080199c4 	.word	0x080199c4
 80107e0:	08019bbc 	.word	0x08019bbc
 80107e4:	08019a10 	.word	0x08019a10
 80107e8:	20009004 	.word	0x20009004
 80107ec:	2000900a 	.word	0x2000900a
 80107f0:	20009000 	.word	0x20009000
 80107f4:	20008ff0 	.word	0x20008ff0
 80107f8:	20005a68 	.word	0x20005a68
 80107fc:	20005a6c 	.word	0x20005a6c
 8010800:	20005a58 	.word	0x20005a58
 8010804:	20008fd4 	.word	0x20008fd4
 8010808:	20008fdc 	.word	0x20008fdc

0801080c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	b086      	sub	sp, #24
 8010810:	af04      	add	r7, sp, #16
 8010812:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010814:	4b2f      	ldr	r3, [pc, #188]	; (80108d4 <tcp_timewait_input+0xc8>)
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	f003 0304 	and.w	r3, r3, #4
 801081c:	2b00      	cmp	r3, #0
 801081e:	d153      	bne.n	80108c8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d106      	bne.n	8010834 <tcp_timewait_input+0x28>
 8010826:	4b2c      	ldr	r3, [pc, #176]	; (80108d8 <tcp_timewait_input+0xcc>)
 8010828:	f240 22ee 	movw	r2, #750	; 0x2ee
 801082c:	492b      	ldr	r1, [pc, #172]	; (80108dc <tcp_timewait_input+0xd0>)
 801082e:	482c      	ldr	r0, [pc, #176]	; (80108e0 <tcp_timewait_input+0xd4>)
 8010830:	f006 ff52 	bl	80176d8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8010834:	4b27      	ldr	r3, [pc, #156]	; (80108d4 <tcp_timewait_input+0xc8>)
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	f003 0302 	and.w	r3, r3, #2
 801083c:	2b00      	cmp	r3, #0
 801083e:	d02a      	beq.n	8010896 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8010840:	4b28      	ldr	r3, [pc, #160]	; (80108e4 <tcp_timewait_input+0xd8>)
 8010842:	681a      	ldr	r2, [r3, #0]
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010848:	1ad3      	subs	r3, r2, r3
 801084a:	2b00      	cmp	r3, #0
 801084c:	db2d      	blt.n	80108aa <tcp_timewait_input+0x9e>
 801084e:	4b25      	ldr	r3, [pc, #148]	; (80108e4 <tcp_timewait_input+0xd8>)
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010856:	6879      	ldr	r1, [r7, #4]
 8010858:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801085a:	440b      	add	r3, r1
 801085c:	1ad3      	subs	r3, r2, r3
 801085e:	2b00      	cmp	r3, #0
 8010860:	dc23      	bgt.n	80108aa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010862:	4b21      	ldr	r3, [pc, #132]	; (80108e8 <tcp_timewait_input+0xdc>)
 8010864:	6819      	ldr	r1, [r3, #0]
 8010866:	4b21      	ldr	r3, [pc, #132]	; (80108ec <tcp_timewait_input+0xe0>)
 8010868:	881b      	ldrh	r3, [r3, #0]
 801086a:	461a      	mov	r2, r3
 801086c:	4b1d      	ldr	r3, [pc, #116]	; (80108e4 <tcp_timewait_input+0xd8>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010872:	4b1f      	ldr	r3, [pc, #124]	; (80108f0 <tcp_timewait_input+0xe4>)
 8010874:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010876:	885b      	ldrh	r3, [r3, #2]
 8010878:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801087a:	4a1d      	ldr	r2, [pc, #116]	; (80108f0 <tcp_timewait_input+0xe4>)
 801087c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801087e:	8812      	ldrh	r2, [r2, #0]
 8010880:	b292      	uxth	r2, r2
 8010882:	9202      	str	r2, [sp, #8]
 8010884:	9301      	str	r3, [sp, #4]
 8010886:	4b1b      	ldr	r3, [pc, #108]	; (80108f4 <tcp_timewait_input+0xe8>)
 8010888:	9300      	str	r3, [sp, #0]
 801088a:	4b1b      	ldr	r3, [pc, #108]	; (80108f8 <tcp_timewait_input+0xec>)
 801088c:	4602      	mov	r2, r0
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f002 fe72 	bl	8013578 <tcp_rst>
      return;
 8010894:	e01b      	b.n	80108ce <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010896:	4b0f      	ldr	r3, [pc, #60]	; (80108d4 <tcp_timewait_input+0xc8>)
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	f003 0301 	and.w	r3, r3, #1
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d003      	beq.n	80108aa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80108a2:	4b16      	ldr	r3, [pc, #88]	; (80108fc <tcp_timewait_input+0xf0>)
 80108a4:	681a      	ldr	r2, [r3, #0]
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80108aa:	4b10      	ldr	r3, [pc, #64]	; (80108ec <tcp_timewait_input+0xe0>)
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d00c      	beq.n	80108cc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	8b5b      	ldrh	r3, [r3, #26]
 80108b6:	f043 0302 	orr.w	r3, r3, #2
 80108ba:	b29a      	uxth	r2, r3
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80108c0:	6878      	ldr	r0, [r7, #4]
 80108c2:	f002 f8a5 	bl	8012a10 <tcp_output>
  }
  return;
 80108c6:	e001      	b.n	80108cc <tcp_timewait_input+0xc0>
    return;
 80108c8:	bf00      	nop
 80108ca:	e000      	b.n	80108ce <tcp_timewait_input+0xc2>
  return;
 80108cc:	bf00      	nop
}
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	2000900c 	.word	0x2000900c
 80108d8:	080199c4 	.word	0x080199c4
 80108dc:	08019bdc 	.word	0x08019bdc
 80108e0:	08019a10 	.word	0x08019a10
 80108e4:	20009000 	.word	0x20009000
 80108e8:	20009004 	.word	0x20009004
 80108ec:	2000900a 	.word	0x2000900a
 80108f0:	20008ff0 	.word	0x20008ff0
 80108f4:	20005a68 	.word	0x20005a68
 80108f8:	20005a6c 	.word	0x20005a6c
 80108fc:	20008fc8 	.word	0x20008fc8

08010900 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010900:	b590      	push	{r4, r7, lr}
 8010902:	b08d      	sub	sp, #52	; 0x34
 8010904:	af04      	add	r7, sp, #16
 8010906:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8010908:	2300      	movs	r3, #0
 801090a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801090c:	2300      	movs	r3, #0
 801090e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d106      	bne.n	8010924 <tcp_process+0x24>
 8010916:	4b9d      	ldr	r3, [pc, #628]	; (8010b8c <tcp_process+0x28c>)
 8010918:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801091c:	499c      	ldr	r1, [pc, #624]	; (8010b90 <tcp_process+0x290>)
 801091e:	489d      	ldr	r0, [pc, #628]	; (8010b94 <tcp_process+0x294>)
 8010920:	f006 feda 	bl	80176d8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8010924:	4b9c      	ldr	r3, [pc, #624]	; (8010b98 <tcp_process+0x298>)
 8010926:	781b      	ldrb	r3, [r3, #0]
 8010928:	f003 0304 	and.w	r3, r3, #4
 801092c:	2b00      	cmp	r3, #0
 801092e:	d04e      	beq.n	80109ce <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	7d1b      	ldrb	r3, [r3, #20]
 8010934:	2b02      	cmp	r3, #2
 8010936:	d108      	bne.n	801094a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801093c:	4b97      	ldr	r3, [pc, #604]	; (8010b9c <tcp_process+0x29c>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	429a      	cmp	r2, r3
 8010942:	d123      	bne.n	801098c <tcp_process+0x8c>
        acceptable = 1;
 8010944:	2301      	movs	r3, #1
 8010946:	76fb      	strb	r3, [r7, #27]
 8010948:	e020      	b.n	801098c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801094e:	4b94      	ldr	r3, [pc, #592]	; (8010ba0 <tcp_process+0x2a0>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	429a      	cmp	r2, r3
 8010954:	d102      	bne.n	801095c <tcp_process+0x5c>
        acceptable = 1;
 8010956:	2301      	movs	r3, #1
 8010958:	76fb      	strb	r3, [r7, #27]
 801095a:	e017      	b.n	801098c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801095c:	4b90      	ldr	r3, [pc, #576]	; (8010ba0 <tcp_process+0x2a0>)
 801095e:	681a      	ldr	r2, [r3, #0]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010964:	1ad3      	subs	r3, r2, r3
 8010966:	2b00      	cmp	r3, #0
 8010968:	db10      	blt.n	801098c <tcp_process+0x8c>
 801096a:	4b8d      	ldr	r3, [pc, #564]	; (8010ba0 <tcp_process+0x2a0>)
 801096c:	681a      	ldr	r2, [r3, #0]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010972:	6879      	ldr	r1, [r7, #4]
 8010974:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010976:	440b      	add	r3, r1
 8010978:	1ad3      	subs	r3, r2, r3
 801097a:	2b00      	cmp	r3, #0
 801097c:	dc06      	bgt.n	801098c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	8b5b      	ldrh	r3, [r3, #26]
 8010982:	f043 0302 	orr.w	r3, r3, #2
 8010986:	b29a      	uxth	r2, r3
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801098c:	7efb      	ldrb	r3, [r7, #27]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d01b      	beq.n	80109ca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	7d1b      	ldrb	r3, [r3, #20]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d106      	bne.n	80109a8 <tcp_process+0xa8>
 801099a:	4b7c      	ldr	r3, [pc, #496]	; (8010b8c <tcp_process+0x28c>)
 801099c:	f44f 724e 	mov.w	r2, #824	; 0x338
 80109a0:	4980      	ldr	r1, [pc, #512]	; (8010ba4 <tcp_process+0x2a4>)
 80109a2:	487c      	ldr	r0, [pc, #496]	; (8010b94 <tcp_process+0x294>)
 80109a4:	f006 fe98 	bl	80176d8 <iprintf>
      recv_flags |= TF_RESET;
 80109a8:	4b7f      	ldr	r3, [pc, #508]	; (8010ba8 <tcp_process+0x2a8>)
 80109aa:	781b      	ldrb	r3, [r3, #0]
 80109ac:	f043 0308 	orr.w	r3, r3, #8
 80109b0:	b2da      	uxtb	r2, r3
 80109b2:	4b7d      	ldr	r3, [pc, #500]	; (8010ba8 <tcp_process+0x2a8>)
 80109b4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	8b5b      	ldrh	r3, [r3, #26]
 80109ba:	f023 0301 	bic.w	r3, r3, #1
 80109be:	b29a      	uxth	r2, r3
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80109c4:	f06f 030d 	mvn.w	r3, #13
 80109c8:	e37a      	b.n	80110c0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80109ca:	2300      	movs	r3, #0
 80109cc:	e378      	b.n	80110c0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80109ce:	4b72      	ldr	r3, [pc, #456]	; (8010b98 <tcp_process+0x298>)
 80109d0:	781b      	ldrb	r3, [r3, #0]
 80109d2:	f003 0302 	and.w	r3, r3, #2
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d010      	beq.n	80109fc <tcp_process+0xfc>
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	7d1b      	ldrb	r3, [r3, #20]
 80109de:	2b02      	cmp	r3, #2
 80109e0:	d00c      	beq.n	80109fc <tcp_process+0xfc>
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	7d1b      	ldrb	r3, [r3, #20]
 80109e6:	2b03      	cmp	r3, #3
 80109e8:	d008      	beq.n	80109fc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	8b5b      	ldrh	r3, [r3, #26]
 80109ee:	f043 0302 	orr.w	r3, r3, #2
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80109f8:	2300      	movs	r3, #0
 80109fa:	e361      	b.n	80110c0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	8b5b      	ldrh	r3, [r3, #26]
 8010a00:	f003 0310 	and.w	r3, r3, #16
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d103      	bne.n	8010a10 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8010a08:	4b68      	ldr	r3, [pc, #416]	; (8010bac <tcp_process+0x2ac>)
 8010a0a:	681a      	ldr	r2, [r3, #0]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2200      	movs	r2, #0
 8010a14:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f001 fc2f 	bl	8012284 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	7d1b      	ldrb	r3, [r3, #20]
 8010a2a:	3b02      	subs	r3, #2
 8010a2c:	2b07      	cmp	r3, #7
 8010a2e:	f200 8337 	bhi.w	80110a0 <tcp_process+0x7a0>
 8010a32:	a201      	add	r2, pc, #4	; (adr r2, 8010a38 <tcp_process+0x138>)
 8010a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a38:	08010a59 	.word	0x08010a59
 8010a3c:	08010c89 	.word	0x08010c89
 8010a40:	08010e01 	.word	0x08010e01
 8010a44:	08010e2b 	.word	0x08010e2b
 8010a48:	08010f4f 	.word	0x08010f4f
 8010a4c:	08010e01 	.word	0x08010e01
 8010a50:	08010fdb 	.word	0x08010fdb
 8010a54:	0801106b 	.word	0x0801106b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010a58:	4b4f      	ldr	r3, [pc, #316]	; (8010b98 <tcp_process+0x298>)
 8010a5a:	781b      	ldrb	r3, [r3, #0]
 8010a5c:	f003 0310 	and.w	r3, r3, #16
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	f000 80e4 	beq.w	8010c2e <tcp_process+0x32e>
 8010a66:	4b4c      	ldr	r3, [pc, #304]	; (8010b98 <tcp_process+0x298>)
 8010a68:	781b      	ldrb	r3, [r3, #0]
 8010a6a:	f003 0302 	and.w	r3, r3, #2
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	f000 80dd 	beq.w	8010c2e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a78:	1c5a      	adds	r2, r3, #1
 8010a7a:	4b48      	ldr	r3, [pc, #288]	; (8010b9c <tcp_process+0x29c>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	f040 80d5 	bne.w	8010c2e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010a84:	4b46      	ldr	r3, [pc, #280]	; (8010ba0 <tcp_process+0x2a0>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	1c5a      	adds	r2, r3, #1
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010a96:	4b41      	ldr	r3, [pc, #260]	; (8010b9c <tcp_process+0x29c>)
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010a9e:	4b44      	ldr	r3, [pc, #272]	; (8010bb0 <tcp_process+0x2b0>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	89db      	ldrh	r3, [r3, #14]
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010ab8:	4b39      	ldr	r3, [pc, #228]	; (8010ba0 <tcp_process+0x2a0>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	1e5a      	subs	r2, r3, #1
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2204      	movs	r2, #4
 8010ac6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	3304      	adds	r3, #4
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f004 fe83 	bl	80157dc <ip4_route>
 8010ad6:	4601      	mov	r1, r0
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	3304      	adds	r3, #4
 8010adc:	461a      	mov	r2, r3
 8010ade:	4620      	mov	r0, r4
 8010ae0:	f7ff f88c 	bl	800fbfc <tcp_eff_send_mss_netif>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	461a      	mov	r2, r3
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010af0:	009a      	lsls	r2, r3, #2
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010af6:	005b      	lsls	r3, r3, #1
 8010af8:	f241 111c 	movw	r1, #4380	; 0x111c
 8010afc:	428b      	cmp	r3, r1
 8010afe:	bf38      	it	cc
 8010b00:	460b      	movcc	r3, r1
 8010b02:	429a      	cmp	r2, r3
 8010b04:	d204      	bcs.n	8010b10 <tcp_process+0x210>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b0a:	009b      	lsls	r3, r3, #2
 8010b0c:	b29b      	uxth	r3, r3
 8010b0e:	e00d      	b.n	8010b2c <tcp_process+0x22c>
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b14:	005b      	lsls	r3, r3, #1
 8010b16:	f241 121c 	movw	r2, #4380	; 0x111c
 8010b1a:	4293      	cmp	r3, r2
 8010b1c:	d904      	bls.n	8010b28 <tcp_process+0x228>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010b22:	005b      	lsls	r3, r3, #1
 8010b24:	b29b      	uxth	r3, r3
 8010b26:	e001      	b.n	8010b2c <tcp_process+0x22c>
 8010b28:	f241 131c 	movw	r3, #4380	; 0x111c
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d106      	bne.n	8010b4a <tcp_process+0x24a>
 8010b3c:	4b13      	ldr	r3, [pc, #76]	; (8010b8c <tcp_process+0x28c>)
 8010b3e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010b42:	491c      	ldr	r1, [pc, #112]	; (8010bb4 <tcp_process+0x2b4>)
 8010b44:	4813      	ldr	r0, [pc, #76]	; (8010b94 <tcp_process+0x294>)
 8010b46:	f006 fdc7 	bl	80176d8 <iprintf>
        --pcb->snd_queuelen;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b50:	3b01      	subs	r3, #1
 8010b52:	b29a      	uxth	r2, r3
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b5e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010b60:	69fb      	ldr	r3, [r7, #28]
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d12a      	bne.n	8010bbc <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b6a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d106      	bne.n	8010b80 <tcp_process+0x280>
 8010b72:	4b06      	ldr	r3, [pc, #24]	; (8010b8c <tcp_process+0x28c>)
 8010b74:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010b78:	490f      	ldr	r1, [pc, #60]	; (8010bb8 <tcp_process+0x2b8>)
 8010b7a:	4806      	ldr	r0, [pc, #24]	; (8010b94 <tcp_process+0x294>)
 8010b7c:	f006 fdac 	bl	80176d8 <iprintf>
          pcb->unsent = rseg->next;
 8010b80:	69fb      	ldr	r3, [r7, #28]
 8010b82:	681a      	ldr	r2, [r3, #0]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	66da      	str	r2, [r3, #108]	; 0x6c
 8010b88:	e01c      	b.n	8010bc4 <tcp_process+0x2c4>
 8010b8a:	bf00      	nop
 8010b8c:	080199c4 	.word	0x080199c4
 8010b90:	08019bfc 	.word	0x08019bfc
 8010b94:	08019a10 	.word	0x08019a10
 8010b98:	2000900c 	.word	0x2000900c
 8010b9c:	20009004 	.word	0x20009004
 8010ba0:	20009000 	.word	0x20009000
 8010ba4:	08019c18 	.word	0x08019c18
 8010ba8:	2000900d 	.word	0x2000900d
 8010bac:	20008fc8 	.word	0x20008fc8
 8010bb0:	20008ff0 	.word	0x20008ff0
 8010bb4:	08019c38 	.word	0x08019c38
 8010bb8:	08019c50 	.word	0x08019c50
        } else {
          pcb->unacked = rseg->next;
 8010bbc:	69fb      	ldr	r3, [r7, #28]
 8010bbe:	681a      	ldr	r2, [r3, #0]
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010bc4:	69f8      	ldr	r0, [r7, #28]
 8010bc6:	f7fe fd22 	bl	800f60e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d104      	bne.n	8010bdc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bd8:	861a      	strh	r2, [r3, #48]	; 0x30
 8010bda:	e006      	b.n	8010bea <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2200      	movs	r2, #0
 8010be0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2200      	movs	r2, #0
 8010be6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d00a      	beq.n	8010c0a <tcp_process+0x30a>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bfa:	687a      	ldr	r2, [r7, #4]
 8010bfc:	6910      	ldr	r0, [r2, #16]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	6879      	ldr	r1, [r7, #4]
 8010c02:	4798      	blx	r3
 8010c04:	4603      	mov	r3, r0
 8010c06:	76bb      	strb	r3, [r7, #26]
 8010c08:	e001      	b.n	8010c0e <tcp_process+0x30e>
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010c0e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010c12:	f113 0f0d 	cmn.w	r3, #13
 8010c16:	d102      	bne.n	8010c1e <tcp_process+0x31e>
          return ERR_ABRT;
 8010c18:	f06f 030c 	mvn.w	r3, #12
 8010c1c:	e250      	b.n	80110c0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	8b5b      	ldrh	r3, [r3, #26]
 8010c22:	f043 0302 	orr.w	r3, r3, #2
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010c2c:	e23a      	b.n	80110a4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010c2e:	4b98      	ldr	r3, [pc, #608]	; (8010e90 <tcp_process+0x590>)
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	f003 0310 	and.w	r3, r3, #16
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	f000 8234 	beq.w	80110a4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c3c:	4b95      	ldr	r3, [pc, #596]	; (8010e94 <tcp_process+0x594>)
 8010c3e:	6819      	ldr	r1, [r3, #0]
 8010c40:	4b95      	ldr	r3, [pc, #596]	; (8010e98 <tcp_process+0x598>)
 8010c42:	881b      	ldrh	r3, [r3, #0]
 8010c44:	461a      	mov	r2, r3
 8010c46:	4b95      	ldr	r3, [pc, #596]	; (8010e9c <tcp_process+0x59c>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c4c:	4b94      	ldr	r3, [pc, #592]	; (8010ea0 <tcp_process+0x5a0>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c50:	885b      	ldrh	r3, [r3, #2]
 8010c52:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010c54:	4a92      	ldr	r2, [pc, #584]	; (8010ea0 <tcp_process+0x5a0>)
 8010c56:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010c58:	8812      	ldrh	r2, [r2, #0]
 8010c5a:	b292      	uxth	r2, r2
 8010c5c:	9202      	str	r2, [sp, #8]
 8010c5e:	9301      	str	r3, [sp, #4]
 8010c60:	4b90      	ldr	r3, [pc, #576]	; (8010ea4 <tcp_process+0x5a4>)
 8010c62:	9300      	str	r3, [sp, #0]
 8010c64:	4b90      	ldr	r3, [pc, #576]	; (8010ea8 <tcp_process+0x5a8>)
 8010c66:	4602      	mov	r2, r0
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f002 fc85 	bl	8013578 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c74:	2b05      	cmp	r3, #5
 8010c76:	f200 8215 	bhi.w	80110a4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f002 fa4f 	bl	8013124 <tcp_rexmit_rto>
      break;
 8010c86:	e20d      	b.n	80110a4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010c88:	4b81      	ldr	r3, [pc, #516]	; (8010e90 <tcp_process+0x590>)
 8010c8a:	781b      	ldrb	r3, [r3, #0]
 8010c8c:	f003 0310 	and.w	r3, r3, #16
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	f000 80a1 	beq.w	8010dd8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c96:	4b7f      	ldr	r3, [pc, #508]	; (8010e94 <tcp_process+0x594>)
 8010c98:	681a      	ldr	r2, [r3, #0]
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c9e:	1ad3      	subs	r3, r2, r3
 8010ca0:	3b01      	subs	r3, #1
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	db7e      	blt.n	8010da4 <tcp_process+0x4a4>
 8010ca6:	4b7b      	ldr	r3, [pc, #492]	; (8010e94 <tcp_process+0x594>)
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010cae:	1ad3      	subs	r3, r2, r3
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	dc77      	bgt.n	8010da4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2204      	movs	r2, #4
 8010cb8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d102      	bne.n	8010cc8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010cc2:	23fa      	movs	r3, #250	; 0xfa
 8010cc4:	76bb      	strb	r3, [r7, #26]
 8010cc6:	e01d      	b.n	8010d04 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ccc:	699b      	ldr	r3, [r3, #24]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d106      	bne.n	8010ce0 <tcp_process+0x3e0>
 8010cd2:	4b76      	ldr	r3, [pc, #472]	; (8010eac <tcp_process+0x5ac>)
 8010cd4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010cd8:	4975      	ldr	r1, [pc, #468]	; (8010eb0 <tcp_process+0x5b0>)
 8010cda:	4876      	ldr	r0, [pc, #472]	; (8010eb4 <tcp_process+0x5b4>)
 8010cdc:	f006 fcfc 	bl	80176d8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010ce4:	699b      	ldr	r3, [r3, #24]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d00a      	beq.n	8010d00 <tcp_process+0x400>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010cee:	699b      	ldr	r3, [r3, #24]
 8010cf0:	687a      	ldr	r2, [r7, #4]
 8010cf2:	6910      	ldr	r0, [r2, #16]
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	6879      	ldr	r1, [r7, #4]
 8010cf8:	4798      	blx	r3
 8010cfa:	4603      	mov	r3, r0
 8010cfc:	76bb      	strb	r3, [r7, #26]
 8010cfe:	e001      	b.n	8010d04 <tcp_process+0x404>
 8010d00:	23f0      	movs	r3, #240	; 0xf0
 8010d02:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010d04:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d00a      	beq.n	8010d22 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010d0c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010d10:	f113 0f0d 	cmn.w	r3, #13
 8010d14:	d002      	beq.n	8010d1c <tcp_process+0x41c>
              tcp_abort(pcb);
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f7fd ff8e 	bl	800ec38 <tcp_abort>
            }
            return ERR_ABRT;
 8010d1c:	f06f 030c 	mvn.w	r3, #12
 8010d20:	e1ce      	b.n	80110c0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f000 fae0 	bl	80112e8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010d28:	4b63      	ldr	r3, [pc, #396]	; (8010eb8 <tcp_process+0x5b8>)
 8010d2a:	881b      	ldrh	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d005      	beq.n	8010d3c <tcp_process+0x43c>
            recv_acked--;
 8010d30:	4b61      	ldr	r3, [pc, #388]	; (8010eb8 <tcp_process+0x5b8>)
 8010d32:	881b      	ldrh	r3, [r3, #0]
 8010d34:	3b01      	subs	r3, #1
 8010d36:	b29a      	uxth	r2, r3
 8010d38:	4b5f      	ldr	r3, [pc, #380]	; (8010eb8 <tcp_process+0x5b8>)
 8010d3a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d40:	009a      	lsls	r2, r3, #2
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d46:	005b      	lsls	r3, r3, #1
 8010d48:	f241 111c 	movw	r1, #4380	; 0x111c
 8010d4c:	428b      	cmp	r3, r1
 8010d4e:	bf38      	it	cc
 8010d50:	460b      	movcc	r3, r1
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d204      	bcs.n	8010d60 <tcp_process+0x460>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d5a:	009b      	lsls	r3, r3, #2
 8010d5c:	b29b      	uxth	r3, r3
 8010d5e:	e00d      	b.n	8010d7c <tcp_process+0x47c>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d64:	005b      	lsls	r3, r3, #1
 8010d66:	f241 121c 	movw	r2, #4380	; 0x111c
 8010d6a:	4293      	cmp	r3, r2
 8010d6c:	d904      	bls.n	8010d78 <tcp_process+0x478>
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d72:	005b      	lsls	r3, r3, #1
 8010d74:	b29b      	uxth	r3, r3
 8010d76:	e001      	b.n	8010d7c <tcp_process+0x47c>
 8010d78:	f241 131c 	movw	r3, #4380	; 0x111c
 8010d7c:	687a      	ldr	r2, [r7, #4]
 8010d7e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010d82:	4b4e      	ldr	r3, [pc, #312]	; (8010ebc <tcp_process+0x5bc>)
 8010d84:	781b      	ldrb	r3, [r3, #0]
 8010d86:	f003 0320 	and.w	r3, r3, #32
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d037      	beq.n	8010dfe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	8b5b      	ldrh	r3, [r3, #26]
 8010d92:	f043 0302 	orr.w	r3, r3, #2
 8010d96:	b29a      	uxth	r2, r3
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	2207      	movs	r2, #7
 8010da0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010da2:	e02c      	b.n	8010dfe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010da4:	4b3b      	ldr	r3, [pc, #236]	; (8010e94 <tcp_process+0x594>)
 8010da6:	6819      	ldr	r1, [r3, #0]
 8010da8:	4b3b      	ldr	r3, [pc, #236]	; (8010e98 <tcp_process+0x598>)
 8010daa:	881b      	ldrh	r3, [r3, #0]
 8010dac:	461a      	mov	r2, r3
 8010dae:	4b3b      	ldr	r3, [pc, #236]	; (8010e9c <tcp_process+0x59c>)
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010db4:	4b3a      	ldr	r3, [pc, #232]	; (8010ea0 <tcp_process+0x5a0>)
 8010db6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010db8:	885b      	ldrh	r3, [r3, #2]
 8010dba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010dbc:	4a38      	ldr	r2, [pc, #224]	; (8010ea0 <tcp_process+0x5a0>)
 8010dbe:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010dc0:	8812      	ldrh	r2, [r2, #0]
 8010dc2:	b292      	uxth	r2, r2
 8010dc4:	9202      	str	r2, [sp, #8]
 8010dc6:	9301      	str	r3, [sp, #4]
 8010dc8:	4b36      	ldr	r3, [pc, #216]	; (8010ea4 <tcp_process+0x5a4>)
 8010dca:	9300      	str	r3, [sp, #0]
 8010dcc:	4b36      	ldr	r3, [pc, #216]	; (8010ea8 <tcp_process+0x5a8>)
 8010dce:	4602      	mov	r2, r0
 8010dd0:	6878      	ldr	r0, [r7, #4]
 8010dd2:	f002 fbd1 	bl	8013578 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010dd6:	e167      	b.n	80110a8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010dd8:	4b2d      	ldr	r3, [pc, #180]	; (8010e90 <tcp_process+0x590>)
 8010dda:	781b      	ldrb	r3, [r3, #0]
 8010ddc:	f003 0302 	and.w	r3, r3, #2
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	f000 8161 	beq.w	80110a8 <tcp_process+0x7a8>
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dea:	1e5a      	subs	r2, r3, #1
 8010dec:	4b2b      	ldr	r3, [pc, #172]	; (8010e9c <tcp_process+0x59c>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	429a      	cmp	r2, r3
 8010df2:	f040 8159 	bne.w	80110a8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f002 f9b6 	bl	8013168 <tcp_rexmit>
      break;
 8010dfc:	e154      	b.n	80110a8 <tcp_process+0x7a8>
 8010dfe:	e153      	b.n	80110a8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f000 fa71 	bl	80112e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010e06:	4b2d      	ldr	r3, [pc, #180]	; (8010ebc <tcp_process+0x5bc>)
 8010e08:	781b      	ldrb	r3, [r3, #0]
 8010e0a:	f003 0320 	and.w	r3, r3, #32
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	f000 814c 	beq.w	80110ac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	8b5b      	ldrh	r3, [r3, #26]
 8010e18:	f043 0302 	orr.w	r3, r3, #2
 8010e1c:	b29a      	uxth	r2, r3
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2207      	movs	r2, #7
 8010e26:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010e28:	e140      	b.n	80110ac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f000 fa5c 	bl	80112e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010e30:	4b22      	ldr	r3, [pc, #136]	; (8010ebc <tcp_process+0x5bc>)
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	f003 0320 	and.w	r3, r3, #32
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d071      	beq.n	8010f20 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e3c:	4b14      	ldr	r3, [pc, #80]	; (8010e90 <tcp_process+0x590>)
 8010e3e:	781b      	ldrb	r3, [r3, #0]
 8010e40:	f003 0310 	and.w	r3, r3, #16
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d060      	beq.n	8010f0a <tcp_process+0x60a>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e4c:	4b11      	ldr	r3, [pc, #68]	; (8010e94 <tcp_process+0x594>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d15a      	bne.n	8010f0a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d156      	bne.n	8010f0a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	8b5b      	ldrh	r3, [r3, #26]
 8010e60:	f043 0302 	orr.w	r3, r3, #2
 8010e64:	b29a      	uxth	r2, r3
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	f7fe fdbc 	bl	800f9e8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010e70:	4b13      	ldr	r3, [pc, #76]	; (8010ec0 <tcp_process+0x5c0>)
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	687a      	ldr	r2, [r7, #4]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d105      	bne.n	8010e86 <tcp_process+0x586>
 8010e7a:	4b11      	ldr	r3, [pc, #68]	; (8010ec0 <tcp_process+0x5c0>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	4a0f      	ldr	r2, [pc, #60]	; (8010ec0 <tcp_process+0x5c0>)
 8010e82:	6013      	str	r3, [r2, #0]
 8010e84:	e02e      	b.n	8010ee4 <tcp_process+0x5e4>
 8010e86:	4b0e      	ldr	r3, [pc, #56]	; (8010ec0 <tcp_process+0x5c0>)
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	617b      	str	r3, [r7, #20]
 8010e8c:	e027      	b.n	8010ede <tcp_process+0x5de>
 8010e8e:	bf00      	nop
 8010e90:	2000900c 	.word	0x2000900c
 8010e94:	20009004 	.word	0x20009004
 8010e98:	2000900a 	.word	0x2000900a
 8010e9c:	20009000 	.word	0x20009000
 8010ea0:	20008ff0 	.word	0x20008ff0
 8010ea4:	20005a68 	.word	0x20005a68
 8010ea8:	20005a6c 	.word	0x20005a6c
 8010eac:	080199c4 	.word	0x080199c4
 8010eb0:	08019c64 	.word	0x08019c64
 8010eb4:	08019a10 	.word	0x08019a10
 8010eb8:	20009008 	.word	0x20009008
 8010ebc:	2000900d 	.word	0x2000900d
 8010ec0:	20008fd4 	.word	0x20008fd4
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	687a      	ldr	r2, [r7, #4]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d104      	bne.n	8010ed8 <tcp_process+0x5d8>
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	68da      	ldr	r2, [r3, #12]
 8010ed2:	697b      	ldr	r3, [r7, #20]
 8010ed4:	60da      	str	r2, [r3, #12]
 8010ed6:	e005      	b.n	8010ee4 <tcp_process+0x5e4>
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	68db      	ldr	r3, [r3, #12]
 8010edc:	617b      	str	r3, [r7, #20]
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d1ef      	bne.n	8010ec4 <tcp_process+0x5c4>
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	60da      	str	r2, [r3, #12]
 8010eea:	4b77      	ldr	r3, [pc, #476]	; (80110c8 <tcp_process+0x7c8>)
 8010eec:	2201      	movs	r2, #1
 8010eee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	220a      	movs	r2, #10
 8010ef4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010ef6:	4b75      	ldr	r3, [pc, #468]	; (80110cc <tcp_process+0x7cc>)
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	60da      	str	r2, [r3, #12]
 8010efe:	4a73      	ldr	r2, [pc, #460]	; (80110cc <tcp_process+0x7cc>)
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6013      	str	r3, [r2, #0]
 8010f04:	f002 fcfa 	bl	80138fc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010f08:	e0d2      	b.n	80110b0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	8b5b      	ldrh	r3, [r3, #26]
 8010f0e:	f043 0302 	orr.w	r3, r3, #2
 8010f12:	b29a      	uxth	r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2208      	movs	r2, #8
 8010f1c:	751a      	strb	r2, [r3, #20]
      break;
 8010f1e:	e0c7      	b.n	80110b0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f20:	4b6b      	ldr	r3, [pc, #428]	; (80110d0 <tcp_process+0x7d0>)
 8010f22:	781b      	ldrb	r3, [r3, #0]
 8010f24:	f003 0310 	and.w	r3, r3, #16
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	f000 80c1 	beq.w	80110b0 <tcp_process+0x7b0>
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f32:	4b68      	ldr	r3, [pc, #416]	; (80110d4 <tcp_process+0x7d4>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	429a      	cmp	r2, r3
 8010f38:	f040 80ba 	bne.w	80110b0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	f040 80b5 	bne.w	80110b0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2206      	movs	r2, #6
 8010f4a:	751a      	strb	r2, [r3, #20]
      break;
 8010f4c:	e0b0      	b.n	80110b0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010f4e:	6878      	ldr	r0, [r7, #4]
 8010f50:	f000 f9ca 	bl	80112e8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010f54:	4b60      	ldr	r3, [pc, #384]	; (80110d8 <tcp_process+0x7d8>)
 8010f56:	781b      	ldrb	r3, [r3, #0]
 8010f58:	f003 0320 	and.w	r3, r3, #32
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f000 80a9 	beq.w	80110b4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	8b5b      	ldrh	r3, [r3, #26]
 8010f66:	f043 0302 	orr.w	r3, r3, #2
 8010f6a:	b29a      	uxth	r2, r3
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f7fe fd39 	bl	800f9e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010f76:	4b59      	ldr	r3, [pc, #356]	; (80110dc <tcp_process+0x7dc>)
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d105      	bne.n	8010f8c <tcp_process+0x68c>
 8010f80:	4b56      	ldr	r3, [pc, #344]	; (80110dc <tcp_process+0x7dc>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	68db      	ldr	r3, [r3, #12]
 8010f86:	4a55      	ldr	r2, [pc, #340]	; (80110dc <tcp_process+0x7dc>)
 8010f88:	6013      	str	r3, [r2, #0]
 8010f8a:	e013      	b.n	8010fb4 <tcp_process+0x6b4>
 8010f8c:	4b53      	ldr	r3, [pc, #332]	; (80110dc <tcp_process+0x7dc>)
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	613b      	str	r3, [r7, #16]
 8010f92:	e00c      	b.n	8010fae <tcp_process+0x6ae>
 8010f94:	693b      	ldr	r3, [r7, #16]
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	687a      	ldr	r2, [r7, #4]
 8010f9a:	429a      	cmp	r2, r3
 8010f9c:	d104      	bne.n	8010fa8 <tcp_process+0x6a8>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	68da      	ldr	r2, [r3, #12]
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	60da      	str	r2, [r3, #12]
 8010fa6:	e005      	b.n	8010fb4 <tcp_process+0x6b4>
 8010fa8:	693b      	ldr	r3, [r7, #16]
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	613b      	str	r3, [r7, #16]
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d1ef      	bne.n	8010f94 <tcp_process+0x694>
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	60da      	str	r2, [r3, #12]
 8010fba:	4b43      	ldr	r3, [pc, #268]	; (80110c8 <tcp_process+0x7c8>)
 8010fbc:	2201      	movs	r2, #1
 8010fbe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	220a      	movs	r2, #10
 8010fc4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010fc6:	4b41      	ldr	r3, [pc, #260]	; (80110cc <tcp_process+0x7cc>)
 8010fc8:	681a      	ldr	r2, [r3, #0]
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	60da      	str	r2, [r3, #12]
 8010fce:	4a3f      	ldr	r2, [pc, #252]	; (80110cc <tcp_process+0x7cc>)
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6013      	str	r3, [r2, #0]
 8010fd4:	f002 fc92 	bl	80138fc <tcp_timer_needed>
      }
      break;
 8010fd8:	e06c      	b.n	80110b4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f000 f984 	bl	80112e8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010fe0:	4b3b      	ldr	r3, [pc, #236]	; (80110d0 <tcp_process+0x7d0>)
 8010fe2:	781b      	ldrb	r3, [r3, #0]
 8010fe4:	f003 0310 	and.w	r3, r3, #16
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d065      	beq.n	80110b8 <tcp_process+0x7b8>
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ff0:	4b38      	ldr	r3, [pc, #224]	; (80110d4 <tcp_process+0x7d4>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d15f      	bne.n	80110b8 <tcp_process+0x7b8>
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d15b      	bne.n	80110b8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7fe fcf1 	bl	800f9e8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011006:	4b35      	ldr	r3, [pc, #212]	; (80110dc <tcp_process+0x7dc>)
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	687a      	ldr	r2, [r7, #4]
 801100c:	429a      	cmp	r2, r3
 801100e:	d105      	bne.n	801101c <tcp_process+0x71c>
 8011010:	4b32      	ldr	r3, [pc, #200]	; (80110dc <tcp_process+0x7dc>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	68db      	ldr	r3, [r3, #12]
 8011016:	4a31      	ldr	r2, [pc, #196]	; (80110dc <tcp_process+0x7dc>)
 8011018:	6013      	str	r3, [r2, #0]
 801101a:	e013      	b.n	8011044 <tcp_process+0x744>
 801101c:	4b2f      	ldr	r3, [pc, #188]	; (80110dc <tcp_process+0x7dc>)
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	60fb      	str	r3, [r7, #12]
 8011022:	e00c      	b.n	801103e <tcp_process+0x73e>
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	68db      	ldr	r3, [r3, #12]
 8011028:	687a      	ldr	r2, [r7, #4]
 801102a:	429a      	cmp	r2, r3
 801102c:	d104      	bne.n	8011038 <tcp_process+0x738>
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	68da      	ldr	r2, [r3, #12]
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	60da      	str	r2, [r3, #12]
 8011036:	e005      	b.n	8011044 <tcp_process+0x744>
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	60fb      	str	r3, [r7, #12]
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d1ef      	bne.n	8011024 <tcp_process+0x724>
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2200      	movs	r2, #0
 8011048:	60da      	str	r2, [r3, #12]
 801104a:	4b1f      	ldr	r3, [pc, #124]	; (80110c8 <tcp_process+0x7c8>)
 801104c:	2201      	movs	r2, #1
 801104e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	220a      	movs	r2, #10
 8011054:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011056:	4b1d      	ldr	r3, [pc, #116]	; (80110cc <tcp_process+0x7cc>)
 8011058:	681a      	ldr	r2, [r3, #0]
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	60da      	str	r2, [r3, #12]
 801105e:	4a1b      	ldr	r2, [pc, #108]	; (80110cc <tcp_process+0x7cc>)
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6013      	str	r3, [r2, #0]
 8011064:	f002 fc4a 	bl	80138fc <tcp_timer_needed>
      }
      break;
 8011068:	e026      	b.n	80110b8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f000 f93c 	bl	80112e8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011070:	4b17      	ldr	r3, [pc, #92]	; (80110d0 <tcp_process+0x7d0>)
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	f003 0310 	and.w	r3, r3, #16
 8011078:	2b00      	cmp	r3, #0
 801107a:	d01f      	beq.n	80110bc <tcp_process+0x7bc>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011080:	4b14      	ldr	r3, [pc, #80]	; (80110d4 <tcp_process+0x7d4>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	429a      	cmp	r2, r3
 8011086:	d119      	bne.n	80110bc <tcp_process+0x7bc>
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801108c:	2b00      	cmp	r3, #0
 801108e:	d115      	bne.n	80110bc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011090:	4b11      	ldr	r3, [pc, #68]	; (80110d8 <tcp_process+0x7d8>)
 8011092:	781b      	ldrb	r3, [r3, #0]
 8011094:	f043 0310 	orr.w	r3, r3, #16
 8011098:	b2da      	uxtb	r2, r3
 801109a:	4b0f      	ldr	r3, [pc, #60]	; (80110d8 <tcp_process+0x7d8>)
 801109c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801109e:	e00d      	b.n	80110bc <tcp_process+0x7bc>
    default:
      break;
 80110a0:	bf00      	nop
 80110a2:	e00c      	b.n	80110be <tcp_process+0x7be>
      break;
 80110a4:	bf00      	nop
 80110a6:	e00a      	b.n	80110be <tcp_process+0x7be>
      break;
 80110a8:	bf00      	nop
 80110aa:	e008      	b.n	80110be <tcp_process+0x7be>
      break;
 80110ac:	bf00      	nop
 80110ae:	e006      	b.n	80110be <tcp_process+0x7be>
      break;
 80110b0:	bf00      	nop
 80110b2:	e004      	b.n	80110be <tcp_process+0x7be>
      break;
 80110b4:	bf00      	nop
 80110b6:	e002      	b.n	80110be <tcp_process+0x7be>
      break;
 80110b8:	bf00      	nop
 80110ba:	e000      	b.n	80110be <tcp_process+0x7be>
      break;
 80110bc:	bf00      	nop
  }
  return ERR_OK;
 80110be:	2300      	movs	r3, #0
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3724      	adds	r7, #36	; 0x24
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd90      	pop	{r4, r7, pc}
 80110c8:	20008fdc 	.word	0x20008fdc
 80110cc:	20008fd8 	.word	0x20008fd8
 80110d0:	2000900c 	.word	0x2000900c
 80110d4:	20009004 	.word	0x20009004
 80110d8:	2000900d 	.word	0x2000900d
 80110dc:	20008fd4 	.word	0x20008fd4

080110e0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80110e0:	b590      	push	{r4, r7, lr}
 80110e2:	b085      	sub	sp, #20
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d106      	bne.n	80110fe <tcp_oos_insert_segment+0x1e>
 80110f0:	4b3b      	ldr	r3, [pc, #236]	; (80111e0 <tcp_oos_insert_segment+0x100>)
 80110f2:	f240 421f 	movw	r2, #1055	; 0x41f
 80110f6:	493b      	ldr	r1, [pc, #236]	; (80111e4 <tcp_oos_insert_segment+0x104>)
 80110f8:	483b      	ldr	r0, [pc, #236]	; (80111e8 <tcp_oos_insert_segment+0x108>)
 80110fa:	f006 faed 	bl	80176d8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	68db      	ldr	r3, [r3, #12]
 8011102:	899b      	ldrh	r3, [r3, #12]
 8011104:	b29b      	uxth	r3, r3
 8011106:	4618      	mov	r0, r3
 8011108:	f7fb fc0e 	bl	800c928 <lwip_htons>
 801110c:	4603      	mov	r3, r0
 801110e:	b2db      	uxtb	r3, r3
 8011110:	f003 0301 	and.w	r3, r3, #1
 8011114:	2b00      	cmp	r3, #0
 8011116:	d028      	beq.n	801116a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011118:	6838      	ldr	r0, [r7, #0]
 801111a:	f7fe fa63 	bl	800f5e4 <tcp_segs_free>
    next = NULL;
 801111e:	2300      	movs	r3, #0
 8011120:	603b      	str	r3, [r7, #0]
 8011122:	e056      	b.n	80111d2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	899b      	ldrh	r3, [r3, #12]
 801112a:	b29b      	uxth	r3, r3
 801112c:	4618      	mov	r0, r3
 801112e:	f7fb fbfb 	bl	800c928 <lwip_htons>
 8011132:	4603      	mov	r3, r0
 8011134:	b2db      	uxtb	r3, r3
 8011136:	f003 0301 	and.w	r3, r3, #1
 801113a:	2b00      	cmp	r3, #0
 801113c:	d00d      	beq.n	801115a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	68db      	ldr	r3, [r3, #12]
 8011142:	899b      	ldrh	r3, [r3, #12]
 8011144:	b29c      	uxth	r4, r3
 8011146:	2001      	movs	r0, #1
 8011148:	f7fb fbee 	bl	800c928 <lwip_htons>
 801114c:	4603      	mov	r3, r0
 801114e:	461a      	mov	r2, r3
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	4322      	orrs	r2, r4
 8011156:	b292      	uxth	r2, r2
 8011158:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011164:	68f8      	ldr	r0, [r7, #12]
 8011166:	f7fe fa52 	bl	800f60e <tcp_seg_free>
    while (next &&
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d00e      	beq.n	801118e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	891b      	ldrh	r3, [r3, #8]
 8011174:	461a      	mov	r2, r3
 8011176:	4b1d      	ldr	r3, [pc, #116]	; (80111ec <tcp_oos_insert_segment+0x10c>)
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	441a      	add	r2, r3
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	6839      	ldr	r1, [r7, #0]
 8011184:	8909      	ldrh	r1, [r1, #8]
 8011186:	440b      	add	r3, r1
 8011188:	1ad3      	subs	r3, r2, r3
    while (next &&
 801118a:	2b00      	cmp	r3, #0
 801118c:	daca      	bge.n	8011124 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d01e      	beq.n	80111d2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	891b      	ldrh	r3, [r3, #8]
 8011198:	461a      	mov	r2, r3
 801119a:	4b14      	ldr	r3, [pc, #80]	; (80111ec <tcp_oos_insert_segment+0x10c>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	441a      	add	r2, r3
 80111a0:	683b      	ldr	r3, [r7, #0]
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	685b      	ldr	r3, [r3, #4]
 80111a6:	1ad3      	subs	r3, r2, r3
    if (next &&
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	dd12      	ble.n	80111d2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80111ac:	683b      	ldr	r3, [r7, #0]
 80111ae:	68db      	ldr	r3, [r3, #12]
 80111b0:	685b      	ldr	r3, [r3, #4]
 80111b2:	b29a      	uxth	r2, r3
 80111b4:	4b0d      	ldr	r3, [pc, #52]	; (80111ec <tcp_oos_insert_segment+0x10c>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	b29b      	uxth	r3, r3
 80111ba:	1ad3      	subs	r3, r2, r3
 80111bc:	b29a      	uxth	r2, r3
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	685a      	ldr	r2, [r3, #4]
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	891b      	ldrh	r3, [r3, #8]
 80111ca:	4619      	mov	r1, r3
 80111cc:	4610      	mov	r0, r2
 80111ce:	f7fc fd83 	bl	800dcd8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	683a      	ldr	r2, [r7, #0]
 80111d6:	601a      	str	r2, [r3, #0]
}
 80111d8:	bf00      	nop
 80111da:	3714      	adds	r7, #20
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd90      	pop	{r4, r7, pc}
 80111e0:	080199c4 	.word	0x080199c4
 80111e4:	08019c84 	.word	0x08019c84
 80111e8:	08019a10 	.word	0x08019a10
 80111ec:	20009000 	.word	0x20009000

080111f0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80111f0:	b5b0      	push	{r4, r5, r7, lr}
 80111f2:	b086      	sub	sp, #24
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	60f8      	str	r0, [r7, #12]
 80111f8:	60b9      	str	r1, [r7, #8]
 80111fa:	607a      	str	r2, [r7, #4]
 80111fc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80111fe:	e03e      	b.n	801127e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	4618      	mov	r0, r3
 8011210:	f7fc ff70 	bl	800e0f4 <pbuf_clen>
 8011214:	4603      	mov	r3, r0
 8011216:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801121e:	8a7a      	ldrh	r2, [r7, #18]
 8011220:	429a      	cmp	r2, r3
 8011222:	d906      	bls.n	8011232 <tcp_free_acked_segments+0x42>
 8011224:	4b2a      	ldr	r3, [pc, #168]	; (80112d0 <tcp_free_acked_segments+0xe0>)
 8011226:	f240 4257 	movw	r2, #1111	; 0x457
 801122a:	492a      	ldr	r1, [pc, #168]	; (80112d4 <tcp_free_acked_segments+0xe4>)
 801122c:	482a      	ldr	r0, [pc, #168]	; (80112d8 <tcp_free_acked_segments+0xe8>)
 801122e:	f006 fa53 	bl	80176d8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011238:	8a7b      	ldrh	r3, [r7, #18]
 801123a:	1ad3      	subs	r3, r2, r3
 801123c:	b29a      	uxth	r2, r3
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011244:	697b      	ldr	r3, [r7, #20]
 8011246:	891a      	ldrh	r2, [r3, #8]
 8011248:	4b24      	ldr	r3, [pc, #144]	; (80112dc <tcp_free_acked_segments+0xec>)
 801124a:	881b      	ldrh	r3, [r3, #0]
 801124c:	4413      	add	r3, r2
 801124e:	b29a      	uxth	r2, r3
 8011250:	4b22      	ldr	r3, [pc, #136]	; (80112dc <tcp_free_acked_segments+0xec>)
 8011252:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011254:	6978      	ldr	r0, [r7, #20]
 8011256:	f7fe f9da 	bl	800f60e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011260:	2b00      	cmp	r3, #0
 8011262:	d00c      	beq.n	801127e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d109      	bne.n	801127e <tcp_free_acked_segments+0x8e>
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	2b00      	cmp	r3, #0
 801126e:	d106      	bne.n	801127e <tcp_free_acked_segments+0x8e>
 8011270:	4b17      	ldr	r3, [pc, #92]	; (80112d0 <tcp_free_acked_segments+0xe0>)
 8011272:	f240 4261 	movw	r2, #1121	; 0x461
 8011276:	491a      	ldr	r1, [pc, #104]	; (80112e0 <tcp_free_acked_segments+0xf0>)
 8011278:	4817      	ldr	r0, [pc, #92]	; (80112d8 <tcp_free_acked_segments+0xe8>)
 801127a:	f006 fa2d 	bl	80176d8 <iprintf>
  while (seg_list != NULL &&
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d020      	beq.n	80112c6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011284:	68bb      	ldr	r3, [r7, #8]
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	685b      	ldr	r3, [r3, #4]
 801128a:	4618      	mov	r0, r3
 801128c:	f7fb fb61 	bl	800c952 <lwip_htonl>
 8011290:	4604      	mov	r4, r0
 8011292:	68bb      	ldr	r3, [r7, #8]
 8011294:	891b      	ldrh	r3, [r3, #8]
 8011296:	461d      	mov	r5, r3
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	68db      	ldr	r3, [r3, #12]
 801129c:	899b      	ldrh	r3, [r3, #12]
 801129e:	b29b      	uxth	r3, r3
 80112a0:	4618      	mov	r0, r3
 80112a2:	f7fb fb41 	bl	800c928 <lwip_htons>
 80112a6:	4603      	mov	r3, r0
 80112a8:	b2db      	uxtb	r3, r3
 80112aa:	f003 0303 	and.w	r3, r3, #3
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d001      	beq.n	80112b6 <tcp_free_acked_segments+0xc6>
 80112b2:	2301      	movs	r3, #1
 80112b4:	e000      	b.n	80112b8 <tcp_free_acked_segments+0xc8>
 80112b6:	2300      	movs	r3, #0
 80112b8:	442b      	add	r3, r5
 80112ba:	18e2      	adds	r2, r4, r3
 80112bc:	4b09      	ldr	r3, [pc, #36]	; (80112e4 <tcp_free_acked_segments+0xf4>)
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	dd9c      	ble.n	8011200 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80112c6:	68bb      	ldr	r3, [r7, #8]
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3718      	adds	r7, #24
 80112cc:	46bd      	mov	sp, r7
 80112ce:	bdb0      	pop	{r4, r5, r7, pc}
 80112d0:	080199c4 	.word	0x080199c4
 80112d4:	08019cac 	.word	0x08019cac
 80112d8:	08019a10 	.word	0x08019a10
 80112dc:	20009008 	.word	0x20009008
 80112e0:	08019cd4 	.word	0x08019cd4
 80112e4:	20009004 	.word	0x20009004

080112e8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80112e8:	b5b0      	push	{r4, r5, r7, lr}
 80112ea:	b094      	sub	sp, #80	; 0x50
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80112f0:	2300      	movs	r3, #0
 80112f2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d106      	bne.n	8011308 <tcp_receive+0x20>
 80112fa:	4b91      	ldr	r3, [pc, #580]	; (8011540 <tcp_receive+0x258>)
 80112fc:	f240 427b 	movw	r2, #1147	; 0x47b
 8011300:	4990      	ldr	r1, [pc, #576]	; (8011544 <tcp_receive+0x25c>)
 8011302:	4891      	ldr	r0, [pc, #580]	; (8011548 <tcp_receive+0x260>)
 8011304:	f006 f9e8 	bl	80176d8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	7d1b      	ldrb	r3, [r3, #20]
 801130c:	2b03      	cmp	r3, #3
 801130e:	d806      	bhi.n	801131e <tcp_receive+0x36>
 8011310:	4b8b      	ldr	r3, [pc, #556]	; (8011540 <tcp_receive+0x258>)
 8011312:	f240 427c 	movw	r2, #1148	; 0x47c
 8011316:	498d      	ldr	r1, [pc, #564]	; (801154c <tcp_receive+0x264>)
 8011318:	488b      	ldr	r0, [pc, #556]	; (8011548 <tcp_receive+0x260>)
 801131a:	f006 f9dd 	bl	80176d8 <iprintf>

  if (flags & TCP_ACK) {
 801131e:	4b8c      	ldr	r3, [pc, #560]	; (8011550 <tcp_receive+0x268>)
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	f003 0310 	and.w	r3, r3, #16
 8011326:	2b00      	cmp	r3, #0
 8011328:	f000 8264 	beq.w	80117f4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011332:	461a      	mov	r2, r3
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011338:	4413      	add	r3, r2
 801133a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011340:	4b84      	ldr	r3, [pc, #528]	; (8011554 <tcp_receive+0x26c>)
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	1ad3      	subs	r3, r2, r3
 8011346:	2b00      	cmp	r3, #0
 8011348:	db1b      	blt.n	8011382 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801134e:	4b81      	ldr	r3, [pc, #516]	; (8011554 <tcp_receive+0x26c>)
 8011350:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8011352:	429a      	cmp	r2, r3
 8011354:	d106      	bne.n	8011364 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801135a:	4b7f      	ldr	r3, [pc, #508]	; (8011558 <tcp_receive+0x270>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	1ad3      	subs	r3, r2, r3
 8011360:	2b00      	cmp	r3, #0
 8011362:	db0e      	blt.n	8011382 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011368:	4b7b      	ldr	r3, [pc, #492]	; (8011558 <tcp_receive+0x270>)
 801136a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801136c:	429a      	cmp	r2, r3
 801136e:	d125      	bne.n	80113bc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011370:	4b7a      	ldr	r3, [pc, #488]	; (801155c <tcp_receive+0x274>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	89db      	ldrh	r3, [r3, #14]
 8011376:	b29a      	uxth	r2, r3
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801137e:	429a      	cmp	r2, r3
 8011380:	d91c      	bls.n	80113bc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011382:	4b76      	ldr	r3, [pc, #472]	; (801155c <tcp_receive+0x274>)
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	89db      	ldrh	r3, [r3, #14]
 8011388:	b29a      	uxth	r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801139c:	429a      	cmp	r2, r3
 801139e:	d205      	bcs.n	80113ac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80113ac:	4b69      	ldr	r3, [pc, #420]	; (8011554 <tcp_receive+0x26c>)
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80113b4:	4b68      	ldr	r3, [pc, #416]	; (8011558 <tcp_receive+0x270>)
 80113b6:	681a      	ldr	r2, [r3, #0]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80113bc:	4b66      	ldr	r3, [pc, #408]	; (8011558 <tcp_receive+0x270>)
 80113be:	681a      	ldr	r2, [r3, #0]
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113c4:	1ad3      	subs	r3, r2, r3
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	dc58      	bgt.n	801147c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80113ca:	4b65      	ldr	r3, [pc, #404]	; (8011560 <tcp_receive+0x278>)
 80113cc:	881b      	ldrh	r3, [r3, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d14b      	bne.n	801146a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80113d6:	687a      	ldr	r2, [r7, #4]
 80113d8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80113dc:	4413      	add	r3, r2
 80113de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80113e0:	429a      	cmp	r2, r3
 80113e2:	d142      	bne.n	801146a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	db3d      	blt.n	801146a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80113f2:	4b59      	ldr	r3, [pc, #356]	; (8011558 <tcp_receive+0x270>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d137      	bne.n	801146a <tcp_receive+0x182>
              found_dupack = 1;
 80113fa:	2301      	movs	r3, #1
 80113fc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011404:	2bff      	cmp	r3, #255	; 0xff
 8011406:	d007      	beq.n	8011418 <tcp_receive+0x130>
                ++pcb->dupacks;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801140e:	3301      	adds	r3, #1
 8011410:	b2da      	uxtb	r2, r3
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801141e:	2b03      	cmp	r3, #3
 8011420:	d91b      	bls.n	801145a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801142c:	4413      	add	r3, r2
 801142e:	b29a      	uxth	r2, r3
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011436:	429a      	cmp	r2, r3
 8011438:	d30a      	bcc.n	8011450 <tcp_receive+0x168>
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011444:	4413      	add	r3, r2
 8011446:	b29a      	uxth	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801144e:	e004      	b.n	801145a <tcp_receive+0x172>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011456:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011460:	2b02      	cmp	r3, #2
 8011462:	d902      	bls.n	801146a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f001 feeb 	bl	8013240 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801146a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801146c:	2b00      	cmp	r3, #0
 801146e:	f040 8161 	bne.w	8011734 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2200      	movs	r2, #0
 8011476:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801147a:	e15b      	b.n	8011734 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801147c:	4b36      	ldr	r3, [pc, #216]	; (8011558 <tcp_receive+0x270>)
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011484:	1ad3      	subs	r3, r2, r3
 8011486:	3b01      	subs	r3, #1
 8011488:	2b00      	cmp	r3, #0
 801148a:	f2c0 814e 	blt.w	801172a <tcp_receive+0x442>
 801148e:	4b32      	ldr	r3, [pc, #200]	; (8011558 <tcp_receive+0x270>)
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011496:	1ad3      	subs	r3, r2, r3
 8011498:	2b00      	cmp	r3, #0
 801149a:	f300 8146 	bgt.w	801172a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	8b5b      	ldrh	r3, [r3, #26]
 80114a2:	f003 0304 	and.w	r3, r3, #4
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d010      	beq.n	80114cc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	8b5b      	ldrh	r3, [r3, #26]
 80114ae:	f023 0304 	bic.w	r3, r3, #4
 80114b2:	b29a      	uxth	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2200      	movs	r2, #0
 80114c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2200      	movs	r2, #0
 80114d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80114da:	10db      	asrs	r3, r3, #3
 80114dc:	b21b      	sxth	r3, r3
 80114de:	b29a      	uxth	r2, r3
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80114e6:	b29b      	uxth	r3, r3
 80114e8:	4413      	add	r3, r2
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	b21a      	sxth	r2, r3
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80114f4:	4b18      	ldr	r3, [pc, #96]	; (8011558 <tcp_receive+0x270>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	b29a      	uxth	r2, r3
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114fe:	b29b      	uxth	r3, r3
 8011500:	1ad3      	subs	r3, r2, r3
 8011502:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2200      	movs	r2, #0
 8011508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801150c:	4b12      	ldr	r3, [pc, #72]	; (8011558 <tcp_receive+0x270>)
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	7d1b      	ldrb	r3, [r3, #20]
 8011518:	2b03      	cmp	r3, #3
 801151a:	f240 8097 	bls.w	801164c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801152a:	429a      	cmp	r2, r3
 801152c:	d245      	bcs.n	80115ba <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	8b5b      	ldrh	r3, [r3, #26]
 8011532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011536:	2b00      	cmp	r3, #0
 8011538:	d014      	beq.n	8011564 <tcp_receive+0x27c>
 801153a:	2301      	movs	r3, #1
 801153c:	e013      	b.n	8011566 <tcp_receive+0x27e>
 801153e:	bf00      	nop
 8011540:	080199c4 	.word	0x080199c4
 8011544:	08019cf4 	.word	0x08019cf4
 8011548:	08019a10 	.word	0x08019a10
 801154c:	08019d10 	.word	0x08019d10
 8011550:	2000900c 	.word	0x2000900c
 8011554:	20009000 	.word	0x20009000
 8011558:	20009004 	.word	0x20009004
 801155c:	20008ff0 	.word	0x20008ff0
 8011560:	2000900a 	.word	0x2000900a
 8011564:	2302      	movs	r3, #2
 8011566:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801156a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801156e:	b29a      	uxth	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011574:	fb12 f303 	smulbb	r3, r2, r3
 8011578:	b29b      	uxth	r3, r3
 801157a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801157c:	4293      	cmp	r3, r2
 801157e:	bf28      	it	cs
 8011580:	4613      	movcs	r3, r2
 8011582:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801158a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801158c:	4413      	add	r3, r2
 801158e:	b29a      	uxth	r2, r3
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011596:	429a      	cmp	r2, r3
 8011598:	d309      	bcc.n	80115ae <tcp_receive+0x2c6>
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80115a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80115a2:	4413      	add	r3, r2
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80115ac:	e04e      	b.n	801164c <tcp_receive+0x364>
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80115b8:	e048      	b.n	801164c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80115c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80115c2:	4413      	add	r3, r2
 80115c4:	b29a      	uxth	r2, r3
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80115cc:	429a      	cmp	r2, r3
 80115ce:	d309      	bcc.n	80115e4 <tcp_receive+0x2fc>
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80115d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80115d8:	4413      	add	r3, r2
 80115da:	b29a      	uxth	r2, r3
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80115e2:	e004      	b.n	80115ee <tcp_receive+0x306>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115fa:	429a      	cmp	r2, r3
 80115fc:	d326      	bcc.n	801164c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801160a:	1ad3      	subs	r3, r2, r3
 801160c:	b29a      	uxth	r2, r3
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801161e:	4413      	add	r3, r2
 8011620:	b29a      	uxth	r2, r3
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011628:	429a      	cmp	r2, r3
 801162a:	d30a      	bcc.n	8011642 <tcp_receive+0x35a>
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011636:	4413      	add	r3, r2
 8011638:	b29a      	uxth	r2, r3
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011640:	e004      	b.n	801164c <tcp_receive+0x364>
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011648:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011654:	4a98      	ldr	r2, [pc, #608]	; (80118b8 <tcp_receive+0x5d0>)
 8011656:	6878      	ldr	r0, [r7, #4]
 8011658:	f7ff fdca 	bl	80111f0 <tcp_free_acked_segments>
 801165c:	4602      	mov	r2, r0
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801166a:	4a94      	ldr	r2, [pc, #592]	; (80118bc <tcp_receive+0x5d4>)
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f7ff fdbf 	bl	80111f0 <tcp_free_acked_segments>
 8011672:	4602      	mov	r2, r0
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801167c:	2b00      	cmp	r3, #0
 801167e:	d104      	bne.n	801168a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011686:	861a      	strh	r2, [r3, #48]	; 0x30
 8011688:	e002      	b.n	8011690 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2200      	movs	r2, #0
 801168e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2200      	movs	r2, #0
 8011694:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801169a:	2b00      	cmp	r3, #0
 801169c:	d103      	bne.n	80116a6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2200      	movs	r2, #0
 80116a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80116ac:	4b84      	ldr	r3, [pc, #528]	; (80118c0 <tcp_receive+0x5d8>)
 80116ae:	881b      	ldrh	r3, [r3, #0]
 80116b0:	4413      	add	r3, r2
 80116b2:	b29a      	uxth	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	8b5b      	ldrh	r3, [r3, #26]
 80116be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d035      	beq.n	8011732 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d118      	bne.n	8011700 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d00c      	beq.n	80116f0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	685b      	ldr	r3, [r3, #4]
 80116e2:	4618      	mov	r0, r3
 80116e4:	f7fb f935 	bl	800c952 <lwip_htonl>
 80116e8:	4603      	mov	r3, r0
 80116ea:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	dc20      	bgt.n	8011732 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	8b5b      	ldrh	r3, [r3, #26]
 80116f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116fe:	e018      	b.n	8011732 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011708:	68db      	ldr	r3, [r3, #12]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	4618      	mov	r0, r3
 801170e:	f7fb f920 	bl	800c952 <lwip_htonl>
 8011712:	4603      	mov	r3, r0
 8011714:	1ae3      	subs	r3, r4, r3
 8011716:	2b00      	cmp	r3, #0
 8011718:	dc0b      	bgt.n	8011732 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	8b5b      	ldrh	r3, [r3, #26]
 801171e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011722:	b29a      	uxth	r2, r3
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011728:	e003      	b.n	8011732 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f001 ff76 	bl	801361c <tcp_send_empty_ack>
 8011730:	e000      	b.n	8011734 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011732:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011738:	2b00      	cmp	r3, #0
 801173a:	d05b      	beq.n	80117f4 <tcp_receive+0x50c>
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011740:	4b60      	ldr	r3, [pc, #384]	; (80118c4 <tcp_receive+0x5dc>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	1ad3      	subs	r3, r2, r3
 8011746:	2b00      	cmp	r3, #0
 8011748:	da54      	bge.n	80117f4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801174a:	4b5f      	ldr	r3, [pc, #380]	; (80118c8 <tcp_receive+0x5e0>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	b29a      	uxth	r2, r3
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011754:	b29b      	uxth	r3, r3
 8011756:	1ad3      	subs	r3, r2, r3
 8011758:	b29b      	uxth	r3, r3
 801175a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801175e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011768:	10db      	asrs	r3, r3, #3
 801176a:	b21b      	sxth	r3, r3
 801176c:	b29b      	uxth	r3, r3
 801176e:	1ad3      	subs	r3, r2, r3
 8011770:	b29b      	uxth	r3, r3
 8011772:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801177c:	b29a      	uxth	r2, r3
 801177e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011782:	4413      	add	r3, r2
 8011784:	b29b      	uxth	r3, r3
 8011786:	b21a      	sxth	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801178c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011790:	2b00      	cmp	r3, #0
 8011792:	da05      	bge.n	80117a0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011794:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011798:	425b      	negs	r3, r3
 801179a:	b29b      	uxth	r3, r3
 801179c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80117a0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80117aa:	109b      	asrs	r3, r3, #2
 80117ac:	b21b      	sxth	r3, r3
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	1ad3      	subs	r3, r2, r3
 80117b2:	b29b      	uxth	r3, r3
 80117b4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80117be:	b29a      	uxth	r2, r3
 80117c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80117c4:	4413      	add	r3, r2
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	b21a      	sxth	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80117d4:	10db      	asrs	r3, r3, #3
 80117d6:	b21b      	sxth	r3, r3
 80117d8:	b29a      	uxth	r2, r3
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80117e0:	b29b      	uxth	r3, r3
 80117e2:	4413      	add	r3, r2
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	b21a      	sxth	r2, r3
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2200      	movs	r2, #0
 80117f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80117f4:	4b35      	ldr	r3, [pc, #212]	; (80118cc <tcp_receive+0x5e4>)
 80117f6:	881b      	ldrh	r3, [r3, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	f000 84e2 	beq.w	80121c2 <tcp_receive+0xeda>
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	7d1b      	ldrb	r3, [r3, #20]
 8011802:	2b06      	cmp	r3, #6
 8011804:	f200 84dd 	bhi.w	80121c2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801180c:	4b30      	ldr	r3, [pc, #192]	; (80118d0 <tcp_receive+0x5e8>)
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	1ad3      	subs	r3, r2, r3
 8011812:	3b01      	subs	r3, #1
 8011814:	2b00      	cmp	r3, #0
 8011816:	f2c0 808f 	blt.w	8011938 <tcp_receive+0x650>
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801181e:	4b2b      	ldr	r3, [pc, #172]	; (80118cc <tcp_receive+0x5e4>)
 8011820:	881b      	ldrh	r3, [r3, #0]
 8011822:	4619      	mov	r1, r3
 8011824:	4b2a      	ldr	r3, [pc, #168]	; (80118d0 <tcp_receive+0x5e8>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	440b      	add	r3, r1
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	3301      	adds	r3, #1
 801182e:	2b00      	cmp	r3, #0
 8011830:	f300 8082 	bgt.w	8011938 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8011834:	4b27      	ldr	r3, [pc, #156]	; (80118d4 <tcp_receive+0x5ec>)
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801183e:	4b24      	ldr	r3, [pc, #144]	; (80118d0 <tcp_receive+0x5e8>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	1ad3      	subs	r3, r2, r3
 8011844:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011846:	4b23      	ldr	r3, [pc, #140]	; (80118d4 <tcp_receive+0x5ec>)
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d106      	bne.n	801185c <tcp_receive+0x574>
 801184e:	4b22      	ldr	r3, [pc, #136]	; (80118d8 <tcp_receive+0x5f0>)
 8011850:	f240 5294 	movw	r2, #1428	; 0x594
 8011854:	4921      	ldr	r1, [pc, #132]	; (80118dc <tcp_receive+0x5f4>)
 8011856:	4822      	ldr	r0, [pc, #136]	; (80118e0 <tcp_receive+0x5f8>)
 8011858:	f005 ff3e 	bl	80176d8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011862:	4293      	cmp	r3, r2
 8011864:	d906      	bls.n	8011874 <tcp_receive+0x58c>
 8011866:	4b1c      	ldr	r3, [pc, #112]	; (80118d8 <tcp_receive+0x5f0>)
 8011868:	f240 5295 	movw	r2, #1429	; 0x595
 801186c:	491d      	ldr	r1, [pc, #116]	; (80118e4 <tcp_receive+0x5fc>)
 801186e:	481c      	ldr	r0, [pc, #112]	; (80118e0 <tcp_receive+0x5f8>)
 8011870:	f005 ff32 	bl	80176d8 <iprintf>
      off = (u16_t)off32;
 8011874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011876:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801187a:	4b16      	ldr	r3, [pc, #88]	; (80118d4 <tcp_receive+0x5ec>)
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	891b      	ldrh	r3, [r3, #8]
 8011880:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011884:	429a      	cmp	r2, r3
 8011886:	d906      	bls.n	8011896 <tcp_receive+0x5ae>
 8011888:	4b13      	ldr	r3, [pc, #76]	; (80118d8 <tcp_receive+0x5f0>)
 801188a:	f240 5297 	movw	r2, #1431	; 0x597
 801188e:	4916      	ldr	r1, [pc, #88]	; (80118e8 <tcp_receive+0x600>)
 8011890:	4813      	ldr	r0, [pc, #76]	; (80118e0 <tcp_receive+0x5f8>)
 8011892:	f005 ff21 	bl	80176d8 <iprintf>
      inseg.len -= off;
 8011896:	4b0f      	ldr	r3, [pc, #60]	; (80118d4 <tcp_receive+0x5ec>)
 8011898:	891a      	ldrh	r2, [r3, #8]
 801189a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801189e:	1ad3      	subs	r3, r2, r3
 80118a0:	b29a      	uxth	r2, r3
 80118a2:	4b0c      	ldr	r3, [pc, #48]	; (80118d4 <tcp_receive+0x5ec>)
 80118a4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80118a6:	4b0b      	ldr	r3, [pc, #44]	; (80118d4 <tcp_receive+0x5ec>)
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	891a      	ldrh	r2, [r3, #8]
 80118ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80118b0:	1ad3      	subs	r3, r2, r3
 80118b2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80118b4:	e02a      	b.n	801190c <tcp_receive+0x624>
 80118b6:	bf00      	nop
 80118b8:	08019d2c 	.word	0x08019d2c
 80118bc:	08019d34 	.word	0x08019d34
 80118c0:	20009008 	.word	0x20009008
 80118c4:	20009004 	.word	0x20009004
 80118c8:	20008fc8 	.word	0x20008fc8
 80118cc:	2000900a 	.word	0x2000900a
 80118d0:	20009000 	.word	0x20009000
 80118d4:	20008fe0 	.word	0x20008fe0
 80118d8:	080199c4 	.word	0x080199c4
 80118dc:	08019d3c 	.word	0x08019d3c
 80118e0:	08019a10 	.word	0x08019a10
 80118e4:	08019d4c 	.word	0x08019d4c
 80118e8:	08019d5c 	.word	0x08019d5c
        off -= p->len;
 80118ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118ee:	895b      	ldrh	r3, [r3, #10]
 80118f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80118f4:	1ad3      	subs	r3, r2, r3
 80118f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80118fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80118fe:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011902:	2200      	movs	r2, #0
 8011904:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8011906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801190c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801190e:	895b      	ldrh	r3, [r3, #10]
 8011910:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011914:	429a      	cmp	r2, r3
 8011916:	d8e9      	bhi.n	80118ec <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8011918:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801191c:	4619      	mov	r1, r3
 801191e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011920:	f7fc fada 	bl	800ded8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011928:	4a91      	ldr	r2, [pc, #580]	; (8011b70 <tcp_receive+0x888>)
 801192a:	6013      	str	r3, [r2, #0]
 801192c:	4b91      	ldr	r3, [pc, #580]	; (8011b74 <tcp_receive+0x88c>)
 801192e:	68db      	ldr	r3, [r3, #12]
 8011930:	4a8f      	ldr	r2, [pc, #572]	; (8011b70 <tcp_receive+0x888>)
 8011932:	6812      	ldr	r2, [r2, #0]
 8011934:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8011936:	e00d      	b.n	8011954 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8011938:	4b8d      	ldr	r3, [pc, #564]	; (8011b70 <tcp_receive+0x888>)
 801193a:	681a      	ldr	r2, [r3, #0]
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011940:	1ad3      	subs	r3, r2, r3
 8011942:	2b00      	cmp	r3, #0
 8011944:	da06      	bge.n	8011954 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	8b5b      	ldrh	r3, [r3, #26]
 801194a:	f043 0302 	orr.w	r3, r3, #2
 801194e:	b29a      	uxth	r2, r3
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011954:	4b86      	ldr	r3, [pc, #536]	; (8011b70 <tcp_receive+0x888>)
 8011956:	681a      	ldr	r2, [r3, #0]
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801195c:	1ad3      	subs	r3, r2, r3
 801195e:	2b00      	cmp	r3, #0
 8011960:	f2c0 842a 	blt.w	80121b8 <tcp_receive+0xed0>
 8011964:	4b82      	ldr	r3, [pc, #520]	; (8011b70 <tcp_receive+0x888>)
 8011966:	681a      	ldr	r2, [r3, #0]
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801196c:	6879      	ldr	r1, [r7, #4]
 801196e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011970:	440b      	add	r3, r1
 8011972:	1ad3      	subs	r3, r2, r3
 8011974:	3301      	adds	r3, #1
 8011976:	2b00      	cmp	r3, #0
 8011978:	f300 841e 	bgt.w	80121b8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011980:	4b7b      	ldr	r3, [pc, #492]	; (8011b70 <tcp_receive+0x888>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	429a      	cmp	r2, r3
 8011986:	f040 829a 	bne.w	8011ebe <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801198a:	4b7a      	ldr	r3, [pc, #488]	; (8011b74 <tcp_receive+0x88c>)
 801198c:	891c      	ldrh	r4, [r3, #8]
 801198e:	4b79      	ldr	r3, [pc, #484]	; (8011b74 <tcp_receive+0x88c>)
 8011990:	68db      	ldr	r3, [r3, #12]
 8011992:	899b      	ldrh	r3, [r3, #12]
 8011994:	b29b      	uxth	r3, r3
 8011996:	4618      	mov	r0, r3
 8011998:	f7fa ffc6 	bl	800c928 <lwip_htons>
 801199c:	4603      	mov	r3, r0
 801199e:	b2db      	uxtb	r3, r3
 80119a0:	f003 0303 	and.w	r3, r3, #3
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d001      	beq.n	80119ac <tcp_receive+0x6c4>
 80119a8:	2301      	movs	r3, #1
 80119aa:	e000      	b.n	80119ae <tcp_receive+0x6c6>
 80119ac:	2300      	movs	r3, #0
 80119ae:	4423      	add	r3, r4
 80119b0:	b29a      	uxth	r2, r3
 80119b2:	4b71      	ldr	r3, [pc, #452]	; (8011b78 <tcp_receive+0x890>)
 80119b4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80119ba:	4b6f      	ldr	r3, [pc, #444]	; (8011b78 <tcp_receive+0x890>)
 80119bc:	881b      	ldrh	r3, [r3, #0]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d275      	bcs.n	8011aae <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80119c2:	4b6c      	ldr	r3, [pc, #432]	; (8011b74 <tcp_receive+0x88c>)
 80119c4:	68db      	ldr	r3, [r3, #12]
 80119c6:	899b      	ldrh	r3, [r3, #12]
 80119c8:	b29b      	uxth	r3, r3
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7fa ffac 	bl	800c928 <lwip_htons>
 80119d0:	4603      	mov	r3, r0
 80119d2:	b2db      	uxtb	r3, r3
 80119d4:	f003 0301 	and.w	r3, r3, #1
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d01f      	beq.n	8011a1c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80119dc:	4b65      	ldr	r3, [pc, #404]	; (8011b74 <tcp_receive+0x88c>)
 80119de:	68db      	ldr	r3, [r3, #12]
 80119e0:	899b      	ldrh	r3, [r3, #12]
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	b21b      	sxth	r3, r3
 80119e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80119ea:	b21c      	sxth	r4, r3
 80119ec:	4b61      	ldr	r3, [pc, #388]	; (8011b74 <tcp_receive+0x88c>)
 80119ee:	68db      	ldr	r3, [r3, #12]
 80119f0:	899b      	ldrh	r3, [r3, #12]
 80119f2:	b29b      	uxth	r3, r3
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7fa ff97 	bl	800c928 <lwip_htons>
 80119fa:	4603      	mov	r3, r0
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011a04:	b29b      	uxth	r3, r3
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7fa ff8e 	bl	800c928 <lwip_htons>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	b21b      	sxth	r3, r3
 8011a10:	4323      	orrs	r3, r4
 8011a12:	b21a      	sxth	r2, r3
 8011a14:	4b57      	ldr	r3, [pc, #348]	; (8011b74 <tcp_receive+0x88c>)
 8011a16:	68db      	ldr	r3, [r3, #12]
 8011a18:	b292      	uxth	r2, r2
 8011a1a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011a20:	4b54      	ldr	r3, [pc, #336]	; (8011b74 <tcp_receive+0x88c>)
 8011a22:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011a24:	4b53      	ldr	r3, [pc, #332]	; (8011b74 <tcp_receive+0x88c>)
 8011a26:	68db      	ldr	r3, [r3, #12]
 8011a28:	899b      	ldrh	r3, [r3, #12]
 8011a2a:	b29b      	uxth	r3, r3
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7fa ff7b 	bl	800c928 <lwip_htons>
 8011a32:	4603      	mov	r3, r0
 8011a34:	b2db      	uxtb	r3, r3
 8011a36:	f003 0302 	and.w	r3, r3, #2
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d005      	beq.n	8011a4a <tcp_receive+0x762>
            inseg.len -= 1;
 8011a3e:	4b4d      	ldr	r3, [pc, #308]	; (8011b74 <tcp_receive+0x88c>)
 8011a40:	891b      	ldrh	r3, [r3, #8]
 8011a42:	3b01      	subs	r3, #1
 8011a44:	b29a      	uxth	r2, r3
 8011a46:	4b4b      	ldr	r3, [pc, #300]	; (8011b74 <tcp_receive+0x88c>)
 8011a48:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011a4a:	4b4a      	ldr	r3, [pc, #296]	; (8011b74 <tcp_receive+0x88c>)
 8011a4c:	685b      	ldr	r3, [r3, #4]
 8011a4e:	4a49      	ldr	r2, [pc, #292]	; (8011b74 <tcp_receive+0x88c>)
 8011a50:	8912      	ldrh	r2, [r2, #8]
 8011a52:	4611      	mov	r1, r2
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fc f93f 	bl	800dcd8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011a5a:	4b46      	ldr	r3, [pc, #280]	; (8011b74 <tcp_receive+0x88c>)
 8011a5c:	891c      	ldrh	r4, [r3, #8]
 8011a5e:	4b45      	ldr	r3, [pc, #276]	; (8011b74 <tcp_receive+0x88c>)
 8011a60:	68db      	ldr	r3, [r3, #12]
 8011a62:	899b      	ldrh	r3, [r3, #12]
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	4618      	mov	r0, r3
 8011a68:	f7fa ff5e 	bl	800c928 <lwip_htons>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	b2db      	uxtb	r3, r3
 8011a70:	f003 0303 	and.w	r3, r3, #3
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d001      	beq.n	8011a7c <tcp_receive+0x794>
 8011a78:	2301      	movs	r3, #1
 8011a7a:	e000      	b.n	8011a7e <tcp_receive+0x796>
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	4423      	add	r3, r4
 8011a80:	b29a      	uxth	r2, r3
 8011a82:	4b3d      	ldr	r3, [pc, #244]	; (8011b78 <tcp_receive+0x890>)
 8011a84:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011a86:	4b3c      	ldr	r3, [pc, #240]	; (8011b78 <tcp_receive+0x890>)
 8011a88:	881b      	ldrh	r3, [r3, #0]
 8011a8a:	461a      	mov	r2, r3
 8011a8c:	4b38      	ldr	r3, [pc, #224]	; (8011b70 <tcp_receive+0x888>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	441a      	add	r2, r3
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a96:	6879      	ldr	r1, [r7, #4]
 8011a98:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a9a:	440b      	add	r3, r1
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d006      	beq.n	8011aae <tcp_receive+0x7c6>
 8011aa0:	4b36      	ldr	r3, [pc, #216]	; (8011b7c <tcp_receive+0x894>)
 8011aa2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011aa6:	4936      	ldr	r1, [pc, #216]	; (8011b80 <tcp_receive+0x898>)
 8011aa8:	4836      	ldr	r0, [pc, #216]	; (8011b84 <tcp_receive+0x89c>)
 8011aaa:	f005 fe15 	bl	80176d8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	f000 80e7 	beq.w	8011c86 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011ab8:	4b2e      	ldr	r3, [pc, #184]	; (8011b74 <tcp_receive+0x88c>)
 8011aba:	68db      	ldr	r3, [r3, #12]
 8011abc:	899b      	ldrh	r3, [r3, #12]
 8011abe:	b29b      	uxth	r3, r3
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7fa ff31 	bl	800c928 <lwip_htons>
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	b2db      	uxtb	r3, r3
 8011aca:	f003 0301 	and.w	r3, r3, #1
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d010      	beq.n	8011af4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011ad2:	e00a      	b.n	8011aea <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ad8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ade:	681a      	ldr	r2, [r3, #0]
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011ae4:	68f8      	ldr	r0, [r7, #12]
 8011ae6:	f7fd fd92 	bl	800f60e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d1f0      	bne.n	8011ad4 <tcp_receive+0x7ec>
 8011af2:	e0c8      	b.n	8011c86 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011af8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011afa:	e052      	b.n	8011ba2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	899b      	ldrh	r3, [r3, #12]
 8011b02:	b29b      	uxth	r3, r3
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7fa ff0f 	bl	800c928 <lwip_htons>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	b2db      	uxtb	r3, r3
 8011b0e:	f003 0301 	and.w	r3, r3, #1
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d03d      	beq.n	8011b92 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011b16:	4b17      	ldr	r3, [pc, #92]	; (8011b74 <tcp_receive+0x88c>)
 8011b18:	68db      	ldr	r3, [r3, #12]
 8011b1a:	899b      	ldrh	r3, [r3, #12]
 8011b1c:	b29b      	uxth	r3, r3
 8011b1e:	4618      	mov	r0, r3
 8011b20:	f7fa ff02 	bl	800c928 <lwip_htons>
 8011b24:	4603      	mov	r3, r0
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d130      	bne.n	8011b92 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011b30:	4b10      	ldr	r3, [pc, #64]	; (8011b74 <tcp_receive+0x88c>)
 8011b32:	68db      	ldr	r3, [r3, #12]
 8011b34:	899b      	ldrh	r3, [r3, #12]
 8011b36:	b29c      	uxth	r4, r3
 8011b38:	2001      	movs	r0, #1
 8011b3a:	f7fa fef5 	bl	800c928 <lwip_htons>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	461a      	mov	r2, r3
 8011b42:	4b0c      	ldr	r3, [pc, #48]	; (8011b74 <tcp_receive+0x88c>)
 8011b44:	68db      	ldr	r3, [r3, #12]
 8011b46:	4322      	orrs	r2, r4
 8011b48:	b292      	uxth	r2, r2
 8011b4a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011b4c:	4b09      	ldr	r3, [pc, #36]	; (8011b74 <tcp_receive+0x88c>)
 8011b4e:	891c      	ldrh	r4, [r3, #8]
 8011b50:	4b08      	ldr	r3, [pc, #32]	; (8011b74 <tcp_receive+0x88c>)
 8011b52:	68db      	ldr	r3, [r3, #12]
 8011b54:	899b      	ldrh	r3, [r3, #12]
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f7fa fee5 	bl	800c928 <lwip_htons>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	b2db      	uxtb	r3, r3
 8011b62:	f003 0303 	and.w	r3, r3, #3
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d00e      	beq.n	8011b88 <tcp_receive+0x8a0>
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	e00d      	b.n	8011b8a <tcp_receive+0x8a2>
 8011b6e:	bf00      	nop
 8011b70:	20009000 	.word	0x20009000
 8011b74:	20008fe0 	.word	0x20008fe0
 8011b78:	2000900a 	.word	0x2000900a
 8011b7c:	080199c4 	.word	0x080199c4
 8011b80:	08019d6c 	.word	0x08019d6c
 8011b84:	08019a10 	.word	0x08019a10
 8011b88:	2300      	movs	r3, #0
 8011b8a:	4423      	add	r3, r4
 8011b8c:	b29a      	uxth	r2, r3
 8011b8e:	4b98      	ldr	r3, [pc, #608]	; (8011df0 <tcp_receive+0xb08>)
 8011b90:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b94:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011b9c:	6938      	ldr	r0, [r7, #16]
 8011b9e:	f7fd fd36 	bl	800f60e <tcp_seg_free>
            while (next &&
 8011ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d00e      	beq.n	8011bc6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011ba8:	4b91      	ldr	r3, [pc, #580]	; (8011df0 <tcp_receive+0xb08>)
 8011baa:	881b      	ldrh	r3, [r3, #0]
 8011bac:	461a      	mov	r2, r3
 8011bae:	4b91      	ldr	r3, [pc, #580]	; (8011df4 <tcp_receive+0xb0c>)
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	441a      	add	r2, r3
 8011bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bb6:	68db      	ldr	r3, [r3, #12]
 8011bb8:	685b      	ldr	r3, [r3, #4]
 8011bba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011bbc:	8909      	ldrh	r1, [r1, #8]
 8011bbe:	440b      	add	r3, r1
 8011bc0:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	da9a      	bge.n	8011afc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d059      	beq.n	8011c80 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011bcc:	4b88      	ldr	r3, [pc, #544]	; (8011df0 <tcp_receive+0xb08>)
 8011bce:	881b      	ldrh	r3, [r3, #0]
 8011bd0:	461a      	mov	r2, r3
 8011bd2:	4b88      	ldr	r3, [pc, #544]	; (8011df4 <tcp_receive+0xb0c>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	441a      	add	r2, r3
 8011bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	dd4d      	ble.n	8011c80 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	685b      	ldr	r3, [r3, #4]
 8011bea:	b29a      	uxth	r2, r3
 8011bec:	4b81      	ldr	r3, [pc, #516]	; (8011df4 <tcp_receive+0xb0c>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	b29b      	uxth	r3, r3
 8011bf2:	1ad3      	subs	r3, r2, r3
 8011bf4:	b29a      	uxth	r2, r3
 8011bf6:	4b80      	ldr	r3, [pc, #512]	; (8011df8 <tcp_receive+0xb10>)
 8011bf8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011bfa:	4b7f      	ldr	r3, [pc, #508]	; (8011df8 <tcp_receive+0xb10>)
 8011bfc:	68db      	ldr	r3, [r3, #12]
 8011bfe:	899b      	ldrh	r3, [r3, #12]
 8011c00:	b29b      	uxth	r3, r3
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fa fe90 	bl	800c928 <lwip_htons>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	b2db      	uxtb	r3, r3
 8011c0c:	f003 0302 	and.w	r3, r3, #2
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d005      	beq.n	8011c20 <tcp_receive+0x938>
                inseg.len -= 1;
 8011c14:	4b78      	ldr	r3, [pc, #480]	; (8011df8 <tcp_receive+0xb10>)
 8011c16:	891b      	ldrh	r3, [r3, #8]
 8011c18:	3b01      	subs	r3, #1
 8011c1a:	b29a      	uxth	r2, r3
 8011c1c:	4b76      	ldr	r3, [pc, #472]	; (8011df8 <tcp_receive+0xb10>)
 8011c1e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011c20:	4b75      	ldr	r3, [pc, #468]	; (8011df8 <tcp_receive+0xb10>)
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	4a74      	ldr	r2, [pc, #464]	; (8011df8 <tcp_receive+0xb10>)
 8011c26:	8912      	ldrh	r2, [r2, #8]
 8011c28:	4611      	mov	r1, r2
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f7fc f854 	bl	800dcd8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011c30:	4b71      	ldr	r3, [pc, #452]	; (8011df8 <tcp_receive+0xb10>)
 8011c32:	891c      	ldrh	r4, [r3, #8]
 8011c34:	4b70      	ldr	r3, [pc, #448]	; (8011df8 <tcp_receive+0xb10>)
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	899b      	ldrh	r3, [r3, #12]
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7fa fe73 	bl	800c928 <lwip_htons>
 8011c42:	4603      	mov	r3, r0
 8011c44:	b2db      	uxtb	r3, r3
 8011c46:	f003 0303 	and.w	r3, r3, #3
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d001      	beq.n	8011c52 <tcp_receive+0x96a>
 8011c4e:	2301      	movs	r3, #1
 8011c50:	e000      	b.n	8011c54 <tcp_receive+0x96c>
 8011c52:	2300      	movs	r3, #0
 8011c54:	4423      	add	r3, r4
 8011c56:	b29a      	uxth	r2, r3
 8011c58:	4b65      	ldr	r3, [pc, #404]	; (8011df0 <tcp_receive+0xb08>)
 8011c5a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011c5c:	4b64      	ldr	r3, [pc, #400]	; (8011df0 <tcp_receive+0xb08>)
 8011c5e:	881b      	ldrh	r3, [r3, #0]
 8011c60:	461a      	mov	r2, r3
 8011c62:	4b64      	ldr	r3, [pc, #400]	; (8011df4 <tcp_receive+0xb0c>)
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	441a      	add	r2, r3
 8011c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c6a:	68db      	ldr	r3, [r3, #12]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	429a      	cmp	r2, r3
 8011c70:	d006      	beq.n	8011c80 <tcp_receive+0x998>
 8011c72:	4b62      	ldr	r3, [pc, #392]	; (8011dfc <tcp_receive+0xb14>)
 8011c74:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011c78:	4961      	ldr	r1, [pc, #388]	; (8011e00 <tcp_receive+0xb18>)
 8011c7a:	4862      	ldr	r0, [pc, #392]	; (8011e04 <tcp_receive+0xb1c>)
 8011c7c:	f005 fd2c 	bl	80176d8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c84:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011c86:	4b5a      	ldr	r3, [pc, #360]	; (8011df0 <tcp_receive+0xb08>)
 8011c88:	881b      	ldrh	r3, [r3, #0]
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	4b59      	ldr	r3, [pc, #356]	; (8011df4 <tcp_receive+0xb0c>)
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	441a      	add	r2, r3
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c9a:	4b55      	ldr	r3, [pc, #340]	; (8011df0 <tcp_receive+0xb08>)
 8011c9c:	881b      	ldrh	r3, [r3, #0]
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d206      	bcs.n	8011cb0 <tcp_receive+0x9c8>
 8011ca2:	4b56      	ldr	r3, [pc, #344]	; (8011dfc <tcp_receive+0xb14>)
 8011ca4:	f240 6207 	movw	r2, #1543	; 0x607
 8011ca8:	4957      	ldr	r1, [pc, #348]	; (8011e08 <tcp_receive+0xb20>)
 8011caa:	4856      	ldr	r0, [pc, #344]	; (8011e04 <tcp_receive+0xb1c>)
 8011cac:	f005 fd14 	bl	80176d8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011cb4:	4b4e      	ldr	r3, [pc, #312]	; (8011df0 <tcp_receive+0xb08>)
 8011cb6:	881b      	ldrh	r3, [r3, #0]
 8011cb8:	1ad3      	subs	r3, r2, r3
 8011cba:	b29a      	uxth	r2, r3
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f7fc ffc5 	bl	800ec50 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011cc6:	4b4c      	ldr	r3, [pc, #304]	; (8011df8 <tcp_receive+0xb10>)
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	891b      	ldrh	r3, [r3, #8]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d006      	beq.n	8011cde <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011cd0:	4b49      	ldr	r3, [pc, #292]	; (8011df8 <tcp_receive+0xb10>)
 8011cd2:	685b      	ldr	r3, [r3, #4]
 8011cd4:	4a4d      	ldr	r2, [pc, #308]	; (8011e0c <tcp_receive+0xb24>)
 8011cd6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011cd8:	4b47      	ldr	r3, [pc, #284]	; (8011df8 <tcp_receive+0xb10>)
 8011cda:	2200      	movs	r2, #0
 8011cdc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011cde:	4b46      	ldr	r3, [pc, #280]	; (8011df8 <tcp_receive+0xb10>)
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	899b      	ldrh	r3, [r3, #12]
 8011ce4:	b29b      	uxth	r3, r3
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7fa fe1e 	bl	800c928 <lwip_htons>
 8011cec:	4603      	mov	r3, r0
 8011cee:	b2db      	uxtb	r3, r3
 8011cf0:	f003 0301 	and.w	r3, r3, #1
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	f000 80b8 	beq.w	8011e6a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011cfa:	4b45      	ldr	r3, [pc, #276]	; (8011e10 <tcp_receive+0xb28>)
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	f043 0320 	orr.w	r3, r3, #32
 8011d02:	b2da      	uxtb	r2, r3
 8011d04:	4b42      	ldr	r3, [pc, #264]	; (8011e10 <tcp_receive+0xb28>)
 8011d06:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011d08:	e0af      	b.n	8011e6a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d0e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011d14:	68db      	ldr	r3, [r3, #12]
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	4a36      	ldr	r2, [pc, #216]	; (8011df4 <tcp_receive+0xb0c>)
 8011d1a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	891b      	ldrh	r3, [r3, #8]
 8011d20:	461c      	mov	r4, r3
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	68db      	ldr	r3, [r3, #12]
 8011d26:	899b      	ldrh	r3, [r3, #12]
 8011d28:	b29b      	uxth	r3, r3
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7fa fdfc 	bl	800c928 <lwip_htons>
 8011d30:	4603      	mov	r3, r0
 8011d32:	b2db      	uxtb	r3, r3
 8011d34:	f003 0303 	and.w	r3, r3, #3
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d001      	beq.n	8011d40 <tcp_receive+0xa58>
 8011d3c:	2301      	movs	r3, #1
 8011d3e:	e000      	b.n	8011d42 <tcp_receive+0xa5a>
 8011d40:	2300      	movs	r3, #0
 8011d42:	191a      	adds	r2, r3, r4
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d48:	441a      	add	r2, r3
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d52:	461c      	mov	r4, r3
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	891b      	ldrh	r3, [r3, #8]
 8011d58:	461d      	mov	r5, r3
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	68db      	ldr	r3, [r3, #12]
 8011d5e:	899b      	ldrh	r3, [r3, #12]
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7fa fde0 	bl	800c928 <lwip_htons>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	b2db      	uxtb	r3, r3
 8011d6c:	f003 0303 	and.w	r3, r3, #3
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d001      	beq.n	8011d78 <tcp_receive+0xa90>
 8011d74:	2301      	movs	r3, #1
 8011d76:	e000      	b.n	8011d7a <tcp_receive+0xa92>
 8011d78:	2300      	movs	r3, #0
 8011d7a:	442b      	add	r3, r5
 8011d7c:	429c      	cmp	r4, r3
 8011d7e:	d206      	bcs.n	8011d8e <tcp_receive+0xaa6>
 8011d80:	4b1e      	ldr	r3, [pc, #120]	; (8011dfc <tcp_receive+0xb14>)
 8011d82:	f240 622b 	movw	r2, #1579	; 0x62b
 8011d86:	4923      	ldr	r1, [pc, #140]	; (8011e14 <tcp_receive+0xb2c>)
 8011d88:	481e      	ldr	r0, [pc, #120]	; (8011e04 <tcp_receive+0xb1c>)
 8011d8a:	f005 fca5 	bl	80176d8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	891b      	ldrh	r3, [r3, #8]
 8011d92:	461c      	mov	r4, r3
 8011d94:	68bb      	ldr	r3, [r7, #8]
 8011d96:	68db      	ldr	r3, [r3, #12]
 8011d98:	899b      	ldrh	r3, [r3, #12]
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f7fa fdc3 	bl	800c928 <lwip_htons>
 8011da2:	4603      	mov	r3, r0
 8011da4:	b2db      	uxtb	r3, r3
 8011da6:	f003 0303 	and.w	r3, r3, #3
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d001      	beq.n	8011db2 <tcp_receive+0xaca>
 8011dae:	2301      	movs	r3, #1
 8011db0:	e000      	b.n	8011db4 <tcp_receive+0xacc>
 8011db2:	2300      	movs	r3, #0
 8011db4:	1919      	adds	r1, r3, r4
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011dba:	b28b      	uxth	r3, r1
 8011dbc:	1ad3      	subs	r3, r2, r3
 8011dbe:	b29a      	uxth	r2, r3
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f7fc ff43 	bl	800ec50 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	685b      	ldr	r3, [r3, #4]
 8011dce:	891b      	ldrh	r3, [r3, #8]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d028      	beq.n	8011e26 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011dd4:	4b0d      	ldr	r3, [pc, #52]	; (8011e0c <tcp_receive+0xb24>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d01d      	beq.n	8011e18 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011ddc:	4b0b      	ldr	r3, [pc, #44]	; (8011e0c <tcp_receive+0xb24>)
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	685b      	ldr	r3, [r3, #4]
 8011de4:	4619      	mov	r1, r3
 8011de6:	4610      	mov	r0, r2
 8011de8:	f7fc f9be 	bl	800e168 <pbuf_cat>
 8011dec:	e018      	b.n	8011e20 <tcp_receive+0xb38>
 8011dee:	bf00      	nop
 8011df0:	2000900a 	.word	0x2000900a
 8011df4:	20009000 	.word	0x20009000
 8011df8:	20008fe0 	.word	0x20008fe0
 8011dfc:	080199c4 	.word	0x080199c4
 8011e00:	08019da4 	.word	0x08019da4
 8011e04:	08019a10 	.word	0x08019a10
 8011e08:	08019de0 	.word	0x08019de0
 8011e0c:	20009010 	.word	0x20009010
 8011e10:	2000900d 	.word	0x2000900d
 8011e14:	08019e00 	.word	0x08019e00
            } else {
              recv_data = cseg->p;
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	4a70      	ldr	r2, [pc, #448]	; (8011fe0 <tcp_receive+0xcf8>)
 8011e1e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	2200      	movs	r2, #0
 8011e24:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	68db      	ldr	r3, [r3, #12]
 8011e2a:	899b      	ldrh	r3, [r3, #12]
 8011e2c:	b29b      	uxth	r3, r3
 8011e2e:	4618      	mov	r0, r3
 8011e30:	f7fa fd7a 	bl	800c928 <lwip_htons>
 8011e34:	4603      	mov	r3, r0
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	f003 0301 	and.w	r3, r3, #1
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d00d      	beq.n	8011e5c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011e40:	4b68      	ldr	r3, [pc, #416]	; (8011fe4 <tcp_receive+0xcfc>)
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	f043 0320 	orr.w	r3, r3, #32
 8011e48:	b2da      	uxtb	r2, r3
 8011e4a:	4b66      	ldr	r3, [pc, #408]	; (8011fe4 <tcp_receive+0xcfc>)
 8011e4c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	7d1b      	ldrb	r3, [r3, #20]
 8011e52:	2b04      	cmp	r3, #4
 8011e54:	d102      	bne.n	8011e5c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2207      	movs	r2, #7
 8011e5a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011e5c:	68bb      	ldr	r3, [r7, #8]
 8011e5e:	681a      	ldr	r2, [r3, #0]
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011e64:	68b8      	ldr	r0, [r7, #8]
 8011e66:	f7fd fbd2 	bl	800f60e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d008      	beq.n	8011e84 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e76:	68db      	ldr	r3, [r3, #12]
 8011e78:	685a      	ldr	r2, [r3, #4]
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	f43f af43 	beq.w	8011d0a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	8b5b      	ldrh	r3, [r3, #26]
 8011e88:	f003 0301 	and.w	r3, r3, #1
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d00e      	beq.n	8011eae <tcp_receive+0xbc6>
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	8b5b      	ldrh	r3, [r3, #26]
 8011e94:	f023 0301 	bic.w	r3, r3, #1
 8011e98:	b29a      	uxth	r2, r3
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	835a      	strh	r2, [r3, #26]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	8b5b      	ldrh	r3, [r3, #26]
 8011ea2:	f043 0302 	orr.w	r3, r3, #2
 8011ea6:	b29a      	uxth	r2, r3
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011eac:	e188      	b.n	80121c0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	8b5b      	ldrh	r3, [r3, #26]
 8011eb2:	f043 0301 	orr.w	r3, r3, #1
 8011eb6:	b29a      	uxth	r2, r3
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011ebc:	e180      	b.n	80121c0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d106      	bne.n	8011ed4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011ec6:	4848      	ldr	r0, [pc, #288]	; (8011fe8 <tcp_receive+0xd00>)
 8011ec8:	f7fd fbba 	bl	800f640 <tcp_seg_copy>
 8011ecc:	4602      	mov	r2, r0
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	675a      	str	r2, [r3, #116]	; 0x74
 8011ed2:	e16d      	b.n	80121b0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011edc:	63bb      	str	r3, [r7, #56]	; 0x38
 8011ede:	e157      	b.n	8012190 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ee2:	68db      	ldr	r3, [r3, #12]
 8011ee4:	685a      	ldr	r2, [r3, #4]
 8011ee6:	4b41      	ldr	r3, [pc, #260]	; (8011fec <tcp_receive+0xd04>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d11d      	bne.n	8011f2a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011eee:	4b3e      	ldr	r3, [pc, #248]	; (8011fe8 <tcp_receive+0xd00>)
 8011ef0:	891a      	ldrh	r2, [r3, #8]
 8011ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ef4:	891b      	ldrh	r3, [r3, #8]
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	f240 814f 	bls.w	801219a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011efc:	483a      	ldr	r0, [pc, #232]	; (8011fe8 <tcp_receive+0xd00>)
 8011efe:	f7fd fb9f 	bl	800f640 <tcp_seg_copy>
 8011f02:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	f000 8149 	beq.w	801219e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d003      	beq.n	8011f1a <tcp_receive+0xc32>
                    prev->next = cseg;
 8011f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f14:	697a      	ldr	r2, [r7, #20]
 8011f16:	601a      	str	r2, [r3, #0]
 8011f18:	e002      	b.n	8011f20 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	697a      	ldr	r2, [r7, #20]
 8011f1e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011f20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011f22:	6978      	ldr	r0, [r7, #20]
 8011f24:	f7ff f8dc 	bl	80110e0 <tcp_oos_insert_segment>
                }
                break;
 8011f28:	e139      	b.n	801219e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d117      	bne.n	8011f60 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011f30:	4b2e      	ldr	r3, [pc, #184]	; (8011fec <tcp_receive+0xd04>)
 8011f32:	681a      	ldr	r2, [r3, #0]
 8011f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f36:	68db      	ldr	r3, [r3, #12]
 8011f38:	685b      	ldr	r3, [r3, #4]
 8011f3a:	1ad3      	subs	r3, r2, r3
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	da57      	bge.n	8011ff0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011f40:	4829      	ldr	r0, [pc, #164]	; (8011fe8 <tcp_receive+0xd00>)
 8011f42:	f7fd fb7d 	bl	800f640 <tcp_seg_copy>
 8011f46:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011f48:	69bb      	ldr	r3, [r7, #24]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	f000 8129 	beq.w	80121a2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	69ba      	ldr	r2, [r7, #24]
 8011f54:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011f56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011f58:	69b8      	ldr	r0, [r7, #24]
 8011f5a:	f7ff f8c1 	bl	80110e0 <tcp_oos_insert_segment>
                  }
                  break;
 8011f5e:	e120      	b.n	80121a2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011f60:	4b22      	ldr	r3, [pc, #136]	; (8011fec <tcp_receive+0xd04>)
 8011f62:	681a      	ldr	r2, [r3, #0]
 8011f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f66:	68db      	ldr	r3, [r3, #12]
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	1ad3      	subs	r3, r2, r3
 8011f6c:	3b01      	subs	r3, #1
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	db3e      	blt.n	8011ff0 <tcp_receive+0xd08>
 8011f72:	4b1e      	ldr	r3, [pc, #120]	; (8011fec <tcp_receive+0xd04>)
 8011f74:	681a      	ldr	r2, [r3, #0]
 8011f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f78:	68db      	ldr	r3, [r3, #12]
 8011f7a:	685b      	ldr	r3, [r3, #4]
 8011f7c:	1ad3      	subs	r3, r2, r3
 8011f7e:	3301      	adds	r3, #1
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	dc35      	bgt.n	8011ff0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011f84:	4818      	ldr	r0, [pc, #96]	; (8011fe8 <tcp_receive+0xd00>)
 8011f86:	f7fd fb5b 	bl	800f640 <tcp_seg_copy>
 8011f8a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011f8c:	69fb      	ldr	r3, [r7, #28]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	f000 8109 	beq.w	80121a6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	685b      	ldr	r3, [r3, #4]
 8011f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f9c:	8912      	ldrh	r2, [r2, #8]
 8011f9e:	441a      	add	r2, r3
 8011fa0:	4b12      	ldr	r3, [pc, #72]	; (8011fec <tcp_receive+0xd04>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	1ad3      	subs	r3, r2, r3
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	dd12      	ble.n	8011fd0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011faa:	4b10      	ldr	r3, [pc, #64]	; (8011fec <tcp_receive+0xd04>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	b29a      	uxth	r2, r3
 8011fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	b29b      	uxth	r3, r3
 8011fb8:	1ad3      	subs	r3, r2, r3
 8011fba:	b29a      	uxth	r2, r3
 8011fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fbe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fc2:	685a      	ldr	r2, [r3, #4]
 8011fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fc6:	891b      	ldrh	r3, [r3, #8]
 8011fc8:	4619      	mov	r1, r3
 8011fca:	4610      	mov	r0, r2
 8011fcc:	f7fb fe84 	bl	800dcd8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fd2:	69fa      	ldr	r2, [r7, #28]
 8011fd4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011fd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011fd8:	69f8      	ldr	r0, [r7, #28]
 8011fda:	f7ff f881 	bl	80110e0 <tcp_oos_insert_segment>
                  }
                  break;
 8011fde:	e0e2      	b.n	80121a6 <tcp_receive+0xebe>
 8011fe0:	20009010 	.word	0x20009010
 8011fe4:	2000900d 	.word	0x2000900d
 8011fe8:	20008fe0 	.word	0x20008fe0
 8011fec:	20009000 	.word	0x20009000
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f040 80c6 	bne.w	801218a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011ffe:	4b80      	ldr	r3, [pc, #512]	; (8012200 <tcp_receive+0xf18>)
 8012000:	681a      	ldr	r2, [r3, #0]
 8012002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012004:	68db      	ldr	r3, [r3, #12]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801200a:	2b00      	cmp	r3, #0
 801200c:	f340 80bd 	ble.w	801218a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	899b      	ldrh	r3, [r3, #12]
 8012016:	b29b      	uxth	r3, r3
 8012018:	4618      	mov	r0, r3
 801201a:	f7fa fc85 	bl	800c928 <lwip_htons>
 801201e:	4603      	mov	r3, r0
 8012020:	b2db      	uxtb	r3, r3
 8012022:	f003 0301 	and.w	r3, r3, #1
 8012026:	2b00      	cmp	r3, #0
 8012028:	f040 80bf 	bne.w	80121aa <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801202c:	4875      	ldr	r0, [pc, #468]	; (8012204 <tcp_receive+0xf1c>)
 801202e:	f7fd fb07 	bl	800f640 <tcp_seg_copy>
 8012032:	4602      	mov	r2, r0
 8012034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012036:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	2b00      	cmp	r3, #0
 801203e:	f000 80b6 	beq.w	80121ae <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012044:	68db      	ldr	r3, [r3, #12]
 8012046:	685b      	ldr	r3, [r3, #4]
 8012048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801204a:	8912      	ldrh	r2, [r2, #8]
 801204c:	441a      	add	r2, r3
 801204e:	4b6c      	ldr	r3, [pc, #432]	; (8012200 <tcp_receive+0xf18>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	1ad3      	subs	r3, r2, r3
 8012054:	2b00      	cmp	r3, #0
 8012056:	dd12      	ble.n	801207e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012058:	4b69      	ldr	r3, [pc, #420]	; (8012200 <tcp_receive+0xf18>)
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	b29a      	uxth	r2, r3
 801205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012060:	68db      	ldr	r3, [r3, #12]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	b29b      	uxth	r3, r3
 8012066:	1ad3      	subs	r3, r2, r3
 8012068:	b29a      	uxth	r2, r3
 801206a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801206c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801206e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012070:	685a      	ldr	r2, [r3, #4]
 8012072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012074:	891b      	ldrh	r3, [r3, #8]
 8012076:	4619      	mov	r1, r3
 8012078:	4610      	mov	r0, r2
 801207a:	f7fb fe2d 	bl	800dcd8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801207e:	4b62      	ldr	r3, [pc, #392]	; (8012208 <tcp_receive+0xf20>)
 8012080:	881b      	ldrh	r3, [r3, #0]
 8012082:	461a      	mov	r2, r3
 8012084:	4b5e      	ldr	r3, [pc, #376]	; (8012200 <tcp_receive+0xf18>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	441a      	add	r2, r3
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801208e:	6879      	ldr	r1, [r7, #4]
 8012090:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012092:	440b      	add	r3, r1
 8012094:	1ad3      	subs	r3, r2, r3
 8012096:	2b00      	cmp	r3, #0
 8012098:	f340 8089 	ble.w	80121ae <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	68db      	ldr	r3, [r3, #12]
 80120a2:	899b      	ldrh	r3, [r3, #12]
 80120a4:	b29b      	uxth	r3, r3
 80120a6:	4618      	mov	r0, r3
 80120a8:	f7fa fc3e 	bl	800c928 <lwip_htons>
 80120ac:	4603      	mov	r3, r0
 80120ae:	b2db      	uxtb	r3, r3
 80120b0:	f003 0301 	and.w	r3, r3, #1
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d022      	beq.n	80120fe <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80120b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	68db      	ldr	r3, [r3, #12]
 80120be:	899b      	ldrh	r3, [r3, #12]
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	b21b      	sxth	r3, r3
 80120c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80120c8:	b21c      	sxth	r4, r3
 80120ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	899b      	ldrh	r3, [r3, #12]
 80120d2:	b29b      	uxth	r3, r3
 80120d4:	4618      	mov	r0, r3
 80120d6:	f7fa fc27 	bl	800c928 <lwip_htons>
 80120da:	4603      	mov	r3, r0
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	b29b      	uxth	r3, r3
 80120e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7fa fc1e 	bl	800c928 <lwip_htons>
 80120ec:	4603      	mov	r3, r0
 80120ee:	b21b      	sxth	r3, r3
 80120f0:	4323      	orrs	r3, r4
 80120f2:	b21a      	sxth	r2, r3
 80120f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	68db      	ldr	r3, [r3, #12]
 80120fa:	b292      	uxth	r2, r2
 80120fc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012102:	b29a      	uxth	r2, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012108:	4413      	add	r3, r2
 801210a:	b299      	uxth	r1, r3
 801210c:	4b3c      	ldr	r3, [pc, #240]	; (8012200 <tcp_receive+0xf18>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	b29a      	uxth	r2, r3
 8012112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	1a8a      	subs	r2, r1, r2
 8012118:	b292      	uxth	r2, r2
 801211a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	685a      	ldr	r2, [r3, #4]
 8012122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	891b      	ldrh	r3, [r3, #8]
 8012128:	4619      	mov	r1, r3
 801212a:	4610      	mov	r0, r2
 801212c:	f7fb fdd4 	bl	800dcd8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	891c      	ldrh	r4, [r3, #8]
 8012136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	68db      	ldr	r3, [r3, #12]
 801213c:	899b      	ldrh	r3, [r3, #12]
 801213e:	b29b      	uxth	r3, r3
 8012140:	4618      	mov	r0, r3
 8012142:	f7fa fbf1 	bl	800c928 <lwip_htons>
 8012146:	4603      	mov	r3, r0
 8012148:	b2db      	uxtb	r3, r3
 801214a:	f003 0303 	and.w	r3, r3, #3
 801214e:	2b00      	cmp	r3, #0
 8012150:	d001      	beq.n	8012156 <tcp_receive+0xe6e>
 8012152:	2301      	movs	r3, #1
 8012154:	e000      	b.n	8012158 <tcp_receive+0xe70>
 8012156:	2300      	movs	r3, #0
 8012158:	4423      	add	r3, r4
 801215a:	b29a      	uxth	r2, r3
 801215c:	4b2a      	ldr	r3, [pc, #168]	; (8012208 <tcp_receive+0xf20>)
 801215e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012160:	4b29      	ldr	r3, [pc, #164]	; (8012208 <tcp_receive+0xf20>)
 8012162:	881b      	ldrh	r3, [r3, #0]
 8012164:	461a      	mov	r2, r3
 8012166:	4b26      	ldr	r3, [pc, #152]	; (8012200 <tcp_receive+0xf18>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	441a      	add	r2, r3
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012170:	6879      	ldr	r1, [r7, #4]
 8012172:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012174:	440b      	add	r3, r1
 8012176:	429a      	cmp	r2, r3
 8012178:	d019      	beq.n	80121ae <tcp_receive+0xec6>
 801217a:	4b24      	ldr	r3, [pc, #144]	; (801220c <tcp_receive+0xf24>)
 801217c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012180:	4923      	ldr	r1, [pc, #140]	; (8012210 <tcp_receive+0xf28>)
 8012182:	4824      	ldr	r0, [pc, #144]	; (8012214 <tcp_receive+0xf2c>)
 8012184:	f005 faa8 	bl	80176d8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012188:	e011      	b.n	80121ae <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801218a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012192:	2b00      	cmp	r3, #0
 8012194:	f47f aea4 	bne.w	8011ee0 <tcp_receive+0xbf8>
 8012198:	e00a      	b.n	80121b0 <tcp_receive+0xec8>
                break;
 801219a:	bf00      	nop
 801219c:	e008      	b.n	80121b0 <tcp_receive+0xec8>
                break;
 801219e:	bf00      	nop
 80121a0:	e006      	b.n	80121b0 <tcp_receive+0xec8>
                  break;
 80121a2:	bf00      	nop
 80121a4:	e004      	b.n	80121b0 <tcp_receive+0xec8>
                  break;
 80121a6:	bf00      	nop
 80121a8:	e002      	b.n	80121b0 <tcp_receive+0xec8>
                  break;
 80121aa:	bf00      	nop
 80121ac:	e000      	b.n	80121b0 <tcp_receive+0xec8>
                break;
 80121ae:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80121b0:	6878      	ldr	r0, [r7, #4]
 80121b2:	f001 fa33 	bl	801361c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80121b6:	e003      	b.n	80121c0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f001 fa2f 	bl	801361c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80121be:	e01a      	b.n	80121f6 <tcp_receive+0xf0e>
 80121c0:	e019      	b.n	80121f6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80121c2:	4b0f      	ldr	r3, [pc, #60]	; (8012200 <tcp_receive+0xf18>)
 80121c4:	681a      	ldr	r2, [r3, #0]
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ca:	1ad3      	subs	r3, r2, r3
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	db0a      	blt.n	80121e6 <tcp_receive+0xefe>
 80121d0:	4b0b      	ldr	r3, [pc, #44]	; (8012200 <tcp_receive+0xf18>)
 80121d2:	681a      	ldr	r2, [r3, #0]
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d8:	6879      	ldr	r1, [r7, #4]
 80121da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80121dc:	440b      	add	r3, r1
 80121de:	1ad3      	subs	r3, r2, r3
 80121e0:	3301      	adds	r3, #1
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	dd07      	ble.n	80121f6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	8b5b      	ldrh	r3, [r3, #26]
 80121ea:	f043 0302 	orr.w	r3, r3, #2
 80121ee:	b29a      	uxth	r2, r3
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80121f4:	e7ff      	b.n	80121f6 <tcp_receive+0xf0e>
 80121f6:	bf00      	nop
 80121f8:	3750      	adds	r7, #80	; 0x50
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bdb0      	pop	{r4, r5, r7, pc}
 80121fe:	bf00      	nop
 8012200:	20009000 	.word	0x20009000
 8012204:	20008fe0 	.word	0x20008fe0
 8012208:	2000900a 	.word	0x2000900a
 801220c:	080199c4 	.word	0x080199c4
 8012210:	08019d6c 	.word	0x08019d6c
 8012214:	08019a10 	.word	0x08019a10

08012218 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012218:	b480      	push	{r7}
 801221a:	b083      	sub	sp, #12
 801221c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801221e:	4b15      	ldr	r3, [pc, #84]	; (8012274 <tcp_get_next_optbyte+0x5c>)
 8012220:	881b      	ldrh	r3, [r3, #0]
 8012222:	1c5a      	adds	r2, r3, #1
 8012224:	b291      	uxth	r1, r2
 8012226:	4a13      	ldr	r2, [pc, #76]	; (8012274 <tcp_get_next_optbyte+0x5c>)
 8012228:	8011      	strh	r1, [r2, #0]
 801222a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801222c:	4b12      	ldr	r3, [pc, #72]	; (8012278 <tcp_get_next_optbyte+0x60>)
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d004      	beq.n	801223e <tcp_get_next_optbyte+0x26>
 8012234:	4b11      	ldr	r3, [pc, #68]	; (801227c <tcp_get_next_optbyte+0x64>)
 8012236:	881b      	ldrh	r3, [r3, #0]
 8012238:	88fa      	ldrh	r2, [r7, #6]
 801223a:	429a      	cmp	r2, r3
 801223c:	d208      	bcs.n	8012250 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801223e:	4b10      	ldr	r3, [pc, #64]	; (8012280 <tcp_get_next_optbyte+0x68>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	3314      	adds	r3, #20
 8012244:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012246:	88fb      	ldrh	r3, [r7, #6]
 8012248:	683a      	ldr	r2, [r7, #0]
 801224a:	4413      	add	r3, r2
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	e00b      	b.n	8012268 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012250:	88fb      	ldrh	r3, [r7, #6]
 8012252:	b2da      	uxtb	r2, r3
 8012254:	4b09      	ldr	r3, [pc, #36]	; (801227c <tcp_get_next_optbyte+0x64>)
 8012256:	881b      	ldrh	r3, [r3, #0]
 8012258:	b2db      	uxtb	r3, r3
 801225a:	1ad3      	subs	r3, r2, r3
 801225c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801225e:	4b06      	ldr	r3, [pc, #24]	; (8012278 <tcp_get_next_optbyte+0x60>)
 8012260:	681a      	ldr	r2, [r3, #0]
 8012262:	797b      	ldrb	r3, [r7, #5]
 8012264:	4413      	add	r3, r2
 8012266:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012268:	4618      	mov	r0, r3
 801226a:	370c      	adds	r7, #12
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr
 8012274:	20008ffc 	.word	0x20008ffc
 8012278:	20008ff8 	.word	0x20008ff8
 801227c:	20008ff6 	.word	0x20008ff6
 8012280:	20008ff0 	.word	0x20008ff0

08012284 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b084      	sub	sp, #16
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d106      	bne.n	80122a0 <tcp_parseopt+0x1c>
 8012292:	4b32      	ldr	r3, [pc, #200]	; (801235c <tcp_parseopt+0xd8>)
 8012294:	f240 727d 	movw	r2, #1917	; 0x77d
 8012298:	4931      	ldr	r1, [pc, #196]	; (8012360 <tcp_parseopt+0xdc>)
 801229a:	4832      	ldr	r0, [pc, #200]	; (8012364 <tcp_parseopt+0xe0>)
 801229c:	f005 fa1c 	bl	80176d8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80122a0:	4b31      	ldr	r3, [pc, #196]	; (8012368 <tcp_parseopt+0xe4>)
 80122a2:	881b      	ldrh	r3, [r3, #0]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d055      	beq.n	8012354 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80122a8:	4b30      	ldr	r3, [pc, #192]	; (801236c <tcp_parseopt+0xe8>)
 80122aa:	2200      	movs	r2, #0
 80122ac:	801a      	strh	r2, [r3, #0]
 80122ae:	e045      	b.n	801233c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 80122b0:	f7ff ffb2 	bl	8012218 <tcp_get_next_optbyte>
 80122b4:	4603      	mov	r3, r0
 80122b6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80122b8:	7bfb      	ldrb	r3, [r7, #15]
 80122ba:	2b02      	cmp	r3, #2
 80122bc:	d006      	beq.n	80122cc <tcp_parseopt+0x48>
 80122be:	2b02      	cmp	r3, #2
 80122c0:	dc2b      	bgt.n	801231a <tcp_parseopt+0x96>
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d041      	beq.n	801234a <tcp_parseopt+0xc6>
 80122c6:	2b01      	cmp	r3, #1
 80122c8:	d127      	bne.n	801231a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80122ca:	e037      	b.n	801233c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80122cc:	f7ff ffa4 	bl	8012218 <tcp_get_next_optbyte>
 80122d0:	4603      	mov	r3, r0
 80122d2:	2b04      	cmp	r3, #4
 80122d4:	d13b      	bne.n	801234e <tcp_parseopt+0xca>
 80122d6:	4b25      	ldr	r3, [pc, #148]	; (801236c <tcp_parseopt+0xe8>)
 80122d8:	881b      	ldrh	r3, [r3, #0]
 80122da:	3301      	adds	r3, #1
 80122dc:	4a22      	ldr	r2, [pc, #136]	; (8012368 <tcp_parseopt+0xe4>)
 80122de:	8812      	ldrh	r2, [r2, #0]
 80122e0:	4293      	cmp	r3, r2
 80122e2:	da34      	bge.n	801234e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80122e4:	f7ff ff98 	bl	8012218 <tcp_get_next_optbyte>
 80122e8:	4603      	mov	r3, r0
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	021b      	lsls	r3, r3, #8
 80122ee:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80122f0:	f7ff ff92 	bl	8012218 <tcp_get_next_optbyte>
 80122f4:	4603      	mov	r3, r0
 80122f6:	b29a      	uxth	r2, r3
 80122f8:	89bb      	ldrh	r3, [r7, #12]
 80122fa:	4313      	orrs	r3, r2
 80122fc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80122fe:	89bb      	ldrh	r3, [r7, #12]
 8012300:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012304:	d804      	bhi.n	8012310 <tcp_parseopt+0x8c>
 8012306:	89bb      	ldrh	r3, [r7, #12]
 8012308:	2b00      	cmp	r3, #0
 801230a:	d001      	beq.n	8012310 <tcp_parseopt+0x8c>
 801230c:	89ba      	ldrh	r2, [r7, #12]
 801230e:	e001      	b.n	8012314 <tcp_parseopt+0x90>
 8012310:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012318:	e010      	b.n	801233c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801231a:	f7ff ff7d 	bl	8012218 <tcp_get_next_optbyte>
 801231e:	4603      	mov	r3, r0
 8012320:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012322:	7afb      	ldrb	r3, [r7, #11]
 8012324:	2b01      	cmp	r3, #1
 8012326:	d914      	bls.n	8012352 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012328:	7afb      	ldrb	r3, [r7, #11]
 801232a:	b29a      	uxth	r2, r3
 801232c:	4b0f      	ldr	r3, [pc, #60]	; (801236c <tcp_parseopt+0xe8>)
 801232e:	881b      	ldrh	r3, [r3, #0]
 8012330:	4413      	add	r3, r2
 8012332:	b29b      	uxth	r3, r3
 8012334:	3b02      	subs	r3, #2
 8012336:	b29a      	uxth	r2, r3
 8012338:	4b0c      	ldr	r3, [pc, #48]	; (801236c <tcp_parseopt+0xe8>)
 801233a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801233c:	4b0b      	ldr	r3, [pc, #44]	; (801236c <tcp_parseopt+0xe8>)
 801233e:	881a      	ldrh	r2, [r3, #0]
 8012340:	4b09      	ldr	r3, [pc, #36]	; (8012368 <tcp_parseopt+0xe4>)
 8012342:	881b      	ldrh	r3, [r3, #0]
 8012344:	429a      	cmp	r2, r3
 8012346:	d3b3      	bcc.n	80122b0 <tcp_parseopt+0x2c>
 8012348:	e004      	b.n	8012354 <tcp_parseopt+0xd0>
          return;
 801234a:	bf00      	nop
 801234c:	e002      	b.n	8012354 <tcp_parseopt+0xd0>
            return;
 801234e:	bf00      	nop
 8012350:	e000      	b.n	8012354 <tcp_parseopt+0xd0>
            return;
 8012352:	bf00      	nop
      }
    }
  }
}
 8012354:	3710      	adds	r7, #16
 8012356:	46bd      	mov	sp, r7
 8012358:	bd80      	pop	{r7, pc}
 801235a:	bf00      	nop
 801235c:	080199c4 	.word	0x080199c4
 8012360:	08019e28 	.word	0x08019e28
 8012364:	08019a10 	.word	0x08019a10
 8012368:	20008ff4 	.word	0x20008ff4
 801236c:	20008ffc 	.word	0x20008ffc

08012370 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012370:	b480      	push	{r7}
 8012372:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012374:	4b05      	ldr	r3, [pc, #20]	; (801238c <tcp_trigger_input_pcb_close+0x1c>)
 8012376:	781b      	ldrb	r3, [r3, #0]
 8012378:	f043 0310 	orr.w	r3, r3, #16
 801237c:	b2da      	uxtb	r2, r3
 801237e:	4b03      	ldr	r3, [pc, #12]	; (801238c <tcp_trigger_input_pcb_close+0x1c>)
 8012380:	701a      	strb	r2, [r3, #0]
}
 8012382:	bf00      	nop
 8012384:	46bd      	mov	sp, r7
 8012386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238a:	4770      	bx	lr
 801238c:	2000900d 	.word	0x2000900d

08012390 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b084      	sub	sp, #16
 8012394:	af00      	add	r7, sp, #0
 8012396:	60f8      	str	r0, [r7, #12]
 8012398:	60b9      	str	r1, [r7, #8]
 801239a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d00a      	beq.n	80123b8 <tcp_route+0x28>
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	7a1b      	ldrb	r3, [r3, #8]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d006      	beq.n	80123b8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	7a1b      	ldrb	r3, [r3, #8]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7fb fab8 	bl	800d924 <netif_get_by_index>
 80123b4:	4603      	mov	r3, r0
 80123b6:	e003      	b.n	80123c0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f003 fa0f 	bl	80157dc <ip4_route>
 80123be:	4603      	mov	r3, r0
  }
}
 80123c0:	4618      	mov	r0, r3
 80123c2:	3710      	adds	r7, #16
 80123c4:	46bd      	mov	sp, r7
 80123c6:	bd80      	pop	{r7, pc}

080123c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80123c8:	b590      	push	{r4, r7, lr}
 80123ca:	b087      	sub	sp, #28
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	60f8      	str	r0, [r7, #12]
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	603b      	str	r3, [r7, #0]
 80123d4:	4613      	mov	r3, r2
 80123d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d105      	bne.n	80123ea <tcp_create_segment+0x22>
 80123de:	4b44      	ldr	r3, [pc, #272]	; (80124f0 <tcp_create_segment+0x128>)
 80123e0:	22a3      	movs	r2, #163	; 0xa3
 80123e2:	4944      	ldr	r1, [pc, #272]	; (80124f4 <tcp_create_segment+0x12c>)
 80123e4:	4844      	ldr	r0, [pc, #272]	; (80124f8 <tcp_create_segment+0x130>)
 80123e6:	f005 f977 	bl	80176d8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d105      	bne.n	80123fc <tcp_create_segment+0x34>
 80123f0:	4b3f      	ldr	r3, [pc, #252]	; (80124f0 <tcp_create_segment+0x128>)
 80123f2:	22a4      	movs	r2, #164	; 0xa4
 80123f4:	4941      	ldr	r1, [pc, #260]	; (80124fc <tcp_create_segment+0x134>)
 80123f6:	4840      	ldr	r0, [pc, #256]	; (80124f8 <tcp_create_segment+0x130>)
 80123f8:	f005 f96e 	bl	80176d8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80123fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012400:	009b      	lsls	r3, r3, #2
 8012402:	b2db      	uxtb	r3, r3
 8012404:	f003 0304 	and.w	r3, r3, #4
 8012408:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801240a:	2003      	movs	r0, #3
 801240c:	f7fa ff04 	bl	800d218 <memp_malloc>
 8012410:	6138      	str	r0, [r7, #16]
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d104      	bne.n	8012422 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8012418:	68b8      	ldr	r0, [r7, #8]
 801241a:	f7fb fde3 	bl	800dfe4 <pbuf_free>
    return NULL;
 801241e:	2300      	movs	r3, #0
 8012420:	e061      	b.n	80124e6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8012422:	693b      	ldr	r3, [r7, #16]
 8012424:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012428:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	2200      	movs	r2, #0
 801242e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012430:	693b      	ldr	r3, [r7, #16]
 8012432:	68ba      	ldr	r2, [r7, #8]
 8012434:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	891a      	ldrh	r2, [r3, #8]
 801243a:	7dfb      	ldrb	r3, [r7, #23]
 801243c:	b29b      	uxth	r3, r3
 801243e:	429a      	cmp	r2, r3
 8012440:	d205      	bcs.n	801244e <tcp_create_segment+0x86>
 8012442:	4b2b      	ldr	r3, [pc, #172]	; (80124f0 <tcp_create_segment+0x128>)
 8012444:	22b0      	movs	r2, #176	; 0xb0
 8012446:	492e      	ldr	r1, [pc, #184]	; (8012500 <tcp_create_segment+0x138>)
 8012448:	482b      	ldr	r0, [pc, #172]	; (80124f8 <tcp_create_segment+0x130>)
 801244a:	f005 f945 	bl	80176d8 <iprintf>
  seg->len = p->tot_len - optlen;
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	891a      	ldrh	r2, [r3, #8]
 8012452:	7dfb      	ldrb	r3, [r7, #23]
 8012454:	b29b      	uxth	r3, r3
 8012456:	1ad3      	subs	r3, r2, r3
 8012458:	b29a      	uxth	r2, r3
 801245a:	693b      	ldr	r3, [r7, #16]
 801245c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801245e:	2114      	movs	r1, #20
 8012460:	68b8      	ldr	r0, [r7, #8]
 8012462:	f7fb fd29 	bl	800deb8 <pbuf_add_header>
 8012466:	4603      	mov	r3, r0
 8012468:	2b00      	cmp	r3, #0
 801246a:	d004      	beq.n	8012476 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801246c:	6938      	ldr	r0, [r7, #16]
 801246e:	f7fd f8ce 	bl	800f60e <tcp_seg_free>
    return NULL;
 8012472:	2300      	movs	r3, #0
 8012474:	e037      	b.n	80124e6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8012476:	693b      	ldr	r3, [r7, #16]
 8012478:	685b      	ldr	r3, [r3, #4]
 801247a:	685a      	ldr	r2, [r3, #4]
 801247c:	693b      	ldr	r3, [r7, #16]
 801247e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	8ada      	ldrh	r2, [r3, #22]
 8012484:	693b      	ldr	r3, [r7, #16]
 8012486:	68dc      	ldr	r4, [r3, #12]
 8012488:	4610      	mov	r0, r2
 801248a:	f7fa fa4d 	bl	800c928 <lwip_htons>
 801248e:	4603      	mov	r3, r0
 8012490:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	8b1a      	ldrh	r2, [r3, #24]
 8012496:	693b      	ldr	r3, [r7, #16]
 8012498:	68dc      	ldr	r4, [r3, #12]
 801249a:	4610      	mov	r0, r2
 801249c:	f7fa fa44 	bl	800c928 <lwip_htons>
 80124a0:	4603      	mov	r3, r0
 80124a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80124a4:	693b      	ldr	r3, [r7, #16]
 80124a6:	68dc      	ldr	r4, [r3, #12]
 80124a8:	6838      	ldr	r0, [r7, #0]
 80124aa:	f7fa fa52 	bl	800c952 <lwip_htonl>
 80124ae:	4603      	mov	r3, r0
 80124b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80124b2:	7dfb      	ldrb	r3, [r7, #23]
 80124b4:	089b      	lsrs	r3, r3, #2
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	b29b      	uxth	r3, r3
 80124ba:	3305      	adds	r3, #5
 80124bc:	b29b      	uxth	r3, r3
 80124be:	031b      	lsls	r3, r3, #12
 80124c0:	b29a      	uxth	r2, r3
 80124c2:	79fb      	ldrb	r3, [r7, #7]
 80124c4:	b29b      	uxth	r3, r3
 80124c6:	4313      	orrs	r3, r2
 80124c8:	b29a      	uxth	r2, r3
 80124ca:	693b      	ldr	r3, [r7, #16]
 80124cc:	68dc      	ldr	r4, [r3, #12]
 80124ce:	4610      	mov	r0, r2
 80124d0:	f7fa fa2a 	bl	800c928 <lwip_htons>
 80124d4:	4603      	mov	r3, r0
 80124d6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	68db      	ldr	r3, [r3, #12]
 80124dc:	2200      	movs	r2, #0
 80124de:	749a      	strb	r2, [r3, #18]
 80124e0:	2200      	movs	r2, #0
 80124e2:	74da      	strb	r2, [r3, #19]
  return seg;
 80124e4:	693b      	ldr	r3, [r7, #16]
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	371c      	adds	r7, #28
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd90      	pop	{r4, r7, pc}
 80124ee:	bf00      	nop
 80124f0:	08019e44 	.word	0x08019e44
 80124f4:	08019e78 	.word	0x08019e78
 80124f8:	08019e98 	.word	0x08019e98
 80124fc:	08019ec0 	.word	0x08019ec0
 8012500:	08019ee4 	.word	0x08019ee4

08012504 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012504:	b590      	push	{r4, r7, lr}
 8012506:	b08b      	sub	sp, #44	; 0x2c
 8012508:	af02      	add	r7, sp, #8
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	460b      	mov	r3, r1
 801250e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012510:	2300      	movs	r3, #0
 8012512:	61fb      	str	r3, [r7, #28]
 8012514:	2300      	movs	r3, #0
 8012516:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012518:	2300      	movs	r3, #0
 801251a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d106      	bne.n	8012530 <tcp_split_unsent_seg+0x2c>
 8012522:	4b95      	ldr	r3, [pc, #596]	; (8012778 <tcp_split_unsent_seg+0x274>)
 8012524:	f240 324b 	movw	r2, #843	; 0x34b
 8012528:	4994      	ldr	r1, [pc, #592]	; (801277c <tcp_split_unsent_seg+0x278>)
 801252a:	4895      	ldr	r0, [pc, #596]	; (8012780 <tcp_split_unsent_seg+0x27c>)
 801252c:	f005 f8d4 	bl	80176d8 <iprintf>

  useg = pcb->unsent;
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012534:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d102      	bne.n	8012542 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801253c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012540:	e116      	b.n	8012770 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012542:	887b      	ldrh	r3, [r7, #2]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d109      	bne.n	801255c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012548:	4b8b      	ldr	r3, [pc, #556]	; (8012778 <tcp_split_unsent_seg+0x274>)
 801254a:	f240 3253 	movw	r2, #851	; 0x353
 801254e:	498d      	ldr	r1, [pc, #564]	; (8012784 <tcp_split_unsent_seg+0x280>)
 8012550:	488b      	ldr	r0, [pc, #556]	; (8012780 <tcp_split_unsent_seg+0x27c>)
 8012552:	f005 f8c1 	bl	80176d8 <iprintf>
    return ERR_VAL;
 8012556:	f06f 0305 	mvn.w	r3, #5
 801255a:	e109      	b.n	8012770 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	891b      	ldrh	r3, [r3, #8]
 8012560:	887a      	ldrh	r2, [r7, #2]
 8012562:	429a      	cmp	r2, r3
 8012564:	d301      	bcc.n	801256a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012566:	2300      	movs	r3, #0
 8012568:	e102      	b.n	8012770 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801256e:	887a      	ldrh	r2, [r7, #2]
 8012570:	429a      	cmp	r2, r3
 8012572:	d906      	bls.n	8012582 <tcp_split_unsent_seg+0x7e>
 8012574:	4b80      	ldr	r3, [pc, #512]	; (8012778 <tcp_split_unsent_seg+0x274>)
 8012576:	f240 325b 	movw	r2, #859	; 0x35b
 801257a:	4983      	ldr	r1, [pc, #524]	; (8012788 <tcp_split_unsent_seg+0x284>)
 801257c:	4880      	ldr	r0, [pc, #512]	; (8012780 <tcp_split_unsent_seg+0x27c>)
 801257e:	f005 f8ab 	bl	80176d8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	891b      	ldrh	r3, [r3, #8]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d106      	bne.n	8012598 <tcp_split_unsent_seg+0x94>
 801258a:	4b7b      	ldr	r3, [pc, #492]	; (8012778 <tcp_split_unsent_seg+0x274>)
 801258c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012590:	497e      	ldr	r1, [pc, #504]	; (801278c <tcp_split_unsent_seg+0x288>)
 8012592:	487b      	ldr	r0, [pc, #492]	; (8012780 <tcp_split_unsent_seg+0x27c>)
 8012594:	f005 f8a0 	bl	80176d8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012598:	697b      	ldr	r3, [r7, #20]
 801259a:	7a9b      	ldrb	r3, [r3, #10]
 801259c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801259e:	7bfb      	ldrb	r3, [r7, #15]
 80125a0:	009b      	lsls	r3, r3, #2
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	f003 0304 	and.w	r3, r3, #4
 80125a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	891a      	ldrh	r2, [r3, #8]
 80125ae:	887b      	ldrh	r3, [r7, #2]
 80125b0:	1ad3      	subs	r3, r2, r3
 80125b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80125b4:	7bbb      	ldrb	r3, [r7, #14]
 80125b6:	b29a      	uxth	r2, r3
 80125b8:	89bb      	ldrh	r3, [r7, #12]
 80125ba:	4413      	add	r3, r2
 80125bc:	b29b      	uxth	r3, r3
 80125be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80125c2:	4619      	mov	r1, r3
 80125c4:	2036      	movs	r0, #54	; 0x36
 80125c6:	f7fb fa29 	bl	800da1c <pbuf_alloc>
 80125ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80125cc:	693b      	ldr	r3, [r7, #16]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	f000 80b7 	beq.w	8012742 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	685b      	ldr	r3, [r3, #4]
 80125d8:	891a      	ldrh	r2, [r3, #8]
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	891b      	ldrh	r3, [r3, #8]
 80125de:	1ad3      	subs	r3, r2, r3
 80125e0:	b29a      	uxth	r2, r3
 80125e2:	887b      	ldrh	r3, [r7, #2]
 80125e4:	4413      	add	r3, r2
 80125e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	6858      	ldr	r0, [r3, #4]
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	685a      	ldr	r2, [r3, #4]
 80125f0:	7bbb      	ldrb	r3, [r7, #14]
 80125f2:	18d1      	adds	r1, r2, r3
 80125f4:	897b      	ldrh	r3, [r7, #10]
 80125f6:	89ba      	ldrh	r2, [r7, #12]
 80125f8:	f7fb feee 	bl	800e3d8 <pbuf_copy_partial>
 80125fc:	4603      	mov	r3, r0
 80125fe:	461a      	mov	r2, r3
 8012600:	89bb      	ldrh	r3, [r7, #12]
 8012602:	4293      	cmp	r3, r2
 8012604:	f040 809f 	bne.w	8012746 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012608:	697b      	ldr	r3, [r7, #20]
 801260a:	68db      	ldr	r3, [r3, #12]
 801260c:	899b      	ldrh	r3, [r3, #12]
 801260e:	b29b      	uxth	r3, r3
 8012610:	4618      	mov	r0, r3
 8012612:	f7fa f989 	bl	800c928 <lwip_htons>
 8012616:	4603      	mov	r3, r0
 8012618:	b2db      	uxtb	r3, r3
 801261a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801261e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012620:	2300      	movs	r3, #0
 8012622:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012624:	7efb      	ldrb	r3, [r7, #27]
 8012626:	f003 0308 	and.w	r3, r3, #8
 801262a:	2b00      	cmp	r3, #0
 801262c:	d007      	beq.n	801263e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801262e:	7efb      	ldrb	r3, [r7, #27]
 8012630:	f023 0308 	bic.w	r3, r3, #8
 8012634:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012636:	7ebb      	ldrb	r3, [r7, #26]
 8012638:	f043 0308 	orr.w	r3, r3, #8
 801263c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801263e:	7efb      	ldrb	r3, [r7, #27]
 8012640:	f003 0301 	and.w	r3, r3, #1
 8012644:	2b00      	cmp	r3, #0
 8012646:	d007      	beq.n	8012658 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012648:	7efb      	ldrb	r3, [r7, #27]
 801264a:	f023 0301 	bic.w	r3, r3, #1
 801264e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012650:	7ebb      	ldrb	r3, [r7, #26]
 8012652:	f043 0301 	orr.w	r3, r3, #1
 8012656:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	68db      	ldr	r3, [r3, #12]
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	4618      	mov	r0, r3
 8012660:	f7fa f977 	bl	800c952 <lwip_htonl>
 8012664:	4602      	mov	r2, r0
 8012666:	887b      	ldrh	r3, [r7, #2]
 8012668:	18d1      	adds	r1, r2, r3
 801266a:	7eba      	ldrb	r2, [r7, #26]
 801266c:	7bfb      	ldrb	r3, [r7, #15]
 801266e:	9300      	str	r3, [sp, #0]
 8012670:	460b      	mov	r3, r1
 8012672:	6939      	ldr	r1, [r7, #16]
 8012674:	6878      	ldr	r0, [r7, #4]
 8012676:	f7ff fea7 	bl	80123c8 <tcp_create_segment>
 801267a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801267c:	69fb      	ldr	r3, [r7, #28]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d063      	beq.n	801274a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012682:	697b      	ldr	r3, [r7, #20]
 8012684:	685b      	ldr	r3, [r3, #4]
 8012686:	4618      	mov	r0, r3
 8012688:	f7fb fd34 	bl	800e0f4 <pbuf_clen>
 801268c:	4603      	mov	r3, r0
 801268e:	461a      	mov	r2, r3
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012696:	1a9b      	subs	r3, r3, r2
 8012698:	b29a      	uxth	r2, r3
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80126a0:	697b      	ldr	r3, [r7, #20]
 80126a2:	6858      	ldr	r0, [r3, #4]
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	891a      	ldrh	r2, [r3, #8]
 80126aa:	89bb      	ldrh	r3, [r7, #12]
 80126ac:	1ad3      	subs	r3, r2, r3
 80126ae:	b29b      	uxth	r3, r3
 80126b0:	4619      	mov	r1, r3
 80126b2:	f7fb fb11 	bl	800dcd8 <pbuf_realloc>
  useg->len -= remainder;
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	891a      	ldrh	r2, [r3, #8]
 80126ba:	89bb      	ldrh	r3, [r7, #12]
 80126bc:	1ad3      	subs	r3, r2, r3
 80126be:	b29a      	uxth	r2, r3
 80126c0:	697b      	ldr	r3, [r7, #20]
 80126c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80126c4:	697b      	ldr	r3, [r7, #20]
 80126c6:	68db      	ldr	r3, [r3, #12]
 80126c8:	899b      	ldrh	r3, [r3, #12]
 80126ca:	b29c      	uxth	r4, r3
 80126cc:	7efb      	ldrb	r3, [r7, #27]
 80126ce:	b29b      	uxth	r3, r3
 80126d0:	4618      	mov	r0, r3
 80126d2:	f7fa f929 	bl	800c928 <lwip_htons>
 80126d6:	4603      	mov	r3, r0
 80126d8:	461a      	mov	r2, r3
 80126da:	697b      	ldr	r3, [r7, #20]
 80126dc:	68db      	ldr	r3, [r3, #12]
 80126de:	4322      	orrs	r2, r4
 80126e0:	b292      	uxth	r2, r2
 80126e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80126e4:	697b      	ldr	r3, [r7, #20]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7fb fd03 	bl	800e0f4 <pbuf_clen>
 80126ee:	4603      	mov	r3, r0
 80126f0:	461a      	mov	r2, r3
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126f8:	4413      	add	r3, r2
 80126fa:	b29a      	uxth	r2, r3
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012702:	69fb      	ldr	r3, [r7, #28]
 8012704:	685b      	ldr	r3, [r3, #4]
 8012706:	4618      	mov	r0, r3
 8012708:	f7fb fcf4 	bl	800e0f4 <pbuf_clen>
 801270c:	4603      	mov	r3, r0
 801270e:	461a      	mov	r2, r3
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012716:	4413      	add	r3, r2
 8012718:	b29a      	uxth	r2, r3
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	681a      	ldr	r2, [r3, #0]
 8012724:	69fb      	ldr	r3, [r7, #28]
 8012726:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012728:	697b      	ldr	r3, [r7, #20]
 801272a:	69fa      	ldr	r2, [r7, #28]
 801272c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801272e:	69fb      	ldr	r3, [r7, #28]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d103      	bne.n	801273e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	2200      	movs	r2, #0
 801273a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801273e:	2300      	movs	r3, #0
 8012740:	e016      	b.n	8012770 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012742:	bf00      	nop
 8012744:	e002      	b.n	801274c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012746:	bf00      	nop
 8012748:	e000      	b.n	801274c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801274a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801274c:	69fb      	ldr	r3, [r7, #28]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d006      	beq.n	8012760 <tcp_split_unsent_seg+0x25c>
 8012752:	4b09      	ldr	r3, [pc, #36]	; (8012778 <tcp_split_unsent_seg+0x274>)
 8012754:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012758:	490d      	ldr	r1, [pc, #52]	; (8012790 <tcp_split_unsent_seg+0x28c>)
 801275a:	4809      	ldr	r0, [pc, #36]	; (8012780 <tcp_split_unsent_seg+0x27c>)
 801275c:	f004 ffbc 	bl	80176d8 <iprintf>
  if (p != NULL) {
 8012760:	693b      	ldr	r3, [r7, #16]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d002      	beq.n	801276c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012766:	6938      	ldr	r0, [r7, #16]
 8012768:	f7fb fc3c 	bl	800dfe4 <pbuf_free>
  }

  return ERR_MEM;
 801276c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8012770:	4618      	mov	r0, r3
 8012772:	3724      	adds	r7, #36	; 0x24
 8012774:	46bd      	mov	sp, r7
 8012776:	bd90      	pop	{r4, r7, pc}
 8012778:	08019e44 	.word	0x08019e44
 801277c:	0801a1d8 	.word	0x0801a1d8
 8012780:	08019e98 	.word	0x08019e98
 8012784:	0801a1fc 	.word	0x0801a1fc
 8012788:	0801a220 	.word	0x0801a220
 801278c:	0801a230 	.word	0x0801a230
 8012790:	0801a240 	.word	0x0801a240

08012794 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012794:	b590      	push	{r4, r7, lr}
 8012796:	b085      	sub	sp, #20
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d106      	bne.n	80127b0 <tcp_send_fin+0x1c>
 80127a2:	4b21      	ldr	r3, [pc, #132]	; (8012828 <tcp_send_fin+0x94>)
 80127a4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80127a8:	4920      	ldr	r1, [pc, #128]	; (801282c <tcp_send_fin+0x98>)
 80127aa:	4821      	ldr	r0, [pc, #132]	; (8012830 <tcp_send_fin+0x9c>)
 80127ac:	f004 ff94 	bl	80176d8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d02e      	beq.n	8012816 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127bc:	60fb      	str	r3, [r7, #12]
 80127be:	e002      	b.n	80127c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d1f8      	bne.n	80127c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	68db      	ldr	r3, [r3, #12]
 80127d2:	899b      	ldrh	r3, [r3, #12]
 80127d4:	b29b      	uxth	r3, r3
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7fa f8a6 	bl	800c928 <lwip_htons>
 80127dc:	4603      	mov	r3, r0
 80127de:	b2db      	uxtb	r3, r3
 80127e0:	f003 0307 	and.w	r3, r3, #7
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d116      	bne.n	8012816 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	68db      	ldr	r3, [r3, #12]
 80127ec:	899b      	ldrh	r3, [r3, #12]
 80127ee:	b29c      	uxth	r4, r3
 80127f0:	2001      	movs	r0, #1
 80127f2:	f7fa f899 	bl	800c928 <lwip_htons>
 80127f6:	4603      	mov	r3, r0
 80127f8:	461a      	mov	r2, r3
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	4322      	orrs	r2, r4
 8012800:	b292      	uxth	r2, r2
 8012802:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	8b5b      	ldrh	r3, [r3, #26]
 8012808:	f043 0320 	orr.w	r3, r3, #32
 801280c:	b29a      	uxth	r2, r3
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012812:	2300      	movs	r3, #0
 8012814:	e004      	b.n	8012820 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012816:	2101      	movs	r1, #1
 8012818:	6878      	ldr	r0, [r7, #4]
 801281a:	f000 f80b 	bl	8012834 <tcp_enqueue_flags>
 801281e:	4603      	mov	r3, r0
}
 8012820:	4618      	mov	r0, r3
 8012822:	3714      	adds	r7, #20
 8012824:	46bd      	mov	sp, r7
 8012826:	bd90      	pop	{r4, r7, pc}
 8012828:	08019e44 	.word	0x08019e44
 801282c:	0801a24c 	.word	0x0801a24c
 8012830:	08019e98 	.word	0x08019e98

08012834 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b08a      	sub	sp, #40	; 0x28
 8012838:	af02      	add	r7, sp, #8
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	460b      	mov	r3, r1
 801283e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012840:	2300      	movs	r3, #0
 8012842:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012844:	2300      	movs	r3, #0
 8012846:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012848:	78fb      	ldrb	r3, [r7, #3]
 801284a:	f003 0303 	and.w	r3, r3, #3
 801284e:	2b00      	cmp	r3, #0
 8012850:	d106      	bne.n	8012860 <tcp_enqueue_flags+0x2c>
 8012852:	4b67      	ldr	r3, [pc, #412]	; (80129f0 <tcp_enqueue_flags+0x1bc>)
 8012854:	f240 4211 	movw	r2, #1041	; 0x411
 8012858:	4966      	ldr	r1, [pc, #408]	; (80129f4 <tcp_enqueue_flags+0x1c0>)
 801285a:	4867      	ldr	r0, [pc, #412]	; (80129f8 <tcp_enqueue_flags+0x1c4>)
 801285c:	f004 ff3c 	bl	80176d8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d106      	bne.n	8012874 <tcp_enqueue_flags+0x40>
 8012866:	4b62      	ldr	r3, [pc, #392]	; (80129f0 <tcp_enqueue_flags+0x1bc>)
 8012868:	f240 4213 	movw	r2, #1043	; 0x413
 801286c:	4963      	ldr	r1, [pc, #396]	; (80129fc <tcp_enqueue_flags+0x1c8>)
 801286e:	4862      	ldr	r0, [pc, #392]	; (80129f8 <tcp_enqueue_flags+0x1c4>)
 8012870:	f004 ff32 	bl	80176d8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012874:	78fb      	ldrb	r3, [r7, #3]
 8012876:	f003 0302 	and.w	r3, r3, #2
 801287a:	2b00      	cmp	r3, #0
 801287c:	d001      	beq.n	8012882 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801287e:	2301      	movs	r3, #1
 8012880:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012882:	7ffb      	ldrb	r3, [r7, #31]
 8012884:	009b      	lsls	r3, r3, #2
 8012886:	b2db      	uxtb	r3, r3
 8012888:	f003 0304 	and.w	r3, r3, #4
 801288c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801288e:	7dfb      	ldrb	r3, [r7, #23]
 8012890:	b29b      	uxth	r3, r3
 8012892:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012896:	4619      	mov	r1, r3
 8012898:	2036      	movs	r0, #54	; 0x36
 801289a:	f7fb f8bf 	bl	800da1c <pbuf_alloc>
 801289e:	6138      	str	r0, [r7, #16]
 80128a0:	693b      	ldr	r3, [r7, #16]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d109      	bne.n	80128ba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	8b5b      	ldrh	r3, [r3, #26]
 80128aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128ae:	b29a      	uxth	r2, r3
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80128b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128b8:	e095      	b.n	80129e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	895a      	ldrh	r2, [r3, #10]
 80128be:	7dfb      	ldrb	r3, [r7, #23]
 80128c0:	b29b      	uxth	r3, r3
 80128c2:	429a      	cmp	r2, r3
 80128c4:	d206      	bcs.n	80128d4 <tcp_enqueue_flags+0xa0>
 80128c6:	4b4a      	ldr	r3, [pc, #296]	; (80129f0 <tcp_enqueue_flags+0x1bc>)
 80128c8:	f240 4239 	movw	r2, #1081	; 0x439
 80128cc:	494c      	ldr	r1, [pc, #304]	; (8012a00 <tcp_enqueue_flags+0x1cc>)
 80128ce:	484a      	ldr	r0, [pc, #296]	; (80129f8 <tcp_enqueue_flags+0x1c4>)
 80128d0:	f004 ff02 	bl	80176d8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80128d8:	78fa      	ldrb	r2, [r7, #3]
 80128da:	7ffb      	ldrb	r3, [r7, #31]
 80128dc:	9300      	str	r3, [sp, #0]
 80128de:	460b      	mov	r3, r1
 80128e0:	6939      	ldr	r1, [r7, #16]
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f7ff fd70 	bl	80123c8 <tcp_create_segment>
 80128e8:	60f8      	str	r0, [r7, #12]
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d109      	bne.n	8012904 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	8b5b      	ldrh	r3, [r3, #26]
 80128f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128f8:	b29a      	uxth	r2, r3
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80128fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012902:	e070      	b.n	80129e6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	68db      	ldr	r3, [r3, #12]
 8012908:	f003 0303 	and.w	r3, r3, #3
 801290c:	2b00      	cmp	r3, #0
 801290e:	d006      	beq.n	801291e <tcp_enqueue_flags+0xea>
 8012910:	4b37      	ldr	r3, [pc, #220]	; (80129f0 <tcp_enqueue_flags+0x1bc>)
 8012912:	f240 4242 	movw	r2, #1090	; 0x442
 8012916:	493b      	ldr	r1, [pc, #236]	; (8012a04 <tcp_enqueue_flags+0x1d0>)
 8012918:	4837      	ldr	r0, [pc, #220]	; (80129f8 <tcp_enqueue_flags+0x1c4>)
 801291a:	f004 fedd 	bl	80176d8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	891b      	ldrh	r3, [r3, #8]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d006      	beq.n	8012934 <tcp_enqueue_flags+0x100>
 8012926:	4b32      	ldr	r3, [pc, #200]	; (80129f0 <tcp_enqueue_flags+0x1bc>)
 8012928:	f240 4243 	movw	r2, #1091	; 0x443
 801292c:	4936      	ldr	r1, [pc, #216]	; (8012a08 <tcp_enqueue_flags+0x1d4>)
 801292e:	4832      	ldr	r0, [pc, #200]	; (80129f8 <tcp_enqueue_flags+0x1c4>)
 8012930:	f004 fed2 	bl	80176d8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012938:	2b00      	cmp	r3, #0
 801293a:	d103      	bne.n	8012944 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	68fa      	ldr	r2, [r7, #12]
 8012940:	66da      	str	r2, [r3, #108]	; 0x6c
 8012942:	e00d      	b.n	8012960 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012948:	61bb      	str	r3, [r7, #24]
 801294a:	e002      	b.n	8012952 <tcp_enqueue_flags+0x11e>
 801294c:	69bb      	ldr	r3, [r7, #24]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	61bb      	str	r3, [r7, #24]
 8012952:	69bb      	ldr	r3, [r7, #24]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d1f8      	bne.n	801294c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801295a:	69bb      	ldr	r3, [r7, #24]
 801295c:	68fa      	ldr	r2, [r7, #12]
 801295e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2200      	movs	r2, #0
 8012964:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012968:	78fb      	ldrb	r3, [r7, #3]
 801296a:	f003 0302 	and.w	r3, r3, #2
 801296e:	2b00      	cmp	r3, #0
 8012970:	d104      	bne.n	801297c <tcp_enqueue_flags+0x148>
 8012972:	78fb      	ldrb	r3, [r7, #3]
 8012974:	f003 0301 	and.w	r3, r3, #1
 8012978:	2b00      	cmp	r3, #0
 801297a:	d004      	beq.n	8012986 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012980:	1c5a      	adds	r2, r3, #1
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012986:	78fb      	ldrb	r3, [r7, #3]
 8012988:	f003 0301 	and.w	r3, r3, #1
 801298c:	2b00      	cmp	r3, #0
 801298e:	d006      	beq.n	801299e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	8b5b      	ldrh	r3, [r3, #26]
 8012994:	f043 0320 	orr.w	r3, r3, #32
 8012998:	b29a      	uxth	r2, r3
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7fb fba6 	bl	800e0f4 <pbuf_clen>
 80129a8:	4603      	mov	r3, r0
 80129aa:	461a      	mov	r2, r3
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129b2:	4413      	add	r3, r2
 80129b4:	b29a      	uxth	r2, r3
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d00e      	beq.n	80129e4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d10a      	bne.n	80129e4 <tcp_enqueue_flags+0x1b0>
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d106      	bne.n	80129e4 <tcp_enqueue_flags+0x1b0>
 80129d6:	4b06      	ldr	r3, [pc, #24]	; (80129f0 <tcp_enqueue_flags+0x1bc>)
 80129d8:	f240 4265 	movw	r2, #1125	; 0x465
 80129dc:	490b      	ldr	r1, [pc, #44]	; (8012a0c <tcp_enqueue_flags+0x1d8>)
 80129de:	4806      	ldr	r0, [pc, #24]	; (80129f8 <tcp_enqueue_flags+0x1c4>)
 80129e0:	f004 fe7a 	bl	80176d8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80129e4:	2300      	movs	r3, #0
}
 80129e6:	4618      	mov	r0, r3
 80129e8:	3720      	adds	r7, #32
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}
 80129ee:	bf00      	nop
 80129f0:	08019e44 	.word	0x08019e44
 80129f4:	0801a268 	.word	0x0801a268
 80129f8:	08019e98 	.word	0x08019e98
 80129fc:	0801a2c0 	.word	0x0801a2c0
 8012a00:	0801a2e0 	.word	0x0801a2e0
 8012a04:	0801a31c 	.word	0x0801a31c
 8012a08:	0801a334 	.word	0x0801a334
 8012a0c:	0801a360 	.word	0x0801a360

08012a10 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012a10:	b5b0      	push	{r4, r5, r7, lr}
 8012a12:	b08a      	sub	sp, #40	; 0x28
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d106      	bne.n	8012a2c <tcp_output+0x1c>
 8012a1e:	4b8a      	ldr	r3, [pc, #552]	; (8012c48 <tcp_output+0x238>)
 8012a20:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012a24:	4989      	ldr	r1, [pc, #548]	; (8012c4c <tcp_output+0x23c>)
 8012a26:	488a      	ldr	r0, [pc, #552]	; (8012c50 <tcp_output+0x240>)
 8012a28:	f004 fe56 	bl	80176d8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	7d1b      	ldrb	r3, [r3, #20]
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	d106      	bne.n	8012a42 <tcp_output+0x32>
 8012a34:	4b84      	ldr	r3, [pc, #528]	; (8012c48 <tcp_output+0x238>)
 8012a36:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012a3a:	4986      	ldr	r1, [pc, #536]	; (8012c54 <tcp_output+0x244>)
 8012a3c:	4884      	ldr	r0, [pc, #528]	; (8012c50 <tcp_output+0x240>)
 8012a3e:	f004 fe4b 	bl	80176d8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012a42:	4b85      	ldr	r3, [pc, #532]	; (8012c58 <tcp_output+0x248>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	687a      	ldr	r2, [r7, #4]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d101      	bne.n	8012a50 <tcp_output+0x40>
    return ERR_OK;
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	e1ce      	b.n	8012dee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	bf28      	it	cs
 8012a60:	4613      	movcs	r3, r2
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d10b      	bne.n	8012a8a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	8b5b      	ldrh	r3, [r3, #26]
 8012a76:	f003 0302 	and.w	r3, r3, #2
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	f000 81aa 	beq.w	8012dd4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f000 fdcb 	bl	801361c <tcp_send_empty_ack>
 8012a86:	4603      	mov	r3, r0
 8012a88:	e1b1      	b.n	8012dee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012a8a:	6879      	ldr	r1, [r7, #4]
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	3304      	adds	r3, #4
 8012a90:	461a      	mov	r2, r3
 8012a92:	6878      	ldr	r0, [r7, #4]
 8012a94:	f7ff fc7c 	bl	8012390 <tcp_route>
 8012a98:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d102      	bne.n	8012aa6 <tcp_output+0x96>
    return ERR_RTE;
 8012aa0:	f06f 0303 	mvn.w	r3, #3
 8012aa4:	e1a3      	b.n	8012dee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d003      	beq.n	8012ab4 <tcp_output+0xa4>
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d111      	bne.n	8012ad8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d002      	beq.n	8012ac0 <tcp_output+0xb0>
 8012aba:	697b      	ldr	r3, [r7, #20]
 8012abc:	3304      	adds	r3, #4
 8012abe:	e000      	b.n	8012ac2 <tcp_output+0xb2>
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d102      	bne.n	8012ad0 <tcp_output+0xc0>
      return ERR_RTE;
 8012aca:	f06f 0303 	mvn.w	r3, #3
 8012ace:	e18e      	b.n	8012dee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012ad0:	693b      	ldr	r3, [r7, #16]
 8012ad2:	681a      	ldr	r2, [r3, #0]
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ada:	68db      	ldr	r3, [r3, #12]
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7f9 ff37 	bl	800c952 <lwip_htonl>
 8012ae4:	4602      	mov	r2, r0
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012aea:	1ad3      	subs	r3, r2, r3
 8012aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012aee:	8912      	ldrh	r2, [r2, #8]
 8012af0:	4413      	add	r3, r2
 8012af2:	69ba      	ldr	r2, [r7, #24]
 8012af4:	429a      	cmp	r2, r3
 8012af6:	d227      	bcs.n	8012b48 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012afe:	461a      	mov	r2, r3
 8012b00:	69bb      	ldr	r3, [r7, #24]
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d114      	bne.n	8012b30 <tcp_output+0x120>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d110      	bne.n	8012b30 <tcp_output+0x120>
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d10b      	bne.n	8012b30 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2200      	movs	r2, #0
 8012b1c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	2201      	movs	r2, #1
 8012b24:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	8b5b      	ldrh	r3, [r3, #26]
 8012b34:	f003 0302 	and.w	r3, r3, #2
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	f000 814d 	beq.w	8012dd8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f000 fd6c 	bl	801361c <tcp_send_empty_ack>
 8012b44:	4603      	mov	r3, r0
 8012b46:	e152      	b.n	8012dee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b54:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012b56:	6a3b      	ldr	r3, [r7, #32]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	f000 811c 	beq.w	8012d96 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012b5e:	e002      	b.n	8012b66 <tcp_output+0x156>
 8012b60:	6a3b      	ldr	r3, [r7, #32]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	623b      	str	r3, [r7, #32]
 8012b66:	6a3b      	ldr	r3, [r7, #32]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d1f8      	bne.n	8012b60 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012b6e:	e112      	b.n	8012d96 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b72:	68db      	ldr	r3, [r3, #12]
 8012b74:	899b      	ldrh	r3, [r3, #12]
 8012b76:	b29b      	uxth	r3, r3
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7f9 fed5 	bl	800c928 <lwip_htons>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	b2db      	uxtb	r3, r3
 8012b82:	f003 0304 	and.w	r3, r3, #4
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d006      	beq.n	8012b98 <tcp_output+0x188>
 8012b8a:	4b2f      	ldr	r3, [pc, #188]	; (8012c48 <tcp_output+0x238>)
 8012b8c:	f240 5236 	movw	r2, #1334	; 0x536
 8012b90:	4932      	ldr	r1, [pc, #200]	; (8012c5c <tcp_output+0x24c>)
 8012b92:	482f      	ldr	r0, [pc, #188]	; (8012c50 <tcp_output+0x240>)
 8012b94:	f004 fda0 	bl	80176d8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d01f      	beq.n	8012be0 <tcp_output+0x1d0>
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	8b5b      	ldrh	r3, [r3, #26]
 8012ba4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d119      	bne.n	8012be0 <tcp_output+0x1d0>
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d00b      	beq.n	8012bcc <tcp_output+0x1bc>
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d110      	bne.n	8012be0 <tcp_output+0x1d0>
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bc2:	891a      	ldrh	r2, [r3, #8]
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d209      	bcs.n	8012be0 <tcp_output+0x1d0>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d004      	beq.n	8012be0 <tcp_output+0x1d0>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bdc:	2b08      	cmp	r3, #8
 8012bde:	d901      	bls.n	8012be4 <tcp_output+0x1d4>
 8012be0:	2301      	movs	r3, #1
 8012be2:	e000      	b.n	8012be6 <tcp_output+0x1d6>
 8012be4:	2300      	movs	r3, #0
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d106      	bne.n	8012bf8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	8b5b      	ldrh	r3, [r3, #26]
 8012bee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	f000 80e4 	beq.w	8012dc0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	7d1b      	ldrb	r3, [r3, #20]
 8012bfc:	2b02      	cmp	r3, #2
 8012bfe:	d00d      	beq.n	8012c1c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c02:	68db      	ldr	r3, [r3, #12]
 8012c04:	899b      	ldrh	r3, [r3, #12]
 8012c06:	b29c      	uxth	r4, r3
 8012c08:	2010      	movs	r0, #16
 8012c0a:	f7f9 fe8d 	bl	800c928 <lwip_htons>
 8012c0e:	4603      	mov	r3, r0
 8012c10:	461a      	mov	r2, r3
 8012c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c14:	68db      	ldr	r3, [r3, #12]
 8012c16:	4322      	orrs	r2, r4
 8012c18:	b292      	uxth	r2, r2
 8012c1a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012c1c:	697a      	ldr	r2, [r7, #20]
 8012c1e:	6879      	ldr	r1, [r7, #4]
 8012c20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c22:	f000 f909 	bl	8012e38 <tcp_output_segment>
 8012c26:	4603      	mov	r3, r0
 8012c28:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d016      	beq.n	8012c60 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	8b5b      	ldrh	r3, [r3, #26]
 8012c36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c3a:	b29a      	uxth	r2, r3
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	835a      	strh	r2, [r3, #26]
      return err;
 8012c40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c44:	e0d3      	b.n	8012dee <tcp_output+0x3de>
 8012c46:	bf00      	nop
 8012c48:	08019e44 	.word	0x08019e44
 8012c4c:	0801a388 	.word	0x0801a388
 8012c50:	08019e98 	.word	0x08019e98
 8012c54:	0801a3a0 	.word	0x0801a3a0
 8012c58:	20009014 	.word	0x20009014
 8012c5c:	0801a3c8 	.word	0x0801a3c8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c62:	681a      	ldr	r2, [r3, #0]
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	7d1b      	ldrb	r3, [r3, #20]
 8012c6c:	2b02      	cmp	r3, #2
 8012c6e:	d006      	beq.n	8012c7e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	8b5b      	ldrh	r3, [r3, #26]
 8012c74:	f023 0303 	bic.w	r3, r3, #3
 8012c78:	b29a      	uxth	r2, r3
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c80:	68db      	ldr	r3, [r3, #12]
 8012c82:	685b      	ldr	r3, [r3, #4]
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7f9 fe64 	bl	800c952 <lwip_htonl>
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8e:	891b      	ldrh	r3, [r3, #8]
 8012c90:	461d      	mov	r5, r3
 8012c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c94:	68db      	ldr	r3, [r3, #12]
 8012c96:	899b      	ldrh	r3, [r3, #12]
 8012c98:	b29b      	uxth	r3, r3
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f7f9 fe44 	bl	800c928 <lwip_htons>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	b2db      	uxtb	r3, r3
 8012ca4:	f003 0303 	and.w	r3, r3, #3
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d001      	beq.n	8012cb0 <tcp_output+0x2a0>
 8012cac:	2301      	movs	r3, #1
 8012cae:	e000      	b.n	8012cb2 <tcp_output+0x2a2>
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	442b      	add	r3, r5
 8012cb4:	4423      	add	r3, r4
 8012cb6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	1ad3      	subs	r3, r2, r3
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	da02      	bge.n	8012cca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	68ba      	ldr	r2, [r7, #8]
 8012cc8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ccc:	891b      	ldrh	r3, [r3, #8]
 8012cce:	461c      	mov	r4, r3
 8012cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd2:	68db      	ldr	r3, [r3, #12]
 8012cd4:	899b      	ldrh	r3, [r3, #12]
 8012cd6:	b29b      	uxth	r3, r3
 8012cd8:	4618      	mov	r0, r3
 8012cda:	f7f9 fe25 	bl	800c928 <lwip_htons>
 8012cde:	4603      	mov	r3, r0
 8012ce0:	b2db      	uxtb	r3, r3
 8012ce2:	f003 0303 	and.w	r3, r3, #3
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d001      	beq.n	8012cee <tcp_output+0x2de>
 8012cea:	2301      	movs	r3, #1
 8012cec:	e000      	b.n	8012cf0 <tcp_output+0x2e0>
 8012cee:	2300      	movs	r3, #0
 8012cf0:	4423      	add	r3, r4
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d049      	beq.n	8012d8a <tcp_output+0x37a>
      seg->next = NULL;
 8012cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d105      	bne.n	8012d10 <tcp_output+0x300>
        pcb->unacked = seg;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d08:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0c:	623b      	str	r3, [r7, #32]
 8012d0e:	e03f      	b.n	8012d90 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d12:	68db      	ldr	r3, [r3, #12]
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7f9 fe1b 	bl	800c952 <lwip_htonl>
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	6a3b      	ldr	r3, [r7, #32]
 8012d20:	68db      	ldr	r3, [r3, #12]
 8012d22:	685b      	ldr	r3, [r3, #4]
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7f9 fe14 	bl	800c952 <lwip_htonl>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	1ae3      	subs	r3, r4, r3
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	da24      	bge.n	8012d7c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	3370      	adds	r3, #112	; 0x70
 8012d36:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d38:	e002      	b.n	8012d40 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012d3a:	69fb      	ldr	r3, [r7, #28]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d011      	beq.n	8012d6c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012d48:	69fb      	ldr	r3, [r7, #28]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	68db      	ldr	r3, [r3, #12]
 8012d4e:	685b      	ldr	r3, [r3, #4]
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7f9 fdfe 	bl	800c952 <lwip_htonl>
 8012d56:	4604      	mov	r4, r0
 8012d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d5a:	68db      	ldr	r3, [r3, #12]
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7f9 fdf7 	bl	800c952 <lwip_htonl>
 8012d64:	4603      	mov	r3, r0
 8012d66:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	dbe6      	blt.n	8012d3a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012d6c:	69fb      	ldr	r3, [r7, #28]
 8012d6e:	681a      	ldr	r2, [r3, #0]
 8012d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d72:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012d74:	69fb      	ldr	r3, [r7, #28]
 8012d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d78:	601a      	str	r2, [r3, #0]
 8012d7a:	e009      	b.n	8012d90 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012d7c:	6a3b      	ldr	r3, [r7, #32]
 8012d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d80:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012d82:	6a3b      	ldr	r3, [r7, #32]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	623b      	str	r3, [r7, #32]
 8012d88:	e002      	b.n	8012d90 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d8c:	f7fc fc3f 	bl	800f60e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d94:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d012      	beq.n	8012dc2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d9e:	68db      	ldr	r3, [r3, #12]
 8012da0:	685b      	ldr	r3, [r3, #4]
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7f9 fdd5 	bl	800c952 <lwip_htonl>
 8012da8:	4602      	mov	r2, r0
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012dae:	1ad3      	subs	r3, r2, r3
 8012db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012db2:	8912      	ldrh	r2, [r2, #8]
 8012db4:	4413      	add	r3, r2
  while (seg != NULL &&
 8012db6:	69ba      	ldr	r2, [r7, #24]
 8012db8:	429a      	cmp	r2, r3
 8012dba:	f4bf aed9 	bcs.w	8012b70 <tcp_output+0x160>
 8012dbe:	e000      	b.n	8012dc2 <tcp_output+0x3b2>
      break;
 8012dc0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d108      	bne.n	8012ddc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012dd2:	e004      	b.n	8012dde <tcp_output+0x3ce>
    goto output_done;
 8012dd4:	bf00      	nop
 8012dd6:	e002      	b.n	8012dde <tcp_output+0x3ce>
    goto output_done;
 8012dd8:	bf00      	nop
 8012dda:	e000      	b.n	8012dde <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012ddc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	8b5b      	ldrh	r3, [r3, #26]
 8012de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012de6:	b29a      	uxth	r2, r3
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012dec:	2300      	movs	r3, #0
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3728      	adds	r7, #40	; 0x28
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bdb0      	pop	{r4, r5, r7, pc}
 8012df6:	bf00      	nop

08012df8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b082      	sub	sp, #8
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d106      	bne.n	8012e14 <tcp_output_segment_busy+0x1c>
 8012e06:	4b09      	ldr	r3, [pc, #36]	; (8012e2c <tcp_output_segment_busy+0x34>)
 8012e08:	f240 529a 	movw	r2, #1434	; 0x59a
 8012e0c:	4908      	ldr	r1, [pc, #32]	; (8012e30 <tcp_output_segment_busy+0x38>)
 8012e0e:	4809      	ldr	r0, [pc, #36]	; (8012e34 <tcp_output_segment_busy+0x3c>)
 8012e10:	f004 fc62 	bl	80176d8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	685b      	ldr	r3, [r3, #4]
 8012e18:	7b9b      	ldrb	r3, [r3, #14]
 8012e1a:	2b01      	cmp	r3, #1
 8012e1c:	d001      	beq.n	8012e22 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012e1e:	2301      	movs	r3, #1
 8012e20:	e000      	b.n	8012e24 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012e22:	2300      	movs	r3, #0
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3708      	adds	r7, #8
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}
 8012e2c:	08019e44 	.word	0x08019e44
 8012e30:	0801a3e0 	.word	0x0801a3e0
 8012e34:	08019e98 	.word	0x08019e98

08012e38 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012e38:	b5b0      	push	{r4, r5, r7, lr}
 8012e3a:	b08c      	sub	sp, #48	; 0x30
 8012e3c:	af04      	add	r7, sp, #16
 8012e3e:	60f8      	str	r0, [r7, #12]
 8012e40:	60b9      	str	r1, [r7, #8]
 8012e42:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d106      	bne.n	8012e58 <tcp_output_segment+0x20>
 8012e4a:	4b63      	ldr	r3, [pc, #396]	; (8012fd8 <tcp_output_segment+0x1a0>)
 8012e4c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012e50:	4962      	ldr	r1, [pc, #392]	; (8012fdc <tcp_output_segment+0x1a4>)
 8012e52:	4863      	ldr	r0, [pc, #396]	; (8012fe0 <tcp_output_segment+0x1a8>)
 8012e54:	f004 fc40 	bl	80176d8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012e58:	68bb      	ldr	r3, [r7, #8]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d106      	bne.n	8012e6c <tcp_output_segment+0x34>
 8012e5e:	4b5e      	ldr	r3, [pc, #376]	; (8012fd8 <tcp_output_segment+0x1a0>)
 8012e60:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012e64:	495f      	ldr	r1, [pc, #380]	; (8012fe4 <tcp_output_segment+0x1ac>)
 8012e66:	485e      	ldr	r0, [pc, #376]	; (8012fe0 <tcp_output_segment+0x1a8>)
 8012e68:	f004 fc36 	bl	80176d8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d106      	bne.n	8012e80 <tcp_output_segment+0x48>
 8012e72:	4b59      	ldr	r3, [pc, #356]	; (8012fd8 <tcp_output_segment+0x1a0>)
 8012e74:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012e78:	495b      	ldr	r1, [pc, #364]	; (8012fe8 <tcp_output_segment+0x1b0>)
 8012e7a:	4859      	ldr	r0, [pc, #356]	; (8012fe0 <tcp_output_segment+0x1a8>)
 8012e7c:	f004 fc2c 	bl	80176d8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012e80:	68f8      	ldr	r0, [r7, #12]
 8012e82:	f7ff ffb9 	bl	8012df8 <tcp_output_segment_busy>
 8012e86:	4603      	mov	r3, r0
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d001      	beq.n	8012e90 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	e09f      	b.n	8012fd0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012e90:	68bb      	ldr	r3, [r7, #8]
 8012e92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	68dc      	ldr	r4, [r3, #12]
 8012e98:	4610      	mov	r0, r2
 8012e9a:	f7f9 fd5a 	bl	800c952 <lwip_htonl>
 8012e9e:	4603      	mov	r3, r0
 8012ea0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012ea2:	68bb      	ldr	r3, [r7, #8]
 8012ea4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	68dc      	ldr	r4, [r3, #12]
 8012eaa:	4610      	mov	r0, r2
 8012eac:	f7f9 fd3c 	bl	800c928 <lwip_htons>
 8012eb0:	4603      	mov	r3, r0
 8012eb2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eb8:	68ba      	ldr	r2, [r7, #8]
 8012eba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012ebc:	441a      	add	r2, r3
 8012ebe:	68bb      	ldr	r3, [r7, #8]
 8012ec0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	68db      	ldr	r3, [r3, #12]
 8012ec6:	3314      	adds	r3, #20
 8012ec8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	7a9b      	ldrb	r3, [r3, #10]
 8012ece:	f003 0301 	and.w	r3, r3, #1
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d015      	beq.n	8012f02 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	3304      	adds	r3, #4
 8012eda:	461a      	mov	r2, r3
 8012edc:	6879      	ldr	r1, [r7, #4]
 8012ede:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012ee2:	f7fc fe8b 	bl	800fbfc <tcp_eff_send_mss_netif>
 8012ee6:	4603      	mov	r3, r0
 8012ee8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012eea:	8b7b      	ldrh	r3, [r7, #26]
 8012eec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	f7f9 fd2e 	bl	800c952 <lwip_htonl>
 8012ef6:	4602      	mov	r2, r0
 8012ef8:	69fb      	ldr	r3, [r7, #28]
 8012efa:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012efc:	69fb      	ldr	r3, [r7, #28]
 8012efe:	3304      	adds	r3, #4
 8012f00:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	da02      	bge.n	8012f12 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012f0c:	68bb      	ldr	r3, [r7, #8]
 8012f0e:	2200      	movs	r2, #0
 8012f10:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d10c      	bne.n	8012f34 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012f1a:	4b34      	ldr	r3, [pc, #208]	; (8012fec <tcp_output_segment+0x1b4>)
 8012f1c:	681a      	ldr	r2, [r3, #0]
 8012f1e:	68bb      	ldr	r3, [r7, #8]
 8012f20:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	68db      	ldr	r3, [r3, #12]
 8012f26:	685b      	ldr	r3, [r3, #4]
 8012f28:	4618      	mov	r0, r3
 8012f2a:	f7f9 fd12 	bl	800c952 <lwip_htonl>
 8012f2e:	4602      	mov	r2, r0
 8012f30:	68bb      	ldr	r3, [r7, #8]
 8012f32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	68da      	ldr	r2, [r3, #12]
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	685b      	ldr	r3, [r3, #4]
 8012f3c:	685b      	ldr	r3, [r3, #4]
 8012f3e:	1ad3      	subs	r3, r2, r3
 8012f40:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	685b      	ldr	r3, [r3, #4]
 8012f46:	8959      	ldrh	r1, [r3, #10]
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	685b      	ldr	r3, [r3, #4]
 8012f4c:	8b3a      	ldrh	r2, [r7, #24]
 8012f4e:	1a8a      	subs	r2, r1, r2
 8012f50:	b292      	uxth	r2, r2
 8012f52:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	8919      	ldrh	r1, [r3, #8]
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	685b      	ldr	r3, [r3, #4]
 8012f5e:	8b3a      	ldrh	r2, [r7, #24]
 8012f60:	1a8a      	subs	r2, r1, r2
 8012f62:	b292      	uxth	r2, r2
 8012f64:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	685b      	ldr	r3, [r3, #4]
 8012f6a:	68fa      	ldr	r2, [r7, #12]
 8012f6c:	68d2      	ldr	r2, [r2, #12]
 8012f6e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	68db      	ldr	r3, [r3, #12]
 8012f74:	2200      	movs	r2, #0
 8012f76:	741a      	strb	r2, [r3, #16]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	68db      	ldr	r3, [r3, #12]
 8012f80:	f103 0214 	add.w	r2, r3, #20
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	7a9b      	ldrb	r3, [r3, #10]
 8012f88:	009b      	lsls	r3, r3, #2
 8012f8a:	f003 0304 	and.w	r3, r3, #4
 8012f8e:	4413      	add	r3, r2
 8012f90:	69fa      	ldr	r2, [r7, #28]
 8012f92:	429a      	cmp	r2, r3
 8012f94:	d006      	beq.n	8012fa4 <tcp_output_segment+0x16c>
 8012f96:	4b10      	ldr	r3, [pc, #64]	; (8012fd8 <tcp_output_segment+0x1a0>)
 8012f98:	f240 621c 	movw	r2, #1564	; 0x61c
 8012f9c:	4914      	ldr	r1, [pc, #80]	; (8012ff0 <tcp_output_segment+0x1b8>)
 8012f9e:	4810      	ldr	r0, [pc, #64]	; (8012fe0 <tcp_output_segment+0x1a8>)
 8012fa0:	f004 fb9a 	bl	80176d8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	6858      	ldr	r0, [r3, #4]
 8012fa8:	68b9      	ldr	r1, [r7, #8]
 8012faa:	68bb      	ldr	r3, [r7, #8]
 8012fac:	1d1c      	adds	r4, r3, #4
 8012fae:	68bb      	ldr	r3, [r7, #8]
 8012fb0:	7add      	ldrb	r5, [r3, #11]
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	7a9b      	ldrb	r3, [r3, #10]
 8012fb6:	687a      	ldr	r2, [r7, #4]
 8012fb8:	9202      	str	r2, [sp, #8]
 8012fba:	2206      	movs	r2, #6
 8012fbc:	9201      	str	r2, [sp, #4]
 8012fbe:	9300      	str	r3, [sp, #0]
 8012fc0:	462b      	mov	r3, r5
 8012fc2:	4622      	mov	r2, r4
 8012fc4:	f002 fdc8 	bl	8015b58 <ip4_output_if>
 8012fc8:	4603      	mov	r3, r0
 8012fca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012fcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3720      	adds	r7, #32
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bdb0      	pop	{r4, r5, r7, pc}
 8012fd8:	08019e44 	.word	0x08019e44
 8012fdc:	0801a408 	.word	0x0801a408
 8012fe0:	08019e98 	.word	0x08019e98
 8012fe4:	0801a428 	.word	0x0801a428
 8012fe8:	0801a448 	.word	0x0801a448
 8012fec:	20008fc8 	.word	0x20008fc8
 8012ff0:	0801a46c 	.word	0x0801a46c

08012ff4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012ff4:	b5b0      	push	{r4, r5, r7, lr}
 8012ff6:	b084      	sub	sp, #16
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d106      	bne.n	8013010 <tcp_rexmit_rto_prepare+0x1c>
 8013002:	4b31      	ldr	r3, [pc, #196]	; (80130c8 <tcp_rexmit_rto_prepare+0xd4>)
 8013004:	f240 6263 	movw	r2, #1635	; 0x663
 8013008:	4930      	ldr	r1, [pc, #192]	; (80130cc <tcp_rexmit_rto_prepare+0xd8>)
 801300a:	4831      	ldr	r0, [pc, #196]	; (80130d0 <tcp_rexmit_rto_prepare+0xdc>)
 801300c:	f004 fb64 	bl	80176d8 <iprintf>

  if (pcb->unacked == NULL) {
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013014:	2b00      	cmp	r3, #0
 8013016:	d102      	bne.n	801301e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013018:	f06f 0305 	mvn.w	r3, #5
 801301c:	e050      	b.n	80130c0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013022:	60fb      	str	r3, [r7, #12]
 8013024:	e00b      	b.n	801303e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8013026:	68f8      	ldr	r0, [r7, #12]
 8013028:	f7ff fee6 	bl	8012df8 <tcp_output_segment_busy>
 801302c:	4603      	mov	r3, r0
 801302e:	2b00      	cmp	r3, #0
 8013030:	d002      	beq.n	8013038 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013032:	f06f 0305 	mvn.w	r3, #5
 8013036:	e043      	b.n	80130c0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	60fb      	str	r3, [r7, #12]
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d1ef      	bne.n	8013026 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013046:	68f8      	ldr	r0, [r7, #12]
 8013048:	f7ff fed6 	bl	8012df8 <tcp_output_segment_busy>
 801304c:	4603      	mov	r3, r0
 801304e:	2b00      	cmp	r3, #0
 8013050:	d002      	beq.n	8013058 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8013052:	f06f 0305 	mvn.w	r3, #5
 8013056:	e033      	b.n	80130c0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2200      	movs	r2, #0
 801306c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	8b5b      	ldrh	r3, [r3, #26]
 8013072:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8013076:	b29a      	uxth	r2, r3
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	68db      	ldr	r3, [r3, #12]
 8013080:	685b      	ldr	r3, [r3, #4]
 8013082:	4618      	mov	r0, r3
 8013084:	f7f9 fc65 	bl	800c952 <lwip_htonl>
 8013088:	4604      	mov	r4, r0
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	891b      	ldrh	r3, [r3, #8]
 801308e:	461d      	mov	r5, r3
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	68db      	ldr	r3, [r3, #12]
 8013094:	899b      	ldrh	r3, [r3, #12]
 8013096:	b29b      	uxth	r3, r3
 8013098:	4618      	mov	r0, r3
 801309a:	f7f9 fc45 	bl	800c928 <lwip_htons>
 801309e:	4603      	mov	r3, r0
 80130a0:	b2db      	uxtb	r3, r3
 80130a2:	f003 0303 	and.w	r3, r3, #3
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d001      	beq.n	80130ae <tcp_rexmit_rto_prepare+0xba>
 80130aa:	2301      	movs	r3, #1
 80130ac:	e000      	b.n	80130b0 <tcp_rexmit_rto_prepare+0xbc>
 80130ae:	2300      	movs	r3, #0
 80130b0:	442b      	add	r3, r5
 80130b2:	18e2      	adds	r2, r4, r3
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	2200      	movs	r2, #0
 80130bc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80130be:	2300      	movs	r3, #0
}
 80130c0:	4618      	mov	r0, r3
 80130c2:	3710      	adds	r7, #16
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bdb0      	pop	{r4, r5, r7, pc}
 80130c8:	08019e44 	.word	0x08019e44
 80130cc:	0801a480 	.word	0x0801a480
 80130d0:	08019e98 	.word	0x08019e98

080130d4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b082      	sub	sp, #8
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d106      	bne.n	80130f0 <tcp_rexmit_rto_commit+0x1c>
 80130e2:	4b0d      	ldr	r3, [pc, #52]	; (8013118 <tcp_rexmit_rto_commit+0x44>)
 80130e4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80130e8:	490c      	ldr	r1, [pc, #48]	; (801311c <tcp_rexmit_rto_commit+0x48>)
 80130ea:	480d      	ldr	r0, [pc, #52]	; (8013120 <tcp_rexmit_rto_commit+0x4c>)
 80130ec:	f004 faf4 	bl	80176d8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80130f6:	2bff      	cmp	r3, #255	; 0xff
 80130f8:	d007      	beq.n	801310a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013100:	3301      	adds	r3, #1
 8013102:	b2da      	uxtb	r2, r3
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801310a:	6878      	ldr	r0, [r7, #4]
 801310c:	f7ff fc80 	bl	8012a10 <tcp_output>
}
 8013110:	bf00      	nop
 8013112:	3708      	adds	r7, #8
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}
 8013118:	08019e44 	.word	0x08019e44
 801311c:	0801a4a4 	.word	0x0801a4a4
 8013120:	08019e98 	.word	0x08019e98

08013124 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d106      	bne.n	8013140 <tcp_rexmit_rto+0x1c>
 8013132:	4b0a      	ldr	r3, [pc, #40]	; (801315c <tcp_rexmit_rto+0x38>)
 8013134:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013138:	4909      	ldr	r1, [pc, #36]	; (8013160 <tcp_rexmit_rto+0x3c>)
 801313a:	480a      	ldr	r0, [pc, #40]	; (8013164 <tcp_rexmit_rto+0x40>)
 801313c:	f004 facc 	bl	80176d8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f7ff ff57 	bl	8012ff4 <tcp_rexmit_rto_prepare>
 8013146:	4603      	mov	r3, r0
 8013148:	2b00      	cmp	r3, #0
 801314a:	d102      	bne.n	8013152 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f7ff ffc1 	bl	80130d4 <tcp_rexmit_rto_commit>
  }
}
 8013152:	bf00      	nop
 8013154:	3708      	adds	r7, #8
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	08019e44 	.word	0x08019e44
 8013160:	0801a4c8 	.word	0x0801a4c8
 8013164:	08019e98 	.word	0x08019e98

08013168 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013168:	b590      	push	{r4, r7, lr}
 801316a:	b085      	sub	sp, #20
 801316c:	af00      	add	r7, sp, #0
 801316e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d106      	bne.n	8013184 <tcp_rexmit+0x1c>
 8013176:	4b2f      	ldr	r3, [pc, #188]	; (8013234 <tcp_rexmit+0xcc>)
 8013178:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801317c:	492e      	ldr	r1, [pc, #184]	; (8013238 <tcp_rexmit+0xd0>)
 801317e:	482f      	ldr	r0, [pc, #188]	; (801323c <tcp_rexmit+0xd4>)
 8013180:	f004 faaa 	bl	80176d8 <iprintf>

  if (pcb->unacked == NULL) {
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013188:	2b00      	cmp	r3, #0
 801318a:	d102      	bne.n	8013192 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801318c:	f06f 0305 	mvn.w	r3, #5
 8013190:	e04c      	b.n	801322c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013196:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013198:	68b8      	ldr	r0, [r7, #8]
 801319a:	f7ff fe2d 	bl	8012df8 <tcp_output_segment_busy>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d002      	beq.n	80131aa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80131a4:	f06f 0305 	mvn.w	r3, #5
 80131a8:	e040      	b.n	801322c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80131aa:	68bb      	ldr	r3, [r7, #8]
 80131ac:	681a      	ldr	r2, [r3, #0]
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	336c      	adds	r3, #108	; 0x6c
 80131b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80131b8:	e002      	b.n	80131c0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d011      	beq.n	80131ec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	68db      	ldr	r3, [r3, #12]
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7f9 fbbe 	bl	800c952 <lwip_htonl>
 80131d6:	4604      	mov	r4, r0
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	68db      	ldr	r3, [r3, #12]
 80131dc:	685b      	ldr	r3, [r3, #4]
 80131de:	4618      	mov	r0, r3
 80131e0:	f7f9 fbb7 	bl	800c952 <lwip_htonl>
 80131e4:	4603      	mov	r3, r0
 80131e6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	dbe6      	blt.n	80131ba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	681a      	ldr	r2, [r3, #0]
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	68ba      	ldr	r2, [r7, #8]
 80131f8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d103      	bne.n	801320a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	2200      	movs	r2, #0
 8013206:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013210:	2bff      	cmp	r3, #255	; 0xff
 8013212:	d007      	beq.n	8013224 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801321a:	3301      	adds	r3, #1
 801321c:	b2da      	uxtb	r2, r3
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	2200      	movs	r2, #0
 8013228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801322a:	2300      	movs	r3, #0
}
 801322c:	4618      	mov	r0, r3
 801322e:	3714      	adds	r7, #20
 8013230:	46bd      	mov	sp, r7
 8013232:	bd90      	pop	{r4, r7, pc}
 8013234:	08019e44 	.word	0x08019e44
 8013238:	0801a4e4 	.word	0x0801a4e4
 801323c:	08019e98 	.word	0x08019e98

08013240 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d106      	bne.n	801325c <tcp_rexmit_fast+0x1c>
 801324e:	4b2a      	ldr	r3, [pc, #168]	; (80132f8 <tcp_rexmit_fast+0xb8>)
 8013250:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013254:	4929      	ldr	r1, [pc, #164]	; (80132fc <tcp_rexmit_fast+0xbc>)
 8013256:	482a      	ldr	r0, [pc, #168]	; (8013300 <tcp_rexmit_fast+0xc0>)
 8013258:	f004 fa3e 	bl	80176d8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013260:	2b00      	cmp	r3, #0
 8013262:	d045      	beq.n	80132f0 <tcp_rexmit_fast+0xb0>
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	8b5b      	ldrh	r3, [r3, #26]
 8013268:	f003 0304 	and.w	r3, r3, #4
 801326c:	2b00      	cmp	r3, #0
 801326e:	d13f      	bne.n	80132f0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f7ff ff79 	bl	8013168 <tcp_rexmit>
 8013276:	4603      	mov	r3, r0
 8013278:	2b00      	cmp	r3, #0
 801327a:	d139      	bne.n	80132f0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013288:	4293      	cmp	r3, r2
 801328a:	bf28      	it	cs
 801328c:	4613      	movcs	r3, r2
 801328e:	b29b      	uxth	r3, r3
 8013290:	2b00      	cmp	r3, #0
 8013292:	da00      	bge.n	8013296 <tcp_rexmit_fast+0x56>
 8013294:	3301      	adds	r3, #1
 8013296:	105b      	asrs	r3, r3, #1
 8013298:	b29a      	uxth	r2, r3
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80132a6:	461a      	mov	r2, r3
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132ac:	005b      	lsls	r3, r3, #1
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d206      	bcs.n	80132c0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132b6:	005b      	lsls	r3, r3, #1
 80132b8:	b29a      	uxth	r2, r3
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132ca:	4619      	mov	r1, r3
 80132cc:	0049      	lsls	r1, r1, #1
 80132ce:	440b      	add	r3, r1
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	4413      	add	r3, r2
 80132d4:	b29a      	uxth	r2, r3
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	8b5b      	ldrh	r3, [r3, #26]
 80132e0:	f043 0304 	orr.w	r3, r3, #4
 80132e4:	b29a      	uxth	r2, r3
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2200      	movs	r2, #0
 80132ee:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80132f0:	bf00      	nop
 80132f2:	3708      	adds	r7, #8
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}
 80132f8:	08019e44 	.word	0x08019e44
 80132fc:	0801a4fc 	.word	0x0801a4fc
 8013300:	08019e98 	.word	0x08019e98

08013304 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b086      	sub	sp, #24
 8013308:	af00      	add	r7, sp, #0
 801330a:	60f8      	str	r0, [r7, #12]
 801330c:	607b      	str	r3, [r7, #4]
 801330e:	460b      	mov	r3, r1
 8013310:	817b      	strh	r3, [r7, #10]
 8013312:	4613      	mov	r3, r2
 8013314:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013316:	897a      	ldrh	r2, [r7, #10]
 8013318:	893b      	ldrh	r3, [r7, #8]
 801331a:	4413      	add	r3, r2
 801331c:	b29b      	uxth	r3, r3
 801331e:	3314      	adds	r3, #20
 8013320:	b29b      	uxth	r3, r3
 8013322:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013326:	4619      	mov	r1, r3
 8013328:	2022      	movs	r0, #34	; 0x22
 801332a:	f7fa fb77 	bl	800da1c <pbuf_alloc>
 801332e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d04d      	beq.n	80133d2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013336:	897b      	ldrh	r3, [r7, #10]
 8013338:	3313      	adds	r3, #19
 801333a:	697a      	ldr	r2, [r7, #20]
 801333c:	8952      	ldrh	r2, [r2, #10]
 801333e:	4293      	cmp	r3, r2
 8013340:	db06      	blt.n	8013350 <tcp_output_alloc_header_common+0x4c>
 8013342:	4b26      	ldr	r3, [pc, #152]	; (80133dc <tcp_output_alloc_header_common+0xd8>)
 8013344:	f240 7223 	movw	r2, #1827	; 0x723
 8013348:	4925      	ldr	r1, [pc, #148]	; (80133e0 <tcp_output_alloc_header_common+0xdc>)
 801334a:	4826      	ldr	r0, [pc, #152]	; (80133e4 <tcp_output_alloc_header_common+0xe0>)
 801334c:	f004 f9c4 	bl	80176d8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	685b      	ldr	r3, [r3, #4]
 8013354:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013356:	8c3b      	ldrh	r3, [r7, #32]
 8013358:	4618      	mov	r0, r3
 801335a:	f7f9 fae5 	bl	800c928 <lwip_htons>
 801335e:	4603      	mov	r3, r0
 8013360:	461a      	mov	r2, r3
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013368:	4618      	mov	r0, r3
 801336a:	f7f9 fadd 	bl	800c928 <lwip_htons>
 801336e:	4603      	mov	r3, r0
 8013370:	461a      	mov	r2, r3
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	687a      	ldr	r2, [r7, #4]
 801337a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801337c:	68f8      	ldr	r0, [r7, #12]
 801337e:	f7f9 fae8 	bl	800c952 <lwip_htonl>
 8013382:	4602      	mov	r2, r0
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013388:	897b      	ldrh	r3, [r7, #10]
 801338a:	089b      	lsrs	r3, r3, #2
 801338c:	b29b      	uxth	r3, r3
 801338e:	3305      	adds	r3, #5
 8013390:	b29b      	uxth	r3, r3
 8013392:	031b      	lsls	r3, r3, #12
 8013394:	b29a      	uxth	r2, r3
 8013396:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801339a:	b29b      	uxth	r3, r3
 801339c:	4313      	orrs	r3, r2
 801339e:	b29b      	uxth	r3, r3
 80133a0:	4618      	mov	r0, r3
 80133a2:	f7f9 fac1 	bl	800c928 <lwip_htons>
 80133a6:	4603      	mov	r3, r0
 80133a8:	461a      	mov	r2, r3
 80133aa:	693b      	ldr	r3, [r7, #16]
 80133ac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80133ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7f9 fab9 	bl	800c928 <lwip_htons>
 80133b6:	4603      	mov	r3, r0
 80133b8:	461a      	mov	r2, r3
 80133ba:	693b      	ldr	r3, [r7, #16]
 80133bc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80133be:	693b      	ldr	r3, [r7, #16]
 80133c0:	2200      	movs	r2, #0
 80133c2:	741a      	strb	r2, [r3, #16]
 80133c4:	2200      	movs	r2, #0
 80133c6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80133c8:	693b      	ldr	r3, [r7, #16]
 80133ca:	2200      	movs	r2, #0
 80133cc:	749a      	strb	r2, [r3, #18]
 80133ce:	2200      	movs	r2, #0
 80133d0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80133d2:	697b      	ldr	r3, [r7, #20]
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3718      	adds	r7, #24
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}
 80133dc:	08019e44 	.word	0x08019e44
 80133e0:	0801a51c 	.word	0x0801a51c
 80133e4:	08019e98 	.word	0x08019e98

080133e8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80133e8:	b5b0      	push	{r4, r5, r7, lr}
 80133ea:	b08a      	sub	sp, #40	; 0x28
 80133ec:	af04      	add	r7, sp, #16
 80133ee:	60f8      	str	r0, [r7, #12]
 80133f0:	607b      	str	r3, [r7, #4]
 80133f2:	460b      	mov	r3, r1
 80133f4:	817b      	strh	r3, [r7, #10]
 80133f6:	4613      	mov	r3, r2
 80133f8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d106      	bne.n	801340e <tcp_output_alloc_header+0x26>
 8013400:	4b15      	ldr	r3, [pc, #84]	; (8013458 <tcp_output_alloc_header+0x70>)
 8013402:	f240 7242 	movw	r2, #1858	; 0x742
 8013406:	4915      	ldr	r1, [pc, #84]	; (801345c <tcp_output_alloc_header+0x74>)
 8013408:	4815      	ldr	r0, [pc, #84]	; (8013460 <tcp_output_alloc_header+0x78>)
 801340a:	f004 f965 	bl	80176d8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	8adb      	ldrh	r3, [r3, #22]
 8013416:	68fa      	ldr	r2, [r7, #12]
 8013418:	8b12      	ldrh	r2, [r2, #24]
 801341a:	68f9      	ldr	r1, [r7, #12]
 801341c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801341e:	893d      	ldrh	r5, [r7, #8]
 8013420:	897c      	ldrh	r4, [r7, #10]
 8013422:	9103      	str	r1, [sp, #12]
 8013424:	2110      	movs	r1, #16
 8013426:	9102      	str	r1, [sp, #8]
 8013428:	9201      	str	r2, [sp, #4]
 801342a:	9300      	str	r3, [sp, #0]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	462a      	mov	r2, r5
 8013430:	4621      	mov	r1, r4
 8013432:	f7ff ff67 	bl	8013304 <tcp_output_alloc_header_common>
 8013436:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013438:	697b      	ldr	r3, [r7, #20]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d006      	beq.n	801344c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013442:	68fa      	ldr	r2, [r7, #12]
 8013444:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013446:	441a      	add	r2, r3
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801344c:	697b      	ldr	r3, [r7, #20]
}
 801344e:	4618      	mov	r0, r3
 8013450:	3718      	adds	r7, #24
 8013452:	46bd      	mov	sp, r7
 8013454:	bdb0      	pop	{r4, r5, r7, pc}
 8013456:	bf00      	nop
 8013458:	08019e44 	.word	0x08019e44
 801345c:	0801a54c 	.word	0x0801a54c
 8013460:	08019e98 	.word	0x08019e98

08013464 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013464:	b580      	push	{r7, lr}
 8013466:	b088      	sub	sp, #32
 8013468:	af00      	add	r7, sp, #0
 801346a:	60f8      	str	r0, [r7, #12]
 801346c:	60b9      	str	r1, [r7, #8]
 801346e:	4611      	mov	r1, r2
 8013470:	461a      	mov	r2, r3
 8013472:	460b      	mov	r3, r1
 8013474:	71fb      	strb	r3, [r7, #7]
 8013476:	4613      	mov	r3, r2
 8013478:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801347a:	2300      	movs	r3, #0
 801347c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d106      	bne.n	8013492 <tcp_output_fill_options+0x2e>
 8013484:	4b13      	ldr	r3, [pc, #76]	; (80134d4 <tcp_output_fill_options+0x70>)
 8013486:	f240 7256 	movw	r2, #1878	; 0x756
 801348a:	4913      	ldr	r1, [pc, #76]	; (80134d8 <tcp_output_fill_options+0x74>)
 801348c:	4813      	ldr	r0, [pc, #76]	; (80134dc <tcp_output_fill_options+0x78>)
 801348e:	f004 f923 	bl	80176d8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013498:	69bb      	ldr	r3, [r7, #24]
 801349a:	3314      	adds	r3, #20
 801349c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801349e:	69bb      	ldr	r3, [r7, #24]
 80134a0:	f103 0214 	add.w	r2, r3, #20
 80134a4:	8bfb      	ldrh	r3, [r7, #30]
 80134a6:	009b      	lsls	r3, r3, #2
 80134a8:	4619      	mov	r1, r3
 80134aa:	79fb      	ldrb	r3, [r7, #7]
 80134ac:	009b      	lsls	r3, r3, #2
 80134ae:	f003 0304 	and.w	r3, r3, #4
 80134b2:	440b      	add	r3, r1
 80134b4:	4413      	add	r3, r2
 80134b6:	697a      	ldr	r2, [r7, #20]
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d006      	beq.n	80134ca <tcp_output_fill_options+0x66>
 80134bc:	4b05      	ldr	r3, [pc, #20]	; (80134d4 <tcp_output_fill_options+0x70>)
 80134be:	f240 7275 	movw	r2, #1909	; 0x775
 80134c2:	4907      	ldr	r1, [pc, #28]	; (80134e0 <tcp_output_fill_options+0x7c>)
 80134c4:	4805      	ldr	r0, [pc, #20]	; (80134dc <tcp_output_fill_options+0x78>)
 80134c6:	f004 f907 	bl	80176d8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80134ca:	bf00      	nop
 80134cc:	3720      	adds	r7, #32
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	08019e44 	.word	0x08019e44
 80134d8:	0801a574 	.word	0x0801a574
 80134dc:	08019e98 	.word	0x08019e98
 80134e0:	0801a46c 	.word	0x0801a46c

080134e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b08a      	sub	sp, #40	; 0x28
 80134e8:	af04      	add	r7, sp, #16
 80134ea:	60f8      	str	r0, [r7, #12]
 80134ec:	60b9      	str	r1, [r7, #8]
 80134ee:	607a      	str	r2, [r7, #4]
 80134f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80134f2:	68bb      	ldr	r3, [r7, #8]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d106      	bne.n	8013506 <tcp_output_control_segment+0x22>
 80134f8:	4b1c      	ldr	r3, [pc, #112]	; (801356c <tcp_output_control_segment+0x88>)
 80134fa:	f240 7287 	movw	r2, #1927	; 0x787
 80134fe:	491c      	ldr	r1, [pc, #112]	; (8013570 <tcp_output_control_segment+0x8c>)
 8013500:	481c      	ldr	r0, [pc, #112]	; (8013574 <tcp_output_control_segment+0x90>)
 8013502:	f004 f8e9 	bl	80176d8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013506:	683a      	ldr	r2, [r7, #0]
 8013508:	6879      	ldr	r1, [r7, #4]
 801350a:	68f8      	ldr	r0, [r7, #12]
 801350c:	f7fe ff40 	bl	8012390 <tcp_route>
 8013510:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d102      	bne.n	801351e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013518:	23fc      	movs	r3, #252	; 0xfc
 801351a:	75fb      	strb	r3, [r7, #23]
 801351c:	e01c      	b.n	8013558 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d006      	beq.n	8013532 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	7adb      	ldrb	r3, [r3, #11]
 8013528:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	7a9b      	ldrb	r3, [r3, #10]
 801352e:	757b      	strb	r3, [r7, #21]
 8013530:	e003      	b.n	801353a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013532:	23ff      	movs	r3, #255	; 0xff
 8013534:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013536:	2300      	movs	r3, #0
 8013538:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801353a:	7dba      	ldrb	r2, [r7, #22]
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	9302      	str	r3, [sp, #8]
 8013540:	2306      	movs	r3, #6
 8013542:	9301      	str	r3, [sp, #4]
 8013544:	7d7b      	ldrb	r3, [r7, #21]
 8013546:	9300      	str	r3, [sp, #0]
 8013548:	4613      	mov	r3, r2
 801354a:	683a      	ldr	r2, [r7, #0]
 801354c:	6879      	ldr	r1, [r7, #4]
 801354e:	68b8      	ldr	r0, [r7, #8]
 8013550:	f002 fb02 	bl	8015b58 <ip4_output_if>
 8013554:	4603      	mov	r3, r0
 8013556:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013558:	68b8      	ldr	r0, [r7, #8]
 801355a:	f7fa fd43 	bl	800dfe4 <pbuf_free>
  return err;
 801355e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013562:	4618      	mov	r0, r3
 8013564:	3718      	adds	r7, #24
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	08019e44 	.word	0x08019e44
 8013570:	0801a59c 	.word	0x0801a59c
 8013574:	08019e98 	.word	0x08019e98

08013578 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013578:	b590      	push	{r4, r7, lr}
 801357a:	b08b      	sub	sp, #44	; 0x2c
 801357c:	af04      	add	r7, sp, #16
 801357e:	60f8      	str	r0, [r7, #12]
 8013580:	60b9      	str	r1, [r7, #8]
 8013582:	607a      	str	r2, [r7, #4]
 8013584:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013586:	683b      	ldr	r3, [r7, #0]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d106      	bne.n	801359a <tcp_rst+0x22>
 801358c:	4b1f      	ldr	r3, [pc, #124]	; (801360c <tcp_rst+0x94>)
 801358e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013592:	491f      	ldr	r1, [pc, #124]	; (8013610 <tcp_rst+0x98>)
 8013594:	481f      	ldr	r0, [pc, #124]	; (8013614 <tcp_rst+0x9c>)
 8013596:	f004 f89f 	bl	80176d8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801359c:	2b00      	cmp	r3, #0
 801359e:	d106      	bne.n	80135ae <tcp_rst+0x36>
 80135a0:	4b1a      	ldr	r3, [pc, #104]	; (801360c <tcp_rst+0x94>)
 80135a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80135a6:	491c      	ldr	r1, [pc, #112]	; (8013618 <tcp_rst+0xa0>)
 80135a8:	481a      	ldr	r0, [pc, #104]	; (8013614 <tcp_rst+0x9c>)
 80135aa:	f004 f895 	bl	80176d8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80135ae:	2300      	movs	r3, #0
 80135b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80135b2:	f246 0308 	movw	r3, #24584	; 0x6008
 80135b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80135b8:	7dfb      	ldrb	r3, [r7, #23]
 80135ba:	b29c      	uxth	r4, r3
 80135bc:	68b8      	ldr	r0, [r7, #8]
 80135be:	f7f9 f9c8 	bl	800c952 <lwip_htonl>
 80135c2:	4602      	mov	r2, r0
 80135c4:	8abb      	ldrh	r3, [r7, #20]
 80135c6:	9303      	str	r3, [sp, #12]
 80135c8:	2314      	movs	r3, #20
 80135ca:	9302      	str	r3, [sp, #8]
 80135cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80135ce:	9301      	str	r3, [sp, #4]
 80135d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80135d2:	9300      	str	r3, [sp, #0]
 80135d4:	4613      	mov	r3, r2
 80135d6:	2200      	movs	r2, #0
 80135d8:	4621      	mov	r1, r4
 80135da:	6878      	ldr	r0, [r7, #4]
 80135dc:	f7ff fe92 	bl	8013304 <tcp_output_alloc_header_common>
 80135e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80135e2:	693b      	ldr	r3, [r7, #16]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d00c      	beq.n	8013602 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80135e8:	7dfb      	ldrb	r3, [r7, #23]
 80135ea:	2200      	movs	r2, #0
 80135ec:	6939      	ldr	r1, [r7, #16]
 80135ee:	68f8      	ldr	r0, [r7, #12]
 80135f0:	f7ff ff38 	bl	8013464 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80135f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135f6:	683a      	ldr	r2, [r7, #0]
 80135f8:	6939      	ldr	r1, [r7, #16]
 80135fa:	68f8      	ldr	r0, [r7, #12]
 80135fc:	f7ff ff72 	bl	80134e4 <tcp_output_control_segment>
 8013600:	e000      	b.n	8013604 <tcp_rst+0x8c>
    return;
 8013602:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013604:	371c      	adds	r7, #28
 8013606:	46bd      	mov	sp, r7
 8013608:	bd90      	pop	{r4, r7, pc}
 801360a:	bf00      	nop
 801360c:	08019e44 	.word	0x08019e44
 8013610:	0801a5c8 	.word	0x0801a5c8
 8013614:	08019e98 	.word	0x08019e98
 8013618:	0801a5e4 	.word	0x0801a5e4

0801361c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801361c:	b590      	push	{r4, r7, lr}
 801361e:	b087      	sub	sp, #28
 8013620:	af00      	add	r7, sp, #0
 8013622:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013624:	2300      	movs	r3, #0
 8013626:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013628:	2300      	movs	r3, #0
 801362a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d106      	bne.n	8013640 <tcp_send_empty_ack+0x24>
 8013632:	4b28      	ldr	r3, [pc, #160]	; (80136d4 <tcp_send_empty_ack+0xb8>)
 8013634:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013638:	4927      	ldr	r1, [pc, #156]	; (80136d8 <tcp_send_empty_ack+0xbc>)
 801363a:	4828      	ldr	r0, [pc, #160]	; (80136dc <tcp_send_empty_ack+0xc0>)
 801363c:	f004 f84c 	bl	80176d8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013640:	7dfb      	ldrb	r3, [r7, #23]
 8013642:	009b      	lsls	r3, r3, #2
 8013644:	b2db      	uxtb	r3, r3
 8013646:	f003 0304 	and.w	r3, r3, #4
 801364a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801364c:	7d7b      	ldrb	r3, [r7, #21]
 801364e:	b29c      	uxth	r4, r3
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013654:	4618      	mov	r0, r3
 8013656:	f7f9 f97c 	bl	800c952 <lwip_htonl>
 801365a:	4603      	mov	r3, r0
 801365c:	2200      	movs	r2, #0
 801365e:	4621      	mov	r1, r4
 8013660:	6878      	ldr	r0, [r7, #4]
 8013662:	f7ff fec1 	bl	80133e8 <tcp_output_alloc_header>
 8013666:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013668:	693b      	ldr	r3, [r7, #16]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d109      	bne.n	8013682 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	8b5b      	ldrh	r3, [r3, #26]
 8013672:	f043 0303 	orr.w	r3, r3, #3
 8013676:	b29a      	uxth	r2, r3
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801367c:	f06f 0301 	mvn.w	r3, #1
 8013680:	e023      	b.n	80136ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013682:	7dbb      	ldrb	r3, [r7, #22]
 8013684:	7dfa      	ldrb	r2, [r7, #23]
 8013686:	6939      	ldr	r1, [r7, #16]
 8013688:	6878      	ldr	r0, [r7, #4]
 801368a:	f7ff feeb 	bl	8013464 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801368e:	687a      	ldr	r2, [r7, #4]
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	3304      	adds	r3, #4
 8013694:	6939      	ldr	r1, [r7, #16]
 8013696:	6878      	ldr	r0, [r7, #4]
 8013698:	f7ff ff24 	bl	80134e4 <tcp_output_control_segment>
 801369c:	4603      	mov	r3, r0
 801369e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80136a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d007      	beq.n	80136b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	8b5b      	ldrh	r3, [r3, #26]
 80136ac:	f043 0303 	orr.w	r3, r3, #3
 80136b0:	b29a      	uxth	r2, r3
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	835a      	strh	r2, [r3, #26]
 80136b6:	e006      	b.n	80136c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	8b5b      	ldrh	r3, [r3, #26]
 80136bc:	f023 0303 	bic.w	r3, r3, #3
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80136c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	371c      	adds	r7, #28
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd90      	pop	{r4, r7, pc}
 80136d2:	bf00      	nop
 80136d4:	08019e44 	.word	0x08019e44
 80136d8:	0801a600 	.word	0x0801a600
 80136dc:	08019e98 	.word	0x08019e98

080136e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80136e0:	b590      	push	{r4, r7, lr}
 80136e2:	b087      	sub	sp, #28
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80136e8:	2300      	movs	r3, #0
 80136ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d106      	bne.n	8013700 <tcp_keepalive+0x20>
 80136f2:	4b18      	ldr	r3, [pc, #96]	; (8013754 <tcp_keepalive+0x74>)
 80136f4:	f640 0224 	movw	r2, #2084	; 0x824
 80136f8:	4917      	ldr	r1, [pc, #92]	; (8013758 <tcp_keepalive+0x78>)
 80136fa:	4818      	ldr	r0, [pc, #96]	; (801375c <tcp_keepalive+0x7c>)
 80136fc:	f003 ffec 	bl	80176d8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013700:	7dfb      	ldrb	r3, [r7, #23]
 8013702:	b29c      	uxth	r4, r3
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013708:	3b01      	subs	r3, #1
 801370a:	4618      	mov	r0, r3
 801370c:	f7f9 f921 	bl	800c952 <lwip_htonl>
 8013710:	4603      	mov	r3, r0
 8013712:	2200      	movs	r2, #0
 8013714:	4621      	mov	r1, r4
 8013716:	6878      	ldr	r0, [r7, #4]
 8013718:	f7ff fe66 	bl	80133e8 <tcp_output_alloc_header>
 801371c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d102      	bne.n	801372a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013728:	e010      	b.n	801374c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801372a:	7dfb      	ldrb	r3, [r7, #23]
 801372c:	2200      	movs	r2, #0
 801372e:	6939      	ldr	r1, [r7, #16]
 8013730:	6878      	ldr	r0, [r7, #4]
 8013732:	f7ff fe97 	bl	8013464 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013736:	687a      	ldr	r2, [r7, #4]
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	3304      	adds	r3, #4
 801373c:	6939      	ldr	r1, [r7, #16]
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f7ff fed0 	bl	80134e4 <tcp_output_control_segment>
 8013744:	4603      	mov	r3, r0
 8013746:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801374c:	4618      	mov	r0, r3
 801374e:	371c      	adds	r7, #28
 8013750:	46bd      	mov	sp, r7
 8013752:	bd90      	pop	{r4, r7, pc}
 8013754:	08019e44 	.word	0x08019e44
 8013758:	0801a620 	.word	0x0801a620
 801375c:	08019e98 	.word	0x08019e98

08013760 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013760:	b590      	push	{r4, r7, lr}
 8013762:	b08b      	sub	sp, #44	; 0x2c
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013768:	2300      	movs	r3, #0
 801376a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d106      	bne.n	8013782 <tcp_zero_window_probe+0x22>
 8013774:	4b4c      	ldr	r3, [pc, #304]	; (80138a8 <tcp_zero_window_probe+0x148>)
 8013776:	f640 024f 	movw	r2, #2127	; 0x84f
 801377a:	494c      	ldr	r1, [pc, #304]	; (80138ac <tcp_zero_window_probe+0x14c>)
 801377c:	484c      	ldr	r0, [pc, #304]	; (80138b0 <tcp_zero_window_probe+0x150>)
 801377e:	f003 ffab 	bl	80176d8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013786:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013788:	6a3b      	ldr	r3, [r7, #32]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d101      	bne.n	8013792 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801378e:	2300      	movs	r3, #0
 8013790:	e086      	b.n	80138a0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013798:	2bff      	cmp	r3, #255	; 0xff
 801379a:	d007      	beq.n	80137ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80137a2:	3301      	adds	r3, #1
 80137a4:	b2da      	uxtb	r2, r3
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80137ac:	6a3b      	ldr	r3, [r7, #32]
 80137ae:	68db      	ldr	r3, [r3, #12]
 80137b0:	899b      	ldrh	r3, [r3, #12]
 80137b2:	b29b      	uxth	r3, r3
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7f9 f8b7 	bl	800c928 <lwip_htons>
 80137ba:	4603      	mov	r3, r0
 80137bc:	b2db      	uxtb	r3, r3
 80137be:	f003 0301 	and.w	r3, r3, #1
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d005      	beq.n	80137d2 <tcp_zero_window_probe+0x72>
 80137c6:	6a3b      	ldr	r3, [r7, #32]
 80137c8:	891b      	ldrh	r3, [r3, #8]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d101      	bne.n	80137d2 <tcp_zero_window_probe+0x72>
 80137ce:	2301      	movs	r3, #1
 80137d0:	e000      	b.n	80137d4 <tcp_zero_window_probe+0x74>
 80137d2:	2300      	movs	r3, #0
 80137d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80137d6:	7ffb      	ldrb	r3, [r7, #31]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	bf0c      	ite	eq
 80137dc:	2301      	moveq	r3, #1
 80137de:	2300      	movne	r3, #0
 80137e0:	b2db      	uxtb	r3, r3
 80137e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80137e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137e8:	b299      	uxth	r1, r3
 80137ea:	6a3b      	ldr	r3, [r7, #32]
 80137ec:	68db      	ldr	r3, [r3, #12]
 80137ee:	685b      	ldr	r3, [r3, #4]
 80137f0:	8bba      	ldrh	r2, [r7, #28]
 80137f2:	6878      	ldr	r0, [r7, #4]
 80137f4:	f7ff fdf8 	bl	80133e8 <tcp_output_alloc_header>
 80137f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80137fa:	69bb      	ldr	r3, [r7, #24]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d102      	bne.n	8013806 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013804:	e04c      	b.n	80138a0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013806:	69bb      	ldr	r3, [r7, #24]
 8013808:	685b      	ldr	r3, [r3, #4]
 801380a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801380c:	7ffb      	ldrb	r3, [r7, #31]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d011      	beq.n	8013836 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013812:	697b      	ldr	r3, [r7, #20]
 8013814:	899b      	ldrh	r3, [r3, #12]
 8013816:	b29b      	uxth	r3, r3
 8013818:	b21b      	sxth	r3, r3
 801381a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801381e:	b21c      	sxth	r4, r3
 8013820:	2011      	movs	r0, #17
 8013822:	f7f9 f881 	bl	800c928 <lwip_htons>
 8013826:	4603      	mov	r3, r0
 8013828:	b21b      	sxth	r3, r3
 801382a:	4323      	orrs	r3, r4
 801382c:	b21b      	sxth	r3, r3
 801382e:	b29a      	uxth	r2, r3
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	819a      	strh	r2, [r3, #12]
 8013834:	e010      	b.n	8013858 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	685b      	ldr	r3, [r3, #4]
 801383a:	3314      	adds	r3, #20
 801383c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801383e:	6a3b      	ldr	r3, [r7, #32]
 8013840:	6858      	ldr	r0, [r3, #4]
 8013842:	6a3b      	ldr	r3, [r7, #32]
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	891a      	ldrh	r2, [r3, #8]
 8013848:	6a3b      	ldr	r3, [r7, #32]
 801384a:	891b      	ldrh	r3, [r3, #8]
 801384c:	1ad3      	subs	r3, r2, r3
 801384e:	b29b      	uxth	r3, r3
 8013850:	2201      	movs	r2, #1
 8013852:	6939      	ldr	r1, [r7, #16]
 8013854:	f7fa fdc0 	bl	800e3d8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013858:	6a3b      	ldr	r3, [r7, #32]
 801385a:	68db      	ldr	r3, [r3, #12]
 801385c:	685b      	ldr	r3, [r3, #4]
 801385e:	4618      	mov	r0, r3
 8013860:	f7f9 f877 	bl	800c952 <lwip_htonl>
 8013864:	4603      	mov	r3, r0
 8013866:	3301      	adds	r3, #1
 8013868:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	1ad3      	subs	r3, r2, r3
 8013872:	2b00      	cmp	r3, #0
 8013874:	da02      	bge.n	801387c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	68fa      	ldr	r2, [r7, #12]
 801387a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801387c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013880:	2200      	movs	r2, #0
 8013882:	69b9      	ldr	r1, [r7, #24]
 8013884:	6878      	ldr	r0, [r7, #4]
 8013886:	f7ff fded 	bl	8013464 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801388a:	687a      	ldr	r2, [r7, #4]
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	3304      	adds	r3, #4
 8013890:	69b9      	ldr	r1, [r7, #24]
 8013892:	6878      	ldr	r0, [r7, #4]
 8013894:	f7ff fe26 	bl	80134e4 <tcp_output_control_segment>
 8013898:	4603      	mov	r3, r0
 801389a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801389c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80138a0:	4618      	mov	r0, r3
 80138a2:	372c      	adds	r7, #44	; 0x2c
 80138a4:	46bd      	mov	sp, r7
 80138a6:	bd90      	pop	{r4, r7, pc}
 80138a8:	08019e44 	.word	0x08019e44
 80138ac:	0801a63c 	.word	0x0801a63c
 80138b0:	08019e98 	.word	0x08019e98

080138b4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80138bc:	f7fa ff0c 	bl	800e6d8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80138c0:	4b0a      	ldr	r3, [pc, #40]	; (80138ec <tcpip_tcp_timer+0x38>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d103      	bne.n	80138d0 <tcpip_tcp_timer+0x1c>
 80138c8:	4b09      	ldr	r3, [pc, #36]	; (80138f0 <tcpip_tcp_timer+0x3c>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d005      	beq.n	80138dc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80138d0:	2200      	movs	r2, #0
 80138d2:	4908      	ldr	r1, [pc, #32]	; (80138f4 <tcpip_tcp_timer+0x40>)
 80138d4:	20fa      	movs	r0, #250	; 0xfa
 80138d6:	f000 f8f3 	bl	8013ac0 <sys_timeout>
 80138da:	e003      	b.n	80138e4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80138dc:	4b06      	ldr	r3, [pc, #24]	; (80138f8 <tcpip_tcp_timer+0x44>)
 80138de:	2200      	movs	r2, #0
 80138e0:	601a      	str	r2, [r3, #0]
  }
}
 80138e2:	bf00      	nop
 80138e4:	bf00      	nop
 80138e6:	3708      	adds	r7, #8
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	20008fd4 	.word	0x20008fd4
 80138f0:	20008fd8 	.word	0x20008fd8
 80138f4:	080138b5 	.word	0x080138b5
 80138f8:	20009020 	.word	0x20009020

080138fc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013900:	4b0a      	ldr	r3, [pc, #40]	; (801392c <tcp_timer_needed+0x30>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d10f      	bne.n	8013928 <tcp_timer_needed+0x2c>
 8013908:	4b09      	ldr	r3, [pc, #36]	; (8013930 <tcp_timer_needed+0x34>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d103      	bne.n	8013918 <tcp_timer_needed+0x1c>
 8013910:	4b08      	ldr	r3, [pc, #32]	; (8013934 <tcp_timer_needed+0x38>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d007      	beq.n	8013928 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013918:	4b04      	ldr	r3, [pc, #16]	; (801392c <tcp_timer_needed+0x30>)
 801391a:	2201      	movs	r2, #1
 801391c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801391e:	2200      	movs	r2, #0
 8013920:	4905      	ldr	r1, [pc, #20]	; (8013938 <tcp_timer_needed+0x3c>)
 8013922:	20fa      	movs	r0, #250	; 0xfa
 8013924:	f000 f8cc 	bl	8013ac0 <sys_timeout>
  }
}
 8013928:	bf00      	nop
 801392a:	bd80      	pop	{r7, pc}
 801392c:	20009020 	.word	0x20009020
 8013930:	20008fd4 	.word	0x20008fd4
 8013934:	20008fd8 	.word	0x20008fd8
 8013938:	080138b5 	.word	0x080138b5

0801393c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b086      	sub	sp, #24
 8013940:	af00      	add	r7, sp, #0
 8013942:	60f8      	str	r0, [r7, #12]
 8013944:	60b9      	str	r1, [r7, #8]
 8013946:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013948:	2006      	movs	r0, #6
 801394a:	f7f9 fc65 	bl	800d218 <memp_malloc>
 801394e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d109      	bne.n	801396a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d151      	bne.n	8013a00 <sys_timeout_abs+0xc4>
 801395c:	4b2a      	ldr	r3, [pc, #168]	; (8013a08 <sys_timeout_abs+0xcc>)
 801395e:	22be      	movs	r2, #190	; 0xbe
 8013960:	492a      	ldr	r1, [pc, #168]	; (8013a0c <sys_timeout_abs+0xd0>)
 8013962:	482b      	ldr	r0, [pc, #172]	; (8013a10 <sys_timeout_abs+0xd4>)
 8013964:	f003 feb8 	bl	80176d8 <iprintf>
    return;
 8013968:	e04a      	b.n	8013a00 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801396a:	693b      	ldr	r3, [r7, #16]
 801396c:	2200      	movs	r2, #0
 801396e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	68ba      	ldr	r2, [r7, #8]
 8013974:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	687a      	ldr	r2, [r7, #4]
 801397a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801397c:	693b      	ldr	r3, [r7, #16]
 801397e:	68fa      	ldr	r2, [r7, #12]
 8013980:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013982:	4b24      	ldr	r3, [pc, #144]	; (8013a14 <sys_timeout_abs+0xd8>)
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	2b00      	cmp	r3, #0
 8013988:	d103      	bne.n	8013992 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801398a:	4a22      	ldr	r2, [pc, #136]	; (8013a14 <sys_timeout_abs+0xd8>)
 801398c:	693b      	ldr	r3, [r7, #16]
 801398e:	6013      	str	r3, [r2, #0]
    return;
 8013990:	e037      	b.n	8013a02 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013992:	693b      	ldr	r3, [r7, #16]
 8013994:	685a      	ldr	r2, [r3, #4]
 8013996:	4b1f      	ldr	r3, [pc, #124]	; (8013a14 <sys_timeout_abs+0xd8>)
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	685b      	ldr	r3, [r3, #4]
 801399c:	1ad3      	subs	r3, r2, r3
 801399e:	0fdb      	lsrs	r3, r3, #31
 80139a0:	f003 0301 	and.w	r3, r3, #1
 80139a4:	b2db      	uxtb	r3, r3
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d007      	beq.n	80139ba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80139aa:	4b1a      	ldr	r3, [pc, #104]	; (8013a14 <sys_timeout_abs+0xd8>)
 80139ac:	681a      	ldr	r2, [r3, #0]
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80139b2:	4a18      	ldr	r2, [pc, #96]	; (8013a14 <sys_timeout_abs+0xd8>)
 80139b4:	693b      	ldr	r3, [r7, #16]
 80139b6:	6013      	str	r3, [r2, #0]
 80139b8:	e023      	b.n	8013a02 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80139ba:	4b16      	ldr	r3, [pc, #88]	; (8013a14 <sys_timeout_abs+0xd8>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	617b      	str	r3, [r7, #20]
 80139c0:	e01a      	b.n	80139f8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80139c2:	697b      	ldr	r3, [r7, #20]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d00b      	beq.n	80139e2 <sys_timeout_abs+0xa6>
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	685a      	ldr	r2, [r3, #4]
 80139ce:	697b      	ldr	r3, [r7, #20]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	685b      	ldr	r3, [r3, #4]
 80139d4:	1ad3      	subs	r3, r2, r3
 80139d6:	0fdb      	lsrs	r3, r3, #31
 80139d8:	f003 0301 	and.w	r3, r3, #1
 80139dc:	b2db      	uxtb	r3, r3
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d007      	beq.n	80139f2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	681a      	ldr	r2, [r3, #0]
 80139e6:	693b      	ldr	r3, [r7, #16]
 80139e8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	693a      	ldr	r2, [r7, #16]
 80139ee:	601a      	str	r2, [r3, #0]
        break;
 80139f0:	e007      	b.n	8013a02 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	617b      	str	r3, [r7, #20]
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d1e1      	bne.n	80139c2 <sys_timeout_abs+0x86>
 80139fe:	e000      	b.n	8013a02 <sys_timeout_abs+0xc6>
    return;
 8013a00:	bf00      	nop
      }
    }
  }
}
 8013a02:	3718      	adds	r7, #24
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	0801a660 	.word	0x0801a660
 8013a0c:	0801a694 	.word	0x0801a694
 8013a10:	0801a6d4 	.word	0x0801a6d4
 8013a14:	20009018 	.word	0x20009018

08013a18 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013a18:	b580      	push	{r7, lr}
 8013a1a:	b086      	sub	sp, #24
 8013a1c:	af00      	add	r7, sp, #0
 8013a1e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	685b      	ldr	r3, [r3, #4]
 8013a28:	4798      	blx	r3

  now = sys_now();
 8013a2a:	f7f8 fd71 	bl	800c510 <sys_now>
 8013a2e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	681a      	ldr	r2, [r3, #0]
 8013a34:	4b0f      	ldr	r3, [pc, #60]	; (8013a74 <lwip_cyclic_timer+0x5c>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	4413      	add	r3, r2
 8013a3a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013a3c:	68fa      	ldr	r2, [r7, #12]
 8013a3e:	693b      	ldr	r3, [r7, #16]
 8013a40:	1ad3      	subs	r3, r2, r3
 8013a42:	0fdb      	lsrs	r3, r3, #31
 8013a44:	f003 0301 	and.w	r3, r3, #1
 8013a48:	b2db      	uxtb	r3, r3
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d009      	beq.n	8013a62 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	681a      	ldr	r2, [r3, #0]
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	4413      	add	r3, r2
 8013a56:	687a      	ldr	r2, [r7, #4]
 8013a58:	4907      	ldr	r1, [pc, #28]	; (8013a78 <lwip_cyclic_timer+0x60>)
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	f7ff ff6e 	bl	801393c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013a60:	e004      	b.n	8013a6c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013a62:	687a      	ldr	r2, [r7, #4]
 8013a64:	4904      	ldr	r1, [pc, #16]	; (8013a78 <lwip_cyclic_timer+0x60>)
 8013a66:	68f8      	ldr	r0, [r7, #12]
 8013a68:	f7ff ff68 	bl	801393c <sys_timeout_abs>
}
 8013a6c:	bf00      	nop
 8013a6e:	3718      	adds	r7, #24
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}
 8013a74:	2000901c 	.word	0x2000901c
 8013a78:	08013a19 	.word	0x08013a19

08013a7c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b082      	sub	sp, #8
 8013a80:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013a82:	2301      	movs	r3, #1
 8013a84:	607b      	str	r3, [r7, #4]
 8013a86:	e00e      	b.n	8013aa6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013a88:	4a0b      	ldr	r2, [pc, #44]	; (8013ab8 <sys_timeouts_init+0x3c>)
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	00db      	lsls	r3, r3, #3
 8013a94:	4a08      	ldr	r2, [pc, #32]	; (8013ab8 <sys_timeouts_init+0x3c>)
 8013a96:	4413      	add	r3, r2
 8013a98:	461a      	mov	r2, r3
 8013a9a:	4908      	ldr	r1, [pc, #32]	; (8013abc <sys_timeouts_init+0x40>)
 8013a9c:	f000 f810 	bl	8013ac0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	607b      	str	r3, [r7, #4]
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	2b02      	cmp	r3, #2
 8013aaa:	d9ed      	bls.n	8013a88 <sys_timeouts_init+0xc>
  }
}
 8013aac:	bf00      	nop
 8013aae:	bf00      	nop
 8013ab0:	3708      	adds	r7, #8
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}
 8013ab6:	bf00      	nop
 8013ab8:	0801b254 	.word	0x0801b254
 8013abc:	08013a19 	.word	0x08013a19

08013ac0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b086      	sub	sp, #24
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	60f8      	str	r0, [r7, #12]
 8013ac8:	60b9      	str	r1, [r7, #8]
 8013aca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013ad2:	d306      	bcc.n	8013ae2 <sys_timeout+0x22>
 8013ad4:	4b0a      	ldr	r3, [pc, #40]	; (8013b00 <sys_timeout+0x40>)
 8013ad6:	f240 1229 	movw	r2, #297	; 0x129
 8013ada:	490a      	ldr	r1, [pc, #40]	; (8013b04 <sys_timeout+0x44>)
 8013adc:	480a      	ldr	r0, [pc, #40]	; (8013b08 <sys_timeout+0x48>)
 8013ade:	f003 fdfb 	bl	80176d8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013ae2:	f7f8 fd15 	bl	800c510 <sys_now>
 8013ae6:	4602      	mov	r2, r0
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	4413      	add	r3, r2
 8013aec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013aee:	687a      	ldr	r2, [r7, #4]
 8013af0:	68b9      	ldr	r1, [r7, #8]
 8013af2:	6978      	ldr	r0, [r7, #20]
 8013af4:	f7ff ff22 	bl	801393c <sys_timeout_abs>
#endif
}
 8013af8:	bf00      	nop
 8013afa:	3718      	adds	r7, #24
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}
 8013b00:	0801a660 	.word	0x0801a660
 8013b04:	0801a6fc 	.word	0x0801a6fc
 8013b08:	0801a6d4 	.word	0x0801a6d4

08013b0c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b084      	sub	sp, #16
 8013b10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013b12:	f7f8 fcfd 	bl	800c510 <sys_now>
 8013b16:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8013b18:	4b1a      	ldr	r3, [pc, #104]	; (8013b84 <sys_check_timeouts+0x78>)
 8013b1a:	781b      	ldrb	r3, [r3, #0]
 8013b1c:	b2db      	uxtb	r3, r3
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d001      	beq.n	8013b26 <sys_check_timeouts+0x1a>
 8013b22:	f7f9 ff25 	bl	800d970 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8013b26:	4b18      	ldr	r3, [pc, #96]	; (8013b88 <sys_check_timeouts+0x7c>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013b2c:	68bb      	ldr	r3, [r7, #8]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d022      	beq.n	8013b78 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013b32:	68bb      	ldr	r3, [r7, #8]
 8013b34:	685b      	ldr	r3, [r3, #4]
 8013b36:	68fa      	ldr	r2, [r7, #12]
 8013b38:	1ad3      	subs	r3, r2, r3
 8013b3a:	0fdb      	lsrs	r3, r3, #31
 8013b3c:	f003 0301 	and.w	r3, r3, #1
 8013b40:	b2db      	uxtb	r3, r3
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d11a      	bne.n	8013b7c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	4a0f      	ldr	r2, [pc, #60]	; (8013b88 <sys_check_timeouts+0x7c>)
 8013b4c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013b4e:	68bb      	ldr	r3, [r7, #8]
 8013b50:	689b      	ldr	r3, [r3, #8]
 8013b52:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	68db      	ldr	r3, [r3, #12]
 8013b58:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013b5a:	68bb      	ldr	r3, [r7, #8]
 8013b5c:	685b      	ldr	r3, [r3, #4]
 8013b5e:	4a0b      	ldr	r2, [pc, #44]	; (8013b8c <sys_check_timeouts+0x80>)
 8013b60:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013b62:	68b9      	ldr	r1, [r7, #8]
 8013b64:	2006      	movs	r0, #6
 8013b66:	f7f9 fbc7 	bl	800d2f8 <memp_free>
    if (handler != NULL) {
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d0d3      	beq.n	8013b18 <sys_check_timeouts+0xc>
      handler(arg);
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	6838      	ldr	r0, [r7, #0]
 8013b74:	4798      	blx	r3
  do {
 8013b76:	e7cf      	b.n	8013b18 <sys_check_timeouts+0xc>
      return;
 8013b78:	bf00      	nop
 8013b7a:	e000      	b.n	8013b7e <sys_check_timeouts+0x72>
      return;
 8013b7c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013b7e:	3710      	adds	r7, #16
 8013b80:	46bd      	mov	sp, r7
 8013b82:	bd80      	pop	{r7, pc}
 8013b84:	20008fc5 	.word	0x20008fc5
 8013b88:	20009018 	.word	0x20009018
 8013b8c:	2000901c 	.word	0x2000901c

08013b90 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013b94:	f003 fdb8 	bl	8017708 <rand>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	b29b      	uxth	r3, r3
 8013b9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013ba0:	b29b      	uxth	r3, r3
 8013ba2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013ba6:	b29a      	uxth	r2, r3
 8013ba8:	4b01      	ldr	r3, [pc, #4]	; (8013bb0 <udp_init+0x20>)
 8013baa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013bac:	bf00      	nop
 8013bae:	bd80      	pop	{r7, pc}
 8013bb0:	20000028 	.word	0x20000028

08013bb4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013bb4:	b480      	push	{r7}
 8013bb6:	b083      	sub	sp, #12
 8013bb8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013bbe:	4b17      	ldr	r3, [pc, #92]	; (8013c1c <udp_new_port+0x68>)
 8013bc0:	881b      	ldrh	r3, [r3, #0]
 8013bc2:	1c5a      	adds	r2, r3, #1
 8013bc4:	b291      	uxth	r1, r2
 8013bc6:	4a15      	ldr	r2, [pc, #84]	; (8013c1c <udp_new_port+0x68>)
 8013bc8:	8011      	strh	r1, [r2, #0]
 8013bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013bce:	4293      	cmp	r3, r2
 8013bd0:	d103      	bne.n	8013bda <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013bd2:	4b12      	ldr	r3, [pc, #72]	; (8013c1c <udp_new_port+0x68>)
 8013bd4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013bd8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013bda:	4b11      	ldr	r3, [pc, #68]	; (8013c20 <udp_new_port+0x6c>)
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	603b      	str	r3, [r7, #0]
 8013be0:	e011      	b.n	8013c06 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013be2:	683b      	ldr	r3, [r7, #0]
 8013be4:	8a5a      	ldrh	r2, [r3, #18]
 8013be6:	4b0d      	ldr	r3, [pc, #52]	; (8013c1c <udp_new_port+0x68>)
 8013be8:	881b      	ldrh	r3, [r3, #0]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	d108      	bne.n	8013c00 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013bee:	88fb      	ldrh	r3, [r7, #6]
 8013bf0:	3301      	adds	r3, #1
 8013bf2:	80fb      	strh	r3, [r7, #6]
 8013bf4:	88fb      	ldrh	r3, [r7, #6]
 8013bf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013bfa:	d3e0      	bcc.n	8013bbe <udp_new_port+0xa>
        return 0;
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	e007      	b.n	8013c10 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	68db      	ldr	r3, [r3, #12]
 8013c04:	603b      	str	r3, [r7, #0]
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d1ea      	bne.n	8013be2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013c0c:	4b03      	ldr	r3, [pc, #12]	; (8013c1c <udp_new_port+0x68>)
 8013c0e:	881b      	ldrh	r3, [r3, #0]
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	370c      	adds	r7, #12
 8013c14:	46bd      	mov	sp, r7
 8013c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c1a:	4770      	bx	lr
 8013c1c:	20000028 	.word	0x20000028
 8013c20:	20009024 	.word	0x20009024

08013c24 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b084      	sub	sp, #16
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	60f8      	str	r0, [r7, #12]
 8013c2c:	60b9      	str	r1, [r7, #8]
 8013c2e:	4613      	mov	r3, r2
 8013c30:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d105      	bne.n	8013c44 <udp_input_local_match+0x20>
 8013c38:	4b27      	ldr	r3, [pc, #156]	; (8013cd8 <udp_input_local_match+0xb4>)
 8013c3a:	2287      	movs	r2, #135	; 0x87
 8013c3c:	4927      	ldr	r1, [pc, #156]	; (8013cdc <udp_input_local_match+0xb8>)
 8013c3e:	4828      	ldr	r0, [pc, #160]	; (8013ce0 <udp_input_local_match+0xbc>)
 8013c40:	f003 fd4a 	bl	80176d8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d105      	bne.n	8013c56 <udp_input_local_match+0x32>
 8013c4a:	4b23      	ldr	r3, [pc, #140]	; (8013cd8 <udp_input_local_match+0xb4>)
 8013c4c:	2288      	movs	r2, #136	; 0x88
 8013c4e:	4925      	ldr	r1, [pc, #148]	; (8013ce4 <udp_input_local_match+0xc0>)
 8013c50:	4823      	ldr	r0, [pc, #140]	; (8013ce0 <udp_input_local_match+0xbc>)
 8013c52:	f003 fd41 	bl	80176d8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	7a1b      	ldrb	r3, [r3, #8]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d00b      	beq.n	8013c76 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	7a1a      	ldrb	r2, [r3, #8]
 8013c62:	4b21      	ldr	r3, [pc, #132]	; (8013ce8 <udp_input_local_match+0xc4>)
 8013c64:	685b      	ldr	r3, [r3, #4]
 8013c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013c6a:	3301      	adds	r3, #1
 8013c6c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d001      	beq.n	8013c76 <udp_input_local_match+0x52>
    return 0;
 8013c72:	2300      	movs	r3, #0
 8013c74:	e02b      	b.n	8013cce <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013c76:	79fb      	ldrb	r3, [r7, #7]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d018      	beq.n	8013cae <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d013      	beq.n	8013caa <udp_input_local_match+0x86>
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d00f      	beq.n	8013caa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013c8a:	4b17      	ldr	r3, [pc, #92]	; (8013ce8 <udp_input_local_match+0xc4>)
 8013c8c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c92:	d00a      	beq.n	8013caa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	681a      	ldr	r2, [r3, #0]
 8013c98:	4b13      	ldr	r3, [pc, #76]	; (8013ce8 <udp_input_local_match+0xc4>)
 8013c9a:	695b      	ldr	r3, [r3, #20]
 8013c9c:	405a      	eors	r2, r3
 8013c9e:	68bb      	ldr	r3, [r7, #8]
 8013ca0:	3308      	adds	r3, #8
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d110      	bne.n	8013ccc <udp_input_local_match+0xa8>
          return 1;
 8013caa:	2301      	movs	r3, #1
 8013cac:	e00f      	b.n	8013cce <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d009      	beq.n	8013cc8 <udp_input_local_match+0xa4>
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d005      	beq.n	8013cc8 <udp_input_local_match+0xa4>
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	4b09      	ldr	r3, [pc, #36]	; (8013ce8 <udp_input_local_match+0xc4>)
 8013cc2:	695b      	ldr	r3, [r3, #20]
 8013cc4:	429a      	cmp	r2, r3
 8013cc6:	d101      	bne.n	8013ccc <udp_input_local_match+0xa8>
        return 1;
 8013cc8:	2301      	movs	r3, #1
 8013cca:	e000      	b.n	8013cce <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013ccc:	2300      	movs	r3, #0
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	3710      	adds	r7, #16
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}
 8013cd6:	bf00      	nop
 8013cd8:	0801a748 	.word	0x0801a748
 8013cdc:	0801a778 	.word	0x0801a778
 8013ce0:	0801a79c 	.word	0x0801a79c
 8013ce4:	0801a7c4 	.word	0x0801a7c4
 8013ce8:	20005a58 	.word	0x20005a58

08013cec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013cec:	b590      	push	{r4, r7, lr}
 8013cee:	b08d      	sub	sp, #52	; 0x34
 8013cf0:	af02      	add	r7, sp, #8
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d105      	bne.n	8013d0c <udp_input+0x20>
 8013d00:	4b7c      	ldr	r3, [pc, #496]	; (8013ef4 <udp_input+0x208>)
 8013d02:	22cf      	movs	r2, #207	; 0xcf
 8013d04:	497c      	ldr	r1, [pc, #496]	; (8013ef8 <udp_input+0x20c>)
 8013d06:	487d      	ldr	r0, [pc, #500]	; (8013efc <udp_input+0x210>)
 8013d08:	f003 fce6 	bl	80176d8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d105      	bne.n	8013d1e <udp_input+0x32>
 8013d12:	4b78      	ldr	r3, [pc, #480]	; (8013ef4 <udp_input+0x208>)
 8013d14:	22d0      	movs	r2, #208	; 0xd0
 8013d16:	497a      	ldr	r1, [pc, #488]	; (8013f00 <udp_input+0x214>)
 8013d18:	4878      	ldr	r0, [pc, #480]	; (8013efc <udp_input+0x210>)
 8013d1a:	f003 fcdd 	bl	80176d8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	895b      	ldrh	r3, [r3, #10]
 8013d22:	2b07      	cmp	r3, #7
 8013d24:	d803      	bhi.n	8013d2e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f7fa f95c 	bl	800dfe4 <pbuf_free>
    goto end;
 8013d2c:	e0de      	b.n	8013eec <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	685b      	ldr	r3, [r3, #4]
 8013d32:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013d34:	4b73      	ldr	r3, [pc, #460]	; (8013f04 <udp_input+0x218>)
 8013d36:	695b      	ldr	r3, [r3, #20]
 8013d38:	4a72      	ldr	r2, [pc, #456]	; (8013f04 <udp_input+0x218>)
 8013d3a:	6812      	ldr	r2, [r2, #0]
 8013d3c:	4611      	mov	r1, r2
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f001 ffe2 	bl	8015d08 <ip4_addr_isbroadcast_u32>
 8013d44:	4603      	mov	r3, r0
 8013d46:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013d48:	697b      	ldr	r3, [r7, #20]
 8013d4a:	881b      	ldrh	r3, [r3, #0]
 8013d4c:	b29b      	uxth	r3, r3
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7f8 fdea 	bl	800c928 <lwip_htons>
 8013d54:	4603      	mov	r3, r0
 8013d56:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	885b      	ldrh	r3, [r3, #2]
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f7f8 fde2 	bl	800c928 <lwip_htons>
 8013d64:	4603      	mov	r3, r0
 8013d66:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013d68:	2300      	movs	r3, #0
 8013d6a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013d6c:	2300      	movs	r3, #0
 8013d6e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013d70:	2300      	movs	r3, #0
 8013d72:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013d74:	4b64      	ldr	r3, [pc, #400]	; (8013f08 <udp_input+0x21c>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	627b      	str	r3, [r7, #36]	; 0x24
 8013d7a:	e054      	b.n	8013e26 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7e:	8a5b      	ldrh	r3, [r3, #18]
 8013d80:	89fa      	ldrh	r2, [r7, #14]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d14a      	bne.n	8013e1c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013d86:	7cfb      	ldrb	r3, [r7, #19]
 8013d88:	461a      	mov	r2, r3
 8013d8a:	6839      	ldr	r1, [r7, #0]
 8013d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d8e:	f7ff ff49 	bl	8013c24 <udp_input_local_match>
 8013d92:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d041      	beq.n	8013e1c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d9a:	7c1b      	ldrb	r3, [r3, #16]
 8013d9c:	f003 0304 	and.w	r3, r3, #4
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d11d      	bne.n	8013de0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013da4:	69fb      	ldr	r3, [r7, #28]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d102      	bne.n	8013db0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dac:	61fb      	str	r3, [r7, #28]
 8013dae:	e017      	b.n	8013de0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013db0:	7cfb      	ldrb	r3, [r7, #19]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d014      	beq.n	8013de0 <udp_input+0xf4>
 8013db6:	4b53      	ldr	r3, [pc, #332]	; (8013f04 <udp_input+0x218>)
 8013db8:	695b      	ldr	r3, [r3, #20]
 8013dba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013dbe:	d10f      	bne.n	8013de0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013dc0:	69fb      	ldr	r3, [r7, #28]
 8013dc2:	681a      	ldr	r2, [r3, #0]
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	3304      	adds	r3, #4
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d008      	beq.n	8013de0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	683b      	ldr	r3, [r7, #0]
 8013dd4:	3304      	adds	r3, #4
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	429a      	cmp	r2, r3
 8013dda:	d101      	bne.n	8013de0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dde:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013de2:	8a9b      	ldrh	r3, [r3, #20]
 8013de4:	8a3a      	ldrh	r2, [r7, #16]
 8013de6:	429a      	cmp	r2, r3
 8013de8:	d118      	bne.n	8013e1c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dec:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d005      	beq.n	8013dfe <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013df4:	685a      	ldr	r2, [r3, #4]
 8013df6:	4b43      	ldr	r3, [pc, #268]	; (8013f04 <udp_input+0x218>)
 8013df8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d10e      	bne.n	8013e1c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013dfe:	6a3b      	ldr	r3, [r7, #32]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d014      	beq.n	8013e2e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e06:	68da      	ldr	r2, [r3, #12]
 8013e08:	6a3b      	ldr	r3, [r7, #32]
 8013e0a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013e0c:	4b3e      	ldr	r3, [pc, #248]	; (8013f08 <udp_input+0x21c>)
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e12:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013e14:	4a3c      	ldr	r2, [pc, #240]	; (8013f08 <udp_input+0x21c>)
 8013e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e18:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013e1a:	e008      	b.n	8013e2e <udp_input+0x142>
      }
    }

    prev = pcb;
 8013e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e22:	68db      	ldr	r3, [r3, #12]
 8013e24:	627b      	str	r3, [r7, #36]	; 0x24
 8013e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d1a7      	bne.n	8013d7c <udp_input+0x90>
 8013e2c:	e000      	b.n	8013e30 <udp_input+0x144>
        break;
 8013e2e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d101      	bne.n	8013e3a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013e36:	69fb      	ldr	r3, [r7, #28]
 8013e38:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d002      	beq.n	8013e46 <udp_input+0x15a>
    for_us = 1;
 8013e40:	2301      	movs	r3, #1
 8013e42:	76fb      	strb	r3, [r7, #27]
 8013e44:	e00a      	b.n	8013e5c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013e46:	683b      	ldr	r3, [r7, #0]
 8013e48:	3304      	adds	r3, #4
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	4b2d      	ldr	r3, [pc, #180]	; (8013f04 <udp_input+0x218>)
 8013e4e:	695b      	ldr	r3, [r3, #20]
 8013e50:	429a      	cmp	r2, r3
 8013e52:	bf0c      	ite	eq
 8013e54:	2301      	moveq	r3, #1
 8013e56:	2300      	movne	r3, #0
 8013e58:	b2db      	uxtb	r3, r3
 8013e5a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013e5c:	7efb      	ldrb	r3, [r7, #27]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d041      	beq.n	8013ee6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013e62:	2108      	movs	r1, #8
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f7fa f837 	bl	800ded8 <pbuf_remove_header>
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d00a      	beq.n	8013e86 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013e70:	4b20      	ldr	r3, [pc, #128]	; (8013ef4 <udp_input+0x208>)
 8013e72:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013e76:	4925      	ldr	r1, [pc, #148]	; (8013f0c <udp_input+0x220>)
 8013e78:	4820      	ldr	r0, [pc, #128]	; (8013efc <udp_input+0x210>)
 8013e7a:	f003 fc2d 	bl	80176d8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013e7e:	6878      	ldr	r0, [r7, #4]
 8013e80:	f7fa f8b0 	bl	800dfe4 <pbuf_free>
      goto end;
 8013e84:	e032      	b.n	8013eec <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d012      	beq.n	8013eb2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8e:	699b      	ldr	r3, [r3, #24]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d00a      	beq.n	8013eaa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e96:	699c      	ldr	r4, [r3, #24]
 8013e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9a:	69d8      	ldr	r0, [r3, #28]
 8013e9c:	8a3b      	ldrh	r3, [r7, #16]
 8013e9e:	9300      	str	r3, [sp, #0]
 8013ea0:	4b1b      	ldr	r3, [pc, #108]	; (8013f10 <udp_input+0x224>)
 8013ea2:	687a      	ldr	r2, [r7, #4]
 8013ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ea6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013ea8:	e021      	b.n	8013eee <udp_input+0x202>
        pbuf_free(p);
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f7fa f89a 	bl	800dfe4 <pbuf_free>
        goto end;
 8013eb0:	e01c      	b.n	8013eec <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013eb2:	7cfb      	ldrb	r3, [r7, #19]
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d112      	bne.n	8013ede <udp_input+0x1f2>
 8013eb8:	4b12      	ldr	r3, [pc, #72]	; (8013f04 <udp_input+0x218>)
 8013eba:	695b      	ldr	r3, [r3, #20]
 8013ebc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013ec0:	2be0      	cmp	r3, #224	; 0xe0
 8013ec2:	d00c      	beq.n	8013ede <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013ec4:	4b0f      	ldr	r3, [pc, #60]	; (8013f04 <udp_input+0x218>)
 8013ec6:	899b      	ldrh	r3, [r3, #12]
 8013ec8:	3308      	adds	r3, #8
 8013eca:	b29b      	uxth	r3, r3
 8013ecc:	b21b      	sxth	r3, r3
 8013ece:	4619      	mov	r1, r3
 8013ed0:	6878      	ldr	r0, [r7, #4]
 8013ed2:	f7fa f874 	bl	800dfbe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013ed6:	2103      	movs	r1, #3
 8013ed8:	6878      	ldr	r0, [r7, #4]
 8013eda:	f001 fbf5 	bl	80156c8 <icmp_dest_unreach>
      pbuf_free(p);
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f7fa f880 	bl	800dfe4 <pbuf_free>
  return;
 8013ee4:	e003      	b.n	8013eee <udp_input+0x202>
    pbuf_free(p);
 8013ee6:	6878      	ldr	r0, [r7, #4]
 8013ee8:	f7fa f87c 	bl	800dfe4 <pbuf_free>
  return;
 8013eec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013eee:	372c      	adds	r7, #44	; 0x2c
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd90      	pop	{r4, r7, pc}
 8013ef4:	0801a748 	.word	0x0801a748
 8013ef8:	0801a7ec 	.word	0x0801a7ec
 8013efc:	0801a79c 	.word	0x0801a79c
 8013f00:	0801a804 	.word	0x0801a804
 8013f04:	20005a58 	.word	0x20005a58
 8013f08:	20009024 	.word	0x20009024
 8013f0c:	0801a820 	.word	0x0801a820
 8013f10:	20005a68 	.word	0x20005a68

08013f14 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8013f14:	b580      	push	{r7, lr}
 8013f16:	b082      	sub	sp, #8
 8013f18:	af00      	add	r7, sp, #0
 8013f1a:	6078      	str	r0, [r7, #4]
 8013f1c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d109      	bne.n	8013f38 <udp_send+0x24>
 8013f24:	4b11      	ldr	r3, [pc, #68]	; (8013f6c <udp_send+0x58>)
 8013f26:	f240 12d5 	movw	r2, #469	; 0x1d5
 8013f2a:	4911      	ldr	r1, [pc, #68]	; (8013f70 <udp_send+0x5c>)
 8013f2c:	4811      	ldr	r0, [pc, #68]	; (8013f74 <udp_send+0x60>)
 8013f2e:	f003 fbd3 	bl	80176d8 <iprintf>
 8013f32:	f06f 030f 	mvn.w	r3, #15
 8013f36:	e015      	b.n	8013f64 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d109      	bne.n	8013f52 <udp_send+0x3e>
 8013f3e:	4b0b      	ldr	r3, [pc, #44]	; (8013f6c <udp_send+0x58>)
 8013f40:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8013f44:	490c      	ldr	r1, [pc, #48]	; (8013f78 <udp_send+0x64>)
 8013f46:	480b      	ldr	r0, [pc, #44]	; (8013f74 <udp_send+0x60>)
 8013f48:	f003 fbc6 	bl	80176d8 <iprintf>
 8013f4c:	f06f 030f 	mvn.w	r3, #15
 8013f50:	e008      	b.n	8013f64 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	1d1a      	adds	r2, r3, #4
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	8a9b      	ldrh	r3, [r3, #20]
 8013f5a:	6839      	ldr	r1, [r7, #0]
 8013f5c:	6878      	ldr	r0, [r7, #4]
 8013f5e:	f000 f80d 	bl	8013f7c <udp_sendto>
 8013f62:	4603      	mov	r3, r0
}
 8013f64:	4618      	mov	r0, r3
 8013f66:	3708      	adds	r7, #8
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}
 8013f6c:	0801a748 	.word	0x0801a748
 8013f70:	0801a83c 	.word	0x0801a83c
 8013f74:	0801a79c 	.word	0x0801a79c
 8013f78:	0801a854 	.word	0x0801a854

08013f7c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b088      	sub	sp, #32
 8013f80:	af02      	add	r7, sp, #8
 8013f82:	60f8      	str	r0, [r7, #12]
 8013f84:	60b9      	str	r1, [r7, #8]
 8013f86:	607a      	str	r2, [r7, #4]
 8013f88:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d109      	bne.n	8013fa4 <udp_sendto+0x28>
 8013f90:	4b23      	ldr	r3, [pc, #140]	; (8014020 <udp_sendto+0xa4>)
 8013f92:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013f96:	4923      	ldr	r1, [pc, #140]	; (8014024 <udp_sendto+0xa8>)
 8013f98:	4823      	ldr	r0, [pc, #140]	; (8014028 <udp_sendto+0xac>)
 8013f9a:	f003 fb9d 	bl	80176d8 <iprintf>
 8013f9e:	f06f 030f 	mvn.w	r3, #15
 8013fa2:	e038      	b.n	8014016 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8013fa4:	68bb      	ldr	r3, [r7, #8]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d109      	bne.n	8013fbe <udp_sendto+0x42>
 8013faa:	4b1d      	ldr	r3, [pc, #116]	; (8014020 <udp_sendto+0xa4>)
 8013fac:	f240 2219 	movw	r2, #537	; 0x219
 8013fb0:	491e      	ldr	r1, [pc, #120]	; (801402c <udp_sendto+0xb0>)
 8013fb2:	481d      	ldr	r0, [pc, #116]	; (8014028 <udp_sendto+0xac>)
 8013fb4:	f003 fb90 	bl	80176d8 <iprintf>
 8013fb8:	f06f 030f 	mvn.w	r3, #15
 8013fbc:	e02b      	b.n	8014016 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d109      	bne.n	8013fd8 <udp_sendto+0x5c>
 8013fc4:	4b16      	ldr	r3, [pc, #88]	; (8014020 <udp_sendto+0xa4>)
 8013fc6:	f240 221a 	movw	r2, #538	; 0x21a
 8013fca:	4919      	ldr	r1, [pc, #100]	; (8014030 <udp_sendto+0xb4>)
 8013fcc:	4816      	ldr	r0, [pc, #88]	; (8014028 <udp_sendto+0xac>)
 8013fce:	f003 fb83 	bl	80176d8 <iprintf>
 8013fd2:	f06f 030f 	mvn.w	r3, #15
 8013fd6:	e01e      	b.n	8014016 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	7a1b      	ldrb	r3, [r3, #8]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d006      	beq.n	8013fee <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	7a1b      	ldrb	r3, [r3, #8]
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f7f9 fc9d 	bl	800d924 <netif_get_by_index>
 8013fea:	6178      	str	r0, [r7, #20]
 8013fec:	e003      	b.n	8013ff6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f001 fbf4 	bl	80157dc <ip4_route>
 8013ff4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d102      	bne.n	8014002 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8013ffc:	f06f 0303 	mvn.w	r3, #3
 8014000:	e009      	b.n	8014016 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8014002:	887a      	ldrh	r2, [r7, #2]
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	9300      	str	r3, [sp, #0]
 8014008:	4613      	mov	r3, r2
 801400a:	687a      	ldr	r2, [r7, #4]
 801400c:	68b9      	ldr	r1, [r7, #8]
 801400e:	68f8      	ldr	r0, [r7, #12]
 8014010:	f000 f810 	bl	8014034 <udp_sendto_if>
 8014014:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014016:	4618      	mov	r0, r3
 8014018:	3718      	adds	r7, #24
 801401a:	46bd      	mov	sp, r7
 801401c:	bd80      	pop	{r7, pc}
 801401e:	bf00      	nop
 8014020:	0801a748 	.word	0x0801a748
 8014024:	0801a86c 	.word	0x0801a86c
 8014028:	0801a79c 	.word	0x0801a79c
 801402c:	0801a884 	.word	0x0801a884
 8014030:	0801a8a0 	.word	0x0801a8a0

08014034 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b088      	sub	sp, #32
 8014038:	af02      	add	r7, sp, #8
 801403a:	60f8      	str	r0, [r7, #12]
 801403c:	60b9      	str	r1, [r7, #8]
 801403e:	607a      	str	r2, [r7, #4]
 8014040:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d109      	bne.n	801405c <udp_sendto_if+0x28>
 8014048:	4b2e      	ldr	r3, [pc, #184]	; (8014104 <udp_sendto_if+0xd0>)
 801404a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801404e:	492e      	ldr	r1, [pc, #184]	; (8014108 <udp_sendto_if+0xd4>)
 8014050:	482e      	ldr	r0, [pc, #184]	; (801410c <udp_sendto_if+0xd8>)
 8014052:	f003 fb41 	bl	80176d8 <iprintf>
 8014056:	f06f 030f 	mvn.w	r3, #15
 801405a:	e04f      	b.n	80140fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d109      	bne.n	8014076 <udp_sendto_if+0x42>
 8014062:	4b28      	ldr	r3, [pc, #160]	; (8014104 <udp_sendto_if+0xd0>)
 8014064:	f240 2281 	movw	r2, #641	; 0x281
 8014068:	4929      	ldr	r1, [pc, #164]	; (8014110 <udp_sendto_if+0xdc>)
 801406a:	4828      	ldr	r0, [pc, #160]	; (801410c <udp_sendto_if+0xd8>)
 801406c:	f003 fb34 	bl	80176d8 <iprintf>
 8014070:	f06f 030f 	mvn.w	r3, #15
 8014074:	e042      	b.n	80140fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d109      	bne.n	8014090 <udp_sendto_if+0x5c>
 801407c:	4b21      	ldr	r3, [pc, #132]	; (8014104 <udp_sendto_if+0xd0>)
 801407e:	f240 2282 	movw	r2, #642	; 0x282
 8014082:	4924      	ldr	r1, [pc, #144]	; (8014114 <udp_sendto_if+0xe0>)
 8014084:	4821      	ldr	r0, [pc, #132]	; (801410c <udp_sendto_if+0xd8>)
 8014086:	f003 fb27 	bl	80176d8 <iprintf>
 801408a:	f06f 030f 	mvn.w	r3, #15
 801408e:	e035      	b.n	80140fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014090:	6a3b      	ldr	r3, [r7, #32]
 8014092:	2b00      	cmp	r3, #0
 8014094:	d109      	bne.n	80140aa <udp_sendto_if+0x76>
 8014096:	4b1b      	ldr	r3, [pc, #108]	; (8014104 <udp_sendto_if+0xd0>)
 8014098:	f240 2283 	movw	r2, #643	; 0x283
 801409c:	491e      	ldr	r1, [pc, #120]	; (8014118 <udp_sendto_if+0xe4>)
 801409e:	481b      	ldr	r0, [pc, #108]	; (801410c <udp_sendto_if+0xd8>)
 80140a0:	f003 fb1a 	bl	80176d8 <iprintf>
 80140a4:	f06f 030f 	mvn.w	r3, #15
 80140a8:	e028      	b.n	80140fc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d009      	beq.n	80140c4 <udp_sendto_if+0x90>
 80140b0:	68fb      	ldr	r3, [r7, #12]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d005      	beq.n	80140c4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80140c0:	2be0      	cmp	r3, #224	; 0xe0
 80140c2:	d103      	bne.n	80140cc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80140c4:	6a3b      	ldr	r3, [r7, #32]
 80140c6:	3304      	adds	r3, #4
 80140c8:	617b      	str	r3, [r7, #20]
 80140ca:	e00b      	b.n	80140e4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	681a      	ldr	r2, [r3, #0]
 80140d0:	6a3b      	ldr	r3, [r7, #32]
 80140d2:	3304      	adds	r3, #4
 80140d4:	681b      	ldr	r3, [r3, #0]
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d002      	beq.n	80140e0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80140da:	f06f 0303 	mvn.w	r3, #3
 80140de:	e00d      	b.n	80140fc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80140e0:	68fb      	ldr	r3, [r7, #12]
 80140e2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80140e4:	887a      	ldrh	r2, [r7, #2]
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	9301      	str	r3, [sp, #4]
 80140ea:	6a3b      	ldr	r3, [r7, #32]
 80140ec:	9300      	str	r3, [sp, #0]
 80140ee:	4613      	mov	r3, r2
 80140f0:	687a      	ldr	r2, [r7, #4]
 80140f2:	68b9      	ldr	r1, [r7, #8]
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f000 f811 	bl	801411c <udp_sendto_if_src>
 80140fa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3718      	adds	r7, #24
 8014100:	46bd      	mov	sp, r7
 8014102:	bd80      	pop	{r7, pc}
 8014104:	0801a748 	.word	0x0801a748
 8014108:	0801a8bc 	.word	0x0801a8bc
 801410c:	0801a79c 	.word	0x0801a79c
 8014110:	0801a8d8 	.word	0x0801a8d8
 8014114:	0801a8f4 	.word	0x0801a8f4
 8014118:	0801a914 	.word	0x0801a914

0801411c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b08c      	sub	sp, #48	; 0x30
 8014120:	af04      	add	r7, sp, #16
 8014122:	60f8      	str	r0, [r7, #12]
 8014124:	60b9      	str	r1, [r7, #8]
 8014126:	607a      	str	r2, [r7, #4]
 8014128:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801412a:	68fb      	ldr	r3, [r7, #12]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d109      	bne.n	8014144 <udp_sendto_if_src+0x28>
 8014130:	4b65      	ldr	r3, [pc, #404]	; (80142c8 <udp_sendto_if_src+0x1ac>)
 8014132:	f240 22d1 	movw	r2, #721	; 0x2d1
 8014136:	4965      	ldr	r1, [pc, #404]	; (80142cc <udp_sendto_if_src+0x1b0>)
 8014138:	4865      	ldr	r0, [pc, #404]	; (80142d0 <udp_sendto_if_src+0x1b4>)
 801413a:	f003 facd 	bl	80176d8 <iprintf>
 801413e:	f06f 030f 	mvn.w	r3, #15
 8014142:	e0bc      	b.n	80142be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d109      	bne.n	801415e <udp_sendto_if_src+0x42>
 801414a:	4b5f      	ldr	r3, [pc, #380]	; (80142c8 <udp_sendto_if_src+0x1ac>)
 801414c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8014150:	4960      	ldr	r1, [pc, #384]	; (80142d4 <udp_sendto_if_src+0x1b8>)
 8014152:	485f      	ldr	r0, [pc, #380]	; (80142d0 <udp_sendto_if_src+0x1b4>)
 8014154:	f003 fac0 	bl	80176d8 <iprintf>
 8014158:	f06f 030f 	mvn.w	r3, #15
 801415c:	e0af      	b.n	80142be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d109      	bne.n	8014178 <udp_sendto_if_src+0x5c>
 8014164:	4b58      	ldr	r3, [pc, #352]	; (80142c8 <udp_sendto_if_src+0x1ac>)
 8014166:	f240 22d3 	movw	r2, #723	; 0x2d3
 801416a:	495b      	ldr	r1, [pc, #364]	; (80142d8 <udp_sendto_if_src+0x1bc>)
 801416c:	4858      	ldr	r0, [pc, #352]	; (80142d0 <udp_sendto_if_src+0x1b4>)
 801416e:	f003 fab3 	bl	80176d8 <iprintf>
 8014172:	f06f 030f 	mvn.w	r3, #15
 8014176:	e0a2      	b.n	80142be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8014178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801417a:	2b00      	cmp	r3, #0
 801417c:	d109      	bne.n	8014192 <udp_sendto_if_src+0x76>
 801417e:	4b52      	ldr	r3, [pc, #328]	; (80142c8 <udp_sendto_if_src+0x1ac>)
 8014180:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014184:	4955      	ldr	r1, [pc, #340]	; (80142dc <udp_sendto_if_src+0x1c0>)
 8014186:	4852      	ldr	r0, [pc, #328]	; (80142d0 <udp_sendto_if_src+0x1b4>)
 8014188:	f003 faa6 	bl	80176d8 <iprintf>
 801418c:	f06f 030f 	mvn.w	r3, #15
 8014190:	e095      	b.n	80142be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014194:	2b00      	cmp	r3, #0
 8014196:	d109      	bne.n	80141ac <udp_sendto_if_src+0x90>
 8014198:	4b4b      	ldr	r3, [pc, #300]	; (80142c8 <udp_sendto_if_src+0x1ac>)
 801419a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801419e:	4950      	ldr	r1, [pc, #320]	; (80142e0 <udp_sendto_if_src+0x1c4>)
 80141a0:	484b      	ldr	r0, [pc, #300]	; (80142d0 <udp_sendto_if_src+0x1b4>)
 80141a2:	f003 fa99 	bl	80176d8 <iprintf>
 80141a6:	f06f 030f 	mvn.w	r3, #15
 80141aa:	e088      	b.n	80142be <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	8a5b      	ldrh	r3, [r3, #18]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d10f      	bne.n	80141d4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80141b4:	68f9      	ldr	r1, [r7, #12]
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	8a5b      	ldrh	r3, [r3, #18]
 80141ba:	461a      	mov	r2, r3
 80141bc:	68f8      	ldr	r0, [r7, #12]
 80141be:	f000 f893 	bl	80142e8 <udp_bind>
 80141c2:	4603      	mov	r3, r0
 80141c4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80141c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d002      	beq.n	80141d4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80141ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80141d2:	e074      	b.n	80142be <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80141d4:	68bb      	ldr	r3, [r7, #8]
 80141d6:	891b      	ldrh	r3, [r3, #8]
 80141d8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80141dc:	4293      	cmp	r3, r2
 80141de:	d902      	bls.n	80141e6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80141e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141e4:	e06b      	b.n	80142be <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80141e6:	2108      	movs	r1, #8
 80141e8:	68b8      	ldr	r0, [r7, #8]
 80141ea:	f7f9 fe65 	bl	800deb8 <pbuf_add_header>
 80141ee:	4603      	mov	r3, r0
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d015      	beq.n	8014220 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80141f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141f8:	2108      	movs	r1, #8
 80141fa:	2022      	movs	r0, #34	; 0x22
 80141fc:	f7f9 fc0e 	bl	800da1c <pbuf_alloc>
 8014200:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014202:	69fb      	ldr	r3, [r7, #28]
 8014204:	2b00      	cmp	r3, #0
 8014206:	d102      	bne.n	801420e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8014208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801420c:	e057      	b.n	80142be <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	891b      	ldrh	r3, [r3, #8]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d006      	beq.n	8014224 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8014216:	68b9      	ldr	r1, [r7, #8]
 8014218:	69f8      	ldr	r0, [r7, #28]
 801421a:	f7f9 fffb 	bl	800e214 <pbuf_chain>
 801421e:	e001      	b.n	8014224 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014224:	69fb      	ldr	r3, [r7, #28]
 8014226:	895b      	ldrh	r3, [r3, #10]
 8014228:	2b07      	cmp	r3, #7
 801422a:	d806      	bhi.n	801423a <udp_sendto_if_src+0x11e>
 801422c:	4b26      	ldr	r3, [pc, #152]	; (80142c8 <udp_sendto_if_src+0x1ac>)
 801422e:	f240 320d 	movw	r2, #781	; 0x30d
 8014232:	492c      	ldr	r1, [pc, #176]	; (80142e4 <udp_sendto_if_src+0x1c8>)
 8014234:	4826      	ldr	r0, [pc, #152]	; (80142d0 <udp_sendto_if_src+0x1b4>)
 8014236:	f003 fa4f 	bl	80176d8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801423a:	69fb      	ldr	r3, [r7, #28]
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	8a5b      	ldrh	r3, [r3, #18]
 8014244:	4618      	mov	r0, r3
 8014246:	f7f8 fb6f 	bl	800c928 <lwip_htons>
 801424a:	4603      	mov	r3, r0
 801424c:	461a      	mov	r2, r3
 801424e:	697b      	ldr	r3, [r7, #20]
 8014250:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8014252:	887b      	ldrh	r3, [r7, #2]
 8014254:	4618      	mov	r0, r3
 8014256:	f7f8 fb67 	bl	800c928 <lwip_htons>
 801425a:	4603      	mov	r3, r0
 801425c:	461a      	mov	r2, r3
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8014262:	697b      	ldr	r3, [r7, #20]
 8014264:	2200      	movs	r2, #0
 8014266:	719a      	strb	r2, [r3, #6]
 8014268:	2200      	movs	r2, #0
 801426a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801426c:	69fb      	ldr	r3, [r7, #28]
 801426e:	891b      	ldrh	r3, [r3, #8]
 8014270:	4618      	mov	r0, r3
 8014272:	f7f8 fb59 	bl	800c928 <lwip_htons>
 8014276:	4603      	mov	r3, r0
 8014278:	461a      	mov	r2, r3
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801427e:	2311      	movs	r3, #17
 8014280:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	7adb      	ldrb	r3, [r3, #11]
 8014286:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	7a9b      	ldrb	r3, [r3, #10]
 801428c:	7cb9      	ldrb	r1, [r7, #18]
 801428e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014290:	9202      	str	r2, [sp, #8]
 8014292:	7cfa      	ldrb	r2, [r7, #19]
 8014294:	9201      	str	r2, [sp, #4]
 8014296:	9300      	str	r3, [sp, #0]
 8014298:	460b      	mov	r3, r1
 801429a:	687a      	ldr	r2, [r7, #4]
 801429c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801429e:	69f8      	ldr	r0, [r7, #28]
 80142a0:	f001 fc84 	bl	8015bac <ip4_output_if_src>
 80142a4:	4603      	mov	r3, r0
 80142a6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80142a8:	69fa      	ldr	r2, [r7, #28]
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	429a      	cmp	r2, r3
 80142ae:	d004      	beq.n	80142ba <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80142b0:	69f8      	ldr	r0, [r7, #28]
 80142b2:	f7f9 fe97 	bl	800dfe4 <pbuf_free>
    q = NULL;
 80142b6:	2300      	movs	r3, #0
 80142b8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80142ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3720      	adds	r7, #32
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}
 80142c6:	bf00      	nop
 80142c8:	0801a748 	.word	0x0801a748
 80142cc:	0801a934 	.word	0x0801a934
 80142d0:	0801a79c 	.word	0x0801a79c
 80142d4:	0801a954 	.word	0x0801a954
 80142d8:	0801a974 	.word	0x0801a974
 80142dc:	0801a998 	.word	0x0801a998
 80142e0:	0801a9bc 	.word	0x0801a9bc
 80142e4:	0801a9e0 	.word	0x0801a9e0

080142e8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b086      	sub	sp, #24
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	60f8      	str	r0, [r7, #12]
 80142f0:	60b9      	str	r1, [r7, #8]
 80142f2:	4613      	mov	r3, r2
 80142f4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80142f6:	68bb      	ldr	r3, [r7, #8]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d101      	bne.n	8014300 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80142fc:	4b39      	ldr	r3, [pc, #228]	; (80143e4 <udp_bind+0xfc>)
 80142fe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d109      	bne.n	801431a <udp_bind+0x32>
 8014306:	4b38      	ldr	r3, [pc, #224]	; (80143e8 <udp_bind+0x100>)
 8014308:	f240 32b7 	movw	r2, #951	; 0x3b7
 801430c:	4937      	ldr	r1, [pc, #220]	; (80143ec <udp_bind+0x104>)
 801430e:	4838      	ldr	r0, [pc, #224]	; (80143f0 <udp_bind+0x108>)
 8014310:	f003 f9e2 	bl	80176d8 <iprintf>
 8014314:	f06f 030f 	mvn.w	r3, #15
 8014318:	e060      	b.n	80143dc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801431a:	2300      	movs	r3, #0
 801431c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801431e:	4b35      	ldr	r3, [pc, #212]	; (80143f4 <udp_bind+0x10c>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	617b      	str	r3, [r7, #20]
 8014324:	e009      	b.n	801433a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014326:	68fa      	ldr	r2, [r7, #12]
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	429a      	cmp	r2, r3
 801432c:	d102      	bne.n	8014334 <udp_bind+0x4c>
      rebind = 1;
 801432e:	2301      	movs	r3, #1
 8014330:	74fb      	strb	r3, [r7, #19]
      break;
 8014332:	e005      	b.n	8014340 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	68db      	ldr	r3, [r3, #12]
 8014338:	617b      	str	r3, [r7, #20]
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	2b00      	cmp	r3, #0
 801433e:	d1f2      	bne.n	8014326 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014340:	88fb      	ldrh	r3, [r7, #6]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d109      	bne.n	801435a <udp_bind+0x72>
    port = udp_new_port();
 8014346:	f7ff fc35 	bl	8013bb4 <udp_new_port>
 801434a:	4603      	mov	r3, r0
 801434c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801434e:	88fb      	ldrh	r3, [r7, #6]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d12c      	bne.n	80143ae <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014354:	f06f 0307 	mvn.w	r3, #7
 8014358:	e040      	b.n	80143dc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801435a:	4b26      	ldr	r3, [pc, #152]	; (80143f4 <udp_bind+0x10c>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	617b      	str	r3, [r7, #20]
 8014360:	e022      	b.n	80143a8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014362:	68fa      	ldr	r2, [r7, #12]
 8014364:	697b      	ldr	r3, [r7, #20]
 8014366:	429a      	cmp	r2, r3
 8014368:	d01b      	beq.n	80143a2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801436a:	697b      	ldr	r3, [r7, #20]
 801436c:	8a5b      	ldrh	r3, [r3, #18]
 801436e:	88fa      	ldrh	r2, [r7, #6]
 8014370:	429a      	cmp	r2, r3
 8014372:	d116      	bne.n	80143a2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	681a      	ldr	r2, [r3, #0]
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801437c:	429a      	cmp	r2, r3
 801437e:	d00d      	beq.n	801439c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d00a      	beq.n	801439c <udp_bind+0xb4>
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d006      	beq.n	801439c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801438e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014390:	2b00      	cmp	r3, #0
 8014392:	d003      	beq.n	801439c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014394:	697b      	ldr	r3, [r7, #20]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d102      	bne.n	80143a2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801439c:	f06f 0307 	mvn.w	r3, #7
 80143a0:	e01c      	b.n	80143dc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	68db      	ldr	r3, [r3, #12]
 80143a6:	617b      	str	r3, [r7, #20]
 80143a8:	697b      	ldr	r3, [r7, #20]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d1d9      	bne.n	8014362 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80143ae:	68bb      	ldr	r3, [r7, #8]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d002      	beq.n	80143ba <udp_bind+0xd2>
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	e000      	b.n	80143bc <udp_bind+0xd4>
 80143ba:	2300      	movs	r3, #0
 80143bc:	68fa      	ldr	r2, [r7, #12]
 80143be:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	88fa      	ldrh	r2, [r7, #6]
 80143c4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80143c6:	7cfb      	ldrb	r3, [r7, #19]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d106      	bne.n	80143da <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80143cc:	4b09      	ldr	r3, [pc, #36]	; (80143f4 <udp_bind+0x10c>)
 80143ce:	681a      	ldr	r2, [r3, #0]
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80143d4:	4a07      	ldr	r2, [pc, #28]	; (80143f4 <udp_bind+0x10c>)
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80143da:	2300      	movs	r3, #0
}
 80143dc:	4618      	mov	r0, r3
 80143de:	3718      	adds	r7, #24
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}
 80143e4:	0801b26c 	.word	0x0801b26c
 80143e8:	0801a748 	.word	0x0801a748
 80143ec:	0801aa10 	.word	0x0801aa10
 80143f0:	0801a79c 	.word	0x0801a79c
 80143f4:	20009024 	.word	0x20009024

080143f8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b086      	sub	sp, #24
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	60f8      	str	r0, [r7, #12]
 8014400:	60b9      	str	r1, [r7, #8]
 8014402:	4613      	mov	r3, r2
 8014404:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d109      	bne.n	8014420 <udp_connect+0x28>
 801440c:	4b2c      	ldr	r3, [pc, #176]	; (80144c0 <udp_connect+0xc8>)
 801440e:	f240 4235 	movw	r2, #1077	; 0x435
 8014412:	492c      	ldr	r1, [pc, #176]	; (80144c4 <udp_connect+0xcc>)
 8014414:	482c      	ldr	r0, [pc, #176]	; (80144c8 <udp_connect+0xd0>)
 8014416:	f003 f95f 	bl	80176d8 <iprintf>
 801441a:	f06f 030f 	mvn.w	r3, #15
 801441e:	e04b      	b.n	80144b8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014420:	68bb      	ldr	r3, [r7, #8]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d109      	bne.n	801443a <udp_connect+0x42>
 8014426:	4b26      	ldr	r3, [pc, #152]	; (80144c0 <udp_connect+0xc8>)
 8014428:	f240 4236 	movw	r2, #1078	; 0x436
 801442c:	4927      	ldr	r1, [pc, #156]	; (80144cc <udp_connect+0xd4>)
 801442e:	4826      	ldr	r0, [pc, #152]	; (80144c8 <udp_connect+0xd0>)
 8014430:	f003 f952 	bl	80176d8 <iprintf>
 8014434:	f06f 030f 	mvn.w	r3, #15
 8014438:	e03e      	b.n	80144b8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	8a5b      	ldrh	r3, [r3, #18]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d10f      	bne.n	8014462 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014442:	68f9      	ldr	r1, [r7, #12]
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	8a5b      	ldrh	r3, [r3, #18]
 8014448:	461a      	mov	r2, r3
 801444a:	68f8      	ldr	r0, [r7, #12]
 801444c:	f7ff ff4c 	bl	80142e8 <udp_bind>
 8014450:	4603      	mov	r3, r0
 8014452:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014454:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d002      	beq.n	8014462 <udp_connect+0x6a>
      return err;
 801445c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014460:	e02a      	b.n	80144b8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d002      	beq.n	801446e <udp_connect+0x76>
 8014468:	68bb      	ldr	r3, [r7, #8]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	e000      	b.n	8014470 <udp_connect+0x78>
 801446e:	2300      	movs	r3, #0
 8014470:	68fa      	ldr	r2, [r7, #12]
 8014472:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	88fa      	ldrh	r2, [r7, #6]
 8014478:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	7c1b      	ldrb	r3, [r3, #16]
 801447e:	f043 0304 	orr.w	r3, r3, #4
 8014482:	b2da      	uxtb	r2, r3
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014488:	4b11      	ldr	r3, [pc, #68]	; (80144d0 <udp_connect+0xd8>)
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	617b      	str	r3, [r7, #20]
 801448e:	e008      	b.n	80144a2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014490:	68fa      	ldr	r2, [r7, #12]
 8014492:	697b      	ldr	r3, [r7, #20]
 8014494:	429a      	cmp	r2, r3
 8014496:	d101      	bne.n	801449c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014498:	2300      	movs	r3, #0
 801449a:	e00d      	b.n	80144b8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	68db      	ldr	r3, [r3, #12]
 80144a0:	617b      	str	r3, [r7, #20]
 80144a2:	697b      	ldr	r3, [r7, #20]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d1f3      	bne.n	8014490 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80144a8:	4b09      	ldr	r3, [pc, #36]	; (80144d0 <udp_connect+0xd8>)
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80144b0:	4a07      	ldr	r2, [pc, #28]	; (80144d0 <udp_connect+0xd8>)
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80144b6:	2300      	movs	r3, #0
}
 80144b8:	4618      	mov	r0, r3
 80144ba:	3718      	adds	r7, #24
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}
 80144c0:	0801a748 	.word	0x0801a748
 80144c4:	0801aa28 	.word	0x0801aa28
 80144c8:	0801a79c 	.word	0x0801a79c
 80144cc:	0801aa44 	.word	0x0801aa44
 80144d0:	20009024 	.word	0x20009024

080144d4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80144d4:	b580      	push	{r7, lr}
 80144d6:	b084      	sub	sp, #16
 80144d8:	af00      	add	r7, sp, #0
 80144da:	60f8      	str	r0, [r7, #12]
 80144dc:	60b9      	str	r1, [r7, #8]
 80144de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d107      	bne.n	80144f6 <udp_recv+0x22>
 80144e6:	4b08      	ldr	r3, [pc, #32]	; (8014508 <udp_recv+0x34>)
 80144e8:	f240 428a 	movw	r2, #1162	; 0x48a
 80144ec:	4907      	ldr	r1, [pc, #28]	; (801450c <udp_recv+0x38>)
 80144ee:	4808      	ldr	r0, [pc, #32]	; (8014510 <udp_recv+0x3c>)
 80144f0:	f003 f8f2 	bl	80176d8 <iprintf>
 80144f4:	e005      	b.n	8014502 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	68ba      	ldr	r2, [r7, #8]
 80144fa:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	687a      	ldr	r2, [r7, #4]
 8014500:	61da      	str	r2, [r3, #28]
}
 8014502:	3710      	adds	r7, #16
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	0801a748 	.word	0x0801a748
 801450c:	0801aa7c 	.word	0x0801aa7c
 8014510:	0801a79c 	.word	0x0801a79c

08014514 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014514:	b580      	push	{r7, lr}
 8014516:	b084      	sub	sp, #16
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d107      	bne.n	8014532 <udp_remove+0x1e>
 8014522:	4b19      	ldr	r3, [pc, #100]	; (8014588 <udp_remove+0x74>)
 8014524:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014528:	4918      	ldr	r1, [pc, #96]	; (801458c <udp_remove+0x78>)
 801452a:	4819      	ldr	r0, [pc, #100]	; (8014590 <udp_remove+0x7c>)
 801452c:	f003 f8d4 	bl	80176d8 <iprintf>
 8014530:	e026      	b.n	8014580 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014532:	4b18      	ldr	r3, [pc, #96]	; (8014594 <udp_remove+0x80>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	687a      	ldr	r2, [r7, #4]
 8014538:	429a      	cmp	r2, r3
 801453a:	d105      	bne.n	8014548 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801453c:	4b15      	ldr	r3, [pc, #84]	; (8014594 <udp_remove+0x80>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	68db      	ldr	r3, [r3, #12]
 8014542:	4a14      	ldr	r2, [pc, #80]	; (8014594 <udp_remove+0x80>)
 8014544:	6013      	str	r3, [r2, #0]
 8014546:	e017      	b.n	8014578 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014548:	4b12      	ldr	r3, [pc, #72]	; (8014594 <udp_remove+0x80>)
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	60fb      	str	r3, [r7, #12]
 801454e:	e010      	b.n	8014572 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	68db      	ldr	r3, [r3, #12]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d009      	beq.n	801456c <udp_remove+0x58>
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	687a      	ldr	r2, [r7, #4]
 801455e:	429a      	cmp	r2, r3
 8014560:	d104      	bne.n	801456c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	68da      	ldr	r2, [r3, #12]
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	60da      	str	r2, [r3, #12]
        break;
 801456a:	e005      	b.n	8014578 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	68db      	ldr	r3, [r3, #12]
 8014570:	60fb      	str	r3, [r7, #12]
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d1eb      	bne.n	8014550 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014578:	6879      	ldr	r1, [r7, #4]
 801457a:	2000      	movs	r0, #0
 801457c:	f7f8 febc 	bl	800d2f8 <memp_free>
}
 8014580:	3710      	adds	r7, #16
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}
 8014586:	bf00      	nop
 8014588:	0801a748 	.word	0x0801a748
 801458c:	0801aa94 	.word	0x0801aa94
 8014590:	0801a79c 	.word	0x0801a79c
 8014594:	20009024 	.word	0x20009024

08014598 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b082      	sub	sp, #8
 801459c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801459e:	2000      	movs	r0, #0
 80145a0:	f7f8 fe3a 	bl	800d218 <memp_malloc>
 80145a4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d007      	beq.n	80145bc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80145ac:	2220      	movs	r2, #32
 80145ae:	2100      	movs	r1, #0
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f003 f889 	bl	80176c8 <memset>
    pcb->ttl = UDP_TTL;
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	22ff      	movs	r2, #255	; 0xff
 80145ba:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80145bc:	687b      	ldr	r3, [r7, #4]
}
 80145be:	4618      	mov	r0, r3
 80145c0:	3708      	adds	r7, #8
 80145c2:	46bd      	mov	sp, r7
 80145c4:	bd80      	pop	{r7, pc}
	...

080145c8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80145c8:	b480      	push	{r7}
 80145ca:	b085      	sub	sp, #20
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d01e      	beq.n	8014616 <udp_netif_ip_addr_changed+0x4e>
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d01a      	beq.n	8014616 <udp_netif_ip_addr_changed+0x4e>
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d017      	beq.n	8014616 <udp_netif_ip_addr_changed+0x4e>
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	681b      	ldr	r3, [r3, #0]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d013      	beq.n	8014616 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80145ee:	4b0d      	ldr	r3, [pc, #52]	; (8014624 <udp_netif_ip_addr_changed+0x5c>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	60fb      	str	r3, [r7, #12]
 80145f4:	e00c      	b.n	8014610 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80145f6:	68fb      	ldr	r3, [r7, #12]
 80145f8:	681a      	ldr	r2, [r3, #0]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	429a      	cmp	r2, r3
 8014600:	d103      	bne.n	801460a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	681a      	ldr	r2, [r3, #0]
 8014606:	68fb      	ldr	r3, [r7, #12]
 8014608:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	68db      	ldr	r3, [r3, #12]
 801460e:	60fb      	str	r3, [r7, #12]
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d1ef      	bne.n	80145f6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014616:	bf00      	nop
 8014618:	3714      	adds	r7, #20
 801461a:	46bd      	mov	sp, r7
 801461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014620:	4770      	bx	lr
 8014622:	bf00      	nop
 8014624:	20009024 	.word	0x20009024

08014628 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b082      	sub	sp, #8
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014630:	4915      	ldr	r1, [pc, #84]	; (8014688 <etharp_free_entry+0x60>)
 8014632:	687a      	ldr	r2, [r7, #4]
 8014634:	4613      	mov	r3, r2
 8014636:	005b      	lsls	r3, r3, #1
 8014638:	4413      	add	r3, r2
 801463a:	00db      	lsls	r3, r3, #3
 801463c:	440b      	add	r3, r1
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d013      	beq.n	801466c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014644:	4910      	ldr	r1, [pc, #64]	; (8014688 <etharp_free_entry+0x60>)
 8014646:	687a      	ldr	r2, [r7, #4]
 8014648:	4613      	mov	r3, r2
 801464a:	005b      	lsls	r3, r3, #1
 801464c:	4413      	add	r3, r2
 801464e:	00db      	lsls	r3, r3, #3
 8014650:	440b      	add	r3, r1
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	4618      	mov	r0, r3
 8014656:	f7f9 fcc5 	bl	800dfe4 <pbuf_free>
    arp_table[i].q = NULL;
 801465a:	490b      	ldr	r1, [pc, #44]	; (8014688 <etharp_free_entry+0x60>)
 801465c:	687a      	ldr	r2, [r7, #4]
 801465e:	4613      	mov	r3, r2
 8014660:	005b      	lsls	r3, r3, #1
 8014662:	4413      	add	r3, r2
 8014664:	00db      	lsls	r3, r3, #3
 8014666:	440b      	add	r3, r1
 8014668:	2200      	movs	r2, #0
 801466a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801466c:	4906      	ldr	r1, [pc, #24]	; (8014688 <etharp_free_entry+0x60>)
 801466e:	687a      	ldr	r2, [r7, #4]
 8014670:	4613      	mov	r3, r2
 8014672:	005b      	lsls	r3, r3, #1
 8014674:	4413      	add	r3, r2
 8014676:	00db      	lsls	r3, r3, #3
 8014678:	440b      	add	r3, r1
 801467a:	3314      	adds	r3, #20
 801467c:	2200      	movs	r2, #0
 801467e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014680:	bf00      	nop
 8014682:	3708      	adds	r7, #8
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}
 8014688:	20009028 	.word	0x20009028

0801468c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b082      	sub	sp, #8
 8014690:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014692:	2300      	movs	r3, #0
 8014694:	607b      	str	r3, [r7, #4]
 8014696:	e096      	b.n	80147c6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014698:	494f      	ldr	r1, [pc, #316]	; (80147d8 <etharp_tmr+0x14c>)
 801469a:	687a      	ldr	r2, [r7, #4]
 801469c:	4613      	mov	r3, r2
 801469e:	005b      	lsls	r3, r3, #1
 80146a0:	4413      	add	r3, r2
 80146a2:	00db      	lsls	r3, r3, #3
 80146a4:	440b      	add	r3, r1
 80146a6:	3314      	adds	r3, #20
 80146a8:	781b      	ldrb	r3, [r3, #0]
 80146aa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80146ac:	78fb      	ldrb	r3, [r7, #3]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	f000 8086 	beq.w	80147c0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80146b4:	4948      	ldr	r1, [pc, #288]	; (80147d8 <etharp_tmr+0x14c>)
 80146b6:	687a      	ldr	r2, [r7, #4]
 80146b8:	4613      	mov	r3, r2
 80146ba:	005b      	lsls	r3, r3, #1
 80146bc:	4413      	add	r3, r2
 80146be:	00db      	lsls	r3, r3, #3
 80146c0:	440b      	add	r3, r1
 80146c2:	3312      	adds	r3, #18
 80146c4:	881b      	ldrh	r3, [r3, #0]
 80146c6:	3301      	adds	r3, #1
 80146c8:	b298      	uxth	r0, r3
 80146ca:	4943      	ldr	r1, [pc, #268]	; (80147d8 <etharp_tmr+0x14c>)
 80146cc:	687a      	ldr	r2, [r7, #4]
 80146ce:	4613      	mov	r3, r2
 80146d0:	005b      	lsls	r3, r3, #1
 80146d2:	4413      	add	r3, r2
 80146d4:	00db      	lsls	r3, r3, #3
 80146d6:	440b      	add	r3, r1
 80146d8:	3312      	adds	r3, #18
 80146da:	4602      	mov	r2, r0
 80146dc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80146de:	493e      	ldr	r1, [pc, #248]	; (80147d8 <etharp_tmr+0x14c>)
 80146e0:	687a      	ldr	r2, [r7, #4]
 80146e2:	4613      	mov	r3, r2
 80146e4:	005b      	lsls	r3, r3, #1
 80146e6:	4413      	add	r3, r2
 80146e8:	00db      	lsls	r3, r3, #3
 80146ea:	440b      	add	r3, r1
 80146ec:	3312      	adds	r3, #18
 80146ee:	881b      	ldrh	r3, [r3, #0]
 80146f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80146f4:	d215      	bcs.n	8014722 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80146f6:	4938      	ldr	r1, [pc, #224]	; (80147d8 <etharp_tmr+0x14c>)
 80146f8:	687a      	ldr	r2, [r7, #4]
 80146fa:	4613      	mov	r3, r2
 80146fc:	005b      	lsls	r3, r3, #1
 80146fe:	4413      	add	r3, r2
 8014700:	00db      	lsls	r3, r3, #3
 8014702:	440b      	add	r3, r1
 8014704:	3314      	adds	r3, #20
 8014706:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014708:	2b01      	cmp	r3, #1
 801470a:	d10e      	bne.n	801472a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801470c:	4932      	ldr	r1, [pc, #200]	; (80147d8 <etharp_tmr+0x14c>)
 801470e:	687a      	ldr	r2, [r7, #4]
 8014710:	4613      	mov	r3, r2
 8014712:	005b      	lsls	r3, r3, #1
 8014714:	4413      	add	r3, r2
 8014716:	00db      	lsls	r3, r3, #3
 8014718:	440b      	add	r3, r1
 801471a:	3312      	adds	r3, #18
 801471c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801471e:	2b04      	cmp	r3, #4
 8014720:	d903      	bls.n	801472a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f7ff ff80 	bl	8014628 <etharp_free_entry>
 8014728:	e04a      	b.n	80147c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801472a:	492b      	ldr	r1, [pc, #172]	; (80147d8 <etharp_tmr+0x14c>)
 801472c:	687a      	ldr	r2, [r7, #4]
 801472e:	4613      	mov	r3, r2
 8014730:	005b      	lsls	r3, r3, #1
 8014732:	4413      	add	r3, r2
 8014734:	00db      	lsls	r3, r3, #3
 8014736:	440b      	add	r3, r1
 8014738:	3314      	adds	r3, #20
 801473a:	781b      	ldrb	r3, [r3, #0]
 801473c:	2b03      	cmp	r3, #3
 801473e:	d10a      	bne.n	8014756 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014740:	4925      	ldr	r1, [pc, #148]	; (80147d8 <etharp_tmr+0x14c>)
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	4613      	mov	r3, r2
 8014746:	005b      	lsls	r3, r3, #1
 8014748:	4413      	add	r3, r2
 801474a:	00db      	lsls	r3, r3, #3
 801474c:	440b      	add	r3, r1
 801474e:	3314      	adds	r3, #20
 8014750:	2204      	movs	r2, #4
 8014752:	701a      	strb	r2, [r3, #0]
 8014754:	e034      	b.n	80147c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014756:	4920      	ldr	r1, [pc, #128]	; (80147d8 <etharp_tmr+0x14c>)
 8014758:	687a      	ldr	r2, [r7, #4]
 801475a:	4613      	mov	r3, r2
 801475c:	005b      	lsls	r3, r3, #1
 801475e:	4413      	add	r3, r2
 8014760:	00db      	lsls	r3, r3, #3
 8014762:	440b      	add	r3, r1
 8014764:	3314      	adds	r3, #20
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	2b04      	cmp	r3, #4
 801476a:	d10a      	bne.n	8014782 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801476c:	491a      	ldr	r1, [pc, #104]	; (80147d8 <etharp_tmr+0x14c>)
 801476e:	687a      	ldr	r2, [r7, #4]
 8014770:	4613      	mov	r3, r2
 8014772:	005b      	lsls	r3, r3, #1
 8014774:	4413      	add	r3, r2
 8014776:	00db      	lsls	r3, r3, #3
 8014778:	440b      	add	r3, r1
 801477a:	3314      	adds	r3, #20
 801477c:	2202      	movs	r2, #2
 801477e:	701a      	strb	r2, [r3, #0]
 8014780:	e01e      	b.n	80147c0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014782:	4915      	ldr	r1, [pc, #84]	; (80147d8 <etharp_tmr+0x14c>)
 8014784:	687a      	ldr	r2, [r7, #4]
 8014786:	4613      	mov	r3, r2
 8014788:	005b      	lsls	r3, r3, #1
 801478a:	4413      	add	r3, r2
 801478c:	00db      	lsls	r3, r3, #3
 801478e:	440b      	add	r3, r1
 8014790:	3314      	adds	r3, #20
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	2b01      	cmp	r3, #1
 8014796:	d113      	bne.n	80147c0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014798:	490f      	ldr	r1, [pc, #60]	; (80147d8 <etharp_tmr+0x14c>)
 801479a:	687a      	ldr	r2, [r7, #4]
 801479c:	4613      	mov	r3, r2
 801479e:	005b      	lsls	r3, r3, #1
 80147a0:	4413      	add	r3, r2
 80147a2:	00db      	lsls	r3, r3, #3
 80147a4:	440b      	add	r3, r1
 80147a6:	3308      	adds	r3, #8
 80147a8:	6818      	ldr	r0, [r3, #0]
 80147aa:	687a      	ldr	r2, [r7, #4]
 80147ac:	4613      	mov	r3, r2
 80147ae:	005b      	lsls	r3, r3, #1
 80147b0:	4413      	add	r3, r2
 80147b2:	00db      	lsls	r3, r3, #3
 80147b4:	4a08      	ldr	r2, [pc, #32]	; (80147d8 <etharp_tmr+0x14c>)
 80147b6:	4413      	add	r3, r2
 80147b8:	3304      	adds	r3, #4
 80147ba:	4619      	mov	r1, r3
 80147bc:	f000 fe6e 	bl	801549c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	3301      	adds	r3, #1
 80147c4:	607b      	str	r3, [r7, #4]
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2b09      	cmp	r3, #9
 80147ca:	f77f af65 	ble.w	8014698 <etharp_tmr+0xc>
      }
    }
  }
}
 80147ce:	bf00      	nop
 80147d0:	bf00      	nop
 80147d2:	3708      	adds	r7, #8
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}
 80147d8:	20009028 	.word	0x20009028

080147dc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b08a      	sub	sp, #40	; 0x28
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	460b      	mov	r3, r1
 80147e6:	607a      	str	r2, [r7, #4]
 80147e8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80147ea:	230a      	movs	r3, #10
 80147ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80147ee:	230a      	movs	r3, #10
 80147f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80147f2:	230a      	movs	r3, #10
 80147f4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80147f6:	2300      	movs	r3, #0
 80147f8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80147fa:	230a      	movs	r3, #10
 80147fc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80147fe:	2300      	movs	r3, #0
 8014800:	83bb      	strh	r3, [r7, #28]
 8014802:	2300      	movs	r3, #0
 8014804:	837b      	strh	r3, [r7, #26]
 8014806:	2300      	movs	r3, #0
 8014808:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801480a:	2300      	movs	r3, #0
 801480c:	843b      	strh	r3, [r7, #32]
 801480e:	e0ae      	b.n	801496e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014810:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014814:	49a6      	ldr	r1, [pc, #664]	; (8014ab0 <etharp_find_entry+0x2d4>)
 8014816:	4613      	mov	r3, r2
 8014818:	005b      	lsls	r3, r3, #1
 801481a:	4413      	add	r3, r2
 801481c:	00db      	lsls	r3, r3, #3
 801481e:	440b      	add	r3, r1
 8014820:	3314      	adds	r3, #20
 8014822:	781b      	ldrb	r3, [r3, #0]
 8014824:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014826:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801482a:	2b0a      	cmp	r3, #10
 801482c:	d105      	bne.n	801483a <etharp_find_entry+0x5e>
 801482e:	7dfb      	ldrb	r3, [r7, #23]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d102      	bne.n	801483a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014834:	8c3b      	ldrh	r3, [r7, #32]
 8014836:	847b      	strh	r3, [r7, #34]	; 0x22
 8014838:	e095      	b.n	8014966 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801483a:	7dfb      	ldrb	r3, [r7, #23]
 801483c:	2b00      	cmp	r3, #0
 801483e:	f000 8092 	beq.w	8014966 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014842:	7dfb      	ldrb	r3, [r7, #23]
 8014844:	2b01      	cmp	r3, #1
 8014846:	d009      	beq.n	801485c <etharp_find_entry+0x80>
 8014848:	7dfb      	ldrb	r3, [r7, #23]
 801484a:	2b01      	cmp	r3, #1
 801484c:	d806      	bhi.n	801485c <etharp_find_entry+0x80>
 801484e:	4b99      	ldr	r3, [pc, #612]	; (8014ab4 <etharp_find_entry+0x2d8>)
 8014850:	f240 1223 	movw	r2, #291	; 0x123
 8014854:	4998      	ldr	r1, [pc, #608]	; (8014ab8 <etharp_find_entry+0x2dc>)
 8014856:	4899      	ldr	r0, [pc, #612]	; (8014abc <etharp_find_entry+0x2e0>)
 8014858:	f002 ff3e 	bl	80176d8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	2b00      	cmp	r3, #0
 8014860:	d020      	beq.n	80148a4 <etharp_find_entry+0xc8>
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	6819      	ldr	r1, [r3, #0]
 8014866:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801486a:	4891      	ldr	r0, [pc, #580]	; (8014ab0 <etharp_find_entry+0x2d4>)
 801486c:	4613      	mov	r3, r2
 801486e:	005b      	lsls	r3, r3, #1
 8014870:	4413      	add	r3, r2
 8014872:	00db      	lsls	r3, r3, #3
 8014874:	4403      	add	r3, r0
 8014876:	3304      	adds	r3, #4
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	4299      	cmp	r1, r3
 801487c:	d112      	bne.n	80148a4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d00c      	beq.n	801489e <etharp_find_entry+0xc2>
 8014884:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014888:	4989      	ldr	r1, [pc, #548]	; (8014ab0 <etharp_find_entry+0x2d4>)
 801488a:	4613      	mov	r3, r2
 801488c:	005b      	lsls	r3, r3, #1
 801488e:	4413      	add	r3, r2
 8014890:	00db      	lsls	r3, r3, #3
 8014892:	440b      	add	r3, r1
 8014894:	3308      	adds	r3, #8
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	687a      	ldr	r2, [r7, #4]
 801489a:	429a      	cmp	r2, r3
 801489c:	d102      	bne.n	80148a4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801489e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148a2:	e100      	b.n	8014aa6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80148a4:	7dfb      	ldrb	r3, [r7, #23]
 80148a6:	2b01      	cmp	r3, #1
 80148a8:	d140      	bne.n	801492c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80148aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148ae:	4980      	ldr	r1, [pc, #512]	; (8014ab0 <etharp_find_entry+0x2d4>)
 80148b0:	4613      	mov	r3, r2
 80148b2:	005b      	lsls	r3, r3, #1
 80148b4:	4413      	add	r3, r2
 80148b6:	00db      	lsls	r3, r3, #3
 80148b8:	440b      	add	r3, r1
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d01a      	beq.n	80148f6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80148c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148c4:	497a      	ldr	r1, [pc, #488]	; (8014ab0 <etharp_find_entry+0x2d4>)
 80148c6:	4613      	mov	r3, r2
 80148c8:	005b      	lsls	r3, r3, #1
 80148ca:	4413      	add	r3, r2
 80148cc:	00db      	lsls	r3, r3, #3
 80148ce:	440b      	add	r3, r1
 80148d0:	3312      	adds	r3, #18
 80148d2:	881b      	ldrh	r3, [r3, #0]
 80148d4:	8bba      	ldrh	r2, [r7, #28]
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d845      	bhi.n	8014966 <etharp_find_entry+0x18a>
            old_queue = i;
 80148da:	8c3b      	ldrh	r3, [r7, #32]
 80148dc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80148de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148e2:	4973      	ldr	r1, [pc, #460]	; (8014ab0 <etharp_find_entry+0x2d4>)
 80148e4:	4613      	mov	r3, r2
 80148e6:	005b      	lsls	r3, r3, #1
 80148e8:	4413      	add	r3, r2
 80148ea:	00db      	lsls	r3, r3, #3
 80148ec:	440b      	add	r3, r1
 80148ee:	3312      	adds	r3, #18
 80148f0:	881b      	ldrh	r3, [r3, #0]
 80148f2:	83bb      	strh	r3, [r7, #28]
 80148f4:	e037      	b.n	8014966 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80148f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148fa:	496d      	ldr	r1, [pc, #436]	; (8014ab0 <etharp_find_entry+0x2d4>)
 80148fc:	4613      	mov	r3, r2
 80148fe:	005b      	lsls	r3, r3, #1
 8014900:	4413      	add	r3, r2
 8014902:	00db      	lsls	r3, r3, #3
 8014904:	440b      	add	r3, r1
 8014906:	3312      	adds	r3, #18
 8014908:	881b      	ldrh	r3, [r3, #0]
 801490a:	8b7a      	ldrh	r2, [r7, #26]
 801490c:	429a      	cmp	r2, r3
 801490e:	d82a      	bhi.n	8014966 <etharp_find_entry+0x18a>
            old_pending = i;
 8014910:	8c3b      	ldrh	r3, [r7, #32]
 8014912:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014914:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014918:	4965      	ldr	r1, [pc, #404]	; (8014ab0 <etharp_find_entry+0x2d4>)
 801491a:	4613      	mov	r3, r2
 801491c:	005b      	lsls	r3, r3, #1
 801491e:	4413      	add	r3, r2
 8014920:	00db      	lsls	r3, r3, #3
 8014922:	440b      	add	r3, r1
 8014924:	3312      	adds	r3, #18
 8014926:	881b      	ldrh	r3, [r3, #0]
 8014928:	837b      	strh	r3, [r7, #26]
 801492a:	e01c      	b.n	8014966 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801492c:	7dfb      	ldrb	r3, [r7, #23]
 801492e:	2b01      	cmp	r3, #1
 8014930:	d919      	bls.n	8014966 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014932:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014936:	495e      	ldr	r1, [pc, #376]	; (8014ab0 <etharp_find_entry+0x2d4>)
 8014938:	4613      	mov	r3, r2
 801493a:	005b      	lsls	r3, r3, #1
 801493c:	4413      	add	r3, r2
 801493e:	00db      	lsls	r3, r3, #3
 8014940:	440b      	add	r3, r1
 8014942:	3312      	adds	r3, #18
 8014944:	881b      	ldrh	r3, [r3, #0]
 8014946:	8b3a      	ldrh	r2, [r7, #24]
 8014948:	429a      	cmp	r2, r3
 801494a:	d80c      	bhi.n	8014966 <etharp_find_entry+0x18a>
            old_stable = i;
 801494c:	8c3b      	ldrh	r3, [r7, #32]
 801494e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014950:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014954:	4956      	ldr	r1, [pc, #344]	; (8014ab0 <etharp_find_entry+0x2d4>)
 8014956:	4613      	mov	r3, r2
 8014958:	005b      	lsls	r3, r3, #1
 801495a:	4413      	add	r3, r2
 801495c:	00db      	lsls	r3, r3, #3
 801495e:	440b      	add	r3, r1
 8014960:	3312      	adds	r3, #18
 8014962:	881b      	ldrh	r3, [r3, #0]
 8014964:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014966:	8c3b      	ldrh	r3, [r7, #32]
 8014968:	3301      	adds	r3, #1
 801496a:	b29b      	uxth	r3, r3
 801496c:	843b      	strh	r3, [r7, #32]
 801496e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014972:	2b09      	cmp	r3, #9
 8014974:	f77f af4c 	ble.w	8014810 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014978:	7afb      	ldrb	r3, [r7, #11]
 801497a:	f003 0302 	and.w	r3, r3, #2
 801497e:	2b00      	cmp	r3, #0
 8014980:	d108      	bne.n	8014994 <etharp_find_entry+0x1b8>
 8014982:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014986:	2b0a      	cmp	r3, #10
 8014988:	d107      	bne.n	801499a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801498a:	7afb      	ldrb	r3, [r7, #11]
 801498c:	f003 0301 	and.w	r3, r3, #1
 8014990:	2b00      	cmp	r3, #0
 8014992:	d102      	bne.n	801499a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014998:	e085      	b.n	8014aa6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801499a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801499e:	2b09      	cmp	r3, #9
 80149a0:	dc02      	bgt.n	80149a8 <etharp_find_entry+0x1cc>
    i = empty;
 80149a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80149a4:	843b      	strh	r3, [r7, #32]
 80149a6:	e039      	b.n	8014a1c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80149a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80149ac:	2b09      	cmp	r3, #9
 80149ae:	dc14      	bgt.n	80149da <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80149b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149b2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80149b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149b8:	493d      	ldr	r1, [pc, #244]	; (8014ab0 <etharp_find_entry+0x2d4>)
 80149ba:	4613      	mov	r3, r2
 80149bc:	005b      	lsls	r3, r3, #1
 80149be:	4413      	add	r3, r2
 80149c0:	00db      	lsls	r3, r3, #3
 80149c2:	440b      	add	r3, r1
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d018      	beq.n	80149fc <etharp_find_entry+0x220>
 80149ca:	4b3a      	ldr	r3, [pc, #232]	; (8014ab4 <etharp_find_entry+0x2d8>)
 80149cc:	f240 126d 	movw	r2, #365	; 0x16d
 80149d0:	493b      	ldr	r1, [pc, #236]	; (8014ac0 <etharp_find_entry+0x2e4>)
 80149d2:	483a      	ldr	r0, [pc, #232]	; (8014abc <etharp_find_entry+0x2e0>)
 80149d4:	f002 fe80 	bl	80176d8 <iprintf>
 80149d8:	e010      	b.n	80149fc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80149da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80149de:	2b09      	cmp	r3, #9
 80149e0:	dc02      	bgt.n	80149e8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80149e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80149e4:	843b      	strh	r3, [r7, #32]
 80149e6:	e009      	b.n	80149fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80149e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80149ec:	2b09      	cmp	r3, #9
 80149ee:	dc02      	bgt.n	80149f6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80149f0:	8bfb      	ldrh	r3, [r7, #30]
 80149f2:	843b      	strh	r3, [r7, #32]
 80149f4:	e002      	b.n	80149fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80149f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80149fa:	e054      	b.n	8014aa6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80149fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a00:	2b09      	cmp	r3, #9
 8014a02:	dd06      	ble.n	8014a12 <etharp_find_entry+0x236>
 8014a04:	4b2b      	ldr	r3, [pc, #172]	; (8014ab4 <etharp_find_entry+0x2d8>)
 8014a06:	f240 127f 	movw	r2, #383	; 0x17f
 8014a0a:	492e      	ldr	r1, [pc, #184]	; (8014ac4 <etharp_find_entry+0x2e8>)
 8014a0c:	482b      	ldr	r0, [pc, #172]	; (8014abc <etharp_find_entry+0x2e0>)
 8014a0e:	f002 fe63 	bl	80176d8 <iprintf>
    etharp_free_entry(i);
 8014a12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a16:	4618      	mov	r0, r3
 8014a18:	f7ff fe06 	bl	8014628 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014a1c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014a20:	2b09      	cmp	r3, #9
 8014a22:	dd06      	ble.n	8014a32 <etharp_find_entry+0x256>
 8014a24:	4b23      	ldr	r3, [pc, #140]	; (8014ab4 <etharp_find_entry+0x2d8>)
 8014a26:	f240 1283 	movw	r2, #387	; 0x183
 8014a2a:	4926      	ldr	r1, [pc, #152]	; (8014ac4 <etharp_find_entry+0x2e8>)
 8014a2c:	4823      	ldr	r0, [pc, #140]	; (8014abc <etharp_find_entry+0x2e0>)
 8014a2e:	f002 fe53 	bl	80176d8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014a32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a36:	491e      	ldr	r1, [pc, #120]	; (8014ab0 <etharp_find_entry+0x2d4>)
 8014a38:	4613      	mov	r3, r2
 8014a3a:	005b      	lsls	r3, r3, #1
 8014a3c:	4413      	add	r3, r2
 8014a3e:	00db      	lsls	r3, r3, #3
 8014a40:	440b      	add	r3, r1
 8014a42:	3314      	adds	r3, #20
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d006      	beq.n	8014a58 <etharp_find_entry+0x27c>
 8014a4a:	4b1a      	ldr	r3, [pc, #104]	; (8014ab4 <etharp_find_entry+0x2d8>)
 8014a4c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014a50:	491d      	ldr	r1, [pc, #116]	; (8014ac8 <etharp_find_entry+0x2ec>)
 8014a52:	481a      	ldr	r0, [pc, #104]	; (8014abc <etharp_find_entry+0x2e0>)
 8014a54:	f002 fe40 	bl	80176d8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d00b      	beq.n	8014a76 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014a5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	6819      	ldr	r1, [r3, #0]
 8014a66:	4812      	ldr	r0, [pc, #72]	; (8014ab0 <etharp_find_entry+0x2d4>)
 8014a68:	4613      	mov	r3, r2
 8014a6a:	005b      	lsls	r3, r3, #1
 8014a6c:	4413      	add	r3, r2
 8014a6e:	00db      	lsls	r3, r3, #3
 8014a70:	4403      	add	r3, r0
 8014a72:	3304      	adds	r3, #4
 8014a74:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014a76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a7a:	490d      	ldr	r1, [pc, #52]	; (8014ab0 <etharp_find_entry+0x2d4>)
 8014a7c:	4613      	mov	r3, r2
 8014a7e:	005b      	lsls	r3, r3, #1
 8014a80:	4413      	add	r3, r2
 8014a82:	00db      	lsls	r3, r3, #3
 8014a84:	440b      	add	r3, r1
 8014a86:	3312      	adds	r3, #18
 8014a88:	2200      	movs	r2, #0
 8014a8a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014a8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014a90:	4907      	ldr	r1, [pc, #28]	; (8014ab0 <etharp_find_entry+0x2d4>)
 8014a92:	4613      	mov	r3, r2
 8014a94:	005b      	lsls	r3, r3, #1
 8014a96:	4413      	add	r3, r2
 8014a98:	00db      	lsls	r3, r3, #3
 8014a9a:	440b      	add	r3, r1
 8014a9c:	3308      	adds	r3, #8
 8014a9e:	687a      	ldr	r2, [r7, #4]
 8014aa0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014aa2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	3728      	adds	r7, #40	; 0x28
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bd80      	pop	{r7, pc}
 8014aae:	bf00      	nop
 8014ab0:	20009028 	.word	0x20009028
 8014ab4:	0801aaac 	.word	0x0801aaac
 8014ab8:	0801aae4 	.word	0x0801aae4
 8014abc:	0801ab24 	.word	0x0801ab24
 8014ac0:	0801ab4c 	.word	0x0801ab4c
 8014ac4:	0801ab64 	.word	0x0801ab64
 8014ac8:	0801ab78 	.word	0x0801ab78

08014acc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b088      	sub	sp, #32
 8014ad0:	af02      	add	r7, sp, #8
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	607a      	str	r2, [r7, #4]
 8014ad8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014ae0:	2b06      	cmp	r3, #6
 8014ae2:	d006      	beq.n	8014af2 <etharp_update_arp_entry+0x26>
 8014ae4:	4b48      	ldr	r3, [pc, #288]	; (8014c08 <etharp_update_arp_entry+0x13c>)
 8014ae6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014aea:	4948      	ldr	r1, [pc, #288]	; (8014c0c <etharp_update_arp_entry+0x140>)
 8014aec:	4848      	ldr	r0, [pc, #288]	; (8014c10 <etharp_update_arp_entry+0x144>)
 8014aee:	f002 fdf3 	bl	80176d8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d012      	beq.n	8014b1e <etharp_update_arp_entry+0x52>
 8014af8:	68bb      	ldr	r3, [r7, #8]
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d00e      	beq.n	8014b1e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b00:	68bb      	ldr	r3, [r7, #8]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	68f9      	ldr	r1, [r7, #12]
 8014b06:	4618      	mov	r0, r3
 8014b08:	f001 f8fe 	bl	8015d08 <ip4_addr_isbroadcast_u32>
 8014b0c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d105      	bne.n	8014b1e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014b1a:	2be0      	cmp	r3, #224	; 0xe0
 8014b1c:	d102      	bne.n	8014b24 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014b1e:	f06f 030f 	mvn.w	r3, #15
 8014b22:	e06c      	b.n	8014bfe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014b24:	78fb      	ldrb	r3, [r7, #3]
 8014b26:	68fa      	ldr	r2, [r7, #12]
 8014b28:	4619      	mov	r1, r3
 8014b2a:	68b8      	ldr	r0, [r7, #8]
 8014b2c:	f7ff fe56 	bl	80147dc <etharp_find_entry>
 8014b30:	4603      	mov	r3, r0
 8014b32:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014b34:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	da02      	bge.n	8014b42 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014b3c:	8afb      	ldrh	r3, [r7, #22]
 8014b3e:	b25b      	sxtb	r3, r3
 8014b40:	e05d      	b.n	8014bfe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014b42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b46:	4933      	ldr	r1, [pc, #204]	; (8014c14 <etharp_update_arp_entry+0x148>)
 8014b48:	4613      	mov	r3, r2
 8014b4a:	005b      	lsls	r3, r3, #1
 8014b4c:	4413      	add	r3, r2
 8014b4e:	00db      	lsls	r3, r3, #3
 8014b50:	440b      	add	r3, r1
 8014b52:	3314      	adds	r3, #20
 8014b54:	2202      	movs	r2, #2
 8014b56:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014b58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b5c:	492d      	ldr	r1, [pc, #180]	; (8014c14 <etharp_update_arp_entry+0x148>)
 8014b5e:	4613      	mov	r3, r2
 8014b60:	005b      	lsls	r3, r3, #1
 8014b62:	4413      	add	r3, r2
 8014b64:	00db      	lsls	r3, r3, #3
 8014b66:	440b      	add	r3, r1
 8014b68:	3308      	adds	r3, #8
 8014b6a:	68fa      	ldr	r2, [r7, #12]
 8014b6c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014b6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b72:	4613      	mov	r3, r2
 8014b74:	005b      	lsls	r3, r3, #1
 8014b76:	4413      	add	r3, r2
 8014b78:	00db      	lsls	r3, r3, #3
 8014b7a:	3308      	adds	r3, #8
 8014b7c:	4a25      	ldr	r2, [pc, #148]	; (8014c14 <etharp_update_arp_entry+0x148>)
 8014b7e:	4413      	add	r3, r2
 8014b80:	3304      	adds	r3, #4
 8014b82:	2206      	movs	r2, #6
 8014b84:	6879      	ldr	r1, [r7, #4]
 8014b86:	4618      	mov	r0, r3
 8014b88:	f002 fd90 	bl	80176ac <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014b8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b90:	4920      	ldr	r1, [pc, #128]	; (8014c14 <etharp_update_arp_entry+0x148>)
 8014b92:	4613      	mov	r3, r2
 8014b94:	005b      	lsls	r3, r3, #1
 8014b96:	4413      	add	r3, r2
 8014b98:	00db      	lsls	r3, r3, #3
 8014b9a:	440b      	add	r3, r1
 8014b9c:	3312      	adds	r3, #18
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014ba2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ba6:	491b      	ldr	r1, [pc, #108]	; (8014c14 <etharp_update_arp_entry+0x148>)
 8014ba8:	4613      	mov	r3, r2
 8014baa:	005b      	lsls	r3, r3, #1
 8014bac:	4413      	add	r3, r2
 8014bae:	00db      	lsls	r3, r3, #3
 8014bb0:	440b      	add	r3, r1
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d021      	beq.n	8014bfc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014bb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014bbc:	4915      	ldr	r1, [pc, #84]	; (8014c14 <etharp_update_arp_entry+0x148>)
 8014bbe:	4613      	mov	r3, r2
 8014bc0:	005b      	lsls	r3, r3, #1
 8014bc2:	4413      	add	r3, r2
 8014bc4:	00db      	lsls	r3, r3, #3
 8014bc6:	440b      	add	r3, r1
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014bcc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014bd0:	4910      	ldr	r1, [pc, #64]	; (8014c14 <etharp_update_arp_entry+0x148>)
 8014bd2:	4613      	mov	r3, r2
 8014bd4:	005b      	lsls	r3, r3, #1
 8014bd6:	4413      	add	r3, r2
 8014bd8:	00db      	lsls	r3, r3, #3
 8014bda:	440b      	add	r3, r1
 8014bdc:	2200      	movs	r2, #0
 8014bde:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014be6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014bea:	9300      	str	r3, [sp, #0]
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	6939      	ldr	r1, [r7, #16]
 8014bf0:	68f8      	ldr	r0, [r7, #12]
 8014bf2:	f001 ff97 	bl	8016b24 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014bf6:	6938      	ldr	r0, [r7, #16]
 8014bf8:	f7f9 f9f4 	bl	800dfe4 <pbuf_free>
  }
  return ERR_OK;
 8014bfc:	2300      	movs	r3, #0
}
 8014bfe:	4618      	mov	r0, r3
 8014c00:	3718      	adds	r7, #24
 8014c02:	46bd      	mov	sp, r7
 8014c04:	bd80      	pop	{r7, pc}
 8014c06:	bf00      	nop
 8014c08:	0801aaac 	.word	0x0801aaac
 8014c0c:	0801aba4 	.word	0x0801aba4
 8014c10:	0801ab24 	.word	0x0801ab24
 8014c14:	20009028 	.word	0x20009028

08014c18 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014c18:	b580      	push	{r7, lr}
 8014c1a:	b084      	sub	sp, #16
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c20:	2300      	movs	r3, #0
 8014c22:	60fb      	str	r3, [r7, #12]
 8014c24:	e01e      	b.n	8014c64 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014c26:	4913      	ldr	r1, [pc, #76]	; (8014c74 <etharp_cleanup_netif+0x5c>)
 8014c28:	68fa      	ldr	r2, [r7, #12]
 8014c2a:	4613      	mov	r3, r2
 8014c2c:	005b      	lsls	r3, r3, #1
 8014c2e:	4413      	add	r3, r2
 8014c30:	00db      	lsls	r3, r3, #3
 8014c32:	440b      	add	r3, r1
 8014c34:	3314      	adds	r3, #20
 8014c36:	781b      	ldrb	r3, [r3, #0]
 8014c38:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014c3a:	7afb      	ldrb	r3, [r7, #11]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d00e      	beq.n	8014c5e <etharp_cleanup_netif+0x46>
 8014c40:	490c      	ldr	r1, [pc, #48]	; (8014c74 <etharp_cleanup_netif+0x5c>)
 8014c42:	68fa      	ldr	r2, [r7, #12]
 8014c44:	4613      	mov	r3, r2
 8014c46:	005b      	lsls	r3, r3, #1
 8014c48:	4413      	add	r3, r2
 8014c4a:	00db      	lsls	r3, r3, #3
 8014c4c:	440b      	add	r3, r1
 8014c4e:	3308      	adds	r3, #8
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	687a      	ldr	r2, [r7, #4]
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d102      	bne.n	8014c5e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014c58:	68f8      	ldr	r0, [r7, #12]
 8014c5a:	f7ff fce5 	bl	8014628 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	3301      	adds	r3, #1
 8014c62:	60fb      	str	r3, [r7, #12]
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	2b09      	cmp	r3, #9
 8014c68:	dddd      	ble.n	8014c26 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014c6a:	bf00      	nop
 8014c6c:	bf00      	nop
 8014c6e:	3710      	adds	r7, #16
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}
 8014c74:	20009028 	.word	0x20009028

08014c78 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014c78:	b5b0      	push	{r4, r5, r7, lr}
 8014c7a:	b08a      	sub	sp, #40	; 0x28
 8014c7c:	af04      	add	r7, sp, #16
 8014c7e:	6078      	str	r0, [r7, #4]
 8014c80:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d107      	bne.n	8014c98 <etharp_input+0x20>
 8014c88:	4b3d      	ldr	r3, [pc, #244]	; (8014d80 <etharp_input+0x108>)
 8014c8a:	f240 228a 	movw	r2, #650	; 0x28a
 8014c8e:	493d      	ldr	r1, [pc, #244]	; (8014d84 <etharp_input+0x10c>)
 8014c90:	483d      	ldr	r0, [pc, #244]	; (8014d88 <etharp_input+0x110>)
 8014c92:	f002 fd21 	bl	80176d8 <iprintf>
 8014c96:	e06f      	b.n	8014d78 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014c9e:	693b      	ldr	r3, [r7, #16]
 8014ca0:	881b      	ldrh	r3, [r3, #0]
 8014ca2:	b29b      	uxth	r3, r3
 8014ca4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014ca8:	d10c      	bne.n	8014cc4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014caa:	693b      	ldr	r3, [r7, #16]
 8014cac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014cae:	2b06      	cmp	r3, #6
 8014cb0:	d108      	bne.n	8014cc4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014cb2:	693b      	ldr	r3, [r7, #16]
 8014cb4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014cb6:	2b04      	cmp	r3, #4
 8014cb8:	d104      	bne.n	8014cc4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014cba:	693b      	ldr	r3, [r7, #16]
 8014cbc:	885b      	ldrh	r3, [r3, #2]
 8014cbe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014cc0:	2b08      	cmp	r3, #8
 8014cc2:	d003      	beq.n	8014ccc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f7f9 f98d 	bl	800dfe4 <pbuf_free>
    return;
 8014cca:	e055      	b.n	8014d78 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014ccc:	693b      	ldr	r3, [r7, #16]
 8014cce:	330e      	adds	r3, #14
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014cd4:	693b      	ldr	r3, [r7, #16]
 8014cd6:	3318      	adds	r3, #24
 8014cd8:	681b      	ldr	r3, [r3, #0]
 8014cda:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	3304      	adds	r3, #4
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d102      	bne.n	8014cec <etharp_input+0x74>
    for_us = 0;
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	75fb      	strb	r3, [r7, #23]
 8014cea:	e009      	b.n	8014d00 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014cec:	68ba      	ldr	r2, [r7, #8]
 8014cee:	683b      	ldr	r3, [r7, #0]
 8014cf0:	3304      	adds	r3, #4
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	429a      	cmp	r2, r3
 8014cf6:	bf0c      	ite	eq
 8014cf8:	2301      	moveq	r3, #1
 8014cfa:	2300      	movne	r3, #0
 8014cfc:	b2db      	uxtb	r3, r3
 8014cfe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014d00:	693b      	ldr	r3, [r7, #16]
 8014d02:	f103 0208 	add.w	r2, r3, #8
 8014d06:	7dfb      	ldrb	r3, [r7, #23]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d001      	beq.n	8014d10 <etharp_input+0x98>
 8014d0c:	2301      	movs	r3, #1
 8014d0e:	e000      	b.n	8014d12 <etharp_input+0x9a>
 8014d10:	2302      	movs	r3, #2
 8014d12:	f107 010c 	add.w	r1, r7, #12
 8014d16:	6838      	ldr	r0, [r7, #0]
 8014d18:	f7ff fed8 	bl	8014acc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014d1c:	693b      	ldr	r3, [r7, #16]
 8014d1e:	88db      	ldrh	r3, [r3, #6]
 8014d20:	b29b      	uxth	r3, r3
 8014d22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d26:	d003      	beq.n	8014d30 <etharp_input+0xb8>
 8014d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014d2c:	d01e      	beq.n	8014d6c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014d2e:	e020      	b.n	8014d72 <etharp_input+0xfa>
      if (for_us) {
 8014d30:	7dfb      	ldrb	r3, [r7, #23]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d01c      	beq.n	8014d70 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014d3c:	693b      	ldr	r3, [r7, #16]
 8014d3e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014d42:	683b      	ldr	r3, [r7, #0]
 8014d44:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014d48:	683b      	ldr	r3, [r7, #0]
 8014d4a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014d4c:	693a      	ldr	r2, [r7, #16]
 8014d4e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014d50:	2102      	movs	r1, #2
 8014d52:	9103      	str	r1, [sp, #12]
 8014d54:	f107 010c 	add.w	r1, r7, #12
 8014d58:	9102      	str	r1, [sp, #8]
 8014d5a:	9201      	str	r2, [sp, #4]
 8014d5c:	9300      	str	r3, [sp, #0]
 8014d5e:	462b      	mov	r3, r5
 8014d60:	4622      	mov	r2, r4
 8014d62:	4601      	mov	r1, r0
 8014d64:	6838      	ldr	r0, [r7, #0]
 8014d66:	f000 faeb 	bl	8015340 <etharp_raw>
      break;
 8014d6a:	e001      	b.n	8014d70 <etharp_input+0xf8>
      break;
 8014d6c:	bf00      	nop
 8014d6e:	e000      	b.n	8014d72 <etharp_input+0xfa>
      break;
 8014d70:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f7f9 f936 	bl	800dfe4 <pbuf_free>
}
 8014d78:	3718      	adds	r7, #24
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8014d7e:	bf00      	nop
 8014d80:	0801aaac 	.word	0x0801aaac
 8014d84:	0801abfc 	.word	0x0801abfc
 8014d88:	0801ab24 	.word	0x0801ab24

08014d8c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b086      	sub	sp, #24
 8014d90:	af02      	add	r7, sp, #8
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	4613      	mov	r3, r2
 8014d98:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014d9a:	79fa      	ldrb	r2, [r7, #7]
 8014d9c:	4944      	ldr	r1, [pc, #272]	; (8014eb0 <etharp_output_to_arp_index+0x124>)
 8014d9e:	4613      	mov	r3, r2
 8014da0:	005b      	lsls	r3, r3, #1
 8014da2:	4413      	add	r3, r2
 8014da4:	00db      	lsls	r3, r3, #3
 8014da6:	440b      	add	r3, r1
 8014da8:	3314      	adds	r3, #20
 8014daa:	781b      	ldrb	r3, [r3, #0]
 8014dac:	2b01      	cmp	r3, #1
 8014dae:	d806      	bhi.n	8014dbe <etharp_output_to_arp_index+0x32>
 8014db0:	4b40      	ldr	r3, [pc, #256]	; (8014eb4 <etharp_output_to_arp_index+0x128>)
 8014db2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014db6:	4940      	ldr	r1, [pc, #256]	; (8014eb8 <etharp_output_to_arp_index+0x12c>)
 8014db8:	4840      	ldr	r0, [pc, #256]	; (8014ebc <etharp_output_to_arp_index+0x130>)
 8014dba:	f002 fc8d 	bl	80176d8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014dbe:	79fa      	ldrb	r2, [r7, #7]
 8014dc0:	493b      	ldr	r1, [pc, #236]	; (8014eb0 <etharp_output_to_arp_index+0x124>)
 8014dc2:	4613      	mov	r3, r2
 8014dc4:	005b      	lsls	r3, r3, #1
 8014dc6:	4413      	add	r3, r2
 8014dc8:	00db      	lsls	r3, r3, #3
 8014dca:	440b      	add	r3, r1
 8014dcc:	3314      	adds	r3, #20
 8014dce:	781b      	ldrb	r3, [r3, #0]
 8014dd0:	2b02      	cmp	r3, #2
 8014dd2:	d153      	bne.n	8014e7c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014dd4:	79fa      	ldrb	r2, [r7, #7]
 8014dd6:	4936      	ldr	r1, [pc, #216]	; (8014eb0 <etharp_output_to_arp_index+0x124>)
 8014dd8:	4613      	mov	r3, r2
 8014dda:	005b      	lsls	r3, r3, #1
 8014ddc:	4413      	add	r3, r2
 8014dde:	00db      	lsls	r3, r3, #3
 8014de0:	440b      	add	r3, r1
 8014de2:	3312      	adds	r3, #18
 8014de4:	881b      	ldrh	r3, [r3, #0]
 8014de6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014dea:	d919      	bls.n	8014e20 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014dec:	79fa      	ldrb	r2, [r7, #7]
 8014dee:	4613      	mov	r3, r2
 8014df0:	005b      	lsls	r3, r3, #1
 8014df2:	4413      	add	r3, r2
 8014df4:	00db      	lsls	r3, r3, #3
 8014df6:	4a2e      	ldr	r2, [pc, #184]	; (8014eb0 <etharp_output_to_arp_index+0x124>)
 8014df8:	4413      	add	r3, r2
 8014dfa:	3304      	adds	r3, #4
 8014dfc:	4619      	mov	r1, r3
 8014dfe:	68f8      	ldr	r0, [r7, #12]
 8014e00:	f000 fb4c 	bl	801549c <etharp_request>
 8014e04:	4603      	mov	r3, r0
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d138      	bne.n	8014e7c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014e0a:	79fa      	ldrb	r2, [r7, #7]
 8014e0c:	4928      	ldr	r1, [pc, #160]	; (8014eb0 <etharp_output_to_arp_index+0x124>)
 8014e0e:	4613      	mov	r3, r2
 8014e10:	005b      	lsls	r3, r3, #1
 8014e12:	4413      	add	r3, r2
 8014e14:	00db      	lsls	r3, r3, #3
 8014e16:	440b      	add	r3, r1
 8014e18:	3314      	adds	r3, #20
 8014e1a:	2203      	movs	r2, #3
 8014e1c:	701a      	strb	r2, [r3, #0]
 8014e1e:	e02d      	b.n	8014e7c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014e20:	79fa      	ldrb	r2, [r7, #7]
 8014e22:	4923      	ldr	r1, [pc, #140]	; (8014eb0 <etharp_output_to_arp_index+0x124>)
 8014e24:	4613      	mov	r3, r2
 8014e26:	005b      	lsls	r3, r3, #1
 8014e28:	4413      	add	r3, r2
 8014e2a:	00db      	lsls	r3, r3, #3
 8014e2c:	440b      	add	r3, r1
 8014e2e:	3312      	adds	r3, #18
 8014e30:	881b      	ldrh	r3, [r3, #0]
 8014e32:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014e36:	d321      	bcc.n	8014e7c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014e38:	79fa      	ldrb	r2, [r7, #7]
 8014e3a:	4613      	mov	r3, r2
 8014e3c:	005b      	lsls	r3, r3, #1
 8014e3e:	4413      	add	r3, r2
 8014e40:	00db      	lsls	r3, r3, #3
 8014e42:	4a1b      	ldr	r2, [pc, #108]	; (8014eb0 <etharp_output_to_arp_index+0x124>)
 8014e44:	4413      	add	r3, r2
 8014e46:	1d19      	adds	r1, r3, #4
 8014e48:	79fa      	ldrb	r2, [r7, #7]
 8014e4a:	4613      	mov	r3, r2
 8014e4c:	005b      	lsls	r3, r3, #1
 8014e4e:	4413      	add	r3, r2
 8014e50:	00db      	lsls	r3, r3, #3
 8014e52:	3308      	adds	r3, #8
 8014e54:	4a16      	ldr	r2, [pc, #88]	; (8014eb0 <etharp_output_to_arp_index+0x124>)
 8014e56:	4413      	add	r3, r2
 8014e58:	3304      	adds	r3, #4
 8014e5a:	461a      	mov	r2, r3
 8014e5c:	68f8      	ldr	r0, [r7, #12]
 8014e5e:	f000 fafb 	bl	8015458 <etharp_request_dst>
 8014e62:	4603      	mov	r3, r0
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d109      	bne.n	8014e7c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014e68:	79fa      	ldrb	r2, [r7, #7]
 8014e6a:	4911      	ldr	r1, [pc, #68]	; (8014eb0 <etharp_output_to_arp_index+0x124>)
 8014e6c:	4613      	mov	r3, r2
 8014e6e:	005b      	lsls	r3, r3, #1
 8014e70:	4413      	add	r3, r2
 8014e72:	00db      	lsls	r3, r3, #3
 8014e74:	440b      	add	r3, r1
 8014e76:	3314      	adds	r3, #20
 8014e78:	2203      	movs	r2, #3
 8014e7a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014e7c:	68fb      	ldr	r3, [r7, #12]
 8014e7e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014e82:	79fa      	ldrb	r2, [r7, #7]
 8014e84:	4613      	mov	r3, r2
 8014e86:	005b      	lsls	r3, r3, #1
 8014e88:	4413      	add	r3, r2
 8014e8a:	00db      	lsls	r3, r3, #3
 8014e8c:	3308      	adds	r3, #8
 8014e8e:	4a08      	ldr	r2, [pc, #32]	; (8014eb0 <etharp_output_to_arp_index+0x124>)
 8014e90:	4413      	add	r3, r2
 8014e92:	3304      	adds	r3, #4
 8014e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014e98:	9200      	str	r2, [sp, #0]
 8014e9a:	460a      	mov	r2, r1
 8014e9c:	68b9      	ldr	r1, [r7, #8]
 8014e9e:	68f8      	ldr	r0, [r7, #12]
 8014ea0:	f001 fe40 	bl	8016b24 <ethernet_output>
 8014ea4:	4603      	mov	r3, r0
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3710      	adds	r7, #16
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}
 8014eae:	bf00      	nop
 8014eb0:	20009028 	.word	0x20009028
 8014eb4:	0801aaac 	.word	0x0801aaac
 8014eb8:	0801ac1c 	.word	0x0801ac1c
 8014ebc:	0801ab24 	.word	0x0801ab24

08014ec0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b08a      	sub	sp, #40	; 0x28
 8014ec4:	af02      	add	r7, sp, #8
 8014ec6:	60f8      	str	r0, [r7, #12]
 8014ec8:	60b9      	str	r1, [r7, #8]
 8014eca:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014ed0:	68fb      	ldr	r3, [r7, #12]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d106      	bne.n	8014ee4 <etharp_output+0x24>
 8014ed6:	4b73      	ldr	r3, [pc, #460]	; (80150a4 <etharp_output+0x1e4>)
 8014ed8:	f240 321e 	movw	r2, #798	; 0x31e
 8014edc:	4972      	ldr	r1, [pc, #456]	; (80150a8 <etharp_output+0x1e8>)
 8014ede:	4873      	ldr	r0, [pc, #460]	; (80150ac <etharp_output+0x1ec>)
 8014ee0:	f002 fbfa 	bl	80176d8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d106      	bne.n	8014ef8 <etharp_output+0x38>
 8014eea:	4b6e      	ldr	r3, [pc, #440]	; (80150a4 <etharp_output+0x1e4>)
 8014eec:	f240 321f 	movw	r2, #799	; 0x31f
 8014ef0:	496f      	ldr	r1, [pc, #444]	; (80150b0 <etharp_output+0x1f0>)
 8014ef2:	486e      	ldr	r0, [pc, #440]	; (80150ac <etharp_output+0x1ec>)
 8014ef4:	f002 fbf0 	bl	80176d8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d106      	bne.n	8014f0c <etharp_output+0x4c>
 8014efe:	4b69      	ldr	r3, [pc, #420]	; (80150a4 <etharp_output+0x1e4>)
 8014f00:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014f04:	496b      	ldr	r1, [pc, #428]	; (80150b4 <etharp_output+0x1f4>)
 8014f06:	4869      	ldr	r0, [pc, #420]	; (80150ac <etharp_output+0x1ec>)
 8014f08:	f002 fbe6 	bl	80176d8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	68f9      	ldr	r1, [r7, #12]
 8014f12:	4618      	mov	r0, r3
 8014f14:	f000 fef8 	bl	8015d08 <ip4_addr_isbroadcast_u32>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d002      	beq.n	8014f24 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014f1e:	4b66      	ldr	r3, [pc, #408]	; (80150b8 <etharp_output+0x1f8>)
 8014f20:	61fb      	str	r3, [r7, #28]
 8014f22:	e0af      	b.n	8015084 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014f2c:	2be0      	cmp	r3, #224	; 0xe0
 8014f2e:	d118      	bne.n	8014f62 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014f30:	2301      	movs	r3, #1
 8014f32:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014f34:	2300      	movs	r3, #0
 8014f36:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014f38:	235e      	movs	r3, #94	; 0x5e
 8014f3a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	3301      	adds	r3, #1
 8014f40:	781b      	ldrb	r3, [r3, #0]
 8014f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f46:	b2db      	uxtb	r3, r3
 8014f48:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	3302      	adds	r3, #2
 8014f4e:	781b      	ldrb	r3, [r3, #0]
 8014f50:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	3303      	adds	r3, #3
 8014f56:	781b      	ldrb	r3, [r3, #0]
 8014f58:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014f5a:	f107 0310 	add.w	r3, r7, #16
 8014f5e:	61fb      	str	r3, [r7, #28]
 8014f60:	e090      	b.n	8015084 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	681a      	ldr	r2, [r3, #0]
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	3304      	adds	r3, #4
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	405a      	eors	r2, r3
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	3308      	adds	r3, #8
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	4013      	ands	r3, r2
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d012      	beq.n	8014fa0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014f80:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014f84:	4293      	cmp	r3, r2
 8014f86:	d00b      	beq.n	8014fa0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	330c      	adds	r3, #12
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d003      	beq.n	8014f9a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	330c      	adds	r3, #12
 8014f96:	61bb      	str	r3, [r7, #24]
 8014f98:	e002      	b.n	8014fa0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014f9a:	f06f 0303 	mvn.w	r3, #3
 8014f9e:	e07d      	b.n	801509c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014fa0:	4b46      	ldr	r3, [pc, #280]	; (80150bc <etharp_output+0x1fc>)
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	4619      	mov	r1, r3
 8014fa6:	4a46      	ldr	r2, [pc, #280]	; (80150c0 <etharp_output+0x200>)
 8014fa8:	460b      	mov	r3, r1
 8014faa:	005b      	lsls	r3, r3, #1
 8014fac:	440b      	add	r3, r1
 8014fae:	00db      	lsls	r3, r3, #3
 8014fb0:	4413      	add	r3, r2
 8014fb2:	3314      	adds	r3, #20
 8014fb4:	781b      	ldrb	r3, [r3, #0]
 8014fb6:	2b01      	cmp	r3, #1
 8014fb8:	d925      	bls.n	8015006 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014fba:	4b40      	ldr	r3, [pc, #256]	; (80150bc <etharp_output+0x1fc>)
 8014fbc:	781b      	ldrb	r3, [r3, #0]
 8014fbe:	4619      	mov	r1, r3
 8014fc0:	4a3f      	ldr	r2, [pc, #252]	; (80150c0 <etharp_output+0x200>)
 8014fc2:	460b      	mov	r3, r1
 8014fc4:	005b      	lsls	r3, r3, #1
 8014fc6:	440b      	add	r3, r1
 8014fc8:	00db      	lsls	r3, r3, #3
 8014fca:	4413      	add	r3, r2
 8014fcc:	3308      	adds	r3, #8
 8014fce:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014fd0:	68fa      	ldr	r2, [r7, #12]
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d117      	bne.n	8015006 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014fd6:	69bb      	ldr	r3, [r7, #24]
 8014fd8:	681a      	ldr	r2, [r3, #0]
 8014fda:	4b38      	ldr	r3, [pc, #224]	; (80150bc <etharp_output+0x1fc>)
 8014fdc:	781b      	ldrb	r3, [r3, #0]
 8014fde:	4618      	mov	r0, r3
 8014fe0:	4937      	ldr	r1, [pc, #220]	; (80150c0 <etharp_output+0x200>)
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	005b      	lsls	r3, r3, #1
 8014fe6:	4403      	add	r3, r0
 8014fe8:	00db      	lsls	r3, r3, #3
 8014fea:	440b      	add	r3, r1
 8014fec:	3304      	adds	r3, #4
 8014fee:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d108      	bne.n	8015006 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014ff4:	4b31      	ldr	r3, [pc, #196]	; (80150bc <etharp_output+0x1fc>)
 8014ff6:	781b      	ldrb	r3, [r3, #0]
 8014ff8:	461a      	mov	r2, r3
 8014ffa:	68b9      	ldr	r1, [r7, #8]
 8014ffc:	68f8      	ldr	r0, [r7, #12]
 8014ffe:	f7ff fec5 	bl	8014d8c <etharp_output_to_arp_index>
 8015002:	4603      	mov	r3, r0
 8015004:	e04a      	b.n	801509c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015006:	2300      	movs	r3, #0
 8015008:	75fb      	strb	r3, [r7, #23]
 801500a:	e031      	b.n	8015070 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801500c:	7dfa      	ldrb	r2, [r7, #23]
 801500e:	492c      	ldr	r1, [pc, #176]	; (80150c0 <etharp_output+0x200>)
 8015010:	4613      	mov	r3, r2
 8015012:	005b      	lsls	r3, r3, #1
 8015014:	4413      	add	r3, r2
 8015016:	00db      	lsls	r3, r3, #3
 8015018:	440b      	add	r3, r1
 801501a:	3314      	adds	r3, #20
 801501c:	781b      	ldrb	r3, [r3, #0]
 801501e:	2b01      	cmp	r3, #1
 8015020:	d923      	bls.n	801506a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015022:	7dfa      	ldrb	r2, [r7, #23]
 8015024:	4926      	ldr	r1, [pc, #152]	; (80150c0 <etharp_output+0x200>)
 8015026:	4613      	mov	r3, r2
 8015028:	005b      	lsls	r3, r3, #1
 801502a:	4413      	add	r3, r2
 801502c:	00db      	lsls	r3, r3, #3
 801502e:	440b      	add	r3, r1
 8015030:	3308      	adds	r3, #8
 8015032:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015034:	68fa      	ldr	r2, [r7, #12]
 8015036:	429a      	cmp	r2, r3
 8015038:	d117      	bne.n	801506a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801503a:	69bb      	ldr	r3, [r7, #24]
 801503c:	6819      	ldr	r1, [r3, #0]
 801503e:	7dfa      	ldrb	r2, [r7, #23]
 8015040:	481f      	ldr	r0, [pc, #124]	; (80150c0 <etharp_output+0x200>)
 8015042:	4613      	mov	r3, r2
 8015044:	005b      	lsls	r3, r3, #1
 8015046:	4413      	add	r3, r2
 8015048:	00db      	lsls	r3, r3, #3
 801504a:	4403      	add	r3, r0
 801504c:	3304      	adds	r3, #4
 801504e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015050:	4299      	cmp	r1, r3
 8015052:	d10a      	bne.n	801506a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015054:	4a19      	ldr	r2, [pc, #100]	; (80150bc <etharp_output+0x1fc>)
 8015056:	7dfb      	ldrb	r3, [r7, #23]
 8015058:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801505a:	7dfb      	ldrb	r3, [r7, #23]
 801505c:	461a      	mov	r2, r3
 801505e:	68b9      	ldr	r1, [r7, #8]
 8015060:	68f8      	ldr	r0, [r7, #12]
 8015062:	f7ff fe93 	bl	8014d8c <etharp_output_to_arp_index>
 8015066:	4603      	mov	r3, r0
 8015068:	e018      	b.n	801509c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801506a:	7dfb      	ldrb	r3, [r7, #23]
 801506c:	3301      	adds	r3, #1
 801506e:	75fb      	strb	r3, [r7, #23]
 8015070:	7dfb      	ldrb	r3, [r7, #23]
 8015072:	2b09      	cmp	r3, #9
 8015074:	d9ca      	bls.n	801500c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015076:	68ba      	ldr	r2, [r7, #8]
 8015078:	69b9      	ldr	r1, [r7, #24]
 801507a:	68f8      	ldr	r0, [r7, #12]
 801507c:	f000 f822 	bl	80150c4 <etharp_query>
 8015080:	4603      	mov	r3, r0
 8015082:	e00b      	b.n	801509c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801508a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801508e:	9300      	str	r3, [sp, #0]
 8015090:	69fb      	ldr	r3, [r7, #28]
 8015092:	68b9      	ldr	r1, [r7, #8]
 8015094:	68f8      	ldr	r0, [r7, #12]
 8015096:	f001 fd45 	bl	8016b24 <ethernet_output>
 801509a:	4603      	mov	r3, r0
}
 801509c:	4618      	mov	r0, r3
 801509e:	3720      	adds	r7, #32
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}
 80150a4:	0801aaac 	.word	0x0801aaac
 80150a8:	0801abfc 	.word	0x0801abfc
 80150ac:	0801ab24 	.word	0x0801ab24
 80150b0:	0801ac4c 	.word	0x0801ac4c
 80150b4:	0801abec 	.word	0x0801abec
 80150b8:	0801b270 	.word	0x0801b270
 80150bc:	20009118 	.word	0x20009118
 80150c0:	20009028 	.word	0x20009028

080150c4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b08c      	sub	sp, #48	; 0x30
 80150c8:	af02      	add	r7, sp, #8
 80150ca:	60f8      	str	r0, [r7, #12]
 80150cc:	60b9      	str	r1, [r7, #8]
 80150ce:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	3326      	adds	r3, #38	; 0x26
 80150d4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80150d6:	23ff      	movs	r3, #255	; 0xff
 80150d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80150dc:	2300      	movs	r3, #0
 80150de:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80150e0:	68bb      	ldr	r3, [r7, #8]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	68f9      	ldr	r1, [r7, #12]
 80150e6:	4618      	mov	r0, r3
 80150e8:	f000 fe0e 	bl	8015d08 <ip4_addr_isbroadcast_u32>
 80150ec:	4603      	mov	r3, r0
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d10c      	bne.n	801510c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80150fa:	2be0      	cmp	r3, #224	; 0xe0
 80150fc:	d006      	beq.n	801510c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d003      	beq.n	801510c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d102      	bne.n	8015112 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801510c:	f06f 030f 	mvn.w	r3, #15
 8015110:	e101      	b.n	8015316 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015112:	68fa      	ldr	r2, [r7, #12]
 8015114:	2101      	movs	r1, #1
 8015116:	68b8      	ldr	r0, [r7, #8]
 8015118:	f7ff fb60 	bl	80147dc <etharp_find_entry>
 801511c:	4603      	mov	r3, r0
 801511e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015120:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015124:	2b00      	cmp	r3, #0
 8015126:	da02      	bge.n	801512e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015128:	8a7b      	ldrh	r3, [r7, #18]
 801512a:	b25b      	sxtb	r3, r3
 801512c:	e0f3      	b.n	8015316 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801512e:	8a7b      	ldrh	r3, [r7, #18]
 8015130:	2b7e      	cmp	r3, #126	; 0x7e
 8015132:	d906      	bls.n	8015142 <etharp_query+0x7e>
 8015134:	4b7a      	ldr	r3, [pc, #488]	; (8015320 <etharp_query+0x25c>)
 8015136:	f240 32c1 	movw	r2, #961	; 0x3c1
 801513a:	497a      	ldr	r1, [pc, #488]	; (8015324 <etharp_query+0x260>)
 801513c:	487a      	ldr	r0, [pc, #488]	; (8015328 <etharp_query+0x264>)
 801513e:	f002 facb 	bl	80176d8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015142:	8a7b      	ldrh	r3, [r7, #18]
 8015144:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015146:	7c7a      	ldrb	r2, [r7, #17]
 8015148:	4978      	ldr	r1, [pc, #480]	; (801532c <etharp_query+0x268>)
 801514a:	4613      	mov	r3, r2
 801514c:	005b      	lsls	r3, r3, #1
 801514e:	4413      	add	r3, r2
 8015150:	00db      	lsls	r3, r3, #3
 8015152:	440b      	add	r3, r1
 8015154:	3314      	adds	r3, #20
 8015156:	781b      	ldrb	r3, [r3, #0]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d115      	bne.n	8015188 <etharp_query+0xc4>
    is_new_entry = 1;
 801515c:	2301      	movs	r3, #1
 801515e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015160:	7c7a      	ldrb	r2, [r7, #17]
 8015162:	4972      	ldr	r1, [pc, #456]	; (801532c <etharp_query+0x268>)
 8015164:	4613      	mov	r3, r2
 8015166:	005b      	lsls	r3, r3, #1
 8015168:	4413      	add	r3, r2
 801516a:	00db      	lsls	r3, r3, #3
 801516c:	440b      	add	r3, r1
 801516e:	3314      	adds	r3, #20
 8015170:	2201      	movs	r2, #1
 8015172:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015174:	7c7a      	ldrb	r2, [r7, #17]
 8015176:	496d      	ldr	r1, [pc, #436]	; (801532c <etharp_query+0x268>)
 8015178:	4613      	mov	r3, r2
 801517a:	005b      	lsls	r3, r3, #1
 801517c:	4413      	add	r3, r2
 801517e:	00db      	lsls	r3, r3, #3
 8015180:	440b      	add	r3, r1
 8015182:	3308      	adds	r3, #8
 8015184:	68fa      	ldr	r2, [r7, #12]
 8015186:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015188:	7c7a      	ldrb	r2, [r7, #17]
 801518a:	4968      	ldr	r1, [pc, #416]	; (801532c <etharp_query+0x268>)
 801518c:	4613      	mov	r3, r2
 801518e:	005b      	lsls	r3, r3, #1
 8015190:	4413      	add	r3, r2
 8015192:	00db      	lsls	r3, r3, #3
 8015194:	440b      	add	r3, r1
 8015196:	3314      	adds	r3, #20
 8015198:	781b      	ldrb	r3, [r3, #0]
 801519a:	2b01      	cmp	r3, #1
 801519c:	d011      	beq.n	80151c2 <etharp_query+0xfe>
 801519e:	7c7a      	ldrb	r2, [r7, #17]
 80151a0:	4962      	ldr	r1, [pc, #392]	; (801532c <etharp_query+0x268>)
 80151a2:	4613      	mov	r3, r2
 80151a4:	005b      	lsls	r3, r3, #1
 80151a6:	4413      	add	r3, r2
 80151a8:	00db      	lsls	r3, r3, #3
 80151aa:	440b      	add	r3, r1
 80151ac:	3314      	adds	r3, #20
 80151ae:	781b      	ldrb	r3, [r3, #0]
 80151b0:	2b01      	cmp	r3, #1
 80151b2:	d806      	bhi.n	80151c2 <etharp_query+0xfe>
 80151b4:	4b5a      	ldr	r3, [pc, #360]	; (8015320 <etharp_query+0x25c>)
 80151b6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80151ba:	495d      	ldr	r1, [pc, #372]	; (8015330 <etharp_query+0x26c>)
 80151bc:	485a      	ldr	r0, [pc, #360]	; (8015328 <etharp_query+0x264>)
 80151be:	f002 fa8b 	bl	80176d8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80151c2:	6a3b      	ldr	r3, [r7, #32]
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d102      	bne.n	80151ce <etharp_query+0x10a>
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d10c      	bne.n	80151e8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80151ce:	68b9      	ldr	r1, [r7, #8]
 80151d0:	68f8      	ldr	r0, [r7, #12]
 80151d2:	f000 f963 	bl	801549c <etharp_request>
 80151d6:	4603      	mov	r3, r0
 80151d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d102      	bne.n	80151e8 <etharp_query+0x124>
      return result;
 80151e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80151e6:	e096      	b.n	8015316 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d106      	bne.n	80151fc <etharp_query+0x138>
 80151ee:	4b4c      	ldr	r3, [pc, #304]	; (8015320 <etharp_query+0x25c>)
 80151f0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80151f4:	494f      	ldr	r1, [pc, #316]	; (8015334 <etharp_query+0x270>)
 80151f6:	484c      	ldr	r0, [pc, #304]	; (8015328 <etharp_query+0x264>)
 80151f8:	f002 fa6e 	bl	80176d8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80151fc:	7c7a      	ldrb	r2, [r7, #17]
 80151fe:	494b      	ldr	r1, [pc, #300]	; (801532c <etharp_query+0x268>)
 8015200:	4613      	mov	r3, r2
 8015202:	005b      	lsls	r3, r3, #1
 8015204:	4413      	add	r3, r2
 8015206:	00db      	lsls	r3, r3, #3
 8015208:	440b      	add	r3, r1
 801520a:	3314      	adds	r3, #20
 801520c:	781b      	ldrb	r3, [r3, #0]
 801520e:	2b01      	cmp	r3, #1
 8015210:	d917      	bls.n	8015242 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015212:	4a49      	ldr	r2, [pc, #292]	; (8015338 <etharp_query+0x274>)
 8015214:	7c7b      	ldrb	r3, [r7, #17]
 8015216:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015218:	7c7a      	ldrb	r2, [r7, #17]
 801521a:	4613      	mov	r3, r2
 801521c:	005b      	lsls	r3, r3, #1
 801521e:	4413      	add	r3, r2
 8015220:	00db      	lsls	r3, r3, #3
 8015222:	3308      	adds	r3, #8
 8015224:	4a41      	ldr	r2, [pc, #260]	; (801532c <etharp_query+0x268>)
 8015226:	4413      	add	r3, r2
 8015228:	3304      	adds	r3, #4
 801522a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801522e:	9200      	str	r2, [sp, #0]
 8015230:	697a      	ldr	r2, [r7, #20]
 8015232:	6879      	ldr	r1, [r7, #4]
 8015234:	68f8      	ldr	r0, [r7, #12]
 8015236:	f001 fc75 	bl	8016b24 <ethernet_output>
 801523a:	4603      	mov	r3, r0
 801523c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015240:	e067      	b.n	8015312 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015242:	7c7a      	ldrb	r2, [r7, #17]
 8015244:	4939      	ldr	r1, [pc, #228]	; (801532c <etharp_query+0x268>)
 8015246:	4613      	mov	r3, r2
 8015248:	005b      	lsls	r3, r3, #1
 801524a:	4413      	add	r3, r2
 801524c:	00db      	lsls	r3, r3, #3
 801524e:	440b      	add	r3, r1
 8015250:	3314      	adds	r3, #20
 8015252:	781b      	ldrb	r3, [r3, #0]
 8015254:	2b01      	cmp	r3, #1
 8015256:	d15c      	bne.n	8015312 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015258:	2300      	movs	r3, #0
 801525a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015260:	e01c      	b.n	801529c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015262:	69fb      	ldr	r3, [r7, #28]
 8015264:	895a      	ldrh	r2, [r3, #10]
 8015266:	69fb      	ldr	r3, [r7, #28]
 8015268:	891b      	ldrh	r3, [r3, #8]
 801526a:	429a      	cmp	r2, r3
 801526c:	d10a      	bne.n	8015284 <etharp_query+0x1c0>
 801526e:	69fb      	ldr	r3, [r7, #28]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d006      	beq.n	8015284 <etharp_query+0x1c0>
 8015276:	4b2a      	ldr	r3, [pc, #168]	; (8015320 <etharp_query+0x25c>)
 8015278:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801527c:	492f      	ldr	r1, [pc, #188]	; (801533c <etharp_query+0x278>)
 801527e:	482a      	ldr	r0, [pc, #168]	; (8015328 <etharp_query+0x264>)
 8015280:	f002 fa2a 	bl	80176d8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015284:	69fb      	ldr	r3, [r7, #28]
 8015286:	7b1b      	ldrb	r3, [r3, #12]
 8015288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801528c:	2b00      	cmp	r3, #0
 801528e:	d002      	beq.n	8015296 <etharp_query+0x1d2>
        copy_needed = 1;
 8015290:	2301      	movs	r3, #1
 8015292:	61bb      	str	r3, [r7, #24]
        break;
 8015294:	e005      	b.n	80152a2 <etharp_query+0x1de>
      }
      p = p->next;
 8015296:	69fb      	ldr	r3, [r7, #28]
 8015298:	681b      	ldr	r3, [r3, #0]
 801529a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801529c:	69fb      	ldr	r3, [r7, #28]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d1df      	bne.n	8015262 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80152a2:	69bb      	ldr	r3, [r7, #24]
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d007      	beq.n	80152b8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80152a8:	687a      	ldr	r2, [r7, #4]
 80152aa:	f44f 7120 	mov.w	r1, #640	; 0x280
 80152ae:	200e      	movs	r0, #14
 80152b0:	f7f9 f996 	bl	800e5e0 <pbuf_clone>
 80152b4:	61f8      	str	r0, [r7, #28]
 80152b6:	e004      	b.n	80152c2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80152bc:	69f8      	ldr	r0, [r7, #28]
 80152be:	f7f8 ff31 	bl	800e124 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80152c2:	69fb      	ldr	r3, [r7, #28]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d021      	beq.n	801530c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80152c8:	7c7a      	ldrb	r2, [r7, #17]
 80152ca:	4918      	ldr	r1, [pc, #96]	; (801532c <etharp_query+0x268>)
 80152cc:	4613      	mov	r3, r2
 80152ce:	005b      	lsls	r3, r3, #1
 80152d0:	4413      	add	r3, r2
 80152d2:	00db      	lsls	r3, r3, #3
 80152d4:	440b      	add	r3, r1
 80152d6:	681b      	ldr	r3, [r3, #0]
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d00a      	beq.n	80152f2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80152dc:	7c7a      	ldrb	r2, [r7, #17]
 80152de:	4913      	ldr	r1, [pc, #76]	; (801532c <etharp_query+0x268>)
 80152e0:	4613      	mov	r3, r2
 80152e2:	005b      	lsls	r3, r3, #1
 80152e4:	4413      	add	r3, r2
 80152e6:	00db      	lsls	r3, r3, #3
 80152e8:	440b      	add	r3, r1
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7f8 fe79 	bl	800dfe4 <pbuf_free>
      }
      arp_table[i].q = p;
 80152f2:	7c7a      	ldrb	r2, [r7, #17]
 80152f4:	490d      	ldr	r1, [pc, #52]	; (801532c <etharp_query+0x268>)
 80152f6:	4613      	mov	r3, r2
 80152f8:	005b      	lsls	r3, r3, #1
 80152fa:	4413      	add	r3, r2
 80152fc:	00db      	lsls	r3, r3, #3
 80152fe:	440b      	add	r3, r1
 8015300:	69fa      	ldr	r2, [r7, #28]
 8015302:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015304:	2300      	movs	r3, #0
 8015306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801530a:	e002      	b.n	8015312 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801530c:	23ff      	movs	r3, #255	; 0xff
 801530e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015312:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015316:	4618      	mov	r0, r3
 8015318:	3728      	adds	r7, #40	; 0x28
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}
 801531e:	bf00      	nop
 8015320:	0801aaac 	.word	0x0801aaac
 8015324:	0801ac58 	.word	0x0801ac58
 8015328:	0801ab24 	.word	0x0801ab24
 801532c:	20009028 	.word	0x20009028
 8015330:	0801ac68 	.word	0x0801ac68
 8015334:	0801ac4c 	.word	0x0801ac4c
 8015338:	20009118 	.word	0x20009118
 801533c:	0801ac90 	.word	0x0801ac90

08015340 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b08a      	sub	sp, #40	; 0x28
 8015344:	af02      	add	r7, sp, #8
 8015346:	60f8      	str	r0, [r7, #12]
 8015348:	60b9      	str	r1, [r7, #8]
 801534a:	607a      	str	r2, [r7, #4]
 801534c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801534e:	2300      	movs	r3, #0
 8015350:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d106      	bne.n	8015366 <etharp_raw+0x26>
 8015358:	4b3a      	ldr	r3, [pc, #232]	; (8015444 <etharp_raw+0x104>)
 801535a:	f240 4257 	movw	r2, #1111	; 0x457
 801535e:	493a      	ldr	r1, [pc, #232]	; (8015448 <etharp_raw+0x108>)
 8015360:	483a      	ldr	r0, [pc, #232]	; (801544c <etharp_raw+0x10c>)
 8015362:	f002 f9b9 	bl	80176d8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015366:	f44f 7220 	mov.w	r2, #640	; 0x280
 801536a:	211c      	movs	r1, #28
 801536c:	200e      	movs	r0, #14
 801536e:	f7f8 fb55 	bl	800da1c <pbuf_alloc>
 8015372:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015374:	69bb      	ldr	r3, [r7, #24]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d102      	bne.n	8015380 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801537a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801537e:	e05d      	b.n	801543c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015380:	69bb      	ldr	r3, [r7, #24]
 8015382:	895b      	ldrh	r3, [r3, #10]
 8015384:	2b1b      	cmp	r3, #27
 8015386:	d806      	bhi.n	8015396 <etharp_raw+0x56>
 8015388:	4b2e      	ldr	r3, [pc, #184]	; (8015444 <etharp_raw+0x104>)
 801538a:	f240 4262 	movw	r2, #1122	; 0x462
 801538e:	4930      	ldr	r1, [pc, #192]	; (8015450 <etharp_raw+0x110>)
 8015390:	482e      	ldr	r0, [pc, #184]	; (801544c <etharp_raw+0x10c>)
 8015392:	f002 f9a1 	bl	80176d8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015396:	69bb      	ldr	r3, [r7, #24]
 8015398:	685b      	ldr	r3, [r3, #4]
 801539a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801539c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801539e:	4618      	mov	r0, r3
 80153a0:	f7f7 fac2 	bl	800c928 <lwip_htons>
 80153a4:	4603      	mov	r3, r0
 80153a6:	461a      	mov	r2, r3
 80153a8:	697b      	ldr	r3, [r7, #20]
 80153aa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80153ac:	68fb      	ldr	r3, [r7, #12]
 80153ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80153b2:	2b06      	cmp	r3, #6
 80153b4:	d006      	beq.n	80153c4 <etharp_raw+0x84>
 80153b6:	4b23      	ldr	r3, [pc, #140]	; (8015444 <etharp_raw+0x104>)
 80153b8:	f240 4269 	movw	r2, #1129	; 0x469
 80153bc:	4925      	ldr	r1, [pc, #148]	; (8015454 <etharp_raw+0x114>)
 80153be:	4823      	ldr	r0, [pc, #140]	; (801544c <etharp_raw+0x10c>)
 80153c0:	f002 f98a 	bl	80176d8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80153c4:	697b      	ldr	r3, [r7, #20]
 80153c6:	3308      	adds	r3, #8
 80153c8:	2206      	movs	r2, #6
 80153ca:	6839      	ldr	r1, [r7, #0]
 80153cc:	4618      	mov	r0, r3
 80153ce:	f002 f96d 	bl	80176ac <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80153d2:	697b      	ldr	r3, [r7, #20]
 80153d4:	3312      	adds	r3, #18
 80153d6:	2206      	movs	r2, #6
 80153d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80153da:	4618      	mov	r0, r3
 80153dc:	f002 f966 	bl	80176ac <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80153e0:	697b      	ldr	r3, [r7, #20]
 80153e2:	330e      	adds	r3, #14
 80153e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153e6:	6812      	ldr	r2, [r2, #0]
 80153e8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80153ea:	697b      	ldr	r3, [r7, #20]
 80153ec:	3318      	adds	r3, #24
 80153ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153f0:	6812      	ldr	r2, [r2, #0]
 80153f2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	2200      	movs	r2, #0
 80153f8:	701a      	strb	r2, [r3, #0]
 80153fa:	2200      	movs	r2, #0
 80153fc:	f042 0201 	orr.w	r2, r2, #1
 8015400:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015402:	697b      	ldr	r3, [r7, #20]
 8015404:	2200      	movs	r2, #0
 8015406:	f042 0208 	orr.w	r2, r2, #8
 801540a:	709a      	strb	r2, [r3, #2]
 801540c:	2200      	movs	r2, #0
 801540e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015410:	697b      	ldr	r3, [r7, #20]
 8015412:	2206      	movs	r2, #6
 8015414:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015416:	697b      	ldr	r3, [r7, #20]
 8015418:	2204      	movs	r2, #4
 801541a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801541c:	f640 0306 	movw	r3, #2054	; 0x806
 8015420:	9300      	str	r3, [sp, #0]
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	68ba      	ldr	r2, [r7, #8]
 8015426:	69b9      	ldr	r1, [r7, #24]
 8015428:	68f8      	ldr	r0, [r7, #12]
 801542a:	f001 fb7b 	bl	8016b24 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801542e:	69b8      	ldr	r0, [r7, #24]
 8015430:	f7f8 fdd8 	bl	800dfe4 <pbuf_free>
  p = NULL;
 8015434:	2300      	movs	r3, #0
 8015436:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015438:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801543c:	4618      	mov	r0, r3
 801543e:	3720      	adds	r7, #32
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}
 8015444:	0801aaac 	.word	0x0801aaac
 8015448:	0801abfc 	.word	0x0801abfc
 801544c:	0801ab24 	.word	0x0801ab24
 8015450:	0801acac 	.word	0x0801acac
 8015454:	0801ace0 	.word	0x0801ace0

08015458 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b088      	sub	sp, #32
 801545c:	af04      	add	r7, sp, #16
 801545e:	60f8      	str	r0, [r7, #12]
 8015460:	60b9      	str	r1, [r7, #8]
 8015462:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801546a:	68fb      	ldr	r3, [r7, #12]
 801546c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015474:	2201      	movs	r2, #1
 8015476:	9203      	str	r2, [sp, #12]
 8015478:	68ba      	ldr	r2, [r7, #8]
 801547a:	9202      	str	r2, [sp, #8]
 801547c:	4a06      	ldr	r2, [pc, #24]	; (8015498 <etharp_request_dst+0x40>)
 801547e:	9201      	str	r2, [sp, #4]
 8015480:	9300      	str	r3, [sp, #0]
 8015482:	4603      	mov	r3, r0
 8015484:	687a      	ldr	r2, [r7, #4]
 8015486:	68f8      	ldr	r0, [r7, #12]
 8015488:	f7ff ff5a 	bl	8015340 <etharp_raw>
 801548c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801548e:	4618      	mov	r0, r3
 8015490:	3710      	adds	r7, #16
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
 8015496:	bf00      	nop
 8015498:	0801b278 	.word	0x0801b278

0801549c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801549c:	b580      	push	{r7, lr}
 801549e:	b082      	sub	sp, #8
 80154a0:	af00      	add	r7, sp, #0
 80154a2:	6078      	str	r0, [r7, #4]
 80154a4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80154a6:	4a05      	ldr	r2, [pc, #20]	; (80154bc <etharp_request+0x20>)
 80154a8:	6839      	ldr	r1, [r7, #0]
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f7ff ffd4 	bl	8015458 <etharp_request_dst>
 80154b0:	4603      	mov	r3, r0
}
 80154b2:	4618      	mov	r0, r3
 80154b4:	3708      	adds	r7, #8
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bd80      	pop	{r7, pc}
 80154ba:	bf00      	nop
 80154bc:	0801b270 	.word	0x0801b270

080154c0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80154c0:	b580      	push	{r7, lr}
 80154c2:	b08e      	sub	sp, #56	; 0x38
 80154c4:	af04      	add	r7, sp, #16
 80154c6:	6078      	str	r0, [r7, #4]
 80154c8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80154ca:	4b79      	ldr	r3, [pc, #484]	; (80156b0 <icmp_input+0x1f0>)
 80154cc:	689b      	ldr	r3, [r3, #8]
 80154ce:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80154d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d2:	781b      	ldrb	r3, [r3, #0]
 80154d4:	f003 030f 	and.w	r3, r3, #15
 80154d8:	b2db      	uxtb	r3, r3
 80154da:	009b      	lsls	r3, r3, #2
 80154dc:	b2db      	uxtb	r3, r3
 80154de:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80154e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154e2:	2b13      	cmp	r3, #19
 80154e4:	f240 80cd 	bls.w	8015682 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	895b      	ldrh	r3, [r3, #10]
 80154ec:	2b03      	cmp	r3, #3
 80154ee:	f240 80ca 	bls.w	8015686 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	685b      	ldr	r3, [r3, #4]
 80154f6:	781b      	ldrb	r3, [r3, #0]
 80154f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80154fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015500:	2b00      	cmp	r3, #0
 8015502:	f000 80b7 	beq.w	8015674 <icmp_input+0x1b4>
 8015506:	2b08      	cmp	r3, #8
 8015508:	f040 80b7 	bne.w	801567a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801550c:	4b69      	ldr	r3, [pc, #420]	; (80156b4 <icmp_input+0x1f4>)
 801550e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015510:	4b67      	ldr	r3, [pc, #412]	; (80156b0 <icmp_input+0x1f0>)
 8015512:	695b      	ldr	r3, [r3, #20]
 8015514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015518:	2be0      	cmp	r3, #224	; 0xe0
 801551a:	f000 80bb 	beq.w	8015694 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801551e:	4b64      	ldr	r3, [pc, #400]	; (80156b0 <icmp_input+0x1f0>)
 8015520:	695b      	ldr	r3, [r3, #20]
 8015522:	4a63      	ldr	r2, [pc, #396]	; (80156b0 <icmp_input+0x1f0>)
 8015524:	6812      	ldr	r2, [r2, #0]
 8015526:	4611      	mov	r1, r2
 8015528:	4618      	mov	r0, r3
 801552a:	f000 fbed 	bl	8015d08 <ip4_addr_isbroadcast_u32>
 801552e:	4603      	mov	r3, r0
 8015530:	2b00      	cmp	r3, #0
 8015532:	f040 80b1 	bne.w	8015698 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	891b      	ldrh	r3, [r3, #8]
 801553a:	2b07      	cmp	r3, #7
 801553c:	f240 80a5 	bls.w	801568a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015540:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015542:	330e      	adds	r3, #14
 8015544:	4619      	mov	r1, r3
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f7f8 fcb6 	bl	800deb8 <pbuf_add_header>
 801554c:	4603      	mov	r3, r0
 801554e:	2b00      	cmp	r3, #0
 8015550:	d04b      	beq.n	80155ea <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	891a      	ldrh	r2, [r3, #8]
 8015556:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015558:	4413      	add	r3, r2
 801555a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	891b      	ldrh	r3, [r3, #8]
 8015560:	8b7a      	ldrh	r2, [r7, #26]
 8015562:	429a      	cmp	r2, r3
 8015564:	f0c0 809a 	bcc.w	801569c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8015568:	8b7b      	ldrh	r3, [r7, #26]
 801556a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801556e:	4619      	mov	r1, r3
 8015570:	200e      	movs	r0, #14
 8015572:	f7f8 fa53 	bl	800da1c <pbuf_alloc>
 8015576:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8015578:	697b      	ldr	r3, [r7, #20]
 801557a:	2b00      	cmp	r3, #0
 801557c:	f000 8090 	beq.w	80156a0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	895b      	ldrh	r3, [r3, #10]
 8015584:	461a      	mov	r2, r3
 8015586:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015588:	3308      	adds	r3, #8
 801558a:	429a      	cmp	r2, r3
 801558c:	d203      	bcs.n	8015596 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801558e:	6978      	ldr	r0, [r7, #20]
 8015590:	f7f8 fd28 	bl	800dfe4 <pbuf_free>
          goto icmperr;
 8015594:	e085      	b.n	80156a2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	685b      	ldr	r3, [r3, #4]
 801559a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801559c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801559e:	4618      	mov	r0, r3
 80155a0:	f002 f884 	bl	80176ac <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80155a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155a6:	4619      	mov	r1, r3
 80155a8:	6978      	ldr	r0, [r7, #20]
 80155aa:	f7f8 fc95 	bl	800ded8 <pbuf_remove_header>
 80155ae:	4603      	mov	r3, r0
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d009      	beq.n	80155c8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80155b4:	4b40      	ldr	r3, [pc, #256]	; (80156b8 <icmp_input+0x1f8>)
 80155b6:	22b6      	movs	r2, #182	; 0xb6
 80155b8:	4940      	ldr	r1, [pc, #256]	; (80156bc <icmp_input+0x1fc>)
 80155ba:	4841      	ldr	r0, [pc, #260]	; (80156c0 <icmp_input+0x200>)
 80155bc:	f002 f88c 	bl	80176d8 <iprintf>
          pbuf_free(r);
 80155c0:	6978      	ldr	r0, [r7, #20]
 80155c2:	f7f8 fd0f 	bl	800dfe4 <pbuf_free>
          goto icmperr;
 80155c6:	e06c      	b.n	80156a2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80155c8:	6879      	ldr	r1, [r7, #4]
 80155ca:	6978      	ldr	r0, [r7, #20]
 80155cc:	f7f8 fe32 	bl	800e234 <pbuf_copy>
 80155d0:	4603      	mov	r3, r0
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d003      	beq.n	80155de <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80155d6:	6978      	ldr	r0, [r7, #20]
 80155d8:	f7f8 fd04 	bl	800dfe4 <pbuf_free>
          goto icmperr;
 80155dc:	e061      	b.n	80156a2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80155de:	6878      	ldr	r0, [r7, #4]
 80155e0:	f7f8 fd00 	bl	800dfe4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80155e4:	697b      	ldr	r3, [r7, #20]
 80155e6:	607b      	str	r3, [r7, #4]
 80155e8:	e00f      	b.n	801560a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80155ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80155ec:	330e      	adds	r3, #14
 80155ee:	4619      	mov	r1, r3
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f7f8 fc71 	bl	800ded8 <pbuf_remove_header>
 80155f6:	4603      	mov	r3, r0
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d006      	beq.n	801560a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80155fc:	4b2e      	ldr	r3, [pc, #184]	; (80156b8 <icmp_input+0x1f8>)
 80155fe:	22c7      	movs	r2, #199	; 0xc7
 8015600:	4930      	ldr	r1, [pc, #192]	; (80156c4 <icmp_input+0x204>)
 8015602:	482f      	ldr	r0, [pc, #188]	; (80156c0 <icmp_input+0x200>)
 8015604:	f002 f868 	bl	80176d8 <iprintf>
          goto icmperr;
 8015608:	e04b      	b.n	80156a2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015610:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015612:	4619      	mov	r1, r3
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f7f8 fc4f 	bl	800deb8 <pbuf_add_header>
 801561a:	4603      	mov	r3, r0
 801561c:	2b00      	cmp	r3, #0
 801561e:	d12b      	bne.n	8015678 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	685b      	ldr	r3, [r3, #4]
 8015624:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015626:	69fb      	ldr	r3, [r7, #28]
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801562e:	4b20      	ldr	r3, [pc, #128]	; (80156b0 <icmp_input+0x1f0>)
 8015630:	691a      	ldr	r2, [r3, #16]
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015636:	693b      	ldr	r3, [r7, #16]
 8015638:	2200      	movs	r2, #0
 801563a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801563c:	693b      	ldr	r3, [r7, #16]
 801563e:	2200      	movs	r2, #0
 8015640:	709a      	strb	r2, [r3, #2]
 8015642:	2200      	movs	r2, #0
 8015644:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	22ff      	movs	r2, #255	; 0xff
 801564a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	2200      	movs	r2, #0
 8015650:	729a      	strb	r2, [r3, #10]
 8015652:	2200      	movs	r2, #0
 8015654:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	9302      	str	r3, [sp, #8]
 801565a:	2301      	movs	r3, #1
 801565c:	9301      	str	r3, [sp, #4]
 801565e:	2300      	movs	r3, #0
 8015660:	9300      	str	r3, [sp, #0]
 8015662:	23ff      	movs	r3, #255	; 0xff
 8015664:	2200      	movs	r2, #0
 8015666:	69f9      	ldr	r1, [r7, #28]
 8015668:	6878      	ldr	r0, [r7, #4]
 801566a:	f000 fa75 	bl	8015b58 <ip4_output_if>
 801566e:	4603      	mov	r3, r0
 8015670:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015672:	e001      	b.n	8015678 <icmp_input+0x1b8>
      break;
 8015674:	bf00      	nop
 8015676:	e000      	b.n	801567a <icmp_input+0x1ba>
      break;
 8015678:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801567a:	6878      	ldr	r0, [r7, #4]
 801567c:	f7f8 fcb2 	bl	800dfe4 <pbuf_free>
  return;
 8015680:	e013      	b.n	80156aa <icmp_input+0x1ea>
    goto lenerr;
 8015682:	bf00      	nop
 8015684:	e002      	b.n	801568c <icmp_input+0x1cc>
    goto lenerr;
 8015686:	bf00      	nop
 8015688:	e000      	b.n	801568c <icmp_input+0x1cc>
        goto lenerr;
 801568a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801568c:	6878      	ldr	r0, [r7, #4]
 801568e:	f7f8 fca9 	bl	800dfe4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015692:	e00a      	b.n	80156aa <icmp_input+0x1ea>
        goto icmperr;
 8015694:	bf00      	nop
 8015696:	e004      	b.n	80156a2 <icmp_input+0x1e2>
        goto icmperr;
 8015698:	bf00      	nop
 801569a:	e002      	b.n	80156a2 <icmp_input+0x1e2>
          goto icmperr;
 801569c:	bf00      	nop
 801569e:	e000      	b.n	80156a2 <icmp_input+0x1e2>
          goto icmperr;
 80156a0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80156a2:	6878      	ldr	r0, [r7, #4]
 80156a4:	f7f8 fc9e 	bl	800dfe4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80156a8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80156aa:	3728      	adds	r7, #40	; 0x28
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}
 80156b0:	20005a58 	.word	0x20005a58
 80156b4:	20005a6c 	.word	0x20005a6c
 80156b8:	0801ad24 	.word	0x0801ad24
 80156bc:	0801ad5c 	.word	0x0801ad5c
 80156c0:	0801ad94 	.word	0x0801ad94
 80156c4:	0801adbc 	.word	0x0801adbc

080156c8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b082      	sub	sp, #8
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	6078      	str	r0, [r7, #4]
 80156d0:	460b      	mov	r3, r1
 80156d2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80156d4:	78fb      	ldrb	r3, [r7, #3]
 80156d6:	461a      	mov	r2, r3
 80156d8:	2103      	movs	r1, #3
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f000 f814 	bl	8015708 <icmp_send_response>
}
 80156e0:	bf00      	nop
 80156e2:	3708      	adds	r7, #8
 80156e4:	46bd      	mov	sp, r7
 80156e6:	bd80      	pop	{r7, pc}

080156e8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b082      	sub	sp, #8
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
 80156f0:	460b      	mov	r3, r1
 80156f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80156f4:	78fb      	ldrb	r3, [r7, #3]
 80156f6:	461a      	mov	r2, r3
 80156f8:	210b      	movs	r1, #11
 80156fa:	6878      	ldr	r0, [r7, #4]
 80156fc:	f000 f804 	bl	8015708 <icmp_send_response>
}
 8015700:	bf00      	nop
 8015702:	3708      	adds	r7, #8
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}

08015708 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b08c      	sub	sp, #48	; 0x30
 801570c:	af04      	add	r7, sp, #16
 801570e:	6078      	str	r0, [r7, #4]
 8015710:	460b      	mov	r3, r1
 8015712:	70fb      	strb	r3, [r7, #3]
 8015714:	4613      	mov	r3, r2
 8015716:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015718:	f44f 7220 	mov.w	r2, #640	; 0x280
 801571c:	2124      	movs	r1, #36	; 0x24
 801571e:	2022      	movs	r0, #34	; 0x22
 8015720:	f7f8 f97c 	bl	800da1c <pbuf_alloc>
 8015724:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015726:	69fb      	ldr	r3, [r7, #28]
 8015728:	2b00      	cmp	r3, #0
 801572a:	d04c      	beq.n	80157c6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801572c:	69fb      	ldr	r3, [r7, #28]
 801572e:	895b      	ldrh	r3, [r3, #10]
 8015730:	2b23      	cmp	r3, #35	; 0x23
 8015732:	d806      	bhi.n	8015742 <icmp_send_response+0x3a>
 8015734:	4b26      	ldr	r3, [pc, #152]	; (80157d0 <icmp_send_response+0xc8>)
 8015736:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801573a:	4926      	ldr	r1, [pc, #152]	; (80157d4 <icmp_send_response+0xcc>)
 801573c:	4826      	ldr	r0, [pc, #152]	; (80157d8 <icmp_send_response+0xd0>)
 801573e:	f001 ffcb 	bl	80176d8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	685b      	ldr	r3, [r3, #4]
 8015746:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015748:	69fb      	ldr	r3, [r7, #28]
 801574a:	685b      	ldr	r3, [r3, #4]
 801574c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801574e:	697b      	ldr	r3, [r7, #20]
 8015750:	78fa      	ldrb	r2, [r7, #3]
 8015752:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015754:	697b      	ldr	r3, [r7, #20]
 8015756:	78ba      	ldrb	r2, [r7, #2]
 8015758:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	2200      	movs	r2, #0
 801575e:	711a      	strb	r2, [r3, #4]
 8015760:	2200      	movs	r2, #0
 8015762:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015764:	697b      	ldr	r3, [r7, #20]
 8015766:	2200      	movs	r2, #0
 8015768:	719a      	strb	r2, [r3, #6]
 801576a:	2200      	movs	r2, #0
 801576c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801576e:	69fb      	ldr	r3, [r7, #28]
 8015770:	685b      	ldr	r3, [r3, #4]
 8015772:	f103 0008 	add.w	r0, r3, #8
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	685b      	ldr	r3, [r3, #4]
 801577a:	221c      	movs	r2, #28
 801577c:	4619      	mov	r1, r3
 801577e:	f001 ff95 	bl	80176ac <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015782:	69bb      	ldr	r3, [r7, #24]
 8015784:	68db      	ldr	r3, [r3, #12]
 8015786:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015788:	f107 030c 	add.w	r3, r7, #12
 801578c:	4618      	mov	r0, r3
 801578e:	f000 f825 	bl	80157dc <ip4_route>
 8015792:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d011      	beq.n	80157be <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801579a:	697b      	ldr	r3, [r7, #20]
 801579c:	2200      	movs	r2, #0
 801579e:	709a      	strb	r2, [r3, #2]
 80157a0:	2200      	movs	r2, #0
 80157a2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80157a4:	f107 020c 	add.w	r2, r7, #12
 80157a8:	693b      	ldr	r3, [r7, #16]
 80157aa:	9302      	str	r3, [sp, #8]
 80157ac:	2301      	movs	r3, #1
 80157ae:	9301      	str	r3, [sp, #4]
 80157b0:	2300      	movs	r3, #0
 80157b2:	9300      	str	r3, [sp, #0]
 80157b4:	23ff      	movs	r3, #255	; 0xff
 80157b6:	2100      	movs	r1, #0
 80157b8:	69f8      	ldr	r0, [r7, #28]
 80157ba:	f000 f9cd 	bl	8015b58 <ip4_output_if>
  }
  pbuf_free(q);
 80157be:	69f8      	ldr	r0, [r7, #28]
 80157c0:	f7f8 fc10 	bl	800dfe4 <pbuf_free>
 80157c4:	e000      	b.n	80157c8 <icmp_send_response+0xc0>
    return;
 80157c6:	bf00      	nop
}
 80157c8:	3720      	adds	r7, #32
 80157ca:	46bd      	mov	sp, r7
 80157cc:	bd80      	pop	{r7, pc}
 80157ce:	bf00      	nop
 80157d0:	0801ad24 	.word	0x0801ad24
 80157d4:	0801adf0 	.word	0x0801adf0
 80157d8:	0801ad94 	.word	0x0801ad94

080157dc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80157dc:	b480      	push	{r7}
 80157de:	b085      	sub	sp, #20
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80157e4:	4b33      	ldr	r3, [pc, #204]	; (80158b4 <ip4_route+0xd8>)
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	60fb      	str	r3, [r7, #12]
 80157ea:	e036      	b.n	801585a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80157f2:	f003 0301 	and.w	r3, r3, #1
 80157f6:	b2db      	uxtb	r3, r3
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d02b      	beq.n	8015854 <ip4_route+0x78>
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015802:	089b      	lsrs	r3, r3, #2
 8015804:	f003 0301 	and.w	r3, r3, #1
 8015808:	b2db      	uxtb	r3, r3
 801580a:	2b00      	cmp	r3, #0
 801580c:	d022      	beq.n	8015854 <ip4_route+0x78>
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	3304      	adds	r3, #4
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d01d      	beq.n	8015854 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	681a      	ldr	r2, [r3, #0]
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	3304      	adds	r3, #4
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	405a      	eors	r2, r3
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	3308      	adds	r3, #8
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	4013      	ands	r3, r2
 801582c:	2b00      	cmp	r3, #0
 801582e:	d101      	bne.n	8015834 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	e038      	b.n	80158a6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801583a:	f003 0302 	and.w	r3, r3, #2
 801583e:	2b00      	cmp	r3, #0
 8015840:	d108      	bne.n	8015854 <ip4_route+0x78>
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	681a      	ldr	r2, [r3, #0]
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	330c      	adds	r3, #12
 801584a:	681b      	ldr	r3, [r3, #0]
 801584c:	429a      	cmp	r2, r3
 801584e:	d101      	bne.n	8015854 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	e028      	b.n	80158a6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	60fb      	str	r3, [r7, #12]
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d1c5      	bne.n	80157ec <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015860:	4b15      	ldr	r3, [pc, #84]	; (80158b8 <ip4_route+0xdc>)
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d01a      	beq.n	801589e <ip4_route+0xc2>
 8015868:	4b13      	ldr	r3, [pc, #76]	; (80158b8 <ip4_route+0xdc>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015870:	f003 0301 	and.w	r3, r3, #1
 8015874:	2b00      	cmp	r3, #0
 8015876:	d012      	beq.n	801589e <ip4_route+0xc2>
 8015878:	4b0f      	ldr	r3, [pc, #60]	; (80158b8 <ip4_route+0xdc>)
 801587a:	681b      	ldr	r3, [r3, #0]
 801587c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015880:	f003 0304 	and.w	r3, r3, #4
 8015884:	2b00      	cmp	r3, #0
 8015886:	d00a      	beq.n	801589e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015888:	4b0b      	ldr	r3, [pc, #44]	; (80158b8 <ip4_route+0xdc>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	3304      	adds	r3, #4
 801588e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015890:	2b00      	cmp	r3, #0
 8015892:	d004      	beq.n	801589e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	681b      	ldr	r3, [r3, #0]
 8015898:	b2db      	uxtb	r3, r3
 801589a:	2b7f      	cmp	r3, #127	; 0x7f
 801589c:	d101      	bne.n	80158a2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801589e:	2300      	movs	r3, #0
 80158a0:	e001      	b.n	80158a6 <ip4_route+0xca>
  }

  return netif_default;
 80158a2:	4b05      	ldr	r3, [pc, #20]	; (80158b8 <ip4_route+0xdc>)
 80158a4:	681b      	ldr	r3, [r3, #0]
}
 80158a6:	4618      	mov	r0, r3
 80158a8:	3714      	adds	r7, #20
 80158aa:	46bd      	mov	sp, r7
 80158ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b0:	4770      	bx	lr
 80158b2:	bf00      	nop
 80158b4:	20008fbc 	.word	0x20008fbc
 80158b8:	20008fc0 	.word	0x20008fc0

080158bc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b082      	sub	sp, #8
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80158ca:	f003 0301 	and.w	r3, r3, #1
 80158ce:	b2db      	uxtb	r3, r3
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d016      	beq.n	8015902 <ip4_input_accept+0x46>
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	3304      	adds	r3, #4
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d011      	beq.n	8015902 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80158de:	4b0b      	ldr	r3, [pc, #44]	; (801590c <ip4_input_accept+0x50>)
 80158e0:	695a      	ldr	r2, [r3, #20]
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	3304      	adds	r3, #4
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	429a      	cmp	r2, r3
 80158ea:	d008      	beq.n	80158fe <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80158ec:	4b07      	ldr	r3, [pc, #28]	; (801590c <ip4_input_accept+0x50>)
 80158ee:	695b      	ldr	r3, [r3, #20]
 80158f0:	6879      	ldr	r1, [r7, #4]
 80158f2:	4618      	mov	r0, r3
 80158f4:	f000 fa08 	bl	8015d08 <ip4_addr_isbroadcast_u32>
 80158f8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d001      	beq.n	8015902 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80158fe:	2301      	movs	r3, #1
 8015900:	e000      	b.n	8015904 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015902:	2300      	movs	r3, #0
}
 8015904:	4618      	mov	r0, r3
 8015906:	3708      	adds	r7, #8
 8015908:	46bd      	mov	sp, r7
 801590a:	bd80      	pop	{r7, pc}
 801590c:	20005a58 	.word	0x20005a58

08015910 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015910:	b580      	push	{r7, lr}
 8015912:	b086      	sub	sp, #24
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
 8015918:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	685b      	ldr	r3, [r3, #4]
 801591e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015920:	697b      	ldr	r3, [r7, #20]
 8015922:	781b      	ldrb	r3, [r3, #0]
 8015924:	091b      	lsrs	r3, r3, #4
 8015926:	b2db      	uxtb	r3, r3
 8015928:	2b04      	cmp	r3, #4
 801592a:	d004      	beq.n	8015936 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f7f8 fb59 	bl	800dfe4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015932:	2300      	movs	r3, #0
 8015934:	e107      	b.n	8015b46 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8015936:	697b      	ldr	r3, [r7, #20]
 8015938:	781b      	ldrb	r3, [r3, #0]
 801593a:	f003 030f 	and.w	r3, r3, #15
 801593e:	b2db      	uxtb	r3, r3
 8015940:	009b      	lsls	r3, r3, #2
 8015942:	b2db      	uxtb	r3, r3
 8015944:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015946:	697b      	ldr	r3, [r7, #20]
 8015948:	885b      	ldrh	r3, [r3, #2]
 801594a:	b29b      	uxth	r3, r3
 801594c:	4618      	mov	r0, r3
 801594e:	f7f6 ffeb 	bl	800c928 <lwip_htons>
 8015952:	4603      	mov	r3, r0
 8015954:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	891b      	ldrh	r3, [r3, #8]
 801595a:	89ba      	ldrh	r2, [r7, #12]
 801595c:	429a      	cmp	r2, r3
 801595e:	d204      	bcs.n	801596a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015960:	89bb      	ldrh	r3, [r7, #12]
 8015962:	4619      	mov	r1, r3
 8015964:	6878      	ldr	r0, [r7, #4]
 8015966:	f7f8 f9b7 	bl	800dcd8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	895b      	ldrh	r3, [r3, #10]
 801596e:	89fa      	ldrh	r2, [r7, #14]
 8015970:	429a      	cmp	r2, r3
 8015972:	d807      	bhi.n	8015984 <ip4_input+0x74>
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	891b      	ldrh	r3, [r3, #8]
 8015978:	89ba      	ldrh	r2, [r7, #12]
 801597a:	429a      	cmp	r2, r3
 801597c:	d802      	bhi.n	8015984 <ip4_input+0x74>
 801597e:	89fb      	ldrh	r3, [r7, #14]
 8015980:	2b13      	cmp	r3, #19
 8015982:	d804      	bhi.n	801598e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015984:	6878      	ldr	r0, [r7, #4]
 8015986:	f7f8 fb2d 	bl	800dfe4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801598a:	2300      	movs	r3, #0
 801598c:	e0db      	b.n	8015b46 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	691b      	ldr	r3, [r3, #16]
 8015992:	4a6f      	ldr	r2, [pc, #444]	; (8015b50 <ip4_input+0x240>)
 8015994:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	68db      	ldr	r3, [r3, #12]
 801599a:	4a6d      	ldr	r2, [pc, #436]	; (8015b50 <ip4_input+0x240>)
 801599c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801599e:	4b6c      	ldr	r3, [pc, #432]	; (8015b50 <ip4_input+0x240>)
 80159a0:	695b      	ldr	r3, [r3, #20]
 80159a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80159a6:	2be0      	cmp	r3, #224	; 0xe0
 80159a8:	d112      	bne.n	80159d0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80159aa:	683b      	ldr	r3, [r7, #0]
 80159ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80159b0:	f003 0301 	and.w	r3, r3, #1
 80159b4:	b2db      	uxtb	r3, r3
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d007      	beq.n	80159ca <ip4_input+0xba>
 80159ba:	683b      	ldr	r3, [r7, #0]
 80159bc:	3304      	adds	r3, #4
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d002      	beq.n	80159ca <ip4_input+0xba>
      netif = inp;
 80159c4:	683b      	ldr	r3, [r7, #0]
 80159c6:	613b      	str	r3, [r7, #16]
 80159c8:	e02a      	b.n	8015a20 <ip4_input+0x110>
    } else {
      netif = NULL;
 80159ca:	2300      	movs	r3, #0
 80159cc:	613b      	str	r3, [r7, #16]
 80159ce:	e027      	b.n	8015a20 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80159d0:	6838      	ldr	r0, [r7, #0]
 80159d2:	f7ff ff73 	bl	80158bc <ip4_input_accept>
 80159d6:	4603      	mov	r3, r0
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d002      	beq.n	80159e2 <ip4_input+0xd2>
      netif = inp;
 80159dc:	683b      	ldr	r3, [r7, #0]
 80159de:	613b      	str	r3, [r7, #16]
 80159e0:	e01e      	b.n	8015a20 <ip4_input+0x110>
    } else {
      netif = NULL;
 80159e2:	2300      	movs	r3, #0
 80159e4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80159e6:	4b5a      	ldr	r3, [pc, #360]	; (8015b50 <ip4_input+0x240>)
 80159e8:	695b      	ldr	r3, [r3, #20]
 80159ea:	b2db      	uxtb	r3, r3
 80159ec:	2b7f      	cmp	r3, #127	; 0x7f
 80159ee:	d017      	beq.n	8015a20 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80159f0:	4b58      	ldr	r3, [pc, #352]	; (8015b54 <ip4_input+0x244>)
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	613b      	str	r3, [r7, #16]
 80159f6:	e00e      	b.n	8015a16 <ip4_input+0x106>
          if (netif == inp) {
 80159f8:	693a      	ldr	r2, [r7, #16]
 80159fa:	683b      	ldr	r3, [r7, #0]
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d006      	beq.n	8015a0e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015a00:	6938      	ldr	r0, [r7, #16]
 8015a02:	f7ff ff5b 	bl	80158bc <ip4_input_accept>
 8015a06:	4603      	mov	r3, r0
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d108      	bne.n	8015a1e <ip4_input+0x10e>
 8015a0c:	e000      	b.n	8015a10 <ip4_input+0x100>
            continue;
 8015a0e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015a10:	693b      	ldr	r3, [r7, #16]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	613b      	str	r3, [r7, #16]
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d1ed      	bne.n	80159f8 <ip4_input+0xe8>
 8015a1c:	e000      	b.n	8015a20 <ip4_input+0x110>
            break;
 8015a1e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015a20:	4b4b      	ldr	r3, [pc, #300]	; (8015b50 <ip4_input+0x240>)
 8015a22:	691b      	ldr	r3, [r3, #16]
 8015a24:	6839      	ldr	r1, [r7, #0]
 8015a26:	4618      	mov	r0, r3
 8015a28:	f000 f96e 	bl	8015d08 <ip4_addr_isbroadcast_u32>
 8015a2c:	4603      	mov	r3, r0
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d105      	bne.n	8015a3e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015a32:	4b47      	ldr	r3, [pc, #284]	; (8015b50 <ip4_input+0x240>)
 8015a34:	691b      	ldr	r3, [r3, #16]
 8015a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015a3a:	2be0      	cmp	r3, #224	; 0xe0
 8015a3c:	d104      	bne.n	8015a48 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015a3e:	6878      	ldr	r0, [r7, #4]
 8015a40:	f7f8 fad0 	bl	800dfe4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015a44:	2300      	movs	r3, #0
 8015a46:	e07e      	b.n	8015b46 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015a48:	693b      	ldr	r3, [r7, #16]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d104      	bne.n	8015a58 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015a4e:	6878      	ldr	r0, [r7, #4]
 8015a50:	f7f8 fac8 	bl	800dfe4 <pbuf_free>
    return ERR_OK;
 8015a54:	2300      	movs	r3, #0
 8015a56:	e076      	b.n	8015b46 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	88db      	ldrh	r3, [r3, #6]
 8015a5c:	b29b      	uxth	r3, r3
 8015a5e:	461a      	mov	r2, r3
 8015a60:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015a64:	4013      	ands	r3, r2
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d00b      	beq.n	8015a82 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015a6a:	6878      	ldr	r0, [r7, #4]
 8015a6c:	f000 fc92 	bl	8016394 <ip4_reass>
 8015a70:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d101      	bne.n	8015a7c <ip4_input+0x16c>
      return ERR_OK;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	e064      	b.n	8015b46 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	685b      	ldr	r3, [r3, #4]
 8015a80:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015a82:	4a33      	ldr	r2, [pc, #204]	; (8015b50 <ip4_input+0x240>)
 8015a84:	693b      	ldr	r3, [r7, #16]
 8015a86:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015a88:	4a31      	ldr	r2, [pc, #196]	; (8015b50 <ip4_input+0x240>)
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015a8e:	4a30      	ldr	r2, [pc, #192]	; (8015b50 <ip4_input+0x240>)
 8015a90:	697b      	ldr	r3, [r7, #20]
 8015a92:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015a94:	697b      	ldr	r3, [r7, #20]
 8015a96:	781b      	ldrb	r3, [r3, #0]
 8015a98:	f003 030f 	and.w	r3, r3, #15
 8015a9c:	b2db      	uxtb	r3, r3
 8015a9e:	009b      	lsls	r3, r3, #2
 8015aa0:	b2db      	uxtb	r3, r3
 8015aa2:	b29a      	uxth	r2, r3
 8015aa4:	4b2a      	ldr	r3, [pc, #168]	; (8015b50 <ip4_input+0x240>)
 8015aa6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015aa8:	89fb      	ldrh	r3, [r7, #14]
 8015aaa:	4619      	mov	r1, r3
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f7f8 fa13 	bl	800ded8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015ab2:	697b      	ldr	r3, [r7, #20]
 8015ab4:	7a5b      	ldrb	r3, [r3, #9]
 8015ab6:	2b11      	cmp	r3, #17
 8015ab8:	d006      	beq.n	8015ac8 <ip4_input+0x1b8>
 8015aba:	2b11      	cmp	r3, #17
 8015abc:	dc13      	bgt.n	8015ae6 <ip4_input+0x1d6>
 8015abe:	2b01      	cmp	r3, #1
 8015ac0:	d00c      	beq.n	8015adc <ip4_input+0x1cc>
 8015ac2:	2b06      	cmp	r3, #6
 8015ac4:	d005      	beq.n	8015ad2 <ip4_input+0x1c2>
 8015ac6:	e00e      	b.n	8015ae6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015ac8:	6839      	ldr	r1, [r7, #0]
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	f7fe f90e 	bl	8013cec <udp_input>
        break;
 8015ad0:	e026      	b.n	8015b20 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015ad2:	6839      	ldr	r1, [r7, #0]
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f7fa f94f 	bl	800fd78 <tcp_input>
        break;
 8015ada:	e021      	b.n	8015b20 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015adc:	6839      	ldr	r1, [r7, #0]
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f7ff fcee 	bl	80154c0 <icmp_input>
        break;
 8015ae4:	e01c      	b.n	8015b20 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015ae6:	4b1a      	ldr	r3, [pc, #104]	; (8015b50 <ip4_input+0x240>)
 8015ae8:	695b      	ldr	r3, [r3, #20]
 8015aea:	6939      	ldr	r1, [r7, #16]
 8015aec:	4618      	mov	r0, r3
 8015aee:	f000 f90b 	bl	8015d08 <ip4_addr_isbroadcast_u32>
 8015af2:	4603      	mov	r3, r0
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d10f      	bne.n	8015b18 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015af8:	4b15      	ldr	r3, [pc, #84]	; (8015b50 <ip4_input+0x240>)
 8015afa:	695b      	ldr	r3, [r3, #20]
 8015afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015b00:	2be0      	cmp	r3, #224	; 0xe0
 8015b02:	d009      	beq.n	8015b18 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015b04:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015b08:	4619      	mov	r1, r3
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f7f8 fa57 	bl	800dfbe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015b10:	2102      	movs	r1, #2
 8015b12:	6878      	ldr	r0, [r7, #4]
 8015b14:	f7ff fdd8 	bl	80156c8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f7f8 fa63 	bl	800dfe4 <pbuf_free>
        break;
 8015b1e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015b20:	4b0b      	ldr	r3, [pc, #44]	; (8015b50 <ip4_input+0x240>)
 8015b22:	2200      	movs	r2, #0
 8015b24:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015b26:	4b0a      	ldr	r3, [pc, #40]	; (8015b50 <ip4_input+0x240>)
 8015b28:	2200      	movs	r2, #0
 8015b2a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015b2c:	4b08      	ldr	r3, [pc, #32]	; (8015b50 <ip4_input+0x240>)
 8015b2e:	2200      	movs	r2, #0
 8015b30:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015b32:	4b07      	ldr	r3, [pc, #28]	; (8015b50 <ip4_input+0x240>)
 8015b34:	2200      	movs	r2, #0
 8015b36:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015b38:	4b05      	ldr	r3, [pc, #20]	; (8015b50 <ip4_input+0x240>)
 8015b3a:	2200      	movs	r2, #0
 8015b3c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015b3e:	4b04      	ldr	r3, [pc, #16]	; (8015b50 <ip4_input+0x240>)
 8015b40:	2200      	movs	r2, #0
 8015b42:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015b44:	2300      	movs	r3, #0
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	3718      	adds	r7, #24
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	bd80      	pop	{r7, pc}
 8015b4e:	bf00      	nop
 8015b50:	20005a58 	.word	0x20005a58
 8015b54:	20008fbc 	.word	0x20008fbc

08015b58 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b08a      	sub	sp, #40	; 0x28
 8015b5c:	af04      	add	r7, sp, #16
 8015b5e:	60f8      	str	r0, [r7, #12]
 8015b60:	60b9      	str	r1, [r7, #8]
 8015b62:	607a      	str	r2, [r7, #4]
 8015b64:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d009      	beq.n	8015b84 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d003      	beq.n	8015b7e <ip4_output_if+0x26>
 8015b76:	68bb      	ldr	r3, [r7, #8]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d102      	bne.n	8015b84 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b80:	3304      	adds	r3, #4
 8015b82:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015b84:	78fa      	ldrb	r2, [r7, #3]
 8015b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b88:	9302      	str	r3, [sp, #8]
 8015b8a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015b8e:	9301      	str	r3, [sp, #4]
 8015b90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b94:	9300      	str	r3, [sp, #0]
 8015b96:	4613      	mov	r3, r2
 8015b98:	687a      	ldr	r2, [r7, #4]
 8015b9a:	6979      	ldr	r1, [r7, #20]
 8015b9c:	68f8      	ldr	r0, [r7, #12]
 8015b9e:	f000 f805 	bl	8015bac <ip4_output_if_src>
 8015ba2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3718      	adds	r7, #24
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}

08015bac <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b088      	sub	sp, #32
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	60b9      	str	r1, [r7, #8]
 8015bb6:	607a      	str	r2, [r7, #4]
 8015bb8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	7b9b      	ldrb	r3, [r3, #14]
 8015bbe:	2b01      	cmp	r3, #1
 8015bc0:	d006      	beq.n	8015bd0 <ip4_output_if_src+0x24>
 8015bc2:	4b4b      	ldr	r3, [pc, #300]	; (8015cf0 <ip4_output_if_src+0x144>)
 8015bc4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015bc8:	494a      	ldr	r1, [pc, #296]	; (8015cf4 <ip4_output_if_src+0x148>)
 8015bca:	484b      	ldr	r0, [pc, #300]	; (8015cf8 <ip4_output_if_src+0x14c>)
 8015bcc:	f001 fd84 	bl	80176d8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d060      	beq.n	8015c98 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015bd6:	2314      	movs	r3, #20
 8015bd8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015bda:	2114      	movs	r1, #20
 8015bdc:	68f8      	ldr	r0, [r7, #12]
 8015bde:	f7f8 f96b 	bl	800deb8 <pbuf_add_header>
 8015be2:	4603      	mov	r3, r0
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d002      	beq.n	8015bee <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015be8:	f06f 0301 	mvn.w	r3, #1
 8015bec:	e07c      	b.n	8015ce8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	685b      	ldr	r3, [r3, #4]
 8015bf2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	895b      	ldrh	r3, [r3, #10]
 8015bf8:	2b13      	cmp	r3, #19
 8015bfa:	d806      	bhi.n	8015c0a <ip4_output_if_src+0x5e>
 8015bfc:	4b3c      	ldr	r3, [pc, #240]	; (8015cf0 <ip4_output_if_src+0x144>)
 8015bfe:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015c02:	493e      	ldr	r1, [pc, #248]	; (8015cfc <ip4_output_if_src+0x150>)
 8015c04:	483c      	ldr	r0, [pc, #240]	; (8015cf8 <ip4_output_if_src+0x14c>)
 8015c06:	f001 fd67 	bl	80176d8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015c0a:	69fb      	ldr	r3, [r7, #28]
 8015c0c:	78fa      	ldrb	r2, [r7, #3]
 8015c0e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015c10:	69fb      	ldr	r3, [r7, #28]
 8015c12:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015c16:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	681a      	ldr	r2, [r3, #0]
 8015c1c:	69fb      	ldr	r3, [r7, #28]
 8015c1e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015c20:	8b7b      	ldrh	r3, [r7, #26]
 8015c22:	089b      	lsrs	r3, r3, #2
 8015c24:	b29b      	uxth	r3, r3
 8015c26:	b2db      	uxtb	r3, r3
 8015c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c2c:	b2da      	uxtb	r2, r3
 8015c2e:	69fb      	ldr	r3, [r7, #28]
 8015c30:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015c32:	69fb      	ldr	r3, [r7, #28]
 8015c34:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015c38:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015c3a:	68fb      	ldr	r3, [r7, #12]
 8015c3c:	891b      	ldrh	r3, [r3, #8]
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f7f6 fe72 	bl	800c928 <lwip_htons>
 8015c44:	4603      	mov	r3, r0
 8015c46:	461a      	mov	r2, r3
 8015c48:	69fb      	ldr	r3, [r7, #28]
 8015c4a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015c4c:	69fb      	ldr	r3, [r7, #28]
 8015c4e:	2200      	movs	r2, #0
 8015c50:	719a      	strb	r2, [r3, #6]
 8015c52:	2200      	movs	r2, #0
 8015c54:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015c56:	4b2a      	ldr	r3, [pc, #168]	; (8015d00 <ip4_output_if_src+0x154>)
 8015c58:	881b      	ldrh	r3, [r3, #0]
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f7f6 fe64 	bl	800c928 <lwip_htons>
 8015c60:	4603      	mov	r3, r0
 8015c62:	461a      	mov	r2, r3
 8015c64:	69fb      	ldr	r3, [r7, #28]
 8015c66:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015c68:	4b25      	ldr	r3, [pc, #148]	; (8015d00 <ip4_output_if_src+0x154>)
 8015c6a:	881b      	ldrh	r3, [r3, #0]
 8015c6c:	3301      	adds	r3, #1
 8015c6e:	b29a      	uxth	r2, r3
 8015c70:	4b23      	ldr	r3, [pc, #140]	; (8015d00 <ip4_output_if_src+0x154>)
 8015c72:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015c74:	68bb      	ldr	r3, [r7, #8]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d104      	bne.n	8015c84 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015c7a:	4b22      	ldr	r3, [pc, #136]	; (8015d04 <ip4_output_if_src+0x158>)
 8015c7c:	681a      	ldr	r2, [r3, #0]
 8015c7e:	69fb      	ldr	r3, [r7, #28]
 8015c80:	60da      	str	r2, [r3, #12]
 8015c82:	e003      	b.n	8015c8c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015c84:	68bb      	ldr	r3, [r7, #8]
 8015c86:	681a      	ldr	r2, [r3, #0]
 8015c88:	69fb      	ldr	r3, [r7, #28]
 8015c8a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015c8c:	69fb      	ldr	r3, [r7, #28]
 8015c8e:	2200      	movs	r2, #0
 8015c90:	729a      	strb	r2, [r3, #10]
 8015c92:	2200      	movs	r2, #0
 8015c94:	72da      	strb	r2, [r3, #11]
 8015c96:	e00f      	b.n	8015cb8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	895b      	ldrh	r3, [r3, #10]
 8015c9c:	2b13      	cmp	r3, #19
 8015c9e:	d802      	bhi.n	8015ca6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015ca0:	f06f 0301 	mvn.w	r3, #1
 8015ca4:	e020      	b.n	8015ce8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	685b      	ldr	r3, [r3, #4]
 8015caa:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015cac:	69fb      	ldr	r3, [r7, #28]
 8015cae:	691b      	ldr	r3, [r3, #16]
 8015cb0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015cb2:	f107 0314 	add.w	r3, r7, #20
 8015cb6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d00c      	beq.n	8015cda <ip4_output_if_src+0x12e>
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	891a      	ldrh	r2, [r3, #8]
 8015cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015cc8:	429a      	cmp	r2, r3
 8015cca:	d906      	bls.n	8015cda <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015ccc:	687a      	ldr	r2, [r7, #4]
 8015cce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015cd0:	68f8      	ldr	r0, [r7, #12]
 8015cd2:	f000 fd53 	bl	801677c <ip4_frag>
 8015cd6:	4603      	mov	r3, r0
 8015cd8:	e006      	b.n	8015ce8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cdc:	695b      	ldr	r3, [r3, #20]
 8015cde:	687a      	ldr	r2, [r7, #4]
 8015ce0:	68f9      	ldr	r1, [r7, #12]
 8015ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ce4:	4798      	blx	r3
 8015ce6:	4603      	mov	r3, r0
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3720      	adds	r7, #32
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	0801ae1c 	.word	0x0801ae1c
 8015cf4:	0801ae50 	.word	0x0801ae50
 8015cf8:	0801ae5c 	.word	0x0801ae5c
 8015cfc:	0801ae84 	.word	0x0801ae84
 8015d00:	2000911a 	.word	0x2000911a
 8015d04:	0801b26c 	.word	0x0801b26c

08015d08 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015d08:	b480      	push	{r7}
 8015d0a:	b085      	sub	sp, #20
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
 8015d10:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015d1c:	d002      	beq.n	8015d24 <ip4_addr_isbroadcast_u32+0x1c>
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d101      	bne.n	8015d28 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015d24:	2301      	movs	r3, #1
 8015d26:	e02a      	b.n	8015d7e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015d2e:	f003 0302 	and.w	r3, r3, #2
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d101      	bne.n	8015d3a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015d36:	2300      	movs	r3, #0
 8015d38:	e021      	b.n	8015d7e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015d3a:	683b      	ldr	r3, [r7, #0]
 8015d3c:	3304      	adds	r3, #4
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	687a      	ldr	r2, [r7, #4]
 8015d42:	429a      	cmp	r2, r3
 8015d44:	d101      	bne.n	8015d4a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015d46:	2300      	movs	r3, #0
 8015d48:	e019      	b.n	8015d7e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015d4a:	68fa      	ldr	r2, [r7, #12]
 8015d4c:	683b      	ldr	r3, [r7, #0]
 8015d4e:	3304      	adds	r3, #4
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	405a      	eors	r2, r3
 8015d54:	683b      	ldr	r3, [r7, #0]
 8015d56:	3308      	adds	r3, #8
 8015d58:	681b      	ldr	r3, [r3, #0]
 8015d5a:	4013      	ands	r3, r2
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d10d      	bne.n	8015d7c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015d60:	683b      	ldr	r3, [r7, #0]
 8015d62:	3308      	adds	r3, #8
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	43da      	mvns	r2, r3
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015d6c:	683b      	ldr	r3, [r7, #0]
 8015d6e:	3308      	adds	r3, #8
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d101      	bne.n	8015d7c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015d78:	2301      	movs	r3, #1
 8015d7a:	e000      	b.n	8015d7e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015d7c:	2300      	movs	r3, #0
  }
}
 8015d7e:	4618      	mov	r0, r3
 8015d80:	3714      	adds	r7, #20
 8015d82:	46bd      	mov	sp, r7
 8015d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d88:	4770      	bx	lr
	...

08015d8c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b084      	sub	sp, #16
 8015d90:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015d92:	2300      	movs	r3, #0
 8015d94:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015d96:	4b12      	ldr	r3, [pc, #72]	; (8015de0 <ip_reass_tmr+0x54>)
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015d9c:	e018      	b.n	8015dd0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	7fdb      	ldrb	r3, [r3, #31]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d00b      	beq.n	8015dbe <ip_reass_tmr+0x32>
      r->timer--;
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	7fdb      	ldrb	r3, [r3, #31]
 8015daa:	3b01      	subs	r3, #1
 8015dac:	b2da      	uxtb	r2, r3
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015db6:	68fb      	ldr	r3, [r7, #12]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	60fb      	str	r3, [r7, #12]
 8015dbc:	e008      	b.n	8015dd0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015dc8:	68b9      	ldr	r1, [r7, #8]
 8015dca:	6878      	ldr	r0, [r7, #4]
 8015dcc:	f000 f80a 	bl	8015de4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d1e3      	bne.n	8015d9e <ip_reass_tmr+0x12>
    }
  }
}
 8015dd6:	bf00      	nop
 8015dd8:	bf00      	nop
 8015dda:	3710      	adds	r7, #16
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	bd80      	pop	{r7, pc}
 8015de0:	2000911c 	.word	0x2000911c

08015de4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b088      	sub	sp, #32
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	6078      	str	r0, [r7, #4]
 8015dec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015dee:	2300      	movs	r3, #0
 8015df0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015df2:	683a      	ldr	r2, [r7, #0]
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	429a      	cmp	r2, r3
 8015df8:	d105      	bne.n	8015e06 <ip_reass_free_complete_datagram+0x22>
 8015dfa:	4b45      	ldr	r3, [pc, #276]	; (8015f10 <ip_reass_free_complete_datagram+0x12c>)
 8015dfc:	22ab      	movs	r2, #171	; 0xab
 8015dfe:	4945      	ldr	r1, [pc, #276]	; (8015f14 <ip_reass_free_complete_datagram+0x130>)
 8015e00:	4845      	ldr	r0, [pc, #276]	; (8015f18 <ip_reass_free_complete_datagram+0x134>)
 8015e02:	f001 fc69 	bl	80176d8 <iprintf>
  if (prev != NULL) {
 8015e06:	683b      	ldr	r3, [r7, #0]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d00a      	beq.n	8015e22 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015e0c:	683b      	ldr	r3, [r7, #0]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	687a      	ldr	r2, [r7, #4]
 8015e12:	429a      	cmp	r2, r3
 8015e14:	d005      	beq.n	8015e22 <ip_reass_free_complete_datagram+0x3e>
 8015e16:	4b3e      	ldr	r3, [pc, #248]	; (8015f10 <ip_reass_free_complete_datagram+0x12c>)
 8015e18:	22ad      	movs	r2, #173	; 0xad
 8015e1a:	4940      	ldr	r1, [pc, #256]	; (8015f1c <ip_reass_free_complete_datagram+0x138>)
 8015e1c:	483e      	ldr	r0, [pc, #248]	; (8015f18 <ip_reass_free_complete_datagram+0x134>)
 8015e1e:	f001 fc5b 	bl	80176d8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	685b      	ldr	r3, [r3, #4]
 8015e28:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	889b      	ldrh	r3, [r3, #4]
 8015e2e:	b29b      	uxth	r3, r3
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d12a      	bne.n	8015e8a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	685b      	ldr	r3, [r3, #4]
 8015e38:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015e3a:	697b      	ldr	r3, [r7, #20]
 8015e3c:	681a      	ldr	r2, [r3, #0]
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015e42:	69bb      	ldr	r3, [r7, #24]
 8015e44:	6858      	ldr	r0, [r3, #4]
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	3308      	adds	r3, #8
 8015e4a:	2214      	movs	r2, #20
 8015e4c:	4619      	mov	r1, r3
 8015e4e:	f001 fc2d 	bl	80176ac <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015e52:	2101      	movs	r1, #1
 8015e54:	69b8      	ldr	r0, [r7, #24]
 8015e56:	f7ff fc47 	bl	80156e8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015e5a:	69b8      	ldr	r0, [r7, #24]
 8015e5c:	f7f8 f94a 	bl	800e0f4 <pbuf_clen>
 8015e60:	4603      	mov	r3, r0
 8015e62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015e64:	8bfa      	ldrh	r2, [r7, #30]
 8015e66:	8a7b      	ldrh	r3, [r7, #18]
 8015e68:	4413      	add	r3, r2
 8015e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e6e:	db05      	blt.n	8015e7c <ip_reass_free_complete_datagram+0x98>
 8015e70:	4b27      	ldr	r3, [pc, #156]	; (8015f10 <ip_reass_free_complete_datagram+0x12c>)
 8015e72:	22bc      	movs	r2, #188	; 0xbc
 8015e74:	492a      	ldr	r1, [pc, #168]	; (8015f20 <ip_reass_free_complete_datagram+0x13c>)
 8015e76:	4828      	ldr	r0, [pc, #160]	; (8015f18 <ip_reass_free_complete_datagram+0x134>)
 8015e78:	f001 fc2e 	bl	80176d8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015e7c:	8bfa      	ldrh	r2, [r7, #30]
 8015e7e:	8a7b      	ldrh	r3, [r7, #18]
 8015e80:	4413      	add	r3, r2
 8015e82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015e84:	69b8      	ldr	r0, [r7, #24]
 8015e86:	f7f8 f8ad 	bl	800dfe4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	685b      	ldr	r3, [r3, #4]
 8015e8e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015e90:	e01f      	b.n	8015ed2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015e92:	69bb      	ldr	r3, [r7, #24]
 8015e94:	685b      	ldr	r3, [r3, #4]
 8015e96:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015e98:	69bb      	ldr	r3, [r7, #24]
 8015e9a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015ea2:	68f8      	ldr	r0, [r7, #12]
 8015ea4:	f7f8 f926 	bl	800e0f4 <pbuf_clen>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015eac:	8bfa      	ldrh	r2, [r7, #30]
 8015eae:	8a7b      	ldrh	r3, [r7, #18]
 8015eb0:	4413      	add	r3, r2
 8015eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015eb6:	db05      	blt.n	8015ec4 <ip_reass_free_complete_datagram+0xe0>
 8015eb8:	4b15      	ldr	r3, [pc, #84]	; (8015f10 <ip_reass_free_complete_datagram+0x12c>)
 8015eba:	22cc      	movs	r2, #204	; 0xcc
 8015ebc:	4918      	ldr	r1, [pc, #96]	; (8015f20 <ip_reass_free_complete_datagram+0x13c>)
 8015ebe:	4816      	ldr	r0, [pc, #88]	; (8015f18 <ip_reass_free_complete_datagram+0x134>)
 8015ec0:	f001 fc0a 	bl	80176d8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015ec4:	8bfa      	ldrh	r2, [r7, #30]
 8015ec6:	8a7b      	ldrh	r3, [r7, #18]
 8015ec8:	4413      	add	r3, r2
 8015eca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015ecc:	68f8      	ldr	r0, [r7, #12]
 8015ece:	f7f8 f889 	bl	800dfe4 <pbuf_free>
  while (p != NULL) {
 8015ed2:	69bb      	ldr	r3, [r7, #24]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d1dc      	bne.n	8015e92 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015ed8:	6839      	ldr	r1, [r7, #0]
 8015eda:	6878      	ldr	r0, [r7, #4]
 8015edc:	f000 f8c2 	bl	8016064 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015ee0:	4b10      	ldr	r3, [pc, #64]	; (8015f24 <ip_reass_free_complete_datagram+0x140>)
 8015ee2:	881b      	ldrh	r3, [r3, #0]
 8015ee4:	8bfa      	ldrh	r2, [r7, #30]
 8015ee6:	429a      	cmp	r2, r3
 8015ee8:	d905      	bls.n	8015ef6 <ip_reass_free_complete_datagram+0x112>
 8015eea:	4b09      	ldr	r3, [pc, #36]	; (8015f10 <ip_reass_free_complete_datagram+0x12c>)
 8015eec:	22d2      	movs	r2, #210	; 0xd2
 8015eee:	490e      	ldr	r1, [pc, #56]	; (8015f28 <ip_reass_free_complete_datagram+0x144>)
 8015ef0:	4809      	ldr	r0, [pc, #36]	; (8015f18 <ip_reass_free_complete_datagram+0x134>)
 8015ef2:	f001 fbf1 	bl	80176d8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015ef6:	4b0b      	ldr	r3, [pc, #44]	; (8015f24 <ip_reass_free_complete_datagram+0x140>)
 8015ef8:	881a      	ldrh	r2, [r3, #0]
 8015efa:	8bfb      	ldrh	r3, [r7, #30]
 8015efc:	1ad3      	subs	r3, r2, r3
 8015efe:	b29a      	uxth	r2, r3
 8015f00:	4b08      	ldr	r3, [pc, #32]	; (8015f24 <ip_reass_free_complete_datagram+0x140>)
 8015f02:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015f04:	8bfb      	ldrh	r3, [r7, #30]
}
 8015f06:	4618      	mov	r0, r3
 8015f08:	3720      	adds	r7, #32
 8015f0a:	46bd      	mov	sp, r7
 8015f0c:	bd80      	pop	{r7, pc}
 8015f0e:	bf00      	nop
 8015f10:	0801aeb4 	.word	0x0801aeb4
 8015f14:	0801aef0 	.word	0x0801aef0
 8015f18:	0801aefc 	.word	0x0801aefc
 8015f1c:	0801af24 	.word	0x0801af24
 8015f20:	0801af38 	.word	0x0801af38
 8015f24:	20009120 	.word	0x20009120
 8015f28:	0801af58 	.word	0x0801af58

08015f2c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b08a      	sub	sp, #40	; 0x28
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015f36:	2300      	movs	r3, #0
 8015f38:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015f42:	2300      	movs	r3, #0
 8015f44:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015f46:	2300      	movs	r3, #0
 8015f48:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015f4a:	4b28      	ldr	r3, [pc, #160]	; (8015fec <ip_reass_remove_oldest_datagram+0xc0>)
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015f50:	e030      	b.n	8015fb4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f54:	695a      	ldr	r2, [r3, #20]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	68db      	ldr	r3, [r3, #12]
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	d10c      	bne.n	8015f78 <ip_reass_remove_oldest_datagram+0x4c>
 8015f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f60:	699a      	ldr	r2, [r3, #24]
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	691b      	ldr	r3, [r3, #16]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d106      	bne.n	8015f78 <ip_reass_remove_oldest_datagram+0x4c>
 8015f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6c:	899a      	ldrh	r2, [r3, #12]
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	889b      	ldrh	r3, [r3, #4]
 8015f72:	b29b      	uxth	r3, r3
 8015f74:	429a      	cmp	r2, r3
 8015f76:	d014      	beq.n	8015fa2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015f78:	693b      	ldr	r3, [r7, #16]
 8015f7a:	3301      	adds	r3, #1
 8015f7c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015f7e:	6a3b      	ldr	r3, [r7, #32]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d104      	bne.n	8015f8e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f86:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015f88:	69fb      	ldr	r3, [r7, #28]
 8015f8a:	61bb      	str	r3, [r7, #24]
 8015f8c:	e009      	b.n	8015fa2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f90:	7fda      	ldrb	r2, [r3, #31]
 8015f92:	6a3b      	ldr	r3, [r7, #32]
 8015f94:	7fdb      	ldrb	r3, [r3, #31]
 8015f96:	429a      	cmp	r2, r3
 8015f98:	d803      	bhi.n	8015fa2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f9c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015f9e:	69fb      	ldr	r3, [r7, #28]
 8015fa0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d001      	beq.n	8015fae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d1cb      	bne.n	8015f52 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015fba:	6a3b      	ldr	r3, [r7, #32]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d008      	beq.n	8015fd2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015fc0:	69b9      	ldr	r1, [r7, #24]
 8015fc2:	6a38      	ldr	r0, [r7, #32]
 8015fc4:	f7ff ff0e 	bl	8015de4 <ip_reass_free_complete_datagram>
 8015fc8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015fca:	697a      	ldr	r2, [r7, #20]
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	4413      	add	r3, r2
 8015fd0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015fd2:	697a      	ldr	r2, [r7, #20]
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	429a      	cmp	r2, r3
 8015fd8:	da02      	bge.n	8015fe0 <ip_reass_remove_oldest_datagram+0xb4>
 8015fda:	693b      	ldr	r3, [r7, #16]
 8015fdc:	2b01      	cmp	r3, #1
 8015fde:	dcac      	bgt.n	8015f3a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015fe0:	697b      	ldr	r3, [r7, #20]
}
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	3728      	adds	r7, #40	; 0x28
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	bd80      	pop	{r7, pc}
 8015fea:	bf00      	nop
 8015fec:	2000911c 	.word	0x2000911c

08015ff0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b084      	sub	sp, #16
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
 8015ff8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015ffa:	2004      	movs	r0, #4
 8015ffc:	f7f7 f90c 	bl	800d218 <memp_malloc>
 8016000:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d110      	bne.n	801602a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016008:	6839      	ldr	r1, [r7, #0]
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f7ff ff8e 	bl	8015f2c <ip_reass_remove_oldest_datagram>
 8016010:	4602      	mov	r2, r0
 8016012:	683b      	ldr	r3, [r7, #0]
 8016014:	4293      	cmp	r3, r2
 8016016:	dc03      	bgt.n	8016020 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016018:	2004      	movs	r0, #4
 801601a:	f7f7 f8fd 	bl	800d218 <memp_malloc>
 801601e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d101      	bne.n	801602a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016026:	2300      	movs	r3, #0
 8016028:	e016      	b.n	8016058 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801602a:	2220      	movs	r2, #32
 801602c:	2100      	movs	r1, #0
 801602e:	68f8      	ldr	r0, [r7, #12]
 8016030:	f001 fb4a 	bl	80176c8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016034:	68fb      	ldr	r3, [r7, #12]
 8016036:	220f      	movs	r2, #15
 8016038:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801603a:	4b09      	ldr	r3, [pc, #36]	; (8016060 <ip_reass_enqueue_new_datagram+0x70>)
 801603c:	681a      	ldr	r2, [r3, #0]
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016042:	4a07      	ldr	r2, [pc, #28]	; (8016060 <ip_reass_enqueue_new_datagram+0x70>)
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	3308      	adds	r3, #8
 801604c:	2214      	movs	r2, #20
 801604e:	6879      	ldr	r1, [r7, #4]
 8016050:	4618      	mov	r0, r3
 8016052:	f001 fb2b 	bl	80176ac <memcpy>
  return ipr;
 8016056:	68fb      	ldr	r3, [r7, #12]
}
 8016058:	4618      	mov	r0, r3
 801605a:	3710      	adds	r7, #16
 801605c:	46bd      	mov	sp, r7
 801605e:	bd80      	pop	{r7, pc}
 8016060:	2000911c 	.word	0x2000911c

08016064 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016064:	b580      	push	{r7, lr}
 8016066:	b082      	sub	sp, #8
 8016068:	af00      	add	r7, sp, #0
 801606a:	6078      	str	r0, [r7, #4]
 801606c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801606e:	4b10      	ldr	r3, [pc, #64]	; (80160b0 <ip_reass_dequeue_datagram+0x4c>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	687a      	ldr	r2, [r7, #4]
 8016074:	429a      	cmp	r2, r3
 8016076:	d104      	bne.n	8016082 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	4a0c      	ldr	r2, [pc, #48]	; (80160b0 <ip_reass_dequeue_datagram+0x4c>)
 801607e:	6013      	str	r3, [r2, #0]
 8016080:	e00d      	b.n	801609e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016082:	683b      	ldr	r3, [r7, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d106      	bne.n	8016096 <ip_reass_dequeue_datagram+0x32>
 8016088:	4b0a      	ldr	r3, [pc, #40]	; (80160b4 <ip_reass_dequeue_datagram+0x50>)
 801608a:	f240 1245 	movw	r2, #325	; 0x145
 801608e:	490a      	ldr	r1, [pc, #40]	; (80160b8 <ip_reass_dequeue_datagram+0x54>)
 8016090:	480a      	ldr	r0, [pc, #40]	; (80160bc <ip_reass_dequeue_datagram+0x58>)
 8016092:	f001 fb21 	bl	80176d8 <iprintf>
    prev->next = ipr->next;
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681a      	ldr	r2, [r3, #0]
 801609a:	683b      	ldr	r3, [r7, #0]
 801609c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801609e:	6879      	ldr	r1, [r7, #4]
 80160a0:	2004      	movs	r0, #4
 80160a2:	f7f7 f929 	bl	800d2f8 <memp_free>
}
 80160a6:	bf00      	nop
 80160a8:	3708      	adds	r7, #8
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd80      	pop	{r7, pc}
 80160ae:	bf00      	nop
 80160b0:	2000911c 	.word	0x2000911c
 80160b4:	0801aeb4 	.word	0x0801aeb4
 80160b8:	0801af7c 	.word	0x0801af7c
 80160bc:	0801aefc 	.word	0x0801aefc

080160c0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b08c      	sub	sp, #48	; 0x30
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	60b9      	str	r1, [r7, #8]
 80160ca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80160cc:	2300      	movs	r3, #0
 80160ce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80160d0:	2301      	movs	r3, #1
 80160d2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	685b      	ldr	r3, [r3, #4]
 80160d8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80160da:	69fb      	ldr	r3, [r7, #28]
 80160dc:	885b      	ldrh	r3, [r3, #2]
 80160de:	b29b      	uxth	r3, r3
 80160e0:	4618      	mov	r0, r3
 80160e2:	f7f6 fc21 	bl	800c928 <lwip_htons>
 80160e6:	4603      	mov	r3, r0
 80160e8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80160ea:	69fb      	ldr	r3, [r7, #28]
 80160ec:	781b      	ldrb	r3, [r3, #0]
 80160ee:	f003 030f 	and.w	r3, r3, #15
 80160f2:	b2db      	uxtb	r3, r3
 80160f4:	009b      	lsls	r3, r3, #2
 80160f6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80160f8:	7e7b      	ldrb	r3, [r7, #25]
 80160fa:	b29b      	uxth	r3, r3
 80160fc:	8b7a      	ldrh	r2, [r7, #26]
 80160fe:	429a      	cmp	r2, r3
 8016100:	d202      	bcs.n	8016108 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016106:	e135      	b.n	8016374 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016108:	7e7b      	ldrb	r3, [r7, #25]
 801610a:	b29b      	uxth	r3, r3
 801610c:	8b7a      	ldrh	r2, [r7, #26]
 801610e:	1ad3      	subs	r3, r2, r3
 8016110:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016112:	69fb      	ldr	r3, [r7, #28]
 8016114:	88db      	ldrh	r3, [r3, #6]
 8016116:	b29b      	uxth	r3, r3
 8016118:	4618      	mov	r0, r3
 801611a:	f7f6 fc05 	bl	800c928 <lwip_htons>
 801611e:	4603      	mov	r3, r0
 8016120:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016124:	b29b      	uxth	r3, r3
 8016126:	00db      	lsls	r3, r3, #3
 8016128:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801612a:	68bb      	ldr	r3, [r7, #8]
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016132:	2200      	movs	r2, #0
 8016134:	701a      	strb	r2, [r3, #0]
 8016136:	2200      	movs	r2, #0
 8016138:	705a      	strb	r2, [r3, #1]
 801613a:	2200      	movs	r2, #0
 801613c:	709a      	strb	r2, [r3, #2]
 801613e:	2200      	movs	r2, #0
 8016140:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016144:	8afa      	ldrh	r2, [r7, #22]
 8016146:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016148:	8afa      	ldrh	r2, [r7, #22]
 801614a:	8b7b      	ldrh	r3, [r7, #26]
 801614c:	4413      	add	r3, r2
 801614e:	b29a      	uxth	r2, r3
 8016150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016152:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016156:	88db      	ldrh	r3, [r3, #6]
 8016158:	b29b      	uxth	r3, r3
 801615a:	8afa      	ldrh	r2, [r7, #22]
 801615c:	429a      	cmp	r2, r3
 801615e:	d902      	bls.n	8016166 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016164:	e106      	b.n	8016374 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	685b      	ldr	r3, [r3, #4]
 801616a:	627b      	str	r3, [r7, #36]	; 0x24
 801616c:	e068      	b.n	8016240 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801616e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016170:	685b      	ldr	r3, [r3, #4]
 8016172:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016176:	889b      	ldrh	r3, [r3, #4]
 8016178:	b29a      	uxth	r2, r3
 801617a:	693b      	ldr	r3, [r7, #16]
 801617c:	889b      	ldrh	r3, [r3, #4]
 801617e:	b29b      	uxth	r3, r3
 8016180:	429a      	cmp	r2, r3
 8016182:	d235      	bcs.n	80161f0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016188:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801618c:	2b00      	cmp	r3, #0
 801618e:	d020      	beq.n	80161d2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016192:	889b      	ldrh	r3, [r3, #4]
 8016194:	b29a      	uxth	r2, r3
 8016196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016198:	88db      	ldrh	r3, [r3, #6]
 801619a:	b29b      	uxth	r3, r3
 801619c:	429a      	cmp	r2, r3
 801619e:	d307      	bcc.n	80161b0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80161a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161a2:	88db      	ldrh	r3, [r3, #6]
 80161a4:	b29a      	uxth	r2, r3
 80161a6:	693b      	ldr	r3, [r7, #16]
 80161a8:	889b      	ldrh	r3, [r3, #4]
 80161aa:	b29b      	uxth	r3, r3
 80161ac:	429a      	cmp	r2, r3
 80161ae:	d902      	bls.n	80161b6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161b4:	e0de      	b.n	8016374 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80161b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b8:	68ba      	ldr	r2, [r7, #8]
 80161ba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80161bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161be:	88db      	ldrh	r3, [r3, #6]
 80161c0:	b29a      	uxth	r2, r3
 80161c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161c4:	889b      	ldrh	r3, [r3, #4]
 80161c6:	b29b      	uxth	r3, r3
 80161c8:	429a      	cmp	r2, r3
 80161ca:	d03d      	beq.n	8016248 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80161cc:	2300      	movs	r3, #0
 80161ce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80161d0:	e03a      	b.n	8016248 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80161d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161d4:	88db      	ldrh	r3, [r3, #6]
 80161d6:	b29a      	uxth	r2, r3
 80161d8:	693b      	ldr	r3, [r7, #16]
 80161da:	889b      	ldrh	r3, [r3, #4]
 80161dc:	b29b      	uxth	r3, r3
 80161de:	429a      	cmp	r2, r3
 80161e0:	d902      	bls.n	80161e8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80161e6:	e0c5      	b.n	8016374 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	68ba      	ldr	r2, [r7, #8]
 80161ec:	605a      	str	r2, [r3, #4]
      break;
 80161ee:	e02b      	b.n	8016248 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80161f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f2:	889b      	ldrh	r3, [r3, #4]
 80161f4:	b29a      	uxth	r2, r3
 80161f6:	693b      	ldr	r3, [r7, #16]
 80161f8:	889b      	ldrh	r3, [r3, #4]
 80161fa:	b29b      	uxth	r3, r3
 80161fc:	429a      	cmp	r2, r3
 80161fe:	d102      	bne.n	8016206 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016204:	e0b6      	b.n	8016374 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016208:	889b      	ldrh	r3, [r3, #4]
 801620a:	b29a      	uxth	r2, r3
 801620c:	693b      	ldr	r3, [r7, #16]
 801620e:	88db      	ldrh	r3, [r3, #6]
 8016210:	b29b      	uxth	r3, r3
 8016212:	429a      	cmp	r2, r3
 8016214:	d202      	bcs.n	801621c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016216:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801621a:	e0ab      	b.n	8016374 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801621c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801621e:	2b00      	cmp	r3, #0
 8016220:	d009      	beq.n	8016236 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016224:	88db      	ldrh	r3, [r3, #6]
 8016226:	b29a      	uxth	r2, r3
 8016228:	693b      	ldr	r3, [r7, #16]
 801622a:	889b      	ldrh	r3, [r3, #4]
 801622c:	b29b      	uxth	r3, r3
 801622e:	429a      	cmp	r2, r3
 8016230:	d001      	beq.n	8016236 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016232:	2300      	movs	r3, #0
 8016234:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801623c:	693b      	ldr	r3, [r7, #16]
 801623e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016242:	2b00      	cmp	r3, #0
 8016244:	d193      	bne.n	801616e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016246:	e000      	b.n	801624a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016248:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624c:	2b00      	cmp	r3, #0
 801624e:	d12d      	bne.n	80162ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016252:	2b00      	cmp	r3, #0
 8016254:	d01c      	beq.n	8016290 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016258:	88db      	ldrh	r3, [r3, #6]
 801625a:	b29a      	uxth	r2, r3
 801625c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801625e:	889b      	ldrh	r3, [r3, #4]
 8016260:	b29b      	uxth	r3, r3
 8016262:	429a      	cmp	r2, r3
 8016264:	d906      	bls.n	8016274 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016266:	4b45      	ldr	r3, [pc, #276]	; (801637c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016268:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801626c:	4944      	ldr	r1, [pc, #272]	; (8016380 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801626e:	4845      	ldr	r0, [pc, #276]	; (8016384 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016270:	f001 fa32 	bl	80176d8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016276:	68ba      	ldr	r2, [r7, #8]
 8016278:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801627a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801627c:	88db      	ldrh	r3, [r3, #6]
 801627e:	b29a      	uxth	r2, r3
 8016280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016282:	889b      	ldrh	r3, [r3, #4]
 8016284:	b29b      	uxth	r3, r3
 8016286:	429a      	cmp	r2, r3
 8016288:	d010      	beq.n	80162ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801628a:	2300      	movs	r3, #0
 801628c:	623b      	str	r3, [r7, #32]
 801628e:	e00d      	b.n	80162ac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	685b      	ldr	r3, [r3, #4]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d006      	beq.n	80162a6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016298:	4b38      	ldr	r3, [pc, #224]	; (801637c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801629a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801629e:	493a      	ldr	r1, [pc, #232]	; (8016388 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80162a0:	4838      	ldr	r0, [pc, #224]	; (8016384 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162a2:	f001 fa19 	bl	80176d8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	68ba      	ldr	r2, [r7, #8]
 80162aa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d105      	bne.n	80162be <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80162b2:	68fb      	ldr	r3, [r7, #12]
 80162b4:	7f9b      	ldrb	r3, [r3, #30]
 80162b6:	f003 0301 	and.w	r3, r3, #1
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d059      	beq.n	8016372 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80162be:	6a3b      	ldr	r3, [r7, #32]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d04f      	beq.n	8016364 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	685b      	ldr	r3, [r3, #4]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d006      	beq.n	80162da <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	685b      	ldr	r3, [r3, #4]
 80162d0:	685b      	ldr	r3, [r3, #4]
 80162d2:	889b      	ldrh	r3, [r3, #4]
 80162d4:	b29b      	uxth	r3, r3
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d002      	beq.n	80162e0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80162da:	2300      	movs	r3, #0
 80162dc:	623b      	str	r3, [r7, #32]
 80162de:	e041      	b.n	8016364 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80162e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80162e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80162ea:	e012      	b.n	8016312 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80162ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ee:	685b      	ldr	r3, [r3, #4]
 80162f0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80162f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162f4:	88db      	ldrh	r3, [r3, #6]
 80162f6:	b29a      	uxth	r2, r3
 80162f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162fa:	889b      	ldrh	r3, [r3, #4]
 80162fc:	b29b      	uxth	r3, r3
 80162fe:	429a      	cmp	r2, r3
 8016300:	d002      	beq.n	8016308 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016302:	2300      	movs	r3, #0
 8016304:	623b      	str	r3, [r7, #32]
            break;
 8016306:	e007      	b.n	8016318 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801630a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016314:	2b00      	cmp	r3, #0
 8016316:	d1e9      	bne.n	80162ec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016318:	6a3b      	ldr	r3, [r7, #32]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d022      	beq.n	8016364 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	685b      	ldr	r3, [r3, #4]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d106      	bne.n	8016334 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016326:	4b15      	ldr	r3, [pc, #84]	; (801637c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016328:	f240 12df 	movw	r2, #479	; 0x1df
 801632c:	4917      	ldr	r1, [pc, #92]	; (801638c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801632e:	4815      	ldr	r0, [pc, #84]	; (8016384 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016330:	f001 f9d2 	bl	80176d8 <iprintf>
          LWIP_ASSERT("sanity check",
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	685b      	ldr	r3, [r3, #4]
 801633a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801633c:	429a      	cmp	r2, r3
 801633e:	d106      	bne.n	801634e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016340:	4b0e      	ldr	r3, [pc, #56]	; (801637c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016342:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016346:	4911      	ldr	r1, [pc, #68]	; (801638c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016348:	480e      	ldr	r0, [pc, #56]	; (8016384 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801634a:	f001 f9c5 	bl	80176d8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d006      	beq.n	8016364 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016356:	4b09      	ldr	r3, [pc, #36]	; (801637c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016358:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801635c:	490c      	ldr	r1, [pc, #48]	; (8016390 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801635e:	4809      	ldr	r0, [pc, #36]	; (8016384 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016360:	f001 f9ba 	bl	80176d8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016364:	6a3b      	ldr	r3, [r7, #32]
 8016366:	2b00      	cmp	r3, #0
 8016368:	bf14      	ite	ne
 801636a:	2301      	movne	r3, #1
 801636c:	2300      	moveq	r3, #0
 801636e:	b2db      	uxtb	r3, r3
 8016370:	e000      	b.n	8016374 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016372:	2300      	movs	r3, #0
}
 8016374:	4618      	mov	r0, r3
 8016376:	3730      	adds	r7, #48	; 0x30
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}
 801637c:	0801aeb4 	.word	0x0801aeb4
 8016380:	0801af98 	.word	0x0801af98
 8016384:	0801aefc 	.word	0x0801aefc
 8016388:	0801afb8 	.word	0x0801afb8
 801638c:	0801aff0 	.word	0x0801aff0
 8016390:	0801b000 	.word	0x0801b000

08016394 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b08e      	sub	sp, #56	; 0x38
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	685b      	ldr	r3, [r3, #4]
 80163a0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80163a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163a4:	781b      	ldrb	r3, [r3, #0]
 80163a6:	f003 030f 	and.w	r3, r3, #15
 80163aa:	b2db      	uxtb	r3, r3
 80163ac:	009b      	lsls	r3, r3, #2
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	2b14      	cmp	r3, #20
 80163b2:	f040 8171 	bne.w	8016698 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80163b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163b8:	88db      	ldrh	r3, [r3, #6]
 80163ba:	b29b      	uxth	r3, r3
 80163bc:	4618      	mov	r0, r3
 80163be:	f7f6 fab3 	bl	800c928 <lwip_htons>
 80163c2:	4603      	mov	r3, r0
 80163c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80163c8:	b29b      	uxth	r3, r3
 80163ca:	00db      	lsls	r3, r3, #3
 80163cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80163ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d0:	885b      	ldrh	r3, [r3, #2]
 80163d2:	b29b      	uxth	r3, r3
 80163d4:	4618      	mov	r0, r3
 80163d6:	f7f6 faa7 	bl	800c928 <lwip_htons>
 80163da:	4603      	mov	r3, r0
 80163dc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80163de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163e0:	781b      	ldrb	r3, [r3, #0]
 80163e2:	f003 030f 	and.w	r3, r3, #15
 80163e6:	b2db      	uxtb	r3, r3
 80163e8:	009b      	lsls	r3, r3, #2
 80163ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80163ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80163f2:	b29b      	uxth	r3, r3
 80163f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80163f6:	429a      	cmp	r2, r3
 80163f8:	f0c0 8150 	bcc.w	801669c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80163fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016400:	b29b      	uxth	r3, r3
 8016402:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016404:	1ad3      	subs	r3, r2, r3
 8016406:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016408:	6878      	ldr	r0, [r7, #4]
 801640a:	f7f7 fe73 	bl	800e0f4 <pbuf_clen>
 801640e:	4603      	mov	r3, r0
 8016410:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016412:	4b8c      	ldr	r3, [pc, #560]	; (8016644 <ip4_reass+0x2b0>)
 8016414:	881b      	ldrh	r3, [r3, #0]
 8016416:	461a      	mov	r2, r3
 8016418:	8c3b      	ldrh	r3, [r7, #32]
 801641a:	4413      	add	r3, r2
 801641c:	2b0a      	cmp	r3, #10
 801641e:	dd10      	ble.n	8016442 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016420:	8c3b      	ldrh	r3, [r7, #32]
 8016422:	4619      	mov	r1, r3
 8016424:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016426:	f7ff fd81 	bl	8015f2c <ip_reass_remove_oldest_datagram>
 801642a:	4603      	mov	r3, r0
 801642c:	2b00      	cmp	r3, #0
 801642e:	f000 8137 	beq.w	80166a0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016432:	4b84      	ldr	r3, [pc, #528]	; (8016644 <ip4_reass+0x2b0>)
 8016434:	881b      	ldrh	r3, [r3, #0]
 8016436:	461a      	mov	r2, r3
 8016438:	8c3b      	ldrh	r3, [r7, #32]
 801643a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801643c:	2b0a      	cmp	r3, #10
 801643e:	f300 812f 	bgt.w	80166a0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016442:	4b81      	ldr	r3, [pc, #516]	; (8016648 <ip4_reass+0x2b4>)
 8016444:	681b      	ldr	r3, [r3, #0]
 8016446:	633b      	str	r3, [r7, #48]	; 0x30
 8016448:	e015      	b.n	8016476 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801644a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801644c:	695a      	ldr	r2, [r3, #20]
 801644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016450:	68db      	ldr	r3, [r3, #12]
 8016452:	429a      	cmp	r2, r3
 8016454:	d10c      	bne.n	8016470 <ip4_reass+0xdc>
 8016456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016458:	699a      	ldr	r2, [r3, #24]
 801645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801645c:	691b      	ldr	r3, [r3, #16]
 801645e:	429a      	cmp	r2, r3
 8016460:	d106      	bne.n	8016470 <ip4_reass+0xdc>
 8016462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016464:	899a      	ldrh	r2, [r3, #12]
 8016466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016468:	889b      	ldrh	r3, [r3, #4]
 801646a:	b29b      	uxth	r3, r3
 801646c:	429a      	cmp	r2, r3
 801646e:	d006      	beq.n	801647e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	633b      	str	r3, [r7, #48]	; 0x30
 8016476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016478:	2b00      	cmp	r3, #0
 801647a:	d1e6      	bne.n	801644a <ip4_reass+0xb6>
 801647c:	e000      	b.n	8016480 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801647e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016482:	2b00      	cmp	r3, #0
 8016484:	d109      	bne.n	801649a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8016486:	8c3b      	ldrh	r3, [r7, #32]
 8016488:	4619      	mov	r1, r3
 801648a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801648c:	f7ff fdb0 	bl	8015ff0 <ip_reass_enqueue_new_datagram>
 8016490:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016494:	2b00      	cmp	r3, #0
 8016496:	d11c      	bne.n	80164d2 <ip4_reass+0x13e>
      goto nullreturn;
 8016498:	e105      	b.n	80166a6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801649c:	88db      	ldrh	r3, [r3, #6]
 801649e:	b29b      	uxth	r3, r3
 80164a0:	4618      	mov	r0, r3
 80164a2:	f7f6 fa41 	bl	800c928 <lwip_htons>
 80164a6:	4603      	mov	r3, r0
 80164a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d110      	bne.n	80164d2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80164b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b2:	89db      	ldrh	r3, [r3, #14]
 80164b4:	4618      	mov	r0, r3
 80164b6:	f7f6 fa37 	bl	800c928 <lwip_htons>
 80164ba:	4603      	mov	r3, r0
 80164bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d006      	beq.n	80164d2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80164c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164c6:	3308      	adds	r3, #8
 80164c8:	2214      	movs	r2, #20
 80164ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80164cc:	4618      	mov	r0, r3
 80164ce:	f001 f8ed 	bl	80176ac <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80164d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d4:	88db      	ldrh	r3, [r3, #6]
 80164d6:	b29b      	uxth	r3, r3
 80164d8:	f003 0320 	and.w	r3, r3, #32
 80164dc:	2b00      	cmp	r3, #0
 80164de:	bf0c      	ite	eq
 80164e0:	2301      	moveq	r3, #1
 80164e2:	2300      	movne	r3, #0
 80164e4:	b2db      	uxtb	r3, r3
 80164e6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80164e8:	69fb      	ldr	r3, [r7, #28]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d00e      	beq.n	801650c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80164ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80164f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80164f2:	4413      	add	r3, r2
 80164f4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80164f6:	8b7a      	ldrh	r2, [r7, #26]
 80164f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80164fa:	429a      	cmp	r2, r3
 80164fc:	f0c0 80a0 	bcc.w	8016640 <ip4_reass+0x2ac>
 8016500:	8b7b      	ldrh	r3, [r7, #26]
 8016502:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016506:	4293      	cmp	r3, r2
 8016508:	f200 809a 	bhi.w	8016640 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801650c:	69fa      	ldr	r2, [r7, #28]
 801650e:	6879      	ldr	r1, [r7, #4]
 8016510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016512:	f7ff fdd5 	bl	80160c0 <ip_reass_chain_frag_into_datagram_and_validate>
 8016516:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016518:	697b      	ldr	r3, [r7, #20]
 801651a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801651e:	f000 809b 	beq.w	8016658 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016522:	4b48      	ldr	r3, [pc, #288]	; (8016644 <ip4_reass+0x2b0>)
 8016524:	881a      	ldrh	r2, [r3, #0]
 8016526:	8c3b      	ldrh	r3, [r7, #32]
 8016528:	4413      	add	r3, r2
 801652a:	b29a      	uxth	r2, r3
 801652c:	4b45      	ldr	r3, [pc, #276]	; (8016644 <ip4_reass+0x2b0>)
 801652e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016530:	69fb      	ldr	r3, [r7, #28]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d00d      	beq.n	8016552 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016536:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016538:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801653a:	4413      	add	r3, r2
 801653c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016540:	8a7a      	ldrh	r2, [r7, #18]
 8016542:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016546:	7f9b      	ldrb	r3, [r3, #30]
 8016548:	f043 0301 	orr.w	r3, r3, #1
 801654c:	b2da      	uxtb	r2, r3
 801654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016550:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	2b01      	cmp	r3, #1
 8016556:	d171      	bne.n	801663c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801655a:	8b9b      	ldrh	r3, [r3, #28]
 801655c:	3314      	adds	r3, #20
 801655e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016562:	685b      	ldr	r3, [r3, #4]
 8016564:	685b      	ldr	r3, [r3, #4]
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	685b      	ldr	r3, [r3, #4]
 8016570:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016574:	3308      	adds	r3, #8
 8016576:	2214      	movs	r2, #20
 8016578:	4619      	mov	r1, r3
 801657a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801657c:	f001 f896 	bl	80176ac <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016580:	8a3b      	ldrh	r3, [r7, #16]
 8016582:	4618      	mov	r0, r3
 8016584:	f7f6 f9d0 	bl	800c928 <lwip_htons>
 8016588:	4603      	mov	r3, r0
 801658a:	461a      	mov	r2, r3
 801658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801658e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016592:	2200      	movs	r2, #0
 8016594:	719a      	strb	r2, [r3, #6]
 8016596:	2200      	movs	r2, #0
 8016598:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659c:	2200      	movs	r2, #0
 801659e:	729a      	strb	r2, [r3, #10]
 80165a0:	2200      	movs	r2, #0
 80165a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80165a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165a6:	685b      	ldr	r3, [r3, #4]
 80165a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80165aa:	e00d      	b.n	80165c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80165ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165ae:	685b      	ldr	r3, [r3, #4]
 80165b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80165b2:	2114      	movs	r1, #20
 80165b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80165b6:	f7f7 fc8f 	bl	800ded8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80165ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80165bc:	6878      	ldr	r0, [r7, #4]
 80165be:	f7f7 fdd3 	bl	800e168 <pbuf_cat>
      r = iprh->next_pbuf;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80165c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d1ee      	bne.n	80165ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80165ce:	4b1e      	ldr	r3, [pc, #120]	; (8016648 <ip4_reass+0x2b4>)
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165d4:	429a      	cmp	r2, r3
 80165d6:	d102      	bne.n	80165de <ip4_reass+0x24a>
      ipr_prev = NULL;
 80165d8:	2300      	movs	r3, #0
 80165da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80165dc:	e010      	b.n	8016600 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80165de:	4b1a      	ldr	r3, [pc, #104]	; (8016648 <ip4_reass+0x2b4>)
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80165e4:	e007      	b.n	80165f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80165e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d006      	beq.n	80165fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80165f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165f2:	681b      	ldr	r3, [r3, #0]
 80165f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80165f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d1f4      	bne.n	80165e6 <ip4_reass+0x252>
 80165fc:	e000      	b.n	8016600 <ip4_reass+0x26c>
          break;
 80165fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016600:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016604:	f7ff fd2e 	bl	8016064 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f7f7 fd73 	bl	800e0f4 <pbuf_clen>
 801660e:	4603      	mov	r3, r0
 8016610:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016612:	4b0c      	ldr	r3, [pc, #48]	; (8016644 <ip4_reass+0x2b0>)
 8016614:	881b      	ldrh	r3, [r3, #0]
 8016616:	8c3a      	ldrh	r2, [r7, #32]
 8016618:	429a      	cmp	r2, r3
 801661a:	d906      	bls.n	801662a <ip4_reass+0x296>
 801661c:	4b0b      	ldr	r3, [pc, #44]	; (801664c <ip4_reass+0x2b8>)
 801661e:	f240 229b 	movw	r2, #667	; 0x29b
 8016622:	490b      	ldr	r1, [pc, #44]	; (8016650 <ip4_reass+0x2bc>)
 8016624:	480b      	ldr	r0, [pc, #44]	; (8016654 <ip4_reass+0x2c0>)
 8016626:	f001 f857 	bl	80176d8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801662a:	4b06      	ldr	r3, [pc, #24]	; (8016644 <ip4_reass+0x2b0>)
 801662c:	881a      	ldrh	r2, [r3, #0]
 801662e:	8c3b      	ldrh	r3, [r7, #32]
 8016630:	1ad3      	subs	r3, r2, r3
 8016632:	b29a      	uxth	r2, r3
 8016634:	4b03      	ldr	r3, [pc, #12]	; (8016644 <ip4_reass+0x2b0>)
 8016636:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	e038      	b.n	80166ae <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801663c:	2300      	movs	r3, #0
 801663e:	e036      	b.n	80166ae <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016640:	bf00      	nop
 8016642:	e00a      	b.n	801665a <ip4_reass+0x2c6>
 8016644:	20009120 	.word	0x20009120
 8016648:	2000911c 	.word	0x2000911c
 801664c:	0801aeb4 	.word	0x0801aeb4
 8016650:	0801b024 	.word	0x0801b024
 8016654:	0801aefc 	.word	0x0801aefc
    goto nullreturn_ipr;
 8016658:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801665a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801665c:	2b00      	cmp	r3, #0
 801665e:	d106      	bne.n	801666e <ip4_reass+0x2da>
 8016660:	4b15      	ldr	r3, [pc, #84]	; (80166b8 <ip4_reass+0x324>)
 8016662:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016666:	4915      	ldr	r1, [pc, #84]	; (80166bc <ip4_reass+0x328>)
 8016668:	4815      	ldr	r0, [pc, #84]	; (80166c0 <ip4_reass+0x32c>)
 801666a:	f001 f835 	bl	80176d8 <iprintf>
  if (ipr->p == NULL) {
 801666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016670:	685b      	ldr	r3, [r3, #4]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d116      	bne.n	80166a4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8016676:	4b13      	ldr	r3, [pc, #76]	; (80166c4 <ip4_reass+0x330>)
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801667c:	429a      	cmp	r2, r3
 801667e:	d006      	beq.n	801668e <ip4_reass+0x2fa>
 8016680:	4b0d      	ldr	r3, [pc, #52]	; (80166b8 <ip4_reass+0x324>)
 8016682:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016686:	4910      	ldr	r1, [pc, #64]	; (80166c8 <ip4_reass+0x334>)
 8016688:	480d      	ldr	r0, [pc, #52]	; (80166c0 <ip4_reass+0x32c>)
 801668a:	f001 f825 	bl	80176d8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801668e:	2100      	movs	r1, #0
 8016690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016692:	f7ff fce7 	bl	8016064 <ip_reass_dequeue_datagram>
 8016696:	e006      	b.n	80166a6 <ip4_reass+0x312>
    goto nullreturn;
 8016698:	bf00      	nop
 801669a:	e004      	b.n	80166a6 <ip4_reass+0x312>
    goto nullreturn;
 801669c:	bf00      	nop
 801669e:	e002      	b.n	80166a6 <ip4_reass+0x312>
      goto nullreturn;
 80166a0:	bf00      	nop
 80166a2:	e000      	b.n	80166a6 <ip4_reass+0x312>
  }

nullreturn:
 80166a4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80166a6:	6878      	ldr	r0, [r7, #4]
 80166a8:	f7f7 fc9c 	bl	800dfe4 <pbuf_free>
  return NULL;
 80166ac:	2300      	movs	r3, #0
}
 80166ae:	4618      	mov	r0, r3
 80166b0:	3738      	adds	r7, #56	; 0x38
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	0801aeb4 	.word	0x0801aeb4
 80166bc:	0801b040 	.word	0x0801b040
 80166c0:	0801aefc 	.word	0x0801aefc
 80166c4:	2000911c 	.word	0x2000911c
 80166c8:	0801b04c 	.word	0x0801b04c

080166cc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80166d0:	2005      	movs	r0, #5
 80166d2:	f7f6 fda1 	bl	800d218 <memp_malloc>
 80166d6:	4603      	mov	r3, r0
}
 80166d8:	4618      	mov	r0, r3
 80166da:	bd80      	pop	{r7, pc}

080166dc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80166dc:	b580      	push	{r7, lr}
 80166de:	b082      	sub	sp, #8
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d106      	bne.n	80166f8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80166ea:	4b07      	ldr	r3, [pc, #28]	; (8016708 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80166ec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80166f0:	4906      	ldr	r1, [pc, #24]	; (801670c <ip_frag_free_pbuf_custom_ref+0x30>)
 80166f2:	4807      	ldr	r0, [pc, #28]	; (8016710 <ip_frag_free_pbuf_custom_ref+0x34>)
 80166f4:	f000 fff0 	bl	80176d8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80166f8:	6879      	ldr	r1, [r7, #4]
 80166fa:	2005      	movs	r0, #5
 80166fc:	f7f6 fdfc 	bl	800d2f8 <memp_free>
}
 8016700:	bf00      	nop
 8016702:	3708      	adds	r7, #8
 8016704:	46bd      	mov	sp, r7
 8016706:	bd80      	pop	{r7, pc}
 8016708:	0801aeb4 	.word	0x0801aeb4
 801670c:	0801b06c 	.word	0x0801b06c
 8016710:	0801aefc 	.word	0x0801aefc

08016714 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b084      	sub	sp, #16
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d106      	bne.n	8016734 <ipfrag_free_pbuf_custom+0x20>
 8016726:	4b11      	ldr	r3, [pc, #68]	; (801676c <ipfrag_free_pbuf_custom+0x58>)
 8016728:	f240 22ce 	movw	r2, #718	; 0x2ce
 801672c:	4910      	ldr	r1, [pc, #64]	; (8016770 <ipfrag_free_pbuf_custom+0x5c>)
 801672e:	4811      	ldr	r0, [pc, #68]	; (8016774 <ipfrag_free_pbuf_custom+0x60>)
 8016730:	f000 ffd2 	bl	80176d8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016734:	68fa      	ldr	r2, [r7, #12]
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	429a      	cmp	r2, r3
 801673a:	d006      	beq.n	801674a <ipfrag_free_pbuf_custom+0x36>
 801673c:	4b0b      	ldr	r3, [pc, #44]	; (801676c <ipfrag_free_pbuf_custom+0x58>)
 801673e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016742:	490d      	ldr	r1, [pc, #52]	; (8016778 <ipfrag_free_pbuf_custom+0x64>)
 8016744:	480b      	ldr	r0, [pc, #44]	; (8016774 <ipfrag_free_pbuf_custom+0x60>)
 8016746:	f000 ffc7 	bl	80176d8 <iprintf>
  if (pcr->original != NULL) {
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	695b      	ldr	r3, [r3, #20]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d004      	beq.n	801675c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	695b      	ldr	r3, [r3, #20]
 8016756:	4618      	mov	r0, r3
 8016758:	f7f7 fc44 	bl	800dfe4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801675c:	68f8      	ldr	r0, [r7, #12]
 801675e:	f7ff ffbd 	bl	80166dc <ip_frag_free_pbuf_custom_ref>
}
 8016762:	bf00      	nop
 8016764:	3710      	adds	r7, #16
 8016766:	46bd      	mov	sp, r7
 8016768:	bd80      	pop	{r7, pc}
 801676a:	bf00      	nop
 801676c:	0801aeb4 	.word	0x0801aeb4
 8016770:	0801b078 	.word	0x0801b078
 8016774:	0801aefc 	.word	0x0801aefc
 8016778:	0801b084 	.word	0x0801b084

0801677c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801677c:	b580      	push	{r7, lr}
 801677e:	b094      	sub	sp, #80	; 0x50
 8016780:	af02      	add	r7, sp, #8
 8016782:	60f8      	str	r0, [r7, #12]
 8016784:	60b9      	str	r1, [r7, #8]
 8016786:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016788:	2300      	movs	r3, #0
 801678a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801678e:	68bb      	ldr	r3, [r7, #8]
 8016790:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016792:	3b14      	subs	r3, #20
 8016794:	2b00      	cmp	r3, #0
 8016796:	da00      	bge.n	801679a <ip4_frag+0x1e>
 8016798:	3307      	adds	r3, #7
 801679a:	10db      	asrs	r3, r3, #3
 801679c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801679e:	2314      	movs	r3, #20
 80167a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80167a2:	68fb      	ldr	r3, [r7, #12]
 80167a4:	685b      	ldr	r3, [r3, #4]
 80167a6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80167a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80167ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	f003 030f 	and.w	r3, r3, #15
 80167b4:	b2db      	uxtb	r3, r3
 80167b6:	009b      	lsls	r3, r3, #2
 80167b8:	b2db      	uxtb	r3, r3
 80167ba:	2b14      	cmp	r3, #20
 80167bc:	d002      	beq.n	80167c4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80167be:	f06f 0305 	mvn.w	r3, #5
 80167c2:	e110      	b.n	80169e6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	895b      	ldrh	r3, [r3, #10]
 80167c8:	2b13      	cmp	r3, #19
 80167ca:	d809      	bhi.n	80167e0 <ip4_frag+0x64>
 80167cc:	4b88      	ldr	r3, [pc, #544]	; (80169f0 <ip4_frag+0x274>)
 80167ce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80167d2:	4988      	ldr	r1, [pc, #544]	; (80169f4 <ip4_frag+0x278>)
 80167d4:	4888      	ldr	r0, [pc, #544]	; (80169f8 <ip4_frag+0x27c>)
 80167d6:	f000 ff7f 	bl	80176d8 <iprintf>
 80167da:	f06f 0305 	mvn.w	r3, #5
 80167de:	e102      	b.n	80169e6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80167e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167e2:	88db      	ldrh	r3, [r3, #6]
 80167e4:	b29b      	uxth	r3, r3
 80167e6:	4618      	mov	r0, r3
 80167e8:	f7f6 f89e 	bl	800c928 <lwip_htons>
 80167ec:	4603      	mov	r3, r0
 80167ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80167f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80167f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80167f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80167fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80167fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016800:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016802:	68fb      	ldr	r3, [r7, #12]
 8016804:	891b      	ldrh	r3, [r3, #8]
 8016806:	3b14      	subs	r3, #20
 8016808:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801680c:	e0e1      	b.n	80169d2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801680e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016810:	00db      	lsls	r3, r3, #3
 8016812:	b29b      	uxth	r3, r3
 8016814:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016818:	4293      	cmp	r3, r2
 801681a:	bf28      	it	cs
 801681c:	4613      	movcs	r3, r2
 801681e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016820:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016824:	2114      	movs	r1, #20
 8016826:	200e      	movs	r0, #14
 8016828:	f7f7 f8f8 	bl	800da1c <pbuf_alloc>
 801682c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016830:	2b00      	cmp	r3, #0
 8016832:	f000 80d5 	beq.w	80169e0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016838:	895b      	ldrh	r3, [r3, #10]
 801683a:	2b13      	cmp	r3, #19
 801683c:	d806      	bhi.n	801684c <ip4_frag+0xd0>
 801683e:	4b6c      	ldr	r3, [pc, #432]	; (80169f0 <ip4_frag+0x274>)
 8016840:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016844:	496d      	ldr	r1, [pc, #436]	; (80169fc <ip4_frag+0x280>)
 8016846:	486c      	ldr	r0, [pc, #432]	; (80169f8 <ip4_frag+0x27c>)
 8016848:	f000 ff46 	bl	80176d8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801684e:	685b      	ldr	r3, [r3, #4]
 8016850:	2214      	movs	r2, #20
 8016852:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016854:	4618      	mov	r0, r3
 8016856:	f000 ff29 	bl	80176ac <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801685c:	685b      	ldr	r3, [r3, #4]
 801685e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016860:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016862:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8016866:	e064      	b.n	8016932 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	895a      	ldrh	r2, [r3, #10]
 801686c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801686e:	1ad3      	subs	r3, r2, r3
 8016870:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	895b      	ldrh	r3, [r3, #10]
 8016876:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016878:	429a      	cmp	r2, r3
 801687a:	d906      	bls.n	801688a <ip4_frag+0x10e>
 801687c:	4b5c      	ldr	r3, [pc, #368]	; (80169f0 <ip4_frag+0x274>)
 801687e:	f240 322d 	movw	r2, #813	; 0x32d
 8016882:	495f      	ldr	r1, [pc, #380]	; (8016a00 <ip4_frag+0x284>)
 8016884:	485c      	ldr	r0, [pc, #368]	; (80169f8 <ip4_frag+0x27c>)
 8016886:	f000 ff27 	bl	80176d8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801688a:	8bfa      	ldrh	r2, [r7, #30]
 801688c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016890:	4293      	cmp	r3, r2
 8016892:	bf28      	it	cs
 8016894:	4613      	movcs	r3, r2
 8016896:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801689a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d105      	bne.n	80168ae <ip4_frag+0x132>
        poff = 0;
 80168a2:	2300      	movs	r3, #0
 80168a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	60fb      	str	r3, [r7, #12]
        continue;
 80168ac:	e041      	b.n	8016932 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80168ae:	f7ff ff0d 	bl	80166cc <ip_frag_alloc_pbuf_custom_ref>
 80168b2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80168b4:	69bb      	ldr	r3, [r7, #24]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d103      	bne.n	80168c2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80168ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168bc:	f7f7 fb92 	bl	800dfe4 <pbuf_free>
        goto memerr;
 80168c0:	e08f      	b.n	80169e2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80168c2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80168c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80168ca:	4413      	add	r3, r2
 80168cc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80168d0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80168d4:	9201      	str	r2, [sp, #4]
 80168d6:	9300      	str	r3, [sp, #0]
 80168d8:	4603      	mov	r3, r0
 80168da:	2241      	movs	r2, #65	; 0x41
 80168dc:	2000      	movs	r0, #0
 80168de:	f7f7 f9c7 	bl	800dc70 <pbuf_alloced_custom>
 80168e2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80168e4:	697b      	ldr	r3, [r7, #20]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d106      	bne.n	80168f8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80168ea:	69b8      	ldr	r0, [r7, #24]
 80168ec:	f7ff fef6 	bl	80166dc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80168f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168f2:	f7f7 fb77 	bl	800dfe4 <pbuf_free>
        goto memerr;
 80168f6:	e074      	b.n	80169e2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80168f8:	68f8      	ldr	r0, [r7, #12]
 80168fa:	f7f7 fc13 	bl	800e124 <pbuf_ref>
      pcr->original = p;
 80168fe:	69bb      	ldr	r3, [r7, #24]
 8016900:	68fa      	ldr	r2, [r7, #12]
 8016902:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016904:	69bb      	ldr	r3, [r7, #24]
 8016906:	4a3f      	ldr	r2, [pc, #252]	; (8016a04 <ip4_frag+0x288>)
 8016908:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801690a:	6979      	ldr	r1, [r7, #20]
 801690c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801690e:	f7f7 fc2b 	bl	800e168 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016912:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016916:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801691a:	1ad3      	subs	r3, r2, r3
 801691c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016920:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016924:	2b00      	cmp	r3, #0
 8016926:	d004      	beq.n	8016932 <ip4_frag+0x1b6>
        poff = 0;
 8016928:	2300      	movs	r3, #0
 801692a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016932:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016936:	2b00      	cmp	r3, #0
 8016938:	d196      	bne.n	8016868 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801693a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801693c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016940:	4413      	add	r3, r2
 8016942:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016948:	f1a3 0213 	sub.w	r2, r3, #19
 801694c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016950:	429a      	cmp	r2, r3
 8016952:	bfcc      	ite	gt
 8016954:	2301      	movgt	r3, #1
 8016956:	2300      	movle	r3, #0
 8016958:	b2db      	uxtb	r3, r3
 801695a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801695c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016960:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016964:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8016966:	6a3b      	ldr	r3, [r7, #32]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d002      	beq.n	8016972 <ip4_frag+0x1f6>
 801696c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801696e:	2b00      	cmp	r3, #0
 8016970:	d003      	beq.n	801697a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016972:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016974:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016978:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801697a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801697c:	4618      	mov	r0, r3
 801697e:	f7f5 ffd3 	bl	800c928 <lwip_htons>
 8016982:	4603      	mov	r3, r0
 8016984:	461a      	mov	r2, r3
 8016986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016988:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801698a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801698c:	3314      	adds	r3, #20
 801698e:	b29b      	uxth	r3, r3
 8016990:	4618      	mov	r0, r3
 8016992:	f7f5 ffc9 	bl	800c928 <lwip_htons>
 8016996:	4603      	mov	r3, r0
 8016998:	461a      	mov	r2, r3
 801699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801699c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169a0:	2200      	movs	r2, #0
 80169a2:	729a      	strb	r2, [r3, #10]
 80169a4:	2200      	movs	r2, #0
 80169a6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	695b      	ldr	r3, [r3, #20]
 80169ac:	687a      	ldr	r2, [r7, #4]
 80169ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169b0:	68b8      	ldr	r0, [r7, #8]
 80169b2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80169b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169b6:	f7f7 fb15 	bl	800dfe4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80169ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80169be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80169c0:	1ad3      	subs	r3, r2, r3
 80169c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80169c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80169ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80169cc:	4413      	add	r3, r2
 80169ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80169d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	f47f af19 	bne.w	801680e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80169dc:	2300      	movs	r3, #0
 80169de:	e002      	b.n	80169e6 <ip4_frag+0x26a>
      goto memerr;
 80169e0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80169e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80169e6:	4618      	mov	r0, r3
 80169e8:	3748      	adds	r7, #72	; 0x48
 80169ea:	46bd      	mov	sp, r7
 80169ec:	bd80      	pop	{r7, pc}
 80169ee:	bf00      	nop
 80169f0:	0801aeb4 	.word	0x0801aeb4
 80169f4:	0801b090 	.word	0x0801b090
 80169f8:	0801aefc 	.word	0x0801aefc
 80169fc:	0801b0ac 	.word	0x0801b0ac
 8016a00:	0801b0cc 	.word	0x0801b0cc
 8016a04:	08016715 	.word	0x08016715

08016a08 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b086      	sub	sp, #24
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
 8016a10:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016a12:	230e      	movs	r3, #14
 8016a14:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	895b      	ldrh	r3, [r3, #10]
 8016a1a:	2b0e      	cmp	r3, #14
 8016a1c:	d96e      	bls.n	8016afc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	7bdb      	ldrb	r3, [r3, #15]
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d106      	bne.n	8016a34 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016a26:	683b      	ldr	r3, [r7, #0]
 8016a28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a2c:	3301      	adds	r3, #1
 8016a2e:	b2da      	uxtb	r2, r3
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	685b      	ldr	r3, [r3, #4]
 8016a38:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016a3a:	693b      	ldr	r3, [r7, #16]
 8016a3c:	7b1a      	ldrb	r2, [r3, #12]
 8016a3e:	7b5b      	ldrb	r3, [r3, #13]
 8016a40:	021b      	lsls	r3, r3, #8
 8016a42:	4313      	orrs	r3, r2
 8016a44:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016a46:	693b      	ldr	r3, [r7, #16]
 8016a48:	781b      	ldrb	r3, [r3, #0]
 8016a4a:	f003 0301 	and.w	r3, r3, #1
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d023      	beq.n	8016a9a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016a52:	693b      	ldr	r3, [r7, #16]
 8016a54:	781b      	ldrb	r3, [r3, #0]
 8016a56:	2b01      	cmp	r3, #1
 8016a58:	d10f      	bne.n	8016a7a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016a5a:	693b      	ldr	r3, [r7, #16]
 8016a5c:	785b      	ldrb	r3, [r3, #1]
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d11b      	bne.n	8016a9a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016a62:	693b      	ldr	r3, [r7, #16]
 8016a64:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016a66:	2b5e      	cmp	r3, #94	; 0x5e
 8016a68:	d117      	bne.n	8016a9a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	7b5b      	ldrb	r3, [r3, #13]
 8016a6e:	f043 0310 	orr.w	r3, r3, #16
 8016a72:	b2da      	uxtb	r2, r3
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	735a      	strb	r2, [r3, #13]
 8016a78:	e00f      	b.n	8016a9a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016a7a:	693b      	ldr	r3, [r7, #16]
 8016a7c:	2206      	movs	r2, #6
 8016a7e:	4928      	ldr	r1, [pc, #160]	; (8016b20 <ethernet_input+0x118>)
 8016a80:	4618      	mov	r0, r3
 8016a82:	f000 fe03 	bl	801768c <memcmp>
 8016a86:	4603      	mov	r3, r0
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d106      	bne.n	8016a9a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	7b5b      	ldrb	r3, [r3, #13]
 8016a90:	f043 0308 	orr.w	r3, r3, #8
 8016a94:	b2da      	uxtb	r2, r3
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016a9a:	89fb      	ldrh	r3, [r7, #14]
 8016a9c:	2b08      	cmp	r3, #8
 8016a9e:	d003      	beq.n	8016aa8 <ethernet_input+0xa0>
 8016aa0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016aa4:	d014      	beq.n	8016ad0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016aa6:	e032      	b.n	8016b0e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016aa8:	683b      	ldr	r3, [r7, #0]
 8016aaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016aae:	f003 0308 	and.w	r3, r3, #8
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d024      	beq.n	8016b00 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016ab6:	8afb      	ldrh	r3, [r7, #22]
 8016ab8:	4619      	mov	r1, r3
 8016aba:	6878      	ldr	r0, [r7, #4]
 8016abc:	f7f7 fa0c 	bl	800ded8 <pbuf_remove_header>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d11e      	bne.n	8016b04 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016ac6:	6839      	ldr	r1, [r7, #0]
 8016ac8:	6878      	ldr	r0, [r7, #4]
 8016aca:	f7fe ff21 	bl	8015910 <ip4_input>
      break;
 8016ace:	e013      	b.n	8016af8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016ad0:	683b      	ldr	r3, [r7, #0]
 8016ad2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ad6:	f003 0308 	and.w	r3, r3, #8
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d014      	beq.n	8016b08 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016ade:	8afb      	ldrh	r3, [r7, #22]
 8016ae0:	4619      	mov	r1, r3
 8016ae2:	6878      	ldr	r0, [r7, #4]
 8016ae4:	f7f7 f9f8 	bl	800ded8 <pbuf_remove_header>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d10e      	bne.n	8016b0c <ethernet_input+0x104>
        etharp_input(p, netif);
 8016aee:	6839      	ldr	r1, [r7, #0]
 8016af0:	6878      	ldr	r0, [r7, #4]
 8016af2:	f7fe f8c1 	bl	8014c78 <etharp_input>
      break;
 8016af6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016af8:	2300      	movs	r3, #0
 8016afa:	e00c      	b.n	8016b16 <ethernet_input+0x10e>
    goto free_and_return;
 8016afc:	bf00      	nop
 8016afe:	e006      	b.n	8016b0e <ethernet_input+0x106>
        goto free_and_return;
 8016b00:	bf00      	nop
 8016b02:	e004      	b.n	8016b0e <ethernet_input+0x106>
        goto free_and_return;
 8016b04:	bf00      	nop
 8016b06:	e002      	b.n	8016b0e <ethernet_input+0x106>
        goto free_and_return;
 8016b08:	bf00      	nop
 8016b0a:	e000      	b.n	8016b0e <ethernet_input+0x106>
        goto free_and_return;
 8016b0c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016b0e:	6878      	ldr	r0, [r7, #4]
 8016b10:	f7f7 fa68 	bl	800dfe4 <pbuf_free>
  return ERR_OK;
 8016b14:	2300      	movs	r3, #0
}
 8016b16:	4618      	mov	r0, r3
 8016b18:	3718      	adds	r7, #24
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}
 8016b1e:	bf00      	nop
 8016b20:	0801b270 	.word	0x0801b270

08016b24 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016b24:	b580      	push	{r7, lr}
 8016b26:	b086      	sub	sp, #24
 8016b28:	af00      	add	r7, sp, #0
 8016b2a:	60f8      	str	r0, [r7, #12]
 8016b2c:	60b9      	str	r1, [r7, #8]
 8016b2e:	607a      	str	r2, [r7, #4]
 8016b30:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016b32:	8c3b      	ldrh	r3, [r7, #32]
 8016b34:	4618      	mov	r0, r3
 8016b36:	f7f5 fef7 	bl	800c928 <lwip_htons>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016b3e:	210e      	movs	r1, #14
 8016b40:	68b8      	ldr	r0, [r7, #8]
 8016b42:	f7f7 f9b9 	bl	800deb8 <pbuf_add_header>
 8016b46:	4603      	mov	r3, r0
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d125      	bne.n	8016b98 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016b4c:	68bb      	ldr	r3, [r7, #8]
 8016b4e:	685b      	ldr	r3, [r3, #4]
 8016b50:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016b52:	693b      	ldr	r3, [r7, #16]
 8016b54:	8afa      	ldrh	r2, [r7, #22]
 8016b56:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016b58:	693b      	ldr	r3, [r7, #16]
 8016b5a:	2206      	movs	r2, #6
 8016b5c:	6839      	ldr	r1, [r7, #0]
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f000 fda4 	bl	80176ac <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016b64:	693b      	ldr	r3, [r7, #16]
 8016b66:	3306      	adds	r3, #6
 8016b68:	2206      	movs	r2, #6
 8016b6a:	6879      	ldr	r1, [r7, #4]
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f000 fd9d 	bl	80176ac <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016b72:	68fb      	ldr	r3, [r7, #12]
 8016b74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016b78:	2b06      	cmp	r3, #6
 8016b7a:	d006      	beq.n	8016b8a <ethernet_output+0x66>
 8016b7c:	4b0a      	ldr	r3, [pc, #40]	; (8016ba8 <ethernet_output+0x84>)
 8016b7e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016b82:	490a      	ldr	r1, [pc, #40]	; (8016bac <ethernet_output+0x88>)
 8016b84:	480a      	ldr	r0, [pc, #40]	; (8016bb0 <ethernet_output+0x8c>)
 8016b86:	f000 fda7 	bl	80176d8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	699b      	ldr	r3, [r3, #24]
 8016b8e:	68b9      	ldr	r1, [r7, #8]
 8016b90:	68f8      	ldr	r0, [r7, #12]
 8016b92:	4798      	blx	r3
 8016b94:	4603      	mov	r3, r0
 8016b96:	e002      	b.n	8016b9e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016b98:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016b9a:	f06f 0301 	mvn.w	r3, #1
}
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	3718      	adds	r7, #24
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}
 8016ba6:	bf00      	nop
 8016ba8:	0801b0dc 	.word	0x0801b0dc
 8016bac:	0801b114 	.word	0x0801b114
 8016bb0:	0801b148 	.word	0x0801b148

08016bb4 <HAL_ADC_ConvCpltCallback>:
/**@brief the flag of the adc when interrupt ISR called */
uint8_t adc_callback_flag = ADC_FLAG_RESET;

/**@brief the complete convertion callback function this implentations */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8016bb4:	b480      	push	{r7}
 8016bb6:	b083      	sub	sp, #12
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
	if(hadc == ADC_HANDLE_ADDR)
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	4a06      	ldr	r2, [pc, #24]	; (8016bd8 <HAL_ADC_ConvCpltCallback+0x24>)
 8016bc0:	4293      	cmp	r3, r2
 8016bc2:	d102      	bne.n	8016bca <HAL_ADC_ConvCpltCallback+0x16>
	{
		/* just set the callback to indicate CPU convertion completed */
		adc_callback_flag = ADC_FLAG_SET;
 8016bc4:	4b05      	ldr	r3, [pc, #20]	; (8016bdc <HAL_ADC_ConvCpltCallback+0x28>)
 8016bc6:	2201      	movs	r2, #1
 8016bc8:	701a      	strb	r2, [r3, #0]
	}
}
 8016bca:	bf00      	nop
 8016bcc:	370c      	adds	r7, #12
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd4:	4770      	bx	lr
 8016bd6:	bf00      	nop
 8016bd8:	200001ec 	.word	0x200001ec
 8016bdc:	20009128 	.word	0x20009128

08016be0 <ADC_UUT_DMA>:
/**
 * @brief	the adc under unit tests function, the funtion checks if the adc value got is the expected value.
 * 			the expected value is according to which the ADC peripheral connected to.
 */
t_status ADC_UUT_DMA(uint8_t iterations)
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b086      	sub	sp, #24
 8016be4:	af02      	add	r7, sp, #8
 8016be6:	4603      	mov	r3, r0
 8016be8:	71fb      	strb	r3, [r7, #7]
	/* start the dma functionality */
	HAL_ADC_Start_DMA(ADC_HANDLE_ADDR, &adc_value, (uint32_t)ADC_NUM_OF_SAMPLES);
 8016bea:	2201      	movs	r2, #1
 8016bec:	491e      	ldr	r1, [pc, #120]	; (8016c68 <ADC_UUT_DMA+0x88>)
 8016bee:	481f      	ldr	r0, [pc, #124]	; (8016c6c <ADC_UUT_DMA+0x8c>)
 8016bf0:	f7ec f968 	bl	8002ec4 <HAL_ADC_Start_DMA>

	/* the status to check the functions in the iterations */
	HAL_StatusTypeDef status = HAL_ERROR;
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	73fb      	strb	r3, [r7, #15]

	while(iterations)
 8016bf8:	e02d      	b.n	8016c56 <ADC_UUT_DMA+0x76>
	{

		/* start ADC convertion */
		status = HAL_ADC_Start(ADC_HANDLE_ADDR);
 8016bfa:	481c      	ldr	r0, [pc, #112]	; (8016c6c <ADC_UUT_DMA+0x8c>)
 8016bfc:	f7eb ff84 	bl	8002b08 <HAL_ADC_Start>
 8016c00:	4603      	mov	r3, r0
 8016c02:	73fb      	strb	r3, [r7, #15]

		/* check if start correctly */
		if(status != HAL_OK)
 8016c04:	7bfb      	ldrb	r3, [r7, #15]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d001      	beq.n	8016c0e <ADC_UUT_DMA+0x2e>
		{
			return TEST_FAILED;
 8016c0a:	23ff      	movs	r3, #255	; 0xff
 8016c0c:	e027      	b.n	8016c5e <ADC_UUT_DMA+0x7e>
		}

		/* check callback complete flag */
		if(wait_till_flag_set_or_timeout(IS_ADC,ADC_HANDLE_ADDR->DMA_Handle, &adc_callback_flag, ADC_TIMEOUT, ADC_DMA_TIME) != WAIT_STATUS_OK)
 8016c0e:	4b17      	ldr	r3, [pc, #92]	; (8016c6c <ADC_UUT_DMA+0x8c>)
 8016c10:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8016c12:	2300      	movs	r3, #0
 8016c14:	9300      	str	r3, [sp, #0]
 8016c16:	2332      	movs	r3, #50	; 0x32
 8016c18:	4a15      	ldr	r2, [pc, #84]	; (8016c70 <ADC_UUT_DMA+0x90>)
 8016c1a:	2001      	movs	r0, #1
 8016c1c:	f000 f87e 	bl	8016d1c <wait_till_flag_set_or_timeout>
 8016c20:	4603      	mov	r3, r0
 8016c22:	2b01      	cmp	r3, #1
 8016c24:	d001      	beq.n	8016c2a <ADC_UUT_DMA+0x4a>
		{
			return TEST_FAILED;
 8016c26:	23ff      	movs	r3, #255	; 0xff
 8016c28:	e019      	b.n	8016c5e <ADC_UUT_DMA+0x7e>
		}
		else
		{
			/* check if ADC expected value is between the deviation allowed ADC_VAL +/- DEVIATION if it is continue to next iteration */
			if(! (ADC_EXPECTED_VALUE - ADC_DEVIATION <= adc_value && adc_value <= ADC_EXPECTED_VALUE + ADC_DEVIATION ))
 8016c2a:	4b0f      	ldr	r3, [pc, #60]	; (8016c68 <ADC_UUT_DMA+0x88>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	f5b3 6f7b 	cmp.w	r3, #4016	; 0xfb0
 8016c32:	d305      	bcc.n	8016c40 <ADC_UUT_DMA+0x60>
 8016c34:	4b0c      	ldr	r3, [pc, #48]	; (8016c68 <ADC_UUT_DMA+0x88>)
 8016c36:	681b      	ldr	r3, [r3, #0]
 8016c38:	f241 0250 	movw	r2, #4176	; 0x1050
 8016c3c:	4293      	cmp	r3, r2
 8016c3e:	d904      	bls.n	8016c4a <ADC_UUT_DMA+0x6a>
			{
				/* reset the callback flag */
				adc_callback_flag = ADC_FLAG_RESET;
 8016c40:	4b0b      	ldr	r3, [pc, #44]	; (8016c70 <ADC_UUT_DMA+0x90>)
 8016c42:	2200      	movs	r2, #0
 8016c44:	701a      	strb	r2, [r3, #0]
				return TEST_FAILED;
 8016c46:	23ff      	movs	r3, #255	; 0xff
 8016c48:	e009      	b.n	8016c5e <ADC_UUT_DMA+0x7e>
			}
			/* reset the callback flag */
			adc_callback_flag = ADC_FLAG_RESET;
 8016c4a:	4b09      	ldr	r3, [pc, #36]	; (8016c70 <ADC_UUT_DMA+0x90>)
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	701a      	strb	r2, [r3, #0]

		}

		--iterations;
 8016c50:	79fb      	ldrb	r3, [r7, #7]
 8016c52:	3b01      	subs	r3, #1
 8016c54:	71fb      	strb	r3, [r7, #7]
	while(iterations)
 8016c56:	79fb      	ldrb	r3, [r7, #7]
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d1ce      	bne.n	8016bfa <ADC_UUT_DMA+0x1a>
	}

	/* if all iterations passed return TEST passed successfully */
	return TEST_SUCCEED;
 8016c5c:	2301      	movs	r3, #1
}
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3710      	adds	r7, #16
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bd80      	pop	{r7, pc}
 8016c66:	bf00      	nop
 8016c68:	20009124 	.word	0x20009124
 8016c6c:	200001ec 	.word	0x200001ec
 8016c70:	20009128 	.word	0x20009128

08016c74 <_write>:
	return ch;
}

/**@brief used for printf from the the terminal that connected to the port of the USB redirect printf*/
int _write(int file, char *ptr, int len)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b084      	sub	sp, #16
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	60f8      	str	r0, [r7, #12]
 8016c7c:	60b9      	str	r1, [r7, #8]
 8016c7e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, len, 0xFFFF);
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	b29a      	uxth	r2, r3
 8016c84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c88:	68b9      	ldr	r1, [r7, #8]
 8016c8a:	4804      	ldr	r0, [pc, #16]	; (8016c9c <_write+0x28>)
 8016c8c:	f7f3 fa80 	bl	800a190 <HAL_UART_Transmit>
	return len;
 8016c90:	687b      	ldr	r3, [r7, #4]
}
 8016c92:	4618      	mov	r0, r3
 8016c94:	3710      	adds	r7, #16
 8016c96:	46bd      	mov	sp, r7
 8016c98:	bd80      	pop	{r7, pc}
 8016c9a:	bf00      	nop
 8016c9c:	200007d8 	.word	0x200007d8

08016ca0 <_read>:

/**@brief used for scanf from the the terminal that connected to the port of the USB redirect scanf*/
int _read(int file, char *ptr, int len)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b086      	sub	sp, #24
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	60f8      	str	r0, [r7, #12]
 8016ca8:	60b9      	str	r1, [r7, #8]
 8016caa:	607a      	str	r2, [r7, #4]
	int ch=0;
 8016cac:	2300      	movs	r3, #0
 8016cae:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUG, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8016cb0:	f107 0114 	add.w	r1, r7, #20
 8016cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cb8:	2201      	movs	r2, #1
 8016cba:	4817      	ldr	r0, [pc, #92]	; (8016d18 <_read+0x78>)
 8016cbc:	f7f3 faeb 	bl	800a296 <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8016cc0:	f107 0114 	add.w	r1, r7, #20
 8016cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cc8:	2201      	movs	r2, #1
 8016cca:	4813      	ldr	r0, [pc, #76]	; (8016d18 <_read+0x78>)
 8016ccc:	f7f3 fa60 	bl	800a190 <HAL_UART_Transmit>
	if(ch==13)
 8016cd0:	697b      	ldr	r3, [r7, #20]
 8016cd2:	2b0d      	cmp	r3, #13
 8016cd4:	d10a      	bne.n	8016cec <_read+0x4c>
	{
		ch=10;
 8016cd6:	230a      	movs	r3, #10
 8016cd8:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8016cda:	f107 0114 	add.w	r1, r7, #20
 8016cde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016ce2:	2201      	movs	r2, #1
 8016ce4:	480c      	ldr	r0, [pc, #48]	; (8016d18 <_read+0x78>)
 8016ce6:	f7f3 fa53 	bl	800a190 <HAL_UART_Transmit>
 8016cea:	e00c      	b.n	8016d06 <_read+0x66>
	}
	else if(ch==8)
 8016cec:	697b      	ldr	r3, [r7, #20]
 8016cee:	2b08      	cmp	r3, #8
 8016cf0:	d109      	bne.n	8016d06 <_read+0x66>
	{
		ch=0x30;
 8016cf2:	2330      	movs	r3, #48	; 0x30
 8016cf4:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8016cf6:	f107 0114 	add.w	r1, r7, #20
 8016cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016cfe:	2201      	movs	r2, #1
 8016d00:	4805      	ldr	r0, [pc, #20]	; (8016d18 <_read+0x78>)
 8016d02:	f7f3 fa45 	bl	800a190 <HAL_UART_Transmit>
	}

	*ptr=ch;
 8016d06:	697b      	ldr	r3, [r7, #20]
 8016d08:	b2da      	uxtb	r2, r3
 8016d0a:	68bb      	ldr	r3, [r7, #8]
 8016d0c:	701a      	strb	r2, [r3, #0]

	return 1;
 8016d0e:	2301      	movs	r3, #1
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	3718      	adds	r7, #24
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}
 8016d18:	200007d8 	.word	0x200007d8

08016d1c <wait_till_flag_set_or_timeout>:

}

/**@brief	general function for checking flag of some interrupt driven function in a given maximum waiting time. */
WaitFlag_Status wait_till_flag_set_or_timeout(uint8_t isADC, DMA_HandleTypeDef *hdma, uint8_t* flag, uint32_t timeout, uint32_t dma_wait_time)
{
 8016d1c:	b580      	push	{r7, lr}
 8016d1e:	b086      	sub	sp, #24
 8016d20:	af00      	add	r7, sp, #0
 8016d22:	60b9      	str	r1, [r7, #8]
 8016d24:	607a      	str	r2, [r7, #4]
 8016d26:	603b      	str	r3, [r7, #0]
 8016d28:	4603      	mov	r3, r0
 8016d2a:	73fb      	strb	r3, [r7, #15]
	uint32_t start = HAL_GetTick();
 8016d2c:	f7eb fe78 	bl	8002a20 <HAL_GetTick>
 8016d30:	6178      	str	r0, [r7, #20]

	while((*flag) != CALLBACK_FLAG_SET)
 8016d32:	e009      	b.n	8016d48 <wait_till_flag_set_or_timeout+0x2c>
	{
		if((HAL_GetTick()-start) > timeout)
 8016d34:	f7eb fe74 	bl	8002a20 <HAL_GetTick>
 8016d38:	4602      	mov	r2, r0
 8016d3a:	697b      	ldr	r3, [r7, #20]
 8016d3c:	1ad3      	subs	r3, r2, r3
 8016d3e:	683a      	ldr	r2, [r7, #0]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	d201      	bcs.n	8016d48 <wait_till_flag_set_or_timeout+0x2c>
			return WAIT_STATUS_TIMEOUT;
 8016d44:	2300      	movs	r3, #0
 8016d46:	e023      	b.n	8016d90 <wait_till_flag_set_or_timeout+0x74>
	while((*flag) != CALLBACK_FLAG_SET)
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	781b      	ldrb	r3, [r3, #0]
 8016d4c:	2b01      	cmp	r3, #1
 8016d4e:	d1f1      	bne.n	8016d34 <wait_till_flag_set_or_timeout+0x18>
	}

	/* reset the flag */
	*flag = CALLBACK_FLAG_RESET;
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	2200      	movs	r2, #0
 8016d54:	701a      	strb	r2, [r3, #0]


	/* ********** waiting for dma to finish **************** */
	if(!isADC)
 8016d56:	7bfb      	ldrb	r3, [r7, #15]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d115      	bne.n	8016d88 <wait_till_flag_set_or_timeout+0x6c>
	{
		start = HAL_GetTick();
 8016d5c:	f7eb fe60 	bl	8002a20 <HAL_GetTick>
 8016d60:	6178      	str	r0, [r7, #20]
		while(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8016d62:	e009      	b.n	8016d78 <wait_till_flag_set_or_timeout+0x5c>
		{
			if((HAL_GetTick()-start) > dma_wait_time)
 8016d64:	f7eb fe5c 	bl	8002a20 <HAL_GetTick>
 8016d68:	4602      	mov	r2, r0
 8016d6a:	697b      	ldr	r3, [r7, #20]
 8016d6c:	1ad3      	subs	r3, r2, r3
 8016d6e:	6a3a      	ldr	r2, [r7, #32]
 8016d70:	429a      	cmp	r2, r3
 8016d72:	d201      	bcs.n	8016d78 <wait_till_flag_set_or_timeout+0x5c>
				return WAIT_STATUS_TIMEOUT;
 8016d74:	2300      	movs	r3, #0
 8016d76:	e00b      	b.n	8016d90 <wait_till_flag_set_or_timeout+0x74>
		while(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8016d78:	68bb      	ldr	r3, [r7, #8]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	f003 0310 	and.w	r3, r3, #16
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d1ee      	bne.n	8016d64 <wait_till_flag_set_or_timeout+0x48>
 8016d86:	e002      	b.n	8016d8e <wait_till_flag_set_or_timeout+0x72>
		}
	}
	else
	{
		//for adc
		HAL_Delay(dma_wait_time);
 8016d88:	6a38      	ldr	r0, [r7, #32]
 8016d8a:	f7eb fe55 	bl	8002a38 <HAL_Delay>
	}
	/* ***************************************************** */

	return WAIT_STATUS_OK;
 8016d8e:	2301      	movs	r3, #1
}
 8016d90:	4618      	mov	r0, r3
 8016d92:	3718      	adds	r7, #24
 8016d94:	46bd      	mov	sp, r7
 8016d96:	bd80      	pop	{r7, pc}

08016d98 <HAL_I2C_MasterRxCpltCallback>:
static uint8_t i2c_slave_rcv_callback_flag = CALLBACK_FLAG_RESET;


/**@brief  Master Rx Transfer completed callback. */
void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016d98:	b480      	push	{r7}
 8016d9a:	b083      	sub	sp, #12
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C_MASTER->Instance)
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	681a      	ldr	r2, [r3, #0]
 8016da4:	4b06      	ldr	r3, [pc, #24]	; (8016dc0 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	429a      	cmp	r2, r3
 8016daa:	d102      	bne.n	8016db2 <HAL_I2C_MasterRxCpltCallback+0x1a>
	{
		i2c_master_rcv_callback_flag = CALLBACK_FLAG_SET;
 8016dac:	4b05      	ldr	r3, [pc, #20]	; (8016dc4 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 8016dae:	2201      	movs	r2, #1
 8016db0:	701a      	strb	r2, [r3, #0]
	}
}
 8016db2:	bf00      	nop
 8016db4:	370c      	adds	r7, #12
 8016db6:	46bd      	mov	sp, r7
 8016db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dbc:	4770      	bx	lr
 8016dbe:	bf00      	nop
 8016dc0:	200002e8 	.word	0x200002e8
 8016dc4:	2000932b 	.word	0x2000932b

08016dc8 <HAL_I2C_SlaveRxCpltCallback>:

/**@brief  Slave Rx Transfer completed callback.  */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8016dc8:	b480      	push	{r7}
 8016dca:	b083      	sub	sp, #12
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C_SLAVE->Instance)
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	681a      	ldr	r2, [r3, #0]
 8016dd4:	4b06      	ldr	r3, [pc, #24]	; (8016df0 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	429a      	cmp	r2, r3
 8016dda:	d102      	bne.n	8016de2 <HAL_I2C_SlaveRxCpltCallback+0x1a>
	{
		i2c_slave_rcv_callback_flag = CALLBACK_FLAG_SET;
 8016ddc:	4b05      	ldr	r3, [pc, #20]	; (8016df4 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 8016dde:	2201      	movs	r2, #1
 8016de0:	701a      	strb	r2, [r3, #0]
	}
}
 8016de2:	bf00      	nop
 8016de4:	370c      	adds	r7, #12
 8016de6:	46bd      	mov	sp, r7
 8016de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dec:	4770      	bx	lr
 8016dee:	bf00      	nop
 8016df0:	20000294 	.word	0x20000294
 8016df4:	2000932c 	.word	0x2000932c

08016df8 <I2C_UUT_DMA>:
 * @fn 		t_status UART_DMA_UUT(uint8_t *bit_pattern, uint8_t bit_pattern_length, uint8_t iterations)
 * @brief	the I2C under unit test, tests if bit pattern equals to the same data received after
 * 			completing a communication cycle (data sent as follows: Master -> Slave -> Master)
 */
t_status I2C_UUT_DMA(uint8_t *bit_pattern, uint8_t bit_pattern_length, uint8_t iterations)
{
 8016df8:	b580      	push	{r7, lr}
 8016dfa:	b086      	sub	sp, #24
 8016dfc:	af02      	add	r7, sp, #8
 8016dfe:	6078      	str	r0, [r7, #4]
 8016e00:	460b      	mov	r3, r1
 8016e02:	70fb      	strb	r3, [r7, #3]
 8016e04:	4613      	mov	r3, r2
 8016e06:	70bb      	strb	r3, [r7, #2]
	/* check status of receive transmit, error detection. */
	HAL_StatusTypeDef status = HAL_ERROR;
 8016e08:	2301      	movs	r3, #1
 8016e0a:	73fb      	strb	r3, [r7, #15]

	while(iterations)
 8016e0c:	e05f      	b.n	8016ece <I2C_UUT_DMA+0xd6>
	{
		/* Master -> Slave */
		status = HAL_I2C_Slave_Receive_DMA(I2C_SLAVE, i2c_buffer_slave, bit_pattern_length);
 8016e0e:	78fb      	ldrb	r3, [r7, #3]
 8016e10:	b29b      	uxth	r3, r3
 8016e12:	461a      	mov	r2, r3
 8016e14:	4932      	ldr	r1, [pc, #200]	; (8016ee0 <I2C_UUT_DMA+0xe8>)
 8016e16:	4833      	ldr	r0, [pc, #204]	; (8016ee4 <I2C_UUT_DMA+0xec>)
 8016e18:	f7ee ff76 	bl	8005d08 <HAL_I2C_Slave_Receive_DMA>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	73fb      	strb	r3, [r7, #15]

		if(status != HAL_OK)
 8016e20:	7bfb      	ldrb	r3, [r7, #15]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d001      	beq.n	8016e2a <I2C_UUT_DMA+0x32>
		{
			return TEST_FAILED;
 8016e26:	23ff      	movs	r3, #255	; 0xff
 8016e28:	e055      	b.n	8016ed6 <I2C_UUT_DMA+0xde>
		}

		status = HAL_I2C_Master_Transmit_DMA(I2C_MASTER, I2C_SLAVE_ADDRESS, (uint8_t *)bit_pattern, bit_pattern_length);
 8016e2a:	78fb      	ldrb	r3, [r7, #3]
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	687a      	ldr	r2, [r7, #4]
 8016e30:	211e      	movs	r1, #30
 8016e32:	482d      	ldr	r0, [pc, #180]	; (8016ee8 <I2C_UUT_DMA+0xf0>)
 8016e34:	f7ee fcd2 	bl	80057dc <HAL_I2C_Master_Transmit_DMA>
 8016e38:	4603      	mov	r3, r0
 8016e3a:	73fb      	strb	r3, [r7, #15]

		if(status != HAL_OK)
 8016e3c:	7bfb      	ldrb	r3, [r7, #15]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d001      	beq.n	8016e46 <I2C_UUT_DMA+0x4e>
		{
			return TEST_FAILED;
 8016e42:	23ff      	movs	r3, #255	; 0xff
 8016e44:	e047      	b.n	8016ed6 <I2C_UUT_DMA+0xde>
		}
		/* end commands Master -> Slave */

		/* check callback complete flag */
		if(wait_till_flag_set_or_timeout(NOT_ADC,I2C_MASTER->hdmarx,&i2c_slave_rcv_callback_flag, I2C_TIMEOUT, I2C_DMA_TIME) != WAIT_STATUS_OK)
 8016e46:	4b28      	ldr	r3, [pc, #160]	; (8016ee8 <I2C_UUT_DMA+0xf0>)
 8016e48:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016e4a:	2314      	movs	r3, #20
 8016e4c:	9300      	str	r3, [sp, #0]
 8016e4e:	2332      	movs	r3, #50	; 0x32
 8016e50:	4a26      	ldr	r2, [pc, #152]	; (8016eec <I2C_UUT_DMA+0xf4>)
 8016e52:	2000      	movs	r0, #0
 8016e54:	f7ff ff62 	bl	8016d1c <wait_till_flag_set_or_timeout>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	2b01      	cmp	r3, #1
 8016e5c:	d001      	beq.n	8016e62 <I2C_UUT_DMA+0x6a>
		{
			return TEST_FAILED;
 8016e5e:	23ff      	movs	r3, #255	; 0xff
 8016e60:	e039      	b.n	8016ed6 <I2C_UUT_DMA+0xde>
		}

		/* Slave -> Master */
		status = HAL_I2C_Master_Receive_DMA(I2C_MASTER, I2C_SLAVE_ADDRESS, i2c_buffer_master, bit_pattern_length);
 8016e62:	78fb      	ldrb	r3, [r7, #3]
 8016e64:	b29b      	uxth	r3, r3
 8016e66:	4a22      	ldr	r2, [pc, #136]	; (8016ef0 <I2C_UUT_DMA+0xf8>)
 8016e68:	211e      	movs	r1, #30
 8016e6a:	481f      	ldr	r0, [pc, #124]	; (8016ee8 <I2C_UUT_DMA+0xf0>)
 8016e6c:	f7ee fda6 	bl	80059bc <HAL_I2C_Master_Receive_DMA>
 8016e70:	4603      	mov	r3, r0
 8016e72:	73fb      	strb	r3, [r7, #15]

		if(status != HAL_OK)
 8016e74:	7bfb      	ldrb	r3, [r7, #15]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d001      	beq.n	8016e7e <I2C_UUT_DMA+0x86>
		{
			return TEST_FAILED;
 8016e7a:	23ff      	movs	r3, #255	; 0xff
 8016e7c:	e02b      	b.n	8016ed6 <I2C_UUT_DMA+0xde>
		}

		status = HAL_I2C_Slave_Transmit_DMA(I2C_SLAVE, i2c_buffer_slave, bit_pattern_length);
 8016e7e:	78fb      	ldrb	r3, [r7, #3]
 8016e80:	b29b      	uxth	r3, r3
 8016e82:	461a      	mov	r2, r3
 8016e84:	4916      	ldr	r1, [pc, #88]	; (8016ee0 <I2C_UUT_DMA+0xe8>)
 8016e86:	4817      	ldr	r0, [pc, #92]	; (8016ee4 <I2C_UUT_DMA+0xec>)
 8016e88:	f7ee fe88 	bl	8005b9c <HAL_I2C_Slave_Transmit_DMA>
 8016e8c:	4603      	mov	r3, r0
 8016e8e:	73fb      	strb	r3, [r7, #15]

		if(status != HAL_OK)
 8016e90:	7bfb      	ldrb	r3, [r7, #15]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d001      	beq.n	8016e9a <I2C_UUT_DMA+0xa2>
		{
			return TEST_FAILED;
 8016e96:	23ff      	movs	r3, #255	; 0xff
 8016e98:	e01d      	b.n	8016ed6 <I2C_UUT_DMA+0xde>
		}
		/* end commands Slave -> Master */

		/* check callback complete flag */
		if(wait_till_flag_set_or_timeout(NOT_ADC,I2C_SLAVE->hdmarx, &i2c_master_rcv_callback_flag, I2C_TIMEOUT, I2C_DMA_TIME) != WAIT_STATUS_OK)
 8016e9a:	4b12      	ldr	r3, [pc, #72]	; (8016ee4 <I2C_UUT_DMA+0xec>)
 8016e9c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8016e9e:	2314      	movs	r3, #20
 8016ea0:	9300      	str	r3, [sp, #0]
 8016ea2:	2332      	movs	r3, #50	; 0x32
 8016ea4:	4a13      	ldr	r2, [pc, #76]	; (8016ef4 <I2C_UUT_DMA+0xfc>)
 8016ea6:	2000      	movs	r0, #0
 8016ea8:	f7ff ff38 	bl	8016d1c <wait_till_flag_set_or_timeout>
 8016eac:	4603      	mov	r3, r0
 8016eae:	2b01      	cmp	r3, #1
 8016eb0:	d001      	beq.n	8016eb6 <I2C_UUT_DMA+0xbe>
		{
			return TEST_FAILED;
 8016eb2:	23ff      	movs	r3, #255	; 0xff
 8016eb4:	e00f      	b.n	8016ed6 <I2C_UUT_DMA+0xde>
		}

		/* compare the data results at the end of communication with data given by the functions parameters */
		if(strcmp((char*)i2c_buffer_master, (char*)bit_pattern)!=STRCMP_EQUALS)
 8016eb6:	6879      	ldr	r1, [r7, #4]
 8016eb8:	480d      	ldr	r0, [pc, #52]	; (8016ef0 <I2C_UUT_DMA+0xf8>)
 8016eba:	f7e9 f9a9 	bl	8000210 <strcmp>
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	2b00      	cmp	r3, #0
 8016ec2:	d001      	beq.n	8016ec8 <I2C_UUT_DMA+0xd0>
		{
			/* test did not pass, test failed */
			return TEST_FAILED;
 8016ec4:	23ff      	movs	r3, #255	; 0xff
 8016ec6:	e006      	b.n	8016ed6 <I2C_UUT_DMA+0xde>
		}

		--iterations;
 8016ec8:	78bb      	ldrb	r3, [r7, #2]
 8016eca:	3b01      	subs	r3, #1
 8016ecc:	70bb      	strb	r3, [r7, #2]
	while(iterations)
 8016ece:	78bb      	ldrb	r3, [r7, #2]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d19c      	bne.n	8016e0e <I2C_UUT_DMA+0x16>
	}

	/* test passed successfuly*/
	return TEST_SUCCEED;
 8016ed4:	2301      	movs	r3, #1
}
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	3710      	adds	r7, #16
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}
 8016ede:	bf00      	nop
 8016ee0:	2000912c 	.word	0x2000912c
 8016ee4:	20000294 	.word	0x20000294
 8016ee8:	200002e8 	.word	0x200002e8
 8016eec:	2000932c 	.word	0x2000932c
 8016ef0:	2000922c 	.word	0x2000922c
 8016ef4:	2000932b 	.word	0x2000932b

08016ef8 <UUT_main>:
#include "../../UUT/Inc/MAIN_UUT.h"

/**@brief the main function to run the tests, the life of the program*/
void UUT_main(void)
{
 8016ef8:	b580      	push	{r7, lr}
 8016efa:	af00      	add	r7, sp, #0

	/* ******* INIT PHASE ******* */
	UDP_Client_Init();
 8016efc:	f000 fb48 	bl	8017590 <UDP_Client_Init>
		/**
		 * @brief 	function that should be called when the Ethernet interface identify a coming packet
		 * 			because this client need to constantly receives some packets to tell it to do some tests
		 * 			its inside the while(TRUE), e.g. life loop.
		 */
		ethernetif_input(GNETIF_ADDR);
 8016f00:	4840      	ldr	r0, [pc, #256]	; (8017004 <UUT_main+0x10c>)
 8016f02:	f7f5 fa9d 	bl	800c440 <ethernetif_input>
		sys_check_timeouts();
 8016f06:	f7fc fe01 	bl	8013b0c <sys_check_timeouts>
		if(udp_packet_is_received == PACKET_RECEIVED)
 8016f0a:	4b3f      	ldr	r3, [pc, #252]	; (8017008 <UUT_main+0x110>)
 8016f0c:	781b      	ldrb	r3, [r3, #0]
 8016f0e:	2b01      	cmp	r3, #1
 8016f10:	d1f6      	bne.n	8016f00 <UUT_main+0x8>
		{
			switch(receivedPacketData.perfToTest)
 8016f12:	4b3e      	ldr	r3, [pc, #248]	; (801700c <UUT_main+0x114>)
 8016f14:	791b      	ldrb	r3, [r3, #4]
 8016f16:	3b01      	subs	r3, #1
 8016f18:	2b0f      	cmp	r3, #15
 8016f1a:	d85e      	bhi.n	8016fda <UUT_main+0xe2>
 8016f1c:	a201      	add	r2, pc, #4	; (adr r2, 8016f24 <UUT_main+0x2c>)
 8016f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f22:	bf00      	nop
 8016f24:	08016fb3 	.word	0x08016fb3
 8016f28:	08016f65 	.word	0x08016f65
 8016f2c:	08016fdb 	.word	0x08016fdb
 8016f30:	08016f99 	.word	0x08016f99
 8016f34:	08016fdb 	.word	0x08016fdb
 8016f38:	08016fdb 	.word	0x08016fdb
 8016f3c:	08016fdb 	.word	0x08016fdb
 8016f40:	08016f7f 	.word	0x08016f7f
 8016f44:	08016fdb 	.word	0x08016fdb
 8016f48:	08016fdb 	.word	0x08016fdb
 8016f4c:	08016fdb 	.word	0x08016fdb
 8016f50:	08016fdb 	.word	0x08016fdb
 8016f54:	08016fdb 	.word	0x08016fdb
 8016f58:	08016fdb 	.word	0x08016fdb
 8016f5c:	08016fdb 	.word	0x08016fdb
 8016f60:	08016fc7 	.word	0x08016fc7
			{
			case UART_PERIPHERAL:
			{
				test_status = UART_UUT_DMA((uint8_t *)receivedPacketData.bitPatrnStr, receivedPacketData.bitPatrnStrLen, receivedPacketData.iterations);
 8016f64:	4b29      	ldr	r3, [pc, #164]	; (801700c <UUT_main+0x114>)
 8016f66:	799b      	ldrb	r3, [r3, #6]
 8016f68:	4a28      	ldr	r2, [pc, #160]	; (801700c <UUT_main+0x114>)
 8016f6a:	7952      	ldrb	r2, [r2, #5]
 8016f6c:	4619      	mov	r1, r3
 8016f6e:	4828      	ldr	r0, [pc, #160]	; (8017010 <UUT_main+0x118>)
 8016f70:	f000 fa46 	bl	8017400 <UART_UUT_DMA>
 8016f74:	4603      	mov	r3, r0
 8016f76:	461a      	mov	r2, r3
 8016f78:	4b26      	ldr	r3, [pc, #152]	; (8017014 <UUT_main+0x11c>)
 8016f7a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8016f7c:	e031      	b.n	8016fe2 <UUT_main+0xea>
			case I2C_PERIPHERAL:
			{
				test_status = I2C_UUT_DMA((uint8_t *)receivedPacketData.bitPatrnStr, receivedPacketData.bitPatrnStrLen, receivedPacketData.iterations);
 8016f7e:	4b23      	ldr	r3, [pc, #140]	; (801700c <UUT_main+0x114>)
 8016f80:	799b      	ldrb	r3, [r3, #6]
 8016f82:	4a22      	ldr	r2, [pc, #136]	; (801700c <UUT_main+0x114>)
 8016f84:	7952      	ldrb	r2, [r2, #5]
 8016f86:	4619      	mov	r1, r3
 8016f88:	4821      	ldr	r0, [pc, #132]	; (8017010 <UUT_main+0x118>)
 8016f8a:	f7ff ff35 	bl	8016df8 <I2C_UUT_DMA>
 8016f8e:	4603      	mov	r3, r0
 8016f90:	461a      	mov	r2, r3
 8016f92:	4b20      	ldr	r3, [pc, #128]	; (8017014 <UUT_main+0x11c>)
 8016f94:	701a      	strb	r2, [r3, #0]
			}
			break;
 8016f96:	e024      	b.n	8016fe2 <UUT_main+0xea>
			case SPI_PERIPHERAL:
			{
				test_status = SPI_UUT_DMA((uint8_t *)receivedPacketData.bitPatrnStr, receivedPacketData.bitPatrnStrLen, receivedPacketData.iterations);
 8016f98:	4b1c      	ldr	r3, [pc, #112]	; (801700c <UUT_main+0x114>)
 8016f9a:	799b      	ldrb	r3, [r3, #6]
 8016f9c:	4a1b      	ldr	r2, [pc, #108]	; (801700c <UUT_main+0x114>)
 8016f9e:	7952      	ldrb	r2, [r2, #5]
 8016fa0:	4619      	mov	r1, r3
 8016fa2:	481b      	ldr	r0, [pc, #108]	; (8017010 <UUT_main+0x118>)
 8016fa4:	f000 f860 	bl	8017068 <SPI_UUT_DMA>
 8016fa8:	4603      	mov	r3, r0
 8016faa:	461a      	mov	r2, r3
 8016fac:	4b19      	ldr	r3, [pc, #100]	; (8017014 <UUT_main+0x11c>)
 8016fae:	701a      	strb	r2, [r3, #0]
			}
			break;
 8016fb0:	e017      	b.n	8016fe2 <UUT_main+0xea>
			case TIMER_PERIPHERAL:
			{
				test_status = TIMER_UUT(receivedPacketData.iterations);
 8016fb2:	4b16      	ldr	r3, [pc, #88]	; (801700c <UUT_main+0x114>)
 8016fb4:	795b      	ldrb	r3, [r3, #5]
 8016fb6:	4618      	mov	r0, r3
 8016fb8:	f000 f946 	bl	8017248 <TIMER_UUT>
 8016fbc:	4603      	mov	r3, r0
 8016fbe:	461a      	mov	r2, r3
 8016fc0:	4b14      	ldr	r3, [pc, #80]	; (8017014 <UUT_main+0x11c>)
 8016fc2:	701a      	strb	r2, [r3, #0]
			}
			break;
 8016fc4:	e00d      	b.n	8016fe2 <UUT_main+0xea>
			case ADC_PERIPHERAL:
			{
				test_status = ADC_UUT_DMA(receivedPacketData.iterations);
 8016fc6:	4b11      	ldr	r3, [pc, #68]	; (801700c <UUT_main+0x114>)
 8016fc8:	795b      	ldrb	r3, [r3, #5]
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f7ff fe08 	bl	8016be0 <ADC_UUT_DMA>
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	4b0f      	ldr	r3, [pc, #60]	; (8017014 <UUT_main+0x11c>)
 8016fd6:	701a      	strb	r2, [r3, #0]
			}
			break;
 8016fd8:	e003      	b.n	8016fe2 <UUT_main+0xea>
			default:
			{
				/* no other protocol or peripheral defined */
				test_status = TEST_FAILED;
 8016fda:	4b0e      	ldr	r3, [pc, #56]	; (8017014 <UUT_main+0x11c>)
 8016fdc:	22ff      	movs	r2, #255	; 0xff
 8016fde:	701a      	strb	r2, [r3, #0]
			}
			break;
 8016fe0:	bf00      	nop
			}

			/* building the result protocol struct with data: testId and status of the test */
			buildResProtocol(receivedPacketData.testId, test_status);
 8016fe2:	4b0a      	ldr	r3, [pc, #40]	; (801700c <UUT_main+0x114>)
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	4a0b      	ldr	r2, [pc, #44]	; (8017014 <UUT_main+0x11c>)
 8016fe8:	7812      	ldrb	r2, [r2, #0]
 8016fea:	4611      	mov	r1, r2
 8016fec:	4618      	mov	r0, r3
 8016fee:	f000 fb15 	bl	801761c <buildResProtocol>

			/* send via UDP the packet to the server */
			udpClient_send(&sentPacketData,sizeof(sentPacketData));
 8016ff2:	2105      	movs	r1, #5
 8016ff4:	4808      	ldr	r0, [pc, #32]	; (8017018 <UUT_main+0x120>)
 8016ff6:	f000 faa3 	bl	8017540 <udpClient_send>

			/* initializing the flag of packet received to be not received so only when a packet will be received some test will be performed */
			udp_packet_is_received = PACKET_NOT_RECEIVED;
 8016ffa:	4b03      	ldr	r3, [pc, #12]	; (8017008 <UUT_main+0x110>)
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	701a      	strb	r2, [r3, #0]
		ethernetif_input(GNETIF_ADDR);
 8017000:	e77e      	b.n	8016f00 <UUT_main+0x8>
 8017002:	bf00      	nop
 8017004:	20000f78 	.word	0x20000f78
 8017008:	20009845 	.word	0x20009845
 801700c:	20009738 	.word	0x20009738
 8017010:	2000973f 	.word	0x2000973f
 8017014:	20009129 	.word	0x20009129
 8017018:	20009840 	.word	0x20009840

0801701c <HAL_SPI_TxRxCpltCallback>:
/**@brief callback flag when receive is done */
static	uint8_t  spi_slave_cplt_callback_flag = CALLBACK_FLAG_RESET;

/**@brief  Tx and Rx Transfer completed callback.  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801701c:	b480      	push	{r7}
 801701e:	b083      	sub	sp, #12
 8017020:	af00      	add	r7, sp, #0
 8017022:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI_MASTER->Instance)
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	681a      	ldr	r2, [r3, #0]
 8017028:	4b0b      	ldr	r3, [pc, #44]	; (8017058 <HAL_SPI_TxRxCpltCallback+0x3c>)
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	429a      	cmp	r2, r3
 801702e:	d103      	bne.n	8017038 <HAL_SPI_TxRxCpltCallback+0x1c>
	{
		spi_master_cplt_callback_flag = CALLBACK_FLAG_SET;
 8017030:	4b0a      	ldr	r3, [pc, #40]	; (801705c <HAL_SPI_TxRxCpltCallback+0x40>)
 8017032:	2201      	movs	r2, #1
 8017034:	701a      	strb	r2, [r3, #0]
	}
	else if(hspi->Instance == SPI_SLAVE->Instance)
	{
		spi_slave_cplt_callback_flag = CALLBACK_FLAG_SET;
	}
}
 8017036:	e008      	b.n	801704a <HAL_SPI_TxRxCpltCallback+0x2e>
	else if(hspi->Instance == SPI_SLAVE->Instance)
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	681a      	ldr	r2, [r3, #0]
 801703c:	4b08      	ldr	r3, [pc, #32]	; (8017060 <HAL_SPI_TxRxCpltCallback+0x44>)
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	429a      	cmp	r2, r3
 8017042:	d102      	bne.n	801704a <HAL_SPI_TxRxCpltCallback+0x2e>
		spi_slave_cplt_callback_flag = CALLBACK_FLAG_SET;
 8017044:	4b07      	ldr	r3, [pc, #28]	; (8017064 <HAL_SPI_TxRxCpltCallback+0x48>)
 8017046:	2201      	movs	r2, #1
 8017048:	701a      	strb	r2, [r3, #0]
}
 801704a:	bf00      	nop
 801704c:	370c      	adds	r7, #12
 801704e:	46bd      	mov	sp, r7
 8017050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017054:	4770      	bx	lr
 8017056:	bf00      	nop
 8017058:	200004bc 	.word	0x200004bc
 801705c:	2000952f 	.word	0x2000952f
 8017060:	20000520 	.word	0x20000520
 8017064:	20009530 	.word	0x20009530

08017068 <SPI_UUT_DMA>:
 * @brief 	the SPI under unit testing function which perform the actual tests according to number of
 * 			iterations, each iteration checks if the sent bit_pattern value equalt to the master buffer
 * 			after sending back to the master
 */
t_status SPI_UUT_DMA( uint8_t *bit_pattern,  uint8_t bit_pattern_length, uint8_t iterations)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b0c4      	sub	sp, #272	; 0x110
 801706c:	af02      	add	r7, sp, #8
 801706e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017072:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8017076:	6018      	str	r0, [r3, #0]
 8017078:	4608      	mov	r0, r1
 801707a:	4611      	mov	r1, r2
 801707c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017080:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8017084:	4602      	mov	r2, r0
 8017086:	701a      	strb	r2, [r3, #0]
 8017088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801708c:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 8017090:	460a      	mov	r2, r1
 8017092:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_ERROR;
 8017094:	2301      	movs	r3, #1
 8017096:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

	/*
	 * temporary buffer to use when transmitting and receiving at the same time.
	 */
	uint8_t tmp_buf[MAX_SPI_MASTER_BUFFER_SIZE] = INIT_ALL_ZERO;
 801709a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801709e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80170a2:	2200      	movs	r2, #0
 80170a4:	601a      	str	r2, [r3, #0]
 80170a6:	3304      	adds	r3, #4
 80170a8:	22fb      	movs	r2, #251	; 0xfb
 80170aa:	2100      	movs	r1, #0
 80170ac:	4618      	mov	r0, r3
 80170ae:	f000 fb0b 	bl	80176c8 <memset>


	while(iterations)
 80170b2:	e095      	b.n	80171e0 <SPI_UUT_DMA+0x178>
	{
		memset(slave_buffer, INIT_TO_ZERO, sizeof(slave_buffer)/sizeof(*slave_buffer));
 80170b4:	22ff      	movs	r2, #255	; 0xff
 80170b6:	2100      	movs	r1, #0
 80170b8:	4850      	ldr	r0, [pc, #320]	; (80171fc <SPI_UUT_DMA+0x194>)
 80170ba:	f000 fb05 	bl	80176c8 <memset>
		memset(master_buffer, INIT_TO_ZERO, sizeof(master_buffer)/sizeof(*master_buffer));
 80170be:	22ff      	movs	r2, #255	; 0xff
 80170c0:	2100      	movs	r1, #0
 80170c2:	484f      	ldr	r0, [pc, #316]	; (8017200 <SPI_UUT_DMA+0x198>)
 80170c4:	f000 fb00 	bl	80176c8 <memset>

		/* MASTER -> SLAVE */
		status = HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, tmp_buf, slave_buffer, bit_pattern_length);
 80170c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80170cc:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 80170d0:	781b      	ldrb	r3, [r3, #0]
 80170d2:	b29b      	uxth	r3, r3
 80170d4:	f107 0108 	add.w	r1, r7, #8
 80170d8:	4a48      	ldr	r2, [pc, #288]	; (80171fc <SPI_UUT_DMA+0x194>)
 80170da:	484a      	ldr	r0, [pc, #296]	; (8017204 <SPI_UUT_DMA+0x19c>)
 80170dc:	f7f1 fd6c 	bl	8008bb8 <HAL_SPI_TransmitReceive_DMA>
 80170e0:	4603      	mov	r3, r0
 80170e2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		if(status != HAL_OK)
 80170e6:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d001      	beq.n	80170f2 <SPI_UUT_DMA+0x8a>
		{
			return TEST_FAILED;
 80170ee:	23ff      	movs	r3, #255	; 0xff
 80170f0:	e07f      	b.n	80171f2 <SPI_UUT_DMA+0x18a>
		}

		status = HAL_SPI_TransmitReceive_DMA(SPI_MASTER, bit_pattern, tmp_buf, bit_pattern_length);
 80170f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80170f6:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 80170fa:	781b      	ldrb	r3, [r3, #0]
 80170fc:	b29b      	uxth	r3, r3
 80170fe:	f107 0208 	add.w	r2, r7, #8
 8017102:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8017106:	f5a1 7182 	sub.w	r1, r1, #260	; 0x104
 801710a:	6809      	ldr	r1, [r1, #0]
 801710c:	483e      	ldr	r0, [pc, #248]	; (8017208 <SPI_UUT_DMA+0x1a0>)
 801710e:	f7f1 fd53 	bl	8008bb8 <HAL_SPI_TransmitReceive_DMA>
 8017112:	4603      	mov	r3, r0
 8017114:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		if(status != HAL_OK)
 8017118:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801711c:	2b00      	cmp	r3, #0
 801711e:	d001      	beq.n	8017124 <SPI_UUT_DMA+0xbc>
		{
			return TEST_FAILED;
 8017120:	23ff      	movs	r3, #255	; 0xff
 8017122:	e066      	b.n	80171f2 <SPI_UUT_DMA+0x18a>
		}

		/* check callback complete flag */
		if(wait_till_flag_set_or_timeout(NOT_ADC, SPI_SLAVE->hdmarx, &spi_slave_cplt_callback_flag, SPI_TIMEOUT, SPI_DMA_TIME) != WAIT_STATUS_OK)
 8017124:	4b37      	ldr	r3, [pc, #220]	; (8017204 <SPI_UUT_DMA+0x19c>)
 8017126:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017128:	230a      	movs	r3, #10
 801712a:	9300      	str	r3, [sp, #0]
 801712c:	2332      	movs	r3, #50	; 0x32
 801712e:	4a37      	ldr	r2, [pc, #220]	; (801720c <SPI_UUT_DMA+0x1a4>)
 8017130:	2000      	movs	r0, #0
 8017132:	f7ff fdf3 	bl	8016d1c <wait_till_flag_set_or_timeout>
 8017136:	4603      	mov	r3, r0
 8017138:	2b01      	cmp	r3, #1
 801713a:	d001      	beq.n	8017140 <SPI_UUT_DMA+0xd8>
		{
			return TEST_FAILED;
 801713c:	23ff      	movs	r3, #255	; 0xff
 801713e:	e058      	b.n	80171f2 <SPI_UUT_DMA+0x18a>
		}

		/* SLAVE -> MASTER*/
		status = HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, slave_buffer, tmp_buf, bit_pattern_length);
 8017140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8017144:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8017148:	781b      	ldrb	r3, [r3, #0]
 801714a:	b29b      	uxth	r3, r3
 801714c:	f107 0208 	add.w	r2, r7, #8
 8017150:	492a      	ldr	r1, [pc, #168]	; (80171fc <SPI_UUT_DMA+0x194>)
 8017152:	482c      	ldr	r0, [pc, #176]	; (8017204 <SPI_UUT_DMA+0x19c>)
 8017154:	f7f1 fd30 	bl	8008bb8 <HAL_SPI_TransmitReceive_DMA>
 8017158:	4603      	mov	r3, r0
 801715a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		if(status != HAL_OK)
 801715e:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8017162:	2b00      	cmp	r3, #0
 8017164:	d001      	beq.n	801716a <SPI_UUT_DMA+0x102>
		{
			return TEST_FAILED;
 8017166:	23ff      	movs	r3, #255	; 0xff
 8017168:	e043      	b.n	80171f2 <SPI_UUT_DMA+0x18a>
		}

		status = HAL_SPI_TransmitReceive_DMA(SPI_MASTER, tmp_buf, master_buffer, bit_pattern_length);
 801716a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801716e:	f2a3 1305 	subw	r3, r3, #261	; 0x105
 8017172:	781b      	ldrb	r3, [r3, #0]
 8017174:	b29b      	uxth	r3, r3
 8017176:	f107 0108 	add.w	r1, r7, #8
 801717a:	4a21      	ldr	r2, [pc, #132]	; (8017200 <SPI_UUT_DMA+0x198>)
 801717c:	4822      	ldr	r0, [pc, #136]	; (8017208 <SPI_UUT_DMA+0x1a0>)
 801717e:	f7f1 fd1b 	bl	8008bb8 <HAL_SPI_TransmitReceive_DMA>
 8017182:	4603      	mov	r3, r0
 8017184:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		if(status != HAL_OK)
 8017188:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801718c:	2b00      	cmp	r3, #0
 801718e:	d001      	beq.n	8017194 <SPI_UUT_DMA+0x12c>
		{
			return TEST_FAILED;
 8017190:	23ff      	movs	r3, #255	; 0xff
 8017192:	e02e      	b.n	80171f2 <SPI_UUT_DMA+0x18a>
		}

		/* check callback complete flag */
		if(wait_till_flag_set_or_timeout(NOT_ADC,SPI_MASTER->hdmarx, &spi_master_cplt_callback_flag, SPI_TIMEOUT, SPI_DMA_TIME) != WAIT_STATUS_OK)
 8017194:	4b1c      	ldr	r3, [pc, #112]	; (8017208 <SPI_UUT_DMA+0x1a0>)
 8017196:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017198:	230a      	movs	r3, #10
 801719a:	9300      	str	r3, [sp, #0]
 801719c:	2332      	movs	r3, #50	; 0x32
 801719e:	4a1c      	ldr	r2, [pc, #112]	; (8017210 <SPI_UUT_DMA+0x1a8>)
 80171a0:	2000      	movs	r0, #0
 80171a2:	f7ff fdbb 	bl	8016d1c <wait_till_flag_set_or_timeout>
 80171a6:	4603      	mov	r3, r0
 80171a8:	2b01      	cmp	r3, #1
 80171aa:	d001      	beq.n	80171b0 <SPI_UUT_DMA+0x148>
		{
			return TEST_FAILED;
 80171ac:	23ff      	movs	r3, #255	; 0xff
 80171ae:	e020      	b.n	80171f2 <SPI_UUT_DMA+0x18a>
		}

		/* end of iteration test if sent bit pattern is not equal to buffer at the end the peripheral not working correctly, test failed*/
		if(strcmp((char*)master_buffer, (char*)bit_pattern)!=STRCMP_EQUALS)
 80171b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80171b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80171b8:	6819      	ldr	r1, [r3, #0]
 80171ba:	4811      	ldr	r0, [pc, #68]	; (8017200 <SPI_UUT_DMA+0x198>)
 80171bc:	f7e9 f828 	bl	8000210 <strcmp>
 80171c0:	4603      	mov	r3, r0
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d001      	beq.n	80171ca <SPI_UUT_DMA+0x162>
		{
			return TEST_FAILED;
 80171c6:	23ff      	movs	r3, #255	; 0xff
 80171c8:	e013      	b.n	80171f2 <SPI_UUT_DMA+0x18a>
		}

		/* decrement iterations variable so the loop will stop when reach 0*/
		--iterations;
 80171ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80171ce:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 80171d2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80171d6:	f5a2 7283 	sub.w	r2, r2, #262	; 0x106
 80171da:	7812      	ldrb	r2, [r2, #0]
 80171dc:	3a01      	subs	r2, #1
 80171de:	701a      	strb	r2, [r3, #0]
	while(iterations)
 80171e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80171e4:	f5a3 7383 	sub.w	r3, r3, #262	; 0x106
 80171e8:	781b      	ldrb	r3, [r3, #0]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	f47f af62 	bne.w	80170b4 <SPI_UUT_DMA+0x4c>

	/*
	 * if all the tests iterations passed (bit_pattern equals master_buffer in every iteration) than the peripheral is working correctly,
	 * test passed.
	 */
	return TEST_SUCCEED;
 80171f0:	2301      	movs	r3, #1
}
 80171f2:	4618      	mov	r0, r3
 80171f4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80171f8:	46bd      	mov	sp, r7
 80171fa:	bd80      	pop	{r7, pc}
 80171fc:	20009430 	.word	0x20009430
 8017200:	20009330 	.word	0x20009330
 8017204:	20000520 	.word	0x20000520
 8017208:	200004bc 	.word	0x200004bc
 801720c:	20009530 	.word	0x20009530
 8017210:	2000952f 	.word	0x2000952f

08017214 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief elapsed timer callback function implementation, turn on timer flag.
 * 		  which indicates the timer ends.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017214:	b480      	push	{r7}
 8017216:	b083      	sub	sp, #12
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIMER1_HANDLE->Instance)
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	681a      	ldr	r2, [r3, #0]
 8017220:	4b06      	ldr	r3, [pc, #24]	; (801723c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	429a      	cmp	r2, r3
 8017226:	d102      	bne.n	801722e <HAL_TIM_PeriodElapsedCallback+0x1a>
	{

		timer_end = TIMER_END;
 8017228:	4b05      	ldr	r3, [pc, #20]	; (8017240 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 801722a:	2201      	movs	r2, #1
 801722c:	701a      	strb	r2, [r3, #0]
	}
}
 801722e:	bf00      	nop
 8017230:	370c      	adds	r7, #12
 8017232:	46bd      	mov	sp, r7
 8017234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017238:	4770      	bx	lr
 801723a:	bf00      	nop
 801723c:	20000704 	.word	0x20000704
 8017240:	20009531 	.word	0x20009531
 8017244:	00000000 	.word	0x00000000

08017248 <TIMER_UUT>:
 * @brief 	start the timer with prescalar and period values so the user will decide the time where the
 * 		  	timer elapsed, test if it is indeed working correctly if a the given time really passed.
 * 		 	test the timer peripheral.
 */
t_status TIMER_UUT(uint8_t iterations)
{
 8017248:	b5b0      	push	{r4, r5, r7, lr}
 801724a:	b086      	sub	sp, #24
 801724c:	af00      	add	r7, sp, #0
 801724e:	4603      	mov	r3, r0
 8017250:	71fb      	strb	r3, [r7, #7]
	/* in ms */
	double timer_elaps_time = TO_MILLISECONDS*(double)(((*TIMER1_HANDLE).Init.Prescaler+PRESCALAR_ADDED_VAL)*
 8017252:	4b53      	ldr	r3, [pc, #332]	; (80173a0 <TIMER_UUT+0x158>)
 8017254:	685b      	ldr	r3, [r3, #4]
 8017256:	3301      	adds	r3, #1
			((*TIMER1_HANDLE).Init.Period+PERIOD_ADDED_VAL))/TIM_CLK_FREQ;
 8017258:	4a51      	ldr	r2, [pc, #324]	; (80173a0 <TIMER_UUT+0x158>)
 801725a:	68d2      	ldr	r2, [r2, #12]
 801725c:	3201      	adds	r2, #1
	double timer_elaps_time = TO_MILLISECONDS*(double)(((*TIMER1_HANDLE).Init.Prescaler+PRESCALAR_ADDED_VAL)*
 801725e:	fb02 f303 	mul.w	r3, r2, r3
 8017262:	4618      	mov	r0, r3
 8017264:	f7e9 f976 	bl	8000554 <__aeabi_ui2d>
 8017268:	f04f 0200 	mov.w	r2, #0
 801726c:	4b4d      	ldr	r3, [pc, #308]	; (80173a4 <TIMER_UUT+0x15c>)
 801726e:	f7e9 f9eb 	bl	8000648 <__aeabi_dmul>
 8017272:	4602      	mov	r2, r0
 8017274:	460b      	mov	r3, r1
 8017276:	4610      	mov	r0, r2
 8017278:	4619      	mov	r1, r3
 801727a:	a347      	add	r3, pc, #284	; (adr r3, 8017398 <TIMER_UUT+0x150>)
 801727c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017280:	f7e9 fb0c 	bl	800089c <__aeabi_ddiv>
 8017284:	4602      	mov	r2, r0
 8017286:	460b      	mov	r3, r1
 8017288:	e9c7 2304 	strd	r2, r3, [r7, #16]

	/* get the tick value in milliseconds at the start of our timer */
	uint32_t start = INIT_TO_ZERO;
 801728c:	2300      	movs	r3, #0
 801728e:	60fb      	str	r3, [r7, #12]

	/* get the tick value in milliseconds at the end of our timer */
	uint32_t end = INIT_TO_ZERO;
 8017290:	2300      	movs	r3, #0
 8017292:	60bb      	str	r3, [r7, #8]

	/* test phase */
	while(iterations)
 8017294:	e076      	b.n	8017384 <TIMER_UUT+0x13c>
	{
		start = HAL_GetTick();
 8017296:	f7eb fbc3 	bl	8002a20 <HAL_GetTick>
 801729a:	60f8      	str	r0, [r7, #12]

		/* enable timer interrupt to start (as time defined) */
		HAL_TIM_Base_Start_IT(TIMER1_HANDLE);
 801729c:	4840      	ldr	r0, [pc, #256]	; (80173a0 <TIMER_UUT+0x158>)
 801729e:	f7f2 fa8b 	bl	80097b8 <HAL_TIM_Base_Start_IT>
		timer_end = TIMER_NOT_END;
 80172a2:	4b41      	ldr	r3, [pc, #260]	; (80173a8 <TIMER_UUT+0x160>)
 80172a4:	2200      	movs	r2, #0
 80172a6:	701a      	strb	r2, [r3, #0]

		/* wait for flag to be turn on */
		while(timer_end != TIMER_END)
 80172a8:	e023      	b.n	80172f2 <TIMER_UUT+0xaa>
		{

			/* ******** code to stop it from running forever in case it would happen ******** */
			end = HAL_GetTick();
 80172aa:	f7eb fbb9 	bl	8002a20 <HAL_GetTick>
 80172ae:	60b8      	str	r0, [r7, #8]
			if((end-start) > (timer_elaps_time+TIM_DEVIATION_VAL))
 80172b0:	68ba      	ldr	r2, [r7, #8]
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	1ad3      	subs	r3, r2, r3
 80172b6:	4618      	mov	r0, r3
 80172b8:	f7e9 f94c 	bl	8000554 <__aeabi_ui2d>
 80172bc:	4604      	mov	r4, r0
 80172be:	460d      	mov	r5, r1
 80172c0:	f04f 0200 	mov.w	r2, #0
 80172c4:	4b39      	ldr	r3, [pc, #228]	; (80173ac <TIMER_UUT+0x164>)
 80172c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80172ca:	f7e9 f807 	bl	80002dc <__adddf3>
 80172ce:	4602      	mov	r2, r0
 80172d0:	460b      	mov	r3, r1
 80172d2:	4620      	mov	r0, r4
 80172d4:	4629      	mov	r1, r5
 80172d6:	f7e9 fc47 	bl	8000b68 <__aeabi_dcmpgt>
 80172da:	4603      	mov	r3, r0
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d100      	bne.n	80172e2 <TIMER_UUT+0x9a>
 80172e0:	e007      	b.n	80172f2 <TIMER_UUT+0xaa>
			{
				/* stops the timer */
				HAL_TIM_Base_Stop_IT(TIMER1_HANDLE);
 80172e2:	482f      	ldr	r0, [pc, #188]	; (80173a0 <TIMER_UUT+0x158>)
 80172e4:	f7f2 fae0 	bl	80098a8 <HAL_TIM_Base_Stop_IT>

				timer_end = TIMER_NOT_END;
 80172e8:	4b2f      	ldr	r3, [pc, #188]	; (80173a8 <TIMER_UUT+0x160>)
 80172ea:	2200      	movs	r2, #0
 80172ec:	701a      	strb	r2, [r3, #0]

				return TEST_FAILED;
 80172ee:	23ff      	movs	r3, #255	; 0xff
 80172f0:	e04c      	b.n	801738c <TIMER_UUT+0x144>
		while(timer_end != TIMER_END)
 80172f2:	4b2d      	ldr	r3, [pc, #180]	; (80173a8 <TIMER_UUT+0x160>)
 80172f4:	781b      	ldrb	r3, [r3, #0]
 80172f6:	2b01      	cmp	r3, #1
 80172f8:	d1d7      	bne.n	80172aa <TIMER_UUT+0x62>
			}
			/* ****************************************************************************** */
		}
		/* stops the timer */
		HAL_TIM_Base_Stop_IT(TIMER1_HANDLE);
 80172fa:	4829      	ldr	r0, [pc, #164]	; (80173a0 <TIMER_UUT+0x158>)
 80172fc:	f7f2 fad4 	bl	80098a8 <HAL_TIM_Base_Stop_IT>
		timer_end = TIMER_NOT_END;
 8017300:	4b29      	ldr	r3, [pc, #164]	; (80173a8 <TIMER_UUT+0x160>)
 8017302:	2200      	movs	r2, #0
 8017304:	701a      	strb	r2, [r3, #0]

		end = HAL_GetTick();
 8017306:	f7eb fb8b 	bl	8002a20 <HAL_GetTick>
 801730a:	60b8      	str	r0, [r7, #8]

		if(timer_elaps_time-TIM_DEVIATION_VAL <= end-start && end-start <= timer_elaps_time + TIM_DEVIATION_VAL)
 801730c:	f04f 0200 	mov.w	r2, #0
 8017310:	4b26      	ldr	r3, [pc, #152]	; (80173ac <TIMER_UUT+0x164>)
 8017312:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8017316:	f7e8 ffdf 	bl	80002d8 <__aeabi_dsub>
 801731a:	4602      	mov	r2, r0
 801731c:	460b      	mov	r3, r1
 801731e:	4614      	mov	r4, r2
 8017320:	461d      	mov	r5, r3
 8017322:	68ba      	ldr	r2, [r7, #8]
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	1ad3      	subs	r3, r2, r3
 8017328:	4618      	mov	r0, r3
 801732a:	f7e9 f913 	bl	8000554 <__aeabi_ui2d>
 801732e:	4602      	mov	r2, r0
 8017330:	460b      	mov	r3, r1
 8017332:	4620      	mov	r0, r4
 8017334:	4629      	mov	r1, r5
 8017336:	f7e9 fc03 	bl	8000b40 <__aeabi_dcmple>
 801733a:	4603      	mov	r3, r0
 801733c:	2b00      	cmp	r3, #0
 801733e:	d01f      	beq.n	8017380 <TIMER_UUT+0x138>
 8017340:	68ba      	ldr	r2, [r7, #8]
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	1ad3      	subs	r3, r2, r3
 8017346:	4618      	mov	r0, r3
 8017348:	f7e9 f904 	bl	8000554 <__aeabi_ui2d>
 801734c:	4604      	mov	r4, r0
 801734e:	460d      	mov	r5, r1
 8017350:	f04f 0200 	mov.w	r2, #0
 8017354:	4b15      	ldr	r3, [pc, #84]	; (80173ac <TIMER_UUT+0x164>)
 8017356:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801735a:	f7e8 ffbf 	bl	80002dc <__adddf3>
 801735e:	4602      	mov	r2, r0
 8017360:	460b      	mov	r3, r1
 8017362:	4620      	mov	r0, r4
 8017364:	4629      	mov	r1, r5
 8017366:	f7e9 fbeb 	bl	8000b40 <__aeabi_dcmple>
 801736a:	4603      	mov	r3, r0
 801736c:	2b00      	cmp	r3, #0
 801736e:	d007      	beq.n	8017380 <TIMER_UUT+0x138>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8017370:	2180      	movs	r1, #128	; 0x80
 8017372:	480f      	ldr	r0, [pc, #60]	; (80173b0 <TIMER_UUT+0x168>)
 8017374:	f7ee f987 	bl	8005686 <HAL_GPIO_TogglePin>
			--iterations;
 8017378:	79fb      	ldrb	r3, [r7, #7]
 801737a:	3b01      	subs	r3, #1
 801737c:	71fb      	strb	r3, [r7, #7]
			continue;
 801737e:	e001      	b.n	8017384 <TIMER_UUT+0x13c>
		}
		else {
			return TEST_FAILED;
 8017380:	23ff      	movs	r3, #255	; 0xff
 8017382:	e003      	b.n	801738c <TIMER_UUT+0x144>
	while(iterations)
 8017384:	79fb      	ldrb	r3, [r7, #7]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d185      	bne.n	8017296 <TIMER_UUT+0x4e>
		}

	}

	return TEST_SUCCEED;
 801738a:	2301      	movs	r3, #1
}
 801738c:	4618      	mov	r0, r3
 801738e:	3718      	adds	r7, #24
 8017390:	46bd      	mov	sp, r7
 8017392:	bdb0      	pop	{r4, r5, r7, pc}
 8017394:	f3af 8000 	nop.w
 8017398:	00000000 	.word	0x00000000
 801739c:	41912a88 	.word	0x41912a88
 80173a0:	20000704 	.word	0x20000704
 80173a4:	408f4000 	.word	0x408f4000
 80173a8:	20009531 	.word	0x20009531
 80173ac:	40590000 	.word	0x40590000
 80173b0:	40020400 	.word	0x40020400

080173b4 <HAL_UART_RxCpltCallback>:
/**@brief flag to raise when receive callback called indicate device1 receive finished */
static uint8_t device1_rx_cplt_flag = CALLBACK_FLAG_RESET;

/**@brief  Rx Transfer completed callback. */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80173b4:	b480      	push	{r7}
 80173b6:	b083      	sub	sp, #12
 80173b8:	af00      	add	r7, sp, #0
 80173ba:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART_DEVICE_0->Instance)
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	681a      	ldr	r2, [r3, #0]
 80173c0:	4b0b      	ldr	r3, [pc, #44]	; (80173f0 <HAL_UART_RxCpltCallback+0x3c>)
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	429a      	cmp	r2, r3
 80173c6:	d103      	bne.n	80173d0 <HAL_UART_RxCpltCallback+0x1c>
	{
		device0_rx_cplt_flag = CALLBACK_FLAG_SET;
 80173c8:	4b0a      	ldr	r3, [pc, #40]	; (80173f4 <HAL_UART_RxCpltCallback+0x40>)
 80173ca:	2201      	movs	r2, #1
 80173cc:	701a      	strb	r2, [r3, #0]
	}
	else if(huart->Instance == UART_DEVICE_1->Instance)
	{
		device1_rx_cplt_flag = CALLBACK_FLAG_SET;
	}
}
 80173ce:	e008      	b.n	80173e2 <HAL_UART_RxCpltCallback+0x2e>
	else if(huart->Instance == UART_DEVICE_1->Instance)
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	681a      	ldr	r2, [r3, #0]
 80173d4:	4b08      	ldr	r3, [pc, #32]	; (80173f8 <HAL_UART_RxCpltCallback+0x44>)
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	429a      	cmp	r2, r3
 80173da:	d102      	bne.n	80173e2 <HAL_UART_RxCpltCallback+0x2e>
		device1_rx_cplt_flag = CALLBACK_FLAG_SET;
 80173dc:	4b07      	ldr	r3, [pc, #28]	; (80173fc <HAL_UART_RxCpltCallback+0x48>)
 80173de:	2201      	movs	r2, #1
 80173e0:	701a      	strb	r2, [r3, #0]
}
 80173e2:	bf00      	nop
 80173e4:	370c      	adds	r7, #12
 80173e6:	46bd      	mov	sp, r7
 80173e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ec:	4770      	bx	lr
 80173ee:	bf00      	nop
 80173f0:	20000860 	.word	0x20000860
 80173f4:	20009733 	.word	0x20009733
 80173f8:	20000750 	.word	0x20000750
 80173fc:	20009734 	.word	0x20009734

08017400 <UART_UUT_DMA>:
/**
 * @brief	the UART under unit test, tests if bit pattern equals to the same data received after
 * 			completing a communication cycle (data sent as follows: DEVICE 1 -> DEVICE 0 -> DEVICE 1)
 */
t_status UART_UUT_DMA(uint8_t *bit_pattern, uint8_t bit_pattern_length, uint8_t iterations)
{
 8017400:	b580      	push	{r7, lr}
 8017402:	b086      	sub	sp, #24
 8017404:	af02      	add	r7, sp, #8
 8017406:	6078      	str	r0, [r7, #4]
 8017408:	460b      	mov	r3, r1
 801740a:	70fb      	strb	r3, [r7, #3]
 801740c:	4613      	mov	r3, r2
 801740e:	70bb      	strb	r3, [r7, #2]
	/* check status of receive transmit, error detection.*/
	HAL_StatusTypeDef status = HAL_ERROR;
 8017410:	2301      	movs	r3, #1
 8017412:	73fb      	strb	r3, [r7, #15]

	while(iterations)
 8017414:	e05f      	b.n	80174d6 <UART_UUT_DMA+0xd6>
	{
		/* DEVICE 1 -> DEVICE 0 */
		status = HAL_UART_Receive_DMA(UART_DEVICE_0, buffer_dev_0, bit_pattern_length);
 8017416:	78fb      	ldrb	r3, [r7, #3]
 8017418:	b29b      	uxth	r3, r3
 801741a:	461a      	mov	r2, r3
 801741c:	4932      	ldr	r1, [pc, #200]	; (80174e8 <UART_UUT_DMA+0xe8>)
 801741e:	4833      	ldr	r0, [pc, #204]	; (80174ec <UART_UUT_DMA+0xec>)
 8017420:	f7f3 f87a 	bl	800a518 <HAL_UART_Receive_DMA>
 8017424:	4603      	mov	r3, r0
 8017426:	73fb      	strb	r3, [r7, #15]

		if(status != HAL_OK)
 8017428:	7bfb      	ldrb	r3, [r7, #15]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d001      	beq.n	8017432 <UART_UUT_DMA+0x32>
		{
			return TEST_FAILED;
 801742e:	23ff      	movs	r3, #255	; 0xff
 8017430:	e055      	b.n	80174de <UART_UUT_DMA+0xde>
		}

		status = HAL_UART_Transmit_DMA(UART_DEVICE_1, bit_pattern, bit_pattern_length);
 8017432:	78fb      	ldrb	r3, [r7, #3]
 8017434:	b29b      	uxth	r3, r3
 8017436:	461a      	mov	r2, r3
 8017438:	6879      	ldr	r1, [r7, #4]
 801743a:	482d      	ldr	r0, [pc, #180]	; (80174f0 <UART_UUT_DMA+0xf0>)
 801743c:	f7f2 fff0 	bl	800a420 <HAL_UART_Transmit_DMA>
 8017440:	4603      	mov	r3, r0
 8017442:	73fb      	strb	r3, [r7, #15]

		if(status != HAL_OK)
 8017444:	7bfb      	ldrb	r3, [r7, #15]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d001      	beq.n	801744e <UART_UUT_DMA+0x4e>
		{
			return TEST_FAILED;
 801744a:	23ff      	movs	r3, #255	; 0xff
 801744c:	e047      	b.n	80174de <UART_UUT_DMA+0xde>
		}
		/* end commands DEVICE 1 -> DEVICE 0 */

		/* check callback complete flag */
		if(wait_till_flag_set_or_timeout(NOT_ADC,UART_DEVICE_0->hdmarx, &device0_rx_cplt_flag, UART_TIMEOUT, UART_DMA_TIME) != WAIT_STATUS_OK)
 801744e:	4b27      	ldr	r3, [pc, #156]	; (80174ec <UART_UUT_DMA+0xec>)
 8017450:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8017452:	230a      	movs	r3, #10
 8017454:	9300      	str	r3, [sp, #0]
 8017456:	2332      	movs	r3, #50	; 0x32
 8017458:	4a26      	ldr	r2, [pc, #152]	; (80174f4 <UART_UUT_DMA+0xf4>)
 801745a:	2000      	movs	r0, #0
 801745c:	f7ff fc5e 	bl	8016d1c <wait_till_flag_set_or_timeout>
 8017460:	4603      	mov	r3, r0
 8017462:	2b01      	cmp	r3, #1
 8017464:	d001      	beq.n	801746a <UART_UUT_DMA+0x6a>
		{
			return TEST_FAILED;
 8017466:	23ff      	movs	r3, #255	; 0xff
 8017468:	e039      	b.n	80174de <UART_UUT_DMA+0xde>
		}

		/* DEVICE 0 -> DEVICE 1 */
		status = HAL_UART_Receive_DMA(UART_DEVICE_1, buffer_dev_1, bit_pattern_length);
 801746a:	78fb      	ldrb	r3, [r7, #3]
 801746c:	b29b      	uxth	r3, r3
 801746e:	461a      	mov	r2, r3
 8017470:	4921      	ldr	r1, [pc, #132]	; (80174f8 <UART_UUT_DMA+0xf8>)
 8017472:	481f      	ldr	r0, [pc, #124]	; (80174f0 <UART_UUT_DMA+0xf0>)
 8017474:	f7f3 f850 	bl	800a518 <HAL_UART_Receive_DMA>
 8017478:	4603      	mov	r3, r0
 801747a:	73fb      	strb	r3, [r7, #15]

		if(status != HAL_OK)
 801747c:	7bfb      	ldrb	r3, [r7, #15]
 801747e:	2b00      	cmp	r3, #0
 8017480:	d001      	beq.n	8017486 <UART_UUT_DMA+0x86>
		{
			return TEST_FAILED;
 8017482:	23ff      	movs	r3, #255	; 0xff
 8017484:	e02b      	b.n	80174de <UART_UUT_DMA+0xde>
		}

		status = HAL_UART_Transmit_DMA(UART_DEVICE_0, buffer_dev_0, bit_pattern_length);
 8017486:	78fb      	ldrb	r3, [r7, #3]
 8017488:	b29b      	uxth	r3, r3
 801748a:	461a      	mov	r2, r3
 801748c:	4916      	ldr	r1, [pc, #88]	; (80174e8 <UART_UUT_DMA+0xe8>)
 801748e:	4817      	ldr	r0, [pc, #92]	; (80174ec <UART_UUT_DMA+0xec>)
 8017490:	f7f2 ffc6 	bl	800a420 <HAL_UART_Transmit_DMA>
 8017494:	4603      	mov	r3, r0
 8017496:	73fb      	strb	r3, [r7, #15]

		if(status != HAL_OK)
 8017498:	7bfb      	ldrb	r3, [r7, #15]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d001      	beq.n	80174a2 <UART_UUT_DMA+0xa2>
		{
			return TEST_FAILED;
 801749e:	23ff      	movs	r3, #255	; 0xff
 80174a0:	e01d      	b.n	80174de <UART_UUT_DMA+0xde>
		}
		/* end commands DEVICE 0 -> DEVICE 1 */

		/* check callback complete flag */
		if(wait_till_flag_set_or_timeout(NOT_ADC,UART_DEVICE_1->hdmarx, &device1_rx_cplt_flag, UART_TIMEOUT, UART_DMA_TIME) != WAIT_STATUS_OK)
 80174a2:	4b13      	ldr	r3, [pc, #76]	; (80174f0 <UART_UUT_DMA+0xf0>)
 80174a4:	6f59      	ldr	r1, [r3, #116]	; 0x74
 80174a6:	230a      	movs	r3, #10
 80174a8:	9300      	str	r3, [sp, #0]
 80174aa:	2332      	movs	r3, #50	; 0x32
 80174ac:	4a13      	ldr	r2, [pc, #76]	; (80174fc <UART_UUT_DMA+0xfc>)
 80174ae:	2000      	movs	r0, #0
 80174b0:	f7ff fc34 	bl	8016d1c <wait_till_flag_set_or_timeout>
 80174b4:	4603      	mov	r3, r0
 80174b6:	2b01      	cmp	r3, #1
 80174b8:	d001      	beq.n	80174be <UART_UUT_DMA+0xbe>
		{
			return TEST_FAILED;
 80174ba:	23ff      	movs	r3, #255	; 0xff
 80174bc:	e00f      	b.n	80174de <UART_UUT_DMA+0xde>
		}

		/* compare the data results at the end of communication with data given by the functions parameters */
		if(strcmp((char*)buffer_dev_1, (char*)bit_pattern)!=STRCMP_EQUALS)
 80174be:	6879      	ldr	r1, [r7, #4]
 80174c0:	480d      	ldr	r0, [pc, #52]	; (80174f8 <UART_UUT_DMA+0xf8>)
 80174c2:	f7e8 fea5 	bl	8000210 <strcmp>
 80174c6:	4603      	mov	r3, r0
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d001      	beq.n	80174d0 <UART_UUT_DMA+0xd0>
		{
			/* test did not pass, test failed */
			return TEST_FAILED;
 80174cc:	23ff      	movs	r3, #255	; 0xff
 80174ce:	e006      	b.n	80174de <UART_UUT_DMA+0xde>
		}

		--iterations;
 80174d0:	78bb      	ldrb	r3, [r7, #2]
 80174d2:	3b01      	subs	r3, #1
 80174d4:	70bb      	strb	r3, [r7, #2]
	while(iterations)
 80174d6:	78bb      	ldrb	r3, [r7, #2]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d19c      	bne.n	8017416 <UART_UUT_DMA+0x16>
	}

	/* test passed successfuly*/
	return TEST_SUCCEED;
 80174dc:	2301      	movs	r3, #1
}
 80174de:	4618      	mov	r0, r3
 80174e0:	3710      	adds	r7, #16
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}
 80174e6:	bf00      	nop
 80174e8:	20009634 	.word	0x20009634
 80174ec:	20000860 	.word	0x20000860
 80174f0:	20000750 	.word	0x20000750
 80174f4:	20009733 	.word	0x20009733
 80174f8:	20009534 	.word	0x20009534
 80174fc:	20009734 	.word	0x20009734

08017500 <udp_receive_callback>:

/**
* @brief 		callback function when receiving an Ethernet packet via UDP Protocol
*/
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017500:	b580      	push	{r7, lr}
 8017502:	b084      	sub	sp, #16
 8017504:	af00      	add	r7, sp, #0
 8017506:	60f8      	str	r0, [r7, #12]
 8017508:	60b9      	str	r1, [r7, #8]
 801750a:	607a      	str	r2, [r7, #4]
 801750c:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	memcpy((char*)&receivedPacketData, (char *)p->payload, sizeof(receivedPacketData));
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	685b      	ldr	r3, [r3, #4]
 8017512:	4a09      	ldr	r2, [pc, #36]	; (8017538 <udp_receive_callback+0x38>)
 8017514:	4610      	mov	r0, r2
 8017516:	4619      	mov	r1, r3
 8017518:	f44f 7383 	mov.w	r3, #262	; 0x106
 801751c:	461a      	mov	r2, r3
 801751e:	f000 f8c5 	bl	80176ac <memcpy>

	udp_packet_is_received = PACKET_RECEIVED;
 8017522:	4b06      	ldr	r3, [pc, #24]	; (801753c <udp_receive_callback+0x3c>)
 8017524:	2201      	movs	r2, #1
 8017526:	701a      	strb	r2, [r3, #0]

	/* Free receive pbuf */
	pbuf_free(p);
 8017528:	6878      	ldr	r0, [r7, #4]
 801752a:	f7f6 fd5b 	bl	800dfe4 <pbuf_free>
}
 801752e:	bf00      	nop
 8017530:	3710      	adds	r7, #16
 8017532:	46bd      	mov	sp, r7
 8017534:	bd80      	pop	{r7, pc}
 8017536:	bf00      	nop
 8017538:	20009738 	.word	0x20009738
 801753c:	20009845 	.word	0x20009845

08017540 <udpClient_send>:

/**
 * @brief the data to send back with the UDP protocol.
 */
void udpClient_send(res_prtcl *pdata, size_t data_size)
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b084      	sub	sp, #16
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
 8017548:	6039      	str	r1, [r7, #0]
  /* allocate pbuf from pool*/
  struct pbuf *txBuf = pbuf_alloc(PBUF_TRANSPORT, data_size, PBUF_RAM);
 801754a:	683b      	ldr	r3, [r7, #0]
 801754c:	b29b      	uxth	r3, r3
 801754e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017552:	4619      	mov	r1, r3
 8017554:	2036      	movs	r0, #54	; 0x36
 8017556:	f7f6 fa61 	bl	800da1c <pbuf_alloc>
 801755a:	60f8      	str	r0, [r7, #12]

  if (txBuf != NULL)
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d00f      	beq.n	8017582 <udpClient_send+0x42>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, (char*)pdata, data_size);
 8017562:	683b      	ldr	r3, [r7, #0]
 8017564:	b29b      	uxth	r3, r3
 8017566:	461a      	mov	r2, r3
 8017568:	6879      	ldr	r1, [r7, #4]
 801756a:	68f8      	ldr	r0, [r7, #12]
 801756c:	f7f6 ffa6 	bl	800e4bc <pbuf_take>

    /* send udp data */
    udp_send(my_upcb, txBuf);
 8017570:	4b06      	ldr	r3, [pc, #24]	; (801758c <udpClient_send+0x4c>)
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	68f9      	ldr	r1, [r7, #12]
 8017576:	4618      	mov	r0, r3
 8017578:	f7fc fccc 	bl	8013f14 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 801757c:	68f8      	ldr	r0, [r7, #12]
 801757e:	f7f6 fd31 	bl	800dfe4 <pbuf_free>
  }
}
 8017582:	bf00      	nop
 8017584:	3710      	adds	r7, #16
 8017586:	46bd      	mov	sp, r7
 8017588:	bd80      	pop	{r7, pc}
 801758a:	bf00      	nop
 801758c:	20009848 	.word	0x20009848

08017590 <UDP_Client_Init>:

/**
 * @brief	initialize a UDP connection
 */
void UDP_Client_Init(void)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b084      	sub	sp, #16
 8017594:	af00      	add	r7, sp, #0

	err_t err;

	/* 1. Create a new UDP control block  */
	my_upcb = udp_new();
 8017596:	f7fc ffff 	bl	8014598 <udp_new>
 801759a:	4603      	mov	r3, r0
 801759c:	4a1a      	ldr	r2, [pc, #104]	; (8017608 <UDP_Client_Init+0x78>)
 801759e:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	CONVERTED_SRC_IP_ADDR(myIPaddr);
 80175a0:	4b1a      	ldr	r3, [pc, #104]	; (801760c <UDP_Client_Init+0x7c>)
 80175a2:	60bb      	str	r3, [r7, #8]
	udp_bind(my_upcb, &myIPaddr, SRC_PORT);
 80175a4:	4b18      	ldr	r3, [pc, #96]	; (8017608 <UDP_Client_Init+0x78>)
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	f107 0108 	add.w	r1, r7, #8
 80175ac:	f64c 3220 	movw	r2, #52000	; 0xcb20
 80175b0:	4618      	mov	r0, r3
 80175b2:	f7fc fe99 	bl	80142e8 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	CONVERTED_DST_IP_ADDR(DestIPaddr);
 80175b6:	4b16      	ldr	r3, [pc, #88]	; (8017610 <UDP_Client_Init+0x80>)
 80175b8:	607b      	str	r3, [r7, #4]
	err= udp_connect(my_upcb, &DestIPaddr, DST_PORT);
 80175ba:	4b13      	ldr	r3, [pc, #76]	; (8017608 <UDP_Client_Init+0x78>)
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	1d39      	adds	r1, r7, #4
 80175c0:	f24e 2290 	movw	r2, #58000	; 0xe290
 80175c4:	4618      	mov	r0, r3
 80175c6:	f7fc ff17 	bl	80143f8 <udp_connect>
 80175ca:	4603      	mov	r3, r0
 80175cc:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 80175ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d10f      	bne.n	80175f6 <UDP_Client_Init+0x66>
	{
		/* 2. Send message to server */
		/* the first data to send via UDP*/
		buildResProtocol(FIRST_TEST_ID, TEST_SUCCEED);
 80175d6:	2101      	movs	r1, #1
 80175d8:	2000      	movs	r0, #0
 80175da:	f000 f81f 	bl	801761c <buildResProtocol>

		udpClient_send(&sentPacketData,sizeof(sentPacketData));
 80175de:	2105      	movs	r1, #5
 80175e0:	480c      	ldr	r0, [pc, #48]	; (8017614 <UDP_Client_Init+0x84>)
 80175e2:	f7ff ffad 	bl	8017540 <udpClient_send>

		/* 3. Set a receive callback for the upcb */
		udp_recv(my_upcb, udp_receive_callback, NULL);
 80175e6:	4b08      	ldr	r3, [pc, #32]	; (8017608 <UDP_Client_Init+0x78>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	2200      	movs	r2, #0
 80175ec:	490a      	ldr	r1, [pc, #40]	; (8017618 <UDP_Client_Init+0x88>)
 80175ee:	4618      	mov	r0, r3
 80175f0:	f7fc ff70 	bl	80144d4 <udp_recv>
	}
	else
	{
		udp_remove(my_upcb);
	}
}
 80175f4:	e004      	b.n	8017600 <UDP_Client_Init+0x70>
		udp_remove(my_upcb);
 80175f6:	4b04      	ldr	r3, [pc, #16]	; (8017608 <UDP_Client_Init+0x78>)
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	4618      	mov	r0, r3
 80175fc:	f7fc ff8a 	bl	8014514 <udp_remove>
}
 8017600:	bf00      	nop
 8017602:	3710      	adds	r7, #16
 8017604:	46bd      	mov	sp, r7
 8017606:	bd80      	pop	{r7, pc}
 8017608:	20009848 	.word	0x20009848
 801760c:	0201a8c0 	.word	0x0201a8c0
 8017610:	0101a8c0 	.word	0x0101a8c0
 8017614:	20009840 	.word	0x20009840
 8017618:	08017501 	.word	0x08017501

0801761c <buildResProtocol>:

/**
 * @brief build resultProtocol structure variable (sentPacketData) to send via UDP
 */
void buildResProtocol(uint32_t test_id, t_status is_test_succeed)
{
 801761c:	b480      	push	{r7}
 801761e:	b083      	sub	sp, #12
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
 8017624:	460b      	mov	r3, r1
 8017626:	70fb      	strb	r3, [r7, #3]
	sentPacketData.testId = test_id;
 8017628:	4a05      	ldr	r2, [pc, #20]	; (8017640 <buildResProtocol+0x24>)
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	6013      	str	r3, [r2, #0]
	sentPacketData.testResult = is_test_succeed;
 801762e:	4a04      	ldr	r2, [pc, #16]	; (8017640 <buildResProtocol+0x24>)
 8017630:	78fb      	ldrb	r3, [r7, #3]
 8017632:	7113      	strb	r3, [r2, #4]
}
 8017634:	bf00      	nop
 8017636:	370c      	adds	r7, #12
 8017638:	46bd      	mov	sp, r7
 801763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763e:	4770      	bx	lr
 8017640:	20009840 	.word	0x20009840

08017644 <__libc_init_array>:
 8017644:	b570      	push	{r4, r5, r6, lr}
 8017646:	4d0d      	ldr	r5, [pc, #52]	; (801767c <__libc_init_array+0x38>)
 8017648:	4c0d      	ldr	r4, [pc, #52]	; (8017680 <__libc_init_array+0x3c>)
 801764a:	1b64      	subs	r4, r4, r5
 801764c:	10a4      	asrs	r4, r4, #2
 801764e:	2600      	movs	r6, #0
 8017650:	42a6      	cmp	r6, r4
 8017652:	d109      	bne.n	8017668 <__libc_init_array+0x24>
 8017654:	4d0b      	ldr	r5, [pc, #44]	; (8017684 <__libc_init_array+0x40>)
 8017656:	4c0c      	ldr	r4, [pc, #48]	; (8017688 <__libc_init_array+0x44>)
 8017658:	f001 f88e 	bl	8018778 <_init>
 801765c:	1b64      	subs	r4, r4, r5
 801765e:	10a4      	asrs	r4, r4, #2
 8017660:	2600      	movs	r6, #0
 8017662:	42a6      	cmp	r6, r4
 8017664:	d105      	bne.n	8017672 <__libc_init_array+0x2e>
 8017666:	bd70      	pop	{r4, r5, r6, pc}
 8017668:	f855 3b04 	ldr.w	r3, [r5], #4
 801766c:	4798      	blx	r3
 801766e:	3601      	adds	r6, #1
 8017670:	e7ee      	b.n	8017650 <__libc_init_array+0xc>
 8017672:	f855 3b04 	ldr.w	r3, [r5], #4
 8017676:	4798      	blx	r3
 8017678:	3601      	adds	r6, #1
 801767a:	e7f2      	b.n	8017662 <__libc_init_array+0x1e>
 801767c:	0801b3d0 	.word	0x0801b3d0
 8017680:	0801b3d0 	.word	0x0801b3d0
 8017684:	0801b3d0 	.word	0x0801b3d0
 8017688:	0801b3d4 	.word	0x0801b3d4

0801768c <memcmp>:
 801768c:	b510      	push	{r4, lr}
 801768e:	3901      	subs	r1, #1
 8017690:	4402      	add	r2, r0
 8017692:	4290      	cmp	r0, r2
 8017694:	d101      	bne.n	801769a <memcmp+0xe>
 8017696:	2000      	movs	r0, #0
 8017698:	e005      	b.n	80176a6 <memcmp+0x1a>
 801769a:	7803      	ldrb	r3, [r0, #0]
 801769c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80176a0:	42a3      	cmp	r3, r4
 80176a2:	d001      	beq.n	80176a8 <memcmp+0x1c>
 80176a4:	1b18      	subs	r0, r3, r4
 80176a6:	bd10      	pop	{r4, pc}
 80176a8:	3001      	adds	r0, #1
 80176aa:	e7f2      	b.n	8017692 <memcmp+0x6>

080176ac <memcpy>:
 80176ac:	440a      	add	r2, r1
 80176ae:	4291      	cmp	r1, r2
 80176b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80176b4:	d100      	bne.n	80176b8 <memcpy+0xc>
 80176b6:	4770      	bx	lr
 80176b8:	b510      	push	{r4, lr}
 80176ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80176be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80176c2:	4291      	cmp	r1, r2
 80176c4:	d1f9      	bne.n	80176ba <memcpy+0xe>
 80176c6:	bd10      	pop	{r4, pc}

080176c8 <memset>:
 80176c8:	4402      	add	r2, r0
 80176ca:	4603      	mov	r3, r0
 80176cc:	4293      	cmp	r3, r2
 80176ce:	d100      	bne.n	80176d2 <memset+0xa>
 80176d0:	4770      	bx	lr
 80176d2:	f803 1b01 	strb.w	r1, [r3], #1
 80176d6:	e7f9      	b.n	80176cc <memset+0x4>

080176d8 <iprintf>:
 80176d8:	b40f      	push	{r0, r1, r2, r3}
 80176da:	4b0a      	ldr	r3, [pc, #40]	; (8017704 <iprintf+0x2c>)
 80176dc:	b513      	push	{r0, r1, r4, lr}
 80176de:	681c      	ldr	r4, [r3, #0]
 80176e0:	b124      	cbz	r4, 80176ec <iprintf+0x14>
 80176e2:	69a3      	ldr	r3, [r4, #24]
 80176e4:	b913      	cbnz	r3, 80176ec <iprintf+0x14>
 80176e6:	4620      	mov	r0, r4
 80176e8:	f000 f8c2 	bl	8017870 <__sinit>
 80176ec:	ab05      	add	r3, sp, #20
 80176ee:	9a04      	ldr	r2, [sp, #16]
 80176f0:	68a1      	ldr	r1, [r4, #8]
 80176f2:	9301      	str	r3, [sp, #4]
 80176f4:	4620      	mov	r0, r4
 80176f6:	f000 fa7f 	bl	8017bf8 <_vfiprintf_r>
 80176fa:	b002      	add	sp, #8
 80176fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017700:	b004      	add	sp, #16
 8017702:	4770      	bx	lr
 8017704:	2000002c 	.word	0x2000002c

08017708 <rand>:
 8017708:	4b16      	ldr	r3, [pc, #88]	; (8017764 <rand+0x5c>)
 801770a:	b510      	push	{r4, lr}
 801770c:	681c      	ldr	r4, [r3, #0]
 801770e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017710:	b9b3      	cbnz	r3, 8017740 <rand+0x38>
 8017712:	2018      	movs	r0, #24
 8017714:	f000 f95e 	bl	80179d4 <malloc>
 8017718:	63a0      	str	r0, [r4, #56]	; 0x38
 801771a:	b928      	cbnz	r0, 8017728 <rand+0x20>
 801771c:	4602      	mov	r2, r0
 801771e:	4b12      	ldr	r3, [pc, #72]	; (8017768 <rand+0x60>)
 8017720:	4812      	ldr	r0, [pc, #72]	; (801776c <rand+0x64>)
 8017722:	214e      	movs	r1, #78	; 0x4e
 8017724:	f000 f82e 	bl	8017784 <__assert_func>
 8017728:	4a11      	ldr	r2, [pc, #68]	; (8017770 <rand+0x68>)
 801772a:	4b12      	ldr	r3, [pc, #72]	; (8017774 <rand+0x6c>)
 801772c:	e9c0 2300 	strd	r2, r3, [r0]
 8017730:	4b11      	ldr	r3, [pc, #68]	; (8017778 <rand+0x70>)
 8017732:	6083      	str	r3, [r0, #8]
 8017734:	230b      	movs	r3, #11
 8017736:	8183      	strh	r3, [r0, #12]
 8017738:	2201      	movs	r2, #1
 801773a:	2300      	movs	r3, #0
 801773c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017740:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8017742:	4a0e      	ldr	r2, [pc, #56]	; (801777c <rand+0x74>)
 8017744:	6920      	ldr	r0, [r4, #16]
 8017746:	6963      	ldr	r3, [r4, #20]
 8017748:	490d      	ldr	r1, [pc, #52]	; (8017780 <rand+0x78>)
 801774a:	4342      	muls	r2, r0
 801774c:	fb01 2203 	mla	r2, r1, r3, r2
 8017750:	fba0 0101 	umull	r0, r1, r0, r1
 8017754:	1c43      	adds	r3, r0, #1
 8017756:	eb42 0001 	adc.w	r0, r2, r1
 801775a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801775e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017762:	bd10      	pop	{r4, pc}
 8017764:	2000002c 	.word	0x2000002c
 8017768:	0801b284 	.word	0x0801b284
 801776c:	0801b29b 	.word	0x0801b29b
 8017770:	abcd330e 	.word	0xabcd330e
 8017774:	e66d1234 	.word	0xe66d1234
 8017778:	0005deec 	.word	0x0005deec
 801777c:	5851f42d 	.word	0x5851f42d
 8017780:	4c957f2d 	.word	0x4c957f2d

08017784 <__assert_func>:
 8017784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017786:	4614      	mov	r4, r2
 8017788:	461a      	mov	r2, r3
 801778a:	4b09      	ldr	r3, [pc, #36]	; (80177b0 <__assert_func+0x2c>)
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	4605      	mov	r5, r0
 8017790:	68d8      	ldr	r0, [r3, #12]
 8017792:	b14c      	cbz	r4, 80177a8 <__assert_func+0x24>
 8017794:	4b07      	ldr	r3, [pc, #28]	; (80177b4 <__assert_func+0x30>)
 8017796:	9100      	str	r1, [sp, #0]
 8017798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801779c:	4906      	ldr	r1, [pc, #24]	; (80177b8 <__assert_func+0x34>)
 801779e:	462b      	mov	r3, r5
 80177a0:	f000 f8e4 	bl	801796c <fiprintf>
 80177a4:	f000 fe12 	bl	80183cc <abort>
 80177a8:	4b04      	ldr	r3, [pc, #16]	; (80177bc <__assert_func+0x38>)
 80177aa:	461c      	mov	r4, r3
 80177ac:	e7f3      	b.n	8017796 <__assert_func+0x12>
 80177ae:	bf00      	nop
 80177b0:	2000002c 	.word	0x2000002c
 80177b4:	0801b2f6 	.word	0x0801b2f6
 80177b8:	0801b303 	.word	0x0801b303
 80177bc:	0801b331 	.word	0x0801b331

080177c0 <std>:
 80177c0:	2300      	movs	r3, #0
 80177c2:	b510      	push	{r4, lr}
 80177c4:	4604      	mov	r4, r0
 80177c6:	e9c0 3300 	strd	r3, r3, [r0]
 80177ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80177ce:	6083      	str	r3, [r0, #8]
 80177d0:	8181      	strh	r1, [r0, #12]
 80177d2:	6643      	str	r3, [r0, #100]	; 0x64
 80177d4:	81c2      	strh	r2, [r0, #14]
 80177d6:	6183      	str	r3, [r0, #24]
 80177d8:	4619      	mov	r1, r3
 80177da:	2208      	movs	r2, #8
 80177dc:	305c      	adds	r0, #92	; 0x5c
 80177de:	f7ff ff73 	bl	80176c8 <memset>
 80177e2:	4b05      	ldr	r3, [pc, #20]	; (80177f8 <std+0x38>)
 80177e4:	6263      	str	r3, [r4, #36]	; 0x24
 80177e6:	4b05      	ldr	r3, [pc, #20]	; (80177fc <std+0x3c>)
 80177e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80177ea:	4b05      	ldr	r3, [pc, #20]	; (8017800 <std+0x40>)
 80177ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80177ee:	4b05      	ldr	r3, [pc, #20]	; (8017804 <std+0x44>)
 80177f0:	6224      	str	r4, [r4, #32]
 80177f2:	6323      	str	r3, [r4, #48]	; 0x30
 80177f4:	bd10      	pop	{r4, pc}
 80177f6:	bf00      	nop
 80177f8:	080181a1 	.word	0x080181a1
 80177fc:	080181c3 	.word	0x080181c3
 8017800:	080181fb 	.word	0x080181fb
 8017804:	0801821f 	.word	0x0801821f

08017808 <_cleanup_r>:
 8017808:	4901      	ldr	r1, [pc, #4]	; (8017810 <_cleanup_r+0x8>)
 801780a:	f000 b8c1 	b.w	8017990 <_fwalk_reent>
 801780e:	bf00      	nop
 8017810:	08018509 	.word	0x08018509

08017814 <__sfmoreglue>:
 8017814:	b570      	push	{r4, r5, r6, lr}
 8017816:	2268      	movs	r2, #104	; 0x68
 8017818:	1e4d      	subs	r5, r1, #1
 801781a:	4355      	muls	r5, r2
 801781c:	460e      	mov	r6, r1
 801781e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017822:	f000 f94b 	bl	8017abc <_malloc_r>
 8017826:	4604      	mov	r4, r0
 8017828:	b140      	cbz	r0, 801783c <__sfmoreglue+0x28>
 801782a:	2100      	movs	r1, #0
 801782c:	e9c0 1600 	strd	r1, r6, [r0]
 8017830:	300c      	adds	r0, #12
 8017832:	60a0      	str	r0, [r4, #8]
 8017834:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017838:	f7ff ff46 	bl	80176c8 <memset>
 801783c:	4620      	mov	r0, r4
 801783e:	bd70      	pop	{r4, r5, r6, pc}

08017840 <__sfp_lock_acquire>:
 8017840:	4801      	ldr	r0, [pc, #4]	; (8017848 <__sfp_lock_acquire+0x8>)
 8017842:	f000 b8c5 	b.w	80179d0 <__retarget_lock_acquire_recursive>
 8017846:	bf00      	nop
 8017848:	20009851 	.word	0x20009851

0801784c <__sfp_lock_release>:
 801784c:	4801      	ldr	r0, [pc, #4]	; (8017854 <__sfp_lock_release+0x8>)
 801784e:	f000 b8c0 	b.w	80179d2 <__retarget_lock_release_recursive>
 8017852:	bf00      	nop
 8017854:	20009851 	.word	0x20009851

08017858 <__sinit_lock_acquire>:
 8017858:	4801      	ldr	r0, [pc, #4]	; (8017860 <__sinit_lock_acquire+0x8>)
 801785a:	f000 b8b9 	b.w	80179d0 <__retarget_lock_acquire_recursive>
 801785e:	bf00      	nop
 8017860:	20009852 	.word	0x20009852

08017864 <__sinit_lock_release>:
 8017864:	4801      	ldr	r0, [pc, #4]	; (801786c <__sinit_lock_release+0x8>)
 8017866:	f000 b8b4 	b.w	80179d2 <__retarget_lock_release_recursive>
 801786a:	bf00      	nop
 801786c:	20009852 	.word	0x20009852

08017870 <__sinit>:
 8017870:	b510      	push	{r4, lr}
 8017872:	4604      	mov	r4, r0
 8017874:	f7ff fff0 	bl	8017858 <__sinit_lock_acquire>
 8017878:	69a3      	ldr	r3, [r4, #24]
 801787a:	b11b      	cbz	r3, 8017884 <__sinit+0x14>
 801787c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017880:	f7ff bff0 	b.w	8017864 <__sinit_lock_release>
 8017884:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017888:	6523      	str	r3, [r4, #80]	; 0x50
 801788a:	4b13      	ldr	r3, [pc, #76]	; (80178d8 <__sinit+0x68>)
 801788c:	4a13      	ldr	r2, [pc, #76]	; (80178dc <__sinit+0x6c>)
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	62a2      	str	r2, [r4, #40]	; 0x28
 8017892:	42a3      	cmp	r3, r4
 8017894:	bf04      	itt	eq
 8017896:	2301      	moveq	r3, #1
 8017898:	61a3      	streq	r3, [r4, #24]
 801789a:	4620      	mov	r0, r4
 801789c:	f000 f820 	bl	80178e0 <__sfp>
 80178a0:	6060      	str	r0, [r4, #4]
 80178a2:	4620      	mov	r0, r4
 80178a4:	f000 f81c 	bl	80178e0 <__sfp>
 80178a8:	60a0      	str	r0, [r4, #8]
 80178aa:	4620      	mov	r0, r4
 80178ac:	f000 f818 	bl	80178e0 <__sfp>
 80178b0:	2200      	movs	r2, #0
 80178b2:	60e0      	str	r0, [r4, #12]
 80178b4:	2104      	movs	r1, #4
 80178b6:	6860      	ldr	r0, [r4, #4]
 80178b8:	f7ff ff82 	bl	80177c0 <std>
 80178bc:	68a0      	ldr	r0, [r4, #8]
 80178be:	2201      	movs	r2, #1
 80178c0:	2109      	movs	r1, #9
 80178c2:	f7ff ff7d 	bl	80177c0 <std>
 80178c6:	68e0      	ldr	r0, [r4, #12]
 80178c8:	2202      	movs	r2, #2
 80178ca:	2112      	movs	r1, #18
 80178cc:	f7ff ff78 	bl	80177c0 <std>
 80178d0:	2301      	movs	r3, #1
 80178d2:	61a3      	str	r3, [r4, #24]
 80178d4:	e7d2      	b.n	801787c <__sinit+0xc>
 80178d6:	bf00      	nop
 80178d8:	0801b280 	.word	0x0801b280
 80178dc:	08017809 	.word	0x08017809

080178e0 <__sfp>:
 80178e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80178e2:	4607      	mov	r7, r0
 80178e4:	f7ff ffac 	bl	8017840 <__sfp_lock_acquire>
 80178e8:	4b1e      	ldr	r3, [pc, #120]	; (8017964 <__sfp+0x84>)
 80178ea:	681e      	ldr	r6, [r3, #0]
 80178ec:	69b3      	ldr	r3, [r6, #24]
 80178ee:	b913      	cbnz	r3, 80178f6 <__sfp+0x16>
 80178f0:	4630      	mov	r0, r6
 80178f2:	f7ff ffbd 	bl	8017870 <__sinit>
 80178f6:	3648      	adds	r6, #72	; 0x48
 80178f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80178fc:	3b01      	subs	r3, #1
 80178fe:	d503      	bpl.n	8017908 <__sfp+0x28>
 8017900:	6833      	ldr	r3, [r6, #0]
 8017902:	b30b      	cbz	r3, 8017948 <__sfp+0x68>
 8017904:	6836      	ldr	r6, [r6, #0]
 8017906:	e7f7      	b.n	80178f8 <__sfp+0x18>
 8017908:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801790c:	b9d5      	cbnz	r5, 8017944 <__sfp+0x64>
 801790e:	4b16      	ldr	r3, [pc, #88]	; (8017968 <__sfp+0x88>)
 8017910:	60e3      	str	r3, [r4, #12]
 8017912:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017916:	6665      	str	r5, [r4, #100]	; 0x64
 8017918:	f000 f859 	bl	80179ce <__retarget_lock_init_recursive>
 801791c:	f7ff ff96 	bl	801784c <__sfp_lock_release>
 8017920:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017924:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017928:	6025      	str	r5, [r4, #0]
 801792a:	61a5      	str	r5, [r4, #24]
 801792c:	2208      	movs	r2, #8
 801792e:	4629      	mov	r1, r5
 8017930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017934:	f7ff fec8 	bl	80176c8 <memset>
 8017938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801793c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017940:	4620      	mov	r0, r4
 8017942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017944:	3468      	adds	r4, #104	; 0x68
 8017946:	e7d9      	b.n	80178fc <__sfp+0x1c>
 8017948:	2104      	movs	r1, #4
 801794a:	4638      	mov	r0, r7
 801794c:	f7ff ff62 	bl	8017814 <__sfmoreglue>
 8017950:	4604      	mov	r4, r0
 8017952:	6030      	str	r0, [r6, #0]
 8017954:	2800      	cmp	r0, #0
 8017956:	d1d5      	bne.n	8017904 <__sfp+0x24>
 8017958:	f7ff ff78 	bl	801784c <__sfp_lock_release>
 801795c:	230c      	movs	r3, #12
 801795e:	603b      	str	r3, [r7, #0]
 8017960:	e7ee      	b.n	8017940 <__sfp+0x60>
 8017962:	bf00      	nop
 8017964:	0801b280 	.word	0x0801b280
 8017968:	ffff0001 	.word	0xffff0001

0801796c <fiprintf>:
 801796c:	b40e      	push	{r1, r2, r3}
 801796e:	b503      	push	{r0, r1, lr}
 8017970:	4601      	mov	r1, r0
 8017972:	ab03      	add	r3, sp, #12
 8017974:	4805      	ldr	r0, [pc, #20]	; (801798c <fiprintf+0x20>)
 8017976:	f853 2b04 	ldr.w	r2, [r3], #4
 801797a:	6800      	ldr	r0, [r0, #0]
 801797c:	9301      	str	r3, [sp, #4]
 801797e:	f000 f93b 	bl	8017bf8 <_vfiprintf_r>
 8017982:	b002      	add	sp, #8
 8017984:	f85d eb04 	ldr.w	lr, [sp], #4
 8017988:	b003      	add	sp, #12
 801798a:	4770      	bx	lr
 801798c:	2000002c 	.word	0x2000002c

08017990 <_fwalk_reent>:
 8017990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017994:	4606      	mov	r6, r0
 8017996:	4688      	mov	r8, r1
 8017998:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801799c:	2700      	movs	r7, #0
 801799e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80179a2:	f1b9 0901 	subs.w	r9, r9, #1
 80179a6:	d505      	bpl.n	80179b4 <_fwalk_reent+0x24>
 80179a8:	6824      	ldr	r4, [r4, #0]
 80179aa:	2c00      	cmp	r4, #0
 80179ac:	d1f7      	bne.n	801799e <_fwalk_reent+0xe>
 80179ae:	4638      	mov	r0, r7
 80179b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80179b4:	89ab      	ldrh	r3, [r5, #12]
 80179b6:	2b01      	cmp	r3, #1
 80179b8:	d907      	bls.n	80179ca <_fwalk_reent+0x3a>
 80179ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80179be:	3301      	adds	r3, #1
 80179c0:	d003      	beq.n	80179ca <_fwalk_reent+0x3a>
 80179c2:	4629      	mov	r1, r5
 80179c4:	4630      	mov	r0, r6
 80179c6:	47c0      	blx	r8
 80179c8:	4307      	orrs	r7, r0
 80179ca:	3568      	adds	r5, #104	; 0x68
 80179cc:	e7e9      	b.n	80179a2 <_fwalk_reent+0x12>

080179ce <__retarget_lock_init_recursive>:
 80179ce:	4770      	bx	lr

080179d0 <__retarget_lock_acquire_recursive>:
 80179d0:	4770      	bx	lr

080179d2 <__retarget_lock_release_recursive>:
 80179d2:	4770      	bx	lr

080179d4 <malloc>:
 80179d4:	4b02      	ldr	r3, [pc, #8]	; (80179e0 <malloc+0xc>)
 80179d6:	4601      	mov	r1, r0
 80179d8:	6818      	ldr	r0, [r3, #0]
 80179da:	f000 b86f 	b.w	8017abc <_malloc_r>
 80179de:	bf00      	nop
 80179e0:	2000002c 	.word	0x2000002c

080179e4 <_free_r>:
 80179e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179e6:	2900      	cmp	r1, #0
 80179e8:	d044      	beq.n	8017a74 <_free_r+0x90>
 80179ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179ee:	9001      	str	r0, [sp, #4]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	f1a1 0404 	sub.w	r4, r1, #4
 80179f6:	bfb8      	it	lt
 80179f8:	18e4      	addlt	r4, r4, r3
 80179fa:	f000 fe39 	bl	8018670 <__malloc_lock>
 80179fe:	4a1e      	ldr	r2, [pc, #120]	; (8017a78 <_free_r+0x94>)
 8017a00:	9801      	ldr	r0, [sp, #4]
 8017a02:	6813      	ldr	r3, [r2, #0]
 8017a04:	b933      	cbnz	r3, 8017a14 <_free_r+0x30>
 8017a06:	6063      	str	r3, [r4, #4]
 8017a08:	6014      	str	r4, [r2, #0]
 8017a0a:	b003      	add	sp, #12
 8017a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017a10:	f000 be34 	b.w	801867c <__malloc_unlock>
 8017a14:	42a3      	cmp	r3, r4
 8017a16:	d908      	bls.n	8017a2a <_free_r+0x46>
 8017a18:	6825      	ldr	r5, [r4, #0]
 8017a1a:	1961      	adds	r1, r4, r5
 8017a1c:	428b      	cmp	r3, r1
 8017a1e:	bf01      	itttt	eq
 8017a20:	6819      	ldreq	r1, [r3, #0]
 8017a22:	685b      	ldreq	r3, [r3, #4]
 8017a24:	1949      	addeq	r1, r1, r5
 8017a26:	6021      	streq	r1, [r4, #0]
 8017a28:	e7ed      	b.n	8017a06 <_free_r+0x22>
 8017a2a:	461a      	mov	r2, r3
 8017a2c:	685b      	ldr	r3, [r3, #4]
 8017a2e:	b10b      	cbz	r3, 8017a34 <_free_r+0x50>
 8017a30:	42a3      	cmp	r3, r4
 8017a32:	d9fa      	bls.n	8017a2a <_free_r+0x46>
 8017a34:	6811      	ldr	r1, [r2, #0]
 8017a36:	1855      	adds	r5, r2, r1
 8017a38:	42a5      	cmp	r5, r4
 8017a3a:	d10b      	bne.n	8017a54 <_free_r+0x70>
 8017a3c:	6824      	ldr	r4, [r4, #0]
 8017a3e:	4421      	add	r1, r4
 8017a40:	1854      	adds	r4, r2, r1
 8017a42:	42a3      	cmp	r3, r4
 8017a44:	6011      	str	r1, [r2, #0]
 8017a46:	d1e0      	bne.n	8017a0a <_free_r+0x26>
 8017a48:	681c      	ldr	r4, [r3, #0]
 8017a4a:	685b      	ldr	r3, [r3, #4]
 8017a4c:	6053      	str	r3, [r2, #4]
 8017a4e:	4421      	add	r1, r4
 8017a50:	6011      	str	r1, [r2, #0]
 8017a52:	e7da      	b.n	8017a0a <_free_r+0x26>
 8017a54:	d902      	bls.n	8017a5c <_free_r+0x78>
 8017a56:	230c      	movs	r3, #12
 8017a58:	6003      	str	r3, [r0, #0]
 8017a5a:	e7d6      	b.n	8017a0a <_free_r+0x26>
 8017a5c:	6825      	ldr	r5, [r4, #0]
 8017a5e:	1961      	adds	r1, r4, r5
 8017a60:	428b      	cmp	r3, r1
 8017a62:	bf04      	itt	eq
 8017a64:	6819      	ldreq	r1, [r3, #0]
 8017a66:	685b      	ldreq	r3, [r3, #4]
 8017a68:	6063      	str	r3, [r4, #4]
 8017a6a:	bf04      	itt	eq
 8017a6c:	1949      	addeq	r1, r1, r5
 8017a6e:	6021      	streq	r1, [r4, #0]
 8017a70:	6054      	str	r4, [r2, #4]
 8017a72:	e7ca      	b.n	8017a0a <_free_r+0x26>
 8017a74:	b003      	add	sp, #12
 8017a76:	bd30      	pop	{r4, r5, pc}
 8017a78:	20009854 	.word	0x20009854

08017a7c <sbrk_aligned>:
 8017a7c:	b570      	push	{r4, r5, r6, lr}
 8017a7e:	4e0e      	ldr	r6, [pc, #56]	; (8017ab8 <sbrk_aligned+0x3c>)
 8017a80:	460c      	mov	r4, r1
 8017a82:	6831      	ldr	r1, [r6, #0]
 8017a84:	4605      	mov	r5, r0
 8017a86:	b911      	cbnz	r1, 8017a8e <sbrk_aligned+0x12>
 8017a88:	f000 fb7a 	bl	8018180 <_sbrk_r>
 8017a8c:	6030      	str	r0, [r6, #0]
 8017a8e:	4621      	mov	r1, r4
 8017a90:	4628      	mov	r0, r5
 8017a92:	f000 fb75 	bl	8018180 <_sbrk_r>
 8017a96:	1c43      	adds	r3, r0, #1
 8017a98:	d00a      	beq.n	8017ab0 <sbrk_aligned+0x34>
 8017a9a:	1cc4      	adds	r4, r0, #3
 8017a9c:	f024 0403 	bic.w	r4, r4, #3
 8017aa0:	42a0      	cmp	r0, r4
 8017aa2:	d007      	beq.n	8017ab4 <sbrk_aligned+0x38>
 8017aa4:	1a21      	subs	r1, r4, r0
 8017aa6:	4628      	mov	r0, r5
 8017aa8:	f000 fb6a 	bl	8018180 <_sbrk_r>
 8017aac:	3001      	adds	r0, #1
 8017aae:	d101      	bne.n	8017ab4 <sbrk_aligned+0x38>
 8017ab0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017ab4:	4620      	mov	r0, r4
 8017ab6:	bd70      	pop	{r4, r5, r6, pc}
 8017ab8:	20009858 	.word	0x20009858

08017abc <_malloc_r>:
 8017abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ac0:	1ccd      	adds	r5, r1, #3
 8017ac2:	f025 0503 	bic.w	r5, r5, #3
 8017ac6:	3508      	adds	r5, #8
 8017ac8:	2d0c      	cmp	r5, #12
 8017aca:	bf38      	it	cc
 8017acc:	250c      	movcc	r5, #12
 8017ace:	2d00      	cmp	r5, #0
 8017ad0:	4607      	mov	r7, r0
 8017ad2:	db01      	blt.n	8017ad8 <_malloc_r+0x1c>
 8017ad4:	42a9      	cmp	r1, r5
 8017ad6:	d905      	bls.n	8017ae4 <_malloc_r+0x28>
 8017ad8:	230c      	movs	r3, #12
 8017ada:	603b      	str	r3, [r7, #0]
 8017adc:	2600      	movs	r6, #0
 8017ade:	4630      	mov	r0, r6
 8017ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ae4:	4e2e      	ldr	r6, [pc, #184]	; (8017ba0 <_malloc_r+0xe4>)
 8017ae6:	f000 fdc3 	bl	8018670 <__malloc_lock>
 8017aea:	6833      	ldr	r3, [r6, #0]
 8017aec:	461c      	mov	r4, r3
 8017aee:	bb34      	cbnz	r4, 8017b3e <_malloc_r+0x82>
 8017af0:	4629      	mov	r1, r5
 8017af2:	4638      	mov	r0, r7
 8017af4:	f7ff ffc2 	bl	8017a7c <sbrk_aligned>
 8017af8:	1c43      	adds	r3, r0, #1
 8017afa:	4604      	mov	r4, r0
 8017afc:	d14d      	bne.n	8017b9a <_malloc_r+0xde>
 8017afe:	6834      	ldr	r4, [r6, #0]
 8017b00:	4626      	mov	r6, r4
 8017b02:	2e00      	cmp	r6, #0
 8017b04:	d140      	bne.n	8017b88 <_malloc_r+0xcc>
 8017b06:	6823      	ldr	r3, [r4, #0]
 8017b08:	4631      	mov	r1, r6
 8017b0a:	4638      	mov	r0, r7
 8017b0c:	eb04 0803 	add.w	r8, r4, r3
 8017b10:	f000 fb36 	bl	8018180 <_sbrk_r>
 8017b14:	4580      	cmp	r8, r0
 8017b16:	d13a      	bne.n	8017b8e <_malloc_r+0xd2>
 8017b18:	6821      	ldr	r1, [r4, #0]
 8017b1a:	3503      	adds	r5, #3
 8017b1c:	1a6d      	subs	r5, r5, r1
 8017b1e:	f025 0503 	bic.w	r5, r5, #3
 8017b22:	3508      	adds	r5, #8
 8017b24:	2d0c      	cmp	r5, #12
 8017b26:	bf38      	it	cc
 8017b28:	250c      	movcc	r5, #12
 8017b2a:	4629      	mov	r1, r5
 8017b2c:	4638      	mov	r0, r7
 8017b2e:	f7ff ffa5 	bl	8017a7c <sbrk_aligned>
 8017b32:	3001      	adds	r0, #1
 8017b34:	d02b      	beq.n	8017b8e <_malloc_r+0xd2>
 8017b36:	6823      	ldr	r3, [r4, #0]
 8017b38:	442b      	add	r3, r5
 8017b3a:	6023      	str	r3, [r4, #0]
 8017b3c:	e00e      	b.n	8017b5c <_malloc_r+0xa0>
 8017b3e:	6822      	ldr	r2, [r4, #0]
 8017b40:	1b52      	subs	r2, r2, r5
 8017b42:	d41e      	bmi.n	8017b82 <_malloc_r+0xc6>
 8017b44:	2a0b      	cmp	r2, #11
 8017b46:	d916      	bls.n	8017b76 <_malloc_r+0xba>
 8017b48:	1961      	adds	r1, r4, r5
 8017b4a:	42a3      	cmp	r3, r4
 8017b4c:	6025      	str	r5, [r4, #0]
 8017b4e:	bf18      	it	ne
 8017b50:	6059      	strne	r1, [r3, #4]
 8017b52:	6863      	ldr	r3, [r4, #4]
 8017b54:	bf08      	it	eq
 8017b56:	6031      	streq	r1, [r6, #0]
 8017b58:	5162      	str	r2, [r4, r5]
 8017b5a:	604b      	str	r3, [r1, #4]
 8017b5c:	4638      	mov	r0, r7
 8017b5e:	f104 060b 	add.w	r6, r4, #11
 8017b62:	f000 fd8b 	bl	801867c <__malloc_unlock>
 8017b66:	f026 0607 	bic.w	r6, r6, #7
 8017b6a:	1d23      	adds	r3, r4, #4
 8017b6c:	1af2      	subs	r2, r6, r3
 8017b6e:	d0b6      	beq.n	8017ade <_malloc_r+0x22>
 8017b70:	1b9b      	subs	r3, r3, r6
 8017b72:	50a3      	str	r3, [r4, r2]
 8017b74:	e7b3      	b.n	8017ade <_malloc_r+0x22>
 8017b76:	6862      	ldr	r2, [r4, #4]
 8017b78:	42a3      	cmp	r3, r4
 8017b7a:	bf0c      	ite	eq
 8017b7c:	6032      	streq	r2, [r6, #0]
 8017b7e:	605a      	strne	r2, [r3, #4]
 8017b80:	e7ec      	b.n	8017b5c <_malloc_r+0xa0>
 8017b82:	4623      	mov	r3, r4
 8017b84:	6864      	ldr	r4, [r4, #4]
 8017b86:	e7b2      	b.n	8017aee <_malloc_r+0x32>
 8017b88:	4634      	mov	r4, r6
 8017b8a:	6876      	ldr	r6, [r6, #4]
 8017b8c:	e7b9      	b.n	8017b02 <_malloc_r+0x46>
 8017b8e:	230c      	movs	r3, #12
 8017b90:	603b      	str	r3, [r7, #0]
 8017b92:	4638      	mov	r0, r7
 8017b94:	f000 fd72 	bl	801867c <__malloc_unlock>
 8017b98:	e7a1      	b.n	8017ade <_malloc_r+0x22>
 8017b9a:	6025      	str	r5, [r4, #0]
 8017b9c:	e7de      	b.n	8017b5c <_malloc_r+0xa0>
 8017b9e:	bf00      	nop
 8017ba0:	20009854 	.word	0x20009854

08017ba4 <__sfputc_r>:
 8017ba4:	6893      	ldr	r3, [r2, #8]
 8017ba6:	3b01      	subs	r3, #1
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	b410      	push	{r4}
 8017bac:	6093      	str	r3, [r2, #8]
 8017bae:	da08      	bge.n	8017bc2 <__sfputc_r+0x1e>
 8017bb0:	6994      	ldr	r4, [r2, #24]
 8017bb2:	42a3      	cmp	r3, r4
 8017bb4:	db01      	blt.n	8017bba <__sfputc_r+0x16>
 8017bb6:	290a      	cmp	r1, #10
 8017bb8:	d103      	bne.n	8017bc2 <__sfputc_r+0x1e>
 8017bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bbe:	f000 bb33 	b.w	8018228 <__swbuf_r>
 8017bc2:	6813      	ldr	r3, [r2, #0]
 8017bc4:	1c58      	adds	r0, r3, #1
 8017bc6:	6010      	str	r0, [r2, #0]
 8017bc8:	7019      	strb	r1, [r3, #0]
 8017bca:	4608      	mov	r0, r1
 8017bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017bd0:	4770      	bx	lr

08017bd2 <__sfputs_r>:
 8017bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bd4:	4606      	mov	r6, r0
 8017bd6:	460f      	mov	r7, r1
 8017bd8:	4614      	mov	r4, r2
 8017bda:	18d5      	adds	r5, r2, r3
 8017bdc:	42ac      	cmp	r4, r5
 8017bde:	d101      	bne.n	8017be4 <__sfputs_r+0x12>
 8017be0:	2000      	movs	r0, #0
 8017be2:	e007      	b.n	8017bf4 <__sfputs_r+0x22>
 8017be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017be8:	463a      	mov	r2, r7
 8017bea:	4630      	mov	r0, r6
 8017bec:	f7ff ffda 	bl	8017ba4 <__sfputc_r>
 8017bf0:	1c43      	adds	r3, r0, #1
 8017bf2:	d1f3      	bne.n	8017bdc <__sfputs_r+0xa>
 8017bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017bf8 <_vfiprintf_r>:
 8017bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bfc:	460d      	mov	r5, r1
 8017bfe:	b09d      	sub	sp, #116	; 0x74
 8017c00:	4614      	mov	r4, r2
 8017c02:	4698      	mov	r8, r3
 8017c04:	4606      	mov	r6, r0
 8017c06:	b118      	cbz	r0, 8017c10 <_vfiprintf_r+0x18>
 8017c08:	6983      	ldr	r3, [r0, #24]
 8017c0a:	b90b      	cbnz	r3, 8017c10 <_vfiprintf_r+0x18>
 8017c0c:	f7ff fe30 	bl	8017870 <__sinit>
 8017c10:	4b89      	ldr	r3, [pc, #548]	; (8017e38 <_vfiprintf_r+0x240>)
 8017c12:	429d      	cmp	r5, r3
 8017c14:	d11b      	bne.n	8017c4e <_vfiprintf_r+0x56>
 8017c16:	6875      	ldr	r5, [r6, #4]
 8017c18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c1a:	07d9      	lsls	r1, r3, #31
 8017c1c:	d405      	bmi.n	8017c2a <_vfiprintf_r+0x32>
 8017c1e:	89ab      	ldrh	r3, [r5, #12]
 8017c20:	059a      	lsls	r2, r3, #22
 8017c22:	d402      	bmi.n	8017c2a <_vfiprintf_r+0x32>
 8017c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c26:	f7ff fed3 	bl	80179d0 <__retarget_lock_acquire_recursive>
 8017c2a:	89ab      	ldrh	r3, [r5, #12]
 8017c2c:	071b      	lsls	r3, r3, #28
 8017c2e:	d501      	bpl.n	8017c34 <_vfiprintf_r+0x3c>
 8017c30:	692b      	ldr	r3, [r5, #16]
 8017c32:	b9eb      	cbnz	r3, 8017c70 <_vfiprintf_r+0x78>
 8017c34:	4629      	mov	r1, r5
 8017c36:	4630      	mov	r0, r6
 8017c38:	f000 fb5a 	bl	80182f0 <__swsetup_r>
 8017c3c:	b1c0      	cbz	r0, 8017c70 <_vfiprintf_r+0x78>
 8017c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017c40:	07dc      	lsls	r4, r3, #31
 8017c42:	d50e      	bpl.n	8017c62 <_vfiprintf_r+0x6a>
 8017c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017c48:	b01d      	add	sp, #116	; 0x74
 8017c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c4e:	4b7b      	ldr	r3, [pc, #492]	; (8017e3c <_vfiprintf_r+0x244>)
 8017c50:	429d      	cmp	r5, r3
 8017c52:	d101      	bne.n	8017c58 <_vfiprintf_r+0x60>
 8017c54:	68b5      	ldr	r5, [r6, #8]
 8017c56:	e7df      	b.n	8017c18 <_vfiprintf_r+0x20>
 8017c58:	4b79      	ldr	r3, [pc, #484]	; (8017e40 <_vfiprintf_r+0x248>)
 8017c5a:	429d      	cmp	r5, r3
 8017c5c:	bf08      	it	eq
 8017c5e:	68f5      	ldreq	r5, [r6, #12]
 8017c60:	e7da      	b.n	8017c18 <_vfiprintf_r+0x20>
 8017c62:	89ab      	ldrh	r3, [r5, #12]
 8017c64:	0598      	lsls	r0, r3, #22
 8017c66:	d4ed      	bmi.n	8017c44 <_vfiprintf_r+0x4c>
 8017c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017c6a:	f7ff feb2 	bl	80179d2 <__retarget_lock_release_recursive>
 8017c6e:	e7e9      	b.n	8017c44 <_vfiprintf_r+0x4c>
 8017c70:	2300      	movs	r3, #0
 8017c72:	9309      	str	r3, [sp, #36]	; 0x24
 8017c74:	2320      	movs	r3, #32
 8017c76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017c7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8017c7e:	2330      	movs	r3, #48	; 0x30
 8017c80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017e44 <_vfiprintf_r+0x24c>
 8017c84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017c88:	f04f 0901 	mov.w	r9, #1
 8017c8c:	4623      	mov	r3, r4
 8017c8e:	469a      	mov	sl, r3
 8017c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c94:	b10a      	cbz	r2, 8017c9a <_vfiprintf_r+0xa2>
 8017c96:	2a25      	cmp	r2, #37	; 0x25
 8017c98:	d1f9      	bne.n	8017c8e <_vfiprintf_r+0x96>
 8017c9a:	ebba 0b04 	subs.w	fp, sl, r4
 8017c9e:	d00b      	beq.n	8017cb8 <_vfiprintf_r+0xc0>
 8017ca0:	465b      	mov	r3, fp
 8017ca2:	4622      	mov	r2, r4
 8017ca4:	4629      	mov	r1, r5
 8017ca6:	4630      	mov	r0, r6
 8017ca8:	f7ff ff93 	bl	8017bd2 <__sfputs_r>
 8017cac:	3001      	adds	r0, #1
 8017cae:	f000 80aa 	beq.w	8017e06 <_vfiprintf_r+0x20e>
 8017cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017cb4:	445a      	add	r2, fp
 8017cb6:	9209      	str	r2, [sp, #36]	; 0x24
 8017cb8:	f89a 3000 	ldrb.w	r3, [sl]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	f000 80a2 	beq.w	8017e06 <_vfiprintf_r+0x20e>
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017cc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017ccc:	f10a 0a01 	add.w	sl, sl, #1
 8017cd0:	9304      	str	r3, [sp, #16]
 8017cd2:	9307      	str	r3, [sp, #28]
 8017cd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017cd8:	931a      	str	r3, [sp, #104]	; 0x68
 8017cda:	4654      	mov	r4, sl
 8017cdc:	2205      	movs	r2, #5
 8017cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ce2:	4858      	ldr	r0, [pc, #352]	; (8017e44 <_vfiprintf_r+0x24c>)
 8017ce4:	f7e8 faa4 	bl	8000230 <memchr>
 8017ce8:	9a04      	ldr	r2, [sp, #16]
 8017cea:	b9d8      	cbnz	r0, 8017d24 <_vfiprintf_r+0x12c>
 8017cec:	06d1      	lsls	r1, r2, #27
 8017cee:	bf44      	itt	mi
 8017cf0:	2320      	movmi	r3, #32
 8017cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017cf6:	0713      	lsls	r3, r2, #28
 8017cf8:	bf44      	itt	mi
 8017cfa:	232b      	movmi	r3, #43	; 0x2b
 8017cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d00:	f89a 3000 	ldrb.w	r3, [sl]
 8017d04:	2b2a      	cmp	r3, #42	; 0x2a
 8017d06:	d015      	beq.n	8017d34 <_vfiprintf_r+0x13c>
 8017d08:	9a07      	ldr	r2, [sp, #28]
 8017d0a:	4654      	mov	r4, sl
 8017d0c:	2000      	movs	r0, #0
 8017d0e:	f04f 0c0a 	mov.w	ip, #10
 8017d12:	4621      	mov	r1, r4
 8017d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d18:	3b30      	subs	r3, #48	; 0x30
 8017d1a:	2b09      	cmp	r3, #9
 8017d1c:	d94e      	bls.n	8017dbc <_vfiprintf_r+0x1c4>
 8017d1e:	b1b0      	cbz	r0, 8017d4e <_vfiprintf_r+0x156>
 8017d20:	9207      	str	r2, [sp, #28]
 8017d22:	e014      	b.n	8017d4e <_vfiprintf_r+0x156>
 8017d24:	eba0 0308 	sub.w	r3, r0, r8
 8017d28:	fa09 f303 	lsl.w	r3, r9, r3
 8017d2c:	4313      	orrs	r3, r2
 8017d2e:	9304      	str	r3, [sp, #16]
 8017d30:	46a2      	mov	sl, r4
 8017d32:	e7d2      	b.n	8017cda <_vfiprintf_r+0xe2>
 8017d34:	9b03      	ldr	r3, [sp, #12]
 8017d36:	1d19      	adds	r1, r3, #4
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	9103      	str	r1, [sp, #12]
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	bfbb      	ittet	lt
 8017d40:	425b      	neglt	r3, r3
 8017d42:	f042 0202 	orrlt.w	r2, r2, #2
 8017d46:	9307      	strge	r3, [sp, #28]
 8017d48:	9307      	strlt	r3, [sp, #28]
 8017d4a:	bfb8      	it	lt
 8017d4c:	9204      	strlt	r2, [sp, #16]
 8017d4e:	7823      	ldrb	r3, [r4, #0]
 8017d50:	2b2e      	cmp	r3, #46	; 0x2e
 8017d52:	d10c      	bne.n	8017d6e <_vfiprintf_r+0x176>
 8017d54:	7863      	ldrb	r3, [r4, #1]
 8017d56:	2b2a      	cmp	r3, #42	; 0x2a
 8017d58:	d135      	bne.n	8017dc6 <_vfiprintf_r+0x1ce>
 8017d5a:	9b03      	ldr	r3, [sp, #12]
 8017d5c:	1d1a      	adds	r2, r3, #4
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	9203      	str	r2, [sp, #12]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	bfb8      	it	lt
 8017d66:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017d6a:	3402      	adds	r4, #2
 8017d6c:	9305      	str	r3, [sp, #20]
 8017d6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017e54 <_vfiprintf_r+0x25c>
 8017d72:	7821      	ldrb	r1, [r4, #0]
 8017d74:	2203      	movs	r2, #3
 8017d76:	4650      	mov	r0, sl
 8017d78:	f7e8 fa5a 	bl	8000230 <memchr>
 8017d7c:	b140      	cbz	r0, 8017d90 <_vfiprintf_r+0x198>
 8017d7e:	2340      	movs	r3, #64	; 0x40
 8017d80:	eba0 000a 	sub.w	r0, r0, sl
 8017d84:	fa03 f000 	lsl.w	r0, r3, r0
 8017d88:	9b04      	ldr	r3, [sp, #16]
 8017d8a:	4303      	orrs	r3, r0
 8017d8c:	3401      	adds	r4, #1
 8017d8e:	9304      	str	r3, [sp, #16]
 8017d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d94:	482c      	ldr	r0, [pc, #176]	; (8017e48 <_vfiprintf_r+0x250>)
 8017d96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017d9a:	2206      	movs	r2, #6
 8017d9c:	f7e8 fa48 	bl	8000230 <memchr>
 8017da0:	2800      	cmp	r0, #0
 8017da2:	d03f      	beq.n	8017e24 <_vfiprintf_r+0x22c>
 8017da4:	4b29      	ldr	r3, [pc, #164]	; (8017e4c <_vfiprintf_r+0x254>)
 8017da6:	bb1b      	cbnz	r3, 8017df0 <_vfiprintf_r+0x1f8>
 8017da8:	9b03      	ldr	r3, [sp, #12]
 8017daa:	3307      	adds	r3, #7
 8017dac:	f023 0307 	bic.w	r3, r3, #7
 8017db0:	3308      	adds	r3, #8
 8017db2:	9303      	str	r3, [sp, #12]
 8017db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017db6:	443b      	add	r3, r7
 8017db8:	9309      	str	r3, [sp, #36]	; 0x24
 8017dba:	e767      	b.n	8017c8c <_vfiprintf_r+0x94>
 8017dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8017dc0:	460c      	mov	r4, r1
 8017dc2:	2001      	movs	r0, #1
 8017dc4:	e7a5      	b.n	8017d12 <_vfiprintf_r+0x11a>
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	3401      	adds	r4, #1
 8017dca:	9305      	str	r3, [sp, #20]
 8017dcc:	4619      	mov	r1, r3
 8017dce:	f04f 0c0a 	mov.w	ip, #10
 8017dd2:	4620      	mov	r0, r4
 8017dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017dd8:	3a30      	subs	r2, #48	; 0x30
 8017dda:	2a09      	cmp	r2, #9
 8017ddc:	d903      	bls.n	8017de6 <_vfiprintf_r+0x1ee>
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d0c5      	beq.n	8017d6e <_vfiprintf_r+0x176>
 8017de2:	9105      	str	r1, [sp, #20]
 8017de4:	e7c3      	b.n	8017d6e <_vfiprintf_r+0x176>
 8017de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8017dea:	4604      	mov	r4, r0
 8017dec:	2301      	movs	r3, #1
 8017dee:	e7f0      	b.n	8017dd2 <_vfiprintf_r+0x1da>
 8017df0:	ab03      	add	r3, sp, #12
 8017df2:	9300      	str	r3, [sp, #0]
 8017df4:	462a      	mov	r2, r5
 8017df6:	4b16      	ldr	r3, [pc, #88]	; (8017e50 <_vfiprintf_r+0x258>)
 8017df8:	a904      	add	r1, sp, #16
 8017dfa:	4630      	mov	r0, r6
 8017dfc:	f3af 8000 	nop.w
 8017e00:	4607      	mov	r7, r0
 8017e02:	1c78      	adds	r0, r7, #1
 8017e04:	d1d6      	bne.n	8017db4 <_vfiprintf_r+0x1bc>
 8017e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e08:	07d9      	lsls	r1, r3, #31
 8017e0a:	d405      	bmi.n	8017e18 <_vfiprintf_r+0x220>
 8017e0c:	89ab      	ldrh	r3, [r5, #12]
 8017e0e:	059a      	lsls	r2, r3, #22
 8017e10:	d402      	bmi.n	8017e18 <_vfiprintf_r+0x220>
 8017e12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e14:	f7ff fddd 	bl	80179d2 <__retarget_lock_release_recursive>
 8017e18:	89ab      	ldrh	r3, [r5, #12]
 8017e1a:	065b      	lsls	r3, r3, #25
 8017e1c:	f53f af12 	bmi.w	8017c44 <_vfiprintf_r+0x4c>
 8017e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e22:	e711      	b.n	8017c48 <_vfiprintf_r+0x50>
 8017e24:	ab03      	add	r3, sp, #12
 8017e26:	9300      	str	r3, [sp, #0]
 8017e28:	462a      	mov	r2, r5
 8017e2a:	4b09      	ldr	r3, [pc, #36]	; (8017e50 <_vfiprintf_r+0x258>)
 8017e2c:	a904      	add	r1, sp, #16
 8017e2e:	4630      	mov	r0, r6
 8017e30:	f000 f880 	bl	8017f34 <_printf_i>
 8017e34:	e7e4      	b.n	8017e00 <_vfiprintf_r+0x208>
 8017e36:	bf00      	nop
 8017e38:	0801b354 	.word	0x0801b354
 8017e3c:	0801b374 	.word	0x0801b374
 8017e40:	0801b334 	.word	0x0801b334
 8017e44:	0801b394 	.word	0x0801b394
 8017e48:	0801b39e 	.word	0x0801b39e
 8017e4c:	00000000 	.word	0x00000000
 8017e50:	08017bd3 	.word	0x08017bd3
 8017e54:	0801b39a 	.word	0x0801b39a

08017e58 <_printf_common>:
 8017e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e5c:	4616      	mov	r6, r2
 8017e5e:	4699      	mov	r9, r3
 8017e60:	688a      	ldr	r2, [r1, #8]
 8017e62:	690b      	ldr	r3, [r1, #16]
 8017e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017e68:	4293      	cmp	r3, r2
 8017e6a:	bfb8      	it	lt
 8017e6c:	4613      	movlt	r3, r2
 8017e6e:	6033      	str	r3, [r6, #0]
 8017e70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017e74:	4607      	mov	r7, r0
 8017e76:	460c      	mov	r4, r1
 8017e78:	b10a      	cbz	r2, 8017e7e <_printf_common+0x26>
 8017e7a:	3301      	adds	r3, #1
 8017e7c:	6033      	str	r3, [r6, #0]
 8017e7e:	6823      	ldr	r3, [r4, #0]
 8017e80:	0699      	lsls	r1, r3, #26
 8017e82:	bf42      	ittt	mi
 8017e84:	6833      	ldrmi	r3, [r6, #0]
 8017e86:	3302      	addmi	r3, #2
 8017e88:	6033      	strmi	r3, [r6, #0]
 8017e8a:	6825      	ldr	r5, [r4, #0]
 8017e8c:	f015 0506 	ands.w	r5, r5, #6
 8017e90:	d106      	bne.n	8017ea0 <_printf_common+0x48>
 8017e92:	f104 0a19 	add.w	sl, r4, #25
 8017e96:	68e3      	ldr	r3, [r4, #12]
 8017e98:	6832      	ldr	r2, [r6, #0]
 8017e9a:	1a9b      	subs	r3, r3, r2
 8017e9c:	42ab      	cmp	r3, r5
 8017e9e:	dc26      	bgt.n	8017eee <_printf_common+0x96>
 8017ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017ea4:	1e13      	subs	r3, r2, #0
 8017ea6:	6822      	ldr	r2, [r4, #0]
 8017ea8:	bf18      	it	ne
 8017eaa:	2301      	movne	r3, #1
 8017eac:	0692      	lsls	r2, r2, #26
 8017eae:	d42b      	bmi.n	8017f08 <_printf_common+0xb0>
 8017eb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017eb4:	4649      	mov	r1, r9
 8017eb6:	4638      	mov	r0, r7
 8017eb8:	47c0      	blx	r8
 8017eba:	3001      	adds	r0, #1
 8017ebc:	d01e      	beq.n	8017efc <_printf_common+0xa4>
 8017ebe:	6823      	ldr	r3, [r4, #0]
 8017ec0:	68e5      	ldr	r5, [r4, #12]
 8017ec2:	6832      	ldr	r2, [r6, #0]
 8017ec4:	f003 0306 	and.w	r3, r3, #6
 8017ec8:	2b04      	cmp	r3, #4
 8017eca:	bf08      	it	eq
 8017ecc:	1aad      	subeq	r5, r5, r2
 8017ece:	68a3      	ldr	r3, [r4, #8]
 8017ed0:	6922      	ldr	r2, [r4, #16]
 8017ed2:	bf0c      	ite	eq
 8017ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017ed8:	2500      	movne	r5, #0
 8017eda:	4293      	cmp	r3, r2
 8017edc:	bfc4      	itt	gt
 8017ede:	1a9b      	subgt	r3, r3, r2
 8017ee0:	18ed      	addgt	r5, r5, r3
 8017ee2:	2600      	movs	r6, #0
 8017ee4:	341a      	adds	r4, #26
 8017ee6:	42b5      	cmp	r5, r6
 8017ee8:	d11a      	bne.n	8017f20 <_printf_common+0xc8>
 8017eea:	2000      	movs	r0, #0
 8017eec:	e008      	b.n	8017f00 <_printf_common+0xa8>
 8017eee:	2301      	movs	r3, #1
 8017ef0:	4652      	mov	r2, sl
 8017ef2:	4649      	mov	r1, r9
 8017ef4:	4638      	mov	r0, r7
 8017ef6:	47c0      	blx	r8
 8017ef8:	3001      	adds	r0, #1
 8017efa:	d103      	bne.n	8017f04 <_printf_common+0xac>
 8017efc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f04:	3501      	adds	r5, #1
 8017f06:	e7c6      	b.n	8017e96 <_printf_common+0x3e>
 8017f08:	18e1      	adds	r1, r4, r3
 8017f0a:	1c5a      	adds	r2, r3, #1
 8017f0c:	2030      	movs	r0, #48	; 0x30
 8017f0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017f12:	4422      	add	r2, r4
 8017f14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017f18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017f1c:	3302      	adds	r3, #2
 8017f1e:	e7c7      	b.n	8017eb0 <_printf_common+0x58>
 8017f20:	2301      	movs	r3, #1
 8017f22:	4622      	mov	r2, r4
 8017f24:	4649      	mov	r1, r9
 8017f26:	4638      	mov	r0, r7
 8017f28:	47c0      	blx	r8
 8017f2a:	3001      	adds	r0, #1
 8017f2c:	d0e6      	beq.n	8017efc <_printf_common+0xa4>
 8017f2e:	3601      	adds	r6, #1
 8017f30:	e7d9      	b.n	8017ee6 <_printf_common+0x8e>
	...

08017f34 <_printf_i>:
 8017f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017f38:	7e0f      	ldrb	r7, [r1, #24]
 8017f3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017f3c:	2f78      	cmp	r7, #120	; 0x78
 8017f3e:	4691      	mov	r9, r2
 8017f40:	4680      	mov	r8, r0
 8017f42:	460c      	mov	r4, r1
 8017f44:	469a      	mov	sl, r3
 8017f46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017f4a:	d807      	bhi.n	8017f5c <_printf_i+0x28>
 8017f4c:	2f62      	cmp	r7, #98	; 0x62
 8017f4e:	d80a      	bhi.n	8017f66 <_printf_i+0x32>
 8017f50:	2f00      	cmp	r7, #0
 8017f52:	f000 80d8 	beq.w	8018106 <_printf_i+0x1d2>
 8017f56:	2f58      	cmp	r7, #88	; 0x58
 8017f58:	f000 80a3 	beq.w	80180a2 <_printf_i+0x16e>
 8017f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017f60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017f64:	e03a      	b.n	8017fdc <_printf_i+0xa8>
 8017f66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017f6a:	2b15      	cmp	r3, #21
 8017f6c:	d8f6      	bhi.n	8017f5c <_printf_i+0x28>
 8017f6e:	a101      	add	r1, pc, #4	; (adr r1, 8017f74 <_printf_i+0x40>)
 8017f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017f74:	08017fcd 	.word	0x08017fcd
 8017f78:	08017fe1 	.word	0x08017fe1
 8017f7c:	08017f5d 	.word	0x08017f5d
 8017f80:	08017f5d 	.word	0x08017f5d
 8017f84:	08017f5d 	.word	0x08017f5d
 8017f88:	08017f5d 	.word	0x08017f5d
 8017f8c:	08017fe1 	.word	0x08017fe1
 8017f90:	08017f5d 	.word	0x08017f5d
 8017f94:	08017f5d 	.word	0x08017f5d
 8017f98:	08017f5d 	.word	0x08017f5d
 8017f9c:	08017f5d 	.word	0x08017f5d
 8017fa0:	080180ed 	.word	0x080180ed
 8017fa4:	08018011 	.word	0x08018011
 8017fa8:	080180cf 	.word	0x080180cf
 8017fac:	08017f5d 	.word	0x08017f5d
 8017fb0:	08017f5d 	.word	0x08017f5d
 8017fb4:	0801810f 	.word	0x0801810f
 8017fb8:	08017f5d 	.word	0x08017f5d
 8017fbc:	08018011 	.word	0x08018011
 8017fc0:	08017f5d 	.word	0x08017f5d
 8017fc4:	08017f5d 	.word	0x08017f5d
 8017fc8:	080180d7 	.word	0x080180d7
 8017fcc:	682b      	ldr	r3, [r5, #0]
 8017fce:	1d1a      	adds	r2, r3, #4
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	602a      	str	r2, [r5, #0]
 8017fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017fdc:	2301      	movs	r3, #1
 8017fde:	e0a3      	b.n	8018128 <_printf_i+0x1f4>
 8017fe0:	6820      	ldr	r0, [r4, #0]
 8017fe2:	6829      	ldr	r1, [r5, #0]
 8017fe4:	0606      	lsls	r6, r0, #24
 8017fe6:	f101 0304 	add.w	r3, r1, #4
 8017fea:	d50a      	bpl.n	8018002 <_printf_i+0xce>
 8017fec:	680e      	ldr	r6, [r1, #0]
 8017fee:	602b      	str	r3, [r5, #0]
 8017ff0:	2e00      	cmp	r6, #0
 8017ff2:	da03      	bge.n	8017ffc <_printf_i+0xc8>
 8017ff4:	232d      	movs	r3, #45	; 0x2d
 8017ff6:	4276      	negs	r6, r6
 8017ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ffc:	485e      	ldr	r0, [pc, #376]	; (8018178 <_printf_i+0x244>)
 8017ffe:	230a      	movs	r3, #10
 8018000:	e019      	b.n	8018036 <_printf_i+0x102>
 8018002:	680e      	ldr	r6, [r1, #0]
 8018004:	602b      	str	r3, [r5, #0]
 8018006:	f010 0f40 	tst.w	r0, #64	; 0x40
 801800a:	bf18      	it	ne
 801800c:	b236      	sxthne	r6, r6
 801800e:	e7ef      	b.n	8017ff0 <_printf_i+0xbc>
 8018010:	682b      	ldr	r3, [r5, #0]
 8018012:	6820      	ldr	r0, [r4, #0]
 8018014:	1d19      	adds	r1, r3, #4
 8018016:	6029      	str	r1, [r5, #0]
 8018018:	0601      	lsls	r1, r0, #24
 801801a:	d501      	bpl.n	8018020 <_printf_i+0xec>
 801801c:	681e      	ldr	r6, [r3, #0]
 801801e:	e002      	b.n	8018026 <_printf_i+0xf2>
 8018020:	0646      	lsls	r6, r0, #25
 8018022:	d5fb      	bpl.n	801801c <_printf_i+0xe8>
 8018024:	881e      	ldrh	r6, [r3, #0]
 8018026:	4854      	ldr	r0, [pc, #336]	; (8018178 <_printf_i+0x244>)
 8018028:	2f6f      	cmp	r7, #111	; 0x6f
 801802a:	bf0c      	ite	eq
 801802c:	2308      	moveq	r3, #8
 801802e:	230a      	movne	r3, #10
 8018030:	2100      	movs	r1, #0
 8018032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018036:	6865      	ldr	r5, [r4, #4]
 8018038:	60a5      	str	r5, [r4, #8]
 801803a:	2d00      	cmp	r5, #0
 801803c:	bfa2      	ittt	ge
 801803e:	6821      	ldrge	r1, [r4, #0]
 8018040:	f021 0104 	bicge.w	r1, r1, #4
 8018044:	6021      	strge	r1, [r4, #0]
 8018046:	b90e      	cbnz	r6, 801804c <_printf_i+0x118>
 8018048:	2d00      	cmp	r5, #0
 801804a:	d04d      	beq.n	80180e8 <_printf_i+0x1b4>
 801804c:	4615      	mov	r5, r2
 801804e:	fbb6 f1f3 	udiv	r1, r6, r3
 8018052:	fb03 6711 	mls	r7, r3, r1, r6
 8018056:	5dc7      	ldrb	r7, [r0, r7]
 8018058:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801805c:	4637      	mov	r7, r6
 801805e:	42bb      	cmp	r3, r7
 8018060:	460e      	mov	r6, r1
 8018062:	d9f4      	bls.n	801804e <_printf_i+0x11a>
 8018064:	2b08      	cmp	r3, #8
 8018066:	d10b      	bne.n	8018080 <_printf_i+0x14c>
 8018068:	6823      	ldr	r3, [r4, #0]
 801806a:	07de      	lsls	r6, r3, #31
 801806c:	d508      	bpl.n	8018080 <_printf_i+0x14c>
 801806e:	6923      	ldr	r3, [r4, #16]
 8018070:	6861      	ldr	r1, [r4, #4]
 8018072:	4299      	cmp	r1, r3
 8018074:	bfde      	ittt	le
 8018076:	2330      	movle	r3, #48	; 0x30
 8018078:	f805 3c01 	strble.w	r3, [r5, #-1]
 801807c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018080:	1b52      	subs	r2, r2, r5
 8018082:	6122      	str	r2, [r4, #16]
 8018084:	f8cd a000 	str.w	sl, [sp]
 8018088:	464b      	mov	r3, r9
 801808a:	aa03      	add	r2, sp, #12
 801808c:	4621      	mov	r1, r4
 801808e:	4640      	mov	r0, r8
 8018090:	f7ff fee2 	bl	8017e58 <_printf_common>
 8018094:	3001      	adds	r0, #1
 8018096:	d14c      	bne.n	8018132 <_printf_i+0x1fe>
 8018098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801809c:	b004      	add	sp, #16
 801809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180a2:	4835      	ldr	r0, [pc, #212]	; (8018178 <_printf_i+0x244>)
 80180a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80180a8:	6829      	ldr	r1, [r5, #0]
 80180aa:	6823      	ldr	r3, [r4, #0]
 80180ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80180b0:	6029      	str	r1, [r5, #0]
 80180b2:	061d      	lsls	r5, r3, #24
 80180b4:	d514      	bpl.n	80180e0 <_printf_i+0x1ac>
 80180b6:	07df      	lsls	r7, r3, #31
 80180b8:	bf44      	itt	mi
 80180ba:	f043 0320 	orrmi.w	r3, r3, #32
 80180be:	6023      	strmi	r3, [r4, #0]
 80180c0:	b91e      	cbnz	r6, 80180ca <_printf_i+0x196>
 80180c2:	6823      	ldr	r3, [r4, #0]
 80180c4:	f023 0320 	bic.w	r3, r3, #32
 80180c8:	6023      	str	r3, [r4, #0]
 80180ca:	2310      	movs	r3, #16
 80180cc:	e7b0      	b.n	8018030 <_printf_i+0xfc>
 80180ce:	6823      	ldr	r3, [r4, #0]
 80180d0:	f043 0320 	orr.w	r3, r3, #32
 80180d4:	6023      	str	r3, [r4, #0]
 80180d6:	2378      	movs	r3, #120	; 0x78
 80180d8:	4828      	ldr	r0, [pc, #160]	; (801817c <_printf_i+0x248>)
 80180da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80180de:	e7e3      	b.n	80180a8 <_printf_i+0x174>
 80180e0:	0659      	lsls	r1, r3, #25
 80180e2:	bf48      	it	mi
 80180e4:	b2b6      	uxthmi	r6, r6
 80180e6:	e7e6      	b.n	80180b6 <_printf_i+0x182>
 80180e8:	4615      	mov	r5, r2
 80180ea:	e7bb      	b.n	8018064 <_printf_i+0x130>
 80180ec:	682b      	ldr	r3, [r5, #0]
 80180ee:	6826      	ldr	r6, [r4, #0]
 80180f0:	6961      	ldr	r1, [r4, #20]
 80180f2:	1d18      	adds	r0, r3, #4
 80180f4:	6028      	str	r0, [r5, #0]
 80180f6:	0635      	lsls	r5, r6, #24
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	d501      	bpl.n	8018100 <_printf_i+0x1cc>
 80180fc:	6019      	str	r1, [r3, #0]
 80180fe:	e002      	b.n	8018106 <_printf_i+0x1d2>
 8018100:	0670      	lsls	r0, r6, #25
 8018102:	d5fb      	bpl.n	80180fc <_printf_i+0x1c8>
 8018104:	8019      	strh	r1, [r3, #0]
 8018106:	2300      	movs	r3, #0
 8018108:	6123      	str	r3, [r4, #16]
 801810a:	4615      	mov	r5, r2
 801810c:	e7ba      	b.n	8018084 <_printf_i+0x150>
 801810e:	682b      	ldr	r3, [r5, #0]
 8018110:	1d1a      	adds	r2, r3, #4
 8018112:	602a      	str	r2, [r5, #0]
 8018114:	681d      	ldr	r5, [r3, #0]
 8018116:	6862      	ldr	r2, [r4, #4]
 8018118:	2100      	movs	r1, #0
 801811a:	4628      	mov	r0, r5
 801811c:	f7e8 f888 	bl	8000230 <memchr>
 8018120:	b108      	cbz	r0, 8018126 <_printf_i+0x1f2>
 8018122:	1b40      	subs	r0, r0, r5
 8018124:	6060      	str	r0, [r4, #4]
 8018126:	6863      	ldr	r3, [r4, #4]
 8018128:	6123      	str	r3, [r4, #16]
 801812a:	2300      	movs	r3, #0
 801812c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018130:	e7a8      	b.n	8018084 <_printf_i+0x150>
 8018132:	6923      	ldr	r3, [r4, #16]
 8018134:	462a      	mov	r2, r5
 8018136:	4649      	mov	r1, r9
 8018138:	4640      	mov	r0, r8
 801813a:	47d0      	blx	sl
 801813c:	3001      	adds	r0, #1
 801813e:	d0ab      	beq.n	8018098 <_printf_i+0x164>
 8018140:	6823      	ldr	r3, [r4, #0]
 8018142:	079b      	lsls	r3, r3, #30
 8018144:	d413      	bmi.n	801816e <_printf_i+0x23a>
 8018146:	68e0      	ldr	r0, [r4, #12]
 8018148:	9b03      	ldr	r3, [sp, #12]
 801814a:	4298      	cmp	r0, r3
 801814c:	bfb8      	it	lt
 801814e:	4618      	movlt	r0, r3
 8018150:	e7a4      	b.n	801809c <_printf_i+0x168>
 8018152:	2301      	movs	r3, #1
 8018154:	4632      	mov	r2, r6
 8018156:	4649      	mov	r1, r9
 8018158:	4640      	mov	r0, r8
 801815a:	47d0      	blx	sl
 801815c:	3001      	adds	r0, #1
 801815e:	d09b      	beq.n	8018098 <_printf_i+0x164>
 8018160:	3501      	adds	r5, #1
 8018162:	68e3      	ldr	r3, [r4, #12]
 8018164:	9903      	ldr	r1, [sp, #12]
 8018166:	1a5b      	subs	r3, r3, r1
 8018168:	42ab      	cmp	r3, r5
 801816a:	dcf2      	bgt.n	8018152 <_printf_i+0x21e>
 801816c:	e7eb      	b.n	8018146 <_printf_i+0x212>
 801816e:	2500      	movs	r5, #0
 8018170:	f104 0619 	add.w	r6, r4, #25
 8018174:	e7f5      	b.n	8018162 <_printf_i+0x22e>
 8018176:	bf00      	nop
 8018178:	0801b3a5 	.word	0x0801b3a5
 801817c:	0801b3b6 	.word	0x0801b3b6

08018180 <_sbrk_r>:
 8018180:	b538      	push	{r3, r4, r5, lr}
 8018182:	4d06      	ldr	r5, [pc, #24]	; (801819c <_sbrk_r+0x1c>)
 8018184:	2300      	movs	r3, #0
 8018186:	4604      	mov	r4, r0
 8018188:	4608      	mov	r0, r1
 801818a:	602b      	str	r3, [r5, #0]
 801818c:	f7ea fa22 	bl	80025d4 <_sbrk>
 8018190:	1c43      	adds	r3, r0, #1
 8018192:	d102      	bne.n	801819a <_sbrk_r+0x1a>
 8018194:	682b      	ldr	r3, [r5, #0]
 8018196:	b103      	cbz	r3, 801819a <_sbrk_r+0x1a>
 8018198:	6023      	str	r3, [r4, #0]
 801819a:	bd38      	pop	{r3, r4, r5, pc}
 801819c:	2000984c 	.word	0x2000984c

080181a0 <__sread>:
 80181a0:	b510      	push	{r4, lr}
 80181a2:	460c      	mov	r4, r1
 80181a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181a8:	f000 fa6e 	bl	8018688 <_read_r>
 80181ac:	2800      	cmp	r0, #0
 80181ae:	bfab      	itete	ge
 80181b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80181b2:	89a3      	ldrhlt	r3, [r4, #12]
 80181b4:	181b      	addge	r3, r3, r0
 80181b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80181ba:	bfac      	ite	ge
 80181bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80181be:	81a3      	strhlt	r3, [r4, #12]
 80181c0:	bd10      	pop	{r4, pc}

080181c2 <__swrite>:
 80181c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181c6:	461f      	mov	r7, r3
 80181c8:	898b      	ldrh	r3, [r1, #12]
 80181ca:	05db      	lsls	r3, r3, #23
 80181cc:	4605      	mov	r5, r0
 80181ce:	460c      	mov	r4, r1
 80181d0:	4616      	mov	r6, r2
 80181d2:	d505      	bpl.n	80181e0 <__swrite+0x1e>
 80181d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181d8:	2302      	movs	r3, #2
 80181da:	2200      	movs	r2, #0
 80181dc:	f000 f9d0 	bl	8018580 <_lseek_r>
 80181e0:	89a3      	ldrh	r3, [r4, #12]
 80181e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80181e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80181ea:	81a3      	strh	r3, [r4, #12]
 80181ec:	4632      	mov	r2, r6
 80181ee:	463b      	mov	r3, r7
 80181f0:	4628      	mov	r0, r5
 80181f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181f6:	f000 b869 	b.w	80182cc <_write_r>

080181fa <__sseek>:
 80181fa:	b510      	push	{r4, lr}
 80181fc:	460c      	mov	r4, r1
 80181fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018202:	f000 f9bd 	bl	8018580 <_lseek_r>
 8018206:	1c43      	adds	r3, r0, #1
 8018208:	89a3      	ldrh	r3, [r4, #12]
 801820a:	bf15      	itete	ne
 801820c:	6560      	strne	r0, [r4, #84]	; 0x54
 801820e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018216:	81a3      	strheq	r3, [r4, #12]
 8018218:	bf18      	it	ne
 801821a:	81a3      	strhne	r3, [r4, #12]
 801821c:	bd10      	pop	{r4, pc}

0801821e <__sclose>:
 801821e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018222:	f000 b8db 	b.w	80183dc <_close_r>
	...

08018228 <__swbuf_r>:
 8018228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801822a:	460e      	mov	r6, r1
 801822c:	4614      	mov	r4, r2
 801822e:	4605      	mov	r5, r0
 8018230:	b118      	cbz	r0, 801823a <__swbuf_r+0x12>
 8018232:	6983      	ldr	r3, [r0, #24]
 8018234:	b90b      	cbnz	r3, 801823a <__swbuf_r+0x12>
 8018236:	f7ff fb1b 	bl	8017870 <__sinit>
 801823a:	4b21      	ldr	r3, [pc, #132]	; (80182c0 <__swbuf_r+0x98>)
 801823c:	429c      	cmp	r4, r3
 801823e:	d12b      	bne.n	8018298 <__swbuf_r+0x70>
 8018240:	686c      	ldr	r4, [r5, #4]
 8018242:	69a3      	ldr	r3, [r4, #24]
 8018244:	60a3      	str	r3, [r4, #8]
 8018246:	89a3      	ldrh	r3, [r4, #12]
 8018248:	071a      	lsls	r2, r3, #28
 801824a:	d52f      	bpl.n	80182ac <__swbuf_r+0x84>
 801824c:	6923      	ldr	r3, [r4, #16]
 801824e:	b36b      	cbz	r3, 80182ac <__swbuf_r+0x84>
 8018250:	6923      	ldr	r3, [r4, #16]
 8018252:	6820      	ldr	r0, [r4, #0]
 8018254:	1ac0      	subs	r0, r0, r3
 8018256:	6963      	ldr	r3, [r4, #20]
 8018258:	b2f6      	uxtb	r6, r6
 801825a:	4283      	cmp	r3, r0
 801825c:	4637      	mov	r7, r6
 801825e:	dc04      	bgt.n	801826a <__swbuf_r+0x42>
 8018260:	4621      	mov	r1, r4
 8018262:	4628      	mov	r0, r5
 8018264:	f000 f950 	bl	8018508 <_fflush_r>
 8018268:	bb30      	cbnz	r0, 80182b8 <__swbuf_r+0x90>
 801826a:	68a3      	ldr	r3, [r4, #8]
 801826c:	3b01      	subs	r3, #1
 801826e:	60a3      	str	r3, [r4, #8]
 8018270:	6823      	ldr	r3, [r4, #0]
 8018272:	1c5a      	adds	r2, r3, #1
 8018274:	6022      	str	r2, [r4, #0]
 8018276:	701e      	strb	r6, [r3, #0]
 8018278:	6963      	ldr	r3, [r4, #20]
 801827a:	3001      	adds	r0, #1
 801827c:	4283      	cmp	r3, r0
 801827e:	d004      	beq.n	801828a <__swbuf_r+0x62>
 8018280:	89a3      	ldrh	r3, [r4, #12]
 8018282:	07db      	lsls	r3, r3, #31
 8018284:	d506      	bpl.n	8018294 <__swbuf_r+0x6c>
 8018286:	2e0a      	cmp	r6, #10
 8018288:	d104      	bne.n	8018294 <__swbuf_r+0x6c>
 801828a:	4621      	mov	r1, r4
 801828c:	4628      	mov	r0, r5
 801828e:	f000 f93b 	bl	8018508 <_fflush_r>
 8018292:	b988      	cbnz	r0, 80182b8 <__swbuf_r+0x90>
 8018294:	4638      	mov	r0, r7
 8018296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018298:	4b0a      	ldr	r3, [pc, #40]	; (80182c4 <__swbuf_r+0x9c>)
 801829a:	429c      	cmp	r4, r3
 801829c:	d101      	bne.n	80182a2 <__swbuf_r+0x7a>
 801829e:	68ac      	ldr	r4, [r5, #8]
 80182a0:	e7cf      	b.n	8018242 <__swbuf_r+0x1a>
 80182a2:	4b09      	ldr	r3, [pc, #36]	; (80182c8 <__swbuf_r+0xa0>)
 80182a4:	429c      	cmp	r4, r3
 80182a6:	bf08      	it	eq
 80182a8:	68ec      	ldreq	r4, [r5, #12]
 80182aa:	e7ca      	b.n	8018242 <__swbuf_r+0x1a>
 80182ac:	4621      	mov	r1, r4
 80182ae:	4628      	mov	r0, r5
 80182b0:	f000 f81e 	bl	80182f0 <__swsetup_r>
 80182b4:	2800      	cmp	r0, #0
 80182b6:	d0cb      	beq.n	8018250 <__swbuf_r+0x28>
 80182b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80182bc:	e7ea      	b.n	8018294 <__swbuf_r+0x6c>
 80182be:	bf00      	nop
 80182c0:	0801b354 	.word	0x0801b354
 80182c4:	0801b374 	.word	0x0801b374
 80182c8:	0801b334 	.word	0x0801b334

080182cc <_write_r>:
 80182cc:	b538      	push	{r3, r4, r5, lr}
 80182ce:	4d07      	ldr	r5, [pc, #28]	; (80182ec <_write_r+0x20>)
 80182d0:	4604      	mov	r4, r0
 80182d2:	4608      	mov	r0, r1
 80182d4:	4611      	mov	r1, r2
 80182d6:	2200      	movs	r2, #0
 80182d8:	602a      	str	r2, [r5, #0]
 80182da:	461a      	mov	r2, r3
 80182dc:	f7fe fcca 	bl	8016c74 <_write>
 80182e0:	1c43      	adds	r3, r0, #1
 80182e2:	d102      	bne.n	80182ea <_write_r+0x1e>
 80182e4:	682b      	ldr	r3, [r5, #0]
 80182e6:	b103      	cbz	r3, 80182ea <_write_r+0x1e>
 80182e8:	6023      	str	r3, [r4, #0]
 80182ea:	bd38      	pop	{r3, r4, r5, pc}
 80182ec:	2000984c 	.word	0x2000984c

080182f0 <__swsetup_r>:
 80182f0:	4b32      	ldr	r3, [pc, #200]	; (80183bc <__swsetup_r+0xcc>)
 80182f2:	b570      	push	{r4, r5, r6, lr}
 80182f4:	681d      	ldr	r5, [r3, #0]
 80182f6:	4606      	mov	r6, r0
 80182f8:	460c      	mov	r4, r1
 80182fa:	b125      	cbz	r5, 8018306 <__swsetup_r+0x16>
 80182fc:	69ab      	ldr	r3, [r5, #24]
 80182fe:	b913      	cbnz	r3, 8018306 <__swsetup_r+0x16>
 8018300:	4628      	mov	r0, r5
 8018302:	f7ff fab5 	bl	8017870 <__sinit>
 8018306:	4b2e      	ldr	r3, [pc, #184]	; (80183c0 <__swsetup_r+0xd0>)
 8018308:	429c      	cmp	r4, r3
 801830a:	d10f      	bne.n	801832c <__swsetup_r+0x3c>
 801830c:	686c      	ldr	r4, [r5, #4]
 801830e:	89a3      	ldrh	r3, [r4, #12]
 8018310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018314:	0719      	lsls	r1, r3, #28
 8018316:	d42c      	bmi.n	8018372 <__swsetup_r+0x82>
 8018318:	06dd      	lsls	r5, r3, #27
 801831a:	d411      	bmi.n	8018340 <__swsetup_r+0x50>
 801831c:	2309      	movs	r3, #9
 801831e:	6033      	str	r3, [r6, #0]
 8018320:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018324:	81a3      	strh	r3, [r4, #12]
 8018326:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801832a:	e03e      	b.n	80183aa <__swsetup_r+0xba>
 801832c:	4b25      	ldr	r3, [pc, #148]	; (80183c4 <__swsetup_r+0xd4>)
 801832e:	429c      	cmp	r4, r3
 8018330:	d101      	bne.n	8018336 <__swsetup_r+0x46>
 8018332:	68ac      	ldr	r4, [r5, #8]
 8018334:	e7eb      	b.n	801830e <__swsetup_r+0x1e>
 8018336:	4b24      	ldr	r3, [pc, #144]	; (80183c8 <__swsetup_r+0xd8>)
 8018338:	429c      	cmp	r4, r3
 801833a:	bf08      	it	eq
 801833c:	68ec      	ldreq	r4, [r5, #12]
 801833e:	e7e6      	b.n	801830e <__swsetup_r+0x1e>
 8018340:	0758      	lsls	r0, r3, #29
 8018342:	d512      	bpl.n	801836a <__swsetup_r+0x7a>
 8018344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018346:	b141      	cbz	r1, 801835a <__swsetup_r+0x6a>
 8018348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801834c:	4299      	cmp	r1, r3
 801834e:	d002      	beq.n	8018356 <__swsetup_r+0x66>
 8018350:	4630      	mov	r0, r6
 8018352:	f7ff fb47 	bl	80179e4 <_free_r>
 8018356:	2300      	movs	r3, #0
 8018358:	6363      	str	r3, [r4, #52]	; 0x34
 801835a:	89a3      	ldrh	r3, [r4, #12]
 801835c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018360:	81a3      	strh	r3, [r4, #12]
 8018362:	2300      	movs	r3, #0
 8018364:	6063      	str	r3, [r4, #4]
 8018366:	6923      	ldr	r3, [r4, #16]
 8018368:	6023      	str	r3, [r4, #0]
 801836a:	89a3      	ldrh	r3, [r4, #12]
 801836c:	f043 0308 	orr.w	r3, r3, #8
 8018370:	81a3      	strh	r3, [r4, #12]
 8018372:	6923      	ldr	r3, [r4, #16]
 8018374:	b94b      	cbnz	r3, 801838a <__swsetup_r+0x9a>
 8018376:	89a3      	ldrh	r3, [r4, #12]
 8018378:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801837c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018380:	d003      	beq.n	801838a <__swsetup_r+0x9a>
 8018382:	4621      	mov	r1, r4
 8018384:	4630      	mov	r0, r6
 8018386:	f000 f933 	bl	80185f0 <__smakebuf_r>
 801838a:	89a0      	ldrh	r0, [r4, #12]
 801838c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018390:	f010 0301 	ands.w	r3, r0, #1
 8018394:	d00a      	beq.n	80183ac <__swsetup_r+0xbc>
 8018396:	2300      	movs	r3, #0
 8018398:	60a3      	str	r3, [r4, #8]
 801839a:	6963      	ldr	r3, [r4, #20]
 801839c:	425b      	negs	r3, r3
 801839e:	61a3      	str	r3, [r4, #24]
 80183a0:	6923      	ldr	r3, [r4, #16]
 80183a2:	b943      	cbnz	r3, 80183b6 <__swsetup_r+0xc6>
 80183a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80183a8:	d1ba      	bne.n	8018320 <__swsetup_r+0x30>
 80183aa:	bd70      	pop	{r4, r5, r6, pc}
 80183ac:	0781      	lsls	r1, r0, #30
 80183ae:	bf58      	it	pl
 80183b0:	6963      	ldrpl	r3, [r4, #20]
 80183b2:	60a3      	str	r3, [r4, #8]
 80183b4:	e7f4      	b.n	80183a0 <__swsetup_r+0xb0>
 80183b6:	2000      	movs	r0, #0
 80183b8:	e7f7      	b.n	80183aa <__swsetup_r+0xba>
 80183ba:	bf00      	nop
 80183bc:	2000002c 	.word	0x2000002c
 80183c0:	0801b354 	.word	0x0801b354
 80183c4:	0801b374 	.word	0x0801b374
 80183c8:	0801b334 	.word	0x0801b334

080183cc <abort>:
 80183cc:	b508      	push	{r3, lr}
 80183ce:	2006      	movs	r0, #6
 80183d0:	f000 f994 	bl	80186fc <raise>
 80183d4:	2001      	movs	r0, #1
 80183d6:	f7ea f8bf 	bl	8002558 <_exit>
	...

080183dc <_close_r>:
 80183dc:	b538      	push	{r3, r4, r5, lr}
 80183de:	4d06      	ldr	r5, [pc, #24]	; (80183f8 <_close_r+0x1c>)
 80183e0:	2300      	movs	r3, #0
 80183e2:	4604      	mov	r4, r0
 80183e4:	4608      	mov	r0, r1
 80183e6:	602b      	str	r3, [r5, #0]
 80183e8:	f7ea f8c0 	bl	800256c <_close>
 80183ec:	1c43      	adds	r3, r0, #1
 80183ee:	d102      	bne.n	80183f6 <_close_r+0x1a>
 80183f0:	682b      	ldr	r3, [r5, #0]
 80183f2:	b103      	cbz	r3, 80183f6 <_close_r+0x1a>
 80183f4:	6023      	str	r3, [r4, #0]
 80183f6:	bd38      	pop	{r3, r4, r5, pc}
 80183f8:	2000984c 	.word	0x2000984c

080183fc <__sflush_r>:
 80183fc:	898a      	ldrh	r2, [r1, #12]
 80183fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018402:	4605      	mov	r5, r0
 8018404:	0710      	lsls	r0, r2, #28
 8018406:	460c      	mov	r4, r1
 8018408:	d458      	bmi.n	80184bc <__sflush_r+0xc0>
 801840a:	684b      	ldr	r3, [r1, #4]
 801840c:	2b00      	cmp	r3, #0
 801840e:	dc05      	bgt.n	801841c <__sflush_r+0x20>
 8018410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018412:	2b00      	cmp	r3, #0
 8018414:	dc02      	bgt.n	801841c <__sflush_r+0x20>
 8018416:	2000      	movs	r0, #0
 8018418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801841c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801841e:	2e00      	cmp	r6, #0
 8018420:	d0f9      	beq.n	8018416 <__sflush_r+0x1a>
 8018422:	2300      	movs	r3, #0
 8018424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018428:	682f      	ldr	r7, [r5, #0]
 801842a:	602b      	str	r3, [r5, #0]
 801842c:	d032      	beq.n	8018494 <__sflush_r+0x98>
 801842e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018430:	89a3      	ldrh	r3, [r4, #12]
 8018432:	075a      	lsls	r2, r3, #29
 8018434:	d505      	bpl.n	8018442 <__sflush_r+0x46>
 8018436:	6863      	ldr	r3, [r4, #4]
 8018438:	1ac0      	subs	r0, r0, r3
 801843a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801843c:	b10b      	cbz	r3, 8018442 <__sflush_r+0x46>
 801843e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018440:	1ac0      	subs	r0, r0, r3
 8018442:	2300      	movs	r3, #0
 8018444:	4602      	mov	r2, r0
 8018446:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018448:	6a21      	ldr	r1, [r4, #32]
 801844a:	4628      	mov	r0, r5
 801844c:	47b0      	blx	r6
 801844e:	1c43      	adds	r3, r0, #1
 8018450:	89a3      	ldrh	r3, [r4, #12]
 8018452:	d106      	bne.n	8018462 <__sflush_r+0x66>
 8018454:	6829      	ldr	r1, [r5, #0]
 8018456:	291d      	cmp	r1, #29
 8018458:	d82c      	bhi.n	80184b4 <__sflush_r+0xb8>
 801845a:	4a2a      	ldr	r2, [pc, #168]	; (8018504 <__sflush_r+0x108>)
 801845c:	40ca      	lsrs	r2, r1
 801845e:	07d6      	lsls	r6, r2, #31
 8018460:	d528      	bpl.n	80184b4 <__sflush_r+0xb8>
 8018462:	2200      	movs	r2, #0
 8018464:	6062      	str	r2, [r4, #4]
 8018466:	04d9      	lsls	r1, r3, #19
 8018468:	6922      	ldr	r2, [r4, #16]
 801846a:	6022      	str	r2, [r4, #0]
 801846c:	d504      	bpl.n	8018478 <__sflush_r+0x7c>
 801846e:	1c42      	adds	r2, r0, #1
 8018470:	d101      	bne.n	8018476 <__sflush_r+0x7a>
 8018472:	682b      	ldr	r3, [r5, #0]
 8018474:	b903      	cbnz	r3, 8018478 <__sflush_r+0x7c>
 8018476:	6560      	str	r0, [r4, #84]	; 0x54
 8018478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801847a:	602f      	str	r7, [r5, #0]
 801847c:	2900      	cmp	r1, #0
 801847e:	d0ca      	beq.n	8018416 <__sflush_r+0x1a>
 8018480:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018484:	4299      	cmp	r1, r3
 8018486:	d002      	beq.n	801848e <__sflush_r+0x92>
 8018488:	4628      	mov	r0, r5
 801848a:	f7ff faab 	bl	80179e4 <_free_r>
 801848e:	2000      	movs	r0, #0
 8018490:	6360      	str	r0, [r4, #52]	; 0x34
 8018492:	e7c1      	b.n	8018418 <__sflush_r+0x1c>
 8018494:	6a21      	ldr	r1, [r4, #32]
 8018496:	2301      	movs	r3, #1
 8018498:	4628      	mov	r0, r5
 801849a:	47b0      	blx	r6
 801849c:	1c41      	adds	r1, r0, #1
 801849e:	d1c7      	bne.n	8018430 <__sflush_r+0x34>
 80184a0:	682b      	ldr	r3, [r5, #0]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d0c4      	beq.n	8018430 <__sflush_r+0x34>
 80184a6:	2b1d      	cmp	r3, #29
 80184a8:	d001      	beq.n	80184ae <__sflush_r+0xb2>
 80184aa:	2b16      	cmp	r3, #22
 80184ac:	d101      	bne.n	80184b2 <__sflush_r+0xb6>
 80184ae:	602f      	str	r7, [r5, #0]
 80184b0:	e7b1      	b.n	8018416 <__sflush_r+0x1a>
 80184b2:	89a3      	ldrh	r3, [r4, #12]
 80184b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184b8:	81a3      	strh	r3, [r4, #12]
 80184ba:	e7ad      	b.n	8018418 <__sflush_r+0x1c>
 80184bc:	690f      	ldr	r7, [r1, #16]
 80184be:	2f00      	cmp	r7, #0
 80184c0:	d0a9      	beq.n	8018416 <__sflush_r+0x1a>
 80184c2:	0793      	lsls	r3, r2, #30
 80184c4:	680e      	ldr	r6, [r1, #0]
 80184c6:	bf08      	it	eq
 80184c8:	694b      	ldreq	r3, [r1, #20]
 80184ca:	600f      	str	r7, [r1, #0]
 80184cc:	bf18      	it	ne
 80184ce:	2300      	movne	r3, #0
 80184d0:	eba6 0807 	sub.w	r8, r6, r7
 80184d4:	608b      	str	r3, [r1, #8]
 80184d6:	f1b8 0f00 	cmp.w	r8, #0
 80184da:	dd9c      	ble.n	8018416 <__sflush_r+0x1a>
 80184dc:	6a21      	ldr	r1, [r4, #32]
 80184de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80184e0:	4643      	mov	r3, r8
 80184e2:	463a      	mov	r2, r7
 80184e4:	4628      	mov	r0, r5
 80184e6:	47b0      	blx	r6
 80184e8:	2800      	cmp	r0, #0
 80184ea:	dc06      	bgt.n	80184fa <__sflush_r+0xfe>
 80184ec:	89a3      	ldrh	r3, [r4, #12]
 80184ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184f2:	81a3      	strh	r3, [r4, #12]
 80184f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80184f8:	e78e      	b.n	8018418 <__sflush_r+0x1c>
 80184fa:	4407      	add	r7, r0
 80184fc:	eba8 0800 	sub.w	r8, r8, r0
 8018500:	e7e9      	b.n	80184d6 <__sflush_r+0xda>
 8018502:	bf00      	nop
 8018504:	20400001 	.word	0x20400001

08018508 <_fflush_r>:
 8018508:	b538      	push	{r3, r4, r5, lr}
 801850a:	690b      	ldr	r3, [r1, #16]
 801850c:	4605      	mov	r5, r0
 801850e:	460c      	mov	r4, r1
 8018510:	b913      	cbnz	r3, 8018518 <_fflush_r+0x10>
 8018512:	2500      	movs	r5, #0
 8018514:	4628      	mov	r0, r5
 8018516:	bd38      	pop	{r3, r4, r5, pc}
 8018518:	b118      	cbz	r0, 8018522 <_fflush_r+0x1a>
 801851a:	6983      	ldr	r3, [r0, #24]
 801851c:	b90b      	cbnz	r3, 8018522 <_fflush_r+0x1a>
 801851e:	f7ff f9a7 	bl	8017870 <__sinit>
 8018522:	4b14      	ldr	r3, [pc, #80]	; (8018574 <_fflush_r+0x6c>)
 8018524:	429c      	cmp	r4, r3
 8018526:	d11b      	bne.n	8018560 <_fflush_r+0x58>
 8018528:	686c      	ldr	r4, [r5, #4]
 801852a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801852e:	2b00      	cmp	r3, #0
 8018530:	d0ef      	beq.n	8018512 <_fflush_r+0xa>
 8018532:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018534:	07d0      	lsls	r0, r2, #31
 8018536:	d404      	bmi.n	8018542 <_fflush_r+0x3a>
 8018538:	0599      	lsls	r1, r3, #22
 801853a:	d402      	bmi.n	8018542 <_fflush_r+0x3a>
 801853c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801853e:	f7ff fa47 	bl	80179d0 <__retarget_lock_acquire_recursive>
 8018542:	4628      	mov	r0, r5
 8018544:	4621      	mov	r1, r4
 8018546:	f7ff ff59 	bl	80183fc <__sflush_r>
 801854a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801854c:	07da      	lsls	r2, r3, #31
 801854e:	4605      	mov	r5, r0
 8018550:	d4e0      	bmi.n	8018514 <_fflush_r+0xc>
 8018552:	89a3      	ldrh	r3, [r4, #12]
 8018554:	059b      	lsls	r3, r3, #22
 8018556:	d4dd      	bmi.n	8018514 <_fflush_r+0xc>
 8018558:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801855a:	f7ff fa3a 	bl	80179d2 <__retarget_lock_release_recursive>
 801855e:	e7d9      	b.n	8018514 <_fflush_r+0xc>
 8018560:	4b05      	ldr	r3, [pc, #20]	; (8018578 <_fflush_r+0x70>)
 8018562:	429c      	cmp	r4, r3
 8018564:	d101      	bne.n	801856a <_fflush_r+0x62>
 8018566:	68ac      	ldr	r4, [r5, #8]
 8018568:	e7df      	b.n	801852a <_fflush_r+0x22>
 801856a:	4b04      	ldr	r3, [pc, #16]	; (801857c <_fflush_r+0x74>)
 801856c:	429c      	cmp	r4, r3
 801856e:	bf08      	it	eq
 8018570:	68ec      	ldreq	r4, [r5, #12]
 8018572:	e7da      	b.n	801852a <_fflush_r+0x22>
 8018574:	0801b354 	.word	0x0801b354
 8018578:	0801b374 	.word	0x0801b374
 801857c:	0801b334 	.word	0x0801b334

08018580 <_lseek_r>:
 8018580:	b538      	push	{r3, r4, r5, lr}
 8018582:	4d07      	ldr	r5, [pc, #28]	; (80185a0 <_lseek_r+0x20>)
 8018584:	4604      	mov	r4, r0
 8018586:	4608      	mov	r0, r1
 8018588:	4611      	mov	r1, r2
 801858a:	2200      	movs	r2, #0
 801858c:	602a      	str	r2, [r5, #0]
 801858e:	461a      	mov	r2, r3
 8018590:	f7ea f813 	bl	80025ba <_lseek>
 8018594:	1c43      	adds	r3, r0, #1
 8018596:	d102      	bne.n	801859e <_lseek_r+0x1e>
 8018598:	682b      	ldr	r3, [r5, #0]
 801859a:	b103      	cbz	r3, 801859e <_lseek_r+0x1e>
 801859c:	6023      	str	r3, [r4, #0]
 801859e:	bd38      	pop	{r3, r4, r5, pc}
 80185a0:	2000984c 	.word	0x2000984c

080185a4 <__swhatbuf_r>:
 80185a4:	b570      	push	{r4, r5, r6, lr}
 80185a6:	460e      	mov	r6, r1
 80185a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185ac:	2900      	cmp	r1, #0
 80185ae:	b096      	sub	sp, #88	; 0x58
 80185b0:	4614      	mov	r4, r2
 80185b2:	461d      	mov	r5, r3
 80185b4:	da08      	bge.n	80185c8 <__swhatbuf_r+0x24>
 80185b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80185ba:	2200      	movs	r2, #0
 80185bc:	602a      	str	r2, [r5, #0]
 80185be:	061a      	lsls	r2, r3, #24
 80185c0:	d410      	bmi.n	80185e4 <__swhatbuf_r+0x40>
 80185c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80185c6:	e00e      	b.n	80185e6 <__swhatbuf_r+0x42>
 80185c8:	466a      	mov	r2, sp
 80185ca:	f000 f8b3 	bl	8018734 <_fstat_r>
 80185ce:	2800      	cmp	r0, #0
 80185d0:	dbf1      	blt.n	80185b6 <__swhatbuf_r+0x12>
 80185d2:	9a01      	ldr	r2, [sp, #4]
 80185d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80185d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80185dc:	425a      	negs	r2, r3
 80185de:	415a      	adcs	r2, r3
 80185e0:	602a      	str	r2, [r5, #0]
 80185e2:	e7ee      	b.n	80185c2 <__swhatbuf_r+0x1e>
 80185e4:	2340      	movs	r3, #64	; 0x40
 80185e6:	2000      	movs	r0, #0
 80185e8:	6023      	str	r3, [r4, #0]
 80185ea:	b016      	add	sp, #88	; 0x58
 80185ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080185f0 <__smakebuf_r>:
 80185f0:	898b      	ldrh	r3, [r1, #12]
 80185f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80185f4:	079d      	lsls	r5, r3, #30
 80185f6:	4606      	mov	r6, r0
 80185f8:	460c      	mov	r4, r1
 80185fa:	d507      	bpl.n	801860c <__smakebuf_r+0x1c>
 80185fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018600:	6023      	str	r3, [r4, #0]
 8018602:	6123      	str	r3, [r4, #16]
 8018604:	2301      	movs	r3, #1
 8018606:	6163      	str	r3, [r4, #20]
 8018608:	b002      	add	sp, #8
 801860a:	bd70      	pop	{r4, r5, r6, pc}
 801860c:	ab01      	add	r3, sp, #4
 801860e:	466a      	mov	r2, sp
 8018610:	f7ff ffc8 	bl	80185a4 <__swhatbuf_r>
 8018614:	9900      	ldr	r1, [sp, #0]
 8018616:	4605      	mov	r5, r0
 8018618:	4630      	mov	r0, r6
 801861a:	f7ff fa4f 	bl	8017abc <_malloc_r>
 801861e:	b948      	cbnz	r0, 8018634 <__smakebuf_r+0x44>
 8018620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018624:	059a      	lsls	r2, r3, #22
 8018626:	d4ef      	bmi.n	8018608 <__smakebuf_r+0x18>
 8018628:	f023 0303 	bic.w	r3, r3, #3
 801862c:	f043 0302 	orr.w	r3, r3, #2
 8018630:	81a3      	strh	r3, [r4, #12]
 8018632:	e7e3      	b.n	80185fc <__smakebuf_r+0xc>
 8018634:	4b0d      	ldr	r3, [pc, #52]	; (801866c <__smakebuf_r+0x7c>)
 8018636:	62b3      	str	r3, [r6, #40]	; 0x28
 8018638:	89a3      	ldrh	r3, [r4, #12]
 801863a:	6020      	str	r0, [r4, #0]
 801863c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018640:	81a3      	strh	r3, [r4, #12]
 8018642:	9b00      	ldr	r3, [sp, #0]
 8018644:	6163      	str	r3, [r4, #20]
 8018646:	9b01      	ldr	r3, [sp, #4]
 8018648:	6120      	str	r0, [r4, #16]
 801864a:	b15b      	cbz	r3, 8018664 <__smakebuf_r+0x74>
 801864c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018650:	4630      	mov	r0, r6
 8018652:	f000 f881 	bl	8018758 <_isatty_r>
 8018656:	b128      	cbz	r0, 8018664 <__smakebuf_r+0x74>
 8018658:	89a3      	ldrh	r3, [r4, #12]
 801865a:	f023 0303 	bic.w	r3, r3, #3
 801865e:	f043 0301 	orr.w	r3, r3, #1
 8018662:	81a3      	strh	r3, [r4, #12]
 8018664:	89a0      	ldrh	r0, [r4, #12]
 8018666:	4305      	orrs	r5, r0
 8018668:	81a5      	strh	r5, [r4, #12]
 801866a:	e7cd      	b.n	8018608 <__smakebuf_r+0x18>
 801866c:	08017809 	.word	0x08017809

08018670 <__malloc_lock>:
 8018670:	4801      	ldr	r0, [pc, #4]	; (8018678 <__malloc_lock+0x8>)
 8018672:	f7ff b9ad 	b.w	80179d0 <__retarget_lock_acquire_recursive>
 8018676:	bf00      	nop
 8018678:	20009850 	.word	0x20009850

0801867c <__malloc_unlock>:
 801867c:	4801      	ldr	r0, [pc, #4]	; (8018684 <__malloc_unlock+0x8>)
 801867e:	f7ff b9a8 	b.w	80179d2 <__retarget_lock_release_recursive>
 8018682:	bf00      	nop
 8018684:	20009850 	.word	0x20009850

08018688 <_read_r>:
 8018688:	b538      	push	{r3, r4, r5, lr}
 801868a:	4d07      	ldr	r5, [pc, #28]	; (80186a8 <_read_r+0x20>)
 801868c:	4604      	mov	r4, r0
 801868e:	4608      	mov	r0, r1
 8018690:	4611      	mov	r1, r2
 8018692:	2200      	movs	r2, #0
 8018694:	602a      	str	r2, [r5, #0]
 8018696:	461a      	mov	r2, r3
 8018698:	f7fe fb02 	bl	8016ca0 <_read>
 801869c:	1c43      	adds	r3, r0, #1
 801869e:	d102      	bne.n	80186a6 <_read_r+0x1e>
 80186a0:	682b      	ldr	r3, [r5, #0]
 80186a2:	b103      	cbz	r3, 80186a6 <_read_r+0x1e>
 80186a4:	6023      	str	r3, [r4, #0]
 80186a6:	bd38      	pop	{r3, r4, r5, pc}
 80186a8:	2000984c 	.word	0x2000984c

080186ac <_raise_r>:
 80186ac:	291f      	cmp	r1, #31
 80186ae:	b538      	push	{r3, r4, r5, lr}
 80186b0:	4604      	mov	r4, r0
 80186b2:	460d      	mov	r5, r1
 80186b4:	d904      	bls.n	80186c0 <_raise_r+0x14>
 80186b6:	2316      	movs	r3, #22
 80186b8:	6003      	str	r3, [r0, #0]
 80186ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80186be:	bd38      	pop	{r3, r4, r5, pc}
 80186c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80186c2:	b112      	cbz	r2, 80186ca <_raise_r+0x1e>
 80186c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80186c8:	b94b      	cbnz	r3, 80186de <_raise_r+0x32>
 80186ca:	4620      	mov	r0, r4
 80186cc:	f000 f830 	bl	8018730 <_getpid_r>
 80186d0:	462a      	mov	r2, r5
 80186d2:	4601      	mov	r1, r0
 80186d4:	4620      	mov	r0, r4
 80186d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186da:	f000 b817 	b.w	801870c <_kill_r>
 80186de:	2b01      	cmp	r3, #1
 80186e0:	d00a      	beq.n	80186f8 <_raise_r+0x4c>
 80186e2:	1c59      	adds	r1, r3, #1
 80186e4:	d103      	bne.n	80186ee <_raise_r+0x42>
 80186e6:	2316      	movs	r3, #22
 80186e8:	6003      	str	r3, [r0, #0]
 80186ea:	2001      	movs	r0, #1
 80186ec:	e7e7      	b.n	80186be <_raise_r+0x12>
 80186ee:	2400      	movs	r4, #0
 80186f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80186f4:	4628      	mov	r0, r5
 80186f6:	4798      	blx	r3
 80186f8:	2000      	movs	r0, #0
 80186fa:	e7e0      	b.n	80186be <_raise_r+0x12>

080186fc <raise>:
 80186fc:	4b02      	ldr	r3, [pc, #8]	; (8018708 <raise+0xc>)
 80186fe:	4601      	mov	r1, r0
 8018700:	6818      	ldr	r0, [r3, #0]
 8018702:	f7ff bfd3 	b.w	80186ac <_raise_r>
 8018706:	bf00      	nop
 8018708:	2000002c 	.word	0x2000002c

0801870c <_kill_r>:
 801870c:	b538      	push	{r3, r4, r5, lr}
 801870e:	4d07      	ldr	r5, [pc, #28]	; (801872c <_kill_r+0x20>)
 8018710:	2300      	movs	r3, #0
 8018712:	4604      	mov	r4, r0
 8018714:	4608      	mov	r0, r1
 8018716:	4611      	mov	r1, r2
 8018718:	602b      	str	r3, [r5, #0]
 801871a:	f7e9 ff0b 	bl	8002534 <_kill>
 801871e:	1c43      	adds	r3, r0, #1
 8018720:	d102      	bne.n	8018728 <_kill_r+0x1c>
 8018722:	682b      	ldr	r3, [r5, #0]
 8018724:	b103      	cbz	r3, 8018728 <_kill_r+0x1c>
 8018726:	6023      	str	r3, [r4, #0]
 8018728:	bd38      	pop	{r3, r4, r5, pc}
 801872a:	bf00      	nop
 801872c:	2000984c 	.word	0x2000984c

08018730 <_getpid_r>:
 8018730:	f7e9 bef8 	b.w	8002524 <_getpid>

08018734 <_fstat_r>:
 8018734:	b538      	push	{r3, r4, r5, lr}
 8018736:	4d07      	ldr	r5, [pc, #28]	; (8018754 <_fstat_r+0x20>)
 8018738:	2300      	movs	r3, #0
 801873a:	4604      	mov	r4, r0
 801873c:	4608      	mov	r0, r1
 801873e:	4611      	mov	r1, r2
 8018740:	602b      	str	r3, [r5, #0]
 8018742:	f7e9 ff1f 	bl	8002584 <_fstat>
 8018746:	1c43      	adds	r3, r0, #1
 8018748:	d102      	bne.n	8018750 <_fstat_r+0x1c>
 801874a:	682b      	ldr	r3, [r5, #0]
 801874c:	b103      	cbz	r3, 8018750 <_fstat_r+0x1c>
 801874e:	6023      	str	r3, [r4, #0]
 8018750:	bd38      	pop	{r3, r4, r5, pc}
 8018752:	bf00      	nop
 8018754:	2000984c 	.word	0x2000984c

08018758 <_isatty_r>:
 8018758:	b538      	push	{r3, r4, r5, lr}
 801875a:	4d06      	ldr	r5, [pc, #24]	; (8018774 <_isatty_r+0x1c>)
 801875c:	2300      	movs	r3, #0
 801875e:	4604      	mov	r4, r0
 8018760:	4608      	mov	r0, r1
 8018762:	602b      	str	r3, [r5, #0]
 8018764:	f7e9 ff1e 	bl	80025a4 <_isatty>
 8018768:	1c43      	adds	r3, r0, #1
 801876a:	d102      	bne.n	8018772 <_isatty_r+0x1a>
 801876c:	682b      	ldr	r3, [r5, #0]
 801876e:	b103      	cbz	r3, 8018772 <_isatty_r+0x1a>
 8018770:	6023      	str	r3, [r4, #0]
 8018772:	bd38      	pop	{r3, r4, r5, pc}
 8018774:	2000984c 	.word	0x2000984c

08018778 <_init>:
 8018778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801877a:	bf00      	nop
 801877c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801877e:	bc08      	pop	{r3}
 8018780:	469e      	mov	lr, r3
 8018782:	4770      	bx	lr

08018784 <_fini>:
 8018784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018786:	bf00      	nop
 8018788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801878a:	bc08      	pop	{r3}
 801878c:	469e      	mov	lr, r3
 801878e:	4770      	bx	lr
