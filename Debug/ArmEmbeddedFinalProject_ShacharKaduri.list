
ArmEmbeddedFinalProject_ShacharKaduri.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000170b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c5c  08017288  08017288  00027288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019ee4  08019ee4  000301d0  2**0
                  CONTENTS
  4 .ARM          00000008  08019ee4  08019ee4  00029ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019eec  08019eec  000301d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019eec  08019eec  00029eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019ef0  08019ef0  00029ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08019ef4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000090  08019f84  00030090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000130  0801a024  00030130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000091d0  200001d0  0801a0c4  000301d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200093a0  0801a0c4  000393a0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00031936  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000719e  00000000  00000000  00061b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000024a0  00000000  00000000  00068cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002310  00000000  00000000  0006b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00037b49  00000000  00000000  0006d488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003bd69  00000000  00000000  000a4fd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010fa1d  00000000  00000000  000e0d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f0757  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a280  00000000  00000000  001f07a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d0 	.word	0x200001d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08017270 	.word	0x08017270

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d4 	.word	0x200001d4
 800020c:	08017270 	.word	0x08017270

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b974 	b.w	8000dac <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468e      	mov	lr, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d14d      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000aea:	428a      	cmp	r2, r1
 8000aec:	4694      	mov	ip, r2
 8000aee:	d969      	bls.n	8000bc4 <__udivmoddi4+0xe8>
 8000af0:	fab2 f282 	clz	r2, r2
 8000af4:	b152      	cbz	r2, 8000b0c <__udivmoddi4+0x30>
 8000af6:	fa01 f302 	lsl.w	r3, r1, r2
 8000afa:	f1c2 0120 	rsb	r1, r2, #32
 8000afe:	fa20 f101 	lsr.w	r1, r0, r1
 8000b02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b06:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0a:	4094      	lsls	r4, r2
 8000b0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b10:	0c21      	lsrs	r1, r4, #16
 8000b12:	fbbe f6f8 	udiv	r6, lr, r8
 8000b16:	fa1f f78c 	uxth.w	r7, ip
 8000b1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b22:	fb06 f107 	mul.w	r1, r6, r7
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b32:	f080 811f 	bcs.w	8000d74 <__udivmoddi4+0x298>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 811c 	bls.w	8000d74 <__udivmoddi4+0x298>
 8000b3c:	3e02      	subs	r6, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a5b      	subs	r3, r3, r1
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b48:	fb08 3310 	mls	r3, r8, r0, r3
 8000b4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b50:	fb00 f707 	mul.w	r7, r0, r7
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x92>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b60:	f080 810a 	bcs.w	8000d78 <__udivmoddi4+0x29c>
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	f240 8107 	bls.w	8000d78 <__udivmoddi4+0x29c>
 8000b6a:	4464      	add	r4, ip
 8000b6c:	3802      	subs	r0, #2
 8000b6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b72:	1be4      	subs	r4, r4, r7
 8000b74:	2600      	movs	r6, #0
 8000b76:	b11d      	cbz	r5, 8000b80 <__udivmoddi4+0xa4>
 8000b78:	40d4      	lsrs	r4, r2
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d909      	bls.n	8000b9e <__udivmoddi4+0xc2>
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	f000 80ef 	beq.w	8000d6e <__udivmoddi4+0x292>
 8000b90:	2600      	movs	r6, #0
 8000b92:	e9c5 0100 	strd	r0, r1, [r5]
 8000b96:	4630      	mov	r0, r6
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	fab3 f683 	clz	r6, r3
 8000ba2:	2e00      	cmp	r6, #0
 8000ba4:	d14a      	bne.n	8000c3c <__udivmoddi4+0x160>
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d302      	bcc.n	8000bb0 <__udivmoddi4+0xd4>
 8000baa:	4282      	cmp	r2, r0
 8000bac:	f200 80f9 	bhi.w	8000da2 <__udivmoddi4+0x2c6>
 8000bb0:	1a84      	subs	r4, r0, r2
 8000bb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	469e      	mov	lr, r3
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	d0e0      	beq.n	8000b80 <__udivmoddi4+0xa4>
 8000bbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc2:	e7dd      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000bc4:	b902      	cbnz	r2, 8000bc8 <__udivmoddi4+0xec>
 8000bc6:	deff      	udf	#255	; 0xff
 8000bc8:	fab2 f282 	clz	r2, r2
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	f040 8092 	bne.w	8000cf6 <__udivmoddi4+0x21a>
 8000bd2:	eba1 010c 	sub.w	r1, r1, ip
 8000bd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bda:	fa1f fe8c 	uxth.w	lr, ip
 8000bde:	2601      	movs	r6, #1
 8000be0:	0c20      	lsrs	r0, r4, #16
 8000be2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000be6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bee:	fb0e f003 	mul.w	r0, lr, r3
 8000bf2:	4288      	cmp	r0, r1
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x12c>
 8000bf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x12a>
 8000c00:	4288      	cmp	r0, r1
 8000c02:	f200 80cb 	bhi.w	8000d9c <__udivmoddi4+0x2c0>
 8000c06:	4643      	mov	r3, r8
 8000c08:	1a09      	subs	r1, r1, r0
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c10:	fb07 1110 	mls	r1, r7, r0, r1
 8000c14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c18:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1c:	45a6      	cmp	lr, r4
 8000c1e:	d908      	bls.n	8000c32 <__udivmoddi4+0x156>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c28:	d202      	bcs.n	8000c30 <__udivmoddi4+0x154>
 8000c2a:	45a6      	cmp	lr, r4
 8000c2c:	f200 80bb 	bhi.w	8000da6 <__udivmoddi4+0x2ca>
 8000c30:	4608      	mov	r0, r1
 8000c32:	eba4 040e 	sub.w	r4, r4, lr
 8000c36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3a:	e79c      	b.n	8000b76 <__udivmoddi4+0x9a>
 8000c3c:	f1c6 0720 	rsb	r7, r6, #32
 8000c40:	40b3      	lsls	r3, r6
 8000c42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c52:	431c      	orrs	r4, r3
 8000c54:	40f9      	lsrs	r1, r7
 8000c56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c62:	0c20      	lsrs	r0, r4, #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fb09 1118 	mls	r1, r9, r8, r1
 8000c6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c70:	fb08 f00e 	mul.w	r0, r8, lr
 8000c74:	4288      	cmp	r0, r1
 8000c76:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7a:	d90b      	bls.n	8000c94 <__udivmoddi4+0x1b8>
 8000c7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c84:	f080 8088 	bcs.w	8000d98 <__udivmoddi4+0x2bc>
 8000c88:	4288      	cmp	r0, r1
 8000c8a:	f240 8085 	bls.w	8000d98 <__udivmoddi4+0x2bc>
 8000c8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1a09      	subs	r1, r1, r0
 8000c96:	b2a4      	uxth	r4, r4
 8000c98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca8:	458e      	cmp	lr, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x1e2>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000cb4:	d26c      	bcs.n	8000d90 <__udivmoddi4+0x2b4>
 8000cb6:	458e      	cmp	lr, r1
 8000cb8:	d96a      	bls.n	8000d90 <__udivmoddi4+0x2b4>
 8000cba:	3802      	subs	r0, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cc6:	eba1 010e 	sub.w	r1, r1, lr
 8000cca:	42a1      	cmp	r1, r4
 8000ccc:	46c8      	mov	r8, r9
 8000cce:	46a6      	mov	lr, r4
 8000cd0:	d356      	bcc.n	8000d80 <__udivmoddi4+0x2a4>
 8000cd2:	d053      	beq.n	8000d7c <__udivmoddi4+0x2a0>
 8000cd4:	b15d      	cbz	r5, 8000cee <__udivmoddi4+0x212>
 8000cd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cda:	eb61 010e 	sbc.w	r1, r1, lr
 8000cde:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ce6:	40f1      	lsrs	r1, r6
 8000ce8:	431f      	orrs	r7, r3
 8000cea:	e9c5 7100 	strd	r7, r1, [r5]
 8000cee:	2600      	movs	r6, #0
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	f1c2 0320 	rsb	r3, r2, #32
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d00:	fa21 f303 	lsr.w	r3, r1, r3
 8000d04:	4091      	lsls	r1, r2
 8000d06:	4301      	orrs	r1, r0
 8000d08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d14:	fb07 3610 	mls	r6, r7, r0, r3
 8000d18:	0c0b      	lsrs	r3, r1, #16
 8000d1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d22:	429e      	cmp	r6, r3
 8000d24:	fa04 f402 	lsl.w	r4, r4, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x260>
 8000d2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d32:	d22f      	bcs.n	8000d94 <__udivmoddi4+0x2b8>
 8000d34:	429e      	cmp	r6, r3
 8000d36:	d92d      	bls.n	8000d94 <__udivmoddi4+0x2b8>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	b289      	uxth	r1, r1
 8000d40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d44:	fb07 3316 	mls	r3, r7, r6, r3
 8000d48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d50:	428b      	cmp	r3, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x28a>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d5c:	d216      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d914      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d62:	3e02      	subs	r6, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	1ac9      	subs	r1, r1, r3
 8000d68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d6c:	e738      	b.n	8000be0 <__udivmoddi4+0x104>
 8000d6e:	462e      	mov	r6, r5
 8000d70:	4628      	mov	r0, r5
 8000d72:	e705      	b.n	8000b80 <__udivmoddi4+0xa4>
 8000d74:	4606      	mov	r6, r0
 8000d76:	e6e3      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d78:	4618      	mov	r0, r3
 8000d7a:	e6f8      	b.n	8000b6e <__udivmoddi4+0x92>
 8000d7c:	454b      	cmp	r3, r9
 8000d7e:	d2a9      	bcs.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d80:	ebb9 0802 	subs.w	r8, r9, r2
 8000d84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d88:	3801      	subs	r0, #1
 8000d8a:	e7a3      	b.n	8000cd4 <__udivmoddi4+0x1f8>
 8000d8c:	4646      	mov	r6, r8
 8000d8e:	e7ea      	b.n	8000d66 <__udivmoddi4+0x28a>
 8000d90:	4620      	mov	r0, r4
 8000d92:	e794      	b.n	8000cbe <__udivmoddi4+0x1e2>
 8000d94:	4640      	mov	r0, r8
 8000d96:	e7d1      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d98:	46d0      	mov	r8, sl
 8000d9a:	e77b      	b.n	8000c94 <__udivmoddi4+0x1b8>
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	e732      	b.n	8000c08 <__udivmoddi4+0x12c>
 8000da2:	4630      	mov	r0, r6
 8000da4:	e709      	b.n	8000bba <__udivmoddi4+0xde>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	e742      	b.n	8000c32 <__udivmoddi4+0x156>

08000dac <__aeabi_idiv0>:
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop

08000db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db4:	f001 fc74 	bl	80026a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db8:	f000 f81e 	bl	8000df8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8000dbc:	f000 fa70 	bl	80012a0 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc0:	f000 faf0 	bl	80013a4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000dc4:	f000 f9de 	bl	8001184 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000dc8:	f000 fa3c 	bl	8001244 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM7_Init();
 8000dcc:	f000 f972 	bl	80010b4 <MX_TIM7_Init>
  MX_LWIP_Init();
 8000dd0:	f009 ffd0 	bl	800ad74 <MX_LWIP_Init>
  MX_UART4_Init();
 8000dd4:	f000 f9a6 	bl	8001124 <MX_UART4_Init>
  MX_DMA_Init();
 8000dd8:	f000 fa62 	bl	80012a0 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ddc:	f000 f874 	bl	8000ec8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000de0:	f000 f8b2 	bl	8000f48 <MX_I2C2_Init>
  MX_USART6_UART_Init();
 8000de4:	f000 f9fe 	bl	80011e4 <MX_USART6_UART_Init>
  MX_SPI4_Init();
 8000de8:	f000 f92c 	bl	8001044 <MX_SPI4_Init>
  MX_SPI1_Init();
 8000dec:	f000 f8ec 	bl	8000fc8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  UUT_main();
 8000df0:	f014 ff26 	bl	8015c40 <UUT_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <main+0x44>
	...

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b094      	sub	sp, #80	; 0x50
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	2230      	movs	r2, #48	; 0x30
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f015 f9da 	bl	80161c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e1c:	f005 fddc 	bl	80069d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <SystemClock_Config+0xc8>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a26      	ldr	r2, [pc, #152]	; (8000ec0 <SystemClock_Config+0xc8>)
 8000e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <SystemClock_Config+0xc8>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e40:	4a20      	ldr	r2, [pc, #128]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e46:	6013      	str	r3, [r2, #0]
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <SystemClock_Config+0xcc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e54:	2301      	movs	r3, #1
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e58:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000e6c:	2348      	movs	r3, #72	; 0x48
 8000e6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e74:	2303      	movs	r3, #3
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e78:	f107 0320 	add.w	r3, r7, #32
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f005 fdbb 	bl	80069f8 <HAL_RCC_OscConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e88:	f000 fb4a 	bl	8001520 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e90:	2302      	movs	r3, #2
 8000e92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2102      	movs	r1, #2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 f849 	bl	8006f40 <HAL_RCC_ClockConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000eb4:	f000 fb34 	bl	8001520 <Error_Handler>
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3750      	adds	r7, #80	; 0x50
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40007000 	.word	0x40007000

08000ec8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <MX_I2C1_Init+0x78>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000ed2:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <MX_I2C1_Init+0x7c>)
 8000ed6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 15;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000eda:	220f      	movs	r2, #15
 8000edc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 8000ede:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ee4:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000eea:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000efc:	4b0f      	ldr	r3, [pc, #60]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f02:	480e      	ldr	r0, [pc, #56]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000f04:	f003 fc3c 	bl	8004780 <HAL_I2C_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f0e:	f000 fb07 	bl	8001520 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000f16:	f005 fb7f 	bl	8006618 <HAL_I2CEx_ConfigAnalogFilter>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f20:	f000 fafe 	bl	8001520 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f24:	2100      	movs	r1, #0
 8000f26:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_I2C1_Init+0x74>)
 8000f28:	f005 fbc1 	bl	80066ae <HAL_I2CEx_ConfigDigitalFilter>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f32:	f000 faf5 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200001ec 	.word	0x200001ec
 8000f40:	40005400 	.word	0x40005400
 8000f44:	00808cd2 	.word	0x00808cd2

08000f48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f4c:	4b1b      	ldr	r3, [pc, #108]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	; (8000fc0 <MX_I2C2_Init+0x78>)
 8000f50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00808CD2;
 8000f52:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f54:	4a1b      	ldr	r2, [pc, #108]	; (8000fc4 <MX_I2C2_Init+0x7c>)
 8000f56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f60:	2202      	movs	r2, #2
 8000f62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f84:	f003 fbfc 	bl	8004780 <HAL_I2C_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000f8e:	f000 fac7 	bl	8001520 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f92:	2100      	movs	r1, #0
 8000f94:	4809      	ldr	r0, [pc, #36]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000f96:	f005 fb3f 	bl	8006618 <HAL_I2CEx_ConfigAnalogFilter>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fa0:	f000 fabe 	bl	8001520 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_I2C2_Init+0x74>)
 8000fa8:	f005 fb81 	bl	80066ae <HAL_I2CEx_ConfigDigitalFilter>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000fb2:	f000 fab5 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000240 	.word	0x20000240
 8000fc0:	40005800 	.word	0x40005800
 8000fc4:	00808cd2 	.word	0x00808cd2

08000fc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	; (800103c <MX_SPI1_Init+0x74>)
 8000fce:	4a1c      	ldr	r2, [pc, #112]	; (8001040 <MX_SPI1_Init+0x78>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_SPI1_Init+0x74>)
 8000fd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_SPI1_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <MX_SPI1_Init+0x74>)
 8000fe2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fe6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_SPI1_Init+0x74>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_SPI1_Init+0x74>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_SPI1_Init+0x74>)
 8000ff6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ffa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_SPI1_Init+0x74>)
 8000ffe:	2220      	movs	r2, #32
 8001000:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_SPI1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_SPI1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_SPI1_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_SPI1_Init+0x74>)
 8001016:	2207      	movs	r2, #7
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_SPI1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_SPI1_Init+0x74>)
 8001022:	2208      	movs	r2, #8
 8001024:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_SPI1_Init+0x74>)
 8001028:	f006 fda0 	bl	8007b6c <HAL_SPI_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001032:	f000 fa75 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000414 	.word	0x20000414
 8001040:	40013000 	.word	0x40013000

08001044 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <MX_SPI4_Init+0x68>)
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <MX_SPI4_Init+0x6c>)
 800104c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_SPI4_Init+0x68>)
 8001050:	2200      	movs	r2, #0
 8001052:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <MX_SPI4_Init+0x68>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_SPI4_Init+0x68>)
 800105c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001060:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_SPI4_Init+0x68>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001068:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_SPI4_Init+0x68>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_SPI4_Init+0x68>)
 8001070:	2200      	movs	r2, #0
 8001072:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <MX_SPI4_Init+0x68>)
 8001076:	2200      	movs	r2, #0
 8001078:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_SPI4_Init+0x68>)
 800107c:	2200      	movs	r2, #0
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <MX_SPI4_Init+0x68>)
 8001082:	2200      	movs	r2, #0
 8001084:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_SPI4_Init+0x68>)
 8001088:	2207      	movs	r2, #7
 800108a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <MX_SPI4_Init+0x68>)
 800108e:	2200      	movs	r2, #0
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_SPI4_Init+0x68>)
 8001094:	2200      	movs	r2, #0
 8001096:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001098:	4804      	ldr	r0, [pc, #16]	; (80010ac <MX_SPI4_Init+0x68>)
 800109a:	f006 fd67 	bl	8007b6c <HAL_SPI_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 80010a4:	f000 fa3c 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000478 	.word	0x20000478
 80010b0:	40013400 	.word	0x40013400

080010b4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80010c4:	4b15      	ldr	r3, [pc, #84]	; (800111c <MX_TIM7_Init+0x68>)
 80010c6:	4a16      	ldr	r2, [pc, #88]	; (8001120 <MX_TIM7_Init+0x6c>)
 80010c8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7199;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_TIM7_Init+0x68>)
 80010cc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80010d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d2:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_TIM7_Init+0x68>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_TIM7_Init+0x68>)
 80010da:	f242 720f 	movw	r2, #9999	; 0x270f
 80010de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_TIM7_Init+0x68>)
 80010e2:	2280      	movs	r2, #128	; 0x80
 80010e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80010e6:	480d      	ldr	r0, [pc, #52]	; (800111c <MX_TIM7_Init+0x68>)
 80010e8:	f007 fb9e 	bl	8008828 <HAL_TIM_Base_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80010f2:	f000 fa15 	bl	8001520 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	4619      	mov	r1, r3
 8001102:	4806      	ldr	r0, [pc, #24]	; (800111c <MX_TIM7_Init+0x68>)
 8001104:	f007 fe76 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800110e:	f000 fa07 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000065c 	.word	0x2000065c
 8001120:	40001400 	.word	0x40001400

08001124 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_UART4_Init+0x58>)
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <MX_UART4_Init+0x5c>)
 800112c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_UART4_Init+0x58>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_UART4_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_UART4_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_UART4_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_UART4_Init+0x58>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_UART4_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_UART4_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_UART4_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_UART4_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_UART4_Init+0x58>)
 8001168:	f007 fef0 	bl	8008f4c <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001172:	f000 f9d5 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200006a8 	.word	0x200006a8
 8001180:	40004c00 	.word	0x40004c00

08001184 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_USART3_UART_Init+0x58>)
 800118a:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <MX_USART3_UART_Init+0x5c>)
 800118c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_USART3_UART_Init+0x58>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_USART3_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_USART3_UART_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_USART3_UART_Init+0x58>)
 80011c8:	f007 fec0 	bl	8008f4c <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011d2:	f000 f9a5 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000730 	.word	0x20000730
 80011e0:	40004800 	.word	0x40004800

080011e4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART6_UART_Init+0x58>)
 80011ea:	4a15      	ldr	r2, [pc, #84]	; (8001240 <MX_USART6_UART_Init+0x5c>)
 80011ec:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART6_UART_Init+0x58>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_USART6_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_USART6_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_USART6_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_USART6_UART_Init+0x58>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_USART6_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_USART6_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_USART6_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_USART6_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_USART6_UART_Init+0x58>)
 8001228:	f007 fe90 	bl	8008f4c <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001232:	f000 f975 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200007b8 	.word	0x200007b8
 8001240:	40011400 	.word	0x40011400

08001244 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800124e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001252:	2206      	movs	r2, #6
 8001254:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001258:	2202      	movs	r2, #2
 800125a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001264:	2202      	movs	r2, #2
 8001266:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800126a:	2201      	movs	r2, #1
 800126c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800127c:	2201      	movs	r2, #1
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001288:	f005 fa5d 	bl	8006746 <HAL_PCD_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001292:	f000 f945 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200009c0 	.word	0x200009c0

080012a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a6:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <MX_DMA_Init+0x100>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a3d      	ldr	r2, [pc, #244]	; (80013a0 <MX_DMA_Init+0x100>)
 80012ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <MX_DMA_Init+0x100>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <MX_DMA_Init+0x100>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a37      	ldr	r2, [pc, #220]	; (80013a0 <MX_DMA_Init+0x100>)
 80012c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <MX_DMA_Init+0x100>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	200b      	movs	r0, #11
 80012dc:	f001 fb3d 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80012e0:	200b      	movs	r0, #11
 80012e2:	f001 fb56 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	200d      	movs	r0, #13
 80012ec:	f001 fb35 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80012f0:	200d      	movs	r0, #13
 80012f2:	f001 fb4e 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	200e      	movs	r0, #14
 80012fc:	f001 fb2d 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001300:	200e      	movs	r0, #14
 8001302:	f001 fb46 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	200f      	movs	r0, #15
 800130c:	f001 fb25 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001310:	200f      	movs	r0, #15
 8001312:	f001 fb3e 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2011      	movs	r0, #17
 800131c:	f001 fb1d 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001320:	2011      	movs	r0, #17
 8001322:	f001 fb36 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	202f      	movs	r0, #47	; 0x2f
 800132c:	f001 fb15 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001330:	202f      	movs	r0, #47	; 0x2f
 8001332:	f001 fb2e 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2038      	movs	r0, #56	; 0x38
 800133c:	f001 fb0d 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001340:	2038      	movs	r0, #56	; 0x38
 8001342:	f001 fb26 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2039      	movs	r0, #57	; 0x39
 800134c:	f001 fb05 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001350:	2039      	movs	r0, #57	; 0x39
 8001352:	f001 fb1e 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	203a      	movs	r0, #58	; 0x3a
 800135c:	f001 fafd 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001360:	203a      	movs	r0, #58	; 0x3a
 8001362:	f001 fb16 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	203b      	movs	r0, #59	; 0x3b
 800136c:	f001 faf5 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001370:	203b      	movs	r0, #59	; 0x3b
 8001372:	f001 fb0e 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	203c      	movs	r0, #60	; 0x3c
 800137c:	f001 faed 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001380:	203c      	movs	r0, #60	; 0x3c
 8001382:	f001 fb06 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2100      	movs	r1, #0
 800138a:	2045      	movs	r0, #69	; 0x45
 800138c:	f001 fae5 	bl	800295a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001390:	2045      	movs	r0, #69	; 0x45
 8001392:	f001 fafe 	bl	8002992 <HAL_NVIC_EnableIRQ>

}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ba:	4b55      	ldr	r3, [pc, #340]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a54      	ldr	r2, [pc, #336]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013c0:	f043 0310 	orr.w	r3, r3, #16
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b52      	ldr	r3, [pc, #328]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0310 	and.w	r3, r3, #16
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	4b4f      	ldr	r3, [pc, #316]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a4e      	ldr	r2, [pc, #312]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b4c      	ldr	r3, [pc, #304]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ea:	4b49      	ldr	r3, [pc, #292]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a48      	ldr	r2, [pc, #288]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b46      	ldr	r3, [pc, #280]	; (8001510 <MX_GPIO_Init+0x16c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b43      	ldr	r3, [pc, #268]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a42      	ldr	r2, [pc, #264]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b40      	ldr	r3, [pc, #256]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <MX_GPIO_Init+0x16c>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a3c      	ldr	r2, [pc, #240]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001420:	f043 0302 	orr.w	r3, r3, #2
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001432:	4b37      	ldr	r3, [pc, #220]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a36      	ldr	r2, [pc, #216]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <MX_GPIO_Init+0x16c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a30      	ldr	r2, [pc, #192]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b2e      	ldr	r3, [pc, #184]	; (8001510 <MX_GPIO_Init+0x16c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	f244 0181 	movw	r1, #16513	; 0x4081
 8001468:	482a      	ldr	r0, [pc, #168]	; (8001514 <MX_GPIO_Init+0x170>)
 800146a:	f003 f96f 	bl	800474c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2140      	movs	r1, #64	; 0x40
 8001472:	4829      	ldr	r0, [pc, #164]	; (8001518 <MX_GPIO_Init+0x174>)
 8001474:	f003 f96a 	bl	800474c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800147e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001482:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4823      	ldr	r0, [pc, #140]	; (800151c <MX_GPIO_Init+0x178>)
 8001490:	f002 ffb0 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001494:	f244 0381 	movw	r3, #16513	; 0x4081
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	4819      	ldr	r0, [pc, #100]	; (8001514 <MX_GPIO_Init+0x170>)
 80014ae:	f002 ffa1 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80014b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014c4:	2305      	movs	r3, #5
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4811      	ldr	r0, [pc, #68]	; (8001514 <MX_GPIO_Init+0x170>)
 80014d0:	f002 ff90 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014d4:	2340      	movs	r3, #64	; 0x40
 80014d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	480b      	ldr	r0, [pc, #44]	; (8001518 <MX_GPIO_Init+0x174>)
 80014ec:	f002 ff82 	bl	80043f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014f0:	2380      	movs	r3, #128	; 0x80
 80014f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_GPIO_Init+0x174>)
 8001504:	f002 ff76 	bl	80043f4 <HAL_GPIO_Init>

}
 8001508:	bf00      	nop
 800150a:	3730      	adds	r7, #48	; 0x30
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	40020400 	.word	0x40020400
 8001518:	40021800 	.word	0x40021800
 800151c:	40020800 	.word	0x40020800

08001520 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001528:	e7fe      	b.n	8001528 <Error_Handler+0x8>
	...

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <HAL_MspInit+0x44>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <HAL_MspInit+0x44>)
 8001538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800153c:	6413      	str	r3, [r2, #64]	; 0x40
 800153e:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <HAL_MspInit+0x44>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_MspInit+0x44>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_MspInit+0x44>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_MspInit+0x44>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	603b      	str	r3, [r7, #0]
 8001560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0ac      	sub	sp, #176	; 0xb0
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800158c:	f107 0318 	add.w	r3, r7, #24
 8001590:	2284      	movs	r2, #132	; 0x84
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f014 fe13 	bl	80161c0 <memset>
  if(hi2c->Instance==I2C1)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a57      	ldr	r2, [pc, #348]	; (80016fc <HAL_I2C_MspInit+0x188>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	f040 80b9 	bne.w	8001718 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015ac:	2300      	movs	r3, #0
 80015ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b0:	f107 0318 	add.w	r3, r7, #24
 80015b4:	4618      	mov	r0, r3
 80015b6:	f005 fee9 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80015c0:	f7ff ffae 	bl	8001520 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	4b4e      	ldr	r3, [pc, #312]	; (8001700 <HAL_I2C_MspInit+0x18c>)
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	4a4d      	ldr	r2, [pc, #308]	; (8001700 <HAL_I2C_MspInit+0x18c>)
 80015ca:	f043 0302 	orr.w	r3, r3, #2
 80015ce:	6313      	str	r3, [r2, #48]	; 0x30
 80015d0:	4b4b      	ldr	r3, [pc, #300]	; (8001700 <HAL_I2C_MspInit+0x18c>)
 80015d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_1_CLK_Slave_DMA_Pin|I2C_1_SDA_Slave_DMA_Pin;
 80015dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e4:	2312      	movs	r3, #18
 80015e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f6:	2304      	movs	r3, #4
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001600:	4619      	mov	r1, r3
 8001602:	4840      	ldr	r0, [pc, #256]	; (8001704 <HAL_I2C_MspInit+0x190>)
 8001604:	f002 fef6 	bl	80043f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001608:	4b3d      	ldr	r3, [pc, #244]	; (8001700 <HAL_I2C_MspInit+0x18c>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a3c      	ldr	r2, [pc, #240]	; (8001700 <HAL_I2C_MspInit+0x18c>)
 800160e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
 8001614:	4b3a      	ldr	r3, [pc, #232]	; (8001700 <HAL_I2C_MspInit+0x18c>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001620:	4b39      	ldr	r3, [pc, #228]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001622:	4a3a      	ldr	r2, [pc, #232]	; (800170c <HAL_I2C_MspInit+0x198>)
 8001624:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001628:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800162c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162e:	4b36      	ldr	r3, [pc, #216]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001636:	2200      	movs	r2, #0
 8001638:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_I2C_MspInit+0x194>)
 800163c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001640:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001642:	4b31      	ldr	r3, [pc, #196]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001648:	4b2f      	ldr	r3, [pc, #188]	; (8001708 <HAL_I2C_MspInit+0x194>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800164e:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001654:	4b2c      	ldr	r3, [pc, #176]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800165a:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_I2C_MspInit+0x194>)
 800165c:	2200      	movs	r2, #0
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001660:	4829      	ldr	r0, [pc, #164]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001662:	f001 f9b1 	bl	80029c8 <HAL_DMA_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 800166c:	f7ff ff58 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a25      	ldr	r2, [pc, #148]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c
 8001676:	4a24      	ldr	r2, [pc, #144]	; (8001708 <HAL_I2C_MspInit+0x194>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800167c:	4b24      	ldr	r3, [pc, #144]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 800167e:	4a25      	ldr	r2, [pc, #148]	; (8001714 <HAL_I2C_MspInit+0x1a0>)
 8001680:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001682:	4b23      	ldr	r3, [pc, #140]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 8001684:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001688:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 800168c:	2240      	movs	r2, #64	; 0x40
 800168e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001696:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 8001698:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800169c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80016aa:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80016bc:	4814      	ldr	r0, [pc, #80]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016be:	f001 f983 	bl	80029c8 <HAL_DMA_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 80016c8:	f7ff ff2a 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a10      	ldr	r2, [pc, #64]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016d0:	639a      	str	r2, [r3, #56]	; 0x38
 80016d2:	4a0f      	ldr	r2, [pc, #60]	; (8001710 <HAL_I2C_MspInit+0x19c>)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	201f      	movs	r0, #31
 80016de:	f001 f93c 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80016e2:	201f      	movs	r0, #31
 80016e4:	f001 f955 	bl	8002992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2020      	movs	r0, #32
 80016ee:	f001 f934 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80016f2:	2020      	movs	r0, #32
 80016f4:	f001 f94d 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016f8:	e0be      	b.n	8001878 <HAL_I2C_MspInit+0x304>
 80016fa:	bf00      	nop
 80016fc:	40005400 	.word	0x40005400
 8001700:	40023800 	.word	0x40023800
 8001704:	40020400 	.word	0x40020400
 8001708:	20000294 	.word	0x20000294
 800170c:	40026010 	.word	0x40026010
 8001710:	200002f4 	.word	0x200002f4
 8001714:	400260a0 	.word	0x400260a0
  else if(hi2c->Instance==I2C2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a58      	ldr	r2, [pc, #352]	; (8001880 <HAL_I2C_MspInit+0x30c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	f040 80aa 	bne.w	8001878 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001728:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800172a:	2300      	movs	r3, #0
 800172c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001730:	f107 0318 	add.w	r3, r7, #24
 8001734:	4618      	mov	r0, r3
 8001736:	f005 fe29 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8001740:	f7ff feee 	bl	8001520 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	4b4f      	ldr	r3, [pc, #316]	; (8001884 <HAL_I2C_MspInit+0x310>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	4a4e      	ldr	r2, [pc, #312]	; (8001884 <HAL_I2C_MspInit+0x310>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	6313      	str	r3, [r2, #48]	; 0x30
 8001750:	4b4c      	ldr	r3, [pc, #304]	; (8001884 <HAL_I2C_MspInit+0x310>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2C_2_CLK_Master_DMA_Pin|I2C_2_DATA_Master_DMA_Pin;
 800175c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001764:	2312      	movs	r3, #18
 8001766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800176a:	2301      	movs	r3, #1
 800176c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001776:	2304      	movs	r3, #4
 8001778:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001780:	4619      	mov	r1, r3
 8001782:	4841      	ldr	r0, [pc, #260]	; (8001888 <HAL_I2C_MspInit+0x314>)
 8001784:	f002 fe36 	bl	80043f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001788:	4b3e      	ldr	r3, [pc, #248]	; (8001884 <HAL_I2C_MspInit+0x310>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a3d      	ldr	r2, [pc, #244]	; (8001884 <HAL_I2C_MspInit+0x310>)
 800178e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <HAL_I2C_MspInit+0x310>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80017a0:	4b3a      	ldr	r3, [pc, #232]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017a2:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <HAL_I2C_MspInit+0x31c>)
 80017a4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80017a6:	4b39      	ldr	r3, [pc, #228]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017a8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80017ac:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ae:	4b37      	ldr	r3, [pc, #220]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b4:	4b35      	ldr	r3, [pc, #212]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017ba:	4b34      	ldr	r3, [pc, #208]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c0:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80017ce:	4b2f      	ldr	r3, [pc, #188]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017da:	4b2c      	ldr	r3, [pc, #176]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017dc:	2200      	movs	r2, #0
 80017de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80017e0:	482a      	ldr	r0, [pc, #168]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017e2:	f001 f8f1 	bl	80029c8 <HAL_DMA_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 80017ec:	f7ff fe98 	bl	8001520 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a26      	ldr	r2, [pc, #152]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80017f6:	4a25      	ldr	r2, [pc, #148]	; (800188c <HAL_I2C_MspInit+0x318>)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <HAL_I2C_MspInit+0x320>)
 80017fe:	4a26      	ldr	r2, [pc, #152]	; (8001898 <HAL_I2C_MspInit+0x324>)
 8001800:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001804:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001808:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_I2C_MspInit+0x320>)
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001818:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800181c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001820:	2200      	movs	r2, #0
 8001822:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001826:	2200      	movs	r2, #0
 8001828:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800182a:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_I2C_MspInit+0x320>)
 800182c:	2200      	movs	r2, #0
 800182e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001830:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001832:	2200      	movs	r2, #0
 8001834:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001838:	2200      	movs	r2, #0
 800183a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800183c:	4815      	ldr	r0, [pc, #84]	; (8001894 <HAL_I2C_MspInit+0x320>)
 800183e:	f001 f8c3 	bl	80029c8 <HAL_DMA_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001848:	f7ff fe6a 	bl	8001520 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a11      	ldr	r2, [pc, #68]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
 8001852:	4a10      	ldr	r2, [pc, #64]	; (8001894 <HAL_I2C_MspInit+0x320>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	2021      	movs	r0, #33	; 0x21
 800185e:	f001 f87c 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001862:	2021      	movs	r0, #33	; 0x21
 8001864:	f001 f895 	bl	8002992 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	2022      	movs	r0, #34	; 0x22
 800186e:	f001 f874 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001872:	2022      	movs	r0, #34	; 0x22
 8001874:	f001 f88d 	bl	8002992 <HAL_NVIC_EnableIRQ>
}
 8001878:	bf00      	nop
 800187a:	37b0      	adds	r7, #176	; 0xb0
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40005800 	.word	0x40005800
 8001884:	40023800 	.word	0x40023800
 8001888:	40020400 	.word	0x40020400
 800188c:	20000354 	.word	0x20000354
 8001890:	40026058 	.word	0x40026058
 8001894:	200003b4 	.word	0x200003b4
 8001898:	400260b8 	.word	0x400260b8

0800189c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a56      	ldr	r2, [pc, #344]	; (8001a14 <HAL_SPI_MspInit+0x178>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	f040 80ba 	bne.w	8001a34 <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c0:	4b55      	ldr	r3, [pc, #340]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c4:	4a54      	ldr	r2, [pc, #336]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ca:	6453      	str	r3, [r2, #68]	; 0x44
 80018cc:	4b52      	ldr	r3, [pc, #328]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b4f      	ldr	r3, [pc, #316]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	4a4e      	ldr	r2, [pc, #312]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6313      	str	r3, [r2, #48]	; 0x30
 80018e4:	4b4c      	ldr	r3, [pc, #304]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b49      	ldr	r3, [pc, #292]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	4a48      	ldr	r2, [pc, #288]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6313      	str	r3, [r2, #48]	; 0x30
 80018fc:	4b46      	ldr	r3, [pc, #280]	; (8001a18 <HAL_SPI_MspInit+0x17c>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693b      	ldr	r3, [r7, #16]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA15     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8001908:	f248 0360 	movw	r3, #32864	; 0x8060
 800190c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800191a:	2305      	movs	r3, #5
 800191c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	483d      	ldr	r0, [pc, #244]	; (8001a1c <HAL_SPI_MspInit+0x180>)
 8001926:	f002 fd65 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800192a:	2320      	movs	r3, #32
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193a:	2305      	movs	r3, #5
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193e:	f107 031c 	add.w	r3, r7, #28
 8001942:	4619      	mov	r1, r3
 8001944:	4836      	ldr	r0, [pc, #216]	; (8001a20 <HAL_SPI_MspInit+0x184>)
 8001946:	f002 fd55 	bl	80043f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 800194c:	4a36      	ldr	r2, [pc, #216]	; (8001a28 <HAL_SPI_MspInit+0x18c>)
 800194e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001950:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 8001952:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001956:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001958:	4b32      	ldr	r3, [pc, #200]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800195e:	4b31      	ldr	r3, [pc, #196]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001964:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 8001966:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800196a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800196c:	4b2d      	ldr	r3, [pc, #180]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001972:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 8001974:	2200      	movs	r2, #0
 8001976:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001978:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 800197a:	2200      	movs	r2, #0
 800197c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800197e:	4b29      	ldr	r3, [pc, #164]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001984:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800198a:	4826      	ldr	r0, [pc, #152]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 800198c:	f001 f81c 	bl	80029c8 <HAL_DMA_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <HAL_SPI_MspInit+0xfe>
    {
      Error_Handler();
 8001996:	f7ff fdc3 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a21      	ldr	r2, [pc, #132]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 800199e:	659a      	str	r2, [r3, #88]	; 0x58
 80019a0:	4a20      	ldr	r2, [pc, #128]	; (8001a24 <HAL_SPI_MspInit+0x188>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80019a6:	4b21      	ldr	r3, [pc, #132]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019a8:	4a21      	ldr	r2, [pc, #132]	; (8001a30 <HAL_SPI_MspInit+0x194>)
 80019aa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80019ac:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019ae:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80019b2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b4:	4b1d      	ldr	r3, [pc, #116]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019b6:	2240      	movs	r2, #64	; 0x40
 80019b8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019c6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019c8:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019dc:	2200      	movs	r2, #0
 80019de:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80019e6:	4811      	ldr	r0, [pc, #68]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019e8:	f000 ffee 	bl	80029c8 <HAL_DMA_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_SPI_MspInit+0x15a>
    {
      Error_Handler();
 80019f2:	f7ff fd95 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019fa:	655a      	str	r2, [r3, #84]	; 0x54
 80019fc:	4a0b      	ldr	r2, [pc, #44]	; (8001a2c <HAL_SPI_MspInit+0x190>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2100      	movs	r1, #0
 8001a06:	2023      	movs	r0, #35	; 0x23
 8001a08:	f000 ffa7 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a0c:	2023      	movs	r0, #35	; 0x23
 8001a0e:	f000 ffc0 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001a12:	e0a1      	b.n	8001b58 <HAL_SPI_MspInit+0x2bc>
 8001a14:	40013000 	.word	0x40013000
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40020400 	.word	0x40020400
 8001a24:	200004dc 	.word	0x200004dc
 8001a28:	40026440 	.word	0x40026440
 8001a2c:	2000053c 	.word	0x2000053c
 8001a30:	40026458 	.word	0x40026458
  else if(hspi->Instance==SPI4)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a49      	ldr	r2, [pc, #292]	; (8001b60 <HAL_SPI_MspInit+0x2c4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	f040 808c 	bne.w	8001b58 <HAL_SPI_MspInit+0x2bc>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a40:	4b48      	ldr	r3, [pc, #288]	; (8001b64 <HAL_SPI_MspInit+0x2c8>)
 8001a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a44:	4a47      	ldr	r2, [pc, #284]	; (8001b64 <HAL_SPI_MspInit+0x2c8>)
 8001a46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a4a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4c:	4b45      	ldr	r3, [pc, #276]	; (8001b64 <HAL_SPI_MspInit+0x2c8>)
 8001a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a58:	4b42      	ldr	r3, [pc, #264]	; (8001b64 <HAL_SPI_MspInit+0x2c8>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	4a41      	ldr	r2, [pc, #260]	; (8001b64 <HAL_SPI_MspInit+0x2c8>)
 8001a5e:	f043 0310 	orr.w	r3, r3, #16
 8001a62:	6313      	str	r3, [r2, #48]	; 0x30
 8001a64:	4b3f      	ldr	r3, [pc, #252]	; (8001b64 <HAL_SPI_MspInit+0x2c8>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001a70:	2374      	movs	r3, #116	; 0x74
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a80:	2305      	movs	r3, #5
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4837      	ldr	r0, [pc, #220]	; (8001b68 <HAL_SPI_MspInit+0x2cc>)
 8001a8c:	f002 fcb2 	bl	80043f4 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001a90:	4b36      	ldr	r3, [pc, #216]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001a92:	4a37      	ldr	r2, [pc, #220]	; (8001b70 <HAL_SPI_MspInit+0x2d4>)
 8001a94:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001a96:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001a98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a9c:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a9e:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa4:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aaa:	4b30      	ldr	r3, [pc, #192]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ab0:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ab8:	4b2c      	ldr	r3, [pc, #176]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001abe:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aca:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001ad0:	4826      	ldr	r0, [pc, #152]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001ad2:	f000 ff79 	bl	80029c8 <HAL_DMA_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_SPI_MspInit+0x244>
      Error_Handler();
 8001adc:	f7ff fd20 	bl	8001520 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001ae4:	659a      	str	r2, [r3, #88]	; 0x58
 8001ae6:	4a21      	ldr	r2, [pc, #132]	; (8001b6c <HAL_SPI_MspInit+0x2d0>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream4;
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001aee:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <HAL_SPI_MspInit+0x2dc>)
 8001af0:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_5;
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001af4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001af8:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001afa:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001afc:	2240      	movs	r2, #64	; 0x40
 8001afe:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b00:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b06:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b0c:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b14:	4b17      	ldr	r3, [pc, #92]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001b2c:	4811      	ldr	r0, [pc, #68]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001b2e:	f000 ff4b 	bl	80029c8 <HAL_DMA_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_SPI_MspInit+0x2a0>
      Error_Handler();
 8001b38:	f7ff fcf2 	bl	8001520 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a0d      	ldr	r2, [pc, #52]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
 8001b42:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <HAL_SPI_MspInit+0x2d8>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	2054      	movs	r0, #84	; 0x54
 8001b4e:	f000 ff04 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001b52:	2054      	movs	r0, #84	; 0x54
 8001b54:	f000 ff1d 	bl	8002992 <HAL_NVIC_EnableIRQ>
}
 8001b58:	bf00      	nop
 8001b5a:	3730      	adds	r7, #48	; 0x30
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40013400 	.word	0x40013400
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	2000059c 	.word	0x2000059c
 8001b70:	40026410 	.word	0x40026410
 8001b74:	200005fc 	.word	0x200005fc
 8001b78:	40026470 	.word	0x40026470

08001b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a0d      	ldr	r2, [pc, #52]	; (8001bc0 <HAL_TIM_Base_MspInit+0x44>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d113      	bne.n	8001bb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <HAL_TIM_Base_MspInit+0x48>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	4a0c      	ldr	r2, [pc, #48]	; (8001bc4 <HAL_TIM_Base_MspInit+0x48>)
 8001b94:	f043 0320 	orr.w	r3, r3, #32
 8001b98:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_TIM_Base_MspInit+0x48>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f003 0320 	and.w	r3, r3, #32
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2037      	movs	r0, #55	; 0x37
 8001bac:	f000 fed5 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001bb0:	2037      	movs	r0, #55	; 0x37
 8001bb2:	f000 feee 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40001400 	.word	0x40001400
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b0ae      	sub	sp, #184	; 0xb8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001be0:	f107 0320 	add.w	r3, r7, #32
 8001be4:	2284      	movs	r2, #132	; 0x84
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f014 fae9 	bl	80161c0 <memset>
  if(huart->Instance==UART4)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a74      	ldr	r2, [pc, #464]	; (8001dc4 <HAL_UART_MspInit+0x1fc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	f040 80a2 	bne.w	8001d3e <HAL_UART_MspInit+0x176>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfe:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c00:	2300      	movs	r3, #0
 8001c02:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c04:	f107 0320 	add.w	r3, r7, #32
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f005 fbbf 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001c14:	f7ff fc84 	bl	8001520 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c18:	4b6b      	ldr	r3, [pc, #428]	; (8001dc8 <HAL_UART_MspInit+0x200>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	4a6a      	ldr	r2, [pc, #424]	; (8001dc8 <HAL_UART_MspInit+0x200>)
 8001c1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40
 8001c24:	4b68      	ldr	r3, [pc, #416]	; (8001dc8 <HAL_UART_MspInit+0x200>)
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c30:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <HAL_UART_MspInit+0x200>)
 8001c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c34:	4a64      	ldr	r2, [pc, #400]	; (8001dc8 <HAL_UART_MspInit+0x200>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3c:	4b62      	ldr	r3, [pc, #392]	; (8001dc8 <HAL_UART_MspInit+0x200>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	61bb      	str	r3, [r7, #24]
 8001c46:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_DMA_Pin|UART4_RX_DMA_Pin;
 8001c48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c62:	2308      	movs	r3, #8
 8001c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4857      	ldr	r0, [pc, #348]	; (8001dcc <HAL_UART_MspInit+0x204>)
 8001c70:	f002 fbc0 	bl	80043f4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001c74:	4b56      	ldr	r3, [pc, #344]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001c76:	4a57      	ldr	r2, [pc, #348]	; (8001dd4 <HAL_UART_MspInit+0x20c>)
 8001c78:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001c7a:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001c7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c80:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c82:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c88:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c8e:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001c90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c94:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c96:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c9c:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001ca2:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ca8:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cae:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001cb4:	4846      	ldr	r0, [pc, #280]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001cb6:	f000 fe87 	bl	80029c8 <HAL_DMA_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8001cc0:	f7ff fc2e 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a42      	ldr	r2, [pc, #264]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001cc8:	675a      	str	r2, [r3, #116]	; 0x74
 8001cca:	4a41      	ldr	r2, [pc, #260]	; (8001dd0 <HAL_UART_MspInit+0x208>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8001cd0:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001cd2:	4a42      	ldr	r2, [pc, #264]	; (8001ddc <HAL_UART_MspInit+0x214>)
 8001cd4:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8001cd6:	4b40      	ldr	r3, [pc, #256]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001cd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cdc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cde:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001ce0:	2240      	movs	r2, #64	; 0x40
 8001ce2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ce4:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001cea:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001cec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cf2:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cf8:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001cfe:	4b36      	ldr	r3, [pc, #216]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d04:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d0a:	4b33      	ldr	r3, [pc, #204]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001d10:	4831      	ldr	r0, [pc, #196]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001d12:	f000 fe59 	bl	80029c8 <HAL_DMA_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <HAL_UART_MspInit+0x158>
    {
      Error_Handler();
 8001d1c:	f7ff fc00 	bl	8001520 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a2d      	ldr	r2, [pc, #180]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001d24:	671a      	str	r2, [r3, #112]	; 0x70
 8001d26:	4a2c      	ldr	r2, [pc, #176]	; (8001dd8 <HAL_UART_MspInit+0x210>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2100      	movs	r1, #0
 8001d30:	2034      	movs	r0, #52	; 0x34
 8001d32:	f000 fe12 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001d36:	2034      	movs	r0, #52	; 0x34
 8001d38:	f000 fe2b 	bl	8002992 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001d3c:	e0fb      	b.n	8001f36 <HAL_UART_MspInit+0x36e>
  else if(huart->Instance==USART3)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a27      	ldr	r2, [pc, #156]	; (8001de0 <HAL_UART_MspInit+0x218>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d14f      	bne.n	8001de8 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d4c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	4618      	mov	r0, r3
 8001d58:	f005 fb18 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001d62:	f7ff fbdd 	bl	8001520 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <HAL_UART_MspInit+0x200>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <HAL_UART_MspInit+0x200>)
 8001d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d70:	6413      	str	r3, [r2, #64]	; 0x40
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <HAL_UART_MspInit+0x200>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d7a:	617b      	str	r3, [r7, #20]
 8001d7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d7e:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <HAL_UART_MspInit+0x200>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	4a11      	ldr	r2, [pc, #68]	; (8001dc8 <HAL_UART_MspInit+0x200>)
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	6313      	str	r3, [r2, #48]	; 0x30
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_UART_MspInit+0x200>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001d96:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001db0:	2307      	movs	r3, #7
 8001db2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4809      	ldr	r0, [pc, #36]	; (8001de4 <HAL_UART_MspInit+0x21c>)
 8001dbe:	f002 fb19 	bl	80043f4 <HAL_GPIO_Init>
}
 8001dc2:	e0b8      	b.n	8001f36 <HAL_UART_MspInit+0x36e>
 8001dc4:	40004c00 	.word	0x40004c00
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	20000840 	.word	0x20000840
 8001dd4:	40026040 	.word	0x40026040
 8001dd8:	200008a0 	.word	0x200008a0
 8001ddc:	40026070 	.word	0x40026070
 8001de0:	40004800 	.word	0x40004800
 8001de4:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART6)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a54      	ldr	r2, [pc, #336]	; (8001f40 <HAL_UART_MspInit+0x378>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	f040 80a1 	bne.w	8001f36 <HAL_UART_MspInit+0x36e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001df4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001df8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dfe:	f107 0320 	add.w	r3, r7, #32
 8001e02:	4618      	mov	r0, r3
 8001e04:	f005 fac2 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <HAL_UART_MspInit+0x24a>
      Error_Handler();
 8001e0e:	f7ff fb87 	bl	8001520 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e12:	4b4c      	ldr	r3, [pc, #304]	; (8001f44 <HAL_UART_MspInit+0x37c>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a4b      	ldr	r2, [pc, #300]	; (8001f44 <HAL_UART_MspInit+0x37c>)
 8001e18:	f043 0320 	orr.w	r3, r3, #32
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b49      	ldr	r3, [pc, #292]	; (8001f44 <HAL_UART_MspInit+0x37c>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e2a:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <HAL_UART_MspInit+0x37c>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a45      	ldr	r2, [pc, #276]	; (8001f44 <HAL_UART_MspInit+0x37c>)
 8001e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_UART_MspInit+0x37c>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART6_RX_DMA_Pin|USART6_TX_DMA_Pin;
 8001e42:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001e46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e5c:	2308      	movs	r3, #8
 8001e5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e66:	4619      	mov	r1, r3
 8001e68:	4837      	ldr	r0, [pc, #220]	; (8001f48 <HAL_UART_MspInit+0x380>)
 8001e6a:	f002 fac3 	bl	80043f4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001e6e:	4b37      	ldr	r3, [pc, #220]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001e70:	4a37      	ldr	r2, [pc, #220]	; (8001f50 <HAL_UART_MspInit+0x388>)
 8001e72:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001e74:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001e76:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001e7a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e7c:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e82:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e88:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001e8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e8e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e90:	4b2e      	ldr	r3, [pc, #184]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e96:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ea2:	4b2a      	ldr	r3, [pc, #168]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001eae:	4827      	ldr	r0, [pc, #156]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001eb0:	f000 fd8a 	bl	80029c8 <HAL_DMA_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8001eba:	f7ff fb31 	bl	8001520 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a22      	ldr	r2, [pc, #136]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001ec2:	675a      	str	r2, [r3, #116]	; 0x74
 8001ec4:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <HAL_UART_MspInit+0x384>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001ecc:	4a22      	ldr	r2, [pc, #136]	; (8001f58 <HAL_UART_MspInit+0x390>)
 8001ece:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001ed0:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001ed2:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001ed6:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ed8:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001eda:	2240      	movs	r2, #64	; 0x40
 8001edc:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ede:	4b1d      	ldr	r3, [pc, #116]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee4:	4b1b      	ldr	r3, [pc, #108]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001ee6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001eea:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001ef8:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f04:	4b13      	ldr	r3, [pc, #76]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001f0a:	4812      	ldr	r0, [pc, #72]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001f0c:	f000 fd5c 	bl	80029c8 <HAL_DMA_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <HAL_UART_MspInit+0x352>
      Error_Handler();
 8001f16:	f7ff fb03 	bl	8001520 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a0d      	ldr	r2, [pc, #52]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001f1e:	671a      	str	r2, [r3, #112]	; 0x70
 8001f20:	4a0c      	ldr	r2, [pc, #48]	; (8001f54 <HAL_UART_MspInit+0x38c>)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001f26:	2200      	movs	r2, #0
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2047      	movs	r0, #71	; 0x47
 8001f2c:	f000 fd15 	bl	800295a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001f30:	2047      	movs	r0, #71	; 0x47
 8001f32:	f000 fd2e 	bl	8002992 <HAL_NVIC_EnableIRQ>
}
 8001f36:	bf00      	nop
 8001f38:	37b8      	adds	r7, #184	; 0xb8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40011400 	.word	0x40011400
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40021800 	.word	0x40021800
 8001f4c:	20000900 	.word	0x20000900
 8001f50:	40026428 	.word	0x40026428
 8001f54:	20000960 	.word	0x20000960
 8001f58:	400264a0 	.word	0x400264a0

08001f5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b0ac      	sub	sp, #176	; 0xb0
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f74:	f107 0318 	add.w	r3, r7, #24
 8001f78:	2284      	movs	r2, #132	; 0x84
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f014 f91f 	bl	80161c0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f8a:	d159      	bne.n	8002040 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001f8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f90:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f98:	f107 0318 	add.w	r3, r7, #24
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f005 f9f5 	bl	800738c <HAL_RCCEx_PeriphCLKConfig>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001fa8:	f7ff faba 	bl	8001520 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <HAL_PCD_MspInit+0xec>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <HAL_PCD_MspInit+0xec>)
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb8:	4b23      	ldr	r3, [pc, #140]	; (8002048 <HAL_PCD_MspInit+0xec>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001fc4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001fc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001fde:	230a      	movs	r3, #10
 8001fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4818      	ldr	r0, [pc, #96]	; (800204c <HAL_PCD_MspInit+0xf0>)
 8001fec:	f002 fa02 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002004:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002008:	4619      	mov	r1, r3
 800200a:	4810      	ldr	r0, [pc, #64]	; (800204c <HAL_PCD_MspInit+0xf0>)
 800200c:	f002 f9f2 	bl	80043f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_PCD_MspInit+0xec>)
 8002012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002014:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_PCD_MspInit+0xec>)
 8002016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800201a:	6353      	str	r3, [r2, #52]	; 0x34
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_PCD_MspInit+0xec>)
 800201e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <HAL_PCD_MspInit+0xec>)
 800202a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <HAL_PCD_MspInit+0xec>)
 800202e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002032:	6453      	str	r3, [r2, #68]	; 0x44
 8002034:	4b04      	ldr	r3, [pc, #16]	; (8002048 <HAL_PCD_MspInit+0xec>)
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002040:	bf00      	nop
 8002042:	37b0      	adds	r7, #176	; 0xb0
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	40020000 	.word	0x40020000

08002050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002054:	e7fe      	b.n	8002054 <NMI_Handler+0x4>

08002056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800205a:	e7fe      	b.n	800205a <HardFault_Handler+0x4>

0800205c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002060:	e7fe      	b.n	8002060 <MemManage_Handler+0x4>

08002062 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002066:	e7fe      	b.n	8002066 <BusFault_Handler+0x4>

08002068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800206c:	e7fe      	b.n	800206c <UsageFault_Handler+0x4>

0800206e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209c:	f000 fb3e 	bl	800271c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80020a8:	4802      	ldr	r0, [pc, #8]	; (80020b4 <DMA1_Stream0_IRQHandler+0x10>)
 80020aa:	f000 fe2d 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20000294 	.word	0x20000294

080020b8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80020bc:	4802      	ldr	r0, [pc, #8]	; (80020c8 <DMA1_Stream2_IRQHandler+0x10>)
 80020be:	f000 fe23 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000840 	.word	0x20000840

080020cc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80020d0:	4802      	ldr	r0, [pc, #8]	; (80020dc <DMA1_Stream3_IRQHandler+0x10>)
 80020d2:	f000 fe19 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000354 	.word	0x20000354

080020e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80020e4:	4802      	ldr	r0, [pc, #8]	; (80020f0 <DMA1_Stream4_IRQHandler+0x10>)
 80020e6:	f000 fe0f 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200008a0 	.word	0x200008a0

080020f4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <DMA1_Stream6_IRQHandler+0x10>)
 80020fa:	f000 fe05 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80020fe:	bf00      	nop
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200002f4 	.word	0x200002f4

08002108 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800210c:	4802      	ldr	r0, [pc, #8]	; (8002118 <I2C1_EV_IRQHandler+0x10>)
 800210e:	f002 ff13 	bl	8004f38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200001ec 	.word	0x200001ec

0800211c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002120:	4802      	ldr	r0, [pc, #8]	; (800212c <I2C1_ER_IRQHandler+0x10>)
 8002122:	f002 ff23 	bl	8004f6c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200001ec 	.word	0x200001ec

08002130 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002134:	4802      	ldr	r0, [pc, #8]	; (8002140 <I2C2_EV_IRQHandler+0x10>)
 8002136:	f002 feff 	bl	8004f38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000240 	.word	0x20000240

08002144 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <I2C2_ER_IRQHandler+0x10>)
 800214a:	f002 ff0f 	bl	8004f6c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000240 	.word	0x20000240

08002158 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <SPI1_IRQHandler+0x10>)
 800215e:	f005 ff3d 	bl	8007fdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000414 	.word	0x20000414

0800216c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <DMA1_Stream7_IRQHandler+0x10>)
 8002172:	f000 fdc9 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	200003b4 	.word	0x200003b4

08002180 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <UART4_IRQHandler+0x10>)
 8002186:	f007 f937 	bl	80093f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	200006a8 	.word	0x200006a8

08002194 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <TIM7_IRQHandler+0x10>)
 800219a:	f006 fc44 	bl	8008a26 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000065c 	.word	0x2000065c

080021a8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <DMA2_Stream0_IRQHandler+0x10>)
 80021ae:	f000 fdab 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000059c 	.word	0x2000059c

080021bc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80021c0:	4802      	ldr	r0, [pc, #8]	; (80021cc <DMA2_Stream1_IRQHandler+0x10>)
 80021c2:	f000 fda1 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80021c6:	bf00      	nop
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	20000900 	.word	0x20000900

080021d0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80021d4:	4802      	ldr	r0, [pc, #8]	; (80021e0 <DMA2_Stream2_IRQHandler+0x10>)
 80021d6:	f000 fd97 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200004dc 	.word	0x200004dc

080021e4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80021e8:	4802      	ldr	r0, [pc, #8]	; (80021f4 <DMA2_Stream3_IRQHandler+0x10>)
 80021ea:	f000 fd8d 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	2000053c 	.word	0x2000053c

080021f8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80021fc:	4802      	ldr	r0, [pc, #8]	; (8002208 <DMA2_Stream4_IRQHandler+0x10>)
 80021fe:	f000 fd83 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200005fc 	.word	0x200005fc

0800220c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002210:	4802      	ldr	r0, [pc, #8]	; (800221c <DMA2_Stream6_IRQHandler+0x10>)
 8002212:	f000 fd79 	bl	8002d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000960 	.word	0x20000960

08002220 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <USART6_IRQHandler+0x10>)
 8002226:	f007 f8e7 	bl	80093f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200007b8 	.word	0x200007b8

08002234 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002238:	4802      	ldr	r0, [pc, #8]	; (8002244 <SPI4_IRQHandler+0x10>)
 800223a:	f005 fecf 	bl	8007fdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000478 	.word	0x20000478

08002248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
	return 1;
 800224c:	2301      	movs	r3, #1
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <_kill>:

int _kill(int pid, int sig)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <_kill+0x20>)
 8002264:	2216      	movs	r2, #22
 8002266:	601a      	str	r2, [r3, #0]
	return -1;
 8002268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800226c:	4618      	mov	r0, r3
 800226e:	370c      	adds	r7, #12
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	20009390 	.word	0x20009390

0800227c <_exit>:

void _exit (int status)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002284:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffe5 	bl	8002258 <_kill>
	while (1) {}		/* Make sure we hang here */
 800228e:	e7fe      	b.n	800228e <_exit+0x12>

08002290 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	return -1;
 8002298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b8:	605a      	str	r2, [r3, #4]
	return 0;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <_isatty>:

int _isatty(int file)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
	return 1;
 80022d0:	2301      	movs	r3, #1
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022de:	b480      	push	{r7}
 80022e0:	b085      	sub	sp, #20
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
	return 0;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002300:	4a14      	ldr	r2, [pc, #80]	; (8002354 <_sbrk+0x5c>)
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <_sbrk+0x60>)
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <_sbrk+0x64>)
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <_sbrk+0x68>)
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	429a      	cmp	r2, r3
 8002326:	d205      	bcs.n	8002334 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002328:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <_sbrk+0x6c>)
 800232a:	220c      	movs	r2, #12
 800232c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002332:	e009      	b.n	8002348 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	4a06      	ldr	r2, [pc, #24]	; (800235c <_sbrk+0x64>)
 8002344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	20050000 	.word	0x20050000
 8002358:	00000400 	.word	0x00000400
 800235c:	20000ec8 	.word	0x20000ec8
 8002360:	200093a0 	.word	0x200093a0
 8002364:	20009390 	.word	0x20009390

08002368 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <SystemInit+0x20>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <SystemInit+0x20>)
 8002374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800238c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002390:	480d      	ldr	r0, [pc, #52]	; (80023c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002392:	490e      	ldr	r1, [pc, #56]	; (80023cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002394:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002398:	e002      	b.n	80023a0 <LoopCopyDataInit>

0800239a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800239c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239e:	3304      	adds	r3, #4

080023a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a4:	d3f9      	bcc.n	800239a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023a8:	4c0b      	ldr	r4, [pc, #44]	; (80023d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ac:	e001      	b.n	80023b2 <LoopFillZerobss>

080023ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b0:	3204      	adds	r2, #4

080023b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b4:	d3fb      	bcc.n	80023ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023b6:	f7ff ffd7 	bl	8002368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ba:	f013 febf 	bl	801613c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023be:	f7fe fcf7 	bl	8000db0 <main>
  bx  lr    
 80023c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80023c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023cc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80023d0:	08019ef4 	.word	0x08019ef4
  ldr r2, =_sbss
 80023d4:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80023d8:	200093a0 	.word	0x200093a0

080023dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023dc:	e7fe      	b.n	80023dc <ADC_IRQHandler>

080023de <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00b      	beq.n	8002406 <LAN8742_RegisterBusIO+0x28>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <LAN8742_RegisterBusIO+0x28>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <LAN8742_RegisterBusIO+0x28>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800240a:	e014      	b.n	8002436 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	2300      	movs	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d17c      	bne.n	800255c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e01c      	b.n	80024b6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	695b      	ldr	r3, [r3, #20]
 8002480:	f107 0208 	add.w	r2, r7, #8
 8002484:	2112      	movs	r1, #18
 8002486:	6978      	ldr	r0, [r7, #20]
 8002488:	4798      	blx	r3
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	da03      	bge.n	8002498 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002490:	f06f 0304 	mvn.w	r3, #4
 8002494:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002496:	e00b      	b.n	80024b0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d105      	bne.n	80024b0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
         break;
 80024ae:	e005      	b.n	80024bc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3301      	adds	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b1f      	cmp	r3, #31
 80024ba:	d9df      	bls.n	800247c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b1f      	cmp	r3, #31
 80024c2:	d902      	bls.n	80024ca <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80024c4:	f06f 0302 	mvn.w	r3, #2
 80024c8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d145      	bne.n	800255c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6810      	ldr	r0, [r2, #0]
 80024d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024dc:	2100      	movs	r1, #0
 80024de:	4798      	blx	r3
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	db37      	blt.n	8002556 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6810      	ldr	r0, [r2, #0]
 80024ee:	f107 0208 	add.w	r2, r7, #8
 80024f2:	2100      	movs	r1, #0
 80024f4:	4798      	blx	r3
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	db28      	blt.n	800254e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	4798      	blx	r3
 8002502:	4603      	mov	r3, r0
 8002504:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002506:	e01c      	b.n	8002542 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4798      	blx	r3
 800250e:	4603      	mov	r3, r0
 8002510:	461a      	mov	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800251a:	d80e      	bhi.n	800253a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6810      	ldr	r0, [r2, #0]
 8002524:	f107 0208 	add.w	r2, r7, #8
 8002528:	2100      	movs	r1, #0
 800252a:	4798      	blx	r3
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	da07      	bge.n	8002542 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002532:	f06f 0304 	mvn.w	r3, #4
 8002536:	613b      	str	r3, [r7, #16]
                 break;
 8002538:	e010      	b.n	800255c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800253a:	f06f 0301 	mvn.w	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
               break;
 8002540:	e00c      	b.n	800255c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1dd      	bne.n	8002508 <LAN8742_Init+0xc6>
 800254c:	e006      	b.n	800255c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800254e:	f06f 0304 	mvn.w	r3, #4
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	e002      	b.n	800255c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002556:	f06f 0303 	mvn.w	r3, #3
 800255a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d112      	bne.n	8002588 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	4798      	blx	r3
 8002568:	4603      	mov	r3, r0
 800256a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800256c:	bf00      	nop
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	4798      	blx	r3
 8002574:	4603      	mov	r3, r0
 8002576:	461a      	mov	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002580:	d9f5      	bls.n	800256e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002588:	693b      	ldr	r3, [r7, #16]
 }
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695b      	ldr	r3, [r3, #20]
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6810      	ldr	r0, [r2, #0]
 80025a6:	f107 020c 	add.w	r2, r7, #12
 80025aa:	2101      	movs	r1, #1
 80025ac:	4798      	blx	r3
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	da02      	bge.n	80025ba <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025b4:	f06f 0304 	mvn.w	r3, #4
 80025b8:	e06e      	b.n	8002698 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6810      	ldr	r0, [r2, #0]
 80025c2:	f107 020c 	add.w	r2, r7, #12
 80025c6:	2101      	movs	r1, #1
 80025c8:	4798      	blx	r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	da02      	bge.n	80025d6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025d0:	f06f 0304 	mvn.w	r3, #4
 80025d4:	e060      	b.n	8002698 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80025e0:	2301      	movs	r3, #1
 80025e2:	e059      	b.n	8002698 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	695b      	ldr	r3, [r3, #20]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6810      	ldr	r0, [r2, #0]
 80025ec:	f107 020c 	add.w	r2, r7, #12
 80025f0:	2100      	movs	r1, #0
 80025f2:	4798      	blx	r3
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	da02      	bge.n	8002600 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80025fa:	f06f 0304 	mvn.w	r3, #4
 80025fe:	e04b      	b.n	8002698 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d11b      	bne.n	8002642 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d006      	beq.n	8002622 <LAN8742_GetLinkState+0x90>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800261e:	2302      	movs	r3, #2
 8002620:	e03a      	b.n	8002698 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800262c:	2303      	movs	r3, #3
 800262e:	e033      	b.n	8002698 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800263a:	2304      	movs	r3, #4
 800263c:	e02c      	b.n	8002698 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800263e:	2305      	movs	r3, #5
 8002640:	e02a      	b.n	8002698 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6810      	ldr	r0, [r2, #0]
 800264a:	f107 020c 	add.w	r2, r7, #12
 800264e:	211f      	movs	r1, #31
 8002650:	4798      	blx	r3
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	da02      	bge.n	800265e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002658:	f06f 0304 	mvn.w	r3, #4
 800265c:	e01c      	b.n	8002698 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002668:	2306      	movs	r3, #6
 800266a:	e015      	b.n	8002698 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 031c 	and.w	r3, r3, #28
 8002672:	2b18      	cmp	r3, #24
 8002674:	d101      	bne.n	800267a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002676:	2302      	movs	r3, #2
 8002678:	e00e      	b.n	8002698 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f003 031c 	and.w	r3, r3, #28
 8002680:	2b08      	cmp	r3, #8
 8002682:	d101      	bne.n	8002688 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002684:	2303      	movs	r3, #3
 8002686:	e007      	b.n	8002698 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 031c 	and.w	r3, r3, #28
 800268e:	2b14      	cmp	r3, #20
 8002690:	d101      	bne.n	8002696 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002692:	2304      	movs	r3, #4
 8002694:	e000      	b.n	8002698 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002696:	2305      	movs	r3, #5
    }				
  }
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026a4:	2003      	movs	r0, #3
 80026a6:	f000 f94d 	bl	8002944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026aa:	2000      	movs	r0, #0
 80026ac:	f000 f806 	bl	80026bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026b0:	f7fe ff3c 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_InitTick+0x54>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_InitTick+0x58>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	4619      	mov	r1, r3
 80026ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 f967 	bl	80029ae <HAL_SYSTICK_Config>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00e      	b.n	8002708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b0f      	cmp	r3, #15
 80026ee:	d80a      	bhi.n	8002706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f0:	2200      	movs	r2, #0
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026f8:	f000 f92f 	bl	800295a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026fc:	4a06      	ldr	r2, [pc, #24]	; (8002718 <HAL_InitTick+0x5c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	20000000 	.word	0x20000000
 8002714:	20000008 	.word	0x20000008
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_IncTick+0x20>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	461a      	mov	r2, r3
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_IncTick+0x24>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4a04      	ldr	r2, [pc, #16]	; (8002740 <HAL_IncTick+0x24>)
 800272e:	6013      	str	r3, [r2, #0]
}
 8002730:	bf00      	nop
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000008 	.word	0x20000008
 8002740:	20000ecc 	.word	0x20000ecc

08002744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000ecc 	.word	0x20000ecc

0800275c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff ffee 	bl	8002744 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002774:	d005      	beq.n	8002782 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002776:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <HAL_Delay+0x44>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4413      	add	r3, r2
 8002780:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002782:	bf00      	nop
 8002784:	f7ff ffde 	bl	8002744 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	429a      	cmp	r2, r3
 8002792:	d8f7      	bhi.n	8002784 <HAL_Delay+0x28>
  {
  }
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000008 	.word	0x20000008

080027a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <__NVIC_SetPriorityGrouping+0x40>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	68ba      	ldr	r2, [r7, #8]
 80027bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c0:	4013      	ands	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027cc:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <__NVIC_SetPriorityGrouping+0x44>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	; (80027e4 <__NVIC_SetPriorityGrouping+0x40>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00
 80027e8:	05fa0000 	.word	0x05fa0000

080027ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f0:	4b04      	ldr	r3, [pc, #16]	; (8002804 <__NVIC_GetPriorityGrouping+0x18>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0a1b      	lsrs	r3, r3, #8
 80027f6:	f003 0307 	and.w	r3, r3, #7
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002816:	2b00      	cmp	r3, #0
 8002818:	db0b      	blt.n	8002832 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	f003 021f 	and.w	r2, r3, #31
 8002820:	4907      	ldr	r1, [pc, #28]	; (8002840 <__NVIC_EnableIRQ+0x38>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	2001      	movs	r0, #1
 800282a:	fa00 f202 	lsl.w	r2, r0, r2
 800282e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	e000e100 	.word	0xe000e100

08002844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	db0a      	blt.n	800286e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	490c      	ldr	r1, [pc, #48]	; (8002890 <__NVIC_SetPriority+0x4c>)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	0112      	lsls	r2, r2, #4
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	440b      	add	r3, r1
 8002868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800286c:	e00a      	b.n	8002884 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	b2da      	uxtb	r2, r3
 8002872:	4908      	ldr	r1, [pc, #32]	; (8002894 <__NVIC_SetPriority+0x50>)
 8002874:	79fb      	ldrb	r3, [r7, #7]
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	3b04      	subs	r3, #4
 800287c:	0112      	lsls	r2, r2, #4
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	440b      	add	r3, r1
 8002882:	761a      	strb	r2, [r3, #24]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000e100 	.word	0xe000e100
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002898:	b480      	push	{r7}
 800289a:	b089      	sub	sp, #36	; 0x24
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f1c3 0307 	rsb	r3, r3, #7
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	bf28      	it	cs
 80028b6:	2304      	movcs	r3, #4
 80028b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3304      	adds	r3, #4
 80028be:	2b06      	cmp	r3, #6
 80028c0:	d902      	bls.n	80028c8 <NVIC_EncodePriority+0x30>
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	3b03      	subs	r3, #3
 80028c6:	e000      	b.n	80028ca <NVIC_EncodePriority+0x32>
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	401a      	ands	r2, r3
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	fa01 f303 	lsl.w	r3, r1, r3
 80028ea:	43d9      	mvns	r1, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	4313      	orrs	r3, r2
         );
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3724      	adds	r7, #36	; 0x24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
	...

08002900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002910:	d301      	bcc.n	8002916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002912:	2301      	movs	r3, #1
 8002914:	e00f      	b.n	8002936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <SysTick_Config+0x40>)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3b01      	subs	r3, #1
 800291c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291e:	210f      	movs	r1, #15
 8002920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002924:	f7ff ff8e 	bl	8002844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <SysTick_Config+0x40>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292e:	4b04      	ldr	r3, [pc, #16]	; (8002940 <SysTick_Config+0x40>)
 8002930:	2207      	movs	r2, #7
 8002932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	e000e010 	.word	0xe000e010

08002944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff ff29 	bl	80027a4 <__NVIC_SetPriorityGrouping>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800295a:	b580      	push	{r7, lr}
 800295c:	b086      	sub	sp, #24
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800296c:	f7ff ff3e 	bl	80027ec <__NVIC_GetPriorityGrouping>
 8002970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff ff8e 	bl	8002898 <NVIC_EncodePriority>
 800297c:	4602      	mov	r2, r0
 800297e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002982:	4611      	mov	r1, r2
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff ff5d 	bl	8002844 <__NVIC_SetPriority>
}
 800298a:	bf00      	nop
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	4603      	mov	r3, r0
 800299a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff ff31 	bl	8002808 <__NVIC_EnableIRQ>
}
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}

080029ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ffa2 	bl	8002900 <SysTick_Config>
 80029bc:	4603      	mov	r3, r0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff feb6 	bl	8002744 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e099      	b.n	8002b18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a04:	e00f      	b.n	8002a26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a06:	f7ff fe9d 	bl	8002744 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	d908      	bls.n	8002a26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e078      	b.n	8002b18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e8      	bne.n	8002a06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	4b38      	ldr	r3, [pc, #224]	; (8002b20 <HAL_DMA_Init+0x158>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	699b      	ldr	r3, [r3, #24]
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2b04      	cmp	r3, #4
 8002a7e:	d107      	bne.n	8002a90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0307 	bic.w	r3, r3, #7
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d117      	bne.n	8002aea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d00e      	beq.n	8002aea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 fb23 	bl	8003118 <DMA_CheckFifoParam>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e016      	b.n	8002b18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fada 	bl	80030ac <DMA_CalcBaseAndBitshift>
 8002af8:	4603      	mov	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b00:	223f      	movs	r2, #63	; 0x3f
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	f010803f 	.word	0xf010803f

08002b24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d101      	bne.n	8002b4a <HAL_DMA_Start_IT+0x26>
 8002b46:	2302      	movs	r3, #2
 8002b48:	e048      	b.n	8002bdc <HAL_DMA_Start_IT+0xb8>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d137      	bne.n	8002bce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	68b9      	ldr	r1, [r7, #8]
 8002b72:	68f8      	ldr	r0, [r7, #12]
 8002b74:	f000 fa6c 	bl	8003050 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	223f      	movs	r2, #63	; 0x3f
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0216 	orr.w	r2, r2, #22
 8002b92:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ba2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d007      	beq.n	8002bbc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0208 	orr.w	r2, r2, #8
 8002bba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0201 	orr.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e005      	b.n	8002bda <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bf2:	f7ff fda7 	bl	8002744 <HAL_GetTick>
 8002bf6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d008      	beq.n	8002c16 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e052      	b.n	8002cbc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0216 	bic.w	r2, r2, #22
 8002c24:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695a      	ldr	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c34:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <HAL_DMA_Abort+0x62>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0208 	bic.w	r2, r2, #8
 8002c54:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c66:	e013      	b.n	8002c90 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c68:	f7ff fd6c 	bl	8002744 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d90c      	bls.n	8002c90 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2220      	movs	r2, #32
 8002c7a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2203      	movs	r2, #3
 8002c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e015      	b.n	8002cbc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e4      	bne.n	8002c68 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	223f      	movs	r2, #63	; 0x3f
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2280      	movs	r2, #128	; 0x80
 8002cdc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00c      	b.n	8002cfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2205      	movs	r2, #5
 8002ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d14:	4b8e      	ldr	r3, [pc, #568]	; (8002f50 <HAL_DMA_IRQHandler+0x248>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a8e      	ldr	r2, [pc, #568]	; (8002f54 <HAL_DMA_IRQHandler+0x24c>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	0a9b      	lsrs	r3, r3, #10
 8002d20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d32:	2208      	movs	r2, #8
 8002d34:	409a      	lsls	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d01a      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0204 	bic.w	r2, r2, #4
 8002d5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d60:	2208      	movs	r2, #8
 8002d62:	409a      	lsls	r2, r3
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6c:	f043 0201 	orr.w	r2, r3, #1
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	2201      	movs	r2, #1
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d012      	beq.n	8002daa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00b      	beq.n	8002daa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d96:	2201      	movs	r2, #1
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da2:	f043 0202 	orr.w	r2, r3, #2
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	2204      	movs	r2, #4
 8002db0:	409a      	lsls	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	4013      	ands	r3, r2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d012      	beq.n	8002de0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00b      	beq.n	8002de0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	2204      	movs	r2, #4
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd8:	f043 0204 	orr.w	r2, r3, #4
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de4:	2210      	movs	r2, #16
 8002de6:	409a      	lsls	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d043      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d03c      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	2210      	movs	r2, #16
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d018      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d108      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d024      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	4798      	blx	r3
 8002e36:	e01f      	b.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01b      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
 8002e48:	e016      	b.n	8002e78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d107      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 0208 	bic.w	r2, r2, #8
 8002e66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 808f 	beq.w	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8087 	beq.w	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b05      	cmp	r3, #5
 8002eb0:	d136      	bne.n	8002f20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0216 	bic.w	r2, r2, #22
 8002ec0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <HAL_DMA_IRQHandler+0x1da>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d007      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0208 	bic.w	r2, r2, #8
 8002ef0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	223f      	movs	r2, #63	; 0x3f
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d07e      	beq.n	8003014 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
        }
        return;
 8002f1e:	e079      	b.n	8003014 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d01d      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10d      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d031      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
 8002f4c:	e02c      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
 8002f4e:	bf00      	nop
 8002f50:	20000000 	.word	0x20000000
 8002f54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d023      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
 8002f68:	e01e      	b.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10f      	bne.n	8002f98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0210 	bic.w	r2, r2, #16
 8002f86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d032      	beq.n	8003016 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d022      	beq.n	8003002 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2205      	movs	r2, #5
 8002fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d307      	bcc.n	8002ff0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f2      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x2cc>
 8002fee:	e000      	b.n	8002ff2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ff0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
 8003012:	e000      	b.n	8003016 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003014:	bf00      	nop
    }
  }
}
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800302a:	b2db      	uxtb	r3, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800306c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d108      	bne.n	8003090 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68ba      	ldr	r2, [r7, #8]
 800308c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800308e:	e007      	b.n	80030a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]
}
 80030a0:	bf00      	nop
 80030a2:	3714      	adds	r7, #20
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3b10      	subs	r3, #16
 80030bc:	4a13      	ldr	r2, [pc, #76]	; (800310c <DMA_CalcBaseAndBitshift+0x60>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <DMA_CalcBaseAndBitshift+0x64>)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	461a      	mov	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d908      	bls.n	80030ec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <DMA_CalcBaseAndBitshift+0x68>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	1d1a      	adds	r2, r3, #4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	659a      	str	r2, [r3, #88]	; 0x58
 80030ea:	e006      	b.n	80030fa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <DMA_CalcBaseAndBitshift+0x68>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	aaaaaaab 	.word	0xaaaaaaab
 8003110:	08019ca4 	.word	0x08019ca4
 8003114:	fffffc00 	.word	0xfffffc00

08003118 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d11f      	bne.n	8003172 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d856      	bhi.n	80031e6 <DMA_CheckFifoParam+0xce>
 8003138:	a201      	add	r2, pc, #4	; (adr r2, 8003140 <DMA_CheckFifoParam+0x28>)
 800313a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313e:	bf00      	nop
 8003140:	08003151 	.word	0x08003151
 8003144:	08003163 	.word	0x08003163
 8003148:	08003151 	.word	0x08003151
 800314c:	080031e7 	.word	0x080031e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d046      	beq.n	80031ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003160:	e043      	b.n	80031ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800316a:	d140      	bne.n	80031ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003170:	e03d      	b.n	80031ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800317a:	d121      	bne.n	80031c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d837      	bhi.n	80031f2 <DMA_CheckFifoParam+0xda>
 8003182:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <DMA_CheckFifoParam+0x70>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	08003199 	.word	0x08003199
 800318c:	0800319f 	.word	0x0800319f
 8003190:	08003199 	.word	0x08003199
 8003194:	080031b1 	.word	0x080031b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
      break;
 800319c:	e030      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d025      	beq.n	80031f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ae:	e022      	b.n	80031f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031b8:	d11f      	bne.n	80031fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031be:	e01c      	b.n	80031fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d903      	bls.n	80031ce <DMA_CheckFifoParam+0xb6>
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2b03      	cmp	r3, #3
 80031ca:	d003      	beq.n	80031d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031cc:	e018      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	73fb      	strb	r3, [r7, #15]
      break;
 80031d2:	e015      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00e      	beq.n	80031fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
      break;
 80031e4:	e00b      	b.n	80031fe <DMA_CheckFifoParam+0xe6>
      break;
 80031e6:	bf00      	nop
 80031e8:	e00a      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031ea:	bf00      	nop
 80031ec:	e008      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031ee:	bf00      	nop
 80031f0:	e006      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031f2:	bf00      	nop
 80031f4:	e004      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031f6:	bf00      	nop
 80031f8:	e002      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;   
 80031fa:	bf00      	nop
 80031fc:	e000      	b.n	8003200 <DMA_CheckFifoParam+0xe8>
      break;
 80031fe:	bf00      	nop
    }
  } 
  
  return status; 
 8003200:	7bfb      	ldrb	r3, [r7, #15]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop

08003210 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e06a      	b.n	80032f8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2223      	movs	r2, #35	; 0x23
 8003230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f008 f8a9 	bl	800b38c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323a:	4b31      	ldr	r3, [pc, #196]	; (8003300 <HAL_ETH_Init+0xf0>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	4a30      	ldr	r2, [pc, #192]	; (8003300 <HAL_ETH_Init+0xf0>)
 8003240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003244:	6453      	str	r3, [r2, #68]	; 0x44
 8003246:	4b2e      	ldr	r3, [pc, #184]	; (8003300 <HAL_ETH_Init+0xf0>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003252:	4b2c      	ldr	r3, [pc, #176]	; (8003304 <HAL_ETH_Init+0xf4>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	4a2b      	ldr	r2, [pc, #172]	; (8003304 <HAL_ETH_Init+0xf4>)
 8003258:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800325c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800325e:	4b29      	ldr	r3, [pc, #164]	; (8003304 <HAL_ETH_Init+0xf4>)
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	4927      	ldr	r1, [pc, #156]	; (8003304 <HAL_ETH_Init+0xf4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800326c:	4b25      	ldr	r3, [pc, #148]	; (8003304 <HAL_ETH_Init+0xf4>)
 800326e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003286:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003288:	f7ff fa5c 	bl	8002744 <HAL_GetTick>
 800328c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800328e:	e011      	b.n	80032b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003290:	f7ff fa58 	bl	8002744 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800329e:	d909      	bls.n	80032b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2204      	movs	r2, #4
 80032a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	22e0      	movs	r2, #224	; 0xe0
 80032ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e021      	b.n	80032f8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e4      	bne.n	8003290 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fdf0 	bl	8003eac <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 fe97 	bl	8004000 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 feed 	bl	80040b2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	461a      	mov	r2, r3
 80032de:	2100      	movs	r1, #0
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fe55 	bl	8003f90 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2210      	movs	r2, #16
 80032f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3710      	adds	r7, #16
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40023800 	.word	0x40023800
 8003304:	40013800 	.word	0x40013800

08003308 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003316:	2b10      	cmp	r3, #16
 8003318:	d150      	bne.n	80033bc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2223      	movs	r2, #35	; 0x23
 800331e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2204      	movs	r2, #4
 8003326:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f9fd 	bl	8003728 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0208 	orr.w	r2, r2, #8
 800333c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003346:	2001      	movs	r0, #1
 8003348:	f7ff fa08 	bl	800275c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0204 	orr.w	r2, r2, #4
 8003362:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800336c:	2001      	movs	r0, #1
 800336e:	f7ff f9f5 	bl	800275c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 fc36 	bl	8003bec <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003396:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6812      	ldr	r2, [r2, #0]
 80033a6:	f043 0302 	orr.w	r3, r3, #2
 80033aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033ae:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2223      	movs	r2, #35	; 0x23
 80033b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d4:	2b23      	cmp	r3, #35	; 0x23
 80033d6:	d14a      	bne.n	800346e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2223      	movs	r2, #35	; 0x23
 80033dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80033f6:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	6812      	ldr	r2, [r2, #0]
 8003406:	f023 0302 	bic.w	r3, r3, #2
 800340a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800340e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0204 	bic.w	r2, r2, #4
 800341e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003428:	2001      	movs	r0, #1
 800342a:	f7ff f997 	bl	800275c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fbd8 	bl	8003bec <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f022 0208 	bic.w	r2, r2, #8
 800344a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003454:	2001      	movs	r0, #1
 8003456:	f7ff f981 	bl	800275c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2210      	movs	r2, #16
 8003466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	e000      	b.n	8003470 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
  }
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e07c      	b.n	8003598 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034a4:	2b23      	cmp	r3, #35	; 0x23
 80034a6:	d176      	bne.n	8003596 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80034a8:	2200      	movs	r2, #0
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 fe6d 	bl	800418c <ETH_Prepare_Tx_Descriptors>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f043 0202 	orr.w	r2, r3, #2
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e065      	b.n	8003598 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80034cc:	f3bf 8f4f 	dsb	sy
}
 80034d0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	3206      	adds	r2, #6
 80034da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034de:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	629a      	str	r2, [r3, #40]	; 0x28
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d904      	bls.n	80034fc <HAL_ETH_Transmit+0x84>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	1f1a      	subs	r2, r3, #4
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3106      	adds	r1, #6
 8003508:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800350c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003510:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8003512:	f7ff f917 	bl	8002744 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003518:	e037      	b.n	800358a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d011      	beq.n	8003550 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	f043 0208 	orr.w	r2, r3, #8
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e023      	b.n	8003598 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003556:	d018      	beq.n	800358a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003558:	f7ff f8f4 	bl	8002744 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	429a      	cmp	r2, r3
 8003566:	d302      	bcc.n	800356e <HAL_ETH_Transmit+0xf6>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10d      	bne.n	800358a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f043 0204 	orr.w	r2, r3, #4
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8003584:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e006      	b.n	8003598 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	dbc3      	blt.n	800351a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	e000      	b.n	8003598 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
  }
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d109      	bne.n	80035cc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	f043 0201 	orr.w	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0a8      	b.n	800371e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d2:	2b23      	cmp	r3, #35	; 0x23
 80035d4:	d001      	beq.n	80035da <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e0a1      	b.n	800371e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035de:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	3212      	adds	r2, #18
 80035e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ea:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035f0:	f1c3 0304 	rsb	r3, r3, #4
 80035f4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80035f6:	e06a      	b.n	80036ce <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003600:	2b00      	cmp	r3, #0
 8003602:	d007      	beq.n	8003614 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	699a      	ldr	r2, [r3, #24]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800361c:	2b00      	cmp	r3, #0
 800361e:	d103      	bne.n	8003628 <HAL_ETH_ReadData+0x88>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003624:	2b00      	cmp	r3, #0
 8003626:	d040      	beq.n	80036aa <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003630:	2b00      	cmp	r3, #0
 8003632:	d005      	beq.n	8003640 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00c      	beq.n	800366c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	0c1b      	lsrs	r3, r3, #16
 8003658:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800365c:	3b04      	subs	r3, #4
 800365e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003684:	461a      	mov	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	b29b      	uxth	r3, r3
 800368a:	f008 f841 	bl	800b710 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	441a      	add	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2200      	movs	r2, #0
 80036a8:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3301      	adds	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b03      	cmp	r3, #3
 80036b4:	d902      	bls.n	80036bc <HAL_ETH_ReadData+0x11c>
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	3b04      	subs	r3, #4
 80036ba:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	3212      	adds	r2, #18
 80036c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036c6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	3301      	adds	r3, #1
 80036cc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	db06      	blt.n	80036e4 <HAL_ETH_ReadData+0x144>
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d202      	bcs.n	80036e4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d089      	beq.n	80035f8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	441a      	add	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f815 	bl	8003728 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d108      	bne.n	800371c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003718:	2300      	movs	r3, #0
 800371a:	e000      	b.n	800371e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
}
 800371e:	4618      	mov	r0, r3
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8003734:	2301      	movs	r3, #1
 8003736:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800373c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	3212      	adds	r2, #18
 8003744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003748:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800374e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8003750:	e040      	b.n	80037d4 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d112      	bne.n	8003780 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800375a:	f107 030c 	add.w	r3, r7, #12
 800375e:	4618      	mov	r0, r3
 8003760:	f007 ffa6 	bl	800b6b0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d102      	bne.n	8003770 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	74fb      	strb	r3, [r7, #19]
 800376e:	e007      	b.n	8003780 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	461a      	mov	r2, r3
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	461a      	mov	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d026      	beq.n	80037d4 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	4a1e      	ldr	r2, [pc, #120]	; (800380c <ETH_UpdateDescriptor+0xe4>)
 8003792:	605a      	str	r2, [r3, #4]
 8003794:	e003      	b.n	800379e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800379c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800379e:	f3bf 8f5f 	dmb	sy
}
 80037a2:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	3301      	adds	r3, #1
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d902      	bls.n	80037c2 <ETH_UpdateDescriptor+0x9a>
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	3b04      	subs	r3, #4
 80037c0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	3212      	adds	r2, #18
 80037c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037cc:	617b      	str	r3, [r7, #20]
      desccount--;
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	3b01      	subs	r3, #1
 80037d2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <ETH_UpdateDescriptor+0xb8>
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1b8      	bne.n	8003752 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d00c      	beq.n	8003804 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037f2:	461a      	mov	r2, r3
 80037f4:	2300      	movs	r3, #0
 80037f6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8003804:	bf00      	nop
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	800045f8 	.word	0x800045f8

08003810 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f003 031c 	and.w	r3, r3, #28
 800382c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	02db      	lsls	r3, r3, #11
 8003832:	b29b      	uxth	r3, r3
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	019b      	lsls	r3, r3, #6
 800383e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f023 0302 	bic.w	r3, r3, #2
 800384e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f043 0301 	orr.w	r3, r3, #1
 8003856:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003860:	f7fe ff70 	bl	8002744 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003866:	e00d      	b.n	8003884 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003868:	f7fe ff6c 	bl	8002744 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003876:	d301      	bcc.n	800387c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e010      	b.n	800389e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1ec      	bne.n	8003868 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	b29b      	uxth	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b086      	sub	sp, #24
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691b      	ldr	r3, [r3, #16]
 80038ba:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f003 031c 	and.w	r3, r3, #28
 80038c2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	02db      	lsls	r3, r3, #11
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	019b      	lsls	r3, r3, #6
 80038d4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f043 0302 	orr.w	r3, r3, #2
 80038e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003900:	f7fe ff20 	bl	8002744 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003906:	e00d      	b.n	8003924 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003908:	f7fe ff1c 	bl	8002744 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003916:	d301      	bcc.n	800391c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e009      	b.n	8003930 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1ec      	bne.n	8003908 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0d9      	b.n	8003b00 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf14      	ite	ne
 800395a:	2301      	movne	r3, #1
 800395c:	2300      	moveq	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	461a      	mov	r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf0c      	ite	eq
 80039ba:	2301      	moveq	r3, #1
 80039bc:	2300      	movne	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	461a      	mov	r2, r3
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	bf14      	ite	ne
 8003a3e:	2301      	movne	r3, #1
 8003a40:	2300      	moveq	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	bf14      	ite	ne
 8003a66:	2301      	movne	r3, #1
 8003a68:	2300      	moveq	r3, #0
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	bf14      	ite	ne
 8003a80:	2301      	movne	r3, #1
 8003a82:	2300      	moveq	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	0c1b      	lsrs	r3, r3, #16
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf14      	ite	ne
 8003ad4:	2301      	movne	r3, #1
 8003ad6:	2300      	moveq	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	370c      	adds	r7, #12
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr

08003b0c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e00b      	b.n	8003b38 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b26:	2b10      	cmp	r3, #16
 8003b28:	d105      	bne.n	8003b36 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003b2a:	6839      	ldr	r1, [r7, #0]
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f883 	bl	8003c38 <ETH_SetMACConfig>

    return HAL_OK;
 8003b32:	2300      	movs	r3, #0
 8003b34:	e000      	b.n	8003b38 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
  }
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 031c 	bic.w	r3, r3, #28
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003b58:	f003 fbe4 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 8003b5c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4a1d      	ldr	r2, [pc, #116]	; (8003bd8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d908      	bls.n	8003b78 <HAL_ETH_SetMDIOClockRange+0x38>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4a1c      	ldr	r2, [pc, #112]	; (8003bdc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d804      	bhi.n	8003b78 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f043 0308 	orr.w	r3, r3, #8
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	e027      	b.n	8003bc8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	4a18      	ldr	r2, [pc, #96]	; (8003bdc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d908      	bls.n	8003b92 <HAL_ETH_SetMDIOClockRange+0x52>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	4a17      	ldr	r2, [pc, #92]	; (8003be0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d204      	bcs.n	8003b92 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f043 030c 	orr.w	r3, r3, #12
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	e01a      	b.n	8003bc8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d303      	bcc.n	8003ba2 <HAL_ETH_SetMDIOClockRange+0x62>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4a11      	ldr	r2, [pc, #68]	; (8003be4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d911      	bls.n	8003bc6 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4a0f      	ldr	r2, [pc, #60]	; (8003be4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d908      	bls.n	8003bbc <HAL_ETH_SetMDIOClockRange+0x7c>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4a0e      	ldr	r2, [pc, #56]	; (8003be8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d804      	bhi.n	8003bbc <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f043 0304 	orr.w	r3, r3, #4
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	e005      	b.n	8003bc8 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f043 0310 	orr.w	r3, r3, #16
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e000      	b.n	8003bc8 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003bc6:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	611a      	str	r2, [r3, #16]
}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	01312cff 	.word	0x01312cff
 8003bdc:	02160ebf 	.word	0x02160ebf
 8003be0:	03938700 	.word	0x03938700
 8003be4:	05f5e0ff 	.word	0x05f5e0ff
 8003be8:	08f0d17f 	.word	0x08f0d17f

08003bec <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c0e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c1c:	2001      	movs	r0, #1
 8003c1e:	f7fe fd9d 	bl	800275c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c2c:	6193      	str	r3, [r2, #24]
}
 8003c2e:	bf00      	nop
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	4b51      	ldr	r3, [pc, #324]	; (8003d94 <ETH_SetMACConfig+0x15c>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	7c1b      	ldrb	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <ETH_SetMACConfig+0x28>
 8003c5a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003c5e:	e000      	b.n	8003c62 <ETH_SetMACConfig+0x2a>
 8003c60:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	7c5b      	ldrb	r3, [r3, #17]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <ETH_SetMACConfig+0x38>
 8003c6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c6e:	e000      	b.n	8003c72 <ETH_SetMACConfig+0x3a>
 8003c70:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003c72:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003c78:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	7fdb      	ldrb	r3, [r3, #31]
 8003c7e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003c80:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003c86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	7f92      	ldrb	r2, [r2, #30]
 8003c8c:	2a00      	cmp	r2, #0
 8003c8e:	d102      	bne.n	8003c96 <ETH_SetMACConfig+0x5e>
 8003c90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c94:	e000      	b.n	8003c98 <ETH_SetMACConfig+0x60>
 8003c96:	2200      	movs	r2, #0
                        macconf->Speed |
 8003c98:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	7f1b      	ldrb	r3, [r3, #28]
 8003c9e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003ca0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003ca6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	791b      	ldrb	r3, [r3, #4]
 8003cac:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003cae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003cb6:	2a00      	cmp	r2, #0
 8003cb8:	d102      	bne.n	8003cc0 <ETH_SetMACConfig+0x88>
 8003cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cbe:	e000      	b.n	8003cc2 <ETH_SetMACConfig+0x8a>
 8003cc0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003cc2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	7bdb      	ldrb	r3, [r3, #15]
 8003cc8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003cca:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003cd0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cd8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cf2:	2001      	movs	r0, #1
 8003cf4:	f7fe fd32 	bl	800275c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003d0e:	4013      	ands	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d16:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003d1e:	2a00      	cmp	r2, #0
 8003d20:	d101      	bne.n	8003d26 <ETH_SetMACConfig+0xee>
 8003d22:	2280      	movs	r2, #128	; 0x80
 8003d24:	e000      	b.n	8003d28 <ETH_SetMACConfig+0xf0>
 8003d26:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d28:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003d2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8003d36:	2a01      	cmp	r2, #1
 8003d38:	d101      	bne.n	8003d3e <ETH_SetMACConfig+0x106>
 8003d3a:	2208      	movs	r2, #8
 8003d3c:	e000      	b.n	8003d40 <ETH_SetMACConfig+0x108>
 8003d3e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003d40:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8003d48:	2a01      	cmp	r2, #1
 8003d4a:	d101      	bne.n	8003d50 <ETH_SetMACConfig+0x118>
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	e000      	b.n	8003d52 <ETH_SetMACConfig+0x11a>
 8003d50:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003d52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8003d5a:	2a01      	cmp	r2, #1
 8003d5c:	d101      	bne.n	8003d62 <ETH_SetMACConfig+0x12a>
 8003d5e:	2202      	movs	r2, #2
 8003d60:	e000      	b.n	8003d64 <ETH_SetMACConfig+0x12c>
 8003d62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003d64:	4313      	orrs	r3, r2
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	f7fe fced 	bl	800275c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	619a      	str	r2, [r3, #24]
}
 8003d8a:	bf00      	nop
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	ff20810f 	.word	0xff20810f

08003d98 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	4b3d      	ldr	r3, [pc, #244]	; (8003ea8 <ETH_SetDMAConfig+0x110>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	7b1b      	ldrb	r3, [r3, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <ETH_SetDMAConfig+0x2c>
 8003dbe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003dc2:	e000      	b.n	8003dc6 <ETH_SetDMAConfig+0x2e>
 8003dc4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	7b5b      	ldrb	r3, [r3, #13]
 8003dca:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003dcc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	7f52      	ldrb	r2, [r2, #29]
 8003dd2:	2a00      	cmp	r2, #0
 8003dd4:	d102      	bne.n	8003ddc <ETH_SetDMAConfig+0x44>
 8003dd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003dda:	e000      	b.n	8003dde <ETH_SetDMAConfig+0x46>
 8003ddc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003dde:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	7b9b      	ldrb	r3, [r3, #14]
 8003de4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003de6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003dec:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	7f1b      	ldrb	r3, [r3, #28]
 8003df2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003df4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	7f9b      	ldrb	r3, [r3, #30]
 8003dfa:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003dfc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e02:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e0a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f7fe fc94 	bl	800275c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	791b      	ldrb	r3, [r3, #4]
 8003e46:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e4c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003e52:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003e58:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e60:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003e62:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003e6a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003e70:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	6812      	ldr	r2, [r2, #0]
 8003e76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003e7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003e7e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	f7fe fc65 	bl	800275c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6013      	str	r3, [r2, #0]
}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	f8de3f23 	.word	0xf8de3f23

08003eac <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b0a6      	sub	sp, #152	; 0x98
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003eec:	2300      	movs	r3, #0
 8003eee:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003efc:	2300      	movs	r3, #0
 8003efe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f02:	2300      	movs	r3, #0
 8003f04:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003f0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f12:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003f14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f18:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003f20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f24:	4619      	mov	r1, r3
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7ff fe86 	bl	8003c38 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003f30:	2301      	movs	r3, #1
 8003f32:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003f42:	2300      	movs	r3, #0
 8003f44:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f60:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f66:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f6c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003f7c:	f107 0308 	add.w	r3, r7, #8
 8003f80:	4619      	mov	r1, r3
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ff08 	bl	8003d98 <ETH_SetDMAConfig>
}
 8003f88:	bf00      	nop
 8003f8a:	3798      	adds	r7, #152	; 0x98
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3305      	adds	r3, #5
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	021b      	lsls	r3, r3, #8
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	3204      	adds	r2, #4
 8003fa8:	7812      	ldrb	r2, [r2, #0]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <ETH_MACAddressConfig+0x68>)
 8003fb2:	4413      	add	r3, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3303      	adds	r3, #3
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	061a      	lsls	r2, r3, #24
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	041b      	lsls	r3, r3, #16
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	7812      	ldrb	r2, [r2, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <ETH_MACAddressConfig+0x6c>)
 8003fe2:	4413      	add	r3, r2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	6013      	str	r3, [r2, #0]
}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40028040 	.word	0x40028040
 8003ffc:	40028044 	.word	0x40028044

08004000 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	e03e      	b.n	800408c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68d9      	ldr	r1, [r3, #12]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	440b      	add	r3, r1
 800401e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	2200      	movs	r2, #0
 800402a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	2200      	movs	r2, #0
 8004030:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	2200      	movs	r2, #0
 8004036:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004038:	68b9      	ldr	r1, [r7, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68fa      	ldr	r2, [r7, #12]
 800403e:	3206      	adds	r2, #6
 8004040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d80c      	bhi.n	8004070 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68d9      	ldr	r1, [r3, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	440b      	add	r3, r1
 8004068:	461a      	mov	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	e004      	b.n	800407a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	461a      	mov	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3301      	adds	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b03      	cmp	r3, #3
 8004090:	d9bd      	bls.n	800400e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a4:	611a      	str	r2, [r3, #16]
}
 80040a6:	bf00      	nop
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b085      	sub	sp, #20
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80040ba:	2300      	movs	r3, #0
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e046      	b.n	800414e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6919      	ldr	r1, [r3, #16]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4613      	mov	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4413      	add	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	440b      	add	r3, r1
 80040d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2200      	movs	r2, #0
 80040dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2200      	movs	r2, #0
 80040e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2200      	movs	r2, #0
 80040e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2200      	movs	r2, #0
 80040ee:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2200      	movs	r2, #0
 80040f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040fc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8004104:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004112:	68b9      	ldr	r1, [r7, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	3212      	adds	r2, #18
 800411a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d80c      	bhi.n	800413e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6919      	ldr	r1, [r3, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	440b      	add	r3, r1
 8004136:	461a      	mov	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	60da      	str	r2, [r3, #12]
 800413c:	e004      	b.n	8004148 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	461a      	mov	r2, r3
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	3301      	adds	r3, #1
 800414c:	60fb      	str	r3, [r7, #12]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b03      	cmp	r3, #3
 8004152:	d9b5      	bls.n	80040c0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417e:	60da      	str	r2, [r3, #12]
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800418c:	b480      	push	{r7}
 800418e:	b08d      	sub	sp, #52	; 0x34
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	3318      	adds	r3, #24
 800419c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041b6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ce:	d007      	beq.n	80041e0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d4:	3304      	adds	r3, #4
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80041e0:	2302      	movs	r3, #2
 80041e2:	e0ff      	b.n	80043e4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	3301      	adds	r3, #1
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	4b7d      	ldr	r3, [pc, #500]	; (80043f0 <ETH_Prepare_Tx_Descriptors+0x264>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	6852      	ldr	r2, [r2, #4]
 8004200:	431a      	orrs	r2, r3
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	d008      	beq.n	8004224 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	431a      	orrs	r2, r3
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0320 	and.w	r3, r3, #32
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	431a      	orrs	r2, r3
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004262:	6a3b      	ldr	r3, [r7, #32]
 8004264:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8004266:	f3bf 8f5f 	dmb	sy
}
 800426a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004278:	e082      	b.n	8004380 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004282:	6a3b      	ldr	r3, [r7, #32]
 8004284:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d006      	beq.n	800429a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	e005      	b.n	80042a6 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	3301      	adds	r3, #1
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d902      	bls.n	80042b8 <ETH_Prepare_Tx_Descriptors+0x12c>
 80042b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b4:	3b04      	subs	r3, #4
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042c0:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042ca:	6a3b      	ldr	r3, [r7, #32]
 80042cc:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042da:	d007      	beq.n	80042ec <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e0:	3304      	adds	r3, #4
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d029      	beq.n	8004340 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042f8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80042fa:	2300      	movs	r3, #0
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fe:	e019      	b.n	8004334 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8004300:	f3bf 8f5f 	dmb	sy
}
 8004304:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004314:	3301      	adds	r3, #1
 8004316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	2b03      	cmp	r3, #3
 800431c:	d902      	bls.n	8004324 <ETH_Prepare_Tx_Descriptors+0x198>
 800431e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004320:	3b04      	subs	r3, #4
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432c:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	3301      	adds	r3, #1
 8004332:	62bb      	str	r3, [r7, #40]	; 0x28
 8004334:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	429a      	cmp	r2, r3
 800433a:	d3e1      	bcc.n	8004300 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800433c:	2302      	movs	r3, #2
 800433e:	e051      	b.n	80043e4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	3301      	adds	r3, #1
 8004344:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <ETH_Prepare_Tx_Descriptors+0x264>)
 800435c:	4013      	ands	r3, r2
 800435e:	69fa      	ldr	r2, [r7, #28]
 8004360:	6852      	ldr	r2, [r2, #4]
 8004362:	431a      	orrs	r2, r3
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	3301      	adds	r3, #1
 800436c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800436e:	f3bf 8f5f 	dmb	sy
}
 8004372:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f47f af78 	bne.w	800427a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d006      	beq.n	800439e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	e005      	b.n	80043aa <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ba:	6979      	ldr	r1, [r7, #20]
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	3304      	adds	r3, #4
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043ca:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80043cc:	b672      	cpsid	i
}
 80043ce:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	4413      	add	r3, r2
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80043de:	b662      	cpsie	i
}
 80043e0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3734      	adds	r7, #52	; 0x34
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	ffffe000 	.word	0xffffe000

080043f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80043fe:	2300      	movs	r3, #0
 8004400:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004402:	2300      	movs	r3, #0
 8004404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004406:	2300      	movs	r3, #0
 8004408:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800440a:	2300      	movs	r3, #0
 800440c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	e175      	b.n	8004700 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004414:	2201      	movs	r2, #1
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4013      	ands	r3, r2
 8004426:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	429a      	cmp	r2, r3
 800442e:	f040 8164 	bne.w	80046fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b01      	cmp	r3, #1
 800443c:	d005      	beq.n	800444a <HAL_GPIO_Init+0x56>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d130      	bne.n	80044ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	2203      	movs	r2, #3
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4313      	orrs	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004480:	2201      	movs	r2, #1
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	43db      	mvns	r3, r3
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4013      	ands	r3, r2
 800448e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	f003 0201 	and.w	r2, r3, #1
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	fa02 f303 	lsl.w	r3, r2, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d017      	beq.n	80044e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	2203      	movs	r2, #3
 80044c4:	fa02 f303 	lsl.w	r3, r2, r3
 80044c8:	43db      	mvns	r3, r3
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4013      	ands	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4313      	orrs	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d123      	bne.n	800453c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	08da      	lsrs	r2, r3, #3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3208      	adds	r2, #8
 80044fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	220f      	movs	r2, #15
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	691a      	ldr	r2, [r3, #16]
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	08da      	lsrs	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3208      	adds	r2, #8
 8004536:	69b9      	ldr	r1, [r7, #24]
 8004538:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	2203      	movs	r2, #3
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 0203 	and.w	r2, r3, #3
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004578:	2b00      	cmp	r3, #0
 800457a:	f000 80be 	beq.w	80046fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457e:	4b66      	ldr	r3, [pc, #408]	; (8004718 <HAL_GPIO_Init+0x324>)
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	4a65      	ldr	r2, [pc, #404]	; (8004718 <HAL_GPIO_Init+0x324>)
 8004584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004588:	6453      	str	r3, [r2, #68]	; 0x44
 800458a:	4b63      	ldr	r3, [pc, #396]	; (8004718 <HAL_GPIO_Init+0x324>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004596:	4a61      	ldr	r2, [pc, #388]	; (800471c <HAL_GPIO_Init+0x328>)
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	3302      	adds	r3, #2
 800459e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	220f      	movs	r2, #15
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a58      	ldr	r2, [pc, #352]	; (8004720 <HAL_GPIO_Init+0x32c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d037      	beq.n	8004632 <HAL_GPIO_Init+0x23e>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a57      	ldr	r2, [pc, #348]	; (8004724 <HAL_GPIO_Init+0x330>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d031      	beq.n	800462e <HAL_GPIO_Init+0x23a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a56      	ldr	r2, [pc, #344]	; (8004728 <HAL_GPIO_Init+0x334>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d02b      	beq.n	800462a <HAL_GPIO_Init+0x236>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a55      	ldr	r2, [pc, #340]	; (800472c <HAL_GPIO_Init+0x338>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d025      	beq.n	8004626 <HAL_GPIO_Init+0x232>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a54      	ldr	r2, [pc, #336]	; (8004730 <HAL_GPIO_Init+0x33c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01f      	beq.n	8004622 <HAL_GPIO_Init+0x22e>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a53      	ldr	r2, [pc, #332]	; (8004734 <HAL_GPIO_Init+0x340>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d019      	beq.n	800461e <HAL_GPIO_Init+0x22a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a52      	ldr	r2, [pc, #328]	; (8004738 <HAL_GPIO_Init+0x344>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <HAL_GPIO_Init+0x226>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a51      	ldr	r2, [pc, #324]	; (800473c <HAL_GPIO_Init+0x348>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00d      	beq.n	8004616 <HAL_GPIO_Init+0x222>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a50      	ldr	r2, [pc, #320]	; (8004740 <HAL_GPIO_Init+0x34c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d007      	beq.n	8004612 <HAL_GPIO_Init+0x21e>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a4f      	ldr	r2, [pc, #316]	; (8004744 <HAL_GPIO_Init+0x350>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <HAL_GPIO_Init+0x21a>
 800460a:	2309      	movs	r3, #9
 800460c:	e012      	b.n	8004634 <HAL_GPIO_Init+0x240>
 800460e:	230a      	movs	r3, #10
 8004610:	e010      	b.n	8004634 <HAL_GPIO_Init+0x240>
 8004612:	2308      	movs	r3, #8
 8004614:	e00e      	b.n	8004634 <HAL_GPIO_Init+0x240>
 8004616:	2307      	movs	r3, #7
 8004618:	e00c      	b.n	8004634 <HAL_GPIO_Init+0x240>
 800461a:	2306      	movs	r3, #6
 800461c:	e00a      	b.n	8004634 <HAL_GPIO_Init+0x240>
 800461e:	2305      	movs	r3, #5
 8004620:	e008      	b.n	8004634 <HAL_GPIO_Init+0x240>
 8004622:	2304      	movs	r3, #4
 8004624:	e006      	b.n	8004634 <HAL_GPIO_Init+0x240>
 8004626:	2303      	movs	r3, #3
 8004628:	e004      	b.n	8004634 <HAL_GPIO_Init+0x240>
 800462a:	2302      	movs	r3, #2
 800462c:	e002      	b.n	8004634 <HAL_GPIO_Init+0x240>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <HAL_GPIO_Init+0x240>
 8004632:	2300      	movs	r3, #0
 8004634:	69fa      	ldr	r2, [r7, #28]
 8004636:	f002 0203 	and.w	r2, r2, #3
 800463a:	0092      	lsls	r2, r2, #2
 800463c:	4093      	lsls	r3, r2
 800463e:	69ba      	ldr	r2, [r7, #24]
 8004640:	4313      	orrs	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004644:	4935      	ldr	r1, [pc, #212]	; (800471c <HAL_GPIO_Init+0x328>)
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	089b      	lsrs	r3, r3, #2
 800464a:	3302      	adds	r3, #2
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004652:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <HAL_GPIO_Init+0x354>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	43db      	mvns	r3, r3
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	4013      	ands	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	4313      	orrs	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004676:	4a34      	ldr	r2, [pc, #208]	; (8004748 <HAL_GPIO_Init+0x354>)
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800467c:	4b32      	ldr	r3, [pc, #200]	; (8004748 <HAL_GPIO_Init+0x354>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	43db      	mvns	r3, r3
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	4013      	ands	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046a0:	4a29      	ldr	r2, [pc, #164]	; (8004748 <HAL_GPIO_Init+0x354>)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046a6:	4b28      	ldr	r3, [pc, #160]	; (8004748 <HAL_GPIO_Init+0x354>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	43db      	mvns	r3, r3
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	4013      	ands	r3, r2
 80046b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046ca:	4a1f      	ldr	r2, [pc, #124]	; (8004748 <HAL_GPIO_Init+0x354>)
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046d0:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <HAL_GPIO_Init+0x354>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046ec:	69ba      	ldr	r2, [r7, #24]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046f4:	4a14      	ldr	r2, [pc, #80]	; (8004748 <HAL_GPIO_Init+0x354>)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	2b0f      	cmp	r3, #15
 8004704:	f67f ae86 	bls.w	8004414 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004708:	bf00      	nop
 800470a:	bf00      	nop
 800470c:	3724      	adds	r7, #36	; 0x24
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40023800 	.word	0x40023800
 800471c:	40013800 	.word	0x40013800
 8004720:	40020000 	.word	0x40020000
 8004724:	40020400 	.word	0x40020400
 8004728:	40020800 	.word	0x40020800
 800472c:	40020c00 	.word	0x40020c00
 8004730:	40021000 	.word	0x40021000
 8004734:	40021400 	.word	0x40021400
 8004738:	40021800 	.word	0x40021800
 800473c:	40021c00 	.word	0x40021c00
 8004740:	40022000 	.word	0x40022000
 8004744:	40022400 	.word	0x40022400
 8004748:	40013c00 	.word	0x40013c00

0800474c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	460b      	mov	r3, r1
 8004756:	807b      	strh	r3, [r7, #2]
 8004758:	4613      	mov	r3, r2
 800475a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800475c:	787b      	ldrb	r3, [r7, #1]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004762:	887a      	ldrh	r2, [r7, #2]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004768:	e003      	b.n	8004772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800476a:	887b      	ldrh	r3, [r7, #2]
 800476c:	041a      	lsls	r2, r3, #16
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	619a      	str	r2, [r3, #24]
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
	...

08004780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b082      	sub	sp, #8
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e07f      	b.n	8004892 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7fc fee4 	bl	8001574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2224      	movs	r2, #36	; 0x24
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0201 	bic.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d107      	bne.n	80047fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f6:	609a      	str	r2, [r3, #8]
 80047f8:	e006      	b.n	8004808 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689a      	ldr	r2, [r3, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004806:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	2b02      	cmp	r3, #2
 800480e:	d104      	bne.n	800481a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004818:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6859      	ldr	r1, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	4b1d      	ldr	r3, [pc, #116]	; (800489c <HAL_I2C_Init+0x11c>)
 8004826:	430b      	orrs	r3, r1
 8004828:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68da      	ldr	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004838:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69d9      	ldr	r1, [r3, #28]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1a      	ldr	r2, [r3, #32]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3708      	adds	r7, #8
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	02008000 	.word	0x02008000

080048a0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	461a      	mov	r2, r3
 80048ac:	460b      	mov	r3, r1
 80048ae:	817b      	strh	r3, [r7, #10]
 80048b0:	4613      	mov	r3, r2
 80048b2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b20      	cmp	r3, #32
 80048be:	f040 80cd 	bne.w	8004a5c <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699b      	ldr	r3, [r3, #24]
 80048c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d0:	d101      	bne.n	80048d6 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 80048d2:	2302      	movs	r3, #2
 80048d4:	e0c3      	b.n	8004a5e <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d101      	bne.n	80048e4 <HAL_I2C_Master_Transmit_DMA+0x44>
 80048e0:	2302      	movs	r3, #2
 80048e2:	e0bc      	b.n	8004a5e <HAL_I2C_Master_Transmit_DMA+0x1be>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2221      	movs	r2, #33	; 0x21
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2210      	movs	r2, #16
 80048f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	893a      	ldrh	r2, [r7, #8]
 800490c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4a55      	ldr	r2, [pc, #340]	; (8004a68 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8004912:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4a55      	ldr	r2, [pc, #340]	; (8004a6c <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8004918:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491e:	b29b      	uxth	r3, r3
 8004920:	2bff      	cmp	r3, #255	; 0xff
 8004922:	d906      	bls.n	8004932 <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	22ff      	movs	r2, #255	; 0xff
 8004928:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800492a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	e007      	b.n	8004942 <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800493c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004940:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004946:	2b00      	cmp	r3, #0
 8004948:	d070      	beq.n	8004a2c <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	2b00      	cmp	r3, #0
 8004950:	d020      	beq.n	8004994 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004956:	4a46      	ldr	r2, [pc, #280]	; (8004a70 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8004958:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	4a45      	ldr	r2, [pc, #276]	; (8004a74 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8004960:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	2200      	movs	r2, #0
 8004968:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496e:	2200      	movs	r2, #0
 8004970:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3328      	adds	r3, #40	; 0x28
 800497e:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004984:	f7fe f8ce 	bl	8002b24 <HAL_DMA_Start_IT>
 8004988:	4603      	mov	r3, r0
 800498a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d138      	bne.n	8004a04 <HAL_I2C_Master_Transmit_DMA+0x164>
 8004992:	e013      	b.n	80049bc <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e050      	b.n	8004a5e <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	8979      	ldrh	r1, [r7, #10]
 80049c4:	4b2c      	ldr	r3, [pc, #176]	; (8004a78 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f001 fd2a 	bl	8006424 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	b29a      	uxth	r2, r3
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80049ea:	2110      	movs	r1, #16
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f001 fd4b 	bl	8006488 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	e029      	b.n	8004a58 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a18:	f043 0210 	orr.w	r2, r3, #16
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e018      	b.n	8004a5e <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4a13      	ldr	r2, [pc, #76]	; (8004a7c <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8004a30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	8979      	ldrh	r1, [r7, #10]
 8004a3a:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f001 fcee 	bl	8006424 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004a50:	2101      	movs	r1, #1
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f001 fd18 	bl	8006488 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	e000      	b.n	8004a5e <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8004a5c:	2302      	movs	r3, #2
  }
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	ffff0000 	.word	0xffff0000
 8004a6c:	08005555 	.word	0x08005555
 8004a70:	080061c3 	.word	0x080061c3
 8004a74:	08006375 	.word	0x08006375
 8004a78:	80002000 	.word	0x80002000
 8004a7c:	080050ff 	.word	0x080050ff

08004a80 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	607a      	str	r2, [r7, #4]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	817b      	strh	r3, [r7, #10]
 8004a90:	4613      	mov	r3, r2
 8004a92:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	f040 80cd 	bne.w	8004c3c <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab0:	d101      	bne.n	8004ab6 <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e0c3      	b.n	8004c3e <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_I2C_Master_Receive_DMA+0x44>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e0bc      	b.n	8004c3e <HAL_I2C_Master_Receive_DMA+0x1be>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2222      	movs	r2, #34	; 0x22
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2210      	movs	r2, #16
 8004ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	893a      	ldrh	r2, [r7, #8]
 8004aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4a55      	ldr	r2, [pc, #340]	; (8004c48 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8004af2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4a55      	ldr	r2, [pc, #340]	; (8004c4c <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8004af8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2bff      	cmp	r3, #255	; 0xff
 8004b02:	d906      	bls.n	8004b12 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	22ff      	movs	r2, #255	; 0xff
 8004b08:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004b0a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	e007      	b.n	8004b22 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b16:	b29a      	uxth	r2, r3
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004b1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b20:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d070      	beq.n	8004c0c <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d020      	beq.n	8004b74 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b36:	4a46      	ldr	r2, [pc, #280]	; (8004c50 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8004b38:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	4a45      	ldr	r2, [pc, #276]	; (8004c54 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8004b40:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b46:	2200      	movs	r2, #0
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4e:	2200      	movs	r2, #0
 8004b50:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3324      	adds	r3, #36	; 0x24
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004b64:	f7fd ffde 	bl	8002b24 <HAL_DMA_Start_IT>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004b6c:	7cfb      	ldrb	r3, [r7, #19]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d138      	bne.n	8004be4 <HAL_I2C_Master_Receive_DMA+0x164>
 8004b72:	e013      	b.n	8004b9c <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e050      	b.n	8004c3e <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	8979      	ldrh	r1, [r7, #10]
 8004ba4:	4b2c      	ldr	r3, [pc, #176]	; (8004c58 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004ba6:	9300      	str	r3, [sp, #0]
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f001 fc3a 	bl	8006424 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004bca:	2110      	movs	r1, #16
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f001 fc5b 	bl	8006488 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e029      	b.n	8004c38 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf8:	f043 0210 	orr.w	r2, r3, #16
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e018      	b.n	8004c3e <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8004c10:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	8979      	ldrh	r1, [r7, #10]
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f001 fbfe 	bl	8006424 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c30:	2101      	movs	r1, #1
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f001 fc28 	bl	8006488 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e000      	b.n	8004c3e <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8004c3c:	2302      	movs	r3, #2
  }
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	ffff0000 	.word	0xffff0000
 8004c4c:	08005555 	.word	0x08005555
 8004c50:	08006299 	.word	0x08006299
 8004c54:	08006375 	.word	0x08006375
 8004c58:	80002400 	.word	0x80002400
 8004c5c:	080050ff 	.word	0x080050ff

08004c60 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b20      	cmp	r3, #32
 8004c78:	f040 809b 	bne.w	8004db2 <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d105      	bne.n	8004c94 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e08f      	b.n	8004db4 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_I2C_Slave_Transmit_DMA+0x42>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e088      	b.n	8004db4 <HAL_I2C_Slave_Transmit_DMA+0x154>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2221      	movs	r2, #33	; 0x21
 8004cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	88fa      	ldrh	r2, [r7, #6]
 8004cca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	4a38      	ldr	r2, [pc, #224]	; (8004dbc <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 8004cda:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4a38      	ldr	r2, [pc, #224]	; (8004dc0 <HAL_I2C_Slave_Transmit_DMA+0x160>)
 8004ce0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d020      	beq.n	8004d2c <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	4a35      	ldr	r2, [pc, #212]	; (8004dc4 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 8004cf0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	4a34      	ldr	r2, [pc, #208]	; (8004dc8 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 8004cf8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	2200      	movs	r2, #0
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmatx->XferAbortCallback = NULL;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	2200      	movs	r2, #0
 8004d08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d0e:	68b9      	ldr	r1, [r7, #8]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3328      	adds	r3, #40	; 0x28
 8004d16:	461a      	mov	r2, r3
                                       hi2c->XferSize);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8004d1c:	f7fd ff02 	bl	8002b24 <HAL_DMA_Start_IT>
 8004d20:	4603      	mov	r3, r0
 8004d22:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d12f      	bne.n	8004d8a <HAL_I2C_Slave_Transmit_DMA+0x12a>
 8004d2a:	e013      	b.n	8004d54 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2228      	movs	r2, #40	; 0x28
 8004d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e02f      	b.n	8004db4 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d62:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f001 fb89 	bl	8006488 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d84:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	e014      	b.n	8004db4 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2228      	movs	r2, #40	; 0x28
 8004d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	f043 0210 	orr.w	r2, r3, #16
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
  }
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	ffff0000 	.word	0xffff0000
 8004dc0:	0800573b 	.word	0x0800573b
 8004dc4:	08006259 	.word	0x08006259
 8004dc8:	08006375 	.word	0x08006375

08004dcc <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b086      	sub	sp, #24
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	f040 809b 	bne.w	8004f1e <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <HAL_I2C_Slave_Receive_DMA+0x28>
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d105      	bne.n	8004e00 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dfa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e08f      	b.n	8004f20 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_I2C_Slave_Receive_DMA+0x42>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e088      	b.n	8004f20 <HAL_I2C_Slave_Receive_DMA+0x154>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2222      	movs	r2, #34	; 0x22
 8004e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	88fa      	ldrh	r2, [r7, #6]
 8004e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4a38      	ldr	r2, [pc, #224]	; (8004f28 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8004e46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4a38      	ldr	r2, [pc, #224]	; (8004f2c <HAL_I2C_Slave_Receive_DMA+0x160>)
 8004e4c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d020      	beq.n	8004e98 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e5a:	4a35      	ldr	r2, [pc, #212]	; (8004f30 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8004e5c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	4a34      	ldr	r2, [pc, #208]	; (8004f34 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8004e64:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	2200      	movs	r2, #0
 8004e74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3324      	adds	r3, #36	; 0x24
 8004e80:	4619      	mov	r1, r3
 8004e82:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004e88:	f7fd fe4c 	bl	8002b24 <HAL_DMA_Start_IT>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d12f      	bne.n	8004ef6 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8004e96:	e013      	b.n	8004ec0 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2228      	movs	r2, #40	; 0x28
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e02f      	b.n	8004f20 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ece:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f001 fad3 	bl	8006488 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ef0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e014      	b.n	8004f20 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2228      	movs	r2, #40	; 0x28
 8004efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	f043 0210 	orr.w	r2, r3, #16
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e000      	b.n	8004f20 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8004f1e:	2302      	movs	r3, #2
  }
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	ffff0000 	.word	0xffff0000
 8004f2c:	0800573b 	.word	0x0800573b
 8004f30:	0800632f 	.word	0x0800632f
 8004f34:	08006375 	.word	0x08006375

08004f38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	68f9      	ldr	r1, [r7, #12]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	4798      	blx	r3
  }
}
 8004f64:	bf00      	nop
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	0a1b      	lsrs	r3, r3, #8
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	09db      	lsrs	r3, r3, #7
 8004f94:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00a      	beq.n	8004fb2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fa0:	f043 0201 	orr.w	r2, r3, #1
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fb0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	0a9b      	lsrs	r3, r3, #10
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d010      	beq.n	8004fe0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	09db      	lsrs	r3, r3, #7
 8004fc2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	f043 0208 	orr.w	r2, r3, #8
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fde:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	0a5b      	lsrs	r3, r3, #9
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d010      	beq.n	800500e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	09db      	lsrs	r3, r3, #7
 8004ff0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffc:	f043 0202 	orr.w	r2, r3, #2
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800500c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f003 030b 	and.w	r3, r3, #11
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800501e:	68f9      	ldr	r1, [r7, #12]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 ffb3 	bl	8005f8c <I2C_ITError>
  }
}
 8005026:	bf00      	nop
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	70fb      	strb	r3, [r7, #3]
 800508a:	4613      	mov	r3, r2
 800508c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b083      	sub	sp, #12
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80050ca:	bf00      	nop
 80050cc:	370c      	adds	r7, #12
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80050de:	bf00      	nop
 80050e0:	370c      	adds	r7, #12
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b083      	sub	sp, #12
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b088      	sub	sp, #32
 8005102:	af02      	add	r7, sp, #8
 8005104:	60f8      	str	r0, [r7, #12]
 8005106:	60b9      	str	r1, [r7, #8]
 8005108:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <I2C_Master_ISR_IT+0x1e>
 8005118:	2302      	movs	r3, #2
 800511a:	e114      	b.n	8005346 <I2C_Master_ISR_IT+0x248>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	091b      	lsrs	r3, r3, #4
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d013      	beq.n	8005158 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	091b      	lsrs	r3, r3, #4
 8005134:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00d      	beq.n	8005158 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2210      	movs	r2, #16
 8005142:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005148:	f043 0204 	orr.w	r2, r3, #4
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f001 f812 	bl	800617a <I2C_Flush_TXDR>
 8005156:	e0e1      	b.n	800531c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	089b      	lsrs	r3, r3, #2
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d023      	beq.n	80051ac <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	089b      	lsrs	r3, r3, #2
 8005168:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01d      	beq.n	80051ac <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f023 0304 	bic.w	r3, r3, #4
 8005176:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051aa:	e0b7      	b.n	800531c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	085b      	lsrs	r3, r3, #1
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01e      	beq.n	80051f6 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d018      	beq.n	80051f6 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	781a      	ldrb	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	1c5a      	adds	r2, r3, #1
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051de:	3b01      	subs	r3, #1
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	3b01      	subs	r3, #1
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f4:	e092      	b.n	800531c <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	09db      	lsrs	r3, r3, #7
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d05d      	beq.n	80052be <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800520a:	2b00      	cmp	r3, #0
 800520c:	d057      	beq.n	80052be <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d040      	beq.n	800529a <I2C_Master_ISR_IT+0x19c>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	2b00      	cmp	r3, #0
 800521e:	d13c      	bne.n	800529a <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	b29b      	uxth	r3, r3
 8005228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800522c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005232:	b29b      	uxth	r3, r3
 8005234:	2bff      	cmp	r3, #255	; 0xff
 8005236:	d90e      	bls.n	8005256 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	22ff      	movs	r2, #255	; 0xff
 800523c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005242:	b2da      	uxtb	r2, r3
 8005244:	8a79      	ldrh	r1, [r7, #18]
 8005246:	2300      	movs	r3, #0
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f001 f8e8 	bl	8006424 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005254:	e032      	b.n	80052bc <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005268:	d00b      	beq.n	8005282 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526e:	b2da      	uxtb	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	8a79      	ldrh	r1, [r7, #18]
 8005276:	2000      	movs	r0, #0
 8005278:	9000      	str	r0, [sp, #0]
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f001 f8d2 	bl	8006424 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005280:	e01c      	b.n	80052bc <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	b2da      	uxtb	r2, r3
 8005288:	8a79      	ldrh	r1, [r7, #18]
 800528a:	2300      	movs	r3, #0
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f001 f8c6 	bl	8006424 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005298:	e010      	b.n	80052bc <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052a8:	d003      	beq.n	80052b2 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fba9 	bl	8005a02 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052b0:	e034      	b.n	800531c <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80052b2:	2140      	movs	r1, #64	; 0x40
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fe69 	bl	8005f8c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052ba:	e02f      	b.n	800531c <I2C_Master_ISR_IT+0x21e>
 80052bc:	e02e      	b.n	800531c <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	099b      	lsrs	r3, r3, #6
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d028      	beq.n	800531c <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	099b      	lsrs	r3, r3, #6
 80052ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d022      	beq.n	800531c <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052da:	b29b      	uxth	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d119      	bne.n	8005314 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ee:	d015      	beq.n	800531c <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052f8:	d108      	bne.n	800530c <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005308:	605a      	str	r2, [r3, #4]
 800530a:	e007      	b.n	800531c <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 fb78 	bl	8005a02 <I2C_ITMasterSeqCplt>
 8005312:	e003      	b.n	800531c <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005314:	2140      	movs	r1, #64	; 0x40
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fe38 	bl	8005f8c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	095b      	lsrs	r3, r3, #5
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b00      	cmp	r3, #0
 8005326:	d009      	beq.n	800533c <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005334:	6979      	ldr	r1, [r7, #20]
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 fbfe 	bl	8005b38 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3718      	adds	r7, #24
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b086      	sub	sp, #24
 8005352:	af00      	add	r7, sp, #0
 8005354:	60f8      	str	r0, [r7, #12]
 8005356:	60b9      	str	r1, [r7, #8]
 8005358:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800536a:	2b01      	cmp	r3, #1
 800536c:	d101      	bne.n	8005372 <I2C_Slave_ISR_IT+0x24>
 800536e:	2302      	movs	r3, #2
 8005370:	e0ec      	b.n	800554c <I2C_Slave_ISR_IT+0x1fe>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005392:	6939      	ldr	r1, [r7, #16]
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f000 fc99 	bl	8005ccc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d04d      	beq.n	8005442 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	091b      	lsrs	r3, r3, #4
 80053aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d047      	beq.n	8005442 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d128      	bne.n	800540e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b28      	cmp	r3, #40	; 0x28
 80053c6:	d108      	bne.n	80053da <I2C_Slave_ISR_IT+0x8c>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053ce:	d104      	bne.n	80053da <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80053d0:	6939      	ldr	r1, [r7, #16]
 80053d2:	68f8      	ldr	r0, [r7, #12]
 80053d4:	f000 fd84 	bl	8005ee0 <I2C_ITListenCplt>
 80053d8:	e032      	b.n	8005440 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b29      	cmp	r3, #41	; 0x29
 80053e4:	d10e      	bne.n	8005404 <I2C_Slave_ISR_IT+0xb6>
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053ec:	d00a      	beq.n	8005404 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2210      	movs	r2, #16
 80053f4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 febf 	bl	800617a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80053fc:	68f8      	ldr	r0, [r7, #12]
 80053fe:	f000 fb3d 	bl	8005a7c <I2C_ITSlaveSeqCplt>
 8005402:	e01d      	b.n	8005440 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2210      	movs	r2, #16
 800540a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800540c:	e096      	b.n	800553c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2210      	movs	r2, #16
 8005414:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541a:	f043 0204 	orr.w	r2, r3, #4
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d004      	beq.n	8005432 <I2C_Slave_ISR_IT+0xe4>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800542e:	f040 8085 	bne.w	800553c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005436:	4619      	mov	r1, r3
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fda7 	bl	8005f8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800543e:	e07d      	b.n	800553c <I2C_Slave_ISR_IT+0x1ee>
 8005440:	e07c      	b.n	800553c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	089b      	lsrs	r3, r3, #2
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d030      	beq.n	80054b0 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	089b      	lsrs	r3, r3, #2
 8005452:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005456:	2b00      	cmp	r3, #0
 8005458:	d02a      	beq.n	80054b0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d018      	beq.n	8005496 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d14f      	bne.n	8005540 <I2C_Slave_ISR_IT+0x1f2>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054a6:	d04b      	beq.n	8005540 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fae7 	bl	8005a7c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80054ae:	e047      	b.n	8005540 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	08db      	lsrs	r3, r3, #3
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00a      	beq.n	80054d2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	08db      	lsrs	r3, r3, #3
 80054c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d004      	beq.n	80054d2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80054c8:	6939      	ldr	r1, [r7, #16]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	f000 fa15 	bl	80058fa <I2C_ITAddrCplt>
 80054d0:	e037      	b.n	8005542 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	085b      	lsrs	r3, r3, #1
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d031      	beq.n	8005542 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d02b      	beq.n	8005542 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d018      	beq.n	8005526 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	781a      	ldrb	r2, [r3, #0]
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800551c:	3b01      	subs	r3, #1
 800551e:	b29a      	uxth	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	851a      	strh	r2, [r3, #40]	; 0x28
 8005524:	e00d      	b.n	8005542 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800552c:	d002      	beq.n	8005534 <I2C_Slave_ISR_IT+0x1e6>
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d106      	bne.n	8005542 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 faa1 	bl	8005a7c <I2C_ITSlaveSeqCplt>
 800553a:	e002      	b.n	8005542 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800553c:	bf00      	nop
 800553e:	e000      	b.n	8005542 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005540:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af02      	add	r7, sp, #8
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <I2C_Master_ISR_DMA+0x1a>
 800556a:	2302      	movs	r3, #2
 800556c:	e0e1      	b.n	8005732 <I2C_Master_ISR_DMA+0x1de>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d017      	beq.n	80055b2 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800558a:	2b00      	cmp	r3, #0
 800558c:	d011      	beq.n	80055b2 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2210      	movs	r2, #16
 8005594:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559a:	f043 0204 	orr.w	r2, r3, #4
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80055a2:	2120      	movs	r1, #32
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 ff6f 	bl	8006488 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fde5 	bl	800617a <I2C_Flush_TXDR>
 80055b0:	e0ba      	b.n	8005728 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	09db      	lsrs	r3, r3, #7
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d072      	beq.n	80056a4 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	099b      	lsrs	r3, r3, #6
 80055c2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d06c      	beq.n	80056a4 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d04e      	beq.n	8005682 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2bff      	cmp	r3, #255	; 0xff
 80055fa:	d906      	bls.n	800560a <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	22ff      	movs	r2, #255	; 0xff
 8005600:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8005602:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e010      	b.n	800562c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800560e:	b29a      	uxth	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800561c:	d003      	beq.n	8005626 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e002      	b.n	800562c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005626:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800562a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005630:	b2da      	uxtb	r2, r3
 8005632:	8a79      	ldrh	r1, [r7, #18]
 8005634:	2300      	movs	r3, #0
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fef2 	bl	8006424 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b22      	cmp	r3, #34	; 0x22
 800565c:	d108      	bne.n	8005670 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800566c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800566e:	e05b      	b.n	8005728 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800567e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005680:	e052      	b.n	8005728 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005690:	d003      	beq.n	800569a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 f9b5 	bl	8005a02 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005698:	e046      	b.n	8005728 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800569a:	2140      	movs	r1, #64	; 0x40
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 fc75 	bl	8005f8c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80056a2:	e041      	b.n	8005728 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	099b      	lsrs	r3, r3, #6
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d029      	beq.n	8005704 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	099b      	lsrs	r3, r3, #6
 80056b4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d023      	beq.n	8005704 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d119      	bne.n	80056fa <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056d4:	d027      	beq.n	8005726 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80056de:	d108      	bne.n	80056f2 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056ee:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80056f0:	e019      	b.n	8005726 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f000 f985 	bl	8005a02 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80056f8:	e015      	b.n	8005726 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80056fa:	2140      	movs	r1, #64	; 0x40
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f000 fc45 	bl	8005f8c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005702:	e010      	b.n	8005726 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00b      	beq.n	8005728 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	095b      	lsrs	r3, r3, #5
 8005714:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	f000 fa0a 	bl	8005b38 <I2C_ITMasterCplt>
 8005724:	e000      	b.n	8005728 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8005726:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b088      	sub	sp, #32
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005756:	2b01      	cmp	r3, #1
 8005758:	d101      	bne.n	800575e <I2C_Slave_ISR_DMA+0x24>
 800575a:	2302      	movs	r3, #2
 800575c:	e0c9      	b.n	80058f2 <I2C_Slave_ISR_DMA+0x1b8>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d009      	beq.n	8005786 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	095b      	lsrs	r3, r3, #5
 8005776:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800577e:	68b9      	ldr	r1, [r7, #8]
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 faa3 	bl	8005ccc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	091b      	lsrs	r3, r3, #4
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 809a 	beq.w	80058c8 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	091b      	lsrs	r3, r3, #4
 8005798:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800579c:	2b00      	cmp	r3, #0
 800579e:	f000 8093 	beq.w	80058c8 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	0b9b      	lsrs	r3, r3, #14
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	0bdb      	lsrs	r3, r3, #15
 80057b2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d07f      	beq.n	80058ba <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00d      	beq.n	80057de <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	0bdb      	lsrs	r3, r3, #15
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80057da:	2301      	movs	r3, #1
 80057dc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00d      	beq.n	8005802 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	0b9b      	lsrs	r3, r3, #14
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d007      	beq.n	8005802 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80057fe:	2301      	movs	r3, #1
 8005800:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d128      	bne.n	800585a <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b28      	cmp	r3, #40	; 0x28
 8005812:	d108      	bne.n	8005826 <I2C_Slave_ISR_DMA+0xec>
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800581a:	d104      	bne.n	8005826 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f000 fb5e 	bl	8005ee0 <I2C_ITListenCplt>
 8005824:	e048      	b.n	80058b8 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b29      	cmp	r3, #41	; 0x29
 8005830:	d10e      	bne.n	8005850 <I2C_Slave_ISR_DMA+0x116>
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005838:	d00a      	beq.n	8005850 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2210      	movs	r2, #16
 8005840:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f000 fc99 	bl	800617a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f917 	bl	8005a7c <I2C_ITSlaveSeqCplt>
 800584e:	e033      	b.n	80058b8 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2210      	movs	r2, #16
 8005856:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005858:	e034      	b.n	80058c4 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	2210      	movs	r2, #16
 8005860:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005866:	f043 0204 	orr.w	r2, r3, #4
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005874:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <I2C_Slave_ISR_DMA+0x14a>
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005882:	d11f      	bne.n	80058c4 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005884:	7dfb      	ldrb	r3, [r7, #23]
 8005886:	2b21      	cmp	r3, #33	; 0x21
 8005888:	d002      	beq.n	8005890 <I2C_Slave_ISR_DMA+0x156>
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	2b29      	cmp	r3, #41	; 0x29
 800588e:	d103      	bne.n	8005898 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2221      	movs	r2, #33	; 0x21
 8005894:	631a      	str	r2, [r3, #48]	; 0x30
 8005896:	e008      	b.n	80058aa <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005898:	7dfb      	ldrb	r3, [r7, #23]
 800589a:	2b22      	cmp	r3, #34	; 0x22
 800589c:	d002      	beq.n	80058a4 <I2C_Slave_ISR_DMA+0x16a>
 800589e:	7dfb      	ldrb	r3, [r7, #23]
 80058a0:	2b2a      	cmp	r3, #42	; 0x2a
 80058a2:	d102      	bne.n	80058aa <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2222      	movs	r2, #34	; 0x22
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ae:	4619      	mov	r1, r3
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 fb6b 	bl	8005f8c <I2C_ITError>
      if (treatdmanack == 1U)
 80058b6:	e005      	b.n	80058c4 <I2C_Slave_ISR_DMA+0x18a>
 80058b8:	e004      	b.n	80058c4 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2210      	movs	r2, #16
 80058c0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80058c2:	e011      	b.n	80058e8 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80058c4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80058c6:	e00f      	b.n	80058e8 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	08db      	lsrs	r3, r3, #3
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d009      	beq.n	80058e8 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	08db      	lsrs	r3, r3, #3
 80058d8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f809 	bl	80058fa <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3720      	adds	r7, #32
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800590a:	b2db      	uxtb	r3, r3
 800590c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005910:	2b28      	cmp	r3, #40	; 0x28
 8005912:	d16a      	bne.n	80059ea <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	0c1b      	lsrs	r3, r3, #16
 800591c:	b2db      	uxtb	r3, r3
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	0c1b      	lsrs	r3, r3, #16
 800592c:	b29b      	uxth	r3, r3
 800592e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005932:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	b29b      	uxth	r3, r3
 800593c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005940:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	b29b      	uxth	r3, r3
 800594a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800594e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d138      	bne.n	80059ca <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005958:	897b      	ldrh	r3, [r7, #10]
 800595a:	09db      	lsrs	r3, r3, #7
 800595c:	b29a      	uxth	r2, r3
 800595e:	89bb      	ldrh	r3, [r7, #12]
 8005960:	4053      	eors	r3, r2
 8005962:	b29b      	uxth	r3, r3
 8005964:	f003 0306 	and.w	r3, r3, #6
 8005968:	2b00      	cmp	r3, #0
 800596a:	d11c      	bne.n	80059a6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800596c:	897b      	ldrh	r3, [r7, #10]
 800596e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800597e:	2b02      	cmp	r3, #2
 8005980:	d13b      	bne.n	80059fa <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2208      	movs	r2, #8
 800598e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005998:	89ba      	ldrh	r2, [r7, #12]
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f7ff fb6d 	bl	800507e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80059a4:	e029      	b.n	80059fa <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80059a6:	893b      	ldrh	r3, [r7, #8]
 80059a8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80059aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fdd4 	bl	800655c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80059bc:	89ba      	ldrh	r2, [r7, #12]
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	4619      	mov	r1, r3
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff fb5b 	bl	800507e <HAL_I2C_AddrCallback>
}
 80059c8:	e017      	b.n	80059fa <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80059ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fdc4 	bl	800655c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80059dc:	89ba      	ldrh	r2, [r7, #12]
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f7ff fb4b 	bl	800507e <HAL_I2C_AddrCallback>
}
 80059e8:	e007      	b.n	80059fa <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2208      	movs	r2, #8
 80059f0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b21      	cmp	r3, #33	; 0x21
 8005a1c:	d115      	bne.n	8005a4a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2220      	movs	r2, #32
 8005a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2211      	movs	r2, #17
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a32:	2101      	movs	r1, #1
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fd91 	bl	800655c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff faf3 	bl	800502e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a48:	e014      	b.n	8005a74 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2212      	movs	r2, #18
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005a5e:	2102      	movs	r1, #2
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fd7b 	bl	800655c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f7ff fae7 	bl	8005042 <HAL_I2C_MasterRxCpltCallback>
}
 8005a74:	bf00      	nop
 8005a76:	3708      	adds	r7, #8
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b084      	sub	sp, #16
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	0b9b      	lsrs	r3, r3, #14
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d008      	beq.n	8005ab2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	e00d      	b.n	8005ace <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	0bdb      	lsrs	r3, r3, #15
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d007      	beq.n	8005ace <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005acc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b29      	cmp	r3, #41	; 0x29
 8005ad8:	d112      	bne.n	8005b00 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2228      	movs	r2, #40	; 0x28
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2221      	movs	r2, #33	; 0x21
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ae8:	2101      	movs	r1, #1
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fd36 	bl	800655c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff faac 	bl	8005056 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005afe:	e017      	b.n	8005b30 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0a:	d111      	bne.n	8005b30 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2228      	movs	r2, #40	; 0x28
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2222      	movs	r2, #34	; 0x22
 8005b18:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005b1a:	2102      	movs	r1, #2
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fd1d 	bl	800655c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff fa9d 	bl	800506a <HAL_I2C_SlaveRxCpltCallback>
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2220      	movs	r2, #32
 8005b4c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b21      	cmp	r3, #33	; 0x21
 8005b58:	d107      	bne.n	8005b6a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 fcfd 	bl	800655c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2211      	movs	r2, #17
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
 8005b68:	e00c      	b.n	8005b84 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b22      	cmp	r3, #34	; 0x22
 8005b74:	d106      	bne.n	8005b84 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005b76:	2102      	movs	r1, #2
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fcef 	bl	800655c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2212      	movs	r2, #18
 8005b82:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6859      	ldr	r1, [r3, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4b4d      	ldr	r3, [pc, #308]	; (8005cc4 <I2C_ITMasterCplt+0x18c>)
 8005b90:	400b      	ands	r3, r1
 8005b92:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a4a      	ldr	r2, [pc, #296]	; (8005cc8 <I2C_ITMasterCplt+0x190>)
 8005b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	091b      	lsrs	r3, r3, #4
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d009      	beq.n	8005bc0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2210      	movs	r2, #16
 8005bb2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb8:	f043 0204 	orr.w	r2, r3, #4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b60      	cmp	r3, #96	; 0x60
 8005bca:	d10b      	bne.n	8005be4 <I2C_ITMasterCplt+0xac>
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005be2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 fac8 	bl	800617a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bee:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b60      	cmp	r3, #96	; 0x60
 8005bfa:	d002      	beq.n	8005c02 <I2C_ITMasterCplt+0xca>
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d006      	beq.n	8005c10 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c06:	4619      	mov	r1, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f9bf 	bl	8005f8c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c0e:	e054      	b.n	8005cba <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b21      	cmp	r3, #33	; 0x21
 8005c1a:	d124      	bne.n	8005c66 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b40      	cmp	r3, #64	; 0x40
 8005c34:	d10b      	bne.n	8005c4e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7ff fa31 	bl	80050ae <HAL_I2C_MemTxCpltCallback>
}
 8005c4c:	e035      	b.n	8005cba <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f7ff f9e5 	bl	800502e <HAL_I2C_MasterTxCpltCallback>
}
 8005c64:	e029      	b.n	8005cba <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b22      	cmp	r3, #34	; 0x22
 8005c70:	d123      	bne.n	8005cba <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b40      	cmp	r3, #64	; 0x40
 8005c8a:	d10b      	bne.n	8005ca4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff fa10 	bl	80050c2 <HAL_I2C_MemRxCpltCallback>
}
 8005ca2:	e00a      	b.n	8005cba <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff f9c4 	bl	8005042 <HAL_I2C_MasterRxCpltCallback>
}
 8005cba:	bf00      	nop
 8005cbc:	3718      	adds	r7, #24
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	fe00e800 	.word	0xfe00e800
 8005cc8:	ffff0000 	.word	0xffff0000

08005ccc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ce8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
 8005cf4:	2b21      	cmp	r3, #33	; 0x21
 8005cf6:	d002      	beq.n	8005cfe <I2C_ITSlaveCplt+0x32>
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	2b29      	cmp	r3, #41	; 0x29
 8005cfc:	d108      	bne.n	8005d10 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005cfe:	f248 0101 	movw	r1, #32769	; 0x8001
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 fc2a 	bl	800655c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2221      	movs	r2, #33	; 0x21
 8005d0c:	631a      	str	r2, [r3, #48]	; 0x30
 8005d0e:	e00d      	b.n	8005d2c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
 8005d12:	2b22      	cmp	r3, #34	; 0x22
 8005d14:	d002      	beq.n	8005d1c <I2C_ITSlaveCplt+0x50>
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	2b2a      	cmp	r3, #42	; 0x2a
 8005d1a:	d107      	bne.n	8005d2c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005d1c:	f248 0102 	movw	r1, #32770	; 0x8002
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 fc1b 	bl	800655c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2222      	movs	r2, #34	; 0x22
 8005d2a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685a      	ldr	r2, [r3, #4]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d3a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6859      	ldr	r1, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	4b64      	ldr	r3, [pc, #400]	; (8005ed8 <I2C_ITSlaveCplt+0x20c>)
 8005d48:	400b      	ands	r3, r1
 8005d4a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fa14 	bl	800617a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	0b9b      	lsrs	r3, r3, #14
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d013      	beq.n	8005d86 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d6c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d020      	beq.n	8005db8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d84:	e018      	b.n	8005db8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	0bdb      	lsrs	r3, r3, #15
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d012      	beq.n	8005db8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005da0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d006      	beq.n	8005db8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	089b      	lsrs	r3, r3, #2
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d020      	beq.n	8005e06 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f023 0304 	bic.w	r3, r3, #4
 8005dca:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00c      	beq.n	8005e06 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d005      	beq.n	8005e1c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e14:	f043 0204 	orr.w	r2, r3, #4
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d010      	beq.n	8005e54 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8a7 	bl	8005f8c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b28      	cmp	r3, #40	; 0x28
 8005e48:	d141      	bne.n	8005ece <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005e4a:	6979      	ldr	r1, [r7, #20]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f847 	bl	8005ee0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e52:	e03c      	b.n	8005ece <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e5c:	d014      	beq.n	8005e88 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f7ff fe0c 	bl	8005a7c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a1d      	ldr	r2, [pc, #116]	; (8005edc <I2C_ITSlaveCplt+0x210>)
 8005e68:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f7ff f90a 	bl	800509a <HAL_I2C_ListenCpltCallback>
}
 8005e86:	e022      	b.n	8005ece <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b22      	cmp	r3, #34	; 0x22
 8005e92:	d10e      	bne.n	8005eb2 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f7ff f8dd 	bl	800506a <HAL_I2C_SlaveRxCpltCallback>
}
 8005eb0:	e00d      	b.n	8005ece <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2220      	movs	r2, #32
 8005eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff f8c4 	bl	8005056 <HAL_I2C_SlaveTxCpltCallback>
}
 8005ece:	bf00      	nop
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	fe00e800 	.word	0xfe00e800
 8005edc:	ffff0000 	.word	0xffff0000

08005ee0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a26      	ldr	r2, [pc, #152]	; (8005f88 <I2C_ITListenCplt+0xa8>)
 8005eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	089b      	lsrs	r3, r3, #2
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d022      	beq.n	8005f5e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	b2d2      	uxtb	r2, r2
 8005f24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d012      	beq.n	8005f5e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	b29a      	uxth	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f56:	f043 0204 	orr.w	r2, r3, #4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f5e:	f248 0103 	movw	r1, #32771	; 0x8003
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fafa 	bl	800655c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2210      	movs	r2, #16
 8005f6e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f7ff f88e 	bl	800509a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	ffff0000 	.word	0xffff0000

08005f8c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a5d      	ldr	r2, [pc, #372]	; (8006120 <I2C_ITError+0x194>)
 8005faa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	431a      	orrs	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	2b28      	cmp	r3, #40	; 0x28
 8005fc2:	d005      	beq.n	8005fd0 <I2C_ITError+0x44>
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b29      	cmp	r3, #41	; 0x29
 8005fc8:	d002      	beq.n	8005fd0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8005fce:	d10b      	bne.n	8005fe8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fd0:	2103      	movs	r1, #3
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fac2 	bl	800655c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2228      	movs	r2, #40	; 0x28
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a50      	ldr	r2, [pc, #320]	; (8006124 <I2C_ITError+0x198>)
 8005fe4:	635a      	str	r2, [r3, #52]	; 0x34
 8005fe6:	e011      	b.n	800600c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005fe8:	f248 0103 	movw	r1, #32771	; 0x8003
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 fab5 	bl	800655c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b60      	cmp	r3, #96	; 0x60
 8005ffc:	d003      	beq.n	8006006 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006010:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	2b00      	cmp	r3, #0
 8006018:	d039      	beq.n	800608e <I2C_ITError+0x102>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b11      	cmp	r3, #17
 800601e:	d002      	beq.n	8006026 <I2C_ITError+0x9a>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b21      	cmp	r3, #33	; 0x21
 8006024:	d133      	bne.n	800608e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006034:	d107      	bne.n	8006046 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006044:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604a:	4618      	mov	r0, r3
 800604c:	f7fc ffe6 	bl	800301c <HAL_DMA_GetState>
 8006050:	4603      	mov	r3, r0
 8006052:	2b01      	cmp	r3, #1
 8006054:	d017      	beq.n	8006086 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605a:	4a33      	ldr	r2, [pc, #204]	; (8006128 <I2C_ITError+0x19c>)
 800605c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	4618      	mov	r0, r3
 800606c:	f7fc fe2a 	bl	8002cc4 <HAL_DMA_Abort_IT>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d04d      	beq.n	8006112 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006080:	4610      	mov	r0, r2
 8006082:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006084:	e045      	b.n	8006112 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f850 	bl	800612c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800608c:	e041      	b.n	8006112 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006092:	2b00      	cmp	r3, #0
 8006094:	d039      	beq.n	800610a <I2C_ITError+0x17e>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b12      	cmp	r3, #18
 800609a:	d002      	beq.n	80060a2 <I2C_ITError+0x116>
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b22      	cmp	r3, #34	; 0x22
 80060a0:	d133      	bne.n	800610a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b0:	d107      	bne.n	80060c2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060c0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fc ffa8 	bl	800301c <HAL_DMA_GetState>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d017      	beq.n	8006102 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d6:	4a14      	ldr	r2, [pc, #80]	; (8006128 <I2C_ITError+0x19c>)
 80060d8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fc fdec 	bl	8002cc4 <HAL_DMA_Abort_IT>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d011      	beq.n	8006116 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060fc:	4610      	mov	r0, r2
 80060fe:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006100:	e009      	b.n	8006116 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f812 	bl	800612c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006108:	e005      	b.n	8006116 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f80e 	bl	800612c <I2C_TreatErrorCallback>
  }
}
 8006110:	e002      	b.n	8006118 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006112:	bf00      	nop
 8006114:	e000      	b.n	8006118 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006116:	bf00      	nop
}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	ffff0000 	.word	0xffff0000
 8006124:	0800534f 	.word	0x0800534f
 8006128:	080063e9 	.word	0x080063e9

0800612c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b60      	cmp	r3, #96	; 0x60
 800613e:	d10e      	bne.n	800615e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fe ffc7 	bl	80050ea <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800615c:	e009      	b.n	8006172 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f7fe ffb2 	bl	80050d6 <HAL_I2C_ErrorCallback>
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b02      	cmp	r3, #2
 800618e:	d103      	bne.n	8006198 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2200      	movs	r2, #0
 8006196:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	f003 0301 	and.w	r3, r3, #1
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d007      	beq.n	80061b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	699a      	ldr	r2, [r3, #24]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f042 0201 	orr.w	r2, r2, #1
 80061b4:	619a      	str	r2, [r3, #24]
  }
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061de:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d104      	bne.n	80061f4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80061ea:	2120      	movs	r1, #32
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 f94b 	bl	8006488 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80061f2:	e02d      	b.n	8006250 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80061fc:	441a      	add	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	2bff      	cmp	r3, #255	; 0xff
 800620a:	d903      	bls.n	8006214 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	22ff      	movs	r2, #255	; 0xff
 8006210:	851a      	strh	r2, [r3, #40]	; 0x28
 8006212:	e004      	b.n	800621e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006218:	b29a      	uxth	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	4619      	mov	r1, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3328      	adds	r3, #40	; 0x28
 800622e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8006234:	f7fc fc76 	bl	8002b24 <HAL_DMA_Start_IT>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d004      	beq.n	8006248 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800623e:	2110      	movs	r1, #16
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7ff fea3 	bl	8005f8c <I2C_ITError>
}
 8006246:	e003      	b.n	8006250 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8006248:	2140      	movs	r1, #64	; 0x40
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 f91c 	bl	8006488 <I2C_Enable_IRQ>
}
 8006250:	bf00      	nop
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006264:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006272:	d002      	beq.n	800627a <I2C_DMASlaveTransmitCplt+0x22>
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10a      	bne.n	8006290 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006288:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f7ff fbf6 	bl	8005a7c <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8006290:	bf00      	nop
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062b4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d104      	bne.n	80062ca <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80062c0:	2120      	movs	r1, #32
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 f8e0 	bl	8006488 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80062c8:	e02d      	b.n	8006326 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80062d2:	441a      	add	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	2bff      	cmp	r3, #255	; 0xff
 80062e0:	d903      	bls.n	80062ea <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	22ff      	movs	r2, #255	; 0xff
 80062e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80062e8:	e004      	b.n	80062f4 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	3324      	adds	r3, #36	; 0x24
 80062fe:	4619      	mov	r1, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006304:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800630a:	f7fc fc0b 	bl	8002b24 <HAL_DMA_Start_IT>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d004      	beq.n	800631e <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8006314:	2110      	movs	r1, #16
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f7ff fe38 	bl	8005f8c <I2C_ITError>
}
 800631c:	e003      	b.n	8006326 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800631e:	2140      	movs	r1, #64	; 0x40
 8006320:	68f8      	ldr	r0, [r7, #12]
 8006322:	f000 f8b1 	bl	8006488 <I2C_Enable_IRQ>
}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800633a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10e      	bne.n	800636c <I2C_DMASlaveReceiveCplt+0x3e>
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006354:	d00a      	beq.n	800636c <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006364:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff fb88 	bl	8005a7c <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800638a:	2b00      	cmp	r3, #0
 800638c:	d007      	beq.n	800639e <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800639a:	2301      	movs	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80063b2:	2301      	movs	r3, #1
 80063b4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fc fe3e 	bl	8003038 <HAL_DMA_GetError>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d00e      	beq.n	80063e0 <I2C_DMAError+0x6c>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063d6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80063d8:	2110      	movs	r1, #16
 80063da:	68b8      	ldr	r0, [r7, #8]
 80063dc:	f7ff fdd6 	bl	8005f8c <I2C_ITError>
  }
}
 80063e0:	bf00      	nop
 80063e2:	3710      	adds	r7, #16
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	2200      	movs	r2, #0
 8006404:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640a:	2b00      	cmp	r3, #0
 800640c:	d003      	beq.n	8006416 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006412:	2200      	movs	r2, #0
 8006414:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff fe88 	bl	800612c <I2C_TreatErrorCallback>
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	817b      	strh	r3, [r7, #10]
 8006432:	4613      	mov	r3, r2
 8006434:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006436:	897b      	ldrh	r3, [r7, #10]
 8006438:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800643c:	7a7b      	ldrb	r3, [r7, #9]
 800643e:	041b      	lsls	r3, r3, #16
 8006440:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006444:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	4313      	orrs	r3, r2
 800644e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006452:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	6a3b      	ldr	r3, [r7, #32]
 800645c:	0d5b      	lsrs	r3, r3, #21
 800645e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006462:	4b08      	ldr	r3, [pc, #32]	; (8006484 <I2C_TransferConfig+0x60>)
 8006464:	430b      	orrs	r3, r1
 8006466:	43db      	mvns	r3, r3
 8006468:	ea02 0103 	and.w	r1, r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	03ff63ff 	.word	0x03ff63ff

08006488 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800649c:	4a2d      	ldr	r2, [pc, #180]	; (8006554 <I2C_Enable_IRQ+0xcc>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d004      	beq.n	80064ac <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80064a6:	4a2c      	ldr	r2, [pc, #176]	; (8006558 <I2C_Enable_IRQ+0xd0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d11d      	bne.n	80064e8 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80064ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	da03      	bge.n	80064bc <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80064ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80064bc:	887b      	ldrh	r3, [r7, #2]
 80064be:	2b10      	cmp	r3, #16
 80064c0:	d103      	bne.n	80064ca <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80064c8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80064ca:	887b      	ldrh	r3, [r7, #2]
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d103      	bne.n	80064d8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80064d6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80064d8:	887b      	ldrh	r3, [r7, #2]
 80064da:	2b40      	cmp	r3, #64	; 0x40
 80064dc:	d12c      	bne.n	8006538 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80064e6:	e027      	b.n	8006538 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80064e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	da03      	bge.n	80064f8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80064f6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80064f8:	887b      	ldrh	r3, [r7, #2]
 80064fa:	f003 0301 	and.w	r3, r3, #1
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006508:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800650a:	887b      	ldrh	r3, [r7, #2]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800651a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800651c:	887b      	ldrh	r3, [r7, #2]
 800651e:	2b10      	cmp	r3, #16
 8006520:	d103      	bne.n	800652a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006528:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800652a:	887b      	ldrh	r3, [r7, #2]
 800652c:	2b20      	cmp	r3, #32
 800652e:	d103      	bne.n	8006538 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f043 0320 	orr.w	r3, r3, #32
 8006536:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6819      	ldr	r1, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	430a      	orrs	r2, r1
 8006546:	601a      	str	r2, [r3, #0]
}
 8006548:	bf00      	nop
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	08005555 	.word	0x08005555
 8006558:	0800573b 	.word	0x0800573b

0800655c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800656c:	887b      	ldrh	r3, [r7, #2]
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00f      	beq.n	8006596 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800657c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006584:	b2db      	uxtb	r3, r3
 8006586:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800658a:	2b28      	cmp	r3, #40	; 0x28
 800658c:	d003      	beq.n	8006596 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006594:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006596:	887b      	ldrh	r3, [r7, #2]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00f      	beq.n	80065c0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80065a6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065b4:	2b28      	cmp	r3, #40	; 0x28
 80065b6:	d003      	beq.n	80065c0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80065be:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80065c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	da03      	bge.n	80065d0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80065ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80065d0:	887b      	ldrh	r3, [r7, #2]
 80065d2:	2b10      	cmp	r3, #16
 80065d4:	d103      	bne.n	80065de <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80065dc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80065de:	887b      	ldrh	r3, [r7, #2]
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d103      	bne.n	80065ec <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f043 0320 	orr.w	r3, r3, #32
 80065ea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80065ec:	887b      	ldrh	r3, [r7, #2]
 80065ee:	2b40      	cmp	r3, #64	; 0x40
 80065f0:	d103      	bne.n	80065fa <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6819      	ldr	r1, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	43da      	mvns	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	400a      	ands	r2, r1
 800660a:	601a      	str	r2, [r3, #0]
}
 800660c:	bf00      	nop
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b20      	cmp	r3, #32
 800662c:	d138      	bne.n	80066a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006634:	2b01      	cmp	r3, #1
 8006636:	d101      	bne.n	800663c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006638:	2302      	movs	r3, #2
 800663a:	e032      	b.n	80066a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	; 0x24
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0201 	bic.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800666a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6819      	ldr	r1, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f042 0201 	orr.w	r2, r2, #1
 800668a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	e000      	b.n	80066a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066a0:	2302      	movs	r3, #2
  }
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b085      	sub	sp, #20
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d139      	bne.n	8006738 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066ce:	2302      	movs	r3, #2
 80066d0:	e033      	b.n	800673a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2224      	movs	r2, #36	; 0x24
 80066de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f022 0201 	bic.w	r2, r2, #1
 80066f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006700:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	021b      	lsls	r3, r3, #8
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f042 0201 	orr.w	r2, r2, #1
 8006722:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	e000      	b.n	800673a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006738:	2302      	movs	r3, #2
  }
}
 800673a:	4618      	mov	r0, r3
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006746:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006748:	b08f      	sub	sp, #60	; 0x3c
 800674a:	af0a      	add	r7, sp, #40	; 0x28
 800674c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e116      	b.n	8006986 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006764:	b2db      	uxtb	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fb fbf2 	bl	8001f5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2203      	movs	r2, #3
 800677c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006788:	2b00      	cmp	r3, #0
 800678a:	d102      	bne.n	8006792 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f004 f850 	bl	800a83c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	603b      	str	r3, [r7, #0]
 80067a2:	687e      	ldr	r6, [r7, #4]
 80067a4:	466d      	mov	r5, sp
 80067a6:	f106 0410 	add.w	r4, r6, #16
 80067aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80067b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80067b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80067b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80067ba:	1d33      	adds	r3, r6, #4
 80067bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067be:	6838      	ldr	r0, [r7, #0]
 80067c0:	f003 ffe4 	bl	800a78c <USB_CoreInit>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2202      	movs	r2, #2
 80067ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e0d7      	b.n	8006986 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2100      	movs	r1, #0
 80067dc:	4618      	mov	r0, r3
 80067de:	f004 f83e 	bl	800a85e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067e2:	2300      	movs	r3, #0
 80067e4:	73fb      	strb	r3, [r7, #15]
 80067e6:	e04a      	b.n	800687e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80067e8:	7bfa      	ldrb	r2, [r7, #15]
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	333d      	adds	r3, #61	; 0x3d
 80067f8:	2201      	movs	r2, #1
 80067fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80067fc:	7bfa      	ldrb	r2, [r7, #15]
 80067fe:	6879      	ldr	r1, [r7, #4]
 8006800:	4613      	mov	r3, r2
 8006802:	00db      	lsls	r3, r3, #3
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	440b      	add	r3, r1
 800680a:	333c      	adds	r3, #60	; 0x3c
 800680c:	7bfa      	ldrb	r2, [r7, #15]
 800680e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006810:	7bfa      	ldrb	r2, [r7, #15]
 8006812:	7bfb      	ldrb	r3, [r7, #15]
 8006814:	b298      	uxth	r0, r3
 8006816:	6879      	ldr	r1, [r7, #4]
 8006818:	4613      	mov	r3, r2
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	440b      	add	r3, r1
 8006822:	3344      	adds	r3, #68	; 0x44
 8006824:	4602      	mov	r2, r0
 8006826:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006828:	7bfa      	ldrb	r2, [r7, #15]
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	4613      	mov	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	4413      	add	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	440b      	add	r3, r1
 8006836:	3340      	adds	r3, #64	; 0x40
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800683c:	7bfa      	ldrb	r2, [r7, #15]
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	3348      	adds	r3, #72	; 0x48
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006850:	7bfa      	ldrb	r2, [r7, #15]
 8006852:	6879      	ldr	r1, [r7, #4]
 8006854:	4613      	mov	r3, r2
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	440b      	add	r3, r1
 800685e:	334c      	adds	r3, #76	; 0x4c
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006864:	7bfa      	ldrb	r2, [r7, #15]
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	3354      	adds	r3, #84	; 0x54
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	3301      	adds	r3, #1
 800687c:	73fb      	strb	r3, [r7, #15]
 800687e:	7bfa      	ldrb	r2, [r7, #15]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	429a      	cmp	r2, r3
 8006886:	d3af      	bcc.n	80067e8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006888:	2300      	movs	r3, #0
 800688a:	73fb      	strb	r3, [r7, #15]
 800688c:	e044      	b.n	8006918 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800688e:	7bfa      	ldrb	r2, [r7, #15]
 8006890:	6879      	ldr	r1, [r7, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	4413      	add	r3, r2
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	440b      	add	r3, r1
 800689c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80068a4:	7bfa      	ldrb	r2, [r7, #15]
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	4613      	mov	r3, r2
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	4413      	add	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80068b6:	7bfa      	ldrb	r2, [r7, #15]
 80068b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80068ba:	7bfa      	ldrb	r2, [r7, #15]
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	4613      	mov	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80068cc:	2200      	movs	r2, #0
 80068ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80068d0:	7bfa      	ldrb	r2, [r7, #15]
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	4613      	mov	r3, r2
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	440b      	add	r3, r1
 80068de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80068e2:	2200      	movs	r2, #0
 80068e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80068e6:	7bfa      	ldrb	r2, [r7, #15]
 80068e8:	6879      	ldr	r1, [r7, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	00db      	lsls	r3, r3, #3
 80068ee:	4413      	add	r3, r2
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	440b      	add	r3, r1
 80068f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80068fc:	7bfa      	ldrb	r2, [r7, #15]
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	00db      	lsls	r3, r3, #3
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	3301      	adds	r3, #1
 8006916:	73fb      	strb	r3, [r7, #15]
 8006918:	7bfa      	ldrb	r2, [r7, #15]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	429a      	cmp	r2, r3
 8006920:	d3b5      	bcc.n	800688e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	687e      	ldr	r6, [r7, #4]
 800692a:	466d      	mov	r5, sp
 800692c:	f106 0410 	add.w	r4, r6, #16
 8006930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006938:	e894 0003 	ldmia.w	r4, {r0, r1}
 800693c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006940:	1d33      	adds	r3, r6, #4
 8006942:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006944:	6838      	ldr	r0, [r7, #0]
 8006946:	f003 ffd7 	bl	800a8f8 <USB_DevInit>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d005      	beq.n	800695c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2202      	movs	r2, #2
 8006954:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e014      	b.n	8006986 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2201      	movs	r2, #1
 8006968:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	2b01      	cmp	r3, #1
 8006972:	d102      	bne.n	800697a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f80b 	bl	8006990 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f004 f995 	bl	800acae <USB_DevDisconnect>

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006990 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069be:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	10000003 	.word	0x10000003

080069d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80069d8:	b480      	push	{r7}
 80069da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069dc:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a04      	ldr	r2, [pc, #16]	; (80069f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e6:	6013      	str	r3, [r2, #0]
}
 80069e8:	bf00      	nop
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40007000 	.word	0x40007000

080069f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006a00:	2300      	movs	r3, #0
 8006a02:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e291      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8087 	beq.w	8006b2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a1c:	4b96      	ldr	r3, [pc, #600]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 030c 	and.w	r3, r3, #12
 8006a24:	2b04      	cmp	r3, #4
 8006a26:	d00c      	beq.n	8006a42 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a28:	4b93      	ldr	r3, [pc, #588]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 030c 	and.w	r3, r3, #12
 8006a30:	2b08      	cmp	r3, #8
 8006a32:	d112      	bne.n	8006a5a <HAL_RCC_OscConfig+0x62>
 8006a34:	4b90      	ldr	r3, [pc, #576]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a40:	d10b      	bne.n	8006a5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a42:	4b8d      	ldr	r3, [pc, #564]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d06c      	beq.n	8006b28 <HAL_RCC_OscConfig+0x130>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d168      	bne.n	8006b28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e26b      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a62:	d106      	bne.n	8006a72 <HAL_RCC_OscConfig+0x7a>
 8006a64:	4b84      	ldr	r3, [pc, #528]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a83      	ldr	r2, [pc, #524]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006a6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	e02e      	b.n	8006ad0 <HAL_RCC_OscConfig+0xd8>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10c      	bne.n	8006a94 <HAL_RCC_OscConfig+0x9c>
 8006a7a:	4b7f      	ldr	r3, [pc, #508]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a7e      	ldr	r2, [pc, #504]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	4b7c      	ldr	r3, [pc, #496]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a7b      	ldr	r2, [pc, #492]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006a8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	e01d      	b.n	8006ad0 <HAL_RCC_OscConfig+0xd8>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a9c:	d10c      	bne.n	8006ab8 <HAL_RCC_OscConfig+0xc0>
 8006a9e:	4b76      	ldr	r3, [pc, #472]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a75      	ldr	r2, [pc, #468]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	4b73      	ldr	r3, [pc, #460]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a72      	ldr	r2, [pc, #456]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	e00b      	b.n	8006ad0 <HAL_RCC_OscConfig+0xd8>
 8006ab8:	4b6f      	ldr	r3, [pc, #444]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a6e      	ldr	r2, [pc, #440]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ac2:	6013      	str	r3, [r2, #0]
 8006ac4:	4b6c      	ldr	r3, [pc, #432]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a6b      	ldr	r2, [pc, #428]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d013      	beq.n	8006b00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fb fe34 	bl	8002744 <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ae0:	f7fb fe30 	bl	8002744 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b64      	cmp	r3, #100	; 0x64
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e21f      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006af2:	4b61      	ldr	r3, [pc, #388]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <HAL_RCC_OscConfig+0xe8>
 8006afe:	e014      	b.n	8006b2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b00:	f7fb fe20 	bl	8002744 <HAL_GetTick>
 8006b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b06:	e008      	b.n	8006b1a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b08:	f7fb fe1c 	bl	8002744 <HAL_GetTick>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	2b64      	cmp	r3, #100	; 0x64
 8006b14:	d901      	bls.n	8006b1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e20b      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b1a:	4b57      	ldr	r3, [pc, #348]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1f0      	bne.n	8006b08 <HAL_RCC_OscConfig+0x110>
 8006b26:	e000      	b.n	8006b2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d069      	beq.n	8006c0a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b36:	4b50      	ldr	r3, [pc, #320]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 030c 	and.w	r3, r3, #12
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b42:	4b4d      	ldr	r3, [pc, #308]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 030c 	and.w	r3, r3, #12
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d11c      	bne.n	8006b88 <HAL_RCC_OscConfig+0x190>
 8006b4e:	4b4a      	ldr	r3, [pc, #296]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d116      	bne.n	8006b88 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b5a:	4b47      	ldr	r3, [pc, #284]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <HAL_RCC_OscConfig+0x17a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d001      	beq.n	8006b72 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	e1df      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b72:	4b41      	ldr	r3, [pc, #260]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	00db      	lsls	r3, r3, #3
 8006b80:	493d      	ldr	r1, [pc, #244]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b86:	e040      	b.n	8006c0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d023      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b90:	4b39      	ldr	r3, [pc, #228]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a38      	ldr	r2, [pc, #224]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006b96:	f043 0301 	orr.w	r3, r3, #1
 8006b9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9c:	f7fb fdd2 	bl	8002744 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ba4:	f7fb fdce 	bl	8002744 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e1bd      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bb6:	4b30      	ldr	r3, [pc, #192]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d0f0      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bc2:	4b2d      	ldr	r3, [pc, #180]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	00db      	lsls	r3, r3, #3
 8006bd0:	4929      	ldr	r1, [pc, #164]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	600b      	str	r3, [r1, #0]
 8006bd6:	e018      	b.n	8006c0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bd8:	4b27      	ldr	r3, [pc, #156]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a26      	ldr	r2, [pc, #152]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006bde:	f023 0301 	bic.w	r3, r3, #1
 8006be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006be4:	f7fb fdae 	bl	8002744 <HAL_GetTick>
 8006be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bea:	e008      	b.n	8006bfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bec:	f7fb fdaa 	bl	8002744 <HAL_GetTick>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	1ad3      	subs	r3, r2, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d901      	bls.n	8006bfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e199      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bfe:	4b1e      	ldr	r3, [pc, #120]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0302 	and.w	r3, r3, #2
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1f0      	bne.n	8006bec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0308 	and.w	r3, r3, #8
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d038      	beq.n	8006c88 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d019      	beq.n	8006c52 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c1e:	4b16      	ldr	r3, [pc, #88]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006c20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c22:	4a15      	ldr	r2, [pc, #84]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c2a:	f7fb fd8b 	bl	8002744 <HAL_GetTick>
 8006c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c30:	e008      	b.n	8006c44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c32:	f7fb fd87 	bl	8002744 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d901      	bls.n	8006c44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e176      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c44:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0f0      	beq.n	8006c32 <HAL_RCC_OscConfig+0x23a>
 8006c50:	e01a      	b.n	8006c88 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c52:	4b09      	ldr	r3, [pc, #36]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c56:	4a08      	ldr	r2, [pc, #32]	; (8006c78 <HAL_RCC_OscConfig+0x280>)
 8006c58:	f023 0301 	bic.w	r3, r3, #1
 8006c5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c5e:	f7fb fd71 	bl	8002744 <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c64:	e00a      	b.n	8006c7c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c66:	f7fb fd6d 	bl	8002744 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d903      	bls.n	8006c7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e15c      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
 8006c78:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c7c:	4b91      	ldr	r3, [pc, #580]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d1ee      	bne.n	8006c66 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0304 	and.w	r3, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f000 80a4 	beq.w	8006dde <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c96:	4b8b      	ldr	r3, [pc, #556]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10d      	bne.n	8006cbe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ca2:	4b88      	ldr	r3, [pc, #544]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca6:	4a87      	ldr	r2, [pc, #540]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cac:	6413      	str	r3, [r2, #64]	; 0x40
 8006cae:	4b85      	ldr	r3, [pc, #532]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cb6:	60bb      	str	r3, [r7, #8]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cbe:	4b82      	ldr	r3, [pc, #520]	; (8006ec8 <HAL_RCC_OscConfig+0x4d0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d118      	bne.n	8006cfc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006cca:	4b7f      	ldr	r3, [pc, #508]	; (8006ec8 <HAL_RCC_OscConfig+0x4d0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a7e      	ldr	r2, [pc, #504]	; (8006ec8 <HAL_RCC_OscConfig+0x4d0>)
 8006cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cd6:	f7fb fd35 	bl	8002744 <HAL_GetTick>
 8006cda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cde:	f7fb fd31 	bl	8002744 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b64      	cmp	r3, #100	; 0x64
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e120      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cf0:	4b75      	ldr	r3, [pc, #468]	; (8006ec8 <HAL_RCC_OscConfig+0x4d0>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0f0      	beq.n	8006cde <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d106      	bne.n	8006d12 <HAL_RCC_OscConfig+0x31a>
 8006d04:	4b6f      	ldr	r3, [pc, #444]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d08:	4a6e      	ldr	r2, [pc, #440]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d0a:	f043 0301 	orr.w	r3, r3, #1
 8006d0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d10:	e02d      	b.n	8006d6e <HAL_RCC_OscConfig+0x376>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10c      	bne.n	8006d34 <HAL_RCC_OscConfig+0x33c>
 8006d1a:	4b6a      	ldr	r3, [pc, #424]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1e:	4a69      	ldr	r2, [pc, #420]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d20:	f023 0301 	bic.w	r3, r3, #1
 8006d24:	6713      	str	r3, [r2, #112]	; 0x70
 8006d26:	4b67      	ldr	r3, [pc, #412]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	4a66      	ldr	r2, [pc, #408]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d2c:	f023 0304 	bic.w	r3, r3, #4
 8006d30:	6713      	str	r3, [r2, #112]	; 0x70
 8006d32:	e01c      	b.n	8006d6e <HAL_RCC_OscConfig+0x376>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	2b05      	cmp	r3, #5
 8006d3a:	d10c      	bne.n	8006d56 <HAL_RCC_OscConfig+0x35e>
 8006d3c:	4b61      	ldr	r3, [pc, #388]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d40:	4a60      	ldr	r2, [pc, #384]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d42:	f043 0304 	orr.w	r3, r3, #4
 8006d46:	6713      	str	r3, [r2, #112]	; 0x70
 8006d48:	4b5e      	ldr	r3, [pc, #376]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4c:	4a5d      	ldr	r2, [pc, #372]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	6713      	str	r3, [r2, #112]	; 0x70
 8006d54:	e00b      	b.n	8006d6e <HAL_RCC_OscConfig+0x376>
 8006d56:	4b5b      	ldr	r3, [pc, #364]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d5a:	4a5a      	ldr	r2, [pc, #360]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d5c:	f023 0301 	bic.w	r3, r3, #1
 8006d60:	6713      	str	r3, [r2, #112]	; 0x70
 8006d62:	4b58      	ldr	r3, [pc, #352]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d66:	4a57      	ldr	r2, [pc, #348]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d68:	f023 0304 	bic.w	r3, r3, #4
 8006d6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d015      	beq.n	8006da2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d76:	f7fb fce5 	bl	8002744 <HAL_GetTick>
 8006d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d7c:	e00a      	b.n	8006d94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d7e:	f7fb fce1 	bl	8002744 <HAL_GetTick>
 8006d82:	4602      	mov	r2, r0
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d901      	bls.n	8006d94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006d90:	2303      	movs	r3, #3
 8006d92:	e0ce      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d94:	4b4b      	ldr	r3, [pc, #300]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d0ee      	beq.n	8006d7e <HAL_RCC_OscConfig+0x386>
 8006da0:	e014      	b.n	8006dcc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da2:	f7fb fccf 	bl	8002744 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006da8:	e00a      	b.n	8006dc0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006daa:	f7fb fccb 	bl	8002744 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d901      	bls.n	8006dc0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e0b8      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dc0:	4b40      	ldr	r3, [pc, #256]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1ee      	bne.n	8006daa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d105      	bne.n	8006dde <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dd2:	4b3c      	ldr	r3, [pc, #240]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dd6:	4a3b      	ldr	r2, [pc, #236]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ddc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 80a4 	beq.w	8006f30 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006de8:	4b36      	ldr	r3, [pc, #216]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f003 030c 	and.w	r3, r3, #12
 8006df0:	2b08      	cmp	r3, #8
 8006df2:	d06b      	beq.n	8006ecc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d149      	bne.n	8006e90 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dfc:	4b31      	ldr	r3, [pc, #196]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a30      	ldr	r2, [pc, #192]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e08:	f7fb fc9c 	bl	8002744 <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e10:	f7fb fc98 	bl	8002744 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e087      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e22:	4b28      	ldr	r3, [pc, #160]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f0      	bne.n	8006e10 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69da      	ldr	r2, [r3, #28]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3c:	019b      	lsls	r3, r3, #6
 8006e3e:	431a      	orrs	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e44:	085b      	lsrs	r3, r3, #1
 8006e46:	3b01      	subs	r3, #1
 8006e48:	041b      	lsls	r3, r3, #16
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e50:	061b      	lsls	r3, r3, #24
 8006e52:	4313      	orrs	r3, r2
 8006e54:	4a1b      	ldr	r2, [pc, #108]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e5a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e5c:	4b19      	ldr	r3, [pc, #100]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a18      	ldr	r2, [pc, #96]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006e62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e68:	f7fb fc6c 	bl	8002744 <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e70:	f7fb fc68 	bl	8002744 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e057      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e82:	4b10      	ldr	r3, [pc, #64]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0f0      	beq.n	8006e70 <HAL_RCC_OscConfig+0x478>
 8006e8e:	e04f      	b.n	8006f30 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e90:	4b0c      	ldr	r3, [pc, #48]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a0b      	ldr	r2, [pc, #44]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9c:	f7fb fc52 	bl	8002744 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea4:	f7fb fc4e 	bl	8002744 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e03d      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eb6:	4b03      	ldr	r3, [pc, #12]	; (8006ec4 <HAL_RCC_OscConfig+0x4cc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f0      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x4ac>
 8006ec2:	e035      	b.n	8006f30 <HAL_RCC_OscConfig+0x538>
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006ecc:	4b1b      	ldr	r3, [pc, #108]	; (8006f3c <HAL_RCC_OscConfig+0x544>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d028      	beq.n	8006f2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d121      	bne.n	8006f2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d11a      	bne.n	8006f2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006efc:	4013      	ands	r3, r2
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f02:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d111      	bne.n	8006f2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	085b      	lsrs	r3, r3, #1
 8006f14:	3b01      	subs	r3, #1
 8006f16:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d107      	bne.n	8006f2c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d001      	beq.n	8006f30 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e000      	b.n	8006f32 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
 8006f3a:	bf00      	nop
 8006f3c:	40023800 	.word	0x40023800

08006f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0d0      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f58:	4b6a      	ldr	r3, [pc, #424]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d910      	bls.n	8006f88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f66:	4b67      	ldr	r3, [pc, #412]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f023 020f 	bic.w	r2, r3, #15
 8006f6e:	4965      	ldr	r1, [pc, #404]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f76:	4b63      	ldr	r3, [pc, #396]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d001      	beq.n	8006f88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e0b8      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d020      	beq.n	8006fd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fa0:	4b59      	ldr	r3, [pc, #356]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	4a58      	ldr	r2, [pc, #352]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 8006fa6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006faa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0308 	and.w	r3, r3, #8
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d005      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fb8:	4b53      	ldr	r3, [pc, #332]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	4a52      	ldr	r2, [pc, #328]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 8006fbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fc2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fc4:	4b50      	ldr	r3, [pc, #320]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	494d      	ldr	r1, [pc, #308]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d040      	beq.n	8007064 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d107      	bne.n	8006ffa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fea:	4b47      	ldr	r3, [pc, #284]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d115      	bne.n	8007022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e07f      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d107      	bne.n	8007012 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007002:	4b41      	ldr	r3, [pc, #260]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e073      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007012:	4b3d      	ldr	r3, [pc, #244]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e06b      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007022:	4b39      	ldr	r3, [pc, #228]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f023 0203 	bic.w	r2, r3, #3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	4936      	ldr	r1, [pc, #216]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 8007030:	4313      	orrs	r3, r2
 8007032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007034:	f7fb fb86 	bl	8002744 <HAL_GetTick>
 8007038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703a:	e00a      	b.n	8007052 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800703c:	f7fb fb82 	bl	8002744 <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f241 3288 	movw	r2, #5000	; 0x1388
 800704a:	4293      	cmp	r3, r2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e053      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007052:	4b2d      	ldr	r3, [pc, #180]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 020c 	and.w	r2, r3, #12
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	429a      	cmp	r2, r3
 8007062:	d1eb      	bne.n	800703c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007064:	4b27      	ldr	r3, [pc, #156]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 030f 	and.w	r3, r3, #15
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d210      	bcs.n	8007094 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007072:	4b24      	ldr	r3, [pc, #144]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f023 020f 	bic.w	r2, r3, #15
 800707a:	4922      	ldr	r1, [pc, #136]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	4313      	orrs	r3, r2
 8007080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007082:	4b20      	ldr	r3, [pc, #128]	; (8007104 <HAL_RCC_ClockConfig+0x1c4>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	429a      	cmp	r2, r3
 800708e:	d001      	beq.n	8007094 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e032      	b.n	80070fa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b00      	cmp	r3, #0
 800709e:	d008      	beq.n	80070b2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070a0:	4b19      	ldr	r3, [pc, #100]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	4916      	ldr	r1, [pc, #88]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 0308 	and.w	r3, r3, #8
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d009      	beq.n	80070d2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80070be:	4b12      	ldr	r3, [pc, #72]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	00db      	lsls	r3, r3, #3
 80070cc:	490e      	ldr	r1, [pc, #56]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 80070ce:	4313      	orrs	r3, r2
 80070d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070d2:	f000 f821 	bl	8007118 <HAL_RCC_GetSysClockFreq>
 80070d6:	4602      	mov	r2, r0
 80070d8:	4b0b      	ldr	r3, [pc, #44]	; (8007108 <HAL_RCC_ClockConfig+0x1c8>)
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	091b      	lsrs	r3, r3, #4
 80070de:	f003 030f 	and.w	r3, r3, #15
 80070e2:	490a      	ldr	r1, [pc, #40]	; (800710c <HAL_RCC_ClockConfig+0x1cc>)
 80070e4:	5ccb      	ldrb	r3, [r1, r3]
 80070e6:	fa22 f303 	lsr.w	r3, r2, r3
 80070ea:	4a09      	ldr	r2, [pc, #36]	; (8007110 <HAL_RCC_ClockConfig+0x1d0>)
 80070ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070ee:	4b09      	ldr	r3, [pc, #36]	; (8007114 <HAL_RCC_ClockConfig+0x1d4>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fb fae2 	bl	80026bc <HAL_InitTick>

  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	40023c00 	.word	0x40023c00
 8007108:	40023800 	.word	0x40023800
 800710c:	08019c8c 	.word	0x08019c8c
 8007110:	20000000 	.word	0x20000000
 8007114:	20000004 	.word	0x20000004

08007118 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800711c:	b094      	sub	sp, #80	; 0x50
 800711e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007120:	2300      	movs	r3, #0
 8007122:	647b      	str	r3, [r7, #68]	; 0x44
 8007124:	2300      	movs	r3, #0
 8007126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007128:	2300      	movs	r3, #0
 800712a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007130:	4b79      	ldr	r3, [pc, #484]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f003 030c 	and.w	r3, r3, #12
 8007138:	2b08      	cmp	r3, #8
 800713a:	d00d      	beq.n	8007158 <HAL_RCC_GetSysClockFreq+0x40>
 800713c:	2b08      	cmp	r3, #8
 800713e:	f200 80e1 	bhi.w	8007304 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <HAL_RCC_GetSysClockFreq+0x34>
 8007146:	2b04      	cmp	r3, #4
 8007148:	d003      	beq.n	8007152 <HAL_RCC_GetSysClockFreq+0x3a>
 800714a:	e0db      	b.n	8007304 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800714c:	4b73      	ldr	r3, [pc, #460]	; (800731c <HAL_RCC_GetSysClockFreq+0x204>)
 800714e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007150:	e0db      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007152:	4b73      	ldr	r3, [pc, #460]	; (8007320 <HAL_RCC_GetSysClockFreq+0x208>)
 8007154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007156:	e0d8      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007158:	4b6f      	ldr	r3, [pc, #444]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007160:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007162:	4b6d      	ldr	r3, [pc, #436]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800716a:	2b00      	cmp	r3, #0
 800716c:	d063      	beq.n	8007236 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800716e:	4b6a      	ldr	r3, [pc, #424]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	099b      	lsrs	r3, r3, #6
 8007174:	2200      	movs	r2, #0
 8007176:	63bb      	str	r3, [r7, #56]	; 0x38
 8007178:	63fa      	str	r2, [r7, #60]	; 0x3c
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007180:	633b      	str	r3, [r7, #48]	; 0x30
 8007182:	2300      	movs	r3, #0
 8007184:	637b      	str	r3, [r7, #52]	; 0x34
 8007186:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800718a:	4622      	mov	r2, r4
 800718c:	462b      	mov	r3, r5
 800718e:	f04f 0000 	mov.w	r0, #0
 8007192:	f04f 0100 	mov.w	r1, #0
 8007196:	0159      	lsls	r1, r3, #5
 8007198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800719c:	0150      	lsls	r0, r2, #5
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4621      	mov	r1, r4
 80071a4:	1a51      	subs	r1, r2, r1
 80071a6:	6139      	str	r1, [r7, #16]
 80071a8:	4629      	mov	r1, r5
 80071aa:	eb63 0301 	sbc.w	r3, r3, r1
 80071ae:	617b      	str	r3, [r7, #20]
 80071b0:	f04f 0200 	mov.w	r2, #0
 80071b4:	f04f 0300 	mov.w	r3, #0
 80071b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071bc:	4659      	mov	r1, fp
 80071be:	018b      	lsls	r3, r1, #6
 80071c0:	4651      	mov	r1, sl
 80071c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80071c6:	4651      	mov	r1, sl
 80071c8:	018a      	lsls	r2, r1, #6
 80071ca:	4651      	mov	r1, sl
 80071cc:	ebb2 0801 	subs.w	r8, r2, r1
 80071d0:	4659      	mov	r1, fp
 80071d2:	eb63 0901 	sbc.w	r9, r3, r1
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	f04f 0300 	mov.w	r3, #0
 80071de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071ea:	4690      	mov	r8, r2
 80071ec:	4699      	mov	r9, r3
 80071ee:	4623      	mov	r3, r4
 80071f0:	eb18 0303 	adds.w	r3, r8, r3
 80071f4:	60bb      	str	r3, [r7, #8]
 80071f6:	462b      	mov	r3, r5
 80071f8:	eb49 0303 	adc.w	r3, r9, r3
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	f04f 0300 	mov.w	r3, #0
 8007206:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800720a:	4629      	mov	r1, r5
 800720c:	024b      	lsls	r3, r1, #9
 800720e:	4621      	mov	r1, r4
 8007210:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007214:	4621      	mov	r1, r4
 8007216:	024a      	lsls	r2, r1, #9
 8007218:	4610      	mov	r0, r2
 800721a:	4619      	mov	r1, r3
 800721c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800721e:	2200      	movs	r2, #0
 8007220:	62bb      	str	r3, [r7, #40]	; 0x28
 8007222:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007224:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007228:	f7f9 fc40 	bl	8000aac <__aeabi_uldivmod>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4613      	mov	r3, r2
 8007232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007234:	e058      	b.n	80072e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007236:	4b38      	ldr	r3, [pc, #224]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	099b      	lsrs	r3, r3, #6
 800723c:	2200      	movs	r2, #0
 800723e:	4618      	mov	r0, r3
 8007240:	4611      	mov	r1, r2
 8007242:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007246:	623b      	str	r3, [r7, #32]
 8007248:	2300      	movs	r3, #0
 800724a:	627b      	str	r3, [r7, #36]	; 0x24
 800724c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007250:	4642      	mov	r2, r8
 8007252:	464b      	mov	r3, r9
 8007254:	f04f 0000 	mov.w	r0, #0
 8007258:	f04f 0100 	mov.w	r1, #0
 800725c:	0159      	lsls	r1, r3, #5
 800725e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007262:	0150      	lsls	r0, r2, #5
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4641      	mov	r1, r8
 800726a:	ebb2 0a01 	subs.w	sl, r2, r1
 800726e:	4649      	mov	r1, r9
 8007270:	eb63 0b01 	sbc.w	fp, r3, r1
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	f04f 0300 	mov.w	r3, #0
 800727c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007280:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007284:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007288:	ebb2 040a 	subs.w	r4, r2, sl
 800728c:	eb63 050b 	sbc.w	r5, r3, fp
 8007290:	f04f 0200 	mov.w	r2, #0
 8007294:	f04f 0300 	mov.w	r3, #0
 8007298:	00eb      	lsls	r3, r5, #3
 800729a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800729e:	00e2      	lsls	r2, r4, #3
 80072a0:	4614      	mov	r4, r2
 80072a2:	461d      	mov	r5, r3
 80072a4:	4643      	mov	r3, r8
 80072a6:	18e3      	adds	r3, r4, r3
 80072a8:	603b      	str	r3, [r7, #0]
 80072aa:	464b      	mov	r3, r9
 80072ac:	eb45 0303 	adc.w	r3, r5, r3
 80072b0:	607b      	str	r3, [r7, #4]
 80072b2:	f04f 0200 	mov.w	r2, #0
 80072b6:	f04f 0300 	mov.w	r3, #0
 80072ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072be:	4629      	mov	r1, r5
 80072c0:	028b      	lsls	r3, r1, #10
 80072c2:	4621      	mov	r1, r4
 80072c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072c8:	4621      	mov	r1, r4
 80072ca:	028a      	lsls	r2, r1, #10
 80072cc:	4610      	mov	r0, r2
 80072ce:	4619      	mov	r1, r3
 80072d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072d2:	2200      	movs	r2, #0
 80072d4:	61bb      	str	r3, [r7, #24]
 80072d6:	61fa      	str	r2, [r7, #28]
 80072d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072dc:	f7f9 fbe6 	bl	8000aac <__aeabi_uldivmod>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	4613      	mov	r3, r2
 80072e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80072e8:	4b0b      	ldr	r3, [pc, #44]	; (8007318 <HAL_RCC_GetSysClockFreq+0x200>)
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	0c1b      	lsrs	r3, r3, #16
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	3301      	adds	r3, #1
 80072f4:	005b      	lsls	r3, r3, #1
 80072f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80072f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007300:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007302:	e002      	b.n	800730a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007304:	4b05      	ldr	r3, [pc, #20]	; (800731c <HAL_RCC_GetSysClockFreq+0x204>)
 8007306:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007308:	bf00      	nop
    }
  }
  return sysclockfreq;
 800730a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800730c:	4618      	mov	r0, r3
 800730e:	3750      	adds	r7, #80	; 0x50
 8007310:	46bd      	mov	sp, r7
 8007312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007316:	bf00      	nop
 8007318:	40023800 	.word	0x40023800
 800731c:	00f42400 	.word	0x00f42400
 8007320:	007a1200 	.word	0x007a1200

08007324 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007324:	b480      	push	{r7}
 8007326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007328:	4b03      	ldr	r3, [pc, #12]	; (8007338 <HAL_RCC_GetHCLKFreq+0x14>)
 800732a:	681b      	ldr	r3, [r3, #0]
}
 800732c:	4618      	mov	r0, r3
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	20000000 	.word	0x20000000

0800733c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007340:	f7ff fff0 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 8007344:	4602      	mov	r2, r0
 8007346:	4b05      	ldr	r3, [pc, #20]	; (800735c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	0a9b      	lsrs	r3, r3, #10
 800734c:	f003 0307 	and.w	r3, r3, #7
 8007350:	4903      	ldr	r1, [pc, #12]	; (8007360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007352:	5ccb      	ldrb	r3, [r1, r3]
 8007354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007358:	4618      	mov	r0, r3
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40023800 	.word	0x40023800
 8007360:	08019c9c 	.word	0x08019c9c

08007364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007368:	f7ff ffdc 	bl	8007324 <HAL_RCC_GetHCLKFreq>
 800736c:	4602      	mov	r2, r0
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	0b5b      	lsrs	r3, r3, #13
 8007374:	f003 0307 	and.w	r3, r3, #7
 8007378:	4903      	ldr	r1, [pc, #12]	; (8007388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800737a:	5ccb      	ldrb	r3, [r1, r3]
 800737c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007380:	4618      	mov	r0, r3
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40023800 	.word	0x40023800
 8007388:	08019c9c 	.word	0x08019c9c

0800738c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b088      	sub	sp, #32
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80073a0:	2300      	movs	r3, #0
 80073a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80073a4:	2300      	movs	r3, #0
 80073a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d012      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073b4:	4b69      	ldr	r3, [pc, #420]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	4a68      	ldr	r2, [pc, #416]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80073be:	6093      	str	r3, [r2, #8]
 80073c0:	4b66      	ldr	r3, [pc, #408]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073c2:	689a      	ldr	r2, [r3, #8]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c8:	4964      	ldr	r1, [pc, #400]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80073d6:	2301      	movs	r3, #1
 80073d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d017      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073e6:	4b5d      	ldr	r3, [pc, #372]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f4:	4959      	ldr	r1, [pc, #356]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007400:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007404:	d101      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007406:	2301      	movs	r3, #1
 8007408:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007412:	2301      	movs	r3, #1
 8007414:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d017      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007422:	4b4e      	ldr	r3, [pc, #312]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007428:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	494a      	ldr	r1, [pc, #296]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007432:	4313      	orrs	r3, r2
 8007434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007440:	d101      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007442:	2301      	movs	r3, #1
 8007444:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800744e:	2301      	movs	r3, #1
 8007450:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800745e:	2301      	movs	r3, #1
 8007460:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 808b 	beq.w	8007586 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007470:	4b3a      	ldr	r3, [pc, #232]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007474:	4a39      	ldr	r2, [pc, #228]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800747a:	6413      	str	r3, [r2, #64]	; 0x40
 800747c:	4b37      	ldr	r3, [pc, #220]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007484:	60bb      	str	r3, [r7, #8]
 8007486:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007488:	4b35      	ldr	r3, [pc, #212]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a34      	ldr	r2, [pc, #208]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800748e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007494:	f7fb f956 	bl	8002744 <HAL_GetTick>
 8007498:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800749a:	e008      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800749c:	f7fb f952 	bl	8002744 <HAL_GetTick>
 80074a0:	4602      	mov	r2, r0
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	2b64      	cmp	r3, #100	; 0x64
 80074a8:	d901      	bls.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e357      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80074ae:	4b2c      	ldr	r3, [pc, #176]	; (8007560 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0f0      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074ba:	4b28      	ldr	r3, [pc, #160]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d035      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d02e      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074d8:	4b20      	ldr	r3, [pc, #128]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074e2:	4b1e      	ldr	r3, [pc, #120]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074e6:	4a1d      	ldr	r2, [pc, #116]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074ee:	4b1b      	ldr	r3, [pc, #108]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f2:	4a1a      	ldr	r2, [pc, #104]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80074fa:	4a18      	ldr	r2, [pc, #96]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007500:	4b16      	ldr	r3, [pc, #88]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b01      	cmp	r3, #1
 800750a:	d114      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800750c:	f7fb f91a 	bl	8002744 <HAL_GetTick>
 8007510:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007512:	e00a      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007514:	f7fb f916 	bl	8002744 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007522:	4293      	cmp	r3, r2
 8007524:	d901      	bls.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e319      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800752a:	4b0c      	ldr	r3, [pc, #48]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800752c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d0ee      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800753e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007542:	d111      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007544:	4b05      	ldr	r3, [pc, #20]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007550:	4b04      	ldr	r3, [pc, #16]	; (8007564 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007552:	400b      	ands	r3, r1
 8007554:	4901      	ldr	r1, [pc, #4]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007556:	4313      	orrs	r3, r2
 8007558:	608b      	str	r3, [r1, #8]
 800755a:	e00b      	b.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800755c:	40023800 	.word	0x40023800
 8007560:	40007000 	.word	0x40007000
 8007564:	0ffffcff 	.word	0x0ffffcff
 8007568:	4baa      	ldr	r3, [pc, #680]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	4aa9      	ldr	r2, [pc, #676]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800756e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007572:	6093      	str	r3, [r2, #8]
 8007574:	4ba7      	ldr	r3, [pc, #668]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007576:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007580:	49a4      	ldr	r1, [pc, #656]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007582:	4313      	orrs	r3, r2
 8007584:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0310 	and.w	r3, r3, #16
 800758e:	2b00      	cmp	r3, #0
 8007590:	d010      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007592:	4ba0      	ldr	r3, [pc, #640]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007598:	4a9e      	ldr	r2, [pc, #632]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800759a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800759e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80075a2:	4b9c      	ldr	r3, [pc, #624]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	4999      	ldr	r1, [pc, #612]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075c0:	4b94      	ldr	r3, [pc, #592]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075ce:	4991      	ldr	r1, [pc, #580]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00a      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075e2:	4b8c      	ldr	r3, [pc, #560]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075f0:	4988      	ldr	r1, [pc, #544]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f2:	4313      	orrs	r3, r2
 80075f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00a      	beq.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007604:	4b83      	ldr	r3, [pc, #524]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800760a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007612:	4980      	ldr	r1, [pc, #512]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007614:	4313      	orrs	r3, r2
 8007616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007626:	4b7b      	ldr	r3, [pc, #492]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	4977      	ldr	r1, [pc, #476]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00a      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007648:	4b72      	ldr	r3, [pc, #456]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800764a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800764e:	f023 0203 	bic.w	r2, r3, #3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007656:	496f      	ldr	r1, [pc, #444]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007658:	4313      	orrs	r3, r2
 800765a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00a      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800766a:	4b6a      	ldr	r3, [pc, #424]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800766c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007670:	f023 020c 	bic.w	r2, r3, #12
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007678:	4966      	ldr	r1, [pc, #408]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800767a:	4313      	orrs	r3, r2
 800767c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800768c:	4b61      	ldr	r3, [pc, #388]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800768e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007692:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800769a:	495e      	ldr	r1, [pc, #376]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800769c:	4313      	orrs	r3, r2
 800769e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076ae:	4b59      	ldr	r3, [pc, #356]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076bc:	4955      	ldr	r1, [pc, #340]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076d0:	4b50      	ldr	r3, [pc, #320]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076de:	494d      	ldr	r1, [pc, #308]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80076f2:	4b48      	ldr	r3, [pc, #288]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007700:	4944      	ldr	r1, [pc, #272]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007702:	4313      	orrs	r3, r2
 8007704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007714:	4b3f      	ldr	r3, [pc, #252]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800771a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007722:	493c      	ldr	r1, [pc, #240]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007736:	4b37      	ldr	r3, [pc, #220]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800773c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007744:	4933      	ldr	r1, [pc, #204]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007746:	4313      	orrs	r3, r2
 8007748:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007758:	4b2e      	ldr	r3, [pc, #184]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800775a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007766:	492b      	ldr	r1, [pc, #172]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007768:	4313      	orrs	r3, r2
 800776a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d011      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800777a:	4b26      	ldr	r3, [pc, #152]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800777c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007780:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007788:	4922      	ldr	r1, [pc, #136]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800778a:	4313      	orrs	r3, r2
 800778c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007794:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007798:	d101      	bne.n	800779e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800779a:	2301      	movs	r3, #1
 800779c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80077aa:	2301      	movs	r3, #1
 80077ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077ba:	4b16      	ldr	r3, [pc, #88]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077c8:	4912      	ldr	r1, [pc, #72]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00b      	beq.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80077dc:	4b0d      	ldr	r3, [pc, #52]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ec:	4909      	ldr	r1, [pc, #36]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d006      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 80d9 	beq.w	80079ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007808:	4b02      	ldr	r3, [pc, #8]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a01      	ldr	r2, [pc, #4]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800780e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007812:	e001      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007814:	40023800 	.word	0x40023800
 8007818:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800781a:	f7fa ff93 	bl	8002744 <HAL_GetTick>
 800781e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007820:	e008      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007822:	f7fa ff8f 	bl	8002744 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	2b64      	cmp	r3, #100	; 0x64
 800782e:	d901      	bls.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e194      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007834:	4b6c      	ldr	r3, [pc, #432]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1f0      	bne.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d021      	beq.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007850:	2b00      	cmp	r3, #0
 8007852:	d11d      	bne.n	8007890 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007854:	4b64      	ldr	r3, [pc, #400]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800785a:	0c1b      	lsrs	r3, r3, #16
 800785c:	f003 0303 	and.w	r3, r3, #3
 8007860:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007862:	4b61      	ldr	r3, [pc, #388]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007864:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007868:	0e1b      	lsrs	r3, r3, #24
 800786a:	f003 030f 	and.w	r3, r3, #15
 800786e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	019a      	lsls	r2, r3, #6
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	041b      	lsls	r3, r3, #16
 800787a:	431a      	orrs	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	061b      	lsls	r3, r3, #24
 8007880:	431a      	orrs	r2, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	071b      	lsls	r3, r3, #28
 8007888:	4957      	ldr	r1, [pc, #348]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800788a:	4313      	orrs	r3, r2
 800788c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078a4:	d00a      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d02e      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ba:	d129      	bne.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80078bc:	4b4a      	ldr	r3, [pc, #296]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078c2:	0c1b      	lsrs	r3, r3, #16
 80078c4:	f003 0303 	and.w	r3, r3, #3
 80078c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078ca:	4b47      	ldr	r3, [pc, #284]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078d0:	0f1b      	lsrs	r3, r3, #28
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	019a      	lsls	r2, r3, #6
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	041b      	lsls	r3, r3, #16
 80078e2:	431a      	orrs	r2, r3
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	061b      	lsls	r3, r3, #24
 80078ea:	431a      	orrs	r2, r3
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	071b      	lsls	r3, r3, #28
 80078f0:	493d      	ldr	r1, [pc, #244]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80078f8:	4b3b      	ldr	r3, [pc, #236]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078fe:	f023 021f 	bic.w	r2, r3, #31
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	3b01      	subs	r3, #1
 8007908:	4937      	ldr	r1, [pc, #220]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800790a:	4313      	orrs	r3, r2
 800790c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d01d      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800791c:	4b32      	ldr	r3, [pc, #200]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800791e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007922:	0e1b      	lsrs	r3, r3, #24
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800792a:	4b2f      	ldr	r3, [pc, #188]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800792c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007930:	0f1b      	lsrs	r3, r3, #28
 8007932:	f003 0307 	and.w	r3, r3, #7
 8007936:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	019a      	lsls	r2, r3, #6
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	041b      	lsls	r3, r3, #16
 8007944:	431a      	orrs	r2, r3
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	061b      	lsls	r3, r3, #24
 800794a:	431a      	orrs	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	071b      	lsls	r3, r3, #28
 8007950:	4925      	ldr	r1, [pc, #148]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007952:	4313      	orrs	r3, r2
 8007954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d011      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	019a      	lsls	r2, r3, #6
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	041b      	lsls	r3, r3, #16
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	061b      	lsls	r3, r3, #24
 8007978:	431a      	orrs	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	071b      	lsls	r3, r3, #28
 8007980:	4919      	ldr	r1, [pc, #100]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007982:	4313      	orrs	r3, r2
 8007984:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007988:	4b17      	ldr	r3, [pc, #92]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a16      	ldr	r2, [pc, #88]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800798e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007994:	f7fa fed6 	bl	8002744 <HAL_GetTick>
 8007998:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800799a:	e008      	b.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800799c:	f7fa fed2 	bl	8002744 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b64      	cmp	r3, #100	; 0x64
 80079a8:	d901      	bls.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e0d7      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80079ae:	4b0e      	ldr	r3, [pc, #56]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d0f0      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	f040 80cd 	bne.w	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80079c2:	4b09      	ldr	r3, [pc, #36]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a08      	ldr	r2, [pc, #32]	; (80079e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80079c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ce:	f7fa feb9 	bl	8002744 <HAL_GetTick>
 80079d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079d4:	e00a      	b.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80079d6:	f7fa feb5 	bl	8002744 <HAL_GetTick>
 80079da:	4602      	mov	r2, r0
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b64      	cmp	r3, #100	; 0x64
 80079e2:	d903      	bls.n	80079ec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e0ba      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80079e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079ec:	4b5e      	ldr	r3, [pc, #376]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079f8:	d0ed      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d009      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d02e      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d12a      	bne.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a22:	4b51      	ldr	r3, [pc, #324]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a28:	0c1b      	lsrs	r3, r3, #16
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a30:	4b4d      	ldr	r3, [pc, #308]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a36:	0f1b      	lsrs	r3, r3, #28
 8007a38:	f003 0307 	and.w	r3, r3, #7
 8007a3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	019a      	lsls	r2, r3, #6
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	041b      	lsls	r3, r3, #16
 8007a48:	431a      	orrs	r2, r3
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	699b      	ldr	r3, [r3, #24]
 8007a4e:	061b      	lsls	r3, r3, #24
 8007a50:	431a      	orrs	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	071b      	lsls	r3, r3, #28
 8007a56:	4944      	ldr	r1, [pc, #272]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a5e:	4b42      	ldr	r3, [pc, #264]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	021b      	lsls	r3, r3, #8
 8007a70:	493d      	ldr	r1, [pc, #244]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d022      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a8c:	d11d      	bne.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a8e:	4b36      	ldr	r3, [pc, #216]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a94:	0e1b      	lsrs	r3, r3, #24
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a9c:	4b32      	ldr	r3, [pc, #200]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa2:	0f1b      	lsrs	r3, r3, #28
 8007aa4:	f003 0307 	and.w	r3, r3, #7
 8007aa8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	019a      	lsls	r2, r3, #6
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a1b      	ldr	r3, [r3, #32]
 8007ab4:	041b      	lsls	r3, r3, #16
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	061b      	lsls	r3, r3, #24
 8007abc:	431a      	orrs	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	071b      	lsls	r3, r3, #28
 8007ac2:	4929      	ldr	r1, [pc, #164]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0308 	and.w	r3, r3, #8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d028      	beq.n	8007b28 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007ad6:	4b24      	ldr	r3, [pc, #144]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007adc:	0e1b      	lsrs	r3, r3, #24
 8007ade:	f003 030f 	and.w	r3, r3, #15
 8007ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ae4:	4b20      	ldr	r3, [pc, #128]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aea:	0c1b      	lsrs	r3, r3, #16
 8007aec:	f003 0303 	and.w	r3, r3, #3
 8007af0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	019a      	lsls	r2, r3, #6
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	041b      	lsls	r3, r3, #16
 8007afc:	431a      	orrs	r2, r3
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	061b      	lsls	r3, r3, #24
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	071b      	lsls	r3, r3, #28
 8007b0a:	4917      	ldr	r1, [pc, #92]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007b12:	4b15      	ldr	r3, [pc, #84]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	4911      	ldr	r1, [pc, #68]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b22:	4313      	orrs	r3, r2
 8007b24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007b28:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a0e      	ldr	r2, [pc, #56]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b34:	f7fa fe06 	bl	8002744 <HAL_GetTick>
 8007b38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b3a:	e008      	b.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b3c:	f7fa fe02 	bl	8002744 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b64      	cmp	r3, #100	; 0x64
 8007b48:	d901      	bls.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e007      	b.n	8007b5e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b4e:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b5a:	d1ef      	bne.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3720      	adds	r7, #32
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	40023800 	.word	0x40023800

08007b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d101      	bne.n	8007b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e09d      	b.n	8007cba <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d108      	bne.n	8007b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b8e:	d009      	beq.n	8007ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	61da      	str	r2, [r3, #28]
 8007b96:	e005      	b.n	8007ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7f9 fe6c 	bl	800189c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007be4:	d902      	bls.n	8007bec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	e002      	b.n	8007bf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007bfa:	d007      	beq.n	8007c0c <HAL_SPI_Init+0xa0>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007c04:	d002      	beq.n	8007c0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007c1c:	431a      	orrs	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	f003 0302 	and.w	r3, r3, #2
 8007c26:	431a      	orrs	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	695b      	ldr	r3, [r3, #20]
 8007c2c:	f003 0301 	and.w	r3, r3, #1
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	69db      	ldr	r3, [r3, #28]
 8007c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c44:	431a      	orrs	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c4e:	ea42 0103 	orr.w	r1, r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	0c1b      	lsrs	r3, r3, #16
 8007c68:	f003 0204 	and.w	r2, r3, #4
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c70:	f003 0310 	and.w	r3, r3, #16
 8007c74:	431a      	orrs	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7a:	f003 0308 	and.w	r3, r3, #8
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007c88:	ea42 0103 	orr.w	r1, r2, r3
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69da      	ldr	r2, [r3, #28]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ca8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
	...

08007cc4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_SPI_TransmitReceive_DMA+0x20>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	e16c      	b.n	8007fbe <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007cf2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8007cfa:	7dbb      	ldrb	r3, [r7, #22]
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d00d      	beq.n	8007d1c <HAL_SPI_TransmitReceive_DMA+0x58>
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d06:	d106      	bne.n	8007d16 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d102      	bne.n	8007d16 <HAL_SPI_TransmitReceive_DMA+0x52>
 8007d10:	7dbb      	ldrb	r3, [r7, #22]
 8007d12:	2b04      	cmp	r3, #4
 8007d14:	d002      	beq.n	8007d1c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8007d16:	2302      	movs	r3, #2
 8007d18:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d1a:	e14b      	b.n	8007fb4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d005      	beq.n	8007d2e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d002      	beq.n	8007d2e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8007d28:	887b      	ldrh	r3, [r7, #2]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d102      	bne.n	8007d34 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007d32:	e13f      	b.n	8007fb4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d003      	beq.n	8007d48 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2205      	movs	r2, #5
 8007d44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	887a      	ldrh	r2, [r7, #2]
 8007d58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	887a      	ldrh	r2, [r7, #2]
 8007d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	887a      	ldrh	r2, [r7, #2]
 8007d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	887a      	ldrh	r2, [r7, #2]
 8007d72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8007d90:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007d9a:	d908      	bls.n	8007dae <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007daa:	605a      	str	r2, [r3, #4]
 8007dac:	e06f      	b.n	8007e8e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	685a      	ldr	r2, [r3, #4]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dbc:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dc8:	d126      	bne.n	8007e18 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8007dce:	f003 0301 	and.w	r3, r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10f      	bne.n	8007df6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007de4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	085b      	lsrs	r3, r3, #1
 8007dee:	b29a      	uxth	r2, r3
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007df4:	e010      	b.n	8007e18 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e04:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	085b      	lsrs	r3, r3, #1
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3301      	adds	r3, #1
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e22:	d134      	bne.n	8007e8e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e32:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d111      	bne.n	8007e68 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e52:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	085b      	lsrs	r3, r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007e66:	e012      	b.n	8007e8e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e76:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	085b      	lsrs	r3, r3, #1
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	3301      	adds	r3, #1
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b04      	cmp	r3, #4
 8007e98:	d108      	bne.n	8007eac <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9e:	4a4a      	ldr	r2, [pc, #296]	; (8007fc8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8007ea0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea6:	4a49      	ldr	r2, [pc, #292]	; (8007fcc <HAL_SPI_TransmitReceive_DMA+0x308>)
 8007ea8:	63da      	str	r2, [r3, #60]	; 0x3c
 8007eaa:	e007      	b.n	8007ebc <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb0:	4a47      	ldr	r2, [pc, #284]	; (8007fd0 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8007eb2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb8:	4a46      	ldr	r2, [pc, #280]	; (8007fd4 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8007eba:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec0:	4a45      	ldr	r2, [pc, #276]	; (8007fd8 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8007ec2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec8:	2200      	movs	r2, #0
 8007eca:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007edc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ee4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8007ee6:	f7fa fe1d 	bl	8002b24 <HAL_DMA_Start_IT>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00c      	beq.n	8007f0a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ef4:	f043 0210 	orr.w	r2, r3, #16
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007f08:	e054      	b.n	8007fb4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	685a      	ldr	r2, [r3, #4]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 0201 	orr.w	r2, r2, #1
 8007f18:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f1e:	2200      	movs	r2, #0
 8007f20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f26:	2200      	movs	r2, #0
 8007f28:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f2e:	2200      	movs	r2, #0
 8007f30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f36:	2200      	movs	r2, #0
 8007f38:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f42:	4619      	mov	r1, r3
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	330c      	adds	r3, #12
 8007f4a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f50:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007f52:	f7fa fde7 	bl	8002b24 <HAL_DMA_Start_IT>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00c      	beq.n	8007f76 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f60:	f043 0210 	orr.w	r2, r3, #16
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8007f74:	e01e      	b.n	8007fb4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f80:	2b40      	cmp	r3, #64	; 0x40
 8007f82:	d007      	beq.n	8007f94 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f92:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	685a      	ldr	r2, [r3, #4]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0220 	orr.w	r2, r2, #32
 8007fa2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	685a      	ldr	r2, [r3, #4]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 0202 	orr.w	r2, r2, #2
 8007fb2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	0800837d 	.word	0x0800837d
 8007fcc:	08008241 	.word	0x08008241
 8007fd0:	08008399 	.word	0x08008399
 8007fd4:	080082eb 	.word	0x080082eb
 8007fd8:	080083b5 	.word	0x080083b5

08007fdc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	099b      	lsrs	r3, r3, #6
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10f      	bne.n	8008020 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	099b      	lsrs	r3, r3, #6
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d004      	beq.n	8008020 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
    return;
 800801e:	e0d7      	b.n	80081d0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	085b      	lsrs	r3, r3, #1
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00a      	beq.n	8008042 <HAL_SPI_IRQHandler+0x66>
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	09db      	lsrs	r3, r3, #7
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
    return;
 8008040:	e0c6      	b.n	80081d0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	095b      	lsrs	r3, r3, #5
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10c      	bne.n	8008068 <HAL_SPI_IRQHandler+0x8c>
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	099b      	lsrs	r3, r3, #6
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d106      	bne.n	8008068 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	0a1b      	lsrs	r3, r3, #8
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 80b4 	beq.w	80081d0 <HAL_SPI_IRQHandler+0x1f4>
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 80ad 	beq.w	80081d0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	099b      	lsrs	r3, r3, #6
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	d023      	beq.n	80080ca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b03      	cmp	r3, #3
 800808c:	d011      	beq.n	80080b2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008092:	f043 0204 	orr.w	r2, r3, #4
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	e00b      	b.n	80080ca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080b2:	2300      	movs	r3, #0
 80080b4:	613b      	str	r3, [r7, #16]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	613b      	str	r3, [r7, #16]
 80080c6:	693b      	ldr	r3, [r7, #16]
        return;
 80080c8:	e082      	b.n	80081d0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	095b      	lsrs	r3, r3, #5
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d014      	beq.n	8008100 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080da:	f043 0201 	orr.w	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	0a1b      	lsrs	r3, r3, #8
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00c      	beq.n	8008126 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008110:	f043 0208 	orr.w	r2, r3, #8
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008118:	2300      	movs	r3, #0
 800811a:	60bb      	str	r3, [r7, #8]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	60bb      	str	r3, [r7, #8]
 8008124:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800812a:	2b00      	cmp	r3, #0
 800812c:	d04f      	beq.n	80081ce <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800813c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d104      	bne.n	800815a <HAL_SPI_IRQHandler+0x17e>
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b00      	cmp	r3, #0
 8008158:	d034      	beq.n	80081c4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0203 	bic.w	r2, r2, #3
 8008168:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800816e:	2b00      	cmp	r3, #0
 8008170:	d011      	beq.n	8008196 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008176:	4a18      	ldr	r2, [pc, #96]	; (80081d8 <HAL_SPI_IRQHandler+0x1fc>)
 8008178:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817e:	4618      	mov	r0, r3
 8008180:	f7fa fda0 	bl	8002cc4 <HAL_DMA_Abort_IT>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800818e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819a:	2b00      	cmp	r3, #0
 800819c:	d016      	beq.n	80081cc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a2:	4a0d      	ldr	r2, [pc, #52]	; (80081d8 <HAL_SPI_IRQHandler+0x1fc>)
 80081a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fa fd8a 	bl	8002cc4 <HAL_DMA_Abort_IT>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80081c2:	e003      	b.n	80081cc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f831 	bl	800822c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80081ca:	e000      	b.n	80081ce <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80081cc:	bf00      	nop
    return;
 80081ce:	bf00      	nop
  }
}
 80081d0:	3720      	adds	r7, #32
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	080083f5 	.word	0x080083f5

080081dc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824c:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800824e:	f7fa fa79 	bl	8002744 <HAL_GetTick>
 8008252:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008262:	d03c      	beq.n	80082de <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685a      	ldr	r2, [r3, #4]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 0220 	bic.w	r2, r2, #32
 8008272:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10d      	bne.n	8008298 <SPI_DMAReceiveCplt+0x58>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008284:	d108      	bne.n	8008298 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0203 	bic.w	r2, r2, #3
 8008294:	605a      	str	r2, [r3, #4]
 8008296:	e007      	b.n	80082a8 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	685a      	ldr	r2, [r3, #4]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0201 	bic.w	r2, r2, #1
 80082a6:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	2164      	movs	r1, #100	; 0x64
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 f9d5 	bl	800865c <SPI_EndRxTransaction>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d002      	beq.n	80082be <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2220      	movs	r2, #32
 80082bc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80082d6:	68f8      	ldr	r0, [r7, #12]
 80082d8:	f7ff ffa8 	bl	800822c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80082dc:	e002      	b.n	80082e4 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7ff ff7c 	bl	80081dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f6:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80082f8:	f7fa fa24 	bl	8002744 <HAL_GetTick>
 80082fc:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800830c:	d030      	beq.n	8008370 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f022 0220 	bic.w	r2, r2, #32
 800831c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800831e:	68ba      	ldr	r2, [r7, #8]
 8008320:	2164      	movs	r1, #100	; 0x64
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 fa16 	bl	8008754 <SPI_EndRxTxTransaction>
 8008328:	4603      	mov	r3, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	d005      	beq.n	800833a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008332:	f043 0220 	orr.w	r2, r3, #32
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685a      	ldr	r2, [r3, #4]
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f022 0203 	bic.w	r2, r2, #3
 8008348:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	2200      	movs	r2, #0
 800834e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2200      	movs	r2, #0
 8008354:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff ff5f 	bl	800822c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800836e:	e002      	b.n	8008376 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7ff ff3d 	bl	80081f0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008376:	3710      	adds	r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800838a:	68f8      	ldr	r0, [r7, #12]
 800838c:	f7ff ff3a 	bl	8008204 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008390:	bf00      	nop
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7ff ff36 	bl	8008218 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083ac:	bf00      	nop
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 0203 	bic.w	r2, r2, #3
 80083d0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083d6:	f043 0210 	orr.w	r2, r3, #16
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80083e6:	68f8      	ldr	r0, [r7, #12]
 80083e8:	f7ff ff20 	bl	800822c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80083ec:	bf00      	nop
 80083ee:	3710      	adds	r7, #16
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008400:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f7ff ff0b 	bl	800822c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008416:	bf00      	nop
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
	...

08008420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b088      	sub	sp, #32
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	603b      	str	r3, [r7, #0]
 800842c:	4613      	mov	r3, r2
 800842e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008430:	f7fa f988 	bl	8002744 <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	1a9b      	subs	r3, r3, r2
 800843a:	683a      	ldr	r2, [r7, #0]
 800843c:	4413      	add	r3, r2
 800843e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008440:	f7fa f980 	bl	8002744 <HAL_GetTick>
 8008444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008446:	4b39      	ldr	r3, [pc, #228]	; (800852c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	015b      	lsls	r3, r3, #5
 800844c:	0d1b      	lsrs	r3, r3, #20
 800844e:	69fa      	ldr	r2, [r7, #28]
 8008450:	fb02 f303 	mul.w	r3, r2, r3
 8008454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008456:	e054      	b.n	8008502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800845e:	d050      	beq.n	8008502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008460:	f7fa f970 	bl	8002744 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	69bb      	ldr	r3, [r7, #24]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	69fa      	ldr	r2, [r7, #28]
 800846c:	429a      	cmp	r2, r3
 800846e:	d902      	bls.n	8008476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d13d      	bne.n	80084f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800848e:	d111      	bne.n	80084b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008498:	d004      	beq.n	80084a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a2:	d107      	bne.n	80084b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084bc:	d10f      	bne.n	80084de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084cc:	601a      	str	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e017      	b.n	8008522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d101      	bne.n	80084fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084f8:	2300      	movs	r3, #0
 80084fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	3b01      	subs	r3, #1
 8008500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	4013      	ands	r3, r2
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	429a      	cmp	r2, r3
 8008510:	bf0c      	ite	eq
 8008512:	2301      	moveq	r3, #1
 8008514:	2300      	movne	r3, #0
 8008516:	b2db      	uxtb	r3, r3
 8008518:	461a      	mov	r2, r3
 800851a:	79fb      	ldrb	r3, [r7, #7]
 800851c:	429a      	cmp	r2, r3
 800851e:	d19b      	bne.n	8008458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3720      	adds	r7, #32
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	20000000 	.word	0x20000000

08008530 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08a      	sub	sp, #40	; 0x28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800853e:	2300      	movs	r3, #0
 8008540:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008542:	f7fa f8ff 	bl	8002744 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	1a9b      	subs	r3, r3, r2
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	4413      	add	r3, r2
 8008550:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8008552:	f7fa f8f7 	bl	8002744 <HAL_GetTick>
 8008556:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	330c      	adds	r3, #12
 800855e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008560:	4b3d      	ldr	r3, [pc, #244]	; (8008658 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	00da      	lsls	r2, r3, #3
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	0d1b      	lsrs	r3, r3, #20
 8008570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008572:	fb02 f303 	mul.w	r3, r2, r3
 8008576:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008578:	e060      	b.n	800863c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008580:	d107      	bne.n	8008592 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d104      	bne.n	8008592 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	b2db      	uxtb	r3, r3
 800858e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008590:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008598:	d050      	beq.n	800863c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800859a:	f7fa f8d3 	bl	8002744 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d902      	bls.n	80085b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d13d      	bne.n	800862c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085c8:	d111      	bne.n	80085ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d2:	d004      	beq.n	80085de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085dc:	d107      	bne.n	80085ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f6:	d10f      	bne.n	8008618 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008616:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e010      	b.n	800864e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	3b01      	subs	r3, #1
 800863a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689a      	ldr	r2, [r3, #8]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	4013      	ands	r3, r2
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	429a      	cmp	r2, r3
 800864a:	d196      	bne.n	800857a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3728      	adds	r7, #40	; 0x28
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20000000 	.word	0x20000000

0800865c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b088      	sub	sp, #32
 8008660:	af02      	add	r7, sp, #8
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008670:	d111      	bne.n	8008696 <SPI_EndRxTransaction+0x3a>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800867a:	d004      	beq.n	8008686 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008684:	d107      	bne.n	8008696 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008694:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800869e:	d112      	bne.n	80086c6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2200      	movs	r2, #0
 80086a8:	2180      	movs	r1, #128	; 0x80
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f7ff feb8 	bl	8008420 <SPI_WaitFlagStateUntilTimeout>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d021      	beq.n	80086fa <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ba:	f043 0220 	orr.w	r2, r3, #32
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e03d      	b.n	8008742 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80086c6:	4b21      	ldr	r3, [pc, #132]	; (800874c <SPI_EndRxTransaction+0xf0>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a21      	ldr	r2, [pc, #132]	; (8008750 <SPI_EndRxTransaction+0xf4>)
 80086cc:	fba2 2303 	umull	r2, r3, r2, r3
 80086d0:	0d5b      	lsrs	r3, r3, #21
 80086d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80086d6:	fb02 f303 	mul.w	r3, r2, r3
 80086da:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	3b01      	subs	r3, #1
 80086e6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086f2:	2b80      	cmp	r3, #128	; 0x80
 80086f4:	d0f2      	beq.n	80086dc <SPI_EndRxTransaction+0x80>
 80086f6:	e000      	b.n	80086fa <SPI_EndRxTransaction+0x9e>
        break;
 80086f8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008702:	d11d      	bne.n	8008740 <SPI_EndRxTransaction+0xe4>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800870c:	d004      	beq.n	8008718 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008716:	d113      	bne.n	8008740 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	9300      	str	r3, [sp, #0]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2200      	movs	r2, #0
 8008720:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f7ff ff03 	bl	8008530 <SPI_WaitFifoStateUntilTimeout>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d007      	beq.n	8008740 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008734:	f043 0220 	orr.w	r2, r3, #32
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e000      	b.n	8008742 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	20000000 	.word	0x20000000
 8008750:	165e9f81 	.word	0x165e9f81

08008754 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b088      	sub	sp, #32
 8008758:	af02      	add	r7, sp, #8
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2200      	movs	r2, #0
 8008768:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f7ff fedf 	bl	8008530 <SPI_WaitFifoStateUntilTimeout>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d007      	beq.n	8008788 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800877c:	f043 0220 	orr.w	r2, r3, #32
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008784:	2303      	movs	r3, #3
 8008786:	e046      	b.n	8008816 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008788:	4b25      	ldr	r3, [pc, #148]	; (8008820 <SPI_EndRxTxTransaction+0xcc>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a25      	ldr	r2, [pc, #148]	; (8008824 <SPI_EndRxTxTransaction+0xd0>)
 800878e:	fba2 2303 	umull	r2, r3, r2, r3
 8008792:	0d5b      	lsrs	r3, r3, #21
 8008794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008798:	fb02 f303 	mul.w	r3, r2, r3
 800879c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087a6:	d112      	bne.n	80087ce <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	9300      	str	r3, [sp, #0]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	2200      	movs	r2, #0
 80087b0:	2180      	movs	r1, #128	; 0x80
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f7ff fe34 	bl	8008420 <SPI_WaitFlagStateUntilTimeout>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d016      	beq.n	80087ec <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087c2:	f043 0220 	orr.w	r2, r3, #32
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e023      	b.n	8008816 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00a      	beq.n	80087ea <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	3b01      	subs	r3, #1
 80087d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087e4:	2b80      	cmp	r3, #128	; 0x80
 80087e6:	d0f2      	beq.n	80087ce <SPI_EndRxTxTransaction+0x7a>
 80087e8:	e000      	b.n	80087ec <SPI_EndRxTxTransaction+0x98>
        break;
 80087ea:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80087f8:	68f8      	ldr	r0, [r7, #12]
 80087fa:	f7ff fe99 	bl	8008530 <SPI_WaitFifoStateUntilTimeout>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d007      	beq.n	8008814 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008808:	f043 0220 	orr.w	r2, r3, #32
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008810:	2303      	movs	r3, #3
 8008812:	e000      	b.n	8008816 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008814:	2300      	movs	r3, #0
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000000 	.word	0x20000000
 8008824:	165e9f81 	.word	0x165e9f81

08008828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e049      	b.n	80088ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d106      	bne.n	8008854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7f9 f994 	bl	8001b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2202      	movs	r2, #2
 8008858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3304      	adds	r3, #4
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f000 fa24 	bl	8008cb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2201      	movs	r2, #1
 8008878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2201      	movs	r2, #1
 8008898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80088d8:	b480      	push	{r7}
 80088da:	b085      	sub	sp, #20
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d001      	beq.n	80088f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e054      	b.n	800899a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2202      	movs	r2, #2
 80088f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68da      	ldr	r2, [r3, #12]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f042 0201 	orr.w	r2, r2, #1
 8008906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a26      	ldr	r2, [pc, #152]	; (80089a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d022      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x80>
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800891a:	d01d      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x80>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a22      	ldr	r2, [pc, #136]	; (80089ac <HAL_TIM_Base_Start_IT+0xd4>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d018      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x80>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a21      	ldr	r2, [pc, #132]	; (80089b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d013      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x80>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a1f      	ldr	r2, [pc, #124]	; (80089b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d00e      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x80>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a1e      	ldr	r2, [pc, #120]	; (80089b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d009      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x80>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a1c      	ldr	r2, [pc, #112]	; (80089bc <HAL_TIM_Base_Start_IT+0xe4>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d004      	beq.n	8008958 <HAL_TIM_Base_Start_IT+0x80>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a1b      	ldr	r2, [pc, #108]	; (80089c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d115      	bne.n	8008984 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689a      	ldr	r2, [r3, #8]
 800895e:	4b19      	ldr	r3, [pc, #100]	; (80089c4 <HAL_TIM_Base_Start_IT+0xec>)
 8008960:	4013      	ands	r3, r2
 8008962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2b06      	cmp	r3, #6
 8008968:	d015      	beq.n	8008996 <HAL_TIM_Base_Start_IT+0xbe>
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008970:	d011      	beq.n	8008996 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f042 0201 	orr.w	r2, r2, #1
 8008980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008982:	e008      	b.n	8008996 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0201 	orr.w	r2, r2, #1
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	e000      	b.n	8008998 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008996:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008998:	2300      	movs	r3, #0
}
 800899a:	4618      	mov	r0, r3
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
 80089a6:	bf00      	nop
 80089a8:	40010000 	.word	0x40010000
 80089ac:	40000400 	.word	0x40000400
 80089b0:	40000800 	.word	0x40000800
 80089b4:	40000c00 	.word	0x40000c00
 80089b8:	40010400 	.word	0x40010400
 80089bc:	40014000 	.word	0x40014000
 80089c0:	40001800 	.word	0x40001800
 80089c4:	00010007 	.word	0x00010007

080089c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 0201 	bic.w	r2, r2, #1
 80089de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6a1a      	ldr	r2, [r3, #32]
 80089e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80089ea:	4013      	ands	r3, r2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10f      	bne.n	8008a10 <HAL_TIM_Base_Stop_IT+0x48>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6a1a      	ldr	r2, [r3, #32]
 80089f6:	f240 4344 	movw	r3, #1092	; 0x444
 80089fa:	4013      	ands	r3, r2
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d107      	bne.n	8008a10 <HAL_TIM_Base_Stop_IT+0x48>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0201 	bic.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b082      	sub	sp, #8
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d122      	bne.n	8008a82 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d11b      	bne.n	8008a82 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f06f 0202 	mvn.w	r2, #2
 8008a52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 f905 	bl	8008c78 <HAL_TIM_IC_CaptureCallback>
 8008a6e:	e005      	b.n	8008a7c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f8f7 	bl	8008c64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f908 	bl	8008c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	2b04      	cmp	r3, #4
 8008a8e:	d122      	bne.n	8008ad6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d11b      	bne.n	8008ad6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f06f 0204 	mvn.w	r2, #4
 8008aa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d003      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f8db 	bl	8008c78 <HAL_TIM_IC_CaptureCallback>
 8008ac2:	e005      	b.n	8008ad0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f8cd 	bl	8008c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f8de 	bl	8008c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	f003 0308 	and.w	r3, r3, #8
 8008ae0:	2b08      	cmp	r3, #8
 8008ae2:	d122      	bne.n	8008b2a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	f003 0308 	and.w	r3, r3, #8
 8008aee:	2b08      	cmp	r3, #8
 8008af0:	d11b      	bne.n	8008b2a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f06f 0208 	mvn.w	r2, #8
 8008afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2204      	movs	r2, #4
 8008b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	f003 0303 	and.w	r3, r3, #3
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 f8b1 	bl	8008c78 <HAL_TIM_IC_CaptureCallback>
 8008b16:	e005      	b.n	8008b24 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 f8a3 	bl	8008c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f8b4 	bl	8008c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	691b      	ldr	r3, [r3, #16]
 8008b30:	f003 0310 	and.w	r3, r3, #16
 8008b34:	2b10      	cmp	r3, #16
 8008b36:	d122      	bne.n	8008b7e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	f003 0310 	and.w	r3, r3, #16
 8008b42:	2b10      	cmp	r3, #16
 8008b44:	d11b      	bne.n	8008b7e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f06f 0210 	mvn.w	r2, #16
 8008b4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2208      	movs	r2, #8
 8008b54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	69db      	ldr	r3, [r3, #28]
 8008b5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d003      	beq.n	8008b6c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 f887 	bl	8008c78 <HAL_TIM_IC_CaptureCallback>
 8008b6a:	e005      	b.n	8008b78 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f879 	bl	8008c64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f88a 	bl	8008c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d10e      	bne.n	8008baa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d107      	bne.n	8008baa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f06f 0201 	mvn.w	r2, #1
 8008ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f00d f8cf 	bl	8015d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bb4:	2b80      	cmp	r3, #128	; 0x80
 8008bb6:	d10e      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d107      	bne.n	8008bd6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f9a7 	bl	8008f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008be4:	d10e      	bne.n	8008c04 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bf0:	2b80      	cmp	r3, #128	; 0x80
 8008bf2:	d107      	bne.n	8008c04 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f99a 	bl	8008f38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0e:	2b40      	cmp	r3, #64	; 0x40
 8008c10:	d10e      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1c:	2b40      	cmp	r3, #64	; 0x40
 8008c1e:	d107      	bne.n	8008c30 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f838 	bl	8008ca0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	d10e      	bne.n	8008c5c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	f003 0320 	and.w	r3, r3, #32
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d107      	bne.n	8008c5c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f06f 0220 	mvn.w	r2, #32
 8008c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f95a 	bl	8008f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c5c:	bf00      	nop
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c6c:	bf00      	nop
 8008c6e:	370c      	adds	r7, #12
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c80:	bf00      	nop
 8008c82:	370c      	adds	r7, #12
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr

08008c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c8c:	b480      	push	{r7}
 8008c8e:	b083      	sub	sp, #12
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c94:	bf00      	nop
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a40      	ldr	r2, [pc, #256]	; (8008dc8 <TIM_Base_SetConfig+0x114>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d013      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cd2:	d00f      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a3d      	ldr	r2, [pc, #244]	; (8008dcc <TIM_Base_SetConfig+0x118>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d00b      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a3c      	ldr	r2, [pc, #240]	; (8008dd0 <TIM_Base_SetConfig+0x11c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d007      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a3b      	ldr	r2, [pc, #236]	; (8008dd4 <TIM_Base_SetConfig+0x120>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d003      	beq.n	8008cf4 <TIM_Base_SetConfig+0x40>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a3a      	ldr	r2, [pc, #232]	; (8008dd8 <TIM_Base_SetConfig+0x124>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d108      	bne.n	8008d06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a2f      	ldr	r2, [pc, #188]	; (8008dc8 <TIM_Base_SetConfig+0x114>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d02b      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d14:	d027      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a2c      	ldr	r2, [pc, #176]	; (8008dcc <TIM_Base_SetConfig+0x118>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d023      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a2b      	ldr	r2, [pc, #172]	; (8008dd0 <TIM_Base_SetConfig+0x11c>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d01f      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a2a      	ldr	r2, [pc, #168]	; (8008dd4 <TIM_Base_SetConfig+0x120>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d01b      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a29      	ldr	r2, [pc, #164]	; (8008dd8 <TIM_Base_SetConfig+0x124>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d017      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a28      	ldr	r2, [pc, #160]	; (8008ddc <TIM_Base_SetConfig+0x128>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d013      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a27      	ldr	r2, [pc, #156]	; (8008de0 <TIM_Base_SetConfig+0x12c>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d00f      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a26      	ldr	r2, [pc, #152]	; (8008de4 <TIM_Base_SetConfig+0x130>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d00b      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a25      	ldr	r2, [pc, #148]	; (8008de8 <TIM_Base_SetConfig+0x134>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d007      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a24      	ldr	r2, [pc, #144]	; (8008dec <TIM_Base_SetConfig+0x138>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d003      	beq.n	8008d66 <TIM_Base_SetConfig+0xb2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a23      	ldr	r2, [pc, #140]	; (8008df0 <TIM_Base_SetConfig+0x13c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d108      	bne.n	8008d78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	689a      	ldr	r2, [r3, #8]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a0a      	ldr	r2, [pc, #40]	; (8008dc8 <TIM_Base_SetConfig+0x114>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d003      	beq.n	8008dac <TIM_Base_SetConfig+0xf8>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	4a0c      	ldr	r2, [pc, #48]	; (8008dd8 <TIM_Base_SetConfig+0x124>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d103      	bne.n	8008db4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	691a      	ldr	r2, [r3, #16]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	615a      	str	r2, [r3, #20]
}
 8008dba:	bf00      	nop
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	40010000 	.word	0x40010000
 8008dcc:	40000400 	.word	0x40000400
 8008dd0:	40000800 	.word	0x40000800
 8008dd4:	40000c00 	.word	0x40000c00
 8008dd8:	40010400 	.word	0x40010400
 8008ddc:	40014000 	.word	0x40014000
 8008de0:	40014400 	.word	0x40014400
 8008de4:	40014800 	.word	0x40014800
 8008de8:	40001800 	.word	0x40001800
 8008dec:	40001c00 	.word	0x40001c00
 8008df0:	40002000 	.word	0x40002000

08008df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d101      	bne.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	e06d      	b.n	8008ee8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a30      	ldr	r2, [pc, #192]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d004      	beq.n	8008e40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a2f      	ldr	r2, [pc, #188]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d108      	bne.n	8008e52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	68fa      	ldr	r2, [r7, #12]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a20      	ldr	r2, [pc, #128]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d022      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e7e:	d01d      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a1d      	ldr	r2, [pc, #116]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d018      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a1c      	ldr	r2, [pc, #112]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d013      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a1a      	ldr	r2, [pc, #104]	; (8008f04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d00e      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a15      	ldr	r2, [pc, #84]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d009      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a16      	ldr	r2, [pc, #88]	; (8008f08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d004      	beq.n	8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a15      	ldr	r2, [pc, #84]	; (8008f0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d10c      	bne.n	8008ed6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ec2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68ba      	ldr	r2, [r7, #8]
 8008ed4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3714      	adds	r7, #20
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	40010000 	.word	0x40010000
 8008ef8:	40010400 	.word	0x40010400
 8008efc:	40000400 	.word	0x40000400
 8008f00:	40000800 	.word	0x40000800
 8008f04:	40000c00 	.word	0x40000c00
 8008f08:	40014000 	.word	0x40014000
 8008f0c:	40001800 	.word	0x40001800

08008f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008f40:	bf00      	nop
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr

08008f4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e040      	b.n	8008fe0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d106      	bne.n	8008f74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7f8 fe2a 	bl	8001bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2224      	movs	r2, #36	; 0x24
 8008f78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f022 0201 	bic.w	r2, r2, #1
 8008f88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 fd44 	bl	8009a18 <UART_SetConfig>
 8008f90:	4603      	mov	r3, r0
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d101      	bne.n	8008f9a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008f96:	2301      	movs	r3, #1
 8008f98:	e022      	b.n	8008fe0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d002      	beq.n	8008fa8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f000 ff9c 	bl	8009ee0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685a      	ldr	r2, [r3, #4]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689a      	ldr	r2, [r3, #8]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0201 	orr.w	r2, r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f001 f823 	bl	800a024 <UART_CheckIdleState>
 8008fde:	4603      	mov	r3, r0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08a      	sub	sp, #40	; 0x28
 8008fec:	af02      	add	r7, sp, #8
 8008fee:	60f8      	str	r0, [r7, #12]
 8008ff0:	60b9      	str	r1, [r7, #8]
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	4613      	mov	r3, r2
 8008ff6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ffc:	2b20      	cmp	r3, #32
 8008ffe:	d171      	bne.n	80090e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <HAL_UART_Transmit+0x24>
 8009006:	88fb      	ldrh	r3, [r7, #6]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e06a      	b.n	80090e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	2200      	movs	r2, #0
 8009014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2221      	movs	r2, #33	; 0x21
 800901c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800901e:	f7f9 fb91 	bl	8002744 <HAL_GetTick>
 8009022:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	88fa      	ldrh	r2, [r7, #6]
 8009028:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	88fa      	ldrh	r2, [r7, #6]
 8009030:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800903c:	d108      	bne.n	8009050 <HAL_UART_Transmit+0x68>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d104      	bne.n	8009050 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009046:	2300      	movs	r3, #0
 8009048:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	61bb      	str	r3, [r7, #24]
 800904e:	e003      	b.n	8009058 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009054:	2300      	movs	r3, #0
 8009056:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009058:	e02c      	b.n	80090b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	2200      	movs	r2, #0
 8009062:	2180      	movs	r1, #128	; 0x80
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f001 f814 	bl	800a092 <UART_WaitOnFlagUntilTimeout>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e038      	b.n	80090e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10b      	bne.n	8009092 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	881b      	ldrh	r3, [r3, #0]
 800907e:	461a      	mov	r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009088:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	3302      	adds	r3, #2
 800908e:	61bb      	str	r3, [r7, #24]
 8009090:	e007      	b.n	80090a2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	781a      	ldrb	r2, [r3, #0]
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	3301      	adds	r3, #1
 80090a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	3b01      	subs	r3, #1
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1cc      	bne.n	800905a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	9300      	str	r3, [sp, #0]
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2200      	movs	r2, #0
 80090c8:	2140      	movs	r1, #64	; 0x40
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	f000 ffe1 	bl	800a092 <UART_WaitOnFlagUntilTimeout>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e005      	b.n	80090e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2220      	movs	r2, #32
 80090de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80090e0:	2300      	movs	r3, #0
 80090e2:	e000      	b.n	80090e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80090e4:	2302      	movs	r3, #2
  }
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3720      	adds	r7, #32
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b08a      	sub	sp, #40	; 0x28
 80090f2:	af02      	add	r7, sp, #8
 80090f4:	60f8      	str	r0, [r7, #12]
 80090f6:	60b9      	str	r1, [r7, #8]
 80090f8:	603b      	str	r3, [r7, #0]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009104:	2b20      	cmp	r3, #32
 8009106:	f040 80b1 	bne.w	800926c <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <HAL_UART_Receive+0x28>
 8009110:	88fb      	ldrh	r3, [r7, #6]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e0a9      	b.n	800926e <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2200      	movs	r2, #0
 800911e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2222      	movs	r2, #34	; 0x22
 8009126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2200      	movs	r2, #0
 800912e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009130:	f7f9 fb08 	bl	8002744 <HAL_GetTick>
 8009134:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	88fa      	ldrh	r2, [r7, #6]
 800913a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	88fa      	ldrh	r2, [r7, #6]
 8009142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800914e:	d10e      	bne.n	800916e <HAL_UART_Receive+0x80>
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d105      	bne.n	8009164 <HAL_UART_Receive+0x76>
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800915e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009162:	e02d      	b.n	80091c0 <HAL_UART_Receive+0xd2>
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	22ff      	movs	r2, #255	; 0xff
 8009168:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800916c:	e028      	b.n	80091c0 <HAL_UART_Receive+0xd2>
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10d      	bne.n	8009192 <HAL_UART_Receive+0xa4>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d104      	bne.n	8009188 <HAL_UART_Receive+0x9a>
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	22ff      	movs	r2, #255	; 0xff
 8009182:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009186:	e01b      	b.n	80091c0 <HAL_UART_Receive+0xd2>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	227f      	movs	r2, #127	; 0x7f
 800918c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009190:	e016      	b.n	80091c0 <HAL_UART_Receive+0xd2>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800919a:	d10d      	bne.n	80091b8 <HAL_UART_Receive+0xca>
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d104      	bne.n	80091ae <HAL_UART_Receive+0xc0>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	227f      	movs	r2, #127	; 0x7f
 80091a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091ac:	e008      	b.n	80091c0 <HAL_UART_Receive+0xd2>
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	223f      	movs	r2, #63	; 0x3f
 80091b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80091b6:	e003      	b.n	80091c0 <HAL_UART_Receive+0xd2>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091c6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091d0:	d108      	bne.n	80091e4 <HAL_UART_Receive+0xf6>
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d104      	bne.n	80091e4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80091da:	2300      	movs	r3, #0
 80091dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	61bb      	str	r3, [r7, #24]
 80091e2:	e003      	b.n	80091ec <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091e8:	2300      	movs	r3, #0
 80091ea:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80091ec:	e032      	b.n	8009254 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	2200      	movs	r2, #0
 80091f6:	2120      	movs	r1, #32
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 ff4a 	bl	800a092 <UART_WaitOnFlagUntilTimeout>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e032      	b.n	800926e <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d10c      	bne.n	8009228 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	b29a      	uxth	r2, r3
 8009216:	8a7b      	ldrh	r3, [r7, #18]
 8009218:	4013      	ands	r3, r2
 800921a:	b29a      	uxth	r2, r3
 800921c:	69bb      	ldr	r3, [r7, #24]
 800921e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	3302      	adds	r3, #2
 8009224:	61bb      	str	r3, [r7, #24]
 8009226:	e00c      	b.n	8009242 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922e:	b2da      	uxtb	r2, r3
 8009230:	8a7b      	ldrh	r3, [r7, #18]
 8009232:	b2db      	uxtb	r3, r3
 8009234:	4013      	ands	r3, r2
 8009236:	b2da      	uxtb	r2, r3
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800923c:	69fb      	ldr	r3, [r7, #28]
 800923e:	3301      	adds	r3, #1
 8009240:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009248:	b29b      	uxth	r3, r3
 800924a:	3b01      	subs	r3, #1
 800924c:	b29a      	uxth	r2, r3
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800925a:	b29b      	uxth	r3, r3
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1c6      	bne.n	80091ee <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2220      	movs	r2, #32
 8009264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	e000      	b.n	800926e <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800926c:	2302      	movs	r3, #2
  }
}
 800926e:	4618      	mov	r0, r3
 8009270:	3720      	adds	r7, #32
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08a      	sub	sp, #40	; 0x28
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	4613      	mov	r3, r2
 8009284:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800928a:	2b20      	cmp	r3, #32
 800928c:	d165      	bne.n	800935a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d002      	beq.n	800929a <HAL_UART_Transmit_DMA+0x22>
 8009294:	88fb      	ldrh	r3, [r7, #6]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	e05e      	b.n	800935c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	68ba      	ldr	r2, [r7, #8]
 80092a2:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	88fa      	ldrh	r2, [r7, #6]
 80092a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	88fa      	ldrh	r2, [r7, #6]
 80092b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2221      	movs	r2, #33	; 0x21
 80092c0:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d027      	beq.n	800931a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ce:	4a25      	ldr	r2, [pc, #148]	; (8009364 <HAL_UART_Transmit_DMA+0xec>)
 80092d0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d6:	4a24      	ldr	r2, [pc, #144]	; (8009368 <HAL_UART_Transmit_DMA+0xf0>)
 80092d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092de:	4a23      	ldr	r2, [pc, #140]	; (800936c <HAL_UART_Transmit_DMA+0xf4>)
 80092e0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e6:	2200      	movs	r2, #0
 80092e8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f2:	4619      	mov	r1, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	3328      	adds	r3, #40	; 0x28
 80092fa:	461a      	mov	r2, r3
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	f7f9 fc11 	bl	8002b24 <HAL_DMA_Start_IT>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d008      	beq.n	800931a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2210      	movs	r2, #16
 800930c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2220      	movs	r2, #32
 8009314:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e020      	b.n	800935c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2240      	movs	r2, #64	; 0x40
 8009320:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	3308      	adds	r3, #8
 8009328:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	e853 3f00 	ldrex	r3, [r3]
 8009330:	613b      	str	r3, [r7, #16]
   return(result);
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3308      	adds	r3, #8
 8009340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009342:	623a      	str	r2, [r7, #32]
 8009344:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009346:	69f9      	ldr	r1, [r7, #28]
 8009348:	6a3a      	ldr	r2, [r7, #32]
 800934a:	e841 2300 	strex	r3, r2, [r1]
 800934e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1e5      	bne.n	8009322 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	e000      	b.n	800935c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800935a:	2302      	movs	r3, #2
  }
}
 800935c:	4618      	mov	r0, r3
 800935e:	3728      	adds	r7, #40	; 0x28
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	0800a475 	.word	0x0800a475
 8009368:	0800a50b 	.word	0x0800a50b
 800936c:	0800a68d 	.word	0x0800a68d

08009370 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b08a      	sub	sp, #40	; 0x28
 8009374:	af00      	add	r7, sp, #0
 8009376:	60f8      	str	r0, [r7, #12]
 8009378:	60b9      	str	r1, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009384:	2b20      	cmp	r3, #32
 8009386:	d132      	bne.n	80093ee <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d002      	beq.n	8009394 <HAL_UART_Receive_DMA+0x24>
 800938e:	88fb      	ldrh	r3, [r7, #6]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d101      	bne.n	8009398 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e02b      	b.n	80093f0 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d018      	beq.n	80093de <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	e853 3f00 	ldrex	r3, [r3]
 80093b8:	613b      	str	r3, [r7, #16]
   return(result);
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80093c0:	627b      	str	r3, [r7, #36]	; 0x24
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	461a      	mov	r2, r3
 80093c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ca:	623b      	str	r3, [r7, #32]
 80093cc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	69f9      	ldr	r1, [r7, #28]
 80093d0:	6a3a      	ldr	r2, [r7, #32]
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e6      	bne.n	80093ac <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80093de:	88fb      	ldrh	r3, [r7, #6]
 80093e0:	461a      	mov	r2, r3
 80093e2:	68b9      	ldr	r1, [r7, #8]
 80093e4:	68f8      	ldr	r0, [r7, #12]
 80093e6:	f000 ff1b 	bl	800a220 <UART_Start_Receive_DMA>
 80093ea:	4603      	mov	r3, r0
 80093ec:	e000      	b.n	80093f0 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 80093ee:	2302      	movs	r3, #2
  }
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3728      	adds	r7, #40	; 0x28
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}

080093f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b0ba      	sub	sp, #232	; 0xe8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800941e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009422:	f640 030f 	movw	r3, #2063	; 0x80f
 8009426:	4013      	ands	r3, r2
 8009428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800942c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009430:	2b00      	cmp	r3, #0
 8009432:	d115      	bne.n	8009460 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009438:	f003 0320 	and.w	r3, r3, #32
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00f      	beq.n	8009460 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009444:	f003 0320 	and.w	r3, r3, #32
 8009448:	2b00      	cmp	r3, #0
 800944a:	d009      	beq.n	8009460 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009450:	2b00      	cmp	r3, #0
 8009452:	f000 8297 	beq.w	8009984 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	4798      	blx	r3
      }
      return;
 800945e:	e291      	b.n	8009984 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009464:	2b00      	cmp	r3, #0
 8009466:	f000 8117 	beq.w	8009698 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800946a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b00      	cmp	r3, #0
 8009474:	d106      	bne.n	8009484 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009476:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800947a:	4b85      	ldr	r3, [pc, #532]	; (8009690 <HAL_UART_IRQHandler+0x298>)
 800947c:	4013      	ands	r3, r2
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 810a 	beq.w	8009698 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009488:	f003 0301 	and.w	r3, r3, #1
 800948c:	2b00      	cmp	r3, #0
 800948e:	d011      	beq.n	80094b4 <HAL_UART_IRQHandler+0xbc>
 8009490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00b      	beq.n	80094b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2201      	movs	r2, #1
 80094a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094aa:	f043 0201 	orr.w	r2, r3, #1
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094b8:	f003 0302 	and.w	r3, r3, #2
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d011      	beq.n	80094e4 <HAL_UART_IRQHandler+0xec>
 80094c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2202      	movs	r2, #2
 80094d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094da:	f043 0204 	orr.w	r2, r3, #4
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d011      	beq.n	8009514 <HAL_UART_IRQHandler+0x11c>
 80094f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00b      	beq.n	8009514 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2204      	movs	r2, #4
 8009502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800950a:	f043 0202 	orr.w	r2, r3, #2
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009518:	f003 0308 	and.w	r3, r3, #8
 800951c:	2b00      	cmp	r3, #0
 800951e:	d017      	beq.n	8009550 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009524:	f003 0320 	and.w	r3, r3, #32
 8009528:	2b00      	cmp	r3, #0
 800952a:	d105      	bne.n	8009538 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800952c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009530:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00b      	beq.n	8009550 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2208      	movs	r2, #8
 800953e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009546:	f043 0208 	orr.w	r2, r3, #8
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009558:	2b00      	cmp	r3, #0
 800955a:	d012      	beq.n	8009582 <HAL_UART_IRQHandler+0x18a>
 800955c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00c      	beq.n	8009582 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009578:	f043 0220 	orr.w	r2, r3, #32
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 81fd 	beq.w	8009988 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800958e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009592:	f003 0320 	and.w	r3, r3, #32
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00d      	beq.n	80095b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800959a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800959e:	f003 0320 	and.w	r3, r3, #32
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d007      	beq.n	80095b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ca:	2b40      	cmp	r3, #64	; 0x40
 80095cc:	d005      	beq.n	80095da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80095ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80095d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d04f      	beq.n	800967a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 fee6 	bl	800a3ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095ea:	2b40      	cmp	r3, #64	; 0x40
 80095ec:	d141      	bne.n	8009672 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	3308      	adds	r3, #8
 80095f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80095fc:	e853 3f00 	ldrex	r3, [r3]
 8009600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800960c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	3308      	adds	r3, #8
 8009616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800961a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800961e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1d9      	bne.n	80095ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800963e:	2b00      	cmp	r3, #0
 8009640:	d013      	beq.n	800966a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009646:	4a13      	ldr	r2, [pc, #76]	; (8009694 <HAL_UART_IRQHandler+0x29c>)
 8009648:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800964e:	4618      	mov	r0, r3
 8009650:	f7f9 fb38 	bl	8002cc4 <HAL_DMA_Abort_IT>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d017      	beq.n	800968a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800965e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009664:	4610      	mov	r0, r2
 8009666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009668:	e00f      	b.n	800968a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f9be 	bl	80099ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009670:	e00b      	b.n	800968a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f9ba 	bl	80099ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009678:	e007      	b.n	800968a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f9b6 	bl	80099ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009688:	e17e      	b.n	8009988 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800968a:	bf00      	nop
    return;
 800968c:	e17c      	b.n	8009988 <HAL_UART_IRQHandler+0x590>
 800968e:	bf00      	nop
 8009690:	04000120 	.word	0x04000120
 8009694:	0800a70b 	.word	0x0800a70b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800969c:	2b01      	cmp	r3, #1
 800969e:	f040 814c 	bne.w	800993a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80096a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a6:	f003 0310 	and.w	r3, r3, #16
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 8145 	beq.w	800993a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80096b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096b4:	f003 0310 	and.w	r3, r3, #16
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	f000 813e 	beq.w	800993a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2210      	movs	r2, #16
 80096c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d0:	2b40      	cmp	r3, #64	; 0x40
 80096d2:	f040 80b6 	bne.w	8009842 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80096e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	f000 8150 	beq.w	800998c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80096f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80096f6:	429a      	cmp	r2, r3
 80096f8:	f080 8148 	bcs.w	800998c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009702:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009710:	f000 8086 	beq.w	8009820 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009728:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800972c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	461a      	mov	r2, r3
 800973a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800973e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009742:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009746:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800974a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1da      	bne.n	8009714 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3308      	adds	r3, #8
 8009764:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800976e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009770:	f023 0301 	bic.w	r3, r3, #1
 8009774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3308      	adds	r3, #8
 800977e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009782:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009786:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800978a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800978e:	e841 2300 	strex	r3, r2, [r1]
 8009792:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009796:	2b00      	cmp	r3, #0
 8009798:	d1e1      	bne.n	800975e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	3308      	adds	r3, #8
 80097a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097a4:	e853 3f00 	ldrex	r3, [r3]
 80097a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3308      	adds	r3, #8
 80097ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80097be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80097c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80097c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80097c6:	e841 2300 	strex	r3, r2, [r1]
 80097ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80097cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1e3      	bne.n	800979a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2220      	movs	r2, #32
 80097d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097e8:	e853 3f00 	ldrex	r3, [r3]
 80097ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80097ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097f0:	f023 0310 	bic.w	r3, r3, #16
 80097f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	461a      	mov	r2, r3
 80097fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009802:	65bb      	str	r3, [r7, #88]	; 0x58
 8009804:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009806:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800980a:	e841 2300 	strex	r3, r2, [r1]
 800980e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009812:	2b00      	cmp	r3, #0
 8009814:	d1e4      	bne.n	80097e0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800981a:	4618      	mov	r0, r3
 800981c:	f7f9 f9e2 	bl	8002be4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2202      	movs	r2, #2
 8009824:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009832:	b29b      	uxth	r3, r3
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	b29b      	uxth	r3, r3
 8009838:	4619      	mov	r1, r3
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f8e0 	bl	8009a00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009840:	e0a4      	b.n	800998c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800984e:	b29b      	uxth	r3, r3
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800985c:	b29b      	uxth	r3, r3
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 8096 	beq.w	8009990 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009868:	2b00      	cmp	r3, #0
 800986a:	f000 8091 	beq.w	8009990 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800987c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800987e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009882:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009890:	647b      	str	r3, [r7, #68]	; 0x44
 8009892:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800989e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e4      	bne.n	800986e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3308      	adds	r3, #8
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	e853 3f00 	ldrex	r3, [r3]
 80098b2:	623b      	str	r3, [r7, #32]
   return(result);
 80098b4:	6a3b      	ldr	r3, [r7, #32]
 80098b6:	f023 0301 	bic.w	r3, r3, #1
 80098ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3308      	adds	r3, #8
 80098c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80098c8:	633a      	str	r2, [r7, #48]	; 0x30
 80098ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098d0:	e841 2300 	strex	r3, r2, [r1]
 80098d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80098d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1e3      	bne.n	80098a4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	e853 3f00 	ldrex	r3, [r3]
 80098fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f023 0310 	bic.w	r3, r3, #16
 8009904:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	461a      	mov	r2, r3
 800990e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009912:	61fb      	str	r3, [r7, #28]
 8009914:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009916:	69b9      	ldr	r1, [r7, #24]
 8009918:	69fa      	ldr	r2, [r7, #28]
 800991a:	e841 2300 	strex	r3, r2, [r1]
 800991e:	617b      	str	r3, [r7, #20]
   return(result);
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1e4      	bne.n	80098f0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2202      	movs	r2, #2
 800992a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800992c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009930:	4619      	mov	r1, r3
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f864 	bl	8009a00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009938:	e02a      	b.n	8009990 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800993a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800993e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00e      	beq.n	8009964 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800994a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994e:	2b00      	cmp	r3, #0
 8009950:	d008      	beq.n	8009964 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d01c      	beq.n	8009994 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	4798      	blx	r3
    }
    return;
 8009962:	e017      	b.n	8009994 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996c:	2b00      	cmp	r3, #0
 800996e:	d012      	beq.n	8009996 <HAL_UART_IRQHandler+0x59e>
 8009970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00c      	beq.n	8009996 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 feda 	bl	800a736 <UART_EndTransmit_IT>
    return;
 8009982:	e008      	b.n	8009996 <HAL_UART_IRQHandler+0x59e>
      return;
 8009984:	bf00      	nop
 8009986:	e006      	b.n	8009996 <HAL_UART_IRQHandler+0x59e>
    return;
 8009988:	bf00      	nop
 800998a:	e004      	b.n	8009996 <HAL_UART_IRQHandler+0x59e>
      return;
 800998c:	bf00      	nop
 800998e:	e002      	b.n	8009996 <HAL_UART_IRQHandler+0x59e>
      return;
 8009990:	bf00      	nop
 8009992:	e000      	b.n	8009996 <HAL_UART_IRQHandler+0x59e>
    return;
 8009994:	bf00      	nop
  }

}
 8009996:	37e8      	adds	r7, #232	; 0xe8
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80099a4:	bf00      	nop
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80099e0:	bf00      	nop
 80099e2:	370c      	adds	r7, #12
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	460b      	mov	r3, r1
 8009a0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b088      	sub	sp, #32
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	689a      	ldr	r2, [r3, #8]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	431a      	orrs	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	69db      	ldr	r3, [r3, #28]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	4ba6      	ldr	r3, [pc, #664]	; (8009cdc <UART_SetConfig+0x2c4>)
 8009a44:	4013      	ands	r3, r2
 8009a46:	687a      	ldr	r2, [r7, #4]
 8009a48:	6812      	ldr	r2, [r2, #0]
 8009a4a:	6979      	ldr	r1, [r7, #20]
 8009a4c:	430b      	orrs	r3, r1
 8009a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68da      	ldr	r2, [r3, #12]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	699b      	ldr	r3, [r3, #24]
 8009a6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6a1b      	ldr	r3, [r3, #32]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	697a      	ldr	r2, [r7, #20]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a94      	ldr	r2, [pc, #592]	; (8009ce0 <UART_SetConfig+0x2c8>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d120      	bne.n	8009ad6 <UART_SetConfig+0xbe>
 8009a94:	4b93      	ldr	r3, [pc, #588]	; (8009ce4 <UART_SetConfig+0x2cc>)
 8009a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a9a:	f003 0303 	and.w	r3, r3, #3
 8009a9e:	2b03      	cmp	r3, #3
 8009aa0:	d816      	bhi.n	8009ad0 <UART_SetConfig+0xb8>
 8009aa2:	a201      	add	r2, pc, #4	; (adr r2, 8009aa8 <UART_SetConfig+0x90>)
 8009aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa8:	08009ab9 	.word	0x08009ab9
 8009aac:	08009ac5 	.word	0x08009ac5
 8009ab0:	08009abf 	.word	0x08009abf
 8009ab4:	08009acb 	.word	0x08009acb
 8009ab8:	2301      	movs	r3, #1
 8009aba:	77fb      	strb	r3, [r7, #31]
 8009abc:	e150      	b.n	8009d60 <UART_SetConfig+0x348>
 8009abe:	2302      	movs	r3, #2
 8009ac0:	77fb      	strb	r3, [r7, #31]
 8009ac2:	e14d      	b.n	8009d60 <UART_SetConfig+0x348>
 8009ac4:	2304      	movs	r3, #4
 8009ac6:	77fb      	strb	r3, [r7, #31]
 8009ac8:	e14a      	b.n	8009d60 <UART_SetConfig+0x348>
 8009aca:	2308      	movs	r3, #8
 8009acc:	77fb      	strb	r3, [r7, #31]
 8009ace:	e147      	b.n	8009d60 <UART_SetConfig+0x348>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	77fb      	strb	r3, [r7, #31]
 8009ad4:	e144      	b.n	8009d60 <UART_SetConfig+0x348>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a83      	ldr	r2, [pc, #524]	; (8009ce8 <UART_SetConfig+0x2d0>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d132      	bne.n	8009b46 <UART_SetConfig+0x12e>
 8009ae0:	4b80      	ldr	r3, [pc, #512]	; (8009ce4 <UART_SetConfig+0x2cc>)
 8009ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ae6:	f003 030c 	and.w	r3, r3, #12
 8009aea:	2b0c      	cmp	r3, #12
 8009aec:	d828      	bhi.n	8009b40 <UART_SetConfig+0x128>
 8009aee:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <UART_SetConfig+0xdc>)
 8009af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af4:	08009b29 	.word	0x08009b29
 8009af8:	08009b41 	.word	0x08009b41
 8009afc:	08009b41 	.word	0x08009b41
 8009b00:	08009b41 	.word	0x08009b41
 8009b04:	08009b35 	.word	0x08009b35
 8009b08:	08009b41 	.word	0x08009b41
 8009b0c:	08009b41 	.word	0x08009b41
 8009b10:	08009b41 	.word	0x08009b41
 8009b14:	08009b2f 	.word	0x08009b2f
 8009b18:	08009b41 	.word	0x08009b41
 8009b1c:	08009b41 	.word	0x08009b41
 8009b20:	08009b41 	.word	0x08009b41
 8009b24:	08009b3b 	.word	0x08009b3b
 8009b28:	2300      	movs	r3, #0
 8009b2a:	77fb      	strb	r3, [r7, #31]
 8009b2c:	e118      	b.n	8009d60 <UART_SetConfig+0x348>
 8009b2e:	2302      	movs	r3, #2
 8009b30:	77fb      	strb	r3, [r7, #31]
 8009b32:	e115      	b.n	8009d60 <UART_SetConfig+0x348>
 8009b34:	2304      	movs	r3, #4
 8009b36:	77fb      	strb	r3, [r7, #31]
 8009b38:	e112      	b.n	8009d60 <UART_SetConfig+0x348>
 8009b3a:	2308      	movs	r3, #8
 8009b3c:	77fb      	strb	r3, [r7, #31]
 8009b3e:	e10f      	b.n	8009d60 <UART_SetConfig+0x348>
 8009b40:	2310      	movs	r3, #16
 8009b42:	77fb      	strb	r3, [r7, #31]
 8009b44:	e10c      	b.n	8009d60 <UART_SetConfig+0x348>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a68      	ldr	r2, [pc, #416]	; (8009cec <UART_SetConfig+0x2d4>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d120      	bne.n	8009b92 <UART_SetConfig+0x17a>
 8009b50:	4b64      	ldr	r3, [pc, #400]	; (8009ce4 <UART_SetConfig+0x2cc>)
 8009b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009b5a:	2b30      	cmp	r3, #48	; 0x30
 8009b5c:	d013      	beq.n	8009b86 <UART_SetConfig+0x16e>
 8009b5e:	2b30      	cmp	r3, #48	; 0x30
 8009b60:	d814      	bhi.n	8009b8c <UART_SetConfig+0x174>
 8009b62:	2b20      	cmp	r3, #32
 8009b64:	d009      	beq.n	8009b7a <UART_SetConfig+0x162>
 8009b66:	2b20      	cmp	r3, #32
 8009b68:	d810      	bhi.n	8009b8c <UART_SetConfig+0x174>
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d002      	beq.n	8009b74 <UART_SetConfig+0x15c>
 8009b6e:	2b10      	cmp	r3, #16
 8009b70:	d006      	beq.n	8009b80 <UART_SetConfig+0x168>
 8009b72:	e00b      	b.n	8009b8c <UART_SetConfig+0x174>
 8009b74:	2300      	movs	r3, #0
 8009b76:	77fb      	strb	r3, [r7, #31]
 8009b78:	e0f2      	b.n	8009d60 <UART_SetConfig+0x348>
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	77fb      	strb	r3, [r7, #31]
 8009b7e:	e0ef      	b.n	8009d60 <UART_SetConfig+0x348>
 8009b80:	2304      	movs	r3, #4
 8009b82:	77fb      	strb	r3, [r7, #31]
 8009b84:	e0ec      	b.n	8009d60 <UART_SetConfig+0x348>
 8009b86:	2308      	movs	r3, #8
 8009b88:	77fb      	strb	r3, [r7, #31]
 8009b8a:	e0e9      	b.n	8009d60 <UART_SetConfig+0x348>
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	77fb      	strb	r3, [r7, #31]
 8009b90:	e0e6      	b.n	8009d60 <UART_SetConfig+0x348>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a56      	ldr	r2, [pc, #344]	; (8009cf0 <UART_SetConfig+0x2d8>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d120      	bne.n	8009bde <UART_SetConfig+0x1c6>
 8009b9c:	4b51      	ldr	r3, [pc, #324]	; (8009ce4 <UART_SetConfig+0x2cc>)
 8009b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8009ba8:	d013      	beq.n	8009bd2 <UART_SetConfig+0x1ba>
 8009baa:	2bc0      	cmp	r3, #192	; 0xc0
 8009bac:	d814      	bhi.n	8009bd8 <UART_SetConfig+0x1c0>
 8009bae:	2b80      	cmp	r3, #128	; 0x80
 8009bb0:	d009      	beq.n	8009bc6 <UART_SetConfig+0x1ae>
 8009bb2:	2b80      	cmp	r3, #128	; 0x80
 8009bb4:	d810      	bhi.n	8009bd8 <UART_SetConfig+0x1c0>
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <UART_SetConfig+0x1a8>
 8009bba:	2b40      	cmp	r3, #64	; 0x40
 8009bbc:	d006      	beq.n	8009bcc <UART_SetConfig+0x1b4>
 8009bbe:	e00b      	b.n	8009bd8 <UART_SetConfig+0x1c0>
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	77fb      	strb	r3, [r7, #31]
 8009bc4:	e0cc      	b.n	8009d60 <UART_SetConfig+0x348>
 8009bc6:	2302      	movs	r3, #2
 8009bc8:	77fb      	strb	r3, [r7, #31]
 8009bca:	e0c9      	b.n	8009d60 <UART_SetConfig+0x348>
 8009bcc:	2304      	movs	r3, #4
 8009bce:	77fb      	strb	r3, [r7, #31]
 8009bd0:	e0c6      	b.n	8009d60 <UART_SetConfig+0x348>
 8009bd2:	2308      	movs	r3, #8
 8009bd4:	77fb      	strb	r3, [r7, #31]
 8009bd6:	e0c3      	b.n	8009d60 <UART_SetConfig+0x348>
 8009bd8:	2310      	movs	r3, #16
 8009bda:	77fb      	strb	r3, [r7, #31]
 8009bdc:	e0c0      	b.n	8009d60 <UART_SetConfig+0x348>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a44      	ldr	r2, [pc, #272]	; (8009cf4 <UART_SetConfig+0x2dc>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d125      	bne.n	8009c34 <UART_SetConfig+0x21c>
 8009be8:	4b3e      	ldr	r3, [pc, #248]	; (8009ce4 <UART_SetConfig+0x2cc>)
 8009bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bf6:	d017      	beq.n	8009c28 <UART_SetConfig+0x210>
 8009bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bfc:	d817      	bhi.n	8009c2e <UART_SetConfig+0x216>
 8009bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c02:	d00b      	beq.n	8009c1c <UART_SetConfig+0x204>
 8009c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c08:	d811      	bhi.n	8009c2e <UART_SetConfig+0x216>
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d003      	beq.n	8009c16 <UART_SetConfig+0x1fe>
 8009c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c12:	d006      	beq.n	8009c22 <UART_SetConfig+0x20a>
 8009c14:	e00b      	b.n	8009c2e <UART_SetConfig+0x216>
 8009c16:	2300      	movs	r3, #0
 8009c18:	77fb      	strb	r3, [r7, #31]
 8009c1a:	e0a1      	b.n	8009d60 <UART_SetConfig+0x348>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	77fb      	strb	r3, [r7, #31]
 8009c20:	e09e      	b.n	8009d60 <UART_SetConfig+0x348>
 8009c22:	2304      	movs	r3, #4
 8009c24:	77fb      	strb	r3, [r7, #31]
 8009c26:	e09b      	b.n	8009d60 <UART_SetConfig+0x348>
 8009c28:	2308      	movs	r3, #8
 8009c2a:	77fb      	strb	r3, [r7, #31]
 8009c2c:	e098      	b.n	8009d60 <UART_SetConfig+0x348>
 8009c2e:	2310      	movs	r3, #16
 8009c30:	77fb      	strb	r3, [r7, #31]
 8009c32:	e095      	b.n	8009d60 <UART_SetConfig+0x348>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a2f      	ldr	r2, [pc, #188]	; (8009cf8 <UART_SetConfig+0x2e0>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d125      	bne.n	8009c8a <UART_SetConfig+0x272>
 8009c3e:	4b29      	ldr	r3, [pc, #164]	; (8009ce4 <UART_SetConfig+0x2cc>)
 8009c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009c48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c4c:	d017      	beq.n	8009c7e <UART_SetConfig+0x266>
 8009c4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c52:	d817      	bhi.n	8009c84 <UART_SetConfig+0x26c>
 8009c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c58:	d00b      	beq.n	8009c72 <UART_SetConfig+0x25a>
 8009c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c5e:	d811      	bhi.n	8009c84 <UART_SetConfig+0x26c>
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d003      	beq.n	8009c6c <UART_SetConfig+0x254>
 8009c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c68:	d006      	beq.n	8009c78 <UART_SetConfig+0x260>
 8009c6a:	e00b      	b.n	8009c84 <UART_SetConfig+0x26c>
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	77fb      	strb	r3, [r7, #31]
 8009c70:	e076      	b.n	8009d60 <UART_SetConfig+0x348>
 8009c72:	2302      	movs	r3, #2
 8009c74:	77fb      	strb	r3, [r7, #31]
 8009c76:	e073      	b.n	8009d60 <UART_SetConfig+0x348>
 8009c78:	2304      	movs	r3, #4
 8009c7a:	77fb      	strb	r3, [r7, #31]
 8009c7c:	e070      	b.n	8009d60 <UART_SetConfig+0x348>
 8009c7e:	2308      	movs	r3, #8
 8009c80:	77fb      	strb	r3, [r7, #31]
 8009c82:	e06d      	b.n	8009d60 <UART_SetConfig+0x348>
 8009c84:	2310      	movs	r3, #16
 8009c86:	77fb      	strb	r3, [r7, #31]
 8009c88:	e06a      	b.n	8009d60 <UART_SetConfig+0x348>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a1b      	ldr	r2, [pc, #108]	; (8009cfc <UART_SetConfig+0x2e4>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d138      	bne.n	8009d06 <UART_SetConfig+0x2ee>
 8009c94:	4b13      	ldr	r3, [pc, #76]	; (8009ce4 <UART_SetConfig+0x2cc>)
 8009c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c9a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009c9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ca2:	d017      	beq.n	8009cd4 <UART_SetConfig+0x2bc>
 8009ca4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ca8:	d82a      	bhi.n	8009d00 <UART_SetConfig+0x2e8>
 8009caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cae:	d00b      	beq.n	8009cc8 <UART_SetConfig+0x2b0>
 8009cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cb4:	d824      	bhi.n	8009d00 <UART_SetConfig+0x2e8>
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d003      	beq.n	8009cc2 <UART_SetConfig+0x2aa>
 8009cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cbe:	d006      	beq.n	8009cce <UART_SetConfig+0x2b6>
 8009cc0:	e01e      	b.n	8009d00 <UART_SetConfig+0x2e8>
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	77fb      	strb	r3, [r7, #31]
 8009cc6:	e04b      	b.n	8009d60 <UART_SetConfig+0x348>
 8009cc8:	2302      	movs	r3, #2
 8009cca:	77fb      	strb	r3, [r7, #31]
 8009ccc:	e048      	b.n	8009d60 <UART_SetConfig+0x348>
 8009cce:	2304      	movs	r3, #4
 8009cd0:	77fb      	strb	r3, [r7, #31]
 8009cd2:	e045      	b.n	8009d60 <UART_SetConfig+0x348>
 8009cd4:	2308      	movs	r3, #8
 8009cd6:	77fb      	strb	r3, [r7, #31]
 8009cd8:	e042      	b.n	8009d60 <UART_SetConfig+0x348>
 8009cda:	bf00      	nop
 8009cdc:	efff69f3 	.word	0xefff69f3
 8009ce0:	40011000 	.word	0x40011000
 8009ce4:	40023800 	.word	0x40023800
 8009ce8:	40004400 	.word	0x40004400
 8009cec:	40004800 	.word	0x40004800
 8009cf0:	40004c00 	.word	0x40004c00
 8009cf4:	40005000 	.word	0x40005000
 8009cf8:	40011400 	.word	0x40011400
 8009cfc:	40007800 	.word	0x40007800
 8009d00:	2310      	movs	r3, #16
 8009d02:	77fb      	strb	r3, [r7, #31]
 8009d04:	e02c      	b.n	8009d60 <UART_SetConfig+0x348>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a72      	ldr	r2, [pc, #456]	; (8009ed4 <UART_SetConfig+0x4bc>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d125      	bne.n	8009d5c <UART_SetConfig+0x344>
 8009d10:	4b71      	ldr	r3, [pc, #452]	; (8009ed8 <UART_SetConfig+0x4c0>)
 8009d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009d1a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d1e:	d017      	beq.n	8009d50 <UART_SetConfig+0x338>
 8009d20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009d24:	d817      	bhi.n	8009d56 <UART_SetConfig+0x33e>
 8009d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d2a:	d00b      	beq.n	8009d44 <UART_SetConfig+0x32c>
 8009d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d30:	d811      	bhi.n	8009d56 <UART_SetConfig+0x33e>
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <UART_SetConfig+0x326>
 8009d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d3a:	d006      	beq.n	8009d4a <UART_SetConfig+0x332>
 8009d3c:	e00b      	b.n	8009d56 <UART_SetConfig+0x33e>
 8009d3e:	2300      	movs	r3, #0
 8009d40:	77fb      	strb	r3, [r7, #31]
 8009d42:	e00d      	b.n	8009d60 <UART_SetConfig+0x348>
 8009d44:	2302      	movs	r3, #2
 8009d46:	77fb      	strb	r3, [r7, #31]
 8009d48:	e00a      	b.n	8009d60 <UART_SetConfig+0x348>
 8009d4a:	2304      	movs	r3, #4
 8009d4c:	77fb      	strb	r3, [r7, #31]
 8009d4e:	e007      	b.n	8009d60 <UART_SetConfig+0x348>
 8009d50:	2308      	movs	r3, #8
 8009d52:	77fb      	strb	r3, [r7, #31]
 8009d54:	e004      	b.n	8009d60 <UART_SetConfig+0x348>
 8009d56:	2310      	movs	r3, #16
 8009d58:	77fb      	strb	r3, [r7, #31]
 8009d5a:	e001      	b.n	8009d60 <UART_SetConfig+0x348>
 8009d5c:	2310      	movs	r3, #16
 8009d5e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	69db      	ldr	r3, [r3, #28]
 8009d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d68:	d15b      	bne.n	8009e22 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009d6a:	7ffb      	ldrb	r3, [r7, #31]
 8009d6c:	2b08      	cmp	r3, #8
 8009d6e:	d828      	bhi.n	8009dc2 <UART_SetConfig+0x3aa>
 8009d70:	a201      	add	r2, pc, #4	; (adr r2, 8009d78 <UART_SetConfig+0x360>)
 8009d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d76:	bf00      	nop
 8009d78:	08009d9d 	.word	0x08009d9d
 8009d7c:	08009da5 	.word	0x08009da5
 8009d80:	08009dad 	.word	0x08009dad
 8009d84:	08009dc3 	.word	0x08009dc3
 8009d88:	08009db3 	.word	0x08009db3
 8009d8c:	08009dc3 	.word	0x08009dc3
 8009d90:	08009dc3 	.word	0x08009dc3
 8009d94:	08009dc3 	.word	0x08009dc3
 8009d98:	08009dbb 	.word	0x08009dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d9c:	f7fd face 	bl	800733c <HAL_RCC_GetPCLK1Freq>
 8009da0:	61b8      	str	r0, [r7, #24]
        break;
 8009da2:	e013      	b.n	8009dcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009da4:	f7fd fade 	bl	8007364 <HAL_RCC_GetPCLK2Freq>
 8009da8:	61b8      	str	r0, [r7, #24]
        break;
 8009daa:	e00f      	b.n	8009dcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dac:	4b4b      	ldr	r3, [pc, #300]	; (8009edc <UART_SetConfig+0x4c4>)
 8009dae:	61bb      	str	r3, [r7, #24]
        break;
 8009db0:	e00c      	b.n	8009dcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009db2:	f7fd f9b1 	bl	8007118 <HAL_RCC_GetSysClockFreq>
 8009db6:	61b8      	str	r0, [r7, #24]
        break;
 8009db8:	e008      	b.n	8009dcc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dbe:	61bb      	str	r3, [r7, #24]
        break;
 8009dc0:	e004      	b.n	8009dcc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	77bb      	strb	r3, [r7, #30]
        break;
 8009dca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d074      	beq.n	8009ebc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009dd2:	69bb      	ldr	r3, [r7, #24]
 8009dd4:	005a      	lsls	r2, r3, #1
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	085b      	lsrs	r3, r3, #1
 8009ddc:	441a      	add	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	2b0f      	cmp	r3, #15
 8009dec:	d916      	bls.n	8009e1c <UART_SetConfig+0x404>
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df4:	d212      	bcs.n	8009e1c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	f023 030f 	bic.w	r3, r3, #15
 8009dfe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	085b      	lsrs	r3, r3, #1
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	f003 0307 	and.w	r3, r3, #7
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	89fb      	ldrh	r3, [r7, #14]
 8009e0e:	4313      	orrs	r3, r2
 8009e10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	89fa      	ldrh	r2, [r7, #14]
 8009e18:	60da      	str	r2, [r3, #12]
 8009e1a:	e04f      	b.n	8009ebc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	77bb      	strb	r3, [r7, #30]
 8009e20:	e04c      	b.n	8009ebc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e22:	7ffb      	ldrb	r3, [r7, #31]
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d828      	bhi.n	8009e7a <UART_SetConfig+0x462>
 8009e28:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <UART_SetConfig+0x418>)
 8009e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2e:	bf00      	nop
 8009e30:	08009e55 	.word	0x08009e55
 8009e34:	08009e5d 	.word	0x08009e5d
 8009e38:	08009e65 	.word	0x08009e65
 8009e3c:	08009e7b 	.word	0x08009e7b
 8009e40:	08009e6b 	.word	0x08009e6b
 8009e44:	08009e7b 	.word	0x08009e7b
 8009e48:	08009e7b 	.word	0x08009e7b
 8009e4c:	08009e7b 	.word	0x08009e7b
 8009e50:	08009e73 	.word	0x08009e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e54:	f7fd fa72 	bl	800733c <HAL_RCC_GetPCLK1Freq>
 8009e58:	61b8      	str	r0, [r7, #24]
        break;
 8009e5a:	e013      	b.n	8009e84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e5c:	f7fd fa82 	bl	8007364 <HAL_RCC_GetPCLK2Freq>
 8009e60:	61b8      	str	r0, [r7, #24]
        break;
 8009e62:	e00f      	b.n	8009e84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e64:	4b1d      	ldr	r3, [pc, #116]	; (8009edc <UART_SetConfig+0x4c4>)
 8009e66:	61bb      	str	r3, [r7, #24]
        break;
 8009e68:	e00c      	b.n	8009e84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e6a:	f7fd f955 	bl	8007118 <HAL_RCC_GetSysClockFreq>
 8009e6e:	61b8      	str	r0, [r7, #24]
        break;
 8009e70:	e008      	b.n	8009e84 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e76:	61bb      	str	r3, [r7, #24]
        break;
 8009e78:	e004      	b.n	8009e84 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	77bb      	strb	r3, [r7, #30]
        break;
 8009e82:	bf00      	nop
    }

    if (pclk != 0U)
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d018      	beq.n	8009ebc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	085a      	lsrs	r2, r3, #1
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	441a      	add	r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	2b0f      	cmp	r3, #15
 8009ea2:	d909      	bls.n	8009eb8 <UART_SetConfig+0x4a0>
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eaa:	d205      	bcs.n	8009eb8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	60da      	str	r2, [r3, #12]
 8009eb6:	e001      	b.n	8009ebc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009ec8:	7fbb      	ldrb	r3, [r7, #30]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3720      	adds	r7, #32
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	40007c00 	.word	0x40007c00
 8009ed8:	40023800 	.word	0x40023800
 8009edc:	00f42400 	.word	0x00f42400

08009ee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00a      	beq.n	8009f0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	430a      	orrs	r2, r1
 8009f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0e:	f003 0302 	and.w	r3, r3, #2
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00a      	beq.n	8009f2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	430a      	orrs	r2, r1
 8009f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f30:	f003 0304 	and.w	r3, r3, #4
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00a      	beq.n	8009f4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f52:	f003 0308 	and.w	r3, r3, #8
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00a      	beq.n	8009f70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	430a      	orrs	r2, r1
 8009f6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f74:	f003 0310 	and.w	r3, r3, #16
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00a      	beq.n	8009f92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	430a      	orrs	r2, r1
 8009f90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	f003 0320 	and.w	r3, r3, #32
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00a      	beq.n	8009fb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d01a      	beq.n	8009ff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	685b      	ldr	r3, [r3, #4]
 8009fc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	430a      	orrs	r2, r1
 8009fd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fde:	d10a      	bne.n	8009ff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	430a      	orrs	r2, r1
 8009ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00a      	beq.n	800a018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	430a      	orrs	r2, r1
 800a016:	605a      	str	r2, [r3, #4]
  }
}
 800a018:	bf00      	nop
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af02      	add	r7, sp, #8
 800a02a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a034:	f7f8 fb86 	bl	8002744 <HAL_GetTick>
 800a038:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 0308 	and.w	r3, r3, #8
 800a044:	2b08      	cmp	r3, #8
 800a046:	d10e      	bne.n	800a066 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f81b 	bl	800a092 <UART_WaitOnFlagUntilTimeout>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a062:	2303      	movs	r3, #3
 800a064:	e011      	b.n	800a08a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2220      	movs	r2, #32
 800a06a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2220      	movs	r2, #32
 800a070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b09c      	sub	sp, #112	; 0x70
 800a096:	af00      	add	r7, sp, #0
 800a098:	60f8      	str	r0, [r7, #12]
 800a09a:	60b9      	str	r1, [r7, #8]
 800a09c:	603b      	str	r3, [r7, #0]
 800a09e:	4613      	mov	r3, r2
 800a0a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0a2:	e0a7      	b.n	800a1f4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0aa:	f000 80a3 	beq.w	800a1f4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0ae:	f7f8 fb49 	bl	8002744 <HAL_GetTick>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	1ad3      	subs	r3, r2, r3
 800a0b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d302      	bcc.n	800a0c4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a0be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d13f      	bne.n	800a144 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0cc:	e853 3f00 	ldrex	r3, [r3]
 800a0d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a0d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0d8:	667b      	str	r3, [r7, #100]	; 0x64
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a0e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0ea:	e841 2300 	strex	r3, r2, [r1]
 800a0ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a0f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1e6      	bne.n	800a0c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	3308      	adds	r3, #8
 800a0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a100:	e853 3f00 	ldrex	r3, [r3]
 800a104:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a108:	f023 0301 	bic.w	r3, r3, #1
 800a10c:	663b      	str	r3, [r7, #96]	; 0x60
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	3308      	adds	r3, #8
 800a114:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a116:	64ba      	str	r2, [r7, #72]	; 0x48
 800a118:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a11a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a11c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a11e:	e841 2300 	strex	r3, r2, [r1]
 800a122:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1e5      	bne.n	800a0f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2220      	movs	r2, #32
 800a12e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2220      	movs	r2, #32
 800a134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a140:	2303      	movs	r3, #3
 800a142:	e068      	b.n	800a216 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f003 0304 	and.w	r3, r3, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d050      	beq.n	800a1f4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	69db      	ldr	r3, [r3, #28]
 800a158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a15c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a160:	d148      	bne.n	800a1f4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a16a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a174:	e853 3f00 	ldrex	r3, [r3]
 800a178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a180:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	461a      	mov	r2, r3
 800a188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a18a:	637b      	str	r3, [r7, #52]	; 0x34
 800a18c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a192:	e841 2300 	strex	r3, r2, [r1]
 800a196:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1e6      	bne.n	800a16c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	e853 3f00 	ldrex	r3, [r3]
 800a1ac:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	f023 0301 	bic.w	r3, r3, #1
 800a1b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	3308      	adds	r3, #8
 800a1bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a1be:	623a      	str	r2, [r7, #32]
 800a1c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c2:	69f9      	ldr	r1, [r7, #28]
 800a1c4:	6a3a      	ldr	r2, [r7, #32]
 800a1c6:	e841 2300 	strex	r3, r2, [r1]
 800a1ca:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d1e5      	bne.n	800a19e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2220      	movs	r2, #32
 800a1dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2220      	movs	r2, #32
 800a1e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e010      	b.n	800a216 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	69da      	ldr	r2, [r3, #28]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	429a      	cmp	r2, r3
 800a202:	bf0c      	ite	eq
 800a204:	2301      	moveq	r3, #1
 800a206:	2300      	movne	r3, #0
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	461a      	mov	r2, r3
 800a20c:	79fb      	ldrb	r3, [r7, #7]
 800a20e:	429a      	cmp	r2, r3
 800a210:	f43f af48 	beq.w	800a0a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3770      	adds	r7, #112	; 0x70
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
	...

0800a220 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b096      	sub	sp, #88	; 0x58
 800a224:	af00      	add	r7, sp, #0
 800a226:	60f8      	str	r0, [r7, #12]
 800a228:	60b9      	str	r1, [r7, #8]
 800a22a:	4613      	mov	r3, r2
 800a22c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	68ba      	ldr	r2, [r7, #8]
 800a232:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	88fa      	ldrh	r2, [r7, #6]
 800a238:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2222      	movs	r2, #34	; 0x22
 800a248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a250:	2b00      	cmp	r3, #0
 800a252:	d028      	beq.n	800a2a6 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a258:	4a3e      	ldr	r2, [pc, #248]	; (800a354 <UART_Start_Receive_DMA+0x134>)
 800a25a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a260:	4a3d      	ldr	r2, [pc, #244]	; (800a358 <UART_Start_Receive_DMA+0x138>)
 800a262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a268:	4a3c      	ldr	r2, [pc, #240]	; (800a35c <UART_Start_Receive_DMA+0x13c>)
 800a26a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a270:	2200      	movs	r2, #0
 800a272:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	3324      	adds	r3, #36	; 0x24
 800a27e:	4619      	mov	r1, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a284:	461a      	mov	r2, r3
 800a286:	88fb      	ldrh	r3, [r7, #6]
 800a288:	f7f8 fc4c 	bl	8002b24 <HAL_DMA_Start_IT>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d009      	beq.n	800a2a6 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2210      	movs	r2, #16
 800a296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e051      	b.n	800a34a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d018      	beq.n	800a2e0 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2b6:	e853 3f00 	ldrex	r3, [r3]
 800a2ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2c2:	657b      	str	r3, [r7, #84]	; 0x54
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2ce:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e6      	bne.n	800a2ae <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ea:	e853 3f00 	ldrex	r3, [r3]
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	f043 0301 	orr.w	r3, r3, #1
 800a2f6:	653b      	str	r3, [r7, #80]	; 0x50
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	3308      	adds	r3, #8
 800a2fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a300:	637a      	str	r2, [r7, #52]	; 0x34
 800a302:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a304:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a306:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a308:	e841 2300 	strex	r3, r2, [r1]
 800a30c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1e5      	bne.n	800a2e0 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3308      	adds	r3, #8
 800a31a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	e853 3f00 	ldrex	r3, [r3]
 800a322:	613b      	str	r3, [r7, #16]
   return(result);
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a32a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	3308      	adds	r3, #8
 800a332:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a334:	623a      	str	r2, [r7, #32]
 800a336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	69f9      	ldr	r1, [r7, #28]
 800a33a:	6a3a      	ldr	r2, [r7, #32]
 800a33c:	e841 2300 	strex	r3, r2, [r1]
 800a340:	61bb      	str	r3, [r7, #24]
   return(result);
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e5      	bne.n	800a314 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3758      	adds	r7, #88	; 0x58
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	0800a527 	.word	0x0800a527
 800a358:	0800a64f 	.word	0x0800a64f
 800a35c:	0800a68d 	.word	0x0800a68d

0800a360 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a360:	b480      	push	{r7}
 800a362:	b089      	sub	sp, #36	; 0x24
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	e853 3f00 	ldrex	r3, [r3]
 800a374:	60bb      	str	r3, [r7, #8]
   return(result);
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a37c:	61fb      	str	r3, [r7, #28]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	461a      	mov	r2, r3
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	61bb      	str	r3, [r7, #24]
 800a388:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a38a:	6979      	ldr	r1, [r7, #20]
 800a38c:	69ba      	ldr	r2, [r7, #24]
 800a38e:	e841 2300 	strex	r3, r2, [r1]
 800a392:	613b      	str	r3, [r7, #16]
   return(result);
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d1e6      	bne.n	800a368 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2220      	movs	r2, #32
 800a39e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800a3a0:	bf00      	nop
 800a3a2:	3724      	adds	r7, #36	; 0x24
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b095      	sub	sp, #84	; 0x54
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3bc:	e853 3f00 	ldrex	r3, [r3]
 800a3c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3d2:	643b      	str	r3, [r7, #64]	; 0x40
 800a3d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3da:	e841 2300 	strex	r3, r2, [r1]
 800a3de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1e6      	bne.n	800a3b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ee:	6a3b      	ldr	r3, [r7, #32]
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	f023 0301 	bic.w	r3, r3, #1
 800a3fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3308      	adds	r3, #8
 800a404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a406:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a408:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a40c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a40e:	e841 2300 	strex	r3, r2, [r1]
 800a412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1e5      	bne.n	800a3e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d118      	bne.n	800a454 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	e853 3f00 	ldrex	r3, [r3]
 800a42e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	f023 0310 	bic.w	r3, r3, #16
 800a436:	647b      	str	r3, [r7, #68]	; 0x44
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	461a      	mov	r2, r3
 800a43e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a440:	61bb      	str	r3, [r7, #24]
 800a442:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a444:	6979      	ldr	r1, [r7, #20]
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	e841 2300 	strex	r3, r2, [r1]
 800a44c:	613b      	str	r3, [r7, #16]
   return(result);
 800a44e:	693b      	ldr	r3, [r7, #16]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1e6      	bne.n	800a422 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2220      	movs	r2, #32
 800a458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a468:	bf00      	nop
 800a46a:	3754      	adds	r7, #84	; 0x54
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b090      	sub	sp, #64	; 0x40
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a480:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	69db      	ldr	r3, [r3, #28]
 800a486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a48a:	d037      	beq.n	800a4fc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800a48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a48e:	2200      	movs	r2, #0
 800a490:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3308      	adds	r3, #8
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	e853 3f00 	ldrex	r3, [r3]
 800a4a2:	623b      	str	r3, [r7, #32]
   return(result);
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a4aa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	3308      	adds	r3, #8
 800a4b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4b4:	633a      	str	r2, [r7, #48]	; 0x30
 800a4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4bc:	e841 2300 	strex	r3, r2, [r1]
 800a4c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1e5      	bne.n	800a494 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4dc:	637b      	str	r3, [r7, #52]	; 0x34
 800a4de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4e6:	61fb      	str	r3, [r7, #28]
 800a4e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ea:	69b9      	ldr	r1, [r7, #24]
 800a4ec:	69fa      	ldr	r2, [r7, #28]
 800a4ee:	e841 2300 	strex	r3, r2, [r1]
 800a4f2:	617b      	str	r3, [r7, #20]
   return(result);
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e6      	bne.n	800a4c8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a4fa:	e002      	b.n	800a502 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800a4fc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a4fe:	f7ff fa4d 	bl	800999c <HAL_UART_TxCpltCallback>
}
 800a502:	bf00      	nop
 800a504:	3740      	adds	r7, #64	; 0x40
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a516:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a518:	68f8      	ldr	r0, [r7, #12]
 800a51a:	f7ff fa49 	bl	80099b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a51e:	bf00      	nop
 800a520:	3710      	adds	r7, #16
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}

0800a526 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a526:	b580      	push	{r7, lr}
 800a528:	b09c      	sub	sp, #112	; 0x70
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a532:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	69db      	ldr	r3, [r3, #28]
 800a538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a53c:	d071      	beq.n	800a622 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a53e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a540:	2200      	movs	r2, #0
 800a542:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a54e:	e853 3f00 	ldrex	r3, [r3]
 800a552:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a556:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a55a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a55c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a564:	65bb      	str	r3, [r7, #88]	; 0x58
 800a566:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a568:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a56a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a56c:	e841 2300 	strex	r3, r2, [r1]
 800a570:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a572:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1e6      	bne.n	800a546 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	3308      	adds	r3, #8
 800a57e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a582:	e853 3f00 	ldrex	r3, [r3]
 800a586:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a58a:	f023 0301 	bic.w	r3, r3, #1
 800a58e:	667b      	str	r3, [r7, #100]	; 0x64
 800a590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	3308      	adds	r3, #8
 800a596:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a598:	647a      	str	r2, [r7, #68]	; 0x44
 800a59a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a59c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a59e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5a0:	e841 2300 	strex	r3, r2, [r1]
 800a5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1e5      	bne.n	800a578 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5b6:	e853 3f00 	ldrex	r3, [r3]
 800a5ba:	623b      	str	r3, [r7, #32]
   return(result);
 800a5bc:	6a3b      	ldr	r3, [r7, #32]
 800a5be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a5c2:	663b      	str	r3, [r7, #96]	; 0x60
 800a5c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3308      	adds	r3, #8
 800a5ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5cc:	633a      	str	r2, [r7, #48]	; 0x30
 800a5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a5d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d4:	e841 2300 	strex	r3, r2, [r1]
 800a5d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1e5      	bne.n	800a5ac <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a5e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d118      	bne.n	800a622 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	e853 3f00 	ldrex	r3, [r3]
 800a5fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f023 0310 	bic.w	r3, r3, #16
 800a604:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	461a      	mov	r2, r3
 800a60c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a60e:	61fb      	str	r3, [r7, #28]
 800a610:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a612:	69b9      	ldr	r1, [r7, #24]
 800a614:	69fa      	ldr	r2, [r7, #28]
 800a616:	e841 2300 	strex	r3, r2, [r1]
 800a61a:	617b      	str	r3, [r7, #20]
   return(result);
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1e6      	bne.n	800a5f0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a624:	2200      	movs	r2, #0
 800a626:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a62a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d107      	bne.n	800a640 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a632:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a636:	4619      	mov	r1, r3
 800a638:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a63a:	f7ff f9e1 	bl	8009a00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a63e:	e002      	b.n	800a646 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a640:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a642:	f7ff f9bf 	bl	80099c4 <HAL_UART_RxCpltCallback>
}
 800a646:	bf00      	nop
 800a648:	3770      	adds	r7, #112	; 0x70
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b084      	sub	sp, #16
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2201      	movs	r2, #1
 800a660:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a666:	2b01      	cmp	r3, #1
 800a668:	d109      	bne.n	800a67e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a670:	085b      	lsrs	r3, r3, #1
 800a672:	b29b      	uxth	r3, r3
 800a674:	4619      	mov	r1, r3
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f7ff f9c2 	bl	8009a00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a67c:	e002      	b.n	800a684 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f7ff f9aa 	bl	80099d8 <HAL_UART_RxHalfCpltCallback>
}
 800a684:	bf00      	nop
 800a686:	3710      	adds	r7, #16
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b086      	sub	sp, #24
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a698:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a69e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6a6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6b2:	2b80      	cmp	r3, #128	; 0x80
 800a6b4:	d109      	bne.n	800a6ca <UART_DMAError+0x3e>
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	2b21      	cmp	r3, #33	; 0x21
 800a6ba:	d106      	bne.n	800a6ca <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a6c4:	6978      	ldr	r0, [r7, #20]
 800a6c6:	f7ff fe4b 	bl	800a360 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6d4:	2b40      	cmp	r3, #64	; 0x40
 800a6d6:	d109      	bne.n	800a6ec <UART_DMAError+0x60>
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2b22      	cmp	r3, #34	; 0x22
 800a6dc:	d106      	bne.n	800a6ec <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a6e6:	6978      	ldr	r0, [r7, #20]
 800a6e8:	f7ff fe60 	bl	800a3ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6f2:	f043 0210 	orr.w	r2, r3, #16
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a6fc:	6978      	ldr	r0, [r7, #20]
 800a6fe:	f7ff f975 	bl	80099ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a702:	bf00      	nop
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a716:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2200      	movs	r2, #0
 800a724:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7ff f95f 	bl	80099ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a72e:	bf00      	nop
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b088      	sub	sp, #32
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	e853 3f00 	ldrex	r3, [r3]
 800a74a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a752:	61fb      	str	r3, [r7, #28]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	461a      	mov	r2, r3
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	61bb      	str	r3, [r7, #24]
 800a75e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a760:	6979      	ldr	r1, [r7, #20]
 800a762:	69ba      	ldr	r2, [r7, #24]
 800a764:	e841 2300 	strex	r3, r2, [r1]
 800a768:	613b      	str	r3, [r7, #16]
   return(result);
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1e6      	bne.n	800a73e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2220      	movs	r2, #32
 800a774:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2200      	movs	r2, #0
 800a77a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f7ff f90d 	bl	800999c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a782:	bf00      	nop
 800a784:	3720      	adds	r7, #32
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
	...

0800a78c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a78c:	b084      	sub	sp, #16
 800a78e:	b580      	push	{r7, lr}
 800a790:	b084      	sub	sp, #16
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	f107 001c 	add.w	r0, r7, #28
 800a79a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d120      	bne.n	800a7e6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68da      	ldr	r2, [r3, #12]
 800a7b4:	4b20      	ldr	r3, [pc, #128]	; (800a838 <USB_CoreInit+0xac>)
 800a7b6:	4013      	ands	r3, r2
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a7c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d105      	bne.n	800a7da <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 fa96 	bl	800ad0c <USB_CoreReset>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	73fb      	strb	r3, [r7, #15]
 800a7e4:	e010      	b.n	800a808 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fa8a 	bl	800ad0c <USB_CoreReset>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a800:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d10b      	bne.n	800a826 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	f043 0206 	orr.w	r2, r3, #6
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	f043 0220 	orr.w	r2, r3, #32
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a826:	7bfb      	ldrb	r3, [r7, #15]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3710      	adds	r7, #16
 800a82c:	46bd      	mov	sp, r7
 800a82e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a832:	b004      	add	sp, #16
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	ffbdffbf 	.word	0xffbdffbf

0800a83c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	f023 0201 	bic.w	r2, r3, #1
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a850:	2300      	movs	r3, #0
}
 800a852:	4618      	mov	r0, r3
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b084      	sub	sp, #16
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	460b      	mov	r3, r1
 800a868:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a86a:	2300      	movs	r3, #0
 800a86c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68db      	ldr	r3, [r3, #12]
 800a872:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a87a:	78fb      	ldrb	r3, [r7, #3]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d115      	bne.n	800a8ac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a88c:	2001      	movs	r0, #1
 800a88e:	f7f7 ff65 	bl	800275c <HAL_Delay>
      ms++;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3301      	adds	r3, #1
 800a896:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fa29 	bl	800acf0 <USB_GetMode>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d01e      	beq.n	800a8e2 <USB_SetCurrentMode+0x84>
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b31      	cmp	r3, #49	; 0x31
 800a8a8:	d9f0      	bls.n	800a88c <USB_SetCurrentMode+0x2e>
 800a8aa:	e01a      	b.n	800a8e2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8ac:	78fb      	ldrb	r3, [r7, #3]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d115      	bne.n	800a8de <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	68db      	ldr	r3, [r3, #12]
 800a8b6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a8be:	2001      	movs	r0, #1
 800a8c0:	f7f7 ff4c 	bl	800275c <HAL_Delay>
      ms++;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fa10 	bl	800acf0 <USB_GetMode>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d005      	beq.n	800a8e2 <USB_SetCurrentMode+0x84>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2b31      	cmp	r3, #49	; 0x31
 800a8da:	d9f0      	bls.n	800a8be <USB_SetCurrentMode+0x60>
 800a8dc:	e001      	b.n	800a8e2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e005      	b.n	800a8ee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2b32      	cmp	r3, #50	; 0x32
 800a8e6:	d101      	bne.n	800a8ec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e000      	b.n	800a8ee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
	...

0800a8f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8f8:	b084      	sub	sp, #16
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b086      	sub	sp, #24
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
 800a902:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a906:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a90a:	2300      	movs	r3, #0
 800a90c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a912:	2300      	movs	r3, #0
 800a914:	613b      	str	r3, [r7, #16]
 800a916:	e009      	b.n	800a92c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	3340      	adds	r3, #64	; 0x40
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	4413      	add	r3, r2
 800a922:	2200      	movs	r2, #0
 800a924:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	3301      	adds	r3, #1
 800a92a:	613b      	str	r3, [r7, #16]
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	2b0e      	cmp	r3, #14
 800a930:	d9f2      	bls.n	800a918 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a934:	2b00      	cmp	r3, #0
 800a936:	d11c      	bne.n	800a972 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a946:	f043 0302 	orr.w	r3, r3, #2
 800a94a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a950:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	601a      	str	r2, [r3, #0]
 800a970:	e005      	b.n	800a97e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a976:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a984:	461a      	mov	r2, r3
 800a986:	2300      	movs	r3, #0
 800a988:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a990:	4619      	mov	r1, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a998:	461a      	mov	r2, r3
 800a99a:	680b      	ldr	r3, [r1, #0]
 800a99c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a99e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d10c      	bne.n	800a9be <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d104      	bne.n	800a9b4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a9aa:	2100      	movs	r1, #0
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f965 	bl	800ac7c <USB_SetDevSpeed>
 800a9b2:	e008      	b.n	800a9c6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a9b4:	2101      	movs	r1, #1
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 f960 	bl	800ac7c <USB_SetDevSpeed>
 800a9bc:	e003      	b.n	800a9c6 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a9be:	2103      	movs	r1, #3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f000 f95b 	bl	800ac7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a9c6:	2110      	movs	r1, #16
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f8f3 	bl	800abb4 <USB_FlushTxFifo>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d001      	beq.n	800a9d8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f000 f91f 	bl	800ac1c <USB_FlushRxFifo>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa06:	461a      	mov	r2, r3
 800aa08:	2300      	movs	r3, #0
 800aa0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	613b      	str	r3, [r7, #16]
 800aa10:	e043      	b.n	800aa9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	015a      	lsls	r2, r3, #5
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	4413      	add	r3, r2
 800aa1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa28:	d118      	bne.n	800aa5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d10a      	bne.n	800aa46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	015a      	lsls	r2, r3, #5
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4413      	add	r3, r2
 800aa38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa42:	6013      	str	r3, [r2, #0]
 800aa44:	e013      	b.n	800aa6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	015a      	lsls	r2, r3, #5
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa52:	461a      	mov	r2, r3
 800aa54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa58:	6013      	str	r3, [r2, #0]
 800aa5a:	e008      	b.n	800aa6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa68:	461a      	mov	r2, r3
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	015a      	lsls	r2, r3, #5
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	4413      	add	r3, r2
 800aa88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	3301      	adds	r3, #1
 800aa98:	613b      	str	r3, [r7, #16]
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	693a      	ldr	r2, [r7, #16]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d3b7      	bcc.n	800aa12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	613b      	str	r3, [r7, #16]
 800aaa6:	e043      	b.n	800ab30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aaba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aabe:	d118      	bne.n	800aaf2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d10a      	bne.n	800aadc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	015a      	lsls	r2, r3, #5
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	4413      	add	r3, r2
 800aace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad2:	461a      	mov	r2, r3
 800aad4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aad8:	6013      	str	r3, [r2, #0]
 800aada:	e013      	b.n	800ab04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	015a      	lsls	r2, r3, #5
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	4413      	add	r3, r2
 800aae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aae8:	461a      	mov	r2, r3
 800aaea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	e008      	b.n	800ab04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafe:	461a      	mov	r2, r3
 800ab00:	2300      	movs	r3, #0
 800ab02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	015a      	lsls	r2, r3, #5
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab10:	461a      	mov	r2, r3
 800ab12:	2300      	movs	r3, #0
 800ab14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	015a      	lsls	r2, r3, #5
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	4413      	add	r3, r2
 800ab1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab22:	461a      	mov	r2, r3
 800ab24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	613b      	str	r3, [r7, #16]
 800ab30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab32:	693a      	ldr	r2, [r7, #16]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d3b7      	bcc.n	800aaa8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d105      	bne.n	800ab6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	699b      	ldr	r3, [r3, #24]
 800ab64:	f043 0210 	orr.w	r2, r3, #16
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	699a      	ldr	r2, [r3, #24]
 800ab70:	4b0e      	ldr	r3, [pc, #56]	; (800abac <USB_DevInit+0x2b4>)
 800ab72:	4313      	orrs	r3, r2
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d005      	beq.n	800ab8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	f043 0208 	orr.w	r2, r3, #8
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d105      	bne.n	800ab9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	699a      	ldr	r2, [r3, #24]
 800ab94:	4b06      	ldr	r3, [pc, #24]	; (800abb0 <USB_DevInit+0x2b8>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3718      	adds	r7, #24
 800aba2:	46bd      	mov	sp, r7
 800aba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aba8:	b004      	add	sp, #16
 800abaa:	4770      	bx	lr
 800abac:	803c3800 	.word	0x803c3800
 800abb0:	40000004 	.word	0x40000004

0800abb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800abbe:	2300      	movs	r3, #0
 800abc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3301      	adds	r3, #1
 800abc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4a13      	ldr	r2, [pc, #76]	; (800ac18 <USB_FlushTxFifo+0x64>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d901      	bls.n	800abd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800abd0:	2303      	movs	r3, #3
 800abd2:	e01b      	b.n	800ac0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	daf2      	bge.n	800abc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800abdc:	2300      	movs	r3, #0
 800abde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	019b      	lsls	r3, r3, #6
 800abe4:	f043 0220 	orr.w	r2, r3, #32
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	3301      	adds	r3, #1
 800abf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	4a08      	ldr	r2, [pc, #32]	; (800ac18 <USB_FlushTxFifo+0x64>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d901      	bls.n	800abfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e006      	b.n	800ac0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	f003 0320 	and.w	r3, r3, #32
 800ac06:	2b20      	cmp	r3, #32
 800ac08:	d0f0      	beq.n	800abec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	00030d40 	.word	0x00030d40

0800ac1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b085      	sub	sp, #20
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac24:	2300      	movs	r3, #0
 800ac26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	4a11      	ldr	r2, [pc, #68]	; (800ac78 <USB_FlushRxFifo+0x5c>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d901      	bls.n	800ac3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e018      	b.n	800ac6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	daf2      	bge.n	800ac28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac42:	2300      	movs	r3, #0
 800ac44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2210      	movs	r2, #16
 800ac4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	4a08      	ldr	r2, [pc, #32]	; (800ac78 <USB_FlushRxFifo+0x5c>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d901      	bls.n	800ac5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e006      	b.n	800ac6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	f003 0310 	and.w	r3, r3, #16
 800ac66:	2b10      	cmp	r3, #16
 800ac68:	d0f0      	beq.n	800ac4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3714      	adds	r7, #20
 800ac70:	46bd      	mov	sp, r7
 800ac72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac76:	4770      	bx	lr
 800ac78:	00030d40 	.word	0x00030d40

0800ac7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	78fb      	ldrb	r3, [r7, #3]
 800ac96:	68f9      	ldr	r1, [r7, #12]
 800ac98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aca0:	2300      	movs	r3, #0
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3714      	adds	r7, #20
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800acae:	b480      	push	{r7}
 800acb0:	b085      	sub	sp, #20
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800acc8:	f023 0303 	bic.w	r3, r3, #3
 800accc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acdc:	f043 0302 	orr.w	r3, r3, #2
 800ace0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b083      	sub	sp, #12
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	f003 0301 	and.w	r3, r3, #1
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	370c      	adds	r7, #12
 800ad04:	46bd      	mov	sp, r7
 800ad06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0a:	4770      	bx	lr

0800ad0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ad0c:	b480      	push	{r7}
 800ad0e:	b085      	sub	sp, #20
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad14:	2300      	movs	r3, #0
 800ad16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	4a13      	ldr	r2, [pc, #76]	; (800ad70 <USB_CoreReset+0x64>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d901      	bls.n	800ad2a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ad26:	2303      	movs	r3, #3
 800ad28:	e01b      	b.n	800ad62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	691b      	ldr	r3, [r3, #16]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	daf2      	bge.n	800ad18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ad32:	2300      	movs	r3, #0
 800ad34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	f043 0201 	orr.w	r2, r3, #1
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	3301      	adds	r3, #1
 800ad46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	4a09      	ldr	r2, [pc, #36]	; (800ad70 <USB_CoreReset+0x64>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d901      	bls.n	800ad54 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ad50:	2303      	movs	r3, #3
 800ad52:	e006      	b.n	800ad62 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	f003 0301 	and.w	r3, r3, #1
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d0f0      	beq.n	800ad42 <USB_CoreReset+0x36>

  return HAL_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3714      	adds	r7, #20
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	00030d40 	.word	0x00030d40

0800ad74 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b084      	sub	sp, #16
 800ad78:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ad7a:	4b8d      	ldr	r3, [pc, #564]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ad7c:	22c0      	movs	r2, #192	; 0xc0
 800ad7e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ad80:	4b8b      	ldr	r3, [pc, #556]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ad82:	22a8      	movs	r2, #168	; 0xa8
 800ad84:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800ad86:	4b8a      	ldr	r3, [pc, #552]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ad88:	2201      	movs	r2, #1
 800ad8a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800ad8c:	4b88      	ldr	r3, [pc, #544]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ad8e:	2202      	movs	r2, #2
 800ad90:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ad92:	4b88      	ldr	r3, [pc, #544]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ad94:	22ff      	movs	r2, #255	; 0xff
 800ad96:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ad98:	4b86      	ldr	r3, [pc, #536]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ad9a:	22ff      	movs	r2, #255	; 0xff
 800ad9c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ad9e:	4b85      	ldr	r3, [pc, #532]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ada0:	22ff      	movs	r2, #255	; 0xff
 800ada2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ada4:	4b83      	ldr	r3, [pc, #524]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ada6:	2200      	movs	r2, #0
 800ada8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 800adaa:	4b83      	ldr	r3, [pc, #524]	; (800afb8 <MX_LWIP_Init+0x244>)
 800adac:	2200      	movs	r2, #0
 800adae:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800adb0:	4b81      	ldr	r3, [pc, #516]	; (800afb8 <MX_LWIP_Init+0x244>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800adb6:	4b80      	ldr	r3, [pc, #512]	; (800afb8 <MX_LWIP_Init+0x244>)
 800adb8:	2200      	movs	r2, #0
 800adba:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 800adbc:	4b7e      	ldr	r3, [pc, #504]	; (800afb8 <MX_LWIP_Init+0x244>)
 800adbe:	2200      	movs	r2, #0
 800adc0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800adc2:	f000 fd15 	bl	800b7f0 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800adc6:	4b7a      	ldr	r3, [pc, #488]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	061a      	lsls	r2, r3, #24
 800adcc:	4b78      	ldr	r3, [pc, #480]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800adce:	785b      	ldrb	r3, [r3, #1]
 800add0:	041b      	lsls	r3, r3, #16
 800add2:	431a      	orrs	r2, r3
 800add4:	4b76      	ldr	r3, [pc, #472]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800add6:	789b      	ldrb	r3, [r3, #2]
 800add8:	021b      	lsls	r3, r3, #8
 800adda:	4313      	orrs	r3, r2
 800addc:	4a74      	ldr	r2, [pc, #464]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800adde:	78d2      	ldrb	r2, [r2, #3]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	061a      	lsls	r2, r3, #24
 800ade4:	4b72      	ldr	r3, [pc, #456]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	0619      	lsls	r1, r3, #24
 800adea:	4b71      	ldr	r3, [pc, #452]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800adec:	785b      	ldrb	r3, [r3, #1]
 800adee:	041b      	lsls	r3, r3, #16
 800adf0:	4319      	orrs	r1, r3
 800adf2:	4b6f      	ldr	r3, [pc, #444]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800adf4:	789b      	ldrb	r3, [r3, #2]
 800adf6:	021b      	lsls	r3, r3, #8
 800adf8:	430b      	orrs	r3, r1
 800adfa:	496d      	ldr	r1, [pc, #436]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800adfc:	78c9      	ldrb	r1, [r1, #3]
 800adfe:	430b      	orrs	r3, r1
 800ae00:	021b      	lsls	r3, r3, #8
 800ae02:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae06:	431a      	orrs	r2, r3
 800ae08:	4b69      	ldr	r3, [pc, #420]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	0619      	lsls	r1, r3, #24
 800ae0e:	4b68      	ldr	r3, [pc, #416]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ae10:	785b      	ldrb	r3, [r3, #1]
 800ae12:	041b      	lsls	r3, r3, #16
 800ae14:	4319      	orrs	r1, r3
 800ae16:	4b66      	ldr	r3, [pc, #408]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ae18:	789b      	ldrb	r3, [r3, #2]
 800ae1a:	021b      	lsls	r3, r3, #8
 800ae1c:	430b      	orrs	r3, r1
 800ae1e:	4964      	ldr	r1, [pc, #400]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ae20:	78c9      	ldrb	r1, [r1, #3]
 800ae22:	430b      	orrs	r3, r1
 800ae24:	0a1b      	lsrs	r3, r3, #8
 800ae26:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae2a:	431a      	orrs	r2, r3
 800ae2c:	4b60      	ldr	r3, [pc, #384]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	0619      	lsls	r1, r3, #24
 800ae32:	4b5f      	ldr	r3, [pc, #380]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ae34:	785b      	ldrb	r3, [r3, #1]
 800ae36:	041b      	lsls	r3, r3, #16
 800ae38:	4319      	orrs	r1, r3
 800ae3a:	4b5d      	ldr	r3, [pc, #372]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ae3c:	789b      	ldrb	r3, [r3, #2]
 800ae3e:	021b      	lsls	r3, r3, #8
 800ae40:	430b      	orrs	r3, r1
 800ae42:	495b      	ldr	r1, [pc, #364]	; (800afb0 <MX_LWIP_Init+0x23c>)
 800ae44:	78c9      	ldrb	r1, [r1, #3]
 800ae46:	430b      	orrs	r3, r1
 800ae48:	0e1b      	lsrs	r3, r3, #24
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	4a5b      	ldr	r2, [pc, #364]	; (800afbc <MX_LWIP_Init+0x248>)
 800ae4e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ae50:	4b58      	ldr	r3, [pc, #352]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	061a      	lsls	r2, r3, #24
 800ae56:	4b57      	ldr	r3, [pc, #348]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ae58:	785b      	ldrb	r3, [r3, #1]
 800ae5a:	041b      	lsls	r3, r3, #16
 800ae5c:	431a      	orrs	r2, r3
 800ae5e:	4b55      	ldr	r3, [pc, #340]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ae60:	789b      	ldrb	r3, [r3, #2]
 800ae62:	021b      	lsls	r3, r3, #8
 800ae64:	4313      	orrs	r3, r2
 800ae66:	4a53      	ldr	r2, [pc, #332]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ae68:	78d2      	ldrb	r2, [r2, #3]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	061a      	lsls	r2, r3, #24
 800ae6e:	4b51      	ldr	r3, [pc, #324]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	0619      	lsls	r1, r3, #24
 800ae74:	4b4f      	ldr	r3, [pc, #316]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ae76:	785b      	ldrb	r3, [r3, #1]
 800ae78:	041b      	lsls	r3, r3, #16
 800ae7a:	4319      	orrs	r1, r3
 800ae7c:	4b4d      	ldr	r3, [pc, #308]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ae7e:	789b      	ldrb	r3, [r3, #2]
 800ae80:	021b      	lsls	r3, r3, #8
 800ae82:	430b      	orrs	r3, r1
 800ae84:	494b      	ldr	r1, [pc, #300]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ae86:	78c9      	ldrb	r1, [r1, #3]
 800ae88:	430b      	orrs	r3, r1
 800ae8a:	021b      	lsls	r3, r3, #8
 800ae8c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae90:	431a      	orrs	r2, r3
 800ae92:	4b48      	ldr	r3, [pc, #288]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	0619      	lsls	r1, r3, #24
 800ae98:	4b46      	ldr	r3, [pc, #280]	; (800afb4 <MX_LWIP_Init+0x240>)
 800ae9a:	785b      	ldrb	r3, [r3, #1]
 800ae9c:	041b      	lsls	r3, r3, #16
 800ae9e:	4319      	orrs	r1, r3
 800aea0:	4b44      	ldr	r3, [pc, #272]	; (800afb4 <MX_LWIP_Init+0x240>)
 800aea2:	789b      	ldrb	r3, [r3, #2]
 800aea4:	021b      	lsls	r3, r3, #8
 800aea6:	430b      	orrs	r3, r1
 800aea8:	4942      	ldr	r1, [pc, #264]	; (800afb4 <MX_LWIP_Init+0x240>)
 800aeaa:	78c9      	ldrb	r1, [r1, #3]
 800aeac:	430b      	orrs	r3, r1
 800aeae:	0a1b      	lsrs	r3, r3, #8
 800aeb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aeb4:	431a      	orrs	r2, r3
 800aeb6:	4b3f      	ldr	r3, [pc, #252]	; (800afb4 <MX_LWIP_Init+0x240>)
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	0619      	lsls	r1, r3, #24
 800aebc:	4b3d      	ldr	r3, [pc, #244]	; (800afb4 <MX_LWIP_Init+0x240>)
 800aebe:	785b      	ldrb	r3, [r3, #1]
 800aec0:	041b      	lsls	r3, r3, #16
 800aec2:	4319      	orrs	r1, r3
 800aec4:	4b3b      	ldr	r3, [pc, #236]	; (800afb4 <MX_LWIP_Init+0x240>)
 800aec6:	789b      	ldrb	r3, [r3, #2]
 800aec8:	021b      	lsls	r3, r3, #8
 800aeca:	430b      	orrs	r3, r1
 800aecc:	4939      	ldr	r1, [pc, #228]	; (800afb4 <MX_LWIP_Init+0x240>)
 800aece:	78c9      	ldrb	r1, [r1, #3]
 800aed0:	430b      	orrs	r3, r1
 800aed2:	0e1b      	lsrs	r3, r3, #24
 800aed4:	4313      	orrs	r3, r2
 800aed6:	4a3a      	ldr	r2, [pc, #232]	; (800afc0 <MX_LWIP_Init+0x24c>)
 800aed8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800aeda:	4b37      	ldr	r3, [pc, #220]	; (800afb8 <MX_LWIP_Init+0x244>)
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	061a      	lsls	r2, r3, #24
 800aee0:	4b35      	ldr	r3, [pc, #212]	; (800afb8 <MX_LWIP_Init+0x244>)
 800aee2:	785b      	ldrb	r3, [r3, #1]
 800aee4:	041b      	lsls	r3, r3, #16
 800aee6:	431a      	orrs	r2, r3
 800aee8:	4b33      	ldr	r3, [pc, #204]	; (800afb8 <MX_LWIP_Init+0x244>)
 800aeea:	789b      	ldrb	r3, [r3, #2]
 800aeec:	021b      	lsls	r3, r3, #8
 800aeee:	4313      	orrs	r3, r2
 800aef0:	4a31      	ldr	r2, [pc, #196]	; (800afb8 <MX_LWIP_Init+0x244>)
 800aef2:	78d2      	ldrb	r2, [r2, #3]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	061a      	lsls	r2, r3, #24
 800aef8:	4b2f      	ldr	r3, [pc, #188]	; (800afb8 <MX_LWIP_Init+0x244>)
 800aefa:	781b      	ldrb	r3, [r3, #0]
 800aefc:	0619      	lsls	r1, r3, #24
 800aefe:	4b2e      	ldr	r3, [pc, #184]	; (800afb8 <MX_LWIP_Init+0x244>)
 800af00:	785b      	ldrb	r3, [r3, #1]
 800af02:	041b      	lsls	r3, r3, #16
 800af04:	4319      	orrs	r1, r3
 800af06:	4b2c      	ldr	r3, [pc, #176]	; (800afb8 <MX_LWIP_Init+0x244>)
 800af08:	789b      	ldrb	r3, [r3, #2]
 800af0a:	021b      	lsls	r3, r3, #8
 800af0c:	430b      	orrs	r3, r1
 800af0e:	492a      	ldr	r1, [pc, #168]	; (800afb8 <MX_LWIP_Init+0x244>)
 800af10:	78c9      	ldrb	r1, [r1, #3]
 800af12:	430b      	orrs	r3, r1
 800af14:	021b      	lsls	r3, r3, #8
 800af16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af1a:	431a      	orrs	r2, r3
 800af1c:	4b26      	ldr	r3, [pc, #152]	; (800afb8 <MX_LWIP_Init+0x244>)
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	0619      	lsls	r1, r3, #24
 800af22:	4b25      	ldr	r3, [pc, #148]	; (800afb8 <MX_LWIP_Init+0x244>)
 800af24:	785b      	ldrb	r3, [r3, #1]
 800af26:	041b      	lsls	r3, r3, #16
 800af28:	4319      	orrs	r1, r3
 800af2a:	4b23      	ldr	r3, [pc, #140]	; (800afb8 <MX_LWIP_Init+0x244>)
 800af2c:	789b      	ldrb	r3, [r3, #2]
 800af2e:	021b      	lsls	r3, r3, #8
 800af30:	430b      	orrs	r3, r1
 800af32:	4921      	ldr	r1, [pc, #132]	; (800afb8 <MX_LWIP_Init+0x244>)
 800af34:	78c9      	ldrb	r1, [r1, #3]
 800af36:	430b      	orrs	r3, r1
 800af38:	0a1b      	lsrs	r3, r3, #8
 800af3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800af3e:	431a      	orrs	r2, r3
 800af40:	4b1d      	ldr	r3, [pc, #116]	; (800afb8 <MX_LWIP_Init+0x244>)
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	0619      	lsls	r1, r3, #24
 800af46:	4b1c      	ldr	r3, [pc, #112]	; (800afb8 <MX_LWIP_Init+0x244>)
 800af48:	785b      	ldrb	r3, [r3, #1]
 800af4a:	041b      	lsls	r3, r3, #16
 800af4c:	4319      	orrs	r1, r3
 800af4e:	4b1a      	ldr	r3, [pc, #104]	; (800afb8 <MX_LWIP_Init+0x244>)
 800af50:	789b      	ldrb	r3, [r3, #2]
 800af52:	021b      	lsls	r3, r3, #8
 800af54:	430b      	orrs	r3, r1
 800af56:	4918      	ldr	r1, [pc, #96]	; (800afb8 <MX_LWIP_Init+0x244>)
 800af58:	78c9      	ldrb	r1, [r1, #3]
 800af5a:	430b      	orrs	r3, r1
 800af5c:	0e1b      	lsrs	r3, r3, #24
 800af5e:	4313      	orrs	r3, r2
 800af60:	4a18      	ldr	r2, [pc, #96]	; (800afc4 <MX_LWIP_Init+0x250>)
 800af62:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800af64:	4b18      	ldr	r3, [pc, #96]	; (800afc8 <MX_LWIP_Init+0x254>)
 800af66:	9302      	str	r3, [sp, #8]
 800af68:	4b18      	ldr	r3, [pc, #96]	; (800afcc <MX_LWIP_Init+0x258>)
 800af6a:	9301      	str	r3, [sp, #4]
 800af6c:	2300      	movs	r3, #0
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	4b14      	ldr	r3, [pc, #80]	; (800afc4 <MX_LWIP_Init+0x250>)
 800af72:	4a13      	ldr	r2, [pc, #76]	; (800afc0 <MX_LWIP_Init+0x24c>)
 800af74:	4911      	ldr	r1, [pc, #68]	; (800afbc <MX_LWIP_Init+0x248>)
 800af76:	4816      	ldr	r0, [pc, #88]	; (800afd0 <MX_LWIP_Init+0x25c>)
 800af78:	f001 f926 	bl	800c1c8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800af7c:	4814      	ldr	r0, [pc, #80]	; (800afd0 <MX_LWIP_Init+0x25c>)
 800af7e:	f001 fad5 	bl	800c52c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800af82:	4b13      	ldr	r3, [pc, #76]	; (800afd0 <MX_LWIP_Init+0x25c>)
 800af84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800af88:	089b      	lsrs	r3, r3, #2
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b00      	cmp	r3, #0
 800af92:	d003      	beq.n	800af9c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800af94:	480e      	ldr	r0, [pc, #56]	; (800afd0 <MX_LWIP_Init+0x25c>)
 800af96:	f001 fad9 	bl	800c54c <netif_set_up>
 800af9a:	e002      	b.n	800afa2 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800af9c:	480c      	ldr	r0, [pc, #48]	; (800afd0 <MX_LWIP_Init+0x25c>)
 800af9e:	f001 fb41 	bl	800c624 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800afa2:	490c      	ldr	r1, [pc, #48]	; (800afd4 <MX_LWIP_Init+0x260>)
 800afa4:	480a      	ldr	r0, [pc, #40]	; (800afd0 <MX_LWIP_Init+0x25c>)
 800afa6:	f001 fbd3 	bl	800c750 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800afaa:	bf00      	nop
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	20000f10 	.word	0x20000f10
 800afb4:	20000f14 	.word	0x20000f14
 800afb8:	20000f18 	.word	0x20000f18
 800afbc:	20000f04 	.word	0x20000f04
 800afc0:	20000f08 	.word	0x20000f08
 800afc4:	20000f0c 	.word	0x20000f0c
 800afc8:	08015875 	.word	0x08015875
 800afcc:	0800b2ed 	.word	0x0800b2ed
 800afd0:	20000ed0 	.word	0x20000ed0
 800afd4:	0800afd9 	.word	0x0800afd9

0800afd8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <SCB_InvalidateDCache_by_Addr>:
{
 800afec:	b480      	push	{r7}
 800afee:	b087      	sub	sp, #28
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800affe:	2320      	movs	r3, #32
 800b000:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b002:	f3bf 8f4f 	dsb	sy
}
 800b006:	bf00      	nop
    while (op_size > 0) {
 800b008:	e00b      	b.n	800b022 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800b00a:	4a0d      	ldr	r2, [pc, #52]	; (800b040 <SCB_InvalidateDCache_by_Addr+0x54>)
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	693a      	ldr	r2, [r7, #16]
 800b016:	4413      	add	r3, r2
 800b018:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2b00      	cmp	r3, #0
 800b026:	dcf0      	bgt.n	800b00a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800b028:	f3bf 8f4f 	dsb	sy
}
 800b02c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b02e:	f3bf 8f6f 	isb	sy
}
 800b032:	bf00      	nop
}
 800b034:	bf00      	nop
 800b036:	371c      	adds	r7, #28
 800b038:	46bd      	mov	sp, r7
 800b03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03e:	4770      	bx	lr
 800b040:	e000ed00 	.word	0xe000ed00

0800b044 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b084      	sub	sp, #16
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b050:	4b40      	ldr	r3, [pc, #256]	; (800b154 <low_level_init+0x110>)
 800b052:	4a41      	ldr	r2, [pc, #260]	; (800b158 <low_level_init+0x114>)
 800b054:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b056:	2300      	movs	r3, #0
 800b058:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800b05a:	2380      	movs	r3, #128	; 0x80
 800b05c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800b05e:	23e1      	movs	r3, #225	; 0xe1
 800b060:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800b062:	2300      	movs	r3, #0
 800b064:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800b066:	2300      	movs	r3, #0
 800b068:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800b06a:	2300      	movs	r3, #0
 800b06c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800b06e:	4a39      	ldr	r2, [pc, #228]	; (800b154 <low_level_init+0x110>)
 800b070:	f107 0308 	add.w	r3, r7, #8
 800b074:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b076:	4b37      	ldr	r3, [pc, #220]	; (800b154 <low_level_init+0x110>)
 800b078:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b07c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b07e:	4b35      	ldr	r3, [pc, #212]	; (800b154 <low_level_init+0x110>)
 800b080:	4a36      	ldr	r2, [pc, #216]	; (800b15c <low_level_init+0x118>)
 800b082:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b084:	4b33      	ldr	r3, [pc, #204]	; (800b154 <low_level_init+0x110>)
 800b086:	4a36      	ldr	r2, [pc, #216]	; (800b160 <low_level_init+0x11c>)
 800b088:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800b08a:	4b32      	ldr	r3, [pc, #200]	; (800b154 <low_level_init+0x110>)
 800b08c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b090:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b092:	4830      	ldr	r0, [pc, #192]	; (800b154 <low_level_init+0x110>)
 800b094:	f7f8 f8bc 	bl	8003210 <HAL_ETH_Init>
 800b098:	4603      	mov	r3, r0
 800b09a:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b09c:	2238      	movs	r2, #56	; 0x38
 800b09e:	2100      	movs	r1, #0
 800b0a0:	4830      	ldr	r0, [pc, #192]	; (800b164 <low_level_init+0x120>)
 800b0a2:	f00b f88d 	bl	80161c0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b0a6:	4b2f      	ldr	r3, [pc, #188]	; (800b164 <low_level_init+0x120>)
 800b0a8:	2221      	movs	r2, #33	; 0x21
 800b0aa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b0ac:	4b2d      	ldr	r3, [pc, #180]	; (800b164 <low_level_init+0x120>)
 800b0ae:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800b0b2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b0b4:	4b2b      	ldr	r3, [pc, #172]	; (800b164 <low_level_init+0x120>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b0ba:	482b      	ldr	r0, [pc, #172]	; (800b168 <low_level_init+0x124>)
 800b0bc:	f000 ff4c 	bl	800bf58 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2206      	movs	r2, #6
 800b0c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b0c8:	4b22      	ldr	r3, [pc, #136]	; (800b154 <low_level_init+0x110>)
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	781a      	ldrb	r2, [r3, #0]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b0d4:	4b1f      	ldr	r3, [pc, #124]	; (800b154 <low_level_init+0x110>)
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	785a      	ldrb	r2, [r3, #1]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b0e0:	4b1c      	ldr	r3, [pc, #112]	; (800b154 <low_level_init+0x110>)
 800b0e2:	685b      	ldr	r3, [r3, #4]
 800b0e4:	789a      	ldrb	r2, [r3, #2]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b0ec:	4b19      	ldr	r3, [pc, #100]	; (800b154 <low_level_init+0x110>)
 800b0ee:	685b      	ldr	r3, [r3, #4]
 800b0f0:	78da      	ldrb	r2, [r3, #3]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b0f8:	4b16      	ldr	r3, [pc, #88]	; (800b154 <low_level_init+0x110>)
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	791a      	ldrb	r2, [r3, #4]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b104:	4b13      	ldr	r3, [pc, #76]	; (800b154 <low_level_init+0x110>)
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	795a      	ldrb	r2, [r3, #5]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b116:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b11e:	f043 030a 	orr.w	r3, r3, #10
 800b122:	b2da      	uxtb	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b12a:	4910      	ldr	r1, [pc, #64]	; (800b16c <low_level_init+0x128>)
 800b12c:	4810      	ldr	r0, [pc, #64]	; (800b170 <low_level_init+0x12c>)
 800b12e:	f7f7 f956 	bl	80023de <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b132:	480f      	ldr	r0, [pc, #60]	; (800b170 <low_level_init+0x12c>)
 800b134:	f7f7 f985 	bl	8002442 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b138:	7bfb      	ldrb	r3, [r7, #15]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d103      	bne.n	800b146 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 fa2a 	bl	800b598 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b144:	e001      	b.n	800b14a <low_level_init+0x106>
    Error_Handler();
 800b146:	f7f6 f9eb 	bl	8001520 <Error_Handler>
}
 800b14a:	bf00      	nop
 800b14c:	3710      	adds	r7, #16
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	200058a8 	.word	0x200058a8
 800b158:	40028000 	.word	0x40028000
 800b15c:	20000130 	.word	0x20000130
 800b160:	20000090 	.word	0x20000090
 800b164:	20005958 	.word	0x20005958
 800b168:	08019cac 	.word	0x08019cac
 800b16c:	2000000c 	.word	0x2000000c
 800b170:	20005990 	.word	0x20005990

0800b174 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b092      	sub	sp, #72	; 0x48
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800b17e:	2300      	movs	r3, #0
 800b180:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800b182:	2300      	movs	r3, #0
 800b184:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800b186:	2300      	movs	r3, #0
 800b188:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800b18c:	f107 030c 	add.w	r3, r7, #12
 800b190:	2230      	movs	r2, #48	; 0x30
 800b192:	2100      	movs	r1, #0
 800b194:	4618      	mov	r0, r3
 800b196:	f00b f813 	bl	80161c0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b19a:	f107 030c 	add.w	r3, r7, #12
 800b19e:	2230      	movs	r2, #48	; 0x30
 800b1a0:	2100      	movs	r1, #0
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f00b f80c 	bl	80161c0 <memset>

  for(q = p; q != NULL; q = q->next)
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	643b      	str	r3, [r7, #64]	; 0x40
 800b1ac:	e045      	b.n	800b23a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b1ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1b0:	2b03      	cmp	r3, #3
 800b1b2:	d902      	bls.n	800b1ba <low_level_output+0x46>
      return ERR_IF;
 800b1b4:	f06f 030b 	mvn.w	r3, #11
 800b1b8:	e055      	b.n	800b266 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800b1ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1bc:	6859      	ldr	r1, [r3, #4]
 800b1be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	005b      	lsls	r3, r3, #1
 800b1c4:	4413      	add	r3, r2
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	3348      	adds	r3, #72	; 0x48
 800b1ca:	443b      	add	r3, r7
 800b1cc:	3b3c      	subs	r3, #60	; 0x3c
 800b1ce:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1d2:	895b      	ldrh	r3, [r3, #10]
 800b1d4:	4619      	mov	r1, r3
 800b1d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1d8:	4613      	mov	r3, r2
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	4413      	add	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	3348      	adds	r3, #72	; 0x48
 800b1e2:	443b      	add	r3, r7
 800b1e4:	3b38      	subs	r3, #56	; 0x38
 800b1e6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b1e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d011      	beq.n	800b212 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b1ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1f0:	1e5a      	subs	r2, r3, #1
 800b1f2:	f107 000c 	add.w	r0, r7, #12
 800b1f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	005b      	lsls	r3, r3, #1
 800b1fc:	440b      	add	r3, r1
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	18c1      	adds	r1, r0, r3
 800b202:	4613      	mov	r3, r2
 800b204:	005b      	lsls	r3, r3, #1
 800b206:	4413      	add	r3, r2
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	3348      	adds	r3, #72	; 0x48
 800b20c:	443b      	add	r3, r7
 800b20e:	3b34      	subs	r3, #52	; 0x34
 800b210:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d109      	bne.n	800b22e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800b21a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b21c:	4613      	mov	r3, r2
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	4413      	add	r3, r2
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	3348      	adds	r3, #72	; 0x48
 800b226:	443b      	add	r3, r7
 800b228:	3b34      	subs	r3, #52	; 0x34
 800b22a:	2200      	movs	r2, #0
 800b22c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b22e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b230:	3301      	adds	r3, #1
 800b232:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	643b      	str	r3, [r7, #64]	; 0x40
 800b23a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d1b6      	bne.n	800b1ae <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	891b      	ldrh	r3, [r3, #8]
 800b244:	461a      	mov	r2, r3
 800b246:	4b0a      	ldr	r3, [pc, #40]	; (800b270 <low_level_output+0xfc>)
 800b248:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b24a:	4a09      	ldr	r2, [pc, #36]	; (800b270 <low_level_output+0xfc>)
 800b24c:	f107 030c 	add.w	r3, r7, #12
 800b250:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800b252:	4a07      	ldr	r2, [pc, #28]	; (800b270 <low_level_output+0xfc>)
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b258:	2214      	movs	r2, #20
 800b25a:	4905      	ldr	r1, [pc, #20]	; (800b270 <low_level_output+0xfc>)
 800b25c:	4805      	ldr	r0, [pc, #20]	; (800b274 <low_level_output+0x100>)
 800b25e:	f7f8 f90b 	bl	8003478 <HAL_ETH_Transmit>

  return errval;
 800b262:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b266:	4618      	mov	r0, r3
 800b268:	3748      	adds	r7, #72	; 0x48
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	20005958 	.word	0x20005958
 800b274:	200058a8 	.word	0x200058a8

0800b278 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b280:	2300      	movs	r3, #0
 800b282:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800b284:	4b07      	ldr	r3, [pc, #28]	; (800b2a4 <low_level_input+0x2c>)
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d105      	bne.n	800b298 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800b28c:	f107 030c 	add.w	r3, r7, #12
 800b290:	4619      	mov	r1, r3
 800b292:	4805      	ldr	r0, [pc, #20]	; (800b2a8 <low_level_input+0x30>)
 800b294:	f7f8 f984 	bl	80035a0 <HAL_ETH_ReadData>
  }

  return p;
 800b298:	68fb      	ldr	r3, [r7, #12]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	200058a4 	.word	0x200058a4
 800b2a8:	200058a8 	.word	0x200058a8

0800b2ac <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b084      	sub	sp, #16
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f7ff ffdd 	bl	800b278 <low_level_input>
 800b2be:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00a      	beq.n	800b2dc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	6879      	ldr	r1, [r7, #4]
 800b2cc:	68f8      	ldr	r0, [r7, #12]
 800b2ce:	4798      	blx	r3
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d002      	beq.n	800b2dc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f001 fdba 	bl	800ce50 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d1ea      	bne.n	800b2b8 <ethernetif_input+0xc>
}
 800b2e2:	bf00      	nop
 800b2e4:	bf00      	nop
 800b2e6:	3710      	adds	r7, #16
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d106      	bne.n	800b308 <ethernetif_init+0x1c>
 800b2fa:	4b0e      	ldr	r3, [pc, #56]	; (800b334 <ethernetif_init+0x48>)
 800b2fc:	f240 127b 	movw	r2, #379	; 0x17b
 800b300:	490d      	ldr	r1, [pc, #52]	; (800b338 <ethernetif_init+0x4c>)
 800b302:	480e      	ldr	r0, [pc, #56]	; (800b33c <ethernetif_init+0x50>)
 800b304:	f00a ff64 	bl	80161d0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2273      	movs	r2, #115	; 0x73
 800b30c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2274      	movs	r2, #116	; 0x74
 800b314:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a09      	ldr	r2, [pc, #36]	; (800b340 <ethernetif_init+0x54>)
 800b31c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a08      	ldr	r2, [pc, #32]	; (800b344 <ethernetif_init+0x58>)
 800b322:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7ff fe8d 	bl	800b044 <low_level_init>

  return ERR_OK;
 800b32a:	2300      	movs	r3, #0
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3708      	adds	r7, #8
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	08017288 	.word	0x08017288
 800b338:	080172a4 	.word	0x080172a4
 800b33c:	080172b4 	.word	0x080172b4
 800b340:	08013d2d 	.word	0x08013d2d
 800b344:	0800b175 	.word	0x0800b175

0800b348 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b084      	sub	sp, #16
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b354:	68f9      	ldr	r1, [r7, #12]
 800b356:	4807      	ldr	r0, [pc, #28]	; (800b374 <pbuf_free_custom+0x2c>)
 800b358:	f000 fee0 	bl	800c11c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800b35c:	4b06      	ldr	r3, [pc, #24]	; (800b378 <pbuf_free_custom+0x30>)
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	2b01      	cmp	r3, #1
 800b362:	d102      	bne.n	800b36a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800b364:	4b04      	ldr	r3, [pc, #16]	; (800b378 <pbuf_free_custom+0x30>)
 800b366:	2200      	movs	r2, #0
 800b368:	701a      	strb	r2, [r3, #0]
  }
}
 800b36a:	bf00      	nop
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	08019cac 	.word	0x08019cac
 800b378:	200058a4 	.word	0x200058a4

0800b37c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b380:	f7f7 f9e0 	bl	8002744 <HAL_GetTick>
 800b384:	4603      	mov	r3, r0
}
 800b386:	4618      	mov	r0, r3
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b08e      	sub	sp, #56	; 0x38
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b398:	2200      	movs	r2, #0
 800b39a:	601a      	str	r2, [r3, #0]
 800b39c:	605a      	str	r2, [r3, #4]
 800b39e:	609a      	str	r2, [r3, #8]
 800b3a0:	60da      	str	r2, [r3, #12]
 800b3a2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a4e      	ldr	r2, [pc, #312]	; (800b4e4 <HAL_ETH_MspInit+0x158>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	f040 8096 	bne.w	800b4dc <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800b3b0:	4b4d      	ldr	r3, [pc, #308]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3b4:	4a4c      	ldr	r2, [pc, #304]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b3b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b3ba:	6313      	str	r3, [r2, #48]	; 0x30
 800b3bc:	4b4a      	ldr	r3, [pc, #296]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3c4:	623b      	str	r3, [r7, #32]
 800b3c6:	6a3b      	ldr	r3, [r7, #32]
 800b3c8:	4b47      	ldr	r3, [pc, #284]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b3ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3cc:	4a46      	ldr	r2, [pc, #280]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b3ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b3d2:	6313      	str	r3, [r2, #48]	; 0x30
 800b3d4:	4b44      	ldr	r3, [pc, #272]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b3dc:	61fb      	str	r3, [r7, #28]
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	4b41      	ldr	r3, [pc, #260]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e4:	4a40      	ldr	r2, [pc, #256]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b3e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b3ea:	6313      	str	r3, [r2, #48]	; 0x30
 800b3ec:	4b3e      	ldr	r3, [pc, #248]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3f4:	61bb      	str	r3, [r7, #24]
 800b3f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b3f8:	4b3b      	ldr	r3, [pc, #236]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3fc:	4a3a      	ldr	r2, [pc, #232]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b3fe:	f043 0304 	orr.w	r3, r3, #4
 800b402:	6313      	str	r3, [r2, #48]	; 0x30
 800b404:	4b38      	ldr	r3, [pc, #224]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b408:	f003 0304 	and.w	r3, r3, #4
 800b40c:	617b      	str	r3, [r7, #20]
 800b40e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b410:	4b35      	ldr	r3, [pc, #212]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b414:	4a34      	ldr	r2, [pc, #208]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b416:	f043 0301 	orr.w	r3, r3, #1
 800b41a:	6313      	str	r3, [r2, #48]	; 0x30
 800b41c:	4b32      	ldr	r3, [pc, #200]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b41e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b420:	f003 0301 	and.w	r3, r3, #1
 800b424:	613b      	str	r3, [r7, #16]
 800b426:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b428:	4b2f      	ldr	r3, [pc, #188]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42c:	4a2e      	ldr	r2, [pc, #184]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b42e:	f043 0302 	orr.w	r3, r3, #2
 800b432:	6313      	str	r3, [r2, #48]	; 0x30
 800b434:	4b2c      	ldr	r3, [pc, #176]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b438:	f003 0302 	and.w	r3, r3, #2
 800b43c:	60fb      	str	r3, [r7, #12]
 800b43e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b440:	4b29      	ldr	r3, [pc, #164]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b444:	4a28      	ldr	r2, [pc, #160]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b44a:	6313      	str	r3, [r2, #48]	; 0x30
 800b44c:	4b26      	ldr	r3, [pc, #152]	; (800b4e8 <HAL_ETH_MspInit+0x15c>)
 800b44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b454:	60bb      	str	r3, [r7, #8]
 800b456:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b458:	2332      	movs	r3, #50	; 0x32
 800b45a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b45c:	2302      	movs	r3, #2
 800b45e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b460:	2300      	movs	r3, #0
 800b462:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b464:	2303      	movs	r3, #3
 800b466:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b468:	230b      	movs	r3, #11
 800b46a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b46c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b470:	4619      	mov	r1, r3
 800b472:	481e      	ldr	r0, [pc, #120]	; (800b4ec <HAL_ETH_MspInit+0x160>)
 800b474:	f7f8 ffbe 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b478:	2386      	movs	r3, #134	; 0x86
 800b47a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b47c:	2302      	movs	r3, #2
 800b47e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b480:	2300      	movs	r3, #0
 800b482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b484:	2303      	movs	r3, #3
 800b486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b488:	230b      	movs	r3, #11
 800b48a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b48c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b490:	4619      	mov	r1, r3
 800b492:	4817      	ldr	r0, [pc, #92]	; (800b4f0 <HAL_ETH_MspInit+0x164>)
 800b494:	f7f8 ffae 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b49c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b49e:	2302      	movs	r3, #2
 800b4a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b4aa:	230b      	movs	r3, #11
 800b4ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b4ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	480f      	ldr	r0, [pc, #60]	; (800b4f4 <HAL_ETH_MspInit+0x168>)
 800b4b6:	f7f8 ff9d 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b4ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b4be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b4cc:	230b      	movs	r3, #11
 800b4ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b4d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	4808      	ldr	r0, [pc, #32]	; (800b4f8 <HAL_ETH_MspInit+0x16c>)
 800b4d8:	f7f8 ff8c 	bl	80043f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b4dc:	bf00      	nop
 800b4de:	3738      	adds	r7, #56	; 0x38
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	40028000 	.word	0x40028000
 800b4e8:	40023800 	.word	0x40023800
 800b4ec:	40020800 	.word	0x40020800
 800b4f0:	40020000 	.word	0x40020000
 800b4f4:	40020400 	.word	0x40020400
 800b4f8:	40021800 	.word	0x40021800

0800b4fc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b500:	4802      	ldr	r0, [pc, #8]	; (800b50c <ETH_PHY_IO_Init+0x10>)
 800b502:	f7f8 fb1d 	bl	8003b40 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	200058a8 	.word	0x200058a8

0800b510 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b510:	b480      	push	{r7}
 800b512:	af00      	add	r7, sp, #0
  return 0;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	68f9      	ldr	r1, [r7, #12]
 800b532:	4807      	ldr	r0, [pc, #28]	; (800b550 <ETH_PHY_IO_ReadReg+0x30>)
 800b534:	f7f8 f96c 	bl	8003810 <HAL_ETH_ReadPHYRegister>
 800b538:	4603      	mov	r3, r0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d002      	beq.n	800b544 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b53e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b542:	e000      	b.n	800b546 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	200058a8 	.word	0x200058a8

0800b554 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b084      	sub	sp, #16
 800b558:	af00      	add	r7, sp, #0
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	68f9      	ldr	r1, [r7, #12]
 800b566:	4807      	ldr	r0, [pc, #28]	; (800b584 <ETH_PHY_IO_WriteReg+0x30>)
 800b568:	f7f8 f99d 	bl	80038a6 <HAL_ETH_WritePHYRegister>
 800b56c:	4603      	mov	r3, r0
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d002      	beq.n	800b578 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b576:	e000      	b.n	800b57a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	200058a8 	.word	0x200058a8

0800b588 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b58c:	f7f7 f8da 	bl	8002744 <HAL_GetTick>
 800b590:	4603      	mov	r3, r0
}
 800b592:	4618      	mov	r0, r3
 800b594:	bd80      	pop	{r7, pc}
	...

0800b598 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b0a0      	sub	sp, #128	; 0x80
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800b5a0:	f107 030c 	add.w	r3, r7, #12
 800b5a4:	2264      	movs	r2, #100	; 0x64
 800b5a6:	2100      	movs	r1, #0
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f00a fe09 	bl	80161c0 <memset>
  int32_t PHYLinkState = 0;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b5be:	483a      	ldr	r0, [pc, #232]	; (800b6a8 <ethernet_link_check_state+0x110>)
 800b5c0:	f7f6 ffe7 	bl	8002592 <LAN8742_GetLinkState>
 800b5c4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5cc:	089b      	lsrs	r3, r3, #2
 800b5ce:	f003 0301 	and.w	r3, r3, #1
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00c      	beq.n	800b5f2 <ethernet_link_check_state+0x5a>
 800b5d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	dc09      	bgt.n	800b5f2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800b5de:	4833      	ldr	r0, [pc, #204]	; (800b6ac <ethernet_link_check_state+0x114>)
 800b5e0:	f7f7 fef1 	bl	80033c6 <HAL_ETH_Stop>
    netif_set_down(netif);
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f001 f81d 	bl	800c624 <netif_set_down>
    netif_set_link_down(netif);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f001 f880 	bl	800c6f0 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800b5f0:	e055      	b.n	800b69e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5f8:	f003 0304 	and.w	r3, r3, #4
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d14e      	bne.n	800b69e <ethernet_link_check_state+0x106>
 800b600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b602:	2b01      	cmp	r3, #1
 800b604:	dd4b      	ble.n	800b69e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800b606:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b608:	3b02      	subs	r3, #2
 800b60a:	2b03      	cmp	r3, #3
 800b60c:	d82a      	bhi.n	800b664 <ethernet_link_check_state+0xcc>
 800b60e:	a201      	add	r2, pc, #4	; (adr r2, 800b614 <ethernet_link_check_state+0x7c>)
 800b610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b614:	0800b625 	.word	0x0800b625
 800b618:	0800b637 	.word	0x0800b637
 800b61c:	0800b647 	.word	0x0800b647
 800b620:	0800b657 	.word	0x0800b657
      duplex = ETH_FULLDUPLEX_MODE;
 800b624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b628:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b62a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b62e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b630:	2301      	movs	r3, #1
 800b632:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b634:	e017      	b.n	800b666 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800b636:	2300      	movs	r3, #0
 800b638:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b63a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b63e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b640:	2301      	movs	r3, #1
 800b642:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b644:	e00f      	b.n	800b666 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800b646:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b64a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b64c:	2300      	movs	r3, #0
 800b64e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b650:	2301      	movs	r3, #1
 800b652:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b654:	e007      	b.n	800b666 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800b656:	2300      	movs	r3, #0
 800b658:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b65a:	2300      	movs	r3, #0
 800b65c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b65e:	2301      	movs	r3, #1
 800b660:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b662:	e000      	b.n	800b666 <ethernet_link_check_state+0xce>
      break;
 800b664:	bf00      	nop
    if(linkchanged)
 800b666:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d018      	beq.n	800b69e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b66c:	f107 030c 	add.w	r3, r7, #12
 800b670:	4619      	mov	r1, r3
 800b672:	480e      	ldr	r0, [pc, #56]	; (800b6ac <ethernet_link_check_state+0x114>)
 800b674:	f7f8 f960 	bl	8003938 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b67a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800b67c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b67e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b680:	f107 030c 	add.w	r3, r7, #12
 800b684:	4619      	mov	r1, r3
 800b686:	4809      	ldr	r0, [pc, #36]	; (800b6ac <ethernet_link_check_state+0x114>)
 800b688:	f7f8 fa40 	bl	8003b0c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800b68c:	4807      	ldr	r0, [pc, #28]	; (800b6ac <ethernet_link_check_state+0x114>)
 800b68e:	f7f7 fe3b 	bl	8003308 <HAL_ETH_Start>
      netif_set_up(netif);
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 ff5a 	bl	800c54c <netif_set_up>
      netif_set_link_up(netif);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f000 fff5 	bl	800c688 <netif_set_link_up>
}
 800b69e:	bf00      	nop
 800b6a0:	3780      	adds	r7, #128	; 0x80
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20005990 	.word	0x20005990
 800b6ac:	200058a8 	.word	0x200058a8

0800b6b0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af02      	add	r7, sp, #8
 800b6b6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b6b8:	4812      	ldr	r0, [pc, #72]	; (800b704 <HAL_ETH_RxAllocateCallback+0x54>)
 800b6ba:	f000 fcc1 	bl	800c040 <memp_malloc_pool>
 800b6be:	60f8      	str	r0, [r7, #12]
  if (p)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d014      	beq.n	800b6f0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f103 0220 	add.w	r2, r3, #32
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	4a0d      	ldr	r2, [pc, #52]	; (800b708 <HAL_ETH_RxAllocateCallback+0x58>)
 800b6d4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800b6de:	9201      	str	r2, [sp, #4]
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2241      	movs	r2, #65	; 0x41
 800b6e6:	2100      	movs	r1, #0
 800b6e8:	2000      	movs	r0, #0
 800b6ea:	f001 f9f7 	bl	800cadc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800b6ee:	e005      	b.n	800b6fc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800b6f0:	4b06      	ldr	r3, [pc, #24]	; (800b70c <HAL_ETH_RxAllocateCallback+0x5c>)
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	601a      	str	r2, [r3, #0]
}
 800b6fc:	bf00      	nop
 800b6fe:	3710      	adds	r7, #16
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	08019cac 	.word	0x08019cac
 800b708:	0800b349 	.word	0x0800b349
 800b70c:	200058a4 	.word	0x200058a4

0800b710 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b088      	sub	sp, #32
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
 800b71c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b726:	2300      	movs	r3, #0
 800b728:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	3b20      	subs	r3, #32
 800b72e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	2200      	movs	r2, #0
 800b734:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	2200      	movs	r2, #0
 800b73a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800b73c:	69fb      	ldr	r3, [r7, #28]
 800b73e:	887a      	ldrh	r2, [r7, #2]
 800b740:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d103      	bne.n	800b752 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	69fa      	ldr	r2, [r7, #28]
 800b74e:	601a      	str	r2, [r3, #0]
 800b750:	e003      	b.n	800b75a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800b752:	697b      	ldr	r3, [r7, #20]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	69fa      	ldr	r2, [r7, #28]
 800b758:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	69fa      	ldr	r2, [r7, #28]
 800b75e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	61fb      	str	r3, [r7, #28]
 800b766:	e009      	b.n	800b77c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	891a      	ldrh	r2, [r3, #8]
 800b76c:	887b      	ldrh	r3, [r7, #2]
 800b76e:	4413      	add	r3, r2
 800b770:	b29a      	uxth	r2, r3
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	61fb      	str	r3, [r7, #28]
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1f2      	bne.n	800b768 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800b782:	887b      	ldrh	r3, [r7, #2]
 800b784:	4619      	mov	r1, r3
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7ff fc30 	bl	800afec <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800b78c:	bf00      	nop
 800b78e:	3720      	adds	r7, #32
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b794:	b480      	push	{r7}
 800b796:	b083      	sub	sp, #12
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b79e:	88fb      	ldrh	r3, [r7, #6]
 800b7a0:	021b      	lsls	r3, r3, #8
 800b7a2:	b21a      	sxth	r2, r3
 800b7a4:	88fb      	ldrh	r3, [r7, #6]
 800b7a6:	0a1b      	lsrs	r3, r3, #8
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	b21b      	sxth	r3, r3
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	b21b      	sxth	r3, r3
 800b7b0:	b29b      	uxth	r3, r3
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	370c      	adds	r7, #12
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr

0800b7be <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b7be:	b480      	push	{r7}
 800b7c0:	b083      	sub	sp, #12
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	061a      	lsls	r2, r3, #24
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	021b      	lsls	r3, r3, #8
 800b7ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b7d2:	431a      	orrs	r2, r3
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	0a1b      	lsrs	r3, r3, #8
 800b7d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b7dc:	431a      	orrs	r2, r3
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	0e1b      	lsrs	r3, r3, #24
 800b7e2:	4313      	orrs	r3, r2
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800b7fa:	f000 f8d5 	bl	800b9a8 <mem_init>
  memp_init();
 800b7fe:	f000 fbdb 	bl	800bfb8 <memp_init>
  pbuf_init();
  netif_init();
 800b802:	f000 fcd9 	bl	800c1b8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b806:	f007 f8f9 	bl	80129fc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b80a:	f001 fe51 	bl	800d4b0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b80e:	f007 f86b 	bl	80128e8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b812:	bf00      	nop
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
	...

0800b81c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	4603      	mov	r3, r0
 800b824:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b826:	4b05      	ldr	r3, [pc, #20]	; (800b83c <ptr_to_mem+0x20>)
 800b828:	681a      	ldr	r2, [r3, #0]
 800b82a:	88fb      	ldrh	r3, [r7, #6]
 800b82c:	4413      	add	r3, r2
}
 800b82e:	4618      	mov	r0, r3
 800b830:	370c      	adds	r7, #12
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
 800b83a:	bf00      	nop
 800b83c:	2000601c 	.word	0x2000601c

0800b840 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b848:	4b05      	ldr	r3, [pc, #20]	; (800b860 <mem_to_ptr+0x20>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	687a      	ldr	r2, [r7, #4]
 800b84e:	1ad3      	subs	r3, r2, r3
 800b850:	b29b      	uxth	r3, r3
}
 800b852:	4618      	mov	r0, r3
 800b854:	370c      	adds	r7, #12
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	2000601c 	.word	0x2000601c

0800b864 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b86c:	4b45      	ldr	r3, [pc, #276]	; (800b984 <plug_holes+0x120>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	429a      	cmp	r2, r3
 800b874:	d206      	bcs.n	800b884 <plug_holes+0x20>
 800b876:	4b44      	ldr	r3, [pc, #272]	; (800b988 <plug_holes+0x124>)
 800b878:	f240 12df 	movw	r2, #479	; 0x1df
 800b87c:	4943      	ldr	r1, [pc, #268]	; (800b98c <plug_holes+0x128>)
 800b87e:	4844      	ldr	r0, [pc, #272]	; (800b990 <plug_holes+0x12c>)
 800b880:	f00a fca6 	bl	80161d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b884:	4b43      	ldr	r3, [pc, #268]	; (800b994 <plug_holes+0x130>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	687a      	ldr	r2, [r7, #4]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d306      	bcc.n	800b89c <plug_holes+0x38>
 800b88e:	4b3e      	ldr	r3, [pc, #248]	; (800b988 <plug_holes+0x124>)
 800b890:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800b894:	4940      	ldr	r1, [pc, #256]	; (800b998 <plug_holes+0x134>)
 800b896:	483e      	ldr	r0, [pc, #248]	; (800b990 <plug_holes+0x12c>)
 800b898:	f00a fc9a 	bl	80161d0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	791b      	ldrb	r3, [r3, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d006      	beq.n	800b8b2 <plug_holes+0x4e>
 800b8a4:	4b38      	ldr	r3, [pc, #224]	; (800b988 <plug_holes+0x124>)
 800b8a6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800b8aa:	493c      	ldr	r1, [pc, #240]	; (800b99c <plug_holes+0x138>)
 800b8ac:	4838      	ldr	r0, [pc, #224]	; (800b990 <plug_holes+0x12c>)
 800b8ae:	f00a fc8f 	bl	80161d0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	881b      	ldrh	r3, [r3, #0]
 800b8b6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b8ba:	d906      	bls.n	800b8ca <plug_holes+0x66>
 800b8bc:	4b32      	ldr	r3, [pc, #200]	; (800b988 <plug_holes+0x124>)
 800b8be:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800b8c2:	4937      	ldr	r1, [pc, #220]	; (800b9a0 <plug_holes+0x13c>)
 800b8c4:	4832      	ldr	r0, [pc, #200]	; (800b990 <plug_holes+0x12c>)
 800b8c6:	f00a fc83 	bl	80161d0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	881b      	ldrh	r3, [r3, #0]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7ff ffa4 	bl	800b81c <ptr_to_mem>
 800b8d4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b8d6:	687a      	ldr	r2, [r7, #4]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d024      	beq.n	800b928 <plug_holes+0xc4>
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	791b      	ldrb	r3, [r3, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d120      	bne.n	800b928 <plug_holes+0xc4>
 800b8e6:	4b2b      	ldr	r3, [pc, #172]	; (800b994 <plug_holes+0x130>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	429a      	cmp	r2, r3
 800b8ee:	d01b      	beq.n	800b928 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b8f0:	4b2c      	ldr	r3, [pc, #176]	; (800b9a4 <plug_holes+0x140>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d102      	bne.n	800b900 <plug_holes+0x9c>
      lfree = mem;
 800b8fa:	4a2a      	ldr	r2, [pc, #168]	; (800b9a4 <plug_holes+0x140>)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	881a      	ldrh	r2, [r3, #0]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b910:	d00a      	beq.n	800b928 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	881b      	ldrh	r3, [r3, #0]
 800b916:	4618      	mov	r0, r3
 800b918:	f7ff ff80 	bl	800b81c <ptr_to_mem>
 800b91c:	4604      	mov	r4, r0
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f7ff ff8e 	bl	800b840 <mem_to_ptr>
 800b924:	4603      	mov	r3, r0
 800b926:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	885b      	ldrh	r3, [r3, #2]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff ff75 	bl	800b81c <ptr_to_mem>
 800b932:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	429a      	cmp	r2, r3
 800b93a:	d01f      	beq.n	800b97c <plug_holes+0x118>
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	791b      	ldrb	r3, [r3, #4]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d11b      	bne.n	800b97c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b944:	4b17      	ldr	r3, [pc, #92]	; (800b9a4 <plug_holes+0x140>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	687a      	ldr	r2, [r7, #4]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d102      	bne.n	800b954 <plug_holes+0xf0>
      lfree = pmem;
 800b94e:	4a15      	ldr	r2, [pc, #84]	; (800b9a4 <plug_holes+0x140>)
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	881a      	ldrh	r2, [r3, #0]
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	881b      	ldrh	r3, [r3, #0]
 800b960:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b964:	d00a      	beq.n	800b97c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	881b      	ldrh	r3, [r3, #0]
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7ff ff56 	bl	800b81c <ptr_to_mem>
 800b970:	4604      	mov	r4, r0
 800b972:	68b8      	ldr	r0, [r7, #8]
 800b974:	f7ff ff64 	bl	800b840 <mem_to_ptr>
 800b978:	4603      	mov	r3, r0
 800b97a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b97c:	bf00      	nop
 800b97e:	3714      	adds	r7, #20
 800b980:	46bd      	mov	sp, r7
 800b982:	bd90      	pop	{r4, r7, pc}
 800b984:	2000601c 	.word	0x2000601c
 800b988:	080172dc 	.word	0x080172dc
 800b98c:	0801730c 	.word	0x0801730c
 800b990:	08017324 	.word	0x08017324
 800b994:	20006020 	.word	0x20006020
 800b998:	0801734c 	.word	0x0801734c
 800b99c:	08017368 	.word	0x08017368
 800b9a0:	08017384 	.word	0x08017384
 800b9a4:	20006024 	.word	0x20006024

0800b9a8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b082      	sub	sp, #8
 800b9ac:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b9ae:	4b18      	ldr	r3, [pc, #96]	; (800ba10 <mem_init+0x68>)
 800b9b0:	3303      	adds	r3, #3
 800b9b2:	f023 0303 	bic.w	r3, r3, #3
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	4b16      	ldr	r3, [pc, #88]	; (800ba14 <mem_init+0x6c>)
 800b9ba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b9bc:	4b15      	ldr	r3, [pc, #84]	; (800ba14 <mem_init+0x6c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b9c8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b9d6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800b9da:	f7ff ff1f 	bl	800b81c <ptr_to_mem>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	4a0d      	ldr	r2, [pc, #52]	; (800ba18 <mem_init+0x70>)
 800b9e2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b9e4:	4b0c      	ldr	r3, [pc, #48]	; (800ba18 <mem_init+0x70>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b9ec:	4b0a      	ldr	r3, [pc, #40]	; (800ba18 <mem_init+0x70>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b9f4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b9f6:	4b08      	ldr	r3, [pc, #32]	; (800ba18 <mem_init+0x70>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b9fe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ba00:	4b04      	ldr	r3, [pc, #16]	; (800ba14 <mem_init+0x6c>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a05      	ldr	r2, [pc, #20]	; (800ba1c <mem_init+0x74>)
 800ba06:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800ba08:	bf00      	nop
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	200059c8 	.word	0x200059c8
 800ba14:	2000601c 	.word	0x2000601c
 800ba18:	20006020 	.word	0x20006020
 800ba1c:	20006024 	.word	0x20006024

0800ba20 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b086      	sub	sp, #24
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff ff09 	bl	800b840 <mem_to_ptr>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7ff fef0 	bl	800b81c <ptr_to_mem>
 800ba3c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	885b      	ldrh	r3, [r3, #2]
 800ba42:	4618      	mov	r0, r3
 800ba44:	f7ff feea 	bl	800b81c <ptr_to_mem>
 800ba48:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	881b      	ldrh	r3, [r3, #0]
 800ba4e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba52:	d818      	bhi.n	800ba86 <mem_link_valid+0x66>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	885b      	ldrh	r3, [r3, #2]
 800ba58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ba5c:	d813      	bhi.n	800ba86 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba62:	8afa      	ldrh	r2, [r7, #22]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d004      	beq.n	800ba72 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	881b      	ldrh	r3, [r3, #0]
 800ba6c:	8afa      	ldrh	r2, [r7, #22]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d109      	bne.n	800ba86 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba72:	4b08      	ldr	r3, [pc, #32]	; (800ba94 <mem_link_valid+0x74>)
 800ba74:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d006      	beq.n	800ba8a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	885b      	ldrh	r3, [r3, #2]
 800ba80:	8afa      	ldrh	r2, [r7, #22]
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d001      	beq.n	800ba8a <mem_link_valid+0x6a>
    return 0;
 800ba86:	2300      	movs	r3, #0
 800ba88:	e000      	b.n	800ba8c <mem_link_valid+0x6c>
  }
  return 1;
 800ba8a:	2301      	movs	r3, #1
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3718      	adds	r7, #24
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	20006020 	.word	0x20006020

0800ba98 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d04c      	beq.n	800bb40 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f003 0303 	and.w	r3, r3, #3
 800baac:	2b00      	cmp	r3, #0
 800baae:	d007      	beq.n	800bac0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bab0:	4b25      	ldr	r3, [pc, #148]	; (800bb48 <mem_free+0xb0>)
 800bab2:	f240 2273 	movw	r2, #627	; 0x273
 800bab6:	4925      	ldr	r1, [pc, #148]	; (800bb4c <mem_free+0xb4>)
 800bab8:	4825      	ldr	r0, [pc, #148]	; (800bb50 <mem_free+0xb8>)
 800baba:	f00a fb89 	bl	80161d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800babe:	e040      	b.n	800bb42 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	3b08      	subs	r3, #8
 800bac4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bac6:	4b23      	ldr	r3, [pc, #140]	; (800bb54 <mem_free+0xbc>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	429a      	cmp	r2, r3
 800bace:	d306      	bcc.n	800bade <mem_free+0x46>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f103 020c 	add.w	r2, r3, #12
 800bad6:	4b20      	ldr	r3, [pc, #128]	; (800bb58 <mem_free+0xc0>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	429a      	cmp	r2, r3
 800badc:	d907      	bls.n	800baee <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bade:	4b1a      	ldr	r3, [pc, #104]	; (800bb48 <mem_free+0xb0>)
 800bae0:	f240 227f 	movw	r2, #639	; 0x27f
 800bae4:	491d      	ldr	r1, [pc, #116]	; (800bb5c <mem_free+0xc4>)
 800bae6:	481a      	ldr	r0, [pc, #104]	; (800bb50 <mem_free+0xb8>)
 800bae8:	f00a fb72 	bl	80161d0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800baec:	e029      	b.n	800bb42 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	791b      	ldrb	r3, [r3, #4]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d107      	bne.n	800bb06 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800baf6:	4b14      	ldr	r3, [pc, #80]	; (800bb48 <mem_free+0xb0>)
 800baf8:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800bafc:	4918      	ldr	r1, [pc, #96]	; (800bb60 <mem_free+0xc8>)
 800bafe:	4814      	ldr	r0, [pc, #80]	; (800bb50 <mem_free+0xb8>)
 800bb00:	f00a fb66 	bl	80161d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bb04:	e01d      	b.n	800bb42 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	f7ff ff8a 	bl	800ba20 <mem_link_valid>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d107      	bne.n	800bb22 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bb12:	4b0d      	ldr	r3, [pc, #52]	; (800bb48 <mem_free+0xb0>)
 800bb14:	f240 2295 	movw	r2, #661	; 0x295
 800bb18:	4912      	ldr	r1, [pc, #72]	; (800bb64 <mem_free+0xcc>)
 800bb1a:	480d      	ldr	r0, [pc, #52]	; (800bb50 <mem_free+0xb8>)
 800bb1c:	f00a fb58 	bl	80161d0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800bb20:	e00f      	b.n	800bb42 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bb28:	4b0f      	ldr	r3, [pc, #60]	; (800bb68 <mem_free+0xd0>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d202      	bcs.n	800bb38 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bb32:	4a0d      	ldr	r2, [pc, #52]	; (800bb68 <mem_free+0xd0>)
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f7ff fe93 	bl	800b864 <plug_holes>
 800bb3e:	e000      	b.n	800bb42 <mem_free+0xaa>
    return;
 800bb40:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	080172dc 	.word	0x080172dc
 800bb4c:	080173b0 	.word	0x080173b0
 800bb50:	08017324 	.word	0x08017324
 800bb54:	2000601c 	.word	0x2000601c
 800bb58:	20006020 	.word	0x20006020
 800bb5c:	080173d4 	.word	0x080173d4
 800bb60:	080173f0 	.word	0x080173f0
 800bb64:	08017418 	.word	0x08017418
 800bb68:	20006024 	.word	0x20006024

0800bb6c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b088      	sub	sp, #32
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	460b      	mov	r3, r1
 800bb76:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bb78:	887b      	ldrh	r3, [r7, #2]
 800bb7a:	3303      	adds	r3, #3
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	f023 0303 	bic.w	r3, r3, #3
 800bb82:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bb84:	8bfb      	ldrh	r3, [r7, #30]
 800bb86:	2b0b      	cmp	r3, #11
 800bb88:	d801      	bhi.n	800bb8e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bb8a:	230c      	movs	r3, #12
 800bb8c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bb8e:	8bfb      	ldrh	r3, [r7, #30]
 800bb90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bb94:	d803      	bhi.n	800bb9e <mem_trim+0x32>
 800bb96:	8bfa      	ldrh	r2, [r7, #30]
 800bb98:	887b      	ldrh	r3, [r7, #2]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d201      	bcs.n	800bba2 <mem_trim+0x36>
    return NULL;
 800bb9e:	2300      	movs	r3, #0
 800bba0:	e0cc      	b.n	800bd3c <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bba2:	4b68      	ldr	r3, [pc, #416]	; (800bd44 <mem_trim+0x1d8>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d304      	bcc.n	800bbb6 <mem_trim+0x4a>
 800bbac:	4b66      	ldr	r3, [pc, #408]	; (800bd48 <mem_trim+0x1dc>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d306      	bcc.n	800bbc4 <mem_trim+0x58>
 800bbb6:	4b65      	ldr	r3, [pc, #404]	; (800bd4c <mem_trim+0x1e0>)
 800bbb8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bbbc:	4964      	ldr	r1, [pc, #400]	; (800bd50 <mem_trim+0x1e4>)
 800bbbe:	4865      	ldr	r0, [pc, #404]	; (800bd54 <mem_trim+0x1e8>)
 800bbc0:	f00a fb06 	bl	80161d0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bbc4:	4b5f      	ldr	r3, [pc, #380]	; (800bd44 <mem_trim+0x1d8>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d304      	bcc.n	800bbd8 <mem_trim+0x6c>
 800bbce:	4b5e      	ldr	r3, [pc, #376]	; (800bd48 <mem_trim+0x1dc>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	429a      	cmp	r2, r3
 800bbd6:	d301      	bcc.n	800bbdc <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	e0af      	b.n	800bd3c <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	3b08      	subs	r3, #8
 800bbe0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bbe2:	69b8      	ldr	r0, [r7, #24]
 800bbe4:	f7ff fe2c 	bl	800b840 <mem_to_ptr>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	881a      	ldrh	r2, [r3, #0]
 800bbf0:	8afb      	ldrh	r3, [r7, #22]
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	b29b      	uxth	r3, r3
 800bbf6:	3b08      	subs	r3, #8
 800bbf8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bbfa:	8bfa      	ldrh	r2, [r7, #30]
 800bbfc:	8abb      	ldrh	r3, [r7, #20]
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d906      	bls.n	800bc10 <mem_trim+0xa4>
 800bc02:	4b52      	ldr	r3, [pc, #328]	; (800bd4c <mem_trim+0x1e0>)
 800bc04:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bc08:	4953      	ldr	r1, [pc, #332]	; (800bd58 <mem_trim+0x1ec>)
 800bc0a:	4852      	ldr	r0, [pc, #328]	; (800bd54 <mem_trim+0x1e8>)
 800bc0c:	f00a fae0 	bl	80161d0 <iprintf>
  if (newsize > size) {
 800bc10:	8bfa      	ldrh	r2, [r7, #30]
 800bc12:	8abb      	ldrh	r3, [r7, #20]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d901      	bls.n	800bc1c <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	e08f      	b.n	800bd3c <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800bc1c:	8bfa      	ldrh	r2, [r7, #30]
 800bc1e:	8abb      	ldrh	r3, [r7, #20]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d101      	bne.n	800bc28 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	e089      	b.n	800bd3c <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	881b      	ldrh	r3, [r3, #0]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7ff fdf5 	bl	800b81c <ptr_to_mem>
 800bc32:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	791b      	ldrb	r3, [r3, #4]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d13f      	bne.n	800bcbc <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	881b      	ldrh	r3, [r3, #0]
 800bc40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bc44:	d106      	bne.n	800bc54 <mem_trim+0xe8>
 800bc46:	4b41      	ldr	r3, [pc, #260]	; (800bd4c <mem_trim+0x1e0>)
 800bc48:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bc4c:	4943      	ldr	r1, [pc, #268]	; (800bd5c <mem_trim+0x1f0>)
 800bc4e:	4841      	ldr	r0, [pc, #260]	; (800bd54 <mem_trim+0x1e8>)
 800bc50:	f00a fabe 	bl	80161d0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	881b      	ldrh	r3, [r3, #0]
 800bc58:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc5a:	8afa      	ldrh	r2, [r7, #22]
 800bc5c:	8bfb      	ldrh	r3, [r7, #30]
 800bc5e:	4413      	add	r3, r2
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	3308      	adds	r3, #8
 800bc64:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bc66:	4b3e      	ldr	r3, [pc, #248]	; (800bd60 <mem_trim+0x1f4>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	693a      	ldr	r2, [r7, #16]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d106      	bne.n	800bc7e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800bc70:	89fb      	ldrh	r3, [r7, #14]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff fdd2 	bl	800b81c <ptr_to_mem>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	4a39      	ldr	r2, [pc, #228]	; (800bd60 <mem_trim+0x1f4>)
 800bc7c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bc7e:	89fb      	ldrh	r3, [r7, #14]
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7ff fdcb 	bl	800b81c <ptr_to_mem>
 800bc86:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	89ba      	ldrh	r2, [r7, #12]
 800bc92:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	8afa      	ldrh	r2, [r7, #22]
 800bc98:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	89fa      	ldrh	r2, [r7, #14]
 800bc9e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	881b      	ldrh	r3, [r3, #0]
 800bca4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bca8:	d047      	beq.n	800bd3a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	881b      	ldrh	r3, [r3, #0]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7ff fdb4 	bl	800b81c <ptr_to_mem>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	89fb      	ldrh	r3, [r7, #14]
 800bcb8:	8053      	strh	r3, [r2, #2]
 800bcba:	e03e      	b.n	800bd3a <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bcbc:	8bfb      	ldrh	r3, [r7, #30]
 800bcbe:	f103 0214 	add.w	r2, r3, #20
 800bcc2:	8abb      	ldrh	r3, [r7, #20]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d838      	bhi.n	800bd3a <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bcc8:	8afa      	ldrh	r2, [r7, #22]
 800bcca:	8bfb      	ldrh	r3, [r7, #30]
 800bccc:	4413      	add	r3, r2
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	3308      	adds	r3, #8
 800bcd2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bcdc:	d106      	bne.n	800bcec <mem_trim+0x180>
 800bcde:	4b1b      	ldr	r3, [pc, #108]	; (800bd4c <mem_trim+0x1e0>)
 800bce0:	f240 3216 	movw	r2, #790	; 0x316
 800bce4:	491d      	ldr	r1, [pc, #116]	; (800bd5c <mem_trim+0x1f0>)
 800bce6:	481b      	ldr	r0, [pc, #108]	; (800bd54 <mem_trim+0x1e8>)
 800bce8:	f00a fa72 	bl	80161d0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bcec:	89fb      	ldrh	r3, [r7, #14]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7ff fd94 	bl	800b81c <ptr_to_mem>
 800bcf4:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bcf6:	4b1a      	ldr	r3, [pc, #104]	; (800bd60 <mem_trim+0x1f4>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	693a      	ldr	r2, [r7, #16]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d202      	bcs.n	800bd06 <mem_trim+0x19a>
      lfree = mem2;
 800bd00:	4a17      	ldr	r2, [pc, #92]	; (800bd60 <mem_trim+0x1f4>)
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	881a      	ldrh	r2, [r3, #0]
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	8afa      	ldrh	r2, [r7, #22]
 800bd18:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bd1a:	69bb      	ldr	r3, [r7, #24]
 800bd1c:	89fa      	ldrh	r2, [r7, #14]
 800bd1e:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	881b      	ldrh	r3, [r3, #0]
 800bd24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd28:	d007      	beq.n	800bd3a <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	881b      	ldrh	r3, [r3, #0]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f7ff fd74 	bl	800b81c <ptr_to_mem>
 800bd34:	4602      	mov	r2, r0
 800bd36:	89fb      	ldrh	r3, [r7, #14]
 800bd38:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800bd3a:	687b      	ldr	r3, [r7, #4]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3720      	adds	r7, #32
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	2000601c 	.word	0x2000601c
 800bd48:	20006020 	.word	0x20006020
 800bd4c:	080172dc 	.word	0x080172dc
 800bd50:	0801744c 	.word	0x0801744c
 800bd54:	08017324 	.word	0x08017324
 800bd58:	08017464 	.word	0x08017464
 800bd5c:	08017484 	.word	0x08017484
 800bd60:	20006024 	.word	0x20006024

0800bd64 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bd6e:	88fb      	ldrh	r3, [r7, #6]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d101      	bne.n	800bd78 <mem_malloc+0x14>
    return NULL;
 800bd74:	2300      	movs	r3, #0
 800bd76:	e0d9      	b.n	800bf2c <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bd78:	88fb      	ldrh	r3, [r7, #6]
 800bd7a:	3303      	adds	r3, #3
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	f023 0303 	bic.w	r3, r3, #3
 800bd82:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bd84:	8bbb      	ldrh	r3, [r7, #28]
 800bd86:	2b0b      	cmp	r3, #11
 800bd88:	d801      	bhi.n	800bd8e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bd8a:	230c      	movs	r3, #12
 800bd8c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bd8e:	8bbb      	ldrh	r3, [r7, #28]
 800bd90:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bd94:	d803      	bhi.n	800bd9e <mem_malloc+0x3a>
 800bd96:	8bba      	ldrh	r2, [r7, #28]
 800bd98:	88fb      	ldrh	r3, [r7, #6]
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d201      	bcs.n	800bda2 <mem_malloc+0x3e>
    return NULL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e0c4      	b.n	800bf2c <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bda2:	4b64      	ldr	r3, [pc, #400]	; (800bf34 <mem_malloc+0x1d0>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff fd4a 	bl	800b840 <mem_to_ptr>
 800bdac:	4603      	mov	r3, r0
 800bdae:	83fb      	strh	r3, [r7, #30]
 800bdb0:	e0b4      	b.n	800bf1c <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bdb2:	8bfb      	ldrh	r3, [r7, #30]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7ff fd31 	bl	800b81c <ptr_to_mem>
 800bdba:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	791b      	ldrb	r3, [r3, #4]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	f040 80a4 	bne.w	800bf0e <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	881b      	ldrh	r3, [r3, #0]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	8bfb      	ldrh	r3, [r7, #30]
 800bdce:	1ad3      	subs	r3, r2, r3
 800bdd0:	f1a3 0208 	sub.w	r2, r3, #8
 800bdd4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	f0c0 8099 	bcc.w	800bf0e <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	461a      	mov	r2, r3
 800bde2:	8bfb      	ldrh	r3, [r7, #30]
 800bde4:	1ad3      	subs	r3, r2, r3
 800bde6:	f1a3 0208 	sub.w	r2, r3, #8
 800bdea:	8bbb      	ldrh	r3, [r7, #28]
 800bdec:	3314      	adds	r3, #20
 800bdee:	429a      	cmp	r2, r3
 800bdf0:	d333      	bcc.n	800be5a <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bdf2:	8bfa      	ldrh	r2, [r7, #30]
 800bdf4:	8bbb      	ldrh	r3, [r7, #28]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bdfe:	8a7b      	ldrh	r3, [r7, #18]
 800be00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be04:	d106      	bne.n	800be14 <mem_malloc+0xb0>
 800be06:	4b4c      	ldr	r3, [pc, #304]	; (800bf38 <mem_malloc+0x1d4>)
 800be08:	f240 3287 	movw	r2, #903	; 0x387
 800be0c:	494b      	ldr	r1, [pc, #300]	; (800bf3c <mem_malloc+0x1d8>)
 800be0e:	484c      	ldr	r0, [pc, #304]	; (800bf40 <mem_malloc+0x1dc>)
 800be10:	f00a f9de 	bl	80161d0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800be14:	8a7b      	ldrh	r3, [r7, #18]
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff fd00 	bl	800b81c <ptr_to_mem>
 800be1c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2200      	movs	r2, #0
 800be22:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	881a      	ldrh	r2, [r3, #0]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	8bfa      	ldrh	r2, [r7, #30]
 800be30:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	8a7a      	ldrh	r2, [r7, #18]
 800be36:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	2201      	movs	r2, #1
 800be3c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	881b      	ldrh	r3, [r3, #0]
 800be42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be46:	d00b      	beq.n	800be60 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	881b      	ldrh	r3, [r3, #0]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7ff fce5 	bl	800b81c <ptr_to_mem>
 800be52:	4602      	mov	r2, r0
 800be54:	8a7b      	ldrh	r3, [r7, #18]
 800be56:	8053      	strh	r3, [r2, #2]
 800be58:	e002      	b.n	800be60 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	2201      	movs	r2, #1
 800be5e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800be60:	4b34      	ldr	r3, [pc, #208]	; (800bf34 <mem_malloc+0x1d0>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	429a      	cmp	r2, r3
 800be68:	d127      	bne.n	800beba <mem_malloc+0x156>
          struct mem *cur = lfree;
 800be6a:	4b32      	ldr	r3, [pc, #200]	; (800bf34 <mem_malloc+0x1d0>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800be70:	e005      	b.n	800be7e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	881b      	ldrh	r3, [r3, #0]
 800be76:	4618      	mov	r0, r3
 800be78:	f7ff fcd0 	bl	800b81c <ptr_to_mem>
 800be7c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	791b      	ldrb	r3, [r3, #4]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d004      	beq.n	800be90 <mem_malloc+0x12c>
 800be86:	4b2f      	ldr	r3, [pc, #188]	; (800bf44 <mem_malloc+0x1e0>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	69ba      	ldr	r2, [r7, #24]
 800be8c:	429a      	cmp	r2, r3
 800be8e:	d1f0      	bne.n	800be72 <mem_malloc+0x10e>
          }
          lfree = cur;
 800be90:	4a28      	ldr	r2, [pc, #160]	; (800bf34 <mem_malloc+0x1d0>)
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800be96:	4b27      	ldr	r3, [pc, #156]	; (800bf34 <mem_malloc+0x1d0>)
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	4b2a      	ldr	r3, [pc, #168]	; (800bf44 <mem_malloc+0x1e0>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d00b      	beq.n	800beba <mem_malloc+0x156>
 800bea2:	4b24      	ldr	r3, [pc, #144]	; (800bf34 <mem_malloc+0x1d0>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	791b      	ldrb	r3, [r3, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d006      	beq.n	800beba <mem_malloc+0x156>
 800beac:	4b22      	ldr	r3, [pc, #136]	; (800bf38 <mem_malloc+0x1d4>)
 800beae:	f240 32b5 	movw	r2, #949	; 0x3b5
 800beb2:	4925      	ldr	r1, [pc, #148]	; (800bf48 <mem_malloc+0x1e4>)
 800beb4:	4822      	ldr	r0, [pc, #136]	; (800bf40 <mem_malloc+0x1dc>)
 800beb6:	f00a f98b 	bl	80161d0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800beba:	8bba      	ldrh	r2, [r7, #28]
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	4413      	add	r3, r2
 800bec0:	3308      	adds	r3, #8
 800bec2:	4a20      	ldr	r2, [pc, #128]	; (800bf44 <mem_malloc+0x1e0>)
 800bec4:	6812      	ldr	r2, [r2, #0]
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d906      	bls.n	800bed8 <mem_malloc+0x174>
 800beca:	4b1b      	ldr	r3, [pc, #108]	; (800bf38 <mem_malloc+0x1d4>)
 800becc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800bed0:	491e      	ldr	r1, [pc, #120]	; (800bf4c <mem_malloc+0x1e8>)
 800bed2:	481b      	ldr	r0, [pc, #108]	; (800bf40 <mem_malloc+0x1dc>)
 800bed4:	f00a f97c 	bl	80161d0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	f003 0303 	and.w	r3, r3, #3
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d006      	beq.n	800bef0 <mem_malloc+0x18c>
 800bee2:	4b15      	ldr	r3, [pc, #84]	; (800bf38 <mem_malloc+0x1d4>)
 800bee4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800bee8:	4919      	ldr	r1, [pc, #100]	; (800bf50 <mem_malloc+0x1ec>)
 800beea:	4815      	ldr	r0, [pc, #84]	; (800bf40 <mem_malloc+0x1dc>)
 800beec:	f00a f970 	bl	80161d0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	f003 0303 	and.w	r3, r3, #3
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d006      	beq.n	800bf08 <mem_malloc+0x1a4>
 800befa:	4b0f      	ldr	r3, [pc, #60]	; (800bf38 <mem_malloc+0x1d4>)
 800befc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800bf00:	4914      	ldr	r1, [pc, #80]	; (800bf54 <mem_malloc+0x1f0>)
 800bf02:	480f      	ldr	r0, [pc, #60]	; (800bf40 <mem_malloc+0x1dc>)
 800bf04:	f00a f964 	bl	80161d0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	3308      	adds	r3, #8
 800bf0c:	e00e      	b.n	800bf2c <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800bf0e:	8bfb      	ldrh	r3, [r7, #30]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff fc83 	bl	800b81c <ptr_to_mem>
 800bf16:	4603      	mov	r3, r0
 800bf18:	881b      	ldrh	r3, [r3, #0]
 800bf1a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bf1c:	8bfa      	ldrh	r2, [r7, #30]
 800bf1e:	8bbb      	ldrh	r3, [r7, #28]
 800bf20:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800bf24:	429a      	cmp	r2, r3
 800bf26:	f4ff af44 	bcc.w	800bdb2 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3720      	adds	r7, #32
 800bf30:	46bd      	mov	sp, r7
 800bf32:	bd80      	pop	{r7, pc}
 800bf34:	20006024 	.word	0x20006024
 800bf38:	080172dc 	.word	0x080172dc
 800bf3c:	08017484 	.word	0x08017484
 800bf40:	08017324 	.word	0x08017324
 800bf44:	20006020 	.word	0x20006020
 800bf48:	08017498 	.word	0x08017498
 800bf4c:	080174b4 	.word	0x080174b4
 800bf50:	080174e4 	.word	0x080174e4
 800bf54:	08017514 	.word	0x08017514

0800bf58 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	2200      	movs	r2, #0
 800bf66:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	3303      	adds	r3, #3
 800bf6e:	f023 0303 	bic.w	r3, r3, #3
 800bf72:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bf74:	2300      	movs	r3, #0
 800bf76:	60fb      	str	r3, [r7, #12]
 800bf78:	e011      	b.n	800bf9e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	68ba      	ldr	r2, [r7, #8]
 800bf8a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	881b      	ldrh	r3, [r3, #0]
 800bf90:	461a      	mov	r2, r3
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	4413      	add	r3, r2
 800bf96:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	60fb      	str	r3, [r7, #12]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	885b      	ldrh	r3, [r3, #2]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	dbe7      	blt.n	800bf7a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bfaa:	bf00      	nop
 800bfac:	bf00      	nop
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfbe:	2300      	movs	r3, #0
 800bfc0:	80fb      	strh	r3, [r7, #6]
 800bfc2:	e009      	b.n	800bfd8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bfc4:	88fb      	ldrh	r3, [r7, #6]
 800bfc6:	4a08      	ldr	r2, [pc, #32]	; (800bfe8 <memp_init+0x30>)
 800bfc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f7ff ffc3 	bl	800bf58 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bfd2:	88fb      	ldrh	r3, [r7, #6]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	80fb      	strh	r3, [r7, #6]
 800bfd8:	88fb      	ldrh	r3, [r7, #6]
 800bfda:	2b08      	cmp	r3, #8
 800bfdc:	d9f2      	bls.n	800bfc4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bfde:	bf00      	nop
 800bfe0:	bf00      	nop
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	08019d24 	.word	0x08019d24

0800bfec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d012      	beq.n	800c028 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	6812      	ldr	r2, [r2, #0]
 800c00a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f003 0303 	and.w	r3, r3, #3
 800c012:	2b00      	cmp	r3, #0
 800c014:	d006      	beq.n	800c024 <do_memp_malloc_pool+0x38>
 800c016:	4b07      	ldr	r3, [pc, #28]	; (800c034 <do_memp_malloc_pool+0x48>)
 800c018:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c01c:	4906      	ldr	r1, [pc, #24]	; (800c038 <do_memp_malloc_pool+0x4c>)
 800c01e:	4807      	ldr	r0, [pc, #28]	; (800c03c <do_memp_malloc_pool+0x50>)
 800c020:	f00a f8d6 	bl	80161d0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	e000      	b.n	800c02a <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c028:	2300      	movs	r3, #0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	08017538 	.word	0x08017538
 800c038:	08017568 	.word	0x08017568
 800c03c:	0801758c 	.word	0x0801758c

0800c040 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b082      	sub	sp, #8
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d106      	bne.n	800c05c <memp_malloc_pool+0x1c>
 800c04e:	4b0a      	ldr	r3, [pc, #40]	; (800c078 <memp_malloc_pool+0x38>)
 800c050:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c054:	4909      	ldr	r1, [pc, #36]	; (800c07c <memp_malloc_pool+0x3c>)
 800c056:	480a      	ldr	r0, [pc, #40]	; (800c080 <memp_malloc_pool+0x40>)
 800c058:	f00a f8ba 	bl	80161d0 <iprintf>
  if (desc == NULL) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <memp_malloc_pool+0x26>
    return NULL;
 800c062:	2300      	movs	r3, #0
 800c064:	e003      	b.n	800c06e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f7ff ffc0 	bl	800bfec <do_memp_malloc_pool>
 800c06c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c06e:	4618      	mov	r0, r3
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	08017538 	.word	0x08017538
 800c07c:	080175b4 	.word	0x080175b4
 800c080:	0801758c 	.word	0x0801758c

0800c084 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4603      	mov	r3, r0
 800c08c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c08e:	79fb      	ldrb	r3, [r7, #7]
 800c090:	2b08      	cmp	r3, #8
 800c092:	d908      	bls.n	800c0a6 <memp_malloc+0x22>
 800c094:	4b0a      	ldr	r3, [pc, #40]	; (800c0c0 <memp_malloc+0x3c>)
 800c096:	f240 1257 	movw	r2, #343	; 0x157
 800c09a:	490a      	ldr	r1, [pc, #40]	; (800c0c4 <memp_malloc+0x40>)
 800c09c:	480a      	ldr	r0, [pc, #40]	; (800c0c8 <memp_malloc+0x44>)
 800c09e:	f00a f897 	bl	80161d0 <iprintf>
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	e008      	b.n	800c0b8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c0a6:	79fb      	ldrb	r3, [r7, #7]
 800c0a8:	4a08      	ldr	r2, [pc, #32]	; (800c0cc <memp_malloc+0x48>)
 800c0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7ff ff9c 	bl	800bfec <do_memp_malloc_pool>
 800c0b4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}
 800c0c0:	08017538 	.word	0x08017538
 800c0c4:	080175c8 	.word	0x080175c8
 800c0c8:	0801758c 	.word	0x0801758c
 800c0cc:	08019d24 	.word	0x08019d24

0800c0d0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	f003 0303 	and.w	r3, r3, #3
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d006      	beq.n	800c0f2 <do_memp_free_pool+0x22>
 800c0e4:	4b0a      	ldr	r3, [pc, #40]	; (800c110 <do_memp_free_pool+0x40>)
 800c0e6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c0ea:	490a      	ldr	r1, [pc, #40]	; (800c114 <do_memp_free_pool+0x44>)
 800c0ec:	480a      	ldr	r0, [pc, #40]	; (800c118 <do_memp_free_pool+0x48>)
 800c0ee:	f00a f86f 	bl	80161d0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	681a      	ldr	r2, [r3, #0]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	68fa      	ldr	r2, [r7, #12]
 800c106:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800c108:	bf00      	nop
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	08017538 	.word	0x08017538
 800c114:	080175e8 	.word	0x080175e8
 800c118:	0801758c 	.word	0x0801758c

0800c11c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d106      	bne.n	800c13a <memp_free_pool+0x1e>
 800c12c:	4b0a      	ldr	r3, [pc, #40]	; (800c158 <memp_free_pool+0x3c>)
 800c12e:	f240 1295 	movw	r2, #405	; 0x195
 800c132:	490a      	ldr	r1, [pc, #40]	; (800c15c <memp_free_pool+0x40>)
 800c134:	480a      	ldr	r0, [pc, #40]	; (800c160 <memp_free_pool+0x44>)
 800c136:	f00a f84b 	bl	80161d0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d007      	beq.n	800c150 <memp_free_pool+0x34>
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d004      	beq.n	800c150 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f7ff ffc1 	bl	800c0d0 <do_memp_free_pool>
 800c14e:	e000      	b.n	800c152 <memp_free_pool+0x36>
    return;
 800c150:	bf00      	nop
}
 800c152:	3708      	adds	r7, #8
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	08017538 	.word	0x08017538
 800c15c:	080175b4 	.word	0x080175b4
 800c160:	0801758c 	.word	0x0801758c

0800c164 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	4603      	mov	r3, r0
 800c16c:	6039      	str	r1, [r7, #0]
 800c16e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c170:	79fb      	ldrb	r3, [r7, #7]
 800c172:	2b08      	cmp	r3, #8
 800c174:	d907      	bls.n	800c186 <memp_free+0x22>
 800c176:	4b0c      	ldr	r3, [pc, #48]	; (800c1a8 <memp_free+0x44>)
 800c178:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c17c:	490b      	ldr	r1, [pc, #44]	; (800c1ac <memp_free+0x48>)
 800c17e:	480c      	ldr	r0, [pc, #48]	; (800c1b0 <memp_free+0x4c>)
 800c180:	f00a f826 	bl	80161d0 <iprintf>
 800c184:	e00c      	b.n	800c1a0 <memp_free+0x3c>

  if (mem == NULL) {
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d008      	beq.n	800c19e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c18c:	79fb      	ldrb	r3, [r7, #7]
 800c18e:	4a09      	ldr	r2, [pc, #36]	; (800c1b4 <memp_free+0x50>)
 800c190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c194:	6839      	ldr	r1, [r7, #0]
 800c196:	4618      	mov	r0, r3
 800c198:	f7ff ff9a 	bl	800c0d0 <do_memp_free_pool>
 800c19c:	e000      	b.n	800c1a0 <memp_free+0x3c>
    return;
 800c19e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c1a0:	3708      	adds	r7, #8
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	08017538 	.word	0x08017538
 800c1ac:	08017608 	.word	0x08017608
 800c1b0:	0801758c 	.word	0x0801758c
 800c1b4:	08019d24 	.word	0x08019d24

0800c1b8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c1bc:	bf00      	nop
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
	...

0800c1c8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
 800c1d4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d108      	bne.n	800c1ee <netif_add+0x26>
 800c1dc:	4b57      	ldr	r3, [pc, #348]	; (800c33c <netif_add+0x174>)
 800c1de:	f240 1227 	movw	r2, #295	; 0x127
 800c1e2:	4957      	ldr	r1, [pc, #348]	; (800c340 <netif_add+0x178>)
 800c1e4:	4857      	ldr	r0, [pc, #348]	; (800c344 <netif_add+0x17c>)
 800c1e6:	f009 fff3 	bl	80161d0 <iprintf>
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	e0a2      	b.n	800c334 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d108      	bne.n	800c206 <netif_add+0x3e>
 800c1f4:	4b51      	ldr	r3, [pc, #324]	; (800c33c <netif_add+0x174>)
 800c1f6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c1fa:	4953      	ldr	r1, [pc, #332]	; (800c348 <netif_add+0x180>)
 800c1fc:	4851      	ldr	r0, [pc, #324]	; (800c344 <netif_add+0x17c>)
 800c1fe:	f009 ffe7 	bl	80161d0 <iprintf>
 800c202:	2300      	movs	r3, #0
 800c204:	e096      	b.n	800c334 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d101      	bne.n	800c210 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c20c:	4b4f      	ldr	r3, [pc, #316]	; (800c34c <netif_add+0x184>)
 800c20e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d101      	bne.n	800c21a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c216:	4b4d      	ldr	r3, [pc, #308]	; (800c34c <netif_add+0x184>)
 800c218:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c220:	4b4a      	ldr	r3, [pc, #296]	; (800c34c <netif_add+0x184>)
 800c222:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2200      	movs	r2, #0
 800c228:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2200      	movs	r2, #0
 800c234:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	4a45      	ldr	r2, [pc, #276]	; (800c350 <netif_add+0x188>)
 800c23a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2200      	movs	r2, #0
 800c240:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2200      	movs	r2, #0
 800c246:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	2200      	movs	r2, #0
 800c24e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	6a3a      	ldr	r2, [r7, #32]
 800c254:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c256:	4b3f      	ldr	r3, [pc, #252]	; (800c354 <netif_add+0x18c>)
 800c258:	781a      	ldrb	r2, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c264:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	687a      	ldr	r2, [r7, #4]
 800c26a:	68b9      	ldr	r1, [r7, #8]
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f000 f913 	bl	800c498 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	4798      	blx	r3
 800c278:	4603      	mov	r3, r0
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d001      	beq.n	800c282 <netif_add+0xba>
    return NULL;
 800c27e:	2300      	movs	r3, #0
 800c280:	e058      	b.n	800c334 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c288:	2bff      	cmp	r3, #255	; 0xff
 800c28a:	d103      	bne.n	800c294 <netif_add+0xcc>
        netif->num = 0;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c298:	4b2f      	ldr	r3, [pc, #188]	; (800c358 <netif_add+0x190>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	617b      	str	r3, [r7, #20]
 800c29e:	e02b      	b.n	800c2f8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c2a0:	697a      	ldr	r2, [r7, #20]
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d106      	bne.n	800c2b6 <netif_add+0xee>
 800c2a8:	4b24      	ldr	r3, [pc, #144]	; (800c33c <netif_add+0x174>)
 800c2aa:	f240 128b 	movw	r2, #395	; 0x18b
 800c2ae:	492b      	ldr	r1, [pc, #172]	; (800c35c <netif_add+0x194>)
 800c2b0:	4824      	ldr	r0, [pc, #144]	; (800c344 <netif_add+0x17c>)
 800c2b2:	f009 ff8d 	bl	80161d0 <iprintf>
        num_netifs++;
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	2bff      	cmp	r3, #255	; 0xff
 800c2c0:	dd06      	ble.n	800c2d0 <netif_add+0x108>
 800c2c2:	4b1e      	ldr	r3, [pc, #120]	; (800c33c <netif_add+0x174>)
 800c2c4:	f240 128d 	movw	r2, #397	; 0x18d
 800c2c8:	4925      	ldr	r1, [pc, #148]	; (800c360 <netif_add+0x198>)
 800c2ca:	481e      	ldr	r0, [pc, #120]	; (800c344 <netif_add+0x17c>)
 800c2cc:	f009 ff80 	bl	80161d0 <iprintf>
        if (netif2->num == netif->num) {
 800c2d0:	697b      	ldr	r3, [r7, #20]
 800c2d2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d108      	bne.n	800c2f2 <netif_add+0x12a>
          netif->num++;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2e6:	3301      	adds	r3, #1
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c2f0:	e005      	b.n	800c2fe <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	617b      	str	r3, [r7, #20]
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1d0      	bne.n	800c2a0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1be      	bne.n	800c282 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c30a:	2bfe      	cmp	r3, #254	; 0xfe
 800c30c:	d103      	bne.n	800c316 <netif_add+0x14e>
    netif_num = 0;
 800c30e:	4b11      	ldr	r3, [pc, #68]	; (800c354 <netif_add+0x18c>)
 800c310:	2200      	movs	r2, #0
 800c312:	701a      	strb	r2, [r3, #0]
 800c314:	e006      	b.n	800c324 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c31c:	3301      	adds	r3, #1
 800c31e:	b2da      	uxtb	r2, r3
 800c320:	4b0c      	ldr	r3, [pc, #48]	; (800c354 <netif_add+0x18c>)
 800c322:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c324:	4b0c      	ldr	r3, [pc, #48]	; (800c358 <netif_add+0x190>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c32c:	4a0a      	ldr	r2, [pc, #40]	; (800c358 <netif_add+0x190>)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c332:	68fb      	ldr	r3, [r7, #12]
}
 800c334:	4618      	mov	r0, r3
 800c336:	3718      	adds	r7, #24
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	08017624 	.word	0x08017624
 800c340:	080176b8 	.word	0x080176b8
 800c344:	08017674 	.word	0x08017674
 800c348:	080176d4 	.word	0x080176d4
 800c34c:	08019d88 	.word	0x08019d88
 800c350:	0800c773 	.word	0x0800c773
 800c354:	20008f1c 	.word	0x20008f1c
 800c358:	20008f14 	.word	0x20008f14
 800c35c:	080176f8 	.word	0x080176f8
 800c360:	0801770c 	.word	0x0801770c

0800c364 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c36e:	6839      	ldr	r1, [r7, #0]
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f002 fbe5 	bl	800eb40 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c376:	6839      	ldr	r1, [r7, #0]
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f007 f85b 	bl	8013434 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c37e:	bf00      	nop
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
	...

0800c388 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d106      	bne.n	800c3a8 <netif_do_set_ipaddr+0x20>
 800c39a:	4b1d      	ldr	r3, [pc, #116]	; (800c410 <netif_do_set_ipaddr+0x88>)
 800c39c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c3a0:	491c      	ldr	r1, [pc, #112]	; (800c414 <netif_do_set_ipaddr+0x8c>)
 800c3a2:	481d      	ldr	r0, [pc, #116]	; (800c418 <netif_do_set_ipaddr+0x90>)
 800c3a4:	f009 ff14 	bl	80161d0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d106      	bne.n	800c3bc <netif_do_set_ipaddr+0x34>
 800c3ae:	4b18      	ldr	r3, [pc, #96]	; (800c410 <netif_do_set_ipaddr+0x88>)
 800c3b0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c3b4:	4917      	ldr	r1, [pc, #92]	; (800c414 <netif_do_set_ipaddr+0x8c>)
 800c3b6:	4818      	ldr	r0, [pc, #96]	; (800c418 <netif_do_set_ipaddr+0x90>)
 800c3b8:	f009 ff0a 	bl	80161d0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3304      	adds	r3, #4
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d01c      	beq.n	800c404 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	3304      	adds	r3, #4
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c3da:	f107 0314 	add.w	r3, r7, #20
 800c3de:	4619      	mov	r1, r3
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f7ff ffbf 	bl	800c364 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d002      	beq.n	800c3f2 <netif_do_set_ipaddr+0x6a>
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	e000      	b.n	800c3f4 <netif_do_set_ipaddr+0x6c>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c3f8:	2101      	movs	r1, #1
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f000 f8d2 	bl	800c5a4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c400:	2301      	movs	r3, #1
 800c402:	e000      	b.n	800c406 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c404:	2300      	movs	r3, #0
}
 800c406:	4618      	mov	r0, r3
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}
 800c40e:	bf00      	nop
 800c410:	08017624 	.word	0x08017624
 800c414:	0801773c 	.word	0x0801773c
 800c418:	08017674 	.word	0x08017674

0800c41c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b085      	sub	sp, #20
 800c420:	af00      	add	r7, sp, #0
 800c422:	60f8      	str	r0, [r7, #12]
 800c424:	60b9      	str	r1, [r7, #8]
 800c426:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	681a      	ldr	r2, [r3, #0]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	3308      	adds	r3, #8
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	429a      	cmp	r2, r3
 800c434:	d00a      	beq.n	800c44c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d002      	beq.n	800c442 <netif_do_set_netmask+0x26>
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	e000      	b.n	800c444 <netif_do_set_netmask+0x28>
 800c442:	2300      	movs	r3, #0
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c448:	2301      	movs	r3, #1
 800c44a:	e000      	b.n	800c44e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b085      	sub	sp, #20
 800c45e:	af00      	add	r7, sp, #0
 800c460:	60f8      	str	r0, [r7, #12]
 800c462:	60b9      	str	r1, [r7, #8]
 800c464:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	681a      	ldr	r2, [r3, #0]
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	330c      	adds	r3, #12
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	429a      	cmp	r2, r3
 800c472:	d00a      	beq.n	800c48a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d002      	beq.n	800c480 <netif_do_set_gw+0x26>
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	e000      	b.n	800c482 <netif_do_set_gw+0x28>
 800c480:	2300      	movs	r3, #0
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c486:	2301      	movs	r3, #1
 800c488:	e000      	b.n	800c48c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3714      	adds	r7, #20
 800c490:	46bd      	mov	sp, r7
 800c492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c496:	4770      	bx	lr

0800c498 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b088      	sub	sp, #32
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	607a      	str	r2, [r7, #4]
 800c4a4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c4b4:	4b1c      	ldr	r3, [pc, #112]	; (800c528 <netif_set_addr+0x90>)
 800c4b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c4be:	4b1a      	ldr	r3, [pc, #104]	; (800c528 <netif_set_addr+0x90>)
 800c4c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d101      	bne.n	800c4cc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c4c8:	4b17      	ldr	r3, [pc, #92]	; (800c528 <netif_set_addr+0x90>)
 800c4ca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d003      	beq.n	800c4da <netif_set_addr+0x42>
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d101      	bne.n	800c4de <netif_set_addr+0x46>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e000      	b.n	800c4e0 <netif_set_addr+0x48>
 800c4de:	2300      	movs	r3, #0
 800c4e0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d006      	beq.n	800c4f6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c4e8:	f107 0310 	add.w	r3, r7, #16
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	68b9      	ldr	r1, [r7, #8]
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f7ff ff49 	bl	800c388 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c4f6:	69fa      	ldr	r2, [r7, #28]
 800c4f8:	6879      	ldr	r1, [r7, #4]
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f7ff ff8e 	bl	800c41c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c500:	69ba      	ldr	r2, [r7, #24]
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	68f8      	ldr	r0, [r7, #12]
 800c506:	f7ff ffa8 	bl	800c45a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d106      	bne.n	800c51e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c510:	f107 0310 	add.w	r3, r7, #16
 800c514:	461a      	mov	r2, r3
 800c516:	68b9      	ldr	r1, [r7, #8]
 800c518:	68f8      	ldr	r0, [r7, #12]
 800c51a:	f7ff ff35 	bl	800c388 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c51e:	bf00      	nop
 800c520:	3720      	adds	r7, #32
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}
 800c526:	bf00      	nop
 800c528:	08019d88 	.word	0x08019d88

0800c52c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c534:	4a04      	ldr	r2, [pc, #16]	; (800c548 <netif_set_default+0x1c>)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c53a:	bf00      	nop
 800c53c:	370c      	adds	r7, #12
 800c53e:	46bd      	mov	sp, r7
 800c540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c544:	4770      	bx	lr
 800c546:	bf00      	nop
 800c548:	20008f18 	.word	0x20008f18

0800c54c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d107      	bne.n	800c56a <netif_set_up+0x1e>
 800c55a:	4b0f      	ldr	r3, [pc, #60]	; (800c598 <netif_set_up+0x4c>)
 800c55c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c560:	490e      	ldr	r1, [pc, #56]	; (800c59c <netif_set_up+0x50>)
 800c562:	480f      	ldr	r0, [pc, #60]	; (800c5a0 <netif_set_up+0x54>)
 800c564:	f009 fe34 	bl	80161d0 <iprintf>
 800c568:	e013      	b.n	800c592 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c570:	f003 0301 	and.w	r3, r3, #1
 800c574:	2b00      	cmp	r3, #0
 800c576:	d10c      	bne.n	800c592 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c57e:	f043 0301 	orr.w	r3, r3, #1
 800c582:	b2da      	uxtb	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c58a:	2103      	movs	r1, #3
 800c58c:	6878      	ldr	r0, [r7, #4]
 800c58e:	f000 f809 	bl	800c5a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c592:	3708      	adds	r7, #8
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}
 800c598:	08017624 	.word	0x08017624
 800c59c:	080177ac 	.word	0x080177ac
 800c5a0:	08017674 	.word	0x08017674

0800c5a4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d106      	bne.n	800c5c4 <netif_issue_reports+0x20>
 800c5b6:	4b18      	ldr	r3, [pc, #96]	; (800c618 <netif_issue_reports+0x74>)
 800c5b8:	f240 326d 	movw	r2, #877	; 0x36d
 800c5bc:	4917      	ldr	r1, [pc, #92]	; (800c61c <netif_issue_reports+0x78>)
 800c5be:	4818      	ldr	r0, [pc, #96]	; (800c620 <netif_issue_reports+0x7c>)
 800c5c0:	f009 fe06 	bl	80161d0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5ca:	f003 0304 	and.w	r3, r3, #4
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d01e      	beq.n	800c610 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5d8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d017      	beq.n	800c610 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c5e0:	78fb      	ldrb	r3, [r7, #3]
 800c5e2:	f003 0301 	and.w	r3, r3, #1
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d013      	beq.n	800c612 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	3304      	adds	r3, #4
 800c5ee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d00e      	beq.n	800c612 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5fa:	f003 0308 	and.w	r3, r3, #8
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d007      	beq.n	800c612 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	3304      	adds	r3, #4
 800c606:	4619      	mov	r1, r3
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f007 fe7d 	bl	8014308 <etharp_request>
 800c60e:	e000      	b.n	800c612 <netif_issue_reports+0x6e>
    return;
 800c610:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	08017624 	.word	0x08017624
 800c61c:	080177c8 	.word	0x080177c8
 800c620:	08017674 	.word	0x08017674

0800c624 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d107      	bne.n	800c642 <netif_set_down+0x1e>
 800c632:	4b12      	ldr	r3, [pc, #72]	; (800c67c <netif_set_down+0x58>)
 800c634:	f240 329b 	movw	r2, #923	; 0x39b
 800c638:	4911      	ldr	r1, [pc, #68]	; (800c680 <netif_set_down+0x5c>)
 800c63a:	4812      	ldr	r0, [pc, #72]	; (800c684 <netif_set_down+0x60>)
 800c63c:	f009 fdc8 	bl	80161d0 <iprintf>
 800c640:	e019      	b.n	800c676 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c648:	f003 0301 	and.w	r3, r3, #1
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d012      	beq.n	800c676 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c656:	f023 0301 	bic.w	r3, r3, #1
 800c65a:	b2da      	uxtb	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c668:	f003 0308 	and.w	r3, r3, #8
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d002      	beq.n	800c676 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f007 fa07 	bl	8013a84 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c676:	3708      	adds	r7, #8
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}
 800c67c:	08017624 	.word	0x08017624
 800c680:	080177ec 	.word	0x080177ec
 800c684:	08017674 	.word	0x08017674

0800c688 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b082      	sub	sp, #8
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d107      	bne.n	800c6a6 <netif_set_link_up+0x1e>
 800c696:	4b13      	ldr	r3, [pc, #76]	; (800c6e4 <netif_set_link_up+0x5c>)
 800c698:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800c69c:	4912      	ldr	r1, [pc, #72]	; (800c6e8 <netif_set_link_up+0x60>)
 800c69e:	4813      	ldr	r0, [pc, #76]	; (800c6ec <netif_set_link_up+0x64>)
 800c6a0:	f009 fd96 	bl	80161d0 <iprintf>
 800c6a4:	e01b      	b.n	800c6de <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6ac:	f003 0304 	and.w	r3, r3, #4
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d114      	bne.n	800c6de <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6ba:	f043 0304 	orr.w	r3, r3, #4
 800c6be:	b2da      	uxtb	r2, r3
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c6c6:	2103      	movs	r1, #3
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f7ff ff6b 	bl	800c5a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	69db      	ldr	r3, [r3, #28]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d003      	beq.n	800c6de <netif_set_link_up+0x56>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	69db      	ldr	r3, [r3, #28]
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	08017624 	.word	0x08017624
 800c6e8:	0801780c 	.word	0x0801780c
 800c6ec:	08017674 	.word	0x08017674

0800c6f0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d107      	bne.n	800c70e <netif_set_link_down+0x1e>
 800c6fe:	4b11      	ldr	r3, [pc, #68]	; (800c744 <netif_set_link_down+0x54>)
 800c700:	f240 4206 	movw	r2, #1030	; 0x406
 800c704:	4910      	ldr	r1, [pc, #64]	; (800c748 <netif_set_link_down+0x58>)
 800c706:	4811      	ldr	r0, [pc, #68]	; (800c74c <netif_set_link_down+0x5c>)
 800c708:	f009 fd62 	bl	80161d0 <iprintf>
 800c70c:	e017      	b.n	800c73e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c714:	f003 0304 	and.w	r3, r3, #4
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d010      	beq.n	800c73e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c722:	f023 0304 	bic.w	r3, r3, #4
 800c726:	b2da      	uxtb	r2, r3
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	69db      	ldr	r3, [r3, #28]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <netif_set_link_down+0x4e>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	69db      	ldr	r3, [r3, #28]
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}
 800c744:	08017624 	.word	0x08017624
 800c748:	08017830 	.word	0x08017830
 800c74c:	08017674 	.word	0x08017674

0800c750 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d002      	beq.n	800c766 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	683a      	ldr	r2, [r7, #0]
 800c764:	61da      	str	r2, [r3, #28]
  }
}
 800c766:	bf00      	nop
 800c768:	370c      	adds	r7, #12
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr

0800c772 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c772:	b480      	push	{r7}
 800c774:	b085      	sub	sp, #20
 800c776:	af00      	add	r7, sp, #0
 800c778:	60f8      	str	r0, [r7, #12]
 800c77a:	60b9      	str	r1, [r7, #8]
 800c77c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c77e:	f06f 030b 	mvn.w	r3, #11
}
 800c782:	4618      	mov	r0, r3
 800c784:	3714      	adds	r7, #20
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
	...

0800c790 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	4603      	mov	r3, r0
 800c798:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c79a:	79fb      	ldrb	r3, [r7, #7]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d013      	beq.n	800c7c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c7a0:	4b0d      	ldr	r3, [pc, #52]	; (800c7d8 <netif_get_by_index+0x48>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	60fb      	str	r3, [r7, #12]
 800c7a6:	e00c      	b.n	800c7c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	b2db      	uxtb	r3, r3
 800c7b2:	79fa      	ldrb	r2, [r7, #7]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d101      	bne.n	800c7bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	e006      	b.n	800c7ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	60fb      	str	r3, [r7, #12]
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1ef      	bne.n	800c7a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3714      	adds	r7, #20
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	20008f14 	.word	0x20008f14

0800c7dc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c7dc:	b580      	push	{r7, lr}
 800c7de:	b082      	sub	sp, #8
 800c7e0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c7e2:	4b0c      	ldr	r3, [pc, #48]	; (800c814 <pbuf_free_ooseq+0x38>)
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c7e8:	4b0b      	ldr	r3, [pc, #44]	; (800c818 <pbuf_free_ooseq+0x3c>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	607b      	str	r3, [r7, #4]
 800c7ee:	e00a      	b.n	800c806 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d003      	beq.n	800c800 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f002 f9df 	bl	800ebbc <tcp_free_ooseq>
      return;
 800c7fe:	e005      	b.n	800c80c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	607b      	str	r3, [r7, #4]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1f1      	bne.n	800c7f0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800c80c:	3708      	adds	r7, #8
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	20008f1d 	.word	0x20008f1d
 800c818:	20008f2c 	.word	0x20008f2c

0800c81c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c81c:	b480      	push	{r7}
 800c81e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800c820:	4b03      	ldr	r3, [pc, #12]	; (800c830 <pbuf_pool_is_empty+0x14>)
 800c822:	2201      	movs	r2, #1
 800c824:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c826:	bf00      	nop
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr
 800c830:	20008f1d 	.word	0x20008f1d

0800c834 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c834:	b480      	push	{r7}
 800c836:	b085      	sub	sp, #20
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	4611      	mov	r1, r2
 800c840:	461a      	mov	r2, r3
 800c842:	460b      	mov	r3, r1
 800c844:	80fb      	strh	r3, [r7, #6]
 800c846:	4613      	mov	r3, r2
 800c848:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	88fa      	ldrh	r2, [r7, #6]
 800c85a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	88ba      	ldrh	r2, [r7, #4]
 800c860:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c862:	8b3b      	ldrh	r3, [r7, #24]
 800c864:	b2da      	uxtb	r2, r3
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	7f3a      	ldrb	r2, [r7, #28]
 800c86e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2201      	movs	r2, #1
 800c874:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	2200      	movs	r2, #0
 800c87a:	73da      	strb	r2, [r3, #15]
}
 800c87c:	bf00      	nop
 800c87e:	3714      	adds	r7, #20
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b08c      	sub	sp, #48	; 0x30
 800c88c:	af02      	add	r7, sp, #8
 800c88e:	4603      	mov	r3, r0
 800c890:	71fb      	strb	r3, [r7, #7]
 800c892:	460b      	mov	r3, r1
 800c894:	80bb      	strh	r3, [r7, #4]
 800c896:	4613      	mov	r3, r2
 800c898:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c89a:	79fb      	ldrb	r3, [r7, #7]
 800c89c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c89e:	887b      	ldrh	r3, [r7, #2]
 800c8a0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c8a4:	d07f      	beq.n	800c9a6 <pbuf_alloc+0x11e>
 800c8a6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800c8aa:	f300 80c8 	bgt.w	800ca3e <pbuf_alloc+0x1b6>
 800c8ae:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c8b2:	d010      	beq.n	800c8d6 <pbuf_alloc+0x4e>
 800c8b4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800c8b8:	f300 80c1 	bgt.w	800ca3e <pbuf_alloc+0x1b6>
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d002      	beq.n	800c8c6 <pbuf_alloc+0x3e>
 800c8c0:	2b41      	cmp	r3, #65	; 0x41
 800c8c2:	f040 80bc 	bne.w	800ca3e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c8c6:	887a      	ldrh	r2, [r7, #2]
 800c8c8:	88bb      	ldrh	r3, [r7, #4]
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	2000      	movs	r0, #0
 800c8ce:	f000 f8d1 	bl	800ca74 <pbuf_alloc_reference>
 800c8d2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800c8d4:	e0bd      	b.n	800ca52 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c8de:	88bb      	ldrh	r3, [r7, #4]
 800c8e0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c8e2:	2008      	movs	r0, #8
 800c8e4:	f7ff fbce 	bl	800c084 <memp_malloc>
 800c8e8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d109      	bne.n	800c904 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800c8f0:	f7ff ff94 	bl	800c81c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d002      	beq.n	800c900 <pbuf_alloc+0x78>
            pbuf_free(p);
 800c8fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c8fc:	f000 faa8 	bl	800ce50 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c900:	2300      	movs	r3, #0
 800c902:	e0a7      	b.n	800ca54 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c906:	3303      	adds	r3, #3
 800c908:	b29b      	uxth	r3, r3
 800c90a:	f023 0303 	bic.w	r3, r3, #3
 800c90e:	b29b      	uxth	r3, r3
 800c910:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800c914:	b29b      	uxth	r3, r3
 800c916:	8b7a      	ldrh	r2, [r7, #26]
 800c918:	4293      	cmp	r3, r2
 800c91a:	bf28      	it	cs
 800c91c:	4613      	movcs	r3, r2
 800c91e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c920:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c922:	3310      	adds	r3, #16
 800c924:	693a      	ldr	r2, [r7, #16]
 800c926:	4413      	add	r3, r2
 800c928:	3303      	adds	r3, #3
 800c92a:	f023 0303 	bic.w	r3, r3, #3
 800c92e:	4618      	mov	r0, r3
 800c930:	89f9      	ldrh	r1, [r7, #14]
 800c932:	8b7a      	ldrh	r2, [r7, #26]
 800c934:	2300      	movs	r3, #0
 800c936:	9301      	str	r3, [sp, #4]
 800c938:	887b      	ldrh	r3, [r7, #2]
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	460b      	mov	r3, r1
 800c93e:	4601      	mov	r1, r0
 800c940:	6938      	ldr	r0, [r7, #16]
 800c942:	f7ff ff77 	bl	800c834 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	f003 0303 	and.w	r3, r3, #3
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d006      	beq.n	800c960 <pbuf_alloc+0xd8>
 800c952:	4b42      	ldr	r3, [pc, #264]	; (800ca5c <pbuf_alloc+0x1d4>)
 800c954:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c958:	4941      	ldr	r1, [pc, #260]	; (800ca60 <pbuf_alloc+0x1d8>)
 800c95a:	4842      	ldr	r0, [pc, #264]	; (800ca64 <pbuf_alloc+0x1dc>)
 800c95c:	f009 fc38 	bl	80161d0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c962:	3303      	adds	r3, #3
 800c964:	f023 0303 	bic.w	r3, r3, #3
 800c968:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c96c:	d106      	bne.n	800c97c <pbuf_alloc+0xf4>
 800c96e:	4b3b      	ldr	r3, [pc, #236]	; (800ca5c <pbuf_alloc+0x1d4>)
 800c970:	f44f 7281 	mov.w	r2, #258	; 0x102
 800c974:	493c      	ldr	r1, [pc, #240]	; (800ca68 <pbuf_alloc+0x1e0>)
 800c976:	483b      	ldr	r0, [pc, #236]	; (800ca64 <pbuf_alloc+0x1dc>)
 800c978:	f009 fc2a 	bl	80161d0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d102      	bne.n	800c988 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	627b      	str	r3, [r7, #36]	; 0x24
 800c986:	e002      	b.n	800c98e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	693a      	ldr	r2, [r7, #16]
 800c98c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c992:	8b7a      	ldrh	r2, [r7, #26]
 800c994:	89fb      	ldrh	r3, [r7, #14]
 800c996:	1ad3      	subs	r3, r2, r3
 800c998:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c99a:	2300      	movs	r3, #0
 800c99c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800c99e:	8b7b      	ldrh	r3, [r7, #26]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d19e      	bne.n	800c8e2 <pbuf_alloc+0x5a>
      break;
 800c9a4:	e055      	b.n	800ca52 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c9a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9a8:	3303      	adds	r3, #3
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	f023 0303 	bic.w	r3, r3, #3
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	88bb      	ldrh	r3, [r7, #4]
 800c9b4:	3303      	adds	r3, #3
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	f023 0303 	bic.w	r3, r3, #3
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	4413      	add	r3, r2
 800c9c0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c9c2:	8b3b      	ldrh	r3, [r7, #24]
 800c9c4:	3310      	adds	r3, #16
 800c9c6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c9c8:	8b3a      	ldrh	r2, [r7, #24]
 800c9ca:	88bb      	ldrh	r3, [r7, #4]
 800c9cc:	3303      	adds	r3, #3
 800c9ce:	f023 0303 	bic.w	r3, r3, #3
 800c9d2:	429a      	cmp	r2, r3
 800c9d4:	d306      	bcc.n	800c9e4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c9d6:	8afa      	ldrh	r2, [r7, #22]
 800c9d8:	88bb      	ldrh	r3, [r7, #4]
 800c9da:	3303      	adds	r3, #3
 800c9dc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d201      	bcs.n	800c9e8 <pbuf_alloc+0x160>
        return NULL;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	e035      	b.n	800ca54 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c9e8:	8afb      	ldrh	r3, [r7, #22]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f7ff f9ba 	bl	800bd64 <mem_malloc>
 800c9f0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d101      	bne.n	800c9fc <pbuf_alloc+0x174>
        return NULL;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	e02b      	b.n	800ca54 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c9fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c9fe:	3310      	adds	r3, #16
 800ca00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca02:	4413      	add	r3, r2
 800ca04:	3303      	adds	r3, #3
 800ca06:	f023 0303 	bic.w	r3, r3, #3
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	88b9      	ldrh	r1, [r7, #4]
 800ca0e:	88ba      	ldrh	r2, [r7, #4]
 800ca10:	2300      	movs	r3, #0
 800ca12:	9301      	str	r3, [sp, #4]
 800ca14:	887b      	ldrh	r3, [r7, #2]
 800ca16:	9300      	str	r3, [sp, #0]
 800ca18:	460b      	mov	r3, r1
 800ca1a:	4601      	mov	r1, r0
 800ca1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca1e:	f7ff ff09 	bl	800c834 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ca22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	f003 0303 	and.w	r3, r3, #3
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d010      	beq.n	800ca50 <pbuf_alloc+0x1c8>
 800ca2e:	4b0b      	ldr	r3, [pc, #44]	; (800ca5c <pbuf_alloc+0x1d4>)
 800ca30:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ca34:	490d      	ldr	r1, [pc, #52]	; (800ca6c <pbuf_alloc+0x1e4>)
 800ca36:	480b      	ldr	r0, [pc, #44]	; (800ca64 <pbuf_alloc+0x1dc>)
 800ca38:	f009 fbca 	bl	80161d0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ca3c:	e008      	b.n	800ca50 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ca3e:	4b07      	ldr	r3, [pc, #28]	; (800ca5c <pbuf_alloc+0x1d4>)
 800ca40:	f240 1227 	movw	r2, #295	; 0x127
 800ca44:	490a      	ldr	r1, [pc, #40]	; (800ca70 <pbuf_alloc+0x1e8>)
 800ca46:	4807      	ldr	r0, [pc, #28]	; (800ca64 <pbuf_alloc+0x1dc>)
 800ca48:	f009 fbc2 	bl	80161d0 <iprintf>
      return NULL;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	e001      	b.n	800ca54 <pbuf_alloc+0x1cc>
      break;
 800ca50:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ca52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3728      	adds	r7, #40	; 0x28
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	08017854 	.word	0x08017854
 800ca60:	08017884 	.word	0x08017884
 800ca64:	080178b4 	.word	0x080178b4
 800ca68:	080178dc 	.word	0x080178dc
 800ca6c:	08017910 	.word	0x08017910
 800ca70:	0801793c 	.word	0x0801793c

0800ca74 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b086      	sub	sp, #24
 800ca78:	af02      	add	r7, sp, #8
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	460b      	mov	r3, r1
 800ca7e:	807b      	strh	r3, [r7, #2]
 800ca80:	4613      	mov	r3, r2
 800ca82:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ca84:	883b      	ldrh	r3, [r7, #0]
 800ca86:	2b41      	cmp	r3, #65	; 0x41
 800ca88:	d009      	beq.n	800ca9e <pbuf_alloc_reference+0x2a>
 800ca8a:	883b      	ldrh	r3, [r7, #0]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d006      	beq.n	800ca9e <pbuf_alloc_reference+0x2a>
 800ca90:	4b0f      	ldr	r3, [pc, #60]	; (800cad0 <pbuf_alloc_reference+0x5c>)
 800ca92:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ca96:	490f      	ldr	r1, [pc, #60]	; (800cad4 <pbuf_alloc_reference+0x60>)
 800ca98:	480f      	ldr	r0, [pc, #60]	; (800cad8 <pbuf_alloc_reference+0x64>)
 800ca9a:	f009 fb99 	bl	80161d0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ca9e:	2007      	movs	r0, #7
 800caa0:	f7ff faf0 	bl	800c084 <memp_malloc>
 800caa4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d101      	bne.n	800cab0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800caac:	2300      	movs	r3, #0
 800caae:	e00b      	b.n	800cac8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cab0:	8879      	ldrh	r1, [r7, #2]
 800cab2:	887a      	ldrh	r2, [r7, #2]
 800cab4:	2300      	movs	r3, #0
 800cab6:	9301      	str	r3, [sp, #4]
 800cab8:	883b      	ldrh	r3, [r7, #0]
 800caba:	9300      	str	r3, [sp, #0]
 800cabc:	460b      	mov	r3, r1
 800cabe:	6879      	ldr	r1, [r7, #4]
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f7ff feb7 	bl	800c834 <pbuf_init_alloced_pbuf>
  return p;
 800cac6:	68fb      	ldr	r3, [r7, #12]
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	08017854 	.word	0x08017854
 800cad4:	08017958 	.word	0x08017958
 800cad8:	080178b4 	.word	0x080178b4

0800cadc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b088      	sub	sp, #32
 800cae0:	af02      	add	r7, sp, #8
 800cae2:	607b      	str	r3, [r7, #4]
 800cae4:	4603      	mov	r3, r0
 800cae6:	73fb      	strb	r3, [r7, #15]
 800cae8:	460b      	mov	r3, r1
 800caea:	81bb      	strh	r3, [r7, #12]
 800caec:	4613      	mov	r3, r2
 800caee:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800caf0:	7bfb      	ldrb	r3, [r7, #15]
 800caf2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800caf4:	8a7b      	ldrh	r3, [r7, #18]
 800caf6:	3303      	adds	r3, #3
 800caf8:	f023 0203 	bic.w	r2, r3, #3
 800cafc:	89bb      	ldrh	r3, [r7, #12]
 800cafe:	441a      	add	r2, r3
 800cb00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d901      	bls.n	800cb0a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cb06:	2300      	movs	r3, #0
 800cb08:	e018      	b.n	800cb3c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cb0a:	6a3b      	ldr	r3, [r7, #32]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d007      	beq.n	800cb20 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cb10:	8a7b      	ldrh	r3, [r7, #18]
 800cb12:	3303      	adds	r3, #3
 800cb14:	f023 0303 	bic.w	r3, r3, #3
 800cb18:	6a3a      	ldr	r2, [r7, #32]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	617b      	str	r3, [r7, #20]
 800cb1e:	e001      	b.n	800cb24 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cb20:	2300      	movs	r3, #0
 800cb22:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	89b9      	ldrh	r1, [r7, #12]
 800cb28:	89ba      	ldrh	r2, [r7, #12]
 800cb2a:	2302      	movs	r3, #2
 800cb2c:	9301      	str	r3, [sp, #4]
 800cb2e:	897b      	ldrh	r3, [r7, #10]
 800cb30:	9300      	str	r3, [sp, #0]
 800cb32:	460b      	mov	r3, r1
 800cb34:	6979      	ldr	r1, [r7, #20]
 800cb36:	f7ff fe7d 	bl	800c834 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cb3a:	687b      	ldr	r3, [r7, #4]
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3718      	adds	r7, #24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b084      	sub	sp, #16
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d106      	bne.n	800cb64 <pbuf_realloc+0x20>
 800cb56:	4b3a      	ldr	r3, [pc, #232]	; (800cc40 <pbuf_realloc+0xfc>)
 800cb58:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cb5c:	4939      	ldr	r1, [pc, #228]	; (800cc44 <pbuf_realloc+0x100>)
 800cb5e:	483a      	ldr	r0, [pc, #232]	; (800cc48 <pbuf_realloc+0x104>)
 800cb60:	f009 fb36 	bl	80161d0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	891b      	ldrh	r3, [r3, #8]
 800cb68:	887a      	ldrh	r2, [r7, #2]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d263      	bcs.n	800cc36 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	891a      	ldrh	r2, [r3, #8]
 800cb72:	887b      	ldrh	r3, [r7, #2]
 800cb74:	1ad3      	subs	r3, r2, r3
 800cb76:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cb78:	887b      	ldrh	r3, [r7, #2]
 800cb7a:	817b      	strh	r3, [r7, #10]
  q = p;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cb80:	e018      	b.n	800cbb4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	895b      	ldrh	r3, [r3, #10]
 800cb86:	897a      	ldrh	r2, [r7, #10]
 800cb88:	1ad3      	subs	r3, r2, r3
 800cb8a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	891a      	ldrh	r2, [r3, #8]
 800cb90:	893b      	ldrh	r3, [r7, #8]
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d106      	bne.n	800cbb4 <pbuf_realloc+0x70>
 800cba6:	4b26      	ldr	r3, [pc, #152]	; (800cc40 <pbuf_realloc+0xfc>)
 800cba8:	f240 12af 	movw	r2, #431	; 0x1af
 800cbac:	4927      	ldr	r1, [pc, #156]	; (800cc4c <pbuf_realloc+0x108>)
 800cbae:	4826      	ldr	r0, [pc, #152]	; (800cc48 <pbuf_realloc+0x104>)
 800cbb0:	f009 fb0e 	bl	80161d0 <iprintf>
  while (rem_len > q->len) {
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	895b      	ldrh	r3, [r3, #10]
 800cbb8:	897a      	ldrh	r2, [r7, #10]
 800cbba:	429a      	cmp	r2, r3
 800cbbc:	d8e1      	bhi.n	800cb82 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	7b1b      	ldrb	r3, [r3, #12]
 800cbc2:	f003 030f 	and.w	r3, r3, #15
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d121      	bne.n	800cc0e <pbuf_realloc+0xca>
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	895b      	ldrh	r3, [r3, #10]
 800cbce:	897a      	ldrh	r2, [r7, #10]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d01c      	beq.n	800cc0e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	7b5b      	ldrb	r3, [r3, #13]
 800cbd8:	f003 0302 	and.w	r3, r3, #2
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d116      	bne.n	800cc0e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	685a      	ldr	r2, [r3, #4]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	1ad3      	subs	r3, r2, r3
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	897b      	ldrh	r3, [r7, #10]
 800cbec:	4413      	add	r3, r2
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	68f8      	ldr	r0, [r7, #12]
 800cbf4:	f7fe ffba 	bl	800bb6c <mem_trim>
 800cbf8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d106      	bne.n	800cc0e <pbuf_realloc+0xca>
 800cc00:	4b0f      	ldr	r3, [pc, #60]	; (800cc40 <pbuf_realloc+0xfc>)
 800cc02:	f240 12bd 	movw	r2, #445	; 0x1bd
 800cc06:	4912      	ldr	r1, [pc, #72]	; (800cc50 <pbuf_realloc+0x10c>)
 800cc08:	480f      	ldr	r0, [pc, #60]	; (800cc48 <pbuf_realloc+0x104>)
 800cc0a:	f009 fae1 	bl	80161d0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	897a      	ldrh	r2, [r7, #10]
 800cc12:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	895a      	ldrh	r2, [r3, #10]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d004      	beq.n	800cc2e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f000 f911 	bl	800ce50 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2200      	movs	r2, #0
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	e000      	b.n	800cc38 <pbuf_realloc+0xf4>
    return;
 800cc36:	bf00      	nop

}
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	08017854 	.word	0x08017854
 800cc44:	0801796c 	.word	0x0801796c
 800cc48:	080178b4 	.word	0x080178b4
 800cc4c:	08017984 	.word	0x08017984
 800cc50:	0801799c 	.word	0x0801799c

0800cc54 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	4613      	mov	r3, r2
 800cc60:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d106      	bne.n	800cc76 <pbuf_add_header_impl+0x22>
 800cc68:	4b2b      	ldr	r3, [pc, #172]	; (800cd18 <pbuf_add_header_impl+0xc4>)
 800cc6a:	f240 12df 	movw	r2, #479	; 0x1df
 800cc6e:	492b      	ldr	r1, [pc, #172]	; (800cd1c <pbuf_add_header_impl+0xc8>)
 800cc70:	482b      	ldr	r0, [pc, #172]	; (800cd20 <pbuf_add_header_impl+0xcc>)
 800cc72:	f009 faad 	bl	80161d0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d003      	beq.n	800cc84 <pbuf_add_header_impl+0x30>
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc82:	d301      	bcc.n	800cc88 <pbuf_add_header_impl+0x34>
    return 1;
 800cc84:	2301      	movs	r3, #1
 800cc86:	e043      	b.n	800cd10 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d101      	bne.n	800cc92 <pbuf_add_header_impl+0x3e>
    return 0;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	e03e      	b.n	800cd10 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	891a      	ldrh	r2, [r3, #8]
 800cc9a:	8a7b      	ldrh	r3, [r7, #18]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	8a7a      	ldrh	r2, [r7, #18]
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d901      	bls.n	800ccaa <pbuf_add_header_impl+0x56>
    return 1;
 800cca6:	2301      	movs	r3, #1
 800cca8:	e032      	b.n	800cd10 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	7b1b      	ldrb	r3, [r3, #12]
 800ccae:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ccb0:	8a3b      	ldrh	r3, [r7, #16]
 800ccb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00c      	beq.n	800ccd4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	685a      	ldr	r2, [r3, #4]
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	425b      	negs	r3, r3
 800ccc2:	4413      	add	r3, r2
 800ccc4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	3310      	adds	r3, #16
 800ccca:	697a      	ldr	r2, [r7, #20]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d20d      	bcs.n	800ccec <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e01d      	b.n	800cd10 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ccd4:	79fb      	ldrb	r3, [r7, #7]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d006      	beq.n	800cce8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	685a      	ldr	r2, [r3, #4]
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	425b      	negs	r3, r3
 800cce2:	4413      	add	r3, r2
 800cce4:	617b      	str	r3, [r7, #20]
 800cce6:	e001      	b.n	800ccec <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cce8:	2301      	movs	r3, #1
 800ccea:	e011      	b.n	800cd10 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	697a      	ldr	r2, [r7, #20]
 800ccf0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	895a      	ldrh	r2, [r3, #10]
 800ccf6:	8a7b      	ldrh	r3, [r7, #18]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	b29a      	uxth	r2, r3
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	891a      	ldrh	r2, [r3, #8]
 800cd04:	8a7b      	ldrh	r3, [r7, #18]
 800cd06:	4413      	add	r3, r2
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	811a      	strh	r2, [r3, #8]


  return 0;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3718      	adds	r7, #24
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	08017854 	.word	0x08017854
 800cd1c:	080179b8 	.word	0x080179b8
 800cd20:	080178b4 	.word	0x080178b4

0800cd24 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cd2e:	2200      	movs	r2, #0
 800cd30:	6839      	ldr	r1, [r7, #0]
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f7ff ff8e 	bl	800cc54 <pbuf_add_header_impl>
 800cd38:	4603      	mov	r3, r0
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
	...

0800cd44 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d106      	bne.n	800cd62 <pbuf_remove_header+0x1e>
 800cd54:	4b20      	ldr	r3, [pc, #128]	; (800cdd8 <pbuf_remove_header+0x94>)
 800cd56:	f240 224b 	movw	r2, #587	; 0x24b
 800cd5a:	4920      	ldr	r1, [pc, #128]	; (800cddc <pbuf_remove_header+0x98>)
 800cd5c:	4820      	ldr	r0, [pc, #128]	; (800cde0 <pbuf_remove_header+0x9c>)
 800cd5e:	f009 fa37 	bl	80161d0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d003      	beq.n	800cd70 <pbuf_remove_header+0x2c>
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd6e:	d301      	bcc.n	800cd74 <pbuf_remove_header+0x30>
    return 1;
 800cd70:	2301      	movs	r3, #1
 800cd72:	e02c      	b.n	800cdce <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d101      	bne.n	800cd7e <pbuf_remove_header+0x3a>
    return 0;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	e027      	b.n	800cdce <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	895b      	ldrh	r3, [r3, #10]
 800cd86:	89fa      	ldrh	r2, [r7, #14]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d908      	bls.n	800cd9e <pbuf_remove_header+0x5a>
 800cd8c:	4b12      	ldr	r3, [pc, #72]	; (800cdd8 <pbuf_remove_header+0x94>)
 800cd8e:	f240 2255 	movw	r2, #597	; 0x255
 800cd92:	4914      	ldr	r1, [pc, #80]	; (800cde4 <pbuf_remove_header+0xa0>)
 800cd94:	4812      	ldr	r0, [pc, #72]	; (800cde0 <pbuf_remove_header+0x9c>)
 800cd96:	f009 fa1b 	bl	80161d0 <iprintf>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e017      	b.n	800cdce <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	685a      	ldr	r2, [r3, #4]
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	441a      	add	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	895a      	ldrh	r2, [r3, #10]
 800cdb4:	89fb      	ldrh	r3, [r7, #14]
 800cdb6:	1ad3      	subs	r3, r2, r3
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	891a      	ldrh	r2, [r3, #8]
 800cdc2:	89fb      	ldrh	r3, [r7, #14]
 800cdc4:	1ad3      	subs	r3, r2, r3
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3710      	adds	r7, #16
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	08017854 	.word	0x08017854
 800cddc:	080179b8 	.word	0x080179b8
 800cde0:	080178b4 	.word	0x080178b4
 800cde4:	080179c4 	.word	0x080179c4

0800cde8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	807b      	strh	r3, [r7, #2]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cdf8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	da08      	bge.n	800ce12 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ce00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce04:	425b      	negs	r3, r3
 800ce06:	4619      	mov	r1, r3
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f7ff ff9b 	bl	800cd44 <pbuf_remove_header>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	e007      	b.n	800ce22 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ce12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce16:	787a      	ldrb	r2, [r7, #1]
 800ce18:	4619      	mov	r1, r3
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f7ff ff1a 	bl	800cc54 <pbuf_add_header_impl>
 800ce20:	4603      	mov	r3, r0
  }
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b082      	sub	sp, #8
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	460b      	mov	r3, r1
 800ce34:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ce36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7ff ffd2 	bl	800cde8 <pbuf_header_impl>
 800ce44:	4603      	mov	r3, r0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d10b      	bne.n	800ce76 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d106      	bne.n	800ce72 <pbuf_free+0x22>
 800ce64:	4b38      	ldr	r3, [pc, #224]	; (800cf48 <pbuf_free+0xf8>)
 800ce66:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ce6a:	4938      	ldr	r1, [pc, #224]	; (800cf4c <pbuf_free+0xfc>)
 800ce6c:	4838      	ldr	r0, [pc, #224]	; (800cf50 <pbuf_free+0x100>)
 800ce6e:	f009 f9af 	bl	80161d0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ce72:	2300      	movs	r3, #0
 800ce74:	e063      	b.n	800cf3e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ce7a:	e05c      	b.n	800cf36 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	7b9b      	ldrb	r3, [r3, #14]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d106      	bne.n	800ce92 <pbuf_free+0x42>
 800ce84:	4b30      	ldr	r3, [pc, #192]	; (800cf48 <pbuf_free+0xf8>)
 800ce86:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ce8a:	4932      	ldr	r1, [pc, #200]	; (800cf54 <pbuf_free+0x104>)
 800ce8c:	4830      	ldr	r0, [pc, #192]	; (800cf50 <pbuf_free+0x100>)
 800ce8e:	f009 f99f 	bl	80161d0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	7b9b      	ldrb	r3, [r3, #14]
 800ce96:	3b01      	subs	r3, #1
 800ce98:	b2da      	uxtb	r2, r3
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	739a      	strb	r2, [r3, #14]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	7b9b      	ldrb	r3, [r3, #14]
 800cea2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cea4:	7dbb      	ldrb	r3, [r7, #22]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d143      	bne.n	800cf32 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	7b1b      	ldrb	r3, [r3, #12]
 800ceb4:	f003 030f 	and.w	r3, r3, #15
 800ceb8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	7b5b      	ldrb	r3, [r3, #13]
 800cebe:	f003 0302 	and.w	r3, r3, #2
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d011      	beq.n	800ceea <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d106      	bne.n	800cee0 <pbuf_free+0x90>
 800ced2:	4b1d      	ldr	r3, [pc, #116]	; (800cf48 <pbuf_free+0xf8>)
 800ced4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ced8:	491f      	ldr	r1, [pc, #124]	; (800cf58 <pbuf_free+0x108>)
 800ceda:	481d      	ldr	r0, [pc, #116]	; (800cf50 <pbuf_free+0x100>)
 800cedc:	f009 f978 	bl	80161d0 <iprintf>
        pc->custom_free_function(p);
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	691b      	ldr	r3, [r3, #16]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	4798      	blx	r3
 800cee8:	e01d      	b.n	800cf26 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ceea:	7bfb      	ldrb	r3, [r7, #15]
 800ceec:	2b02      	cmp	r3, #2
 800ceee:	d104      	bne.n	800cefa <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800cef0:	6879      	ldr	r1, [r7, #4]
 800cef2:	2008      	movs	r0, #8
 800cef4:	f7ff f936 	bl	800c164 <memp_free>
 800cef8:	e015      	b.n	800cf26 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d104      	bne.n	800cf0a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800cf00:	6879      	ldr	r1, [r7, #4]
 800cf02:	2007      	movs	r0, #7
 800cf04:	f7ff f92e 	bl	800c164 <memp_free>
 800cf08:	e00d      	b.n	800cf26 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800cf0a:	7bfb      	ldrb	r3, [r7, #15]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d103      	bne.n	800cf18 <pbuf_free+0xc8>
          mem_free(p);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f7fe fdc1 	bl	800ba98 <mem_free>
 800cf16:	e006      	b.n	800cf26 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800cf18:	4b0b      	ldr	r3, [pc, #44]	; (800cf48 <pbuf_free+0xf8>)
 800cf1a:	f240 320f 	movw	r2, #783	; 0x30f
 800cf1e:	490f      	ldr	r1, [pc, #60]	; (800cf5c <pbuf_free+0x10c>)
 800cf20:	480b      	ldr	r0, [pc, #44]	; (800cf50 <pbuf_free+0x100>)
 800cf22:	f009 f955 	bl	80161d0 <iprintf>
        }
      }
      count++;
 800cf26:	7dfb      	ldrb	r3, [r7, #23]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	607b      	str	r3, [r7, #4]
 800cf30:	e001      	b.n	800cf36 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800cf32:	2300      	movs	r3, #0
 800cf34:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d19f      	bne.n	800ce7c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800cf3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3718      	adds	r7, #24
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	08017854 	.word	0x08017854
 800cf4c:	080179b8 	.word	0x080179b8
 800cf50:	080178b4 	.word	0x080178b4
 800cf54:	080179e4 	.word	0x080179e4
 800cf58:	080179fc 	.word	0x080179fc
 800cf5c:	08017a20 	.word	0x08017a20

0800cf60 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b085      	sub	sp, #20
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800cf6c:	e005      	b.n	800cf7a <pbuf_clen+0x1a>
    ++len;
 800cf6e:	89fb      	ldrh	r3, [r7, #14]
 800cf70:	3301      	adds	r3, #1
 800cf72:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1f6      	bne.n	800cf6e <pbuf_clen+0xe>
  }
  return len;
 800cf80:	89fb      	ldrh	r3, [r7, #14]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3714      	adds	r7, #20
 800cf86:	46bd      	mov	sp, r7
 800cf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8c:	4770      	bx	lr
	...

0800cf90 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d010      	beq.n	800cfc0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	7b9b      	ldrb	r3, [r3, #14]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	b2da      	uxtb	r2, r3
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	7b9b      	ldrb	r3, [r3, #14]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d106      	bne.n	800cfc0 <pbuf_ref+0x30>
 800cfb2:	4b05      	ldr	r3, [pc, #20]	; (800cfc8 <pbuf_ref+0x38>)
 800cfb4:	f240 3242 	movw	r2, #834	; 0x342
 800cfb8:	4904      	ldr	r1, [pc, #16]	; (800cfcc <pbuf_ref+0x3c>)
 800cfba:	4805      	ldr	r0, [pc, #20]	; (800cfd0 <pbuf_ref+0x40>)
 800cfbc:	f009 f908 	bl	80161d0 <iprintf>
  }
}
 800cfc0:	bf00      	nop
 800cfc2:	3708      	adds	r7, #8
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	08017854 	.word	0x08017854
 800cfcc:	08017a34 	.word	0x08017a34
 800cfd0:	080178b4 	.word	0x080178b4

0800cfd4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d002      	beq.n	800cfea <pbuf_cat+0x16>
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d107      	bne.n	800cffa <pbuf_cat+0x26>
 800cfea:	4b20      	ldr	r3, [pc, #128]	; (800d06c <pbuf_cat+0x98>)
 800cfec:	f240 3259 	movw	r2, #857	; 0x359
 800cff0:	491f      	ldr	r1, [pc, #124]	; (800d070 <pbuf_cat+0x9c>)
 800cff2:	4820      	ldr	r0, [pc, #128]	; (800d074 <pbuf_cat+0xa0>)
 800cff4:	f009 f8ec 	bl	80161d0 <iprintf>
 800cff8:	e034      	b.n	800d064 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	60fb      	str	r3, [r7, #12]
 800cffe:	e00a      	b.n	800d016 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	891a      	ldrh	r2, [r3, #8]
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	891b      	ldrh	r3, [r3, #8]
 800d008:	4413      	add	r3, r2
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	60fb      	str	r3, [r7, #12]
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1f0      	bne.n	800d000 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	891a      	ldrh	r2, [r3, #8]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	895b      	ldrh	r3, [r3, #10]
 800d026:	429a      	cmp	r2, r3
 800d028:	d006      	beq.n	800d038 <pbuf_cat+0x64>
 800d02a:	4b10      	ldr	r3, [pc, #64]	; (800d06c <pbuf_cat+0x98>)
 800d02c:	f240 3262 	movw	r2, #866	; 0x362
 800d030:	4911      	ldr	r1, [pc, #68]	; (800d078 <pbuf_cat+0xa4>)
 800d032:	4810      	ldr	r0, [pc, #64]	; (800d074 <pbuf_cat+0xa0>)
 800d034:	f009 f8cc 	bl	80161d0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d006      	beq.n	800d04e <pbuf_cat+0x7a>
 800d040:	4b0a      	ldr	r3, [pc, #40]	; (800d06c <pbuf_cat+0x98>)
 800d042:	f240 3263 	movw	r2, #867	; 0x363
 800d046:	490d      	ldr	r1, [pc, #52]	; (800d07c <pbuf_cat+0xa8>)
 800d048:	480a      	ldr	r0, [pc, #40]	; (800d074 <pbuf_cat+0xa0>)
 800d04a:	f009 f8c1 	bl	80161d0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	891a      	ldrh	r2, [r3, #8]
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	891b      	ldrh	r3, [r3, #8]
 800d056:	4413      	add	r3, r2
 800d058:	b29a      	uxth	r2, r3
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	683a      	ldr	r2, [r7, #0]
 800d062:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d064:	3710      	adds	r7, #16
 800d066:	46bd      	mov	sp, r7
 800d068:	bd80      	pop	{r7, pc}
 800d06a:	bf00      	nop
 800d06c:	08017854 	.word	0x08017854
 800d070:	08017a48 	.word	0x08017a48
 800d074:	080178b4 	.word	0x080178b4
 800d078:	08017a80 	.word	0x08017a80
 800d07c:	08017ab0 	.word	0x08017ab0

0800d080 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d08a:	6839      	ldr	r1, [r7, #0]
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f7ff ffa1 	bl	800cfd4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d092:	6838      	ldr	r0, [r7, #0]
 800d094:	f7ff ff7c 	bl	800cf90 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d098:	bf00      	nop
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	617b      	str	r3, [r7, #20]
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d008      	beq.n	800d0ca <pbuf_copy+0x2a>
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d005      	beq.n	800d0ca <pbuf_copy+0x2a>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	891a      	ldrh	r2, [r3, #8]
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	891b      	ldrh	r3, [r3, #8]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d209      	bcs.n	800d0de <pbuf_copy+0x3e>
 800d0ca:	4b57      	ldr	r3, [pc, #348]	; (800d228 <pbuf_copy+0x188>)
 800d0cc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d0d0:	4956      	ldr	r1, [pc, #344]	; (800d22c <pbuf_copy+0x18c>)
 800d0d2:	4857      	ldr	r0, [pc, #348]	; (800d230 <pbuf_copy+0x190>)
 800d0d4:	f009 f87c 	bl	80161d0 <iprintf>
 800d0d8:	f06f 030f 	mvn.w	r3, #15
 800d0dc:	e09f      	b.n	800d21e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	895b      	ldrh	r3, [r3, #10]
 800d0e2:	461a      	mov	r2, r3
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	1ad2      	subs	r2, r2, r3
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	895b      	ldrh	r3, [r3, #10]
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	693b      	ldr	r3, [r7, #16]
 800d0f0:	1acb      	subs	r3, r1, r3
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d306      	bcc.n	800d104 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	895b      	ldrh	r3, [r3, #10]
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	1ad3      	subs	r3, r2, r3
 800d100:	60fb      	str	r3, [r7, #12]
 800d102:	e005      	b.n	800d110 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	895b      	ldrh	r3, [r3, #10]
 800d108:	461a      	mov	r2, r3
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	1ad3      	subs	r3, r2, r3
 800d10e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	685a      	ldr	r2, [r3, #4]
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	18d0      	adds	r0, r2, r3
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	693b      	ldr	r3, [r7, #16]
 800d11e:	4413      	add	r3, r2
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	4619      	mov	r1, r3
 800d124:	f009 f83e 	bl	80161a4 <memcpy>
    offset_to += len;
 800d128:	697a      	ldr	r2, [r7, #20]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	4413      	add	r3, r2
 800d12e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d130:	693a      	ldr	r2, [r7, #16]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	4413      	add	r3, r2
 800d136:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	895b      	ldrh	r3, [r3, #10]
 800d13c:	461a      	mov	r2, r3
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	4293      	cmp	r3, r2
 800d142:	d906      	bls.n	800d152 <pbuf_copy+0xb2>
 800d144:	4b38      	ldr	r3, [pc, #224]	; (800d228 <pbuf_copy+0x188>)
 800d146:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d14a:	493a      	ldr	r1, [pc, #232]	; (800d234 <pbuf_copy+0x194>)
 800d14c:	4838      	ldr	r0, [pc, #224]	; (800d230 <pbuf_copy+0x190>)
 800d14e:	f009 f83f 	bl	80161d0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	895b      	ldrh	r3, [r3, #10]
 800d156:	461a      	mov	r2, r3
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d906      	bls.n	800d16c <pbuf_copy+0xcc>
 800d15e:	4b32      	ldr	r3, [pc, #200]	; (800d228 <pbuf_copy+0x188>)
 800d160:	f240 32da 	movw	r2, #986	; 0x3da
 800d164:	4934      	ldr	r1, [pc, #208]	; (800d238 <pbuf_copy+0x198>)
 800d166:	4832      	ldr	r0, [pc, #200]	; (800d230 <pbuf_copy+0x190>)
 800d168:	f009 f832 	bl	80161d0 <iprintf>
    if (offset_from >= p_from->len) {
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	895b      	ldrh	r3, [r3, #10]
 800d170:	461a      	mov	r2, r3
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	4293      	cmp	r3, r2
 800d176:	d304      	bcc.n	800d182 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d178:	2300      	movs	r3, #0
 800d17a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	895b      	ldrh	r3, [r3, #10]
 800d186:	461a      	mov	r2, r3
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d114      	bne.n	800d1b8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d10c      	bne.n	800d1b8 <pbuf_copy+0x118>
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d009      	beq.n	800d1b8 <pbuf_copy+0x118>
 800d1a4:	4b20      	ldr	r3, [pc, #128]	; (800d228 <pbuf_copy+0x188>)
 800d1a6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d1aa:	4924      	ldr	r1, [pc, #144]	; (800d23c <pbuf_copy+0x19c>)
 800d1ac:	4820      	ldr	r0, [pc, #128]	; (800d230 <pbuf_copy+0x190>)
 800d1ae:	f009 f80f 	bl	80161d0 <iprintf>
 800d1b2:	f06f 030f 	mvn.w	r3, #15
 800d1b6:	e032      	b.n	800d21e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d013      	beq.n	800d1e6 <pbuf_copy+0x146>
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	895a      	ldrh	r2, [r3, #10]
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	891b      	ldrh	r3, [r3, #8]
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d10d      	bne.n	800d1e6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d009      	beq.n	800d1e6 <pbuf_copy+0x146>
 800d1d2:	4b15      	ldr	r3, [pc, #84]	; (800d228 <pbuf_copy+0x188>)
 800d1d4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d1d8:	4919      	ldr	r1, [pc, #100]	; (800d240 <pbuf_copy+0x1a0>)
 800d1da:	4815      	ldr	r0, [pc, #84]	; (800d230 <pbuf_copy+0x190>)
 800d1dc:	f008 fff8 	bl	80161d0 <iprintf>
 800d1e0:	f06f 0305 	mvn.w	r3, #5
 800d1e4:	e01b      	b.n	800d21e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d013      	beq.n	800d214 <pbuf_copy+0x174>
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	895a      	ldrh	r2, [r3, #10]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	891b      	ldrh	r3, [r3, #8]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d10d      	bne.n	800d214 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d009      	beq.n	800d214 <pbuf_copy+0x174>
 800d200:	4b09      	ldr	r3, [pc, #36]	; (800d228 <pbuf_copy+0x188>)
 800d202:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d206:	490e      	ldr	r1, [pc, #56]	; (800d240 <pbuf_copy+0x1a0>)
 800d208:	4809      	ldr	r0, [pc, #36]	; (800d230 <pbuf_copy+0x190>)
 800d20a:	f008 ffe1 	bl	80161d0 <iprintf>
 800d20e:	f06f 0305 	mvn.w	r3, #5
 800d212:	e004      	b.n	800d21e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	f47f af61 	bne.w	800d0de <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3718      	adds	r7, #24
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	08017854 	.word	0x08017854
 800d22c:	08017afc 	.word	0x08017afc
 800d230:	080178b4 	.word	0x080178b4
 800d234:	08017b2c 	.word	0x08017b2c
 800d238:	08017b44 	.word	0x08017b44
 800d23c:	08017b60 	.word	0x08017b60
 800d240:	08017b70 	.word	0x08017b70

0800d244 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b088      	sub	sp, #32
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	4611      	mov	r1, r2
 800d250:	461a      	mov	r2, r3
 800d252:	460b      	mov	r3, r1
 800d254:	80fb      	strh	r3, [r7, #6]
 800d256:	4613      	mov	r3, r2
 800d258:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d25a:	2300      	movs	r3, #0
 800d25c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d25e:	2300      	movs	r3, #0
 800d260:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d108      	bne.n	800d27a <pbuf_copy_partial+0x36>
 800d268:	4b2b      	ldr	r3, [pc, #172]	; (800d318 <pbuf_copy_partial+0xd4>)
 800d26a:	f240 420a 	movw	r2, #1034	; 0x40a
 800d26e:	492b      	ldr	r1, [pc, #172]	; (800d31c <pbuf_copy_partial+0xd8>)
 800d270:	482b      	ldr	r0, [pc, #172]	; (800d320 <pbuf_copy_partial+0xdc>)
 800d272:	f008 ffad 	bl	80161d0 <iprintf>
 800d276:	2300      	movs	r3, #0
 800d278:	e04a      	b.n	800d310 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d108      	bne.n	800d292 <pbuf_copy_partial+0x4e>
 800d280:	4b25      	ldr	r3, [pc, #148]	; (800d318 <pbuf_copy_partial+0xd4>)
 800d282:	f240 420b 	movw	r2, #1035	; 0x40b
 800d286:	4927      	ldr	r1, [pc, #156]	; (800d324 <pbuf_copy_partial+0xe0>)
 800d288:	4825      	ldr	r0, [pc, #148]	; (800d320 <pbuf_copy_partial+0xdc>)
 800d28a:	f008 ffa1 	bl	80161d0 <iprintf>
 800d28e:	2300      	movs	r3, #0
 800d290:	e03e      	b.n	800d310 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	61fb      	str	r3, [r7, #28]
 800d296:	e034      	b.n	800d302 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d298:	88bb      	ldrh	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00a      	beq.n	800d2b4 <pbuf_copy_partial+0x70>
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	895b      	ldrh	r3, [r3, #10]
 800d2a2:	88ba      	ldrh	r2, [r7, #4]
 800d2a4:	429a      	cmp	r2, r3
 800d2a6:	d305      	bcc.n	800d2b4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	895b      	ldrh	r3, [r3, #10]
 800d2ac:	88ba      	ldrh	r2, [r7, #4]
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	80bb      	strh	r3, [r7, #4]
 800d2b2:	e023      	b.n	800d2fc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	895a      	ldrh	r2, [r3, #10]
 800d2b8:	88bb      	ldrh	r3, [r7, #4]
 800d2ba:	1ad3      	subs	r3, r2, r3
 800d2bc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d2be:	8b3a      	ldrh	r2, [r7, #24]
 800d2c0:	88fb      	ldrh	r3, [r7, #6]
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d901      	bls.n	800d2ca <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d2c6:	88fb      	ldrh	r3, [r7, #6]
 800d2c8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d2ca:	8b7b      	ldrh	r3, [r7, #26]
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	18d0      	adds	r0, r2, r3
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	685a      	ldr	r2, [r3, #4]
 800d2d4:	88bb      	ldrh	r3, [r7, #4]
 800d2d6:	4413      	add	r3, r2
 800d2d8:	8b3a      	ldrh	r2, [r7, #24]
 800d2da:	4619      	mov	r1, r3
 800d2dc:	f008 ff62 	bl	80161a4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d2e0:	8afa      	ldrh	r2, [r7, #22]
 800d2e2:	8b3b      	ldrh	r3, [r7, #24]
 800d2e4:	4413      	add	r3, r2
 800d2e6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d2e8:	8b7a      	ldrh	r2, [r7, #26]
 800d2ea:	8b3b      	ldrh	r3, [r7, #24]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d2f0:	88fa      	ldrh	r2, [r7, #6]
 800d2f2:	8b3b      	ldrh	r3, [r7, #24]
 800d2f4:	1ad3      	subs	r3, r2, r3
 800d2f6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	61fb      	str	r3, [r7, #28]
 800d302:	88fb      	ldrh	r3, [r7, #6]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d002      	beq.n	800d30e <pbuf_copy_partial+0xca>
 800d308:	69fb      	ldr	r3, [r7, #28]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d1c4      	bne.n	800d298 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d30e:	8afb      	ldrh	r3, [r7, #22]
}
 800d310:	4618      	mov	r0, r3
 800d312:	3720      	adds	r7, #32
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	08017854 	.word	0x08017854
 800d31c:	08017b9c 	.word	0x08017b9c
 800d320:	080178b4 	.word	0x080178b4
 800d324:	08017bbc 	.word	0x08017bbc

0800d328 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b088      	sub	sp, #32
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	4613      	mov	r3, r2
 800d334:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800d336:	88fb      	ldrh	r3, [r7, #6]
 800d338:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800d33a:	2300      	movs	r3, #0
 800d33c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d109      	bne.n	800d358 <pbuf_take+0x30>
 800d344:	4b3a      	ldr	r3, [pc, #232]	; (800d430 <pbuf_take+0x108>)
 800d346:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800d34a:	493a      	ldr	r1, [pc, #232]	; (800d434 <pbuf_take+0x10c>)
 800d34c:	483a      	ldr	r0, [pc, #232]	; (800d438 <pbuf_take+0x110>)
 800d34e:	f008 ff3f 	bl	80161d0 <iprintf>
 800d352:	f06f 030f 	mvn.w	r3, #15
 800d356:	e067      	b.n	800d428 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d109      	bne.n	800d372 <pbuf_take+0x4a>
 800d35e:	4b34      	ldr	r3, [pc, #208]	; (800d430 <pbuf_take+0x108>)
 800d360:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800d364:	4935      	ldr	r1, [pc, #212]	; (800d43c <pbuf_take+0x114>)
 800d366:	4834      	ldr	r0, [pc, #208]	; (800d438 <pbuf_take+0x110>)
 800d368:	f008 ff32 	bl	80161d0 <iprintf>
 800d36c:	f06f 030f 	mvn.w	r3, #15
 800d370:	e05a      	b.n	800d428 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	891b      	ldrh	r3, [r3, #8]
 800d376:	88fa      	ldrh	r2, [r7, #6]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d909      	bls.n	800d390 <pbuf_take+0x68>
 800d37c:	4b2c      	ldr	r3, [pc, #176]	; (800d430 <pbuf_take+0x108>)
 800d37e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800d382:	492f      	ldr	r1, [pc, #188]	; (800d440 <pbuf_take+0x118>)
 800d384:	482c      	ldr	r0, [pc, #176]	; (800d438 <pbuf_take+0x110>)
 800d386:	f008 ff23 	bl	80161d0 <iprintf>
 800d38a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d38e:	e04b      	b.n	800d428 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d007      	beq.n	800d3a6 <pbuf_take+0x7e>
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d004      	beq.n	800d3a6 <pbuf_take+0x7e>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	891b      	ldrh	r3, [r3, #8]
 800d3a0:	88fa      	ldrh	r2, [r7, #6]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d902      	bls.n	800d3ac <pbuf_take+0x84>
    return ERR_ARG;
 800d3a6:	f06f 030f 	mvn.w	r3, #15
 800d3aa:	e03d      	b.n	800d428 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	61fb      	str	r3, [r7, #28]
 800d3b0:	e028      	b.n	800d404 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d106      	bne.n	800d3c6 <pbuf_take+0x9e>
 800d3b8:	4b1d      	ldr	r3, [pc, #116]	; (800d430 <pbuf_take+0x108>)
 800d3ba:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d3be:	4921      	ldr	r1, [pc, #132]	; (800d444 <pbuf_take+0x11c>)
 800d3c0:	481d      	ldr	r0, [pc, #116]	; (800d438 <pbuf_take+0x110>)
 800d3c2:	f008 ff05 	bl	80161d0 <iprintf>
    buf_copy_len = total_copy_len;
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800d3ca:	69fb      	ldr	r3, [r7, #28]
 800d3cc:	895b      	ldrh	r3, [r3, #10]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d902      	bls.n	800d3dc <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	895b      	ldrh	r3, [r3, #10]
 800d3da:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	6858      	ldr	r0, [r3, #4]
 800d3e0:	68ba      	ldr	r2, [r7, #8]
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	69ba      	ldr	r2, [r7, #24]
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	f008 fedb 	bl	80161a4 <memcpy>
    total_copy_len -= buf_copy_len;
 800d3ee:	697a      	ldr	r2, [r7, #20]
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800d3f6:	693a      	ldr	r2, [r7, #16]
 800d3f8:	69bb      	ldr	r3, [r7, #24]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	61fb      	str	r3, [r7, #28]
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d1d3      	bne.n	800d3b2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d103      	bne.n	800d418 <pbuf_take+0xf0>
 800d410:	88fb      	ldrh	r3, [r7, #6]
 800d412:	693a      	ldr	r2, [r7, #16]
 800d414:	429a      	cmp	r2, r3
 800d416:	d006      	beq.n	800d426 <pbuf_take+0xfe>
 800d418:	4b05      	ldr	r3, [pc, #20]	; (800d430 <pbuf_take+0x108>)
 800d41a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800d41e:	490a      	ldr	r1, [pc, #40]	; (800d448 <pbuf_take+0x120>)
 800d420:	4805      	ldr	r0, [pc, #20]	; (800d438 <pbuf_take+0x110>)
 800d422:	f008 fed5 	bl	80161d0 <iprintf>
  return ERR_OK;
 800d426:	2300      	movs	r3, #0
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3720      	adds	r7, #32
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}
 800d430:	08017854 	.word	0x08017854
 800d434:	08017c2c 	.word	0x08017c2c
 800d438:	080178b4 	.word	0x080178b4
 800d43c:	08017c44 	.word	0x08017c44
 800d440:	08017c60 	.word	0x08017c60
 800d444:	08017c80 	.word	0x08017c80
 800d448:	08017c98 	.word	0x08017c98

0800d44c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	4603      	mov	r3, r0
 800d454:	603a      	str	r2, [r7, #0]
 800d456:	71fb      	strb	r3, [r7, #7]
 800d458:	460b      	mov	r3, r1
 800d45a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	8919      	ldrh	r1, [r3, #8]
 800d460:	88ba      	ldrh	r2, [r7, #4]
 800d462:	79fb      	ldrb	r3, [r7, #7]
 800d464:	4618      	mov	r0, r3
 800d466:	f7ff fa0f 	bl	800c888 <pbuf_alloc>
 800d46a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <pbuf_clone+0x2a>
    return NULL;
 800d472:	2300      	movs	r3, #0
 800d474:	e011      	b.n	800d49a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d476:	6839      	ldr	r1, [r7, #0]
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f7ff fe11 	bl	800d0a0 <pbuf_copy>
 800d47e:	4603      	mov	r3, r0
 800d480:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d482:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d006      	beq.n	800d498 <pbuf_clone+0x4c>
 800d48a:	4b06      	ldr	r3, [pc, #24]	; (800d4a4 <pbuf_clone+0x58>)
 800d48c:	f240 5224 	movw	r2, #1316	; 0x524
 800d490:	4905      	ldr	r1, [pc, #20]	; (800d4a8 <pbuf_clone+0x5c>)
 800d492:	4806      	ldr	r0, [pc, #24]	; (800d4ac <pbuf_clone+0x60>)
 800d494:	f008 fe9c 	bl	80161d0 <iprintf>
  return q;
 800d498:	68fb      	ldr	r3, [r7, #12]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	08017854 	.word	0x08017854
 800d4a8:	08017cc8 	.word	0x08017cc8
 800d4ac:	080178b4 	.word	0x080178b4

0800d4b0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d4b4:	f008 fea4 	bl	8016200 <rand>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	b29b      	uxth	r3, r3
 800d4bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d4c6:	b29a      	uxth	r2, r3
 800d4c8:	4b01      	ldr	r3, [pc, #4]	; (800d4d0 <tcp_init+0x20>)
 800d4ca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d4cc:	bf00      	nop
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	20000020 	.word	0x20000020

0800d4d4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b082      	sub	sp, #8
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	7d1b      	ldrb	r3, [r3, #20]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d105      	bne.n	800d4f0 <tcp_free+0x1c>
 800d4e4:	4b06      	ldr	r3, [pc, #24]	; (800d500 <tcp_free+0x2c>)
 800d4e6:	22d4      	movs	r2, #212	; 0xd4
 800d4e8:	4906      	ldr	r1, [pc, #24]	; (800d504 <tcp_free+0x30>)
 800d4ea:	4807      	ldr	r0, [pc, #28]	; (800d508 <tcp_free+0x34>)
 800d4ec:	f008 fe70 	bl	80161d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d4f0:	6879      	ldr	r1, [r7, #4]
 800d4f2:	2001      	movs	r0, #1
 800d4f4:	f7fe fe36 	bl	800c164 <memp_free>
}
 800d4f8:	bf00      	nop
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}
 800d500:	08017d54 	.word	0x08017d54
 800d504:	08017d84 	.word	0x08017d84
 800d508:	08017d98 	.word	0x08017d98

0800d50c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	7d1b      	ldrb	r3, [r3, #20]
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d105      	bne.n	800d528 <tcp_free_listen+0x1c>
 800d51c:	4b06      	ldr	r3, [pc, #24]	; (800d538 <tcp_free_listen+0x2c>)
 800d51e:	22df      	movs	r2, #223	; 0xdf
 800d520:	4906      	ldr	r1, [pc, #24]	; (800d53c <tcp_free_listen+0x30>)
 800d522:	4807      	ldr	r0, [pc, #28]	; (800d540 <tcp_free_listen+0x34>)
 800d524:	f008 fe54 	bl	80161d0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d528:	6879      	ldr	r1, [r7, #4]
 800d52a:	2002      	movs	r0, #2
 800d52c:	f7fe fe1a 	bl	800c164 <memp_free>
}
 800d530:	bf00      	nop
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}
 800d538:	08017d54 	.word	0x08017d54
 800d53c:	08017dc0 	.word	0x08017dc0
 800d540:	08017d98 	.word	0x08017d98

0800d544 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d548:	f000 fea2 	bl	800e290 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d54c:	4b07      	ldr	r3, [pc, #28]	; (800d56c <tcp_tmr+0x28>)
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	3301      	adds	r3, #1
 800d552:	b2da      	uxtb	r2, r3
 800d554:	4b05      	ldr	r3, [pc, #20]	; (800d56c <tcp_tmr+0x28>)
 800d556:	701a      	strb	r2, [r3, #0]
 800d558:	4b04      	ldr	r3, [pc, #16]	; (800d56c <tcp_tmr+0x28>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	f003 0301 	and.w	r3, r3, #1
 800d560:	2b00      	cmp	r3, #0
 800d562:	d001      	beq.n	800d568 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d564:	f000 fb54 	bl	800dc10 <tcp_slowtmr>
  }
}
 800d568:	bf00      	nop
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	20008f35 	.word	0x20008f35

0800d570 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d105      	bne.n	800d58c <tcp_remove_listener+0x1c>
 800d580:	4b0d      	ldr	r3, [pc, #52]	; (800d5b8 <tcp_remove_listener+0x48>)
 800d582:	22ff      	movs	r2, #255	; 0xff
 800d584:	490d      	ldr	r1, [pc, #52]	; (800d5bc <tcp_remove_listener+0x4c>)
 800d586:	480e      	ldr	r0, [pc, #56]	; (800d5c0 <tcp_remove_listener+0x50>)
 800d588:	f008 fe22 	bl	80161d0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	60fb      	str	r3, [r7, #12]
 800d590:	e00a      	b.n	800d5a8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d596:	683a      	ldr	r2, [r7, #0]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d102      	bne.n	800d5a2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	68db      	ldr	r3, [r3, #12]
 800d5a6:	60fb      	str	r3, [r7, #12]
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d1f1      	bne.n	800d592 <tcp_remove_listener+0x22>
    }
  }
}
 800d5ae:	bf00      	nop
 800d5b0:	bf00      	nop
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	08017d54 	.word	0x08017d54
 800d5bc:	08017ddc 	.word	0x08017ddc
 800d5c0:	08017d98 	.word	0x08017d98

0800d5c4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b084      	sub	sp, #16
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d106      	bne.n	800d5e0 <tcp_listen_closed+0x1c>
 800d5d2:	4b14      	ldr	r3, [pc, #80]	; (800d624 <tcp_listen_closed+0x60>)
 800d5d4:	f240 1211 	movw	r2, #273	; 0x111
 800d5d8:	4913      	ldr	r1, [pc, #76]	; (800d628 <tcp_listen_closed+0x64>)
 800d5da:	4814      	ldr	r0, [pc, #80]	; (800d62c <tcp_listen_closed+0x68>)
 800d5dc:	f008 fdf8 	bl	80161d0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	7d1b      	ldrb	r3, [r3, #20]
 800d5e4:	2b01      	cmp	r3, #1
 800d5e6:	d006      	beq.n	800d5f6 <tcp_listen_closed+0x32>
 800d5e8:	4b0e      	ldr	r3, [pc, #56]	; (800d624 <tcp_listen_closed+0x60>)
 800d5ea:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d5ee:	4910      	ldr	r1, [pc, #64]	; (800d630 <tcp_listen_closed+0x6c>)
 800d5f0:	480e      	ldr	r0, [pc, #56]	; (800d62c <tcp_listen_closed+0x68>)
 800d5f2:	f008 fded 	bl	80161d0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	60fb      	str	r3, [r7, #12]
 800d5fa:	e00b      	b.n	800d614 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d5fc:	4a0d      	ldr	r2, [pc, #52]	; (800d634 <tcp_listen_closed+0x70>)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	6879      	ldr	r1, [r7, #4]
 800d608:	4618      	mov	r0, r3
 800d60a:	f7ff ffb1 	bl	800d570 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	3301      	adds	r3, #1
 800d612:	60fb      	str	r3, [r7, #12]
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2b03      	cmp	r3, #3
 800d618:	d9f0      	bls.n	800d5fc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d61a:	bf00      	nop
 800d61c:	bf00      	nop
 800d61e:	3710      	adds	r7, #16
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}
 800d624:	08017d54 	.word	0x08017d54
 800d628:	08017e04 	.word	0x08017e04
 800d62c:	08017d98 	.word	0x08017d98
 800d630:	08017e10 	.word	0x08017e10
 800d634:	08019d60 	.word	0x08019d60

0800d638 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d638:	b5b0      	push	{r4, r5, r7, lr}
 800d63a:	b088      	sub	sp, #32
 800d63c:	af04      	add	r7, sp, #16
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	460b      	mov	r3, r1
 800d642:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d106      	bne.n	800d658 <tcp_close_shutdown+0x20>
 800d64a:	4b63      	ldr	r3, [pc, #396]	; (800d7d8 <tcp_close_shutdown+0x1a0>)
 800d64c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d650:	4962      	ldr	r1, [pc, #392]	; (800d7dc <tcp_close_shutdown+0x1a4>)
 800d652:	4863      	ldr	r0, [pc, #396]	; (800d7e0 <tcp_close_shutdown+0x1a8>)
 800d654:	f008 fdbc 	bl	80161d0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d658:	78fb      	ldrb	r3, [r7, #3]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d066      	beq.n	800d72c <tcp_close_shutdown+0xf4>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	7d1b      	ldrb	r3, [r3, #20]
 800d662:	2b04      	cmp	r3, #4
 800d664:	d003      	beq.n	800d66e <tcp_close_shutdown+0x36>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	7d1b      	ldrb	r3, [r3, #20]
 800d66a:	2b07      	cmp	r3, #7
 800d66c:	d15e      	bne.n	800d72c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d672:	2b00      	cmp	r3, #0
 800d674:	d104      	bne.n	800d680 <tcp_close_shutdown+0x48>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d67a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d67e:	d055      	beq.n	800d72c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	8b5b      	ldrh	r3, [r3, #26]
 800d684:	f003 0310 	and.w	r3, r3, #16
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d106      	bne.n	800d69a <tcp_close_shutdown+0x62>
 800d68c:	4b52      	ldr	r3, [pc, #328]	; (800d7d8 <tcp_close_shutdown+0x1a0>)
 800d68e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d692:	4954      	ldr	r1, [pc, #336]	; (800d7e4 <tcp_close_shutdown+0x1ac>)
 800d694:	4852      	ldr	r0, [pc, #328]	; (800d7e0 <tcp_close_shutdown+0x1a8>)
 800d696:	f008 fd9b 	bl	80161d0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d6a2:	687d      	ldr	r5, [r7, #4]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	3304      	adds	r3, #4
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	8ad2      	ldrh	r2, [r2, #22]
 800d6ac:	6879      	ldr	r1, [r7, #4]
 800d6ae:	8b09      	ldrh	r1, [r1, #24]
 800d6b0:	9102      	str	r1, [sp, #8]
 800d6b2:	9201      	str	r2, [sp, #4]
 800d6b4:	9300      	str	r3, [sp, #0]
 800d6b6:	462b      	mov	r3, r5
 800d6b8:	4622      	mov	r2, r4
 800d6ba:	4601      	mov	r1, r0
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f004 fe91 	bl	80123e4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f001 f8c6 	bl	800e854 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d6c8:	4b47      	ldr	r3, [pc, #284]	; (800d7e8 <tcp_close_shutdown+0x1b0>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	687a      	ldr	r2, [r7, #4]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d105      	bne.n	800d6de <tcp_close_shutdown+0xa6>
 800d6d2:	4b45      	ldr	r3, [pc, #276]	; (800d7e8 <tcp_close_shutdown+0x1b0>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	4a43      	ldr	r2, [pc, #268]	; (800d7e8 <tcp_close_shutdown+0x1b0>)
 800d6da:	6013      	str	r3, [r2, #0]
 800d6dc:	e013      	b.n	800d706 <tcp_close_shutdown+0xce>
 800d6de:	4b42      	ldr	r3, [pc, #264]	; (800d7e8 <tcp_close_shutdown+0x1b0>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	60fb      	str	r3, [r7, #12]
 800d6e4:	e00c      	b.n	800d700 <tcp_close_shutdown+0xc8>
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d104      	bne.n	800d6fa <tcp_close_shutdown+0xc2>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	68da      	ldr	r2, [r3, #12]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	60da      	str	r2, [r3, #12]
 800d6f8:	e005      	b.n	800d706 <tcp_close_shutdown+0xce>
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	60fb      	str	r3, [r7, #12]
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1ef      	bne.n	800d6e6 <tcp_close_shutdown+0xae>
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2200      	movs	r2, #0
 800d70a:	60da      	str	r2, [r3, #12]
 800d70c:	4b37      	ldr	r3, [pc, #220]	; (800d7ec <tcp_close_shutdown+0x1b4>)
 800d70e:	2201      	movs	r2, #1
 800d710:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d712:	4b37      	ldr	r3, [pc, #220]	; (800d7f0 <tcp_close_shutdown+0x1b8>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d102      	bne.n	800d722 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d71c:	f003 fd5e 	bl	80111dc <tcp_trigger_input_pcb_close>
 800d720:	e002      	b.n	800d728 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d722:	6878      	ldr	r0, [r7, #4]
 800d724:	f7ff fed6 	bl	800d4d4 <tcp_free>
      }
      return ERR_OK;
 800d728:	2300      	movs	r3, #0
 800d72a:	e050      	b.n	800d7ce <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	7d1b      	ldrb	r3, [r3, #20]
 800d730:	2b02      	cmp	r3, #2
 800d732:	d03b      	beq.n	800d7ac <tcp_close_shutdown+0x174>
 800d734:	2b02      	cmp	r3, #2
 800d736:	dc44      	bgt.n	800d7c2 <tcp_close_shutdown+0x18a>
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d002      	beq.n	800d742 <tcp_close_shutdown+0x10a>
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d02a      	beq.n	800d796 <tcp_close_shutdown+0x15e>
 800d740:	e03f      	b.n	800d7c2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	8adb      	ldrh	r3, [r3, #22]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d021      	beq.n	800d78e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d74a:	4b2a      	ldr	r3, [pc, #168]	; (800d7f4 <tcp_close_shutdown+0x1bc>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	687a      	ldr	r2, [r7, #4]
 800d750:	429a      	cmp	r2, r3
 800d752:	d105      	bne.n	800d760 <tcp_close_shutdown+0x128>
 800d754:	4b27      	ldr	r3, [pc, #156]	; (800d7f4 <tcp_close_shutdown+0x1bc>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	4a26      	ldr	r2, [pc, #152]	; (800d7f4 <tcp_close_shutdown+0x1bc>)
 800d75c:	6013      	str	r3, [r2, #0]
 800d75e:	e013      	b.n	800d788 <tcp_close_shutdown+0x150>
 800d760:	4b24      	ldr	r3, [pc, #144]	; (800d7f4 <tcp_close_shutdown+0x1bc>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	60bb      	str	r3, [r7, #8]
 800d766:	e00c      	b.n	800d782 <tcp_close_shutdown+0x14a>
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	687a      	ldr	r2, [r7, #4]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d104      	bne.n	800d77c <tcp_close_shutdown+0x144>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	68da      	ldr	r2, [r3, #12]
 800d776:	68bb      	ldr	r3, [r7, #8]
 800d778:	60da      	str	r2, [r3, #12]
 800d77a:	e005      	b.n	800d788 <tcp_close_shutdown+0x150>
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	60bb      	str	r3, [r7, #8]
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d1ef      	bne.n	800d768 <tcp_close_shutdown+0x130>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f7ff fea0 	bl	800d4d4 <tcp_free>
      break;
 800d794:	e01a      	b.n	800d7cc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7ff ff14 	bl	800d5c4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d79c:	6879      	ldr	r1, [r7, #4]
 800d79e:	4816      	ldr	r0, [pc, #88]	; (800d7f8 <tcp_close_shutdown+0x1c0>)
 800d7a0:	f001 f8a8 	bl	800e8f4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f7ff feb1 	bl	800d50c <tcp_free_listen>
      break;
 800d7aa:	e00f      	b.n	800d7cc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d7ac:	6879      	ldr	r1, [r7, #4]
 800d7ae:	480e      	ldr	r0, [pc, #56]	; (800d7e8 <tcp_close_shutdown+0x1b0>)
 800d7b0:	f001 f8a0 	bl	800e8f4 <tcp_pcb_remove>
 800d7b4:	4b0d      	ldr	r3, [pc, #52]	; (800d7ec <tcp_close_shutdown+0x1b4>)
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f7ff fe8a 	bl	800d4d4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d7c0:	e004      	b.n	800d7cc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f000 f81a 	bl	800d7fc <tcp_close_shutdown_fin>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	e000      	b.n	800d7ce <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bdb0      	pop	{r4, r5, r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	08017d54 	.word	0x08017d54
 800d7dc:	08017e28 	.word	0x08017e28
 800d7e0:	08017d98 	.word	0x08017d98
 800d7e4:	08017e48 	.word	0x08017e48
 800d7e8:	20008f2c 	.word	0x20008f2c
 800d7ec:	20008f34 	.word	0x20008f34
 800d7f0:	20008f6c 	.word	0x20008f6c
 800d7f4:	20008f24 	.word	0x20008f24
 800d7f8:	20008f28 	.word	0x20008f28

0800d7fc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d106      	bne.n	800d818 <tcp_close_shutdown_fin+0x1c>
 800d80a:	4b2e      	ldr	r3, [pc, #184]	; (800d8c4 <tcp_close_shutdown_fin+0xc8>)
 800d80c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800d810:	492d      	ldr	r1, [pc, #180]	; (800d8c8 <tcp_close_shutdown_fin+0xcc>)
 800d812:	482e      	ldr	r0, [pc, #184]	; (800d8cc <tcp_close_shutdown_fin+0xd0>)
 800d814:	f008 fcdc 	bl	80161d0 <iprintf>

  switch (pcb->state) {
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	7d1b      	ldrb	r3, [r3, #20]
 800d81c:	2b07      	cmp	r3, #7
 800d81e:	d020      	beq.n	800d862 <tcp_close_shutdown_fin+0x66>
 800d820:	2b07      	cmp	r3, #7
 800d822:	dc2b      	bgt.n	800d87c <tcp_close_shutdown_fin+0x80>
 800d824:	2b03      	cmp	r3, #3
 800d826:	d002      	beq.n	800d82e <tcp_close_shutdown_fin+0x32>
 800d828:	2b04      	cmp	r3, #4
 800d82a:	d00d      	beq.n	800d848 <tcp_close_shutdown_fin+0x4c>
 800d82c:	e026      	b.n	800d87c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f003 fee6 	bl	8011600 <tcp_send_fin>
 800d834:	4603      	mov	r3, r0
 800d836:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d11f      	bne.n	800d880 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	2205      	movs	r2, #5
 800d844:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d846:	e01b      	b.n	800d880 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f003 fed9 	bl	8011600 <tcp_send_fin>
 800d84e:	4603      	mov	r3, r0
 800d850:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d114      	bne.n	800d884 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2205      	movs	r2, #5
 800d85e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d860:	e010      	b.n	800d884 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	f003 fecc 	bl	8011600 <tcp_send_fin>
 800d868:	4603      	mov	r3, r0
 800d86a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d86c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d109      	bne.n	800d888 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2209      	movs	r2, #9
 800d878:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d87a:	e005      	b.n	800d888 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	e01c      	b.n	800d8ba <tcp_close_shutdown_fin+0xbe>
      break;
 800d880:	bf00      	nop
 800d882:	e002      	b.n	800d88a <tcp_close_shutdown_fin+0x8e>
      break;
 800d884:	bf00      	nop
 800d886:	e000      	b.n	800d88a <tcp_close_shutdown_fin+0x8e>
      break;
 800d888:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d88a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d103      	bne.n	800d89a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f003 fff2 	bl	801187c <tcp_output>
 800d898:	e00d      	b.n	800d8b6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d89a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d89e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8a2:	d108      	bne.n	800d8b6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	8b5b      	ldrh	r3, [r3, #26]
 800d8a8:	f043 0308 	orr.w	r3, r3, #8
 800d8ac:	b29a      	uxth	r2, r3
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	e001      	b.n	800d8ba <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	3710      	adds	r7, #16
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	08017d54 	.word	0x08017d54
 800d8c8:	08017e04 	.word	0x08017e04
 800d8cc:	08017d98 	.word	0x08017d98

0800d8d0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b082      	sub	sp, #8
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d109      	bne.n	800d8f2 <tcp_close+0x22>
 800d8de:	4b0f      	ldr	r3, [pc, #60]	; (800d91c <tcp_close+0x4c>)
 800d8e0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800d8e4:	490e      	ldr	r1, [pc, #56]	; (800d920 <tcp_close+0x50>)
 800d8e6:	480f      	ldr	r0, [pc, #60]	; (800d924 <tcp_close+0x54>)
 800d8e8:	f008 fc72 	bl	80161d0 <iprintf>
 800d8ec:	f06f 030f 	mvn.w	r3, #15
 800d8f0:	e00f      	b.n	800d912 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	7d1b      	ldrb	r3, [r3, #20]
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d006      	beq.n	800d908 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	8b5b      	ldrh	r3, [r3, #26]
 800d8fe:	f043 0310 	orr.w	r3, r3, #16
 800d902:	b29a      	uxth	r2, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d908:	2101      	movs	r1, #1
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f7ff fe94 	bl	800d638 <tcp_close_shutdown>
 800d910:	4603      	mov	r3, r0
}
 800d912:	4618      	mov	r0, r3
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	08017d54 	.word	0x08017d54
 800d920:	08017e64 	.word	0x08017e64
 800d924:	08017d98 	.word	0x08017d98

0800d928 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b08e      	sub	sp, #56	; 0x38
 800d92c:	af04      	add	r7, sp, #16
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d107      	bne.n	800d948 <tcp_abandon+0x20>
 800d938:	4b52      	ldr	r3, [pc, #328]	; (800da84 <tcp_abandon+0x15c>)
 800d93a:	f240 223d 	movw	r2, #573	; 0x23d
 800d93e:	4952      	ldr	r1, [pc, #328]	; (800da88 <tcp_abandon+0x160>)
 800d940:	4852      	ldr	r0, [pc, #328]	; (800da8c <tcp_abandon+0x164>)
 800d942:	f008 fc45 	bl	80161d0 <iprintf>
 800d946:	e099      	b.n	800da7c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	7d1b      	ldrb	r3, [r3, #20]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d106      	bne.n	800d95e <tcp_abandon+0x36>
 800d950:	4b4c      	ldr	r3, [pc, #304]	; (800da84 <tcp_abandon+0x15c>)
 800d952:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d956:	494e      	ldr	r1, [pc, #312]	; (800da90 <tcp_abandon+0x168>)
 800d958:	484c      	ldr	r0, [pc, #304]	; (800da8c <tcp_abandon+0x164>)
 800d95a:	f008 fc39 	bl	80161d0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	7d1b      	ldrb	r3, [r3, #20]
 800d962:	2b0a      	cmp	r3, #10
 800d964:	d107      	bne.n	800d976 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d966:	6879      	ldr	r1, [r7, #4]
 800d968:	484a      	ldr	r0, [pc, #296]	; (800da94 <tcp_abandon+0x16c>)
 800d96a:	f000 ffc3 	bl	800e8f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7ff fdb0 	bl	800d4d4 <tcp_free>
 800d974:	e082      	b.n	800da7c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800d976:	2300      	movs	r3, #0
 800d978:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800d97a:	2300      	movs	r3, #0
 800d97c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d982:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d988:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d990:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	691b      	ldr	r3, [r3, #16]
 800d996:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	7d1b      	ldrb	r3, [r3, #20]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d126      	bne.n	800d9ee <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	8adb      	ldrh	r3, [r3, #22]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d02e      	beq.n	800da06 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d9a8:	4b3b      	ldr	r3, [pc, #236]	; (800da98 <tcp_abandon+0x170>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d105      	bne.n	800d9be <tcp_abandon+0x96>
 800d9b2:	4b39      	ldr	r3, [pc, #228]	; (800da98 <tcp_abandon+0x170>)
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	68db      	ldr	r3, [r3, #12]
 800d9b8:	4a37      	ldr	r2, [pc, #220]	; (800da98 <tcp_abandon+0x170>)
 800d9ba:	6013      	str	r3, [r2, #0]
 800d9bc:	e013      	b.n	800d9e6 <tcp_abandon+0xbe>
 800d9be:	4b36      	ldr	r3, [pc, #216]	; (800da98 <tcp_abandon+0x170>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	61fb      	str	r3, [r7, #28]
 800d9c4:	e00c      	b.n	800d9e0 <tcp_abandon+0xb8>
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d104      	bne.n	800d9da <tcp_abandon+0xb2>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	68da      	ldr	r2, [r3, #12]
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	60da      	str	r2, [r3, #12]
 800d9d8:	e005      	b.n	800d9e6 <tcp_abandon+0xbe>
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	61fb      	str	r3, [r7, #28]
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d1ef      	bne.n	800d9c6 <tcp_abandon+0x9e>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	60da      	str	r2, [r3, #12]
 800d9ec:	e00b      	b.n	800da06 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	8adb      	ldrh	r3, [r3, #22]
 800d9f6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d9f8:	6879      	ldr	r1, [r7, #4]
 800d9fa:	4828      	ldr	r0, [pc, #160]	; (800da9c <tcp_abandon+0x174>)
 800d9fc:	f000 ff7a 	bl	800e8f4 <tcp_pcb_remove>
 800da00:	4b27      	ldr	r3, [pc, #156]	; (800daa0 <tcp_abandon+0x178>)
 800da02:	2201      	movs	r2, #1
 800da04:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d004      	beq.n	800da18 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da12:	4618      	mov	r0, r3
 800da14:	f000 fd1c 	bl	800e450 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d004      	beq.n	800da2a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da24:	4618      	mov	r0, r3
 800da26:	f000 fd13 	bl	800e450 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d004      	beq.n	800da3c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da36:	4618      	mov	r0, r3
 800da38:	f000 fd0a 	bl	800e450 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00e      	beq.n	800da60 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800da42:	6879      	ldr	r1, [r7, #4]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	3304      	adds	r3, #4
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	8b12      	ldrh	r2, [r2, #24]
 800da4c:	9202      	str	r2, [sp, #8]
 800da4e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800da50:	9201      	str	r2, [sp, #4]
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	460b      	mov	r3, r1
 800da56:	697a      	ldr	r2, [r7, #20]
 800da58:	69b9      	ldr	r1, [r7, #24]
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f004 fcc2 	bl	80123e4 <tcp_rst>
    }
    last_state = pcb->state;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	7d1b      	ldrb	r3, [r3, #20]
 800da64:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f7ff fd34 	bl	800d4d4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d004      	beq.n	800da7c <tcp_abandon+0x154>
 800da72:	693b      	ldr	r3, [r7, #16]
 800da74:	f06f 010c 	mvn.w	r1, #12
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	4798      	blx	r3
  }
}
 800da7c:	3728      	adds	r7, #40	; 0x28
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
 800da82:	bf00      	nop
 800da84:	08017d54 	.word	0x08017d54
 800da88:	08017e98 	.word	0x08017e98
 800da8c:	08017d98 	.word	0x08017d98
 800da90:	08017eb4 	.word	0x08017eb4
 800da94:	20008f30 	.word	0x20008f30
 800da98:	20008f24 	.word	0x20008f24
 800da9c:	20008f2c 	.word	0x20008f2c
 800daa0:	20008f34 	.word	0x20008f34

0800daa4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b082      	sub	sp, #8
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800daac:	2101      	movs	r1, #1
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7ff ff3a 	bl	800d928 <tcp_abandon>
}
 800dab4:	bf00      	nop
 800dab6:	3708      	adds	r7, #8
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d106      	bne.n	800dad8 <tcp_update_rcv_ann_wnd+0x1c>
 800daca:	4b25      	ldr	r3, [pc, #148]	; (800db60 <tcp_update_rcv_ann_wnd+0xa4>)
 800dacc:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dad0:	4924      	ldr	r1, [pc, #144]	; (800db64 <tcp_update_rcv_ann_wnd+0xa8>)
 800dad2:	4825      	ldr	r0, [pc, #148]	; (800db68 <tcp_update_rcv_ann_wnd+0xac>)
 800dad4:	f008 fb7c 	bl	80161d0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dae0:	4413      	add	r3, r2
 800dae2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800daec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800daf0:	bf28      	it	cs
 800daf2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800daf6:	b292      	uxth	r2, r2
 800daf8:	4413      	add	r3, r2
 800dafa:	68fa      	ldr	r2, [r7, #12]
 800dafc:	1ad3      	subs	r3, r2, r3
 800dafe:	2b00      	cmp	r3, #0
 800db00:	db08      	blt.n	800db14 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	1ad3      	subs	r3, r2, r3
 800db12:	e020      	b.n	800db56 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db1c:	1ad3      	subs	r3, r2, r3
 800db1e:	2b00      	cmp	r3, #0
 800db20:	dd03      	ble.n	800db2a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	855a      	strh	r2, [r3, #42]	; 0x2a
 800db28:	e014      	b.n	800db54 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800db36:	68bb      	ldr	r3, [r7, #8]
 800db38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db3c:	d306      	bcc.n	800db4c <tcp_update_rcv_ann_wnd+0x90>
 800db3e:	4b08      	ldr	r3, [pc, #32]	; (800db60 <tcp_update_rcv_ann_wnd+0xa4>)
 800db40:	f240 32b6 	movw	r2, #950	; 0x3b6
 800db44:	4909      	ldr	r1, [pc, #36]	; (800db6c <tcp_update_rcv_ann_wnd+0xb0>)
 800db46:	4808      	ldr	r0, [pc, #32]	; (800db68 <tcp_update_rcv_ann_wnd+0xac>)
 800db48:	f008 fb42 	bl	80161d0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	b29a      	uxth	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800db54:	2300      	movs	r3, #0
  }
}
 800db56:	4618      	mov	r0, r3
 800db58:	3710      	adds	r7, #16
 800db5a:	46bd      	mov	sp, r7
 800db5c:	bd80      	pop	{r7, pc}
 800db5e:	bf00      	nop
 800db60:	08017d54 	.word	0x08017d54
 800db64:	08017fb0 	.word	0x08017fb0
 800db68:	08017d98 	.word	0x08017d98
 800db6c:	08017fd4 	.word	0x08017fd4

0800db70 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	460b      	mov	r3, r1
 800db7a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d107      	bne.n	800db92 <tcp_recved+0x22>
 800db82:	4b1f      	ldr	r3, [pc, #124]	; (800dc00 <tcp_recved+0x90>)
 800db84:	f240 32cf 	movw	r2, #975	; 0x3cf
 800db88:	491e      	ldr	r1, [pc, #120]	; (800dc04 <tcp_recved+0x94>)
 800db8a:	481f      	ldr	r0, [pc, #124]	; (800dc08 <tcp_recved+0x98>)
 800db8c:	f008 fb20 	bl	80161d0 <iprintf>
 800db90:	e032      	b.n	800dbf8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	7d1b      	ldrb	r3, [r3, #20]
 800db96:	2b01      	cmp	r3, #1
 800db98:	d106      	bne.n	800dba8 <tcp_recved+0x38>
 800db9a:	4b19      	ldr	r3, [pc, #100]	; (800dc00 <tcp_recved+0x90>)
 800db9c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800dba0:	491a      	ldr	r1, [pc, #104]	; (800dc0c <tcp_recved+0x9c>)
 800dba2:	4819      	ldr	r0, [pc, #100]	; (800dc08 <tcp_recved+0x98>)
 800dba4:	f008 fb14 	bl	80161d0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dbac:	887b      	ldrh	r3, [r7, #2]
 800dbae:	4413      	add	r3, r2
 800dbb0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dbb2:	89fb      	ldrh	r3, [r7, #14]
 800dbb4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dbb8:	d804      	bhi.n	800dbc4 <tcp_recved+0x54>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbbe:	89fa      	ldrh	r2, [r7, #14]
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d204      	bcs.n	800dbce <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dbca:	851a      	strh	r2, [r3, #40]	; 0x28
 800dbcc:	e002      	b.n	800dbd4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	89fa      	ldrh	r2, [r7, #14]
 800dbd2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f7ff ff71 	bl	800dabc <tcp_update_rcv_ann_wnd>
 800dbda:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800dbe2:	d309      	bcc.n	800dbf8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	8b5b      	ldrh	r3, [r3, #26]
 800dbe8:	f043 0302 	orr.w	r3, r3, #2
 800dbec:	b29a      	uxth	r2, r3
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f003 fe42 	bl	801187c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	08017d54 	.word	0x08017d54
 800dc04:	08017ff0 	.word	0x08017ff0
 800dc08:	08017d98 	.word	0x08017d98
 800dc0c:	08018008 	.word	0x08018008

0800dc10 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dc10:	b5b0      	push	{r4, r5, r7, lr}
 800dc12:	b090      	sub	sp, #64	; 0x40
 800dc14:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dc16:	2300      	movs	r3, #0
 800dc18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800dc1c:	4b94      	ldr	r3, [pc, #592]	; (800de70 <tcp_slowtmr+0x260>)
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	3301      	adds	r3, #1
 800dc22:	4a93      	ldr	r2, [pc, #588]	; (800de70 <tcp_slowtmr+0x260>)
 800dc24:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dc26:	4b93      	ldr	r3, [pc, #588]	; (800de74 <tcp_slowtmr+0x264>)
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	b2da      	uxtb	r2, r3
 800dc2e:	4b91      	ldr	r3, [pc, #580]	; (800de74 <tcp_slowtmr+0x264>)
 800dc30:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800dc32:	2300      	movs	r3, #0
 800dc34:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800dc36:	4b90      	ldr	r3, [pc, #576]	; (800de78 <tcp_slowtmr+0x268>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800dc3c:	e29d      	b.n	800e17a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc40:	7d1b      	ldrb	r3, [r3, #20]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d106      	bne.n	800dc54 <tcp_slowtmr+0x44>
 800dc46:	4b8d      	ldr	r3, [pc, #564]	; (800de7c <tcp_slowtmr+0x26c>)
 800dc48:	f240 42be 	movw	r2, #1214	; 0x4be
 800dc4c:	498c      	ldr	r1, [pc, #560]	; (800de80 <tcp_slowtmr+0x270>)
 800dc4e:	488d      	ldr	r0, [pc, #564]	; (800de84 <tcp_slowtmr+0x274>)
 800dc50:	f008 fabe 	bl	80161d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc56:	7d1b      	ldrb	r3, [r3, #20]
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d106      	bne.n	800dc6a <tcp_slowtmr+0x5a>
 800dc5c:	4b87      	ldr	r3, [pc, #540]	; (800de7c <tcp_slowtmr+0x26c>)
 800dc5e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800dc62:	4989      	ldr	r1, [pc, #548]	; (800de88 <tcp_slowtmr+0x278>)
 800dc64:	4887      	ldr	r0, [pc, #540]	; (800de84 <tcp_slowtmr+0x274>)
 800dc66:	f008 fab3 	bl	80161d0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6c:	7d1b      	ldrb	r3, [r3, #20]
 800dc6e:	2b0a      	cmp	r3, #10
 800dc70:	d106      	bne.n	800dc80 <tcp_slowtmr+0x70>
 800dc72:	4b82      	ldr	r3, [pc, #520]	; (800de7c <tcp_slowtmr+0x26c>)
 800dc74:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800dc78:	4984      	ldr	r1, [pc, #528]	; (800de8c <tcp_slowtmr+0x27c>)
 800dc7a:	4882      	ldr	r0, [pc, #520]	; (800de84 <tcp_slowtmr+0x274>)
 800dc7c:	f008 faa8 	bl	80161d0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc82:	7f9a      	ldrb	r2, [r3, #30]
 800dc84:	4b7b      	ldr	r3, [pc, #492]	; (800de74 <tcp_slowtmr+0x264>)
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	429a      	cmp	r2, r3
 800dc8a:	d105      	bne.n	800dc98 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800dc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800dc96:	e270      	b.n	800e17a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800dc98:	4b76      	ldr	r3, [pc, #472]	; (800de74 <tcp_slowtmr+0x264>)
 800dc9a:	781a      	ldrb	r2, [r3, #0]
 800dc9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc9e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800dca0:	2300      	movs	r3, #0
 800dca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcae:	7d1b      	ldrb	r3, [r3, #20]
 800dcb0:	2b02      	cmp	r3, #2
 800dcb2:	d10a      	bne.n	800dcca <tcp_slowtmr+0xba>
 800dcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcba:	2b05      	cmp	r3, #5
 800dcbc:	d905      	bls.n	800dcca <tcp_slowtmr+0xba>
      ++pcb_remove;
 800dcbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcc8:	e11e      	b.n	800df08 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dcca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dccc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcd0:	2b0b      	cmp	r3, #11
 800dcd2:	d905      	bls.n	800dce0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800dcd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcd8:	3301      	adds	r3, #1
 800dcda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcde:	e113      	b.n	800df08 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800dce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dce2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d075      	beq.n	800ddd6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d006      	beq.n	800dd00 <tcp_slowtmr+0xf0>
 800dcf2:	4b62      	ldr	r3, [pc, #392]	; (800de7c <tcp_slowtmr+0x26c>)
 800dcf4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800dcf8:	4965      	ldr	r1, [pc, #404]	; (800de90 <tcp_slowtmr+0x280>)
 800dcfa:	4862      	ldr	r0, [pc, #392]	; (800de84 <tcp_slowtmr+0x274>)
 800dcfc:	f008 fa68 	bl	80161d0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d106      	bne.n	800dd16 <tcp_slowtmr+0x106>
 800dd08:	4b5c      	ldr	r3, [pc, #368]	; (800de7c <tcp_slowtmr+0x26c>)
 800dd0a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800dd0e:	4961      	ldr	r1, [pc, #388]	; (800de94 <tcp_slowtmr+0x284>)
 800dd10:	485c      	ldr	r0, [pc, #368]	; (800de84 <tcp_slowtmr+0x274>)
 800dd12:	f008 fa5d 	bl	80161d0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd18:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800dd1c:	2b0b      	cmp	r3, #11
 800dd1e:	d905      	bls.n	800dd2c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800dd20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd24:	3301      	adds	r3, #1
 800dd26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd2a:	e0ed      	b.n	800df08 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800dd32:	3b01      	subs	r3, #1
 800dd34:	4a58      	ldr	r2, [pc, #352]	; (800de98 <tcp_slowtmr+0x288>)
 800dd36:	5cd3      	ldrb	r3, [r2, r3]
 800dd38:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dd40:	7c7a      	ldrb	r2, [r7, #17]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d907      	bls.n	800dd56 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800dd46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd48:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	b2da      	uxtb	r2, r3
 800dd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd52:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800dd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800dd5c:	7c7a      	ldrb	r2, [r7, #17]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	f200 80d2 	bhi.w	800df08 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800dd64:	2301      	movs	r3, #1
 800dd66:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800dd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d108      	bne.n	800dd84 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dd72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd74:	f004 fc2a 	bl	80125cc <tcp_zero_window_probe>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d014      	beq.n	800dda8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800dd7e:	2300      	movs	r3, #0
 800dd80:	623b      	str	r3, [r7, #32]
 800dd82:	e011      	b.n	800dda8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dd8a:	4619      	mov	r1, r3
 800dd8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd8e:	f003 faef 	bl	8011370 <tcp_split_unsent_seg>
 800dd92:	4603      	mov	r3, r0
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d107      	bne.n	800dda8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800dd98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dd9a:	f003 fd6f 	bl	801187c <tcp_output>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d101      	bne.n	800dda8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800dda4:	2300      	movs	r3, #0
 800dda6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800dda8:	6a3b      	ldr	r3, [r7, #32]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f000 80ac 	beq.w	800df08 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ddb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ddb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ddbe:	2b06      	cmp	r3, #6
 800ddc0:	f200 80a2 	bhi.w	800df08 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ddc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ddca:	3301      	adds	r3, #1
 800ddcc:	b2da      	uxtb	r2, r3
 800ddce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ddd4:	e098      	b.n	800df08 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ddd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	db0f      	blt.n	800de00 <tcp_slowtmr+0x1f0>
 800dde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800dde6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d008      	beq.n	800de00 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ddee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	b29b      	uxth	r3, r3
 800ddfa:	b21a      	sxth	r2, r3
 800ddfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddfe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800de00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de02:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800de06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de08:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800de0c:	429a      	cmp	r2, r3
 800de0e:	db7b      	blt.n	800df08 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800de10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800de12:	f004 f825 	bl	8011e60 <tcp_rexmit_rto_prepare>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d007      	beq.n	800de2c <tcp_slowtmr+0x21c>
 800de1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de20:	2b00      	cmp	r3, #0
 800de22:	d171      	bne.n	800df08 <tcp_slowtmr+0x2f8>
 800de24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d06d      	beq.n	800df08 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800de2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2e:	7d1b      	ldrb	r3, [r3, #20]
 800de30:	2b02      	cmp	r3, #2
 800de32:	d03a      	beq.n	800deaa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800de34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de3a:	2b0c      	cmp	r3, #12
 800de3c:	bf28      	it	cs
 800de3e:	230c      	movcs	r3, #12
 800de40:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800de42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800de48:	10db      	asrs	r3, r3, #3
 800de4a:	b21b      	sxth	r3, r3
 800de4c:	461a      	mov	r2, r3
 800de4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de50:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800de54:	4413      	add	r3, r2
 800de56:	7efa      	ldrb	r2, [r7, #27]
 800de58:	4910      	ldr	r1, [pc, #64]	; (800de9c <tcp_slowtmr+0x28c>)
 800de5a:	5c8a      	ldrb	r2, [r1, r2]
 800de5c:	4093      	lsls	r3, r2
 800de5e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800de66:	4293      	cmp	r3, r2
 800de68:	dc1a      	bgt.n	800dea0 <tcp_slowtmr+0x290>
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	b21a      	sxth	r2, r3
 800de6e:	e019      	b.n	800dea4 <tcp_slowtmr+0x294>
 800de70:	20008f20 	.word	0x20008f20
 800de74:	20008f36 	.word	0x20008f36
 800de78:	20008f2c 	.word	0x20008f2c
 800de7c:	08017d54 	.word	0x08017d54
 800de80:	08018098 	.word	0x08018098
 800de84:	08017d98 	.word	0x08017d98
 800de88:	080180c4 	.word	0x080180c4
 800de8c:	080180f0 	.word	0x080180f0
 800de90:	08018120 	.word	0x08018120
 800de94:	08018154 	.word	0x08018154
 800de98:	08019d58 	.word	0x08019d58
 800de9c:	08019d48 	.word	0x08019d48
 800dea0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800deaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deac:	2200      	movs	r2, #0
 800deae:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800deb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800deb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800debc:	4293      	cmp	r3, r2
 800debe:	bf28      	it	cs
 800dec0:	4613      	movcs	r3, r2
 800dec2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dec4:	8a7b      	ldrh	r3, [r7, #18]
 800dec6:	085b      	lsrs	r3, r3, #1
 800dec8:	b29a      	uxth	r2, r3
 800deca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800decc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ded0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ded6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ded8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800deda:	005b      	lsls	r3, r3, #1
 800dedc:	b29b      	uxth	r3, r3
 800dede:	429a      	cmp	r2, r3
 800dee0:	d206      	bcs.n	800def0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800dee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dee6:	005b      	lsls	r3, r3, #1
 800dee8:	b29a      	uxth	r2, r3
 800deea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800def0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800def4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800def6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800defa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defc:	2200      	movs	r2, #0
 800defe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800df02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df04:	f004 f81c 	bl	8011f40 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800df08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0a:	7d1b      	ldrb	r3, [r3, #20]
 800df0c:	2b06      	cmp	r3, #6
 800df0e:	d111      	bne.n	800df34 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800df10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df12:	8b5b      	ldrh	r3, [r3, #26]
 800df14:	f003 0310 	and.w	r3, r3, #16
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00b      	beq.n	800df34 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df1c:	4b9c      	ldr	r3, [pc, #624]	; (800e190 <tcp_slowtmr+0x580>)
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df22:	6a1b      	ldr	r3, [r3, #32]
 800df24:	1ad3      	subs	r3, r2, r3
 800df26:	2b28      	cmp	r3, #40	; 0x28
 800df28:	d904      	bls.n	800df34 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800df2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df2e:	3301      	adds	r3, #1
 800df30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800df34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df36:	7a5b      	ldrb	r3, [r3, #9]
 800df38:	f003 0308 	and.w	r3, r3, #8
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d04a      	beq.n	800dfd6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800df40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df42:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800df44:	2b04      	cmp	r3, #4
 800df46:	d003      	beq.n	800df50 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800df48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df4a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800df4c:	2b07      	cmp	r3, #7
 800df4e:	d142      	bne.n	800dfd6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df50:	4b8f      	ldr	r3, [pc, #572]	; (800e190 <tcp_slowtmr+0x580>)
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df56:	6a1b      	ldr	r3, [r3, #32]
 800df58:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800df5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df5c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800df60:	4b8c      	ldr	r3, [pc, #560]	; (800e194 <tcp_slowtmr+0x584>)
 800df62:	440b      	add	r3, r1
 800df64:	498c      	ldr	r1, [pc, #560]	; (800e198 <tcp_slowtmr+0x588>)
 800df66:	fba1 1303 	umull	r1, r3, r1, r3
 800df6a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d90a      	bls.n	800df86 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800df70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df74:	3301      	adds	r3, #1
 800df76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800df7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800df7e:	3301      	adds	r3, #1
 800df80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800df84:	e027      	b.n	800dfd6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df86:	4b82      	ldr	r3, [pc, #520]	; (800e190 <tcp_slowtmr+0x580>)
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8c:	6a1b      	ldr	r3, [r3, #32]
 800df8e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800df90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df92:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800df96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df98:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800df9c:	4618      	mov	r0, r3
 800df9e:	4b7f      	ldr	r3, [pc, #508]	; (800e19c <tcp_slowtmr+0x58c>)
 800dfa0:	fb00 f303 	mul.w	r3, r0, r3
 800dfa4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800dfa6:	497c      	ldr	r1, [pc, #496]	; (800e198 <tcp_slowtmr+0x588>)
 800dfa8:	fba1 1303 	umull	r1, r3, r1, r3
 800dfac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d911      	bls.n	800dfd6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800dfb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dfb4:	f004 faca 	bl	801254c <tcp_keepalive>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800dfbe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d107      	bne.n	800dfd6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800dfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800dfcc:	3301      	adds	r3, #1
 800dfce:	b2da      	uxtb	r2, r3
 800dfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800dfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d011      	beq.n	800e002 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800dfde:	4b6c      	ldr	r3, [pc, #432]	; (800e190 <tcp_slowtmr+0x580>)
 800dfe0:	681a      	ldr	r2, [r3, #0]
 800dfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfe4:	6a1b      	ldr	r3, [r3, #32]
 800dfe6:	1ad2      	subs	r2, r2, r3
 800dfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800dfee:	4619      	mov	r1, r3
 800dff0:	460b      	mov	r3, r1
 800dff2:	005b      	lsls	r3, r3, #1
 800dff4:	440b      	add	r3, r1
 800dff6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800dff8:	429a      	cmp	r2, r3
 800dffa:	d302      	bcc.n	800e002 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800dffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dffe:	f000 fddd 	bl	800ebbc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e004:	7d1b      	ldrb	r3, [r3, #20]
 800e006:	2b03      	cmp	r3, #3
 800e008:	d10b      	bne.n	800e022 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e00a:	4b61      	ldr	r3, [pc, #388]	; (800e190 <tcp_slowtmr+0x580>)
 800e00c:	681a      	ldr	r2, [r3, #0]
 800e00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e010:	6a1b      	ldr	r3, [r3, #32]
 800e012:	1ad3      	subs	r3, r2, r3
 800e014:	2b28      	cmp	r3, #40	; 0x28
 800e016:	d904      	bls.n	800e022 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e01c:	3301      	adds	r3, #1
 800e01e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e024:	7d1b      	ldrb	r3, [r3, #20]
 800e026:	2b09      	cmp	r3, #9
 800e028:	d10b      	bne.n	800e042 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e02a:	4b59      	ldr	r3, [pc, #356]	; (800e190 <tcp_slowtmr+0x580>)
 800e02c:	681a      	ldr	r2, [r3, #0]
 800e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e030:	6a1b      	ldr	r3, [r3, #32]
 800e032:	1ad3      	subs	r3, r2, r3
 800e034:	2bf0      	cmp	r3, #240	; 0xf0
 800e036:	d904      	bls.n	800e042 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e038:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e03c:	3301      	adds	r3, #1
 800e03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e042:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e046:	2b00      	cmp	r3, #0
 800e048:	d060      	beq.n	800e10c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e04c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e050:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e052:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e054:	f000 fbfe 	bl	800e854 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d010      	beq.n	800e080 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e05e:	4b50      	ldr	r3, [pc, #320]	; (800e1a0 <tcp_slowtmr+0x590>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e064:	429a      	cmp	r2, r3
 800e066:	d106      	bne.n	800e076 <tcp_slowtmr+0x466>
 800e068:	4b4e      	ldr	r3, [pc, #312]	; (800e1a4 <tcp_slowtmr+0x594>)
 800e06a:	f240 526d 	movw	r2, #1389	; 0x56d
 800e06e:	494e      	ldr	r1, [pc, #312]	; (800e1a8 <tcp_slowtmr+0x598>)
 800e070:	484e      	ldr	r0, [pc, #312]	; (800e1ac <tcp_slowtmr+0x59c>)
 800e072:	f008 f8ad 	bl	80161d0 <iprintf>
        prev->next = pcb->next;
 800e076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e078:	68da      	ldr	r2, [r3, #12]
 800e07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07c:	60da      	str	r2, [r3, #12]
 800e07e:	e00f      	b.n	800e0a0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e080:	4b47      	ldr	r3, [pc, #284]	; (800e1a0 <tcp_slowtmr+0x590>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e086:	429a      	cmp	r2, r3
 800e088:	d006      	beq.n	800e098 <tcp_slowtmr+0x488>
 800e08a:	4b46      	ldr	r3, [pc, #280]	; (800e1a4 <tcp_slowtmr+0x594>)
 800e08c:	f240 5271 	movw	r2, #1393	; 0x571
 800e090:	4947      	ldr	r1, [pc, #284]	; (800e1b0 <tcp_slowtmr+0x5a0>)
 800e092:	4846      	ldr	r0, [pc, #280]	; (800e1ac <tcp_slowtmr+0x59c>)
 800e094:	f008 f89c 	bl	80161d0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	4a40      	ldr	r2, [pc, #256]	; (800e1a0 <tcp_slowtmr+0x590>)
 800e09e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e0a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d013      	beq.n	800e0d0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0aa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e0b0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b4:	3304      	adds	r3, #4
 800e0b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0b8:	8ad2      	ldrh	r2, [r2, #22]
 800e0ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e0bc:	8b09      	ldrh	r1, [r1, #24]
 800e0be:	9102      	str	r1, [sp, #8]
 800e0c0:	9201      	str	r2, [sp, #4]
 800e0c2:	9300      	str	r3, [sp, #0]
 800e0c4:	462b      	mov	r3, r5
 800e0c6:	4622      	mov	r2, r4
 800e0c8:	4601      	mov	r1, r0
 800e0ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e0cc:	f004 f98a 	bl	80123e4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d2:	691b      	ldr	r3, [r3, #16]
 800e0d4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0d8:	7d1b      	ldrb	r3, [r3, #20]
 800e0da:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0de:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e0e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e2:	68db      	ldr	r3, [r3, #12]
 800e0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e0e6:	6838      	ldr	r0, [r7, #0]
 800e0e8:	f7ff f9f4 	bl	800d4d4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e0ec:	4b31      	ldr	r3, [pc, #196]	; (800e1b4 <tcp_slowtmr+0x5a4>)
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d004      	beq.n	800e102 <tcp_slowtmr+0x4f2>
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	f06f 010c 	mvn.w	r1, #12
 800e0fe:	68b8      	ldr	r0, [r7, #8]
 800e100:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e102:	4b2c      	ldr	r3, [pc, #176]	; (800e1b4 <tcp_slowtmr+0x5a4>)
 800e104:	781b      	ldrb	r3, [r3, #0]
 800e106:	2b00      	cmp	r3, #0
 800e108:	d037      	beq.n	800e17a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e10a:	e592      	b.n	800dc32 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e118:	7f1b      	ldrb	r3, [r3, #28]
 800e11a:	3301      	adds	r3, #1
 800e11c:	b2da      	uxtb	r2, r3
 800e11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e120:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e124:	7f1a      	ldrb	r2, [r3, #28]
 800e126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e128:	7f5b      	ldrb	r3, [r3, #29]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d325      	bcc.n	800e17a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e130:	2200      	movs	r2, #0
 800e132:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e134:	4b1f      	ldr	r3, [pc, #124]	; (800e1b4 <tcp_slowtmr+0x5a4>)
 800e136:	2200      	movs	r2, #0
 800e138:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e140:	2b00      	cmp	r3, #0
 800e142:	d00b      	beq.n	800e15c <tcp_slowtmr+0x54c>
 800e144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e146:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e14a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e14c:	6912      	ldr	r2, [r2, #16]
 800e14e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e150:	4610      	mov	r0, r2
 800e152:	4798      	blx	r3
 800e154:	4603      	mov	r3, r0
 800e156:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e15a:	e002      	b.n	800e162 <tcp_slowtmr+0x552>
 800e15c:	2300      	movs	r3, #0
 800e15e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e162:	4b14      	ldr	r3, [pc, #80]	; (800e1b4 <tcp_slowtmr+0x5a4>)
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d000      	beq.n	800e16c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e16a:	e562      	b.n	800dc32 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e16c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e170:	2b00      	cmp	r3, #0
 800e172:	d102      	bne.n	800e17a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e176:	f003 fb81 	bl	801187c <tcp_output>
  while (pcb != NULL) {
 800e17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f47f ad5e 	bne.w	800dc3e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e182:	2300      	movs	r3, #0
 800e184:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e186:	4b0c      	ldr	r3, [pc, #48]	; (800e1b8 <tcp_slowtmr+0x5a8>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e18c:	e069      	b.n	800e262 <tcp_slowtmr+0x652>
 800e18e:	bf00      	nop
 800e190:	20008f20 	.word	0x20008f20
 800e194:	000a4cb8 	.word	0x000a4cb8
 800e198:	10624dd3 	.word	0x10624dd3
 800e19c:	000124f8 	.word	0x000124f8
 800e1a0:	20008f2c 	.word	0x20008f2c
 800e1a4:	08017d54 	.word	0x08017d54
 800e1a8:	0801818c 	.word	0x0801818c
 800e1ac:	08017d98 	.word	0x08017d98
 800e1b0:	080181b8 	.word	0x080181b8
 800e1b4:	20008f34 	.word	0x20008f34
 800e1b8:	20008f30 	.word	0x20008f30
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1be:	7d1b      	ldrb	r3, [r3, #20]
 800e1c0:	2b0a      	cmp	r3, #10
 800e1c2:	d006      	beq.n	800e1d2 <tcp_slowtmr+0x5c2>
 800e1c4:	4b2b      	ldr	r3, [pc, #172]	; (800e274 <tcp_slowtmr+0x664>)
 800e1c6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e1ca:	492b      	ldr	r1, [pc, #172]	; (800e278 <tcp_slowtmr+0x668>)
 800e1cc:	482b      	ldr	r0, [pc, #172]	; (800e27c <tcp_slowtmr+0x66c>)
 800e1ce:	f007 ffff 	bl	80161d0 <iprintf>
    pcb_remove = 0;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e1d8:	4b29      	ldr	r3, [pc, #164]	; (800e280 <tcp_slowtmr+0x670>)
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1de:	6a1b      	ldr	r3, [r3, #32]
 800e1e0:	1ad3      	subs	r3, r2, r3
 800e1e2:	2bf0      	cmp	r3, #240	; 0xf0
 800e1e4:	d904      	bls.n	800e1f0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e1e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e1f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d02f      	beq.n	800e258 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e1f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1fa:	f000 fb2b 	bl	800e854 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e200:	2b00      	cmp	r3, #0
 800e202:	d010      	beq.n	800e226 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e204:	4b1f      	ldr	r3, [pc, #124]	; (800e284 <tcp_slowtmr+0x674>)
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e20a:	429a      	cmp	r2, r3
 800e20c:	d106      	bne.n	800e21c <tcp_slowtmr+0x60c>
 800e20e:	4b19      	ldr	r3, [pc, #100]	; (800e274 <tcp_slowtmr+0x664>)
 800e210:	f240 52af 	movw	r2, #1455	; 0x5af
 800e214:	491c      	ldr	r1, [pc, #112]	; (800e288 <tcp_slowtmr+0x678>)
 800e216:	4819      	ldr	r0, [pc, #100]	; (800e27c <tcp_slowtmr+0x66c>)
 800e218:	f007 ffda 	bl	80161d0 <iprintf>
        prev->next = pcb->next;
 800e21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e21e:	68da      	ldr	r2, [r3, #12]
 800e220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e222:	60da      	str	r2, [r3, #12]
 800e224:	e00f      	b.n	800e246 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e226:	4b17      	ldr	r3, [pc, #92]	; (800e284 <tcp_slowtmr+0x674>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d006      	beq.n	800e23e <tcp_slowtmr+0x62e>
 800e230:	4b10      	ldr	r3, [pc, #64]	; (800e274 <tcp_slowtmr+0x664>)
 800e232:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e236:	4915      	ldr	r1, [pc, #84]	; (800e28c <tcp_slowtmr+0x67c>)
 800e238:	4810      	ldr	r0, [pc, #64]	; (800e27c <tcp_slowtmr+0x66c>)
 800e23a:	f007 ffc9 	bl	80161d0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e240:	68db      	ldr	r3, [r3, #12]
 800e242:	4a10      	ldr	r2, [pc, #64]	; (800e284 <tcp_slowtmr+0x674>)
 800e244:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e248:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24c:	68db      	ldr	r3, [r3, #12]
 800e24e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e250:	69f8      	ldr	r0, [r7, #28]
 800e252:	f7ff f93f 	bl	800d4d4 <tcp_free>
 800e256:	e004      	b.n	800e262 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e264:	2b00      	cmp	r3, #0
 800e266:	d1a9      	bne.n	800e1bc <tcp_slowtmr+0x5ac>
    }
  }
}
 800e268:	bf00      	nop
 800e26a:	bf00      	nop
 800e26c:	3730      	adds	r7, #48	; 0x30
 800e26e:	46bd      	mov	sp, r7
 800e270:	bdb0      	pop	{r4, r5, r7, pc}
 800e272:	bf00      	nop
 800e274:	08017d54 	.word	0x08017d54
 800e278:	080181e4 	.word	0x080181e4
 800e27c:	08017d98 	.word	0x08017d98
 800e280:	20008f20 	.word	0x20008f20
 800e284:	20008f30 	.word	0x20008f30
 800e288:	08018214 	.word	0x08018214
 800e28c:	0801823c 	.word	0x0801823c

0800e290 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e296:	4b2d      	ldr	r3, [pc, #180]	; (800e34c <tcp_fasttmr+0xbc>)
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	3301      	adds	r3, #1
 800e29c:	b2da      	uxtb	r2, r3
 800e29e:	4b2b      	ldr	r3, [pc, #172]	; (800e34c <tcp_fasttmr+0xbc>)
 800e2a0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e2a2:	4b2b      	ldr	r3, [pc, #172]	; (800e350 <tcp_fasttmr+0xc0>)
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e2a8:	e048      	b.n	800e33c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	7f9a      	ldrb	r2, [r3, #30]
 800e2ae:	4b27      	ldr	r3, [pc, #156]	; (800e34c <tcp_fasttmr+0xbc>)
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	429a      	cmp	r2, r3
 800e2b4:	d03f      	beq.n	800e336 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e2b6:	4b25      	ldr	r3, [pc, #148]	; (800e34c <tcp_fasttmr+0xbc>)
 800e2b8:	781a      	ldrb	r2, [r3, #0]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	8b5b      	ldrh	r3, [r3, #26]
 800e2c2:	f003 0301 	and.w	r3, r3, #1
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d010      	beq.n	800e2ec <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	8b5b      	ldrh	r3, [r3, #26]
 800e2ce:	f043 0302 	orr.w	r3, r3, #2
 800e2d2:	b29a      	uxth	r2, r3
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f003 facf 	bl	801187c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	8b5b      	ldrh	r3, [r3, #26]
 800e2e2:	f023 0303 	bic.w	r3, r3, #3
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	8b5b      	ldrh	r3, [r3, #26]
 800e2f0:	f003 0308 	and.w	r3, r3, #8
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d009      	beq.n	800e30c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	8b5b      	ldrh	r3, [r3, #26]
 800e2fc:	f023 0308 	bic.w	r3, r3, #8
 800e300:	b29a      	uxth	r2, r3
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f7ff fa78 	bl	800d7fc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	68db      	ldr	r3, [r3, #12]
 800e310:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e316:	2b00      	cmp	r3, #0
 800e318:	d00a      	beq.n	800e330 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e31a:	4b0e      	ldr	r3, [pc, #56]	; (800e354 <tcp_fasttmr+0xc4>)
 800e31c:	2200      	movs	r2, #0
 800e31e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f000 f819 	bl	800e358 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e326:	4b0b      	ldr	r3, [pc, #44]	; (800e354 <tcp_fasttmr+0xc4>)
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d000      	beq.n	800e330 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e32e:	e7b8      	b.n	800e2a2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	607b      	str	r3, [r7, #4]
 800e334:	e002      	b.n	800e33c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d1b3      	bne.n	800e2aa <tcp_fasttmr+0x1a>
    }
  }
}
 800e342:	bf00      	nop
 800e344:	bf00      	nop
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	20008f36 	.word	0x20008f36
 800e350:	20008f2c 	.word	0x20008f2c
 800e354:	20008f34 	.word	0x20008f34

0800e358 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e358:	b590      	push	{r4, r7, lr}
 800e35a:	b085      	sub	sp, #20
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d109      	bne.n	800e37a <tcp_process_refused_data+0x22>
 800e366:	4b37      	ldr	r3, [pc, #220]	; (800e444 <tcp_process_refused_data+0xec>)
 800e368:	f240 6209 	movw	r2, #1545	; 0x609
 800e36c:	4936      	ldr	r1, [pc, #216]	; (800e448 <tcp_process_refused_data+0xf0>)
 800e36e:	4837      	ldr	r0, [pc, #220]	; (800e44c <tcp_process_refused_data+0xf4>)
 800e370:	f007 ff2e 	bl	80161d0 <iprintf>
 800e374:	f06f 030f 	mvn.w	r3, #15
 800e378:	e060      	b.n	800e43c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e37e:	7b5b      	ldrb	r3, [r3, #13]
 800e380:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e386:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2200      	movs	r2, #0
 800e38c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00b      	beq.n	800e3b0 <tcp_process_refused_data+0x58>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6918      	ldr	r0, [r3, #16]
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	68ba      	ldr	r2, [r7, #8]
 800e3a6:	6879      	ldr	r1, [r7, #4]
 800e3a8:	47a0      	blx	r4
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	73fb      	strb	r3, [r7, #15]
 800e3ae:	e007      	b.n	800e3c0 <tcp_process_refused_data+0x68>
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	6879      	ldr	r1, [r7, #4]
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	f000 f8a4 	bl	800e504 <tcp_recv_null>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e3c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d12a      	bne.n	800e41e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e3c8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ca:	f003 0320 	and.w	r3, r3, #32
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d033      	beq.n	800e43a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3d6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e3da:	d005      	beq.n	800e3e8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	b29a      	uxth	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00b      	beq.n	800e40a <tcp_process_refused_data+0xb2>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6918      	ldr	r0, [r3, #16]
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	2200      	movs	r2, #0
 800e400:	6879      	ldr	r1, [r7, #4]
 800e402:	47a0      	blx	r4
 800e404:	4603      	mov	r3, r0
 800e406:	73fb      	strb	r3, [r7, #15]
 800e408:	e001      	b.n	800e40e <tcp_process_refused_data+0xb6>
 800e40a:	2300      	movs	r3, #0
 800e40c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e40e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e412:	f113 0f0d 	cmn.w	r3, #13
 800e416:	d110      	bne.n	800e43a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e418:	f06f 030c 	mvn.w	r3, #12
 800e41c:	e00e      	b.n	800e43c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e422:	f113 0f0d 	cmn.w	r3, #13
 800e426:	d102      	bne.n	800e42e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e428:	f06f 030c 	mvn.w	r3, #12
 800e42c:	e006      	b.n	800e43c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	68ba      	ldr	r2, [r7, #8]
 800e432:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800e434:	f06f 0304 	mvn.w	r3, #4
 800e438:	e000      	b.n	800e43c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e43a:	2300      	movs	r3, #0
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3714      	adds	r7, #20
 800e440:	46bd      	mov	sp, r7
 800e442:	bd90      	pop	{r4, r7, pc}
 800e444:	08017d54 	.word	0x08017d54
 800e448:	08018264 	.word	0x08018264
 800e44c:	08017d98 	.word	0x08017d98

0800e450 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e458:	e007      	b.n	800e46a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e460:	6878      	ldr	r0, [r7, #4]
 800e462:	f000 f80a 	bl	800e47a <tcp_seg_free>
    seg = next;
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d1f4      	bne.n	800e45a <tcp_segs_free+0xa>
  }
}
 800e470:	bf00      	nop
 800e472:	bf00      	nop
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b082      	sub	sp, #8
 800e47e:	af00      	add	r7, sp, #0
 800e480:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d00c      	beq.n	800e4a2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	685b      	ldr	r3, [r3, #4]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d004      	beq.n	800e49a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	685b      	ldr	r3, [r3, #4]
 800e494:	4618      	mov	r0, r3
 800e496:	f7fe fcdb 	bl	800ce50 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e49a:	6879      	ldr	r1, [r7, #4]
 800e49c:	2003      	movs	r0, #3
 800e49e:	f7fd fe61 	bl	800c164 <memp_free>
  }
}
 800e4a2:	bf00      	nop
 800e4a4:	3708      	adds	r7, #8
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
	...

0800e4ac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b084      	sub	sp, #16
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d106      	bne.n	800e4c8 <tcp_seg_copy+0x1c>
 800e4ba:	4b0f      	ldr	r3, [pc, #60]	; (800e4f8 <tcp_seg_copy+0x4c>)
 800e4bc:	f240 6282 	movw	r2, #1666	; 0x682
 800e4c0:	490e      	ldr	r1, [pc, #56]	; (800e4fc <tcp_seg_copy+0x50>)
 800e4c2:	480f      	ldr	r0, [pc, #60]	; (800e500 <tcp_seg_copy+0x54>)
 800e4c4:	f007 fe84 	bl	80161d0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e4c8:	2003      	movs	r0, #3
 800e4ca:	f7fd fddb 	bl	800c084 <memp_malloc>
 800e4ce:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d101      	bne.n	800e4da <tcp_seg_copy+0x2e>
    return NULL;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	e00a      	b.n	800e4f0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e4da:	2210      	movs	r2, #16
 800e4dc:	6879      	ldr	r1, [r7, #4]
 800e4de:	68f8      	ldr	r0, [r7, #12]
 800e4e0:	f007 fe60 	bl	80161a4 <memcpy>
  pbuf_ref(cseg->p);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	685b      	ldr	r3, [r3, #4]
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7fe fd51 	bl	800cf90 <pbuf_ref>
  return cseg;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3710      	adds	r7, #16
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	08017d54 	.word	0x08017d54
 800e4fc:	080182a8 	.word	0x080182a8
 800e500:	08017d98 	.word	0x08017d98

0800e504 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	607a      	str	r2, [r7, #4]
 800e510:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d109      	bne.n	800e52c <tcp_recv_null+0x28>
 800e518:	4b12      	ldr	r3, [pc, #72]	; (800e564 <tcp_recv_null+0x60>)
 800e51a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800e51e:	4912      	ldr	r1, [pc, #72]	; (800e568 <tcp_recv_null+0x64>)
 800e520:	4812      	ldr	r0, [pc, #72]	; (800e56c <tcp_recv_null+0x68>)
 800e522:	f007 fe55 	bl	80161d0 <iprintf>
 800e526:	f06f 030f 	mvn.w	r3, #15
 800e52a:	e016      	b.n	800e55a <tcp_recv_null+0x56>

  if (p != NULL) {
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d009      	beq.n	800e546 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	891b      	ldrh	r3, [r3, #8]
 800e536:	4619      	mov	r1, r3
 800e538:	68b8      	ldr	r0, [r7, #8]
 800e53a:	f7ff fb19 	bl	800db70 <tcp_recved>
    pbuf_free(p);
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f7fe fc86 	bl	800ce50 <pbuf_free>
 800e544:	e008      	b.n	800e558 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e546:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d104      	bne.n	800e558 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e54e:	68b8      	ldr	r0, [r7, #8]
 800e550:	f7ff f9be 	bl	800d8d0 <tcp_close>
 800e554:	4603      	mov	r3, r0
 800e556:	e000      	b.n	800e55a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e558:	2300      	movs	r3, #0
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3710      	adds	r7, #16
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	08017d54 	.word	0x08017d54
 800e568:	080182c4 	.word	0x080182c4
 800e56c:	08017d98 	.word	0x08017d98

0800e570 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e570:	b580      	push	{r7, lr}
 800e572:	b086      	sub	sp, #24
 800e574:	af00      	add	r7, sp, #0
 800e576:	4603      	mov	r3, r0
 800e578:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e57a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	db01      	blt.n	800e586 <tcp_kill_prio+0x16>
 800e582:	79fb      	ldrb	r3, [r7, #7]
 800e584:	e000      	b.n	800e588 <tcp_kill_prio+0x18>
 800e586:	237f      	movs	r3, #127	; 0x7f
 800e588:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e58a:	7afb      	ldrb	r3, [r7, #11]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d034      	beq.n	800e5fa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e590:	7afb      	ldrb	r3, [r7, #11]
 800e592:	3b01      	subs	r3, #1
 800e594:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e596:	2300      	movs	r3, #0
 800e598:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e59a:	2300      	movs	r3, #0
 800e59c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e59e:	4b19      	ldr	r3, [pc, #100]	; (800e604 <tcp_kill_prio+0x94>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	617b      	str	r3, [r7, #20]
 800e5a4:	e01f      	b.n	800e5e6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	7d5b      	ldrb	r3, [r3, #21]
 800e5aa:	7afa      	ldrb	r2, [r7, #11]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d80c      	bhi.n	800e5ca <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e5b4:	7afa      	ldrb	r2, [r7, #11]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d112      	bne.n	800e5e0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e5ba:	4b13      	ldr	r3, [pc, #76]	; (800e608 <tcp_kill_prio+0x98>)
 800e5bc:	681a      	ldr	r2, [r3, #0]
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	6a1b      	ldr	r3, [r3, #32]
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d80a      	bhi.n	800e5e0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e5ca:	4b0f      	ldr	r3, [pc, #60]	; (800e608 <tcp_kill_prio+0x98>)
 800e5cc:	681a      	ldr	r2, [r3, #0]
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	6a1b      	ldr	r3, [r3, #32]
 800e5d2:	1ad3      	subs	r3, r2, r3
 800e5d4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	7d5b      	ldrb	r3, [r3, #21]
 800e5de:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	68db      	ldr	r3, [r3, #12]
 800e5e4:	617b      	str	r3, [r7, #20]
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1dc      	bne.n	800e5a6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d004      	beq.n	800e5fc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e5f2:	6938      	ldr	r0, [r7, #16]
 800e5f4:	f7ff fa56 	bl	800daa4 <tcp_abort>
 800e5f8:	e000      	b.n	800e5fc <tcp_kill_prio+0x8c>
    return;
 800e5fa:	bf00      	nop
  }
}
 800e5fc:	3718      	adds	r7, #24
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	20008f2c 	.word	0x20008f2c
 800e608:	20008f20 	.word	0x20008f20

0800e60c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b086      	sub	sp, #24
 800e610:	af00      	add	r7, sp, #0
 800e612:	4603      	mov	r3, r0
 800e614:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e616:	79fb      	ldrb	r3, [r7, #7]
 800e618:	2b08      	cmp	r3, #8
 800e61a:	d009      	beq.n	800e630 <tcp_kill_state+0x24>
 800e61c:	79fb      	ldrb	r3, [r7, #7]
 800e61e:	2b09      	cmp	r3, #9
 800e620:	d006      	beq.n	800e630 <tcp_kill_state+0x24>
 800e622:	4b1a      	ldr	r3, [pc, #104]	; (800e68c <tcp_kill_state+0x80>)
 800e624:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800e628:	4919      	ldr	r1, [pc, #100]	; (800e690 <tcp_kill_state+0x84>)
 800e62a:	481a      	ldr	r0, [pc, #104]	; (800e694 <tcp_kill_state+0x88>)
 800e62c:	f007 fdd0 	bl	80161d0 <iprintf>

  inactivity = 0;
 800e630:	2300      	movs	r3, #0
 800e632:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e634:	2300      	movs	r3, #0
 800e636:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e638:	4b17      	ldr	r3, [pc, #92]	; (800e698 <tcp_kill_state+0x8c>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	617b      	str	r3, [r7, #20]
 800e63e:	e017      	b.n	800e670 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	7d1b      	ldrb	r3, [r3, #20]
 800e644:	79fa      	ldrb	r2, [r7, #7]
 800e646:	429a      	cmp	r2, r3
 800e648:	d10f      	bne.n	800e66a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e64a:	4b14      	ldr	r3, [pc, #80]	; (800e69c <tcp_kill_state+0x90>)
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	6a1b      	ldr	r3, [r3, #32]
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	68fa      	ldr	r2, [r7, #12]
 800e656:	429a      	cmp	r2, r3
 800e658:	d807      	bhi.n	800e66a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e65a:	4b10      	ldr	r3, [pc, #64]	; (800e69c <tcp_kill_state+0x90>)
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	6a1b      	ldr	r3, [r3, #32]
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e66a:	697b      	ldr	r3, [r7, #20]
 800e66c:	68db      	ldr	r3, [r3, #12]
 800e66e:	617b      	str	r3, [r7, #20]
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d1e4      	bne.n	800e640 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d003      	beq.n	800e684 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e67c:	2100      	movs	r1, #0
 800e67e:	6938      	ldr	r0, [r7, #16]
 800e680:	f7ff f952 	bl	800d928 <tcp_abandon>
  }
}
 800e684:	bf00      	nop
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}
 800e68c:	08017d54 	.word	0x08017d54
 800e690:	080182e0 	.word	0x080182e0
 800e694:	08017d98 	.word	0x08017d98
 800e698:	20008f2c 	.word	0x20008f2c
 800e69c:	20008f20 	.word	0x20008f20

0800e6a0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6ae:	4b12      	ldr	r3, [pc, #72]	; (800e6f8 <tcp_kill_timewait+0x58>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	60fb      	str	r3, [r7, #12]
 800e6b4:	e012      	b.n	800e6dc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e6b6:	4b11      	ldr	r3, [pc, #68]	; (800e6fc <tcp_kill_timewait+0x5c>)
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	6a1b      	ldr	r3, [r3, #32]
 800e6be:	1ad3      	subs	r3, r2, r3
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d807      	bhi.n	800e6d6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e6c6:	4b0d      	ldr	r3, [pc, #52]	; (800e6fc <tcp_kill_timewait+0x5c>)
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6a1b      	ldr	r3, [r3, #32]
 800e6ce:	1ad3      	subs	r3, r2, r3
 800e6d0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	68db      	ldr	r3, [r3, #12]
 800e6da:	60fb      	str	r3, [r7, #12]
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d1e9      	bne.n	800e6b6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d002      	beq.n	800e6ee <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e6e8:	68b8      	ldr	r0, [r7, #8]
 800e6ea:	f7ff f9db 	bl	800daa4 <tcp_abort>
  }
}
 800e6ee:	bf00      	nop
 800e6f0:	3710      	adds	r7, #16
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	20008f30 	.word	0x20008f30
 800e6fc:	20008f20 	.word	0x20008f20

0800e700 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b082      	sub	sp, #8
 800e704:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e706:	4b10      	ldr	r3, [pc, #64]	; (800e748 <tcp_handle_closepend+0x48>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e70c:	e014      	b.n	800e738 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	68db      	ldr	r3, [r3, #12]
 800e712:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	8b5b      	ldrh	r3, [r3, #26]
 800e718:	f003 0308 	and.w	r3, r3, #8
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d009      	beq.n	800e734 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	8b5b      	ldrh	r3, [r3, #26]
 800e724:	f023 0308 	bic.w	r3, r3, #8
 800e728:	b29a      	uxth	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f7ff f864 	bl	800d7fc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1e7      	bne.n	800e70e <tcp_handle_closepend+0xe>
  }
}
 800e73e:	bf00      	nop
 800e740:	bf00      	nop
 800e742:	3708      	adds	r7, #8
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	20008f2c 	.word	0x20008f2c

0800e74c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	4603      	mov	r3, r0
 800e754:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e756:	2001      	movs	r0, #1
 800e758:	f7fd fc94 	bl	800c084 <memp_malloc>
 800e75c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d126      	bne.n	800e7b2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e764:	f7ff ffcc 	bl	800e700 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e768:	f7ff ff9a 	bl	800e6a0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e76c:	2001      	movs	r0, #1
 800e76e:	f7fd fc89 	bl	800c084 <memp_malloc>
 800e772:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d11b      	bne.n	800e7b2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e77a:	2009      	movs	r0, #9
 800e77c:	f7ff ff46 	bl	800e60c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e780:	2001      	movs	r0, #1
 800e782:	f7fd fc7f 	bl	800c084 <memp_malloc>
 800e786:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d111      	bne.n	800e7b2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e78e:	2008      	movs	r0, #8
 800e790:	f7ff ff3c 	bl	800e60c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e794:	2001      	movs	r0, #1
 800e796:	f7fd fc75 	bl	800c084 <memp_malloc>
 800e79a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d107      	bne.n	800e7b2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e7a2:	79fb      	ldrb	r3, [r7, #7]
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f7ff fee3 	bl	800e570 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e7aa:	2001      	movs	r0, #1
 800e7ac:	f7fd fc6a 	bl	800c084 <memp_malloc>
 800e7b0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d03f      	beq.n	800e838 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e7b8:	229c      	movs	r2, #156	; 0x9c
 800e7ba:	2100      	movs	r1, #0
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f007 fcff 	bl	80161c0 <memset>
    pcb->prio = prio;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	79fa      	ldrb	r2, [r7, #7]
 800e7c6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e7ce:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e7d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	22ff      	movs	r2, #255	; 0xff
 800e7e6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e7ee:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2206      	movs	r2, #6
 800e7f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	2206      	movs	r2, #6
 800e7fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e804:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2201      	movs	r2, #1
 800e80a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e80e:	4b0d      	ldr	r3, [pc, #52]	; (800e844 <tcp_alloc+0xf8>)
 800e810:	681a      	ldr	r2, [r3, #0]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e816:	4b0c      	ldr	r3, [pc, #48]	; (800e848 <tcp_alloc+0xfc>)
 800e818:	781a      	ldrb	r2, [r3, #0]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e824:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	4a08      	ldr	r2, [pc, #32]	; (800e84c <tcp_alloc+0x100>)
 800e82c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	4a07      	ldr	r2, [pc, #28]	; (800e850 <tcp_alloc+0x104>)
 800e834:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e838:	68fb      	ldr	r3, [r7, #12]
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	20008f20 	.word	0x20008f20
 800e848:	20008f36 	.word	0x20008f36
 800e84c:	0800e505 	.word	0x0800e505
 800e850:	006ddd00 	.word	0x006ddd00

0800e854 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d107      	bne.n	800e872 <tcp_pcb_purge+0x1e>
 800e862:	4b21      	ldr	r3, [pc, #132]	; (800e8e8 <tcp_pcb_purge+0x94>)
 800e864:	f640 0251 	movw	r2, #2129	; 0x851
 800e868:	4920      	ldr	r1, [pc, #128]	; (800e8ec <tcp_pcb_purge+0x98>)
 800e86a:	4821      	ldr	r0, [pc, #132]	; (800e8f0 <tcp_pcb_purge+0x9c>)
 800e86c:	f007 fcb0 	bl	80161d0 <iprintf>
 800e870:	e037      	b.n	800e8e2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	7d1b      	ldrb	r3, [r3, #20]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d033      	beq.n	800e8e2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e87e:	2b0a      	cmp	r3, #10
 800e880:	d02f      	beq.n	800e8e2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e886:	2b01      	cmp	r3, #1
 800e888:	d02b      	beq.n	800e8e2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d007      	beq.n	800e8a2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e896:	4618      	mov	r0, r3
 800e898:	f7fe fada 	bl	800ce50 <pbuf_free>
      pcb->refused_data = NULL;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d002      	beq.n	800e8b0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e8aa:	6878      	ldr	r0, [r7, #4]
 800e8ac:	f000 f986 	bl	800ebbc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8b6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f7ff fdc7 	bl	800e450 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f7ff fdc2 	bl	800e450 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e8e2:	3708      	adds	r7, #8
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}
 800e8e8:	08017d54 	.word	0x08017d54
 800e8ec:	080183a0 	.word	0x080183a0
 800e8f0:	08017d98 	.word	0x08017d98

0800e8f4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b084      	sub	sp, #16
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d106      	bne.n	800e912 <tcp_pcb_remove+0x1e>
 800e904:	4b3e      	ldr	r3, [pc, #248]	; (800ea00 <tcp_pcb_remove+0x10c>)
 800e906:	f640 0283 	movw	r2, #2179	; 0x883
 800e90a:	493e      	ldr	r1, [pc, #248]	; (800ea04 <tcp_pcb_remove+0x110>)
 800e90c:	483e      	ldr	r0, [pc, #248]	; (800ea08 <tcp_pcb_remove+0x114>)
 800e90e:	f007 fc5f 	bl	80161d0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d106      	bne.n	800e926 <tcp_pcb_remove+0x32>
 800e918:	4b39      	ldr	r3, [pc, #228]	; (800ea00 <tcp_pcb_remove+0x10c>)
 800e91a:	f640 0284 	movw	r2, #2180	; 0x884
 800e91e:	493b      	ldr	r1, [pc, #236]	; (800ea0c <tcp_pcb_remove+0x118>)
 800e920:	4839      	ldr	r0, [pc, #228]	; (800ea08 <tcp_pcb_remove+0x114>)
 800e922:	f007 fc55 	bl	80161d0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	683a      	ldr	r2, [r7, #0]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d105      	bne.n	800e93c <tcp_pcb_remove+0x48>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	68da      	ldr	r2, [r3, #12]
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	601a      	str	r2, [r3, #0]
 800e93a:	e013      	b.n	800e964 <tcp_pcb_remove+0x70>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	60fb      	str	r3, [r7, #12]
 800e942:	e00c      	b.n	800e95e <tcp_pcb_remove+0x6a>
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	68db      	ldr	r3, [r3, #12]
 800e948:	683a      	ldr	r2, [r7, #0]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d104      	bne.n	800e958 <tcp_pcb_remove+0x64>
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	68da      	ldr	r2, [r3, #12]
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	60da      	str	r2, [r3, #12]
 800e956:	e005      	b.n	800e964 <tcp_pcb_remove+0x70>
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	60fb      	str	r3, [r7, #12]
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d1ef      	bne.n	800e944 <tcp_pcb_remove+0x50>
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	2200      	movs	r2, #0
 800e968:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e96a:	6838      	ldr	r0, [r7, #0]
 800e96c:	f7ff ff72 	bl	800e854 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	7d1b      	ldrb	r3, [r3, #20]
 800e974:	2b0a      	cmp	r3, #10
 800e976:	d013      	beq.n	800e9a0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e97c:	2b01      	cmp	r3, #1
 800e97e:	d00f      	beq.n	800e9a0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	8b5b      	ldrh	r3, [r3, #26]
 800e984:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d009      	beq.n	800e9a0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	8b5b      	ldrh	r3, [r3, #26]
 800e990:	f043 0302 	orr.w	r3, r3, #2
 800e994:	b29a      	uxth	r2, r3
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e99a:	6838      	ldr	r0, [r7, #0]
 800e99c:	f002 ff6e 	bl	801187c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	7d1b      	ldrb	r3, [r3, #20]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d020      	beq.n	800e9ea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d006      	beq.n	800e9be <tcp_pcb_remove+0xca>
 800e9b0:	4b13      	ldr	r3, [pc, #76]	; (800ea00 <tcp_pcb_remove+0x10c>)
 800e9b2:	f640 0293 	movw	r2, #2195	; 0x893
 800e9b6:	4916      	ldr	r1, [pc, #88]	; (800ea10 <tcp_pcb_remove+0x11c>)
 800e9b8:	4813      	ldr	r0, [pc, #76]	; (800ea08 <tcp_pcb_remove+0x114>)
 800e9ba:	f007 fc09 	bl	80161d0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d006      	beq.n	800e9d4 <tcp_pcb_remove+0xe0>
 800e9c6:	4b0e      	ldr	r3, [pc, #56]	; (800ea00 <tcp_pcb_remove+0x10c>)
 800e9c8:	f640 0294 	movw	r2, #2196	; 0x894
 800e9cc:	4911      	ldr	r1, [pc, #68]	; (800ea14 <tcp_pcb_remove+0x120>)
 800e9ce:	480e      	ldr	r0, [pc, #56]	; (800ea08 <tcp_pcb_remove+0x114>)
 800e9d0:	f007 fbfe 	bl	80161d0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d006      	beq.n	800e9ea <tcp_pcb_remove+0xf6>
 800e9dc:	4b08      	ldr	r3, [pc, #32]	; (800ea00 <tcp_pcb_remove+0x10c>)
 800e9de:	f640 0296 	movw	r2, #2198	; 0x896
 800e9e2:	490d      	ldr	r1, [pc, #52]	; (800ea18 <tcp_pcb_remove+0x124>)
 800e9e4:	4808      	ldr	r0, [pc, #32]	; (800ea08 <tcp_pcb_remove+0x114>)
 800e9e6:	f007 fbf3 	bl	80161d0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e9ea:	683b      	ldr	r3, [r7, #0]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e9f6:	bf00      	nop
 800e9f8:	3710      	adds	r7, #16
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
 800e9fe:	bf00      	nop
 800ea00:	08017d54 	.word	0x08017d54
 800ea04:	080183bc 	.word	0x080183bc
 800ea08:	08017d98 	.word	0x08017d98
 800ea0c:	080183d8 	.word	0x080183d8
 800ea10:	080183f8 	.word	0x080183f8
 800ea14:	08018410 	.word	0x08018410
 800ea18:	0801842c 	.word	0x0801842c

0800ea1c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d106      	bne.n	800ea38 <tcp_next_iss+0x1c>
 800ea2a:	4b0a      	ldr	r3, [pc, #40]	; (800ea54 <tcp_next_iss+0x38>)
 800ea2c:	f640 02af 	movw	r2, #2223	; 0x8af
 800ea30:	4909      	ldr	r1, [pc, #36]	; (800ea58 <tcp_next_iss+0x3c>)
 800ea32:	480a      	ldr	r0, [pc, #40]	; (800ea5c <tcp_next_iss+0x40>)
 800ea34:	f007 fbcc 	bl	80161d0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ea38:	4b09      	ldr	r3, [pc, #36]	; (800ea60 <tcp_next_iss+0x44>)
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	4b09      	ldr	r3, [pc, #36]	; (800ea64 <tcp_next_iss+0x48>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4413      	add	r3, r2
 800ea42:	4a07      	ldr	r2, [pc, #28]	; (800ea60 <tcp_next_iss+0x44>)
 800ea44:	6013      	str	r3, [r2, #0]
  return iss;
 800ea46:	4b06      	ldr	r3, [pc, #24]	; (800ea60 <tcp_next_iss+0x44>)
 800ea48:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	08017d54 	.word	0x08017d54
 800ea58:	08018444 	.word	0x08018444
 800ea5c:	08017d98 	.word	0x08017d98
 800ea60:	20000024 	.word	0x20000024
 800ea64:	20008f20 	.word	0x20008f20

0800ea68 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b086      	sub	sp, #24
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	4603      	mov	r3, r0
 800ea70:	60b9      	str	r1, [r7, #8]
 800ea72:	607a      	str	r2, [r7, #4]
 800ea74:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d106      	bne.n	800ea8a <tcp_eff_send_mss_netif+0x22>
 800ea7c:	4b14      	ldr	r3, [pc, #80]	; (800ead0 <tcp_eff_send_mss_netif+0x68>)
 800ea7e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ea82:	4914      	ldr	r1, [pc, #80]	; (800ead4 <tcp_eff_send_mss_netif+0x6c>)
 800ea84:	4814      	ldr	r0, [pc, #80]	; (800ead8 <tcp_eff_send_mss_netif+0x70>)
 800ea86:	f007 fba3 	bl	80161d0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d101      	bne.n	800ea94 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ea90:	89fb      	ldrh	r3, [r7, #14]
 800ea92:	e019      	b.n	800eac8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ea98:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ea9a:	8afb      	ldrh	r3, [r7, #22]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d012      	beq.n	800eac6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800eaa0:	2328      	movs	r3, #40	; 0x28
 800eaa2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eaa4:	8afa      	ldrh	r2, [r7, #22]
 800eaa6:	8abb      	ldrh	r3, [r7, #20]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d904      	bls.n	800eab6 <tcp_eff_send_mss_netif+0x4e>
 800eaac:	8afa      	ldrh	r2, [r7, #22]
 800eaae:	8abb      	ldrh	r3, [r7, #20]
 800eab0:	1ad3      	subs	r3, r2, r3
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	e000      	b.n	800eab8 <tcp_eff_send_mss_netif+0x50>
 800eab6:	2300      	movs	r3, #0
 800eab8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800eaba:	8a7a      	ldrh	r2, [r7, #18]
 800eabc:	89fb      	ldrh	r3, [r7, #14]
 800eabe:	4293      	cmp	r3, r2
 800eac0:	bf28      	it	cs
 800eac2:	4613      	movcs	r3, r2
 800eac4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800eac6:	89fb      	ldrh	r3, [r7, #14]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3718      	adds	r7, #24
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	08017d54 	.word	0x08017d54
 800ead4:	08018460 	.word	0x08018460
 800ead8:	08017d98 	.word	0x08017d98

0800eadc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d119      	bne.n	800eb24 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800eaf0:	4b10      	ldr	r3, [pc, #64]	; (800eb34 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800eaf2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800eaf6:	4910      	ldr	r1, [pc, #64]	; (800eb38 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800eaf8:	4810      	ldr	r0, [pc, #64]	; (800eb3c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800eafa:	f007 fb69 	bl	80161d0 <iprintf>

  while (pcb != NULL) {
 800eafe:	e011      	b.n	800eb24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d108      	bne.n	800eb1e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	68db      	ldr	r3, [r3, #12]
 800eb10:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800eb12:	68f8      	ldr	r0, [r7, #12]
 800eb14:	f7fe ffc6 	bl	800daa4 <tcp_abort>
      pcb = next;
 800eb18:	68bb      	ldr	r3, [r7, #8]
 800eb1a:	60fb      	str	r3, [r7, #12]
 800eb1c:	e002      	b.n	800eb24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d1ea      	bne.n	800eb00 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800eb2a:	bf00      	nop
 800eb2c:	bf00      	nop
 800eb2e:	3710      	adds	r7, #16
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}
 800eb34:	08017d54 	.word	0x08017d54
 800eb38:	08018488 	.word	0x08018488
 800eb3c:	08017d98 	.word	0x08017d98

0800eb40 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b084      	sub	sp, #16
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d02a      	beq.n	800eba6 <tcp_netif_ip_addr_changed+0x66>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d026      	beq.n	800eba6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800eb58:	4b15      	ldr	r3, [pc, #84]	; (800ebb0 <tcp_netif_ip_addr_changed+0x70>)
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4619      	mov	r1, r3
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f7ff ffbc 	bl	800eadc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800eb64:	4b13      	ldr	r3, [pc, #76]	; (800ebb4 <tcp_netif_ip_addr_changed+0x74>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4619      	mov	r1, r3
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f7ff ffb6 	bl	800eadc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d017      	beq.n	800eba6 <tcp_netif_ip_addr_changed+0x66>
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d013      	beq.n	800eba6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb7e:	4b0e      	ldr	r3, [pc, #56]	; (800ebb8 <tcp_netif_ip_addr_changed+0x78>)
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	60fb      	str	r3, [r7, #12]
 800eb84:	e00c      	b.n	800eba0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d103      	bne.n	800eb9a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	60fb      	str	r3, [r7, #12]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d1ef      	bne.n	800eb86 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800eba6:	bf00      	nop
 800eba8:	3710      	adds	r7, #16
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}
 800ebae:	bf00      	nop
 800ebb0:	20008f2c 	.word	0x20008f2c
 800ebb4:	20008f24 	.word	0x20008f24
 800ebb8:	20008f28 	.word	0x20008f28

0800ebbc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d007      	beq.n	800ebdc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f7ff fc3d 	bl	800e450 <tcp_segs_free>
    pcb->ooseq = NULL;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800ebdc:	bf00      	nop
 800ebde:	3708      	adds	r7, #8
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800ebe4:	b590      	push	{r4, r7, lr}
 800ebe6:	b08d      	sub	sp, #52	; 0x34
 800ebe8:	af04      	add	r7, sp, #16
 800ebea:	6078      	str	r0, [r7, #4]
 800ebec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d105      	bne.n	800ec00 <tcp_input+0x1c>
 800ebf4:	4b9b      	ldr	r3, [pc, #620]	; (800ee64 <tcp_input+0x280>)
 800ebf6:	2283      	movs	r2, #131	; 0x83
 800ebf8:	499b      	ldr	r1, [pc, #620]	; (800ee68 <tcp_input+0x284>)
 800ebfa:	489c      	ldr	r0, [pc, #624]	; (800ee6c <tcp_input+0x288>)
 800ebfc:	f007 fae8 	bl	80161d0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	4a9a      	ldr	r2, [pc, #616]	; (800ee70 <tcp_input+0x28c>)
 800ec06:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	895b      	ldrh	r3, [r3, #10]
 800ec0c:	2b13      	cmp	r3, #19
 800ec0e:	f240 83d1 	bls.w	800f3b4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ec12:	4b98      	ldr	r3, [pc, #608]	; (800ee74 <tcp_input+0x290>)
 800ec14:	695b      	ldr	r3, [r3, #20]
 800ec16:	4a97      	ldr	r2, [pc, #604]	; (800ee74 <tcp_input+0x290>)
 800ec18:	6812      	ldr	r2, [r2, #0]
 800ec1a:	4611      	mov	r1, r2
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f005 ffa9 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	f040 83c7 	bne.w	800f3b8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ec2a:	4b92      	ldr	r3, [pc, #584]	; (800ee74 <tcp_input+0x290>)
 800ec2c:	695b      	ldr	r3, [r3, #20]
 800ec2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ec32:	2be0      	cmp	r3, #224	; 0xe0
 800ec34:	f000 83c0 	beq.w	800f3b8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ec38:	4b8d      	ldr	r3, [pc, #564]	; (800ee70 <tcp_input+0x28c>)
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	899b      	ldrh	r3, [r3, #12]
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fc fda7 	bl	800b794 <lwip_htons>
 800ec46:	4603      	mov	r3, r0
 800ec48:	0b1b      	lsrs	r3, r3, #12
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ec52:	7cbb      	ldrb	r3, [r7, #18]
 800ec54:	2b13      	cmp	r3, #19
 800ec56:	f240 83b1 	bls.w	800f3bc <tcp_input+0x7d8>
 800ec5a:	7cbb      	ldrb	r3, [r7, #18]
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	891b      	ldrh	r3, [r3, #8]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	f200 83aa 	bhi.w	800f3bc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ec68:	7cbb      	ldrb	r3, [r7, #18]
 800ec6a:	b29b      	uxth	r3, r3
 800ec6c:	3b14      	subs	r3, #20
 800ec6e:	b29a      	uxth	r2, r3
 800ec70:	4b81      	ldr	r3, [pc, #516]	; (800ee78 <tcp_input+0x294>)
 800ec72:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ec74:	4b81      	ldr	r3, [pc, #516]	; (800ee7c <tcp_input+0x298>)
 800ec76:	2200      	movs	r2, #0
 800ec78:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	895a      	ldrh	r2, [r3, #10]
 800ec7e:	7cbb      	ldrb	r3, [r7, #18]
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d309      	bcc.n	800ec9a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ec86:	4b7c      	ldr	r3, [pc, #496]	; (800ee78 <tcp_input+0x294>)
 800ec88:	881a      	ldrh	r2, [r3, #0]
 800ec8a:	4b7d      	ldr	r3, [pc, #500]	; (800ee80 <tcp_input+0x29c>)
 800ec8c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ec8e:	7cbb      	ldrb	r3, [r7, #18]
 800ec90:	4619      	mov	r1, r3
 800ec92:	6878      	ldr	r0, [r7, #4]
 800ec94:	f7fe f856 	bl	800cd44 <pbuf_remove_header>
 800ec98:	e04e      	b.n	800ed38 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d105      	bne.n	800ecae <tcp_input+0xca>
 800eca2:	4b70      	ldr	r3, [pc, #448]	; (800ee64 <tcp_input+0x280>)
 800eca4:	22c2      	movs	r2, #194	; 0xc2
 800eca6:	4977      	ldr	r1, [pc, #476]	; (800ee84 <tcp_input+0x2a0>)
 800eca8:	4870      	ldr	r0, [pc, #448]	; (800ee6c <tcp_input+0x288>)
 800ecaa:	f007 fa91 	bl	80161d0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ecae:	2114      	movs	r1, #20
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7fe f847 	bl	800cd44 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	895a      	ldrh	r2, [r3, #10]
 800ecba:	4b71      	ldr	r3, [pc, #452]	; (800ee80 <tcp_input+0x29c>)
 800ecbc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ecbe:	4b6e      	ldr	r3, [pc, #440]	; (800ee78 <tcp_input+0x294>)
 800ecc0:	881a      	ldrh	r2, [r3, #0]
 800ecc2:	4b6f      	ldr	r3, [pc, #444]	; (800ee80 <tcp_input+0x29c>)
 800ecc4:	881b      	ldrh	r3, [r3, #0]
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ecca:	4b6d      	ldr	r3, [pc, #436]	; (800ee80 <tcp_input+0x29c>)
 800eccc:	881b      	ldrh	r3, [r3, #0]
 800ecce:	4619      	mov	r1, r3
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f7fe f837 	bl	800cd44 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	895b      	ldrh	r3, [r3, #10]
 800ecdc:	8a3a      	ldrh	r2, [r7, #16]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	f200 836e 	bhi.w	800f3c0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	4a64      	ldr	r2, [pc, #400]	; (800ee7c <tcp_input+0x298>)
 800ecec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	8a3a      	ldrh	r2, [r7, #16]
 800ecf4:	4611      	mov	r1, r2
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	f7fe f824 	bl	800cd44 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	891a      	ldrh	r2, [r3, #8]
 800ed00:	8a3b      	ldrh	r3, [r7, #16]
 800ed02:	1ad3      	subs	r3, r2, r3
 800ed04:	b29a      	uxth	r2, r3
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	895b      	ldrh	r3, [r3, #10]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d005      	beq.n	800ed1e <tcp_input+0x13a>
 800ed12:	4b54      	ldr	r3, [pc, #336]	; (800ee64 <tcp_input+0x280>)
 800ed14:	22df      	movs	r2, #223	; 0xdf
 800ed16:	495c      	ldr	r1, [pc, #368]	; (800ee88 <tcp_input+0x2a4>)
 800ed18:	4854      	ldr	r0, [pc, #336]	; (800ee6c <tcp_input+0x288>)
 800ed1a:	f007 fa59 	bl	80161d0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	891a      	ldrh	r2, [r3, #8]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	891b      	ldrh	r3, [r3, #8]
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d005      	beq.n	800ed38 <tcp_input+0x154>
 800ed2c:	4b4d      	ldr	r3, [pc, #308]	; (800ee64 <tcp_input+0x280>)
 800ed2e:	22e0      	movs	r2, #224	; 0xe0
 800ed30:	4956      	ldr	r1, [pc, #344]	; (800ee8c <tcp_input+0x2a8>)
 800ed32:	484e      	ldr	r0, [pc, #312]	; (800ee6c <tcp_input+0x288>)
 800ed34:	f007 fa4c 	bl	80161d0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ed38:	4b4d      	ldr	r3, [pc, #308]	; (800ee70 <tcp_input+0x28c>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	881b      	ldrh	r3, [r3, #0]
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	4a4b      	ldr	r2, [pc, #300]	; (800ee70 <tcp_input+0x28c>)
 800ed42:	6814      	ldr	r4, [r2, #0]
 800ed44:	4618      	mov	r0, r3
 800ed46:	f7fc fd25 	bl	800b794 <lwip_htons>
 800ed4a:	4603      	mov	r3, r0
 800ed4c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ed4e:	4b48      	ldr	r3, [pc, #288]	; (800ee70 <tcp_input+0x28c>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	885b      	ldrh	r3, [r3, #2]
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	4a46      	ldr	r2, [pc, #280]	; (800ee70 <tcp_input+0x28c>)
 800ed58:	6814      	ldr	r4, [r2, #0]
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f7fc fd1a 	bl	800b794 <lwip_htons>
 800ed60:	4603      	mov	r3, r0
 800ed62:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ed64:	4b42      	ldr	r3, [pc, #264]	; (800ee70 <tcp_input+0x28c>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	4a41      	ldr	r2, [pc, #260]	; (800ee70 <tcp_input+0x28c>)
 800ed6c:	6814      	ldr	r4, [r2, #0]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7fc fd25 	bl	800b7be <lwip_htonl>
 800ed74:	4603      	mov	r3, r0
 800ed76:	6063      	str	r3, [r4, #4]
 800ed78:	6863      	ldr	r3, [r4, #4]
 800ed7a:	4a45      	ldr	r2, [pc, #276]	; (800ee90 <tcp_input+0x2ac>)
 800ed7c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ed7e:	4b3c      	ldr	r3, [pc, #240]	; (800ee70 <tcp_input+0x28c>)
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	689b      	ldr	r3, [r3, #8]
 800ed84:	4a3a      	ldr	r2, [pc, #232]	; (800ee70 <tcp_input+0x28c>)
 800ed86:	6814      	ldr	r4, [r2, #0]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f7fc fd18 	bl	800b7be <lwip_htonl>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	60a3      	str	r3, [r4, #8]
 800ed92:	68a3      	ldr	r3, [r4, #8]
 800ed94:	4a3f      	ldr	r2, [pc, #252]	; (800ee94 <tcp_input+0x2b0>)
 800ed96:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ed98:	4b35      	ldr	r3, [pc, #212]	; (800ee70 <tcp_input+0x28c>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	89db      	ldrh	r3, [r3, #14]
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	4a33      	ldr	r2, [pc, #204]	; (800ee70 <tcp_input+0x28c>)
 800eda2:	6814      	ldr	r4, [r2, #0]
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7fc fcf5 	bl	800b794 <lwip_htons>
 800edaa:	4603      	mov	r3, r0
 800edac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800edae:	4b30      	ldr	r3, [pc, #192]	; (800ee70 <tcp_input+0x28c>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	899b      	ldrh	r3, [r3, #12]
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7fc fcec 	bl	800b794 <lwip_htons>
 800edbc:	4603      	mov	r3, r0
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800edc4:	b2da      	uxtb	r2, r3
 800edc6:	4b34      	ldr	r3, [pc, #208]	; (800ee98 <tcp_input+0x2b4>)
 800edc8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	891a      	ldrh	r2, [r3, #8]
 800edce:	4b33      	ldr	r3, [pc, #204]	; (800ee9c <tcp_input+0x2b8>)
 800edd0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800edd2:	4b31      	ldr	r3, [pc, #196]	; (800ee98 <tcp_input+0x2b4>)
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	f003 0303 	and.w	r3, r3, #3
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d00c      	beq.n	800edf8 <tcp_input+0x214>
    tcplen++;
 800edde:	4b2f      	ldr	r3, [pc, #188]	; (800ee9c <tcp_input+0x2b8>)
 800ede0:	881b      	ldrh	r3, [r3, #0]
 800ede2:	3301      	adds	r3, #1
 800ede4:	b29a      	uxth	r2, r3
 800ede6:	4b2d      	ldr	r3, [pc, #180]	; (800ee9c <tcp_input+0x2b8>)
 800ede8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	891a      	ldrh	r2, [r3, #8]
 800edee:	4b2b      	ldr	r3, [pc, #172]	; (800ee9c <tcp_input+0x2b8>)
 800edf0:	881b      	ldrh	r3, [r3, #0]
 800edf2:	429a      	cmp	r2, r3
 800edf4:	f200 82e6 	bhi.w	800f3c4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800edf8:	2300      	movs	r3, #0
 800edfa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edfc:	4b28      	ldr	r3, [pc, #160]	; (800eea0 <tcp_input+0x2bc>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	61fb      	str	r3, [r7, #28]
 800ee02:	e09d      	b.n	800ef40 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	7d1b      	ldrb	r3, [r3, #20]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d105      	bne.n	800ee18 <tcp_input+0x234>
 800ee0c:	4b15      	ldr	r3, [pc, #84]	; (800ee64 <tcp_input+0x280>)
 800ee0e:	22fb      	movs	r2, #251	; 0xfb
 800ee10:	4924      	ldr	r1, [pc, #144]	; (800eea4 <tcp_input+0x2c0>)
 800ee12:	4816      	ldr	r0, [pc, #88]	; (800ee6c <tcp_input+0x288>)
 800ee14:	f007 f9dc 	bl	80161d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	7d1b      	ldrb	r3, [r3, #20]
 800ee1c:	2b0a      	cmp	r3, #10
 800ee1e:	d105      	bne.n	800ee2c <tcp_input+0x248>
 800ee20:	4b10      	ldr	r3, [pc, #64]	; (800ee64 <tcp_input+0x280>)
 800ee22:	22fc      	movs	r2, #252	; 0xfc
 800ee24:	4920      	ldr	r1, [pc, #128]	; (800eea8 <tcp_input+0x2c4>)
 800ee26:	4811      	ldr	r0, [pc, #68]	; (800ee6c <tcp_input+0x288>)
 800ee28:	f007 f9d2 	bl	80161d0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	7d1b      	ldrb	r3, [r3, #20]
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	d105      	bne.n	800ee40 <tcp_input+0x25c>
 800ee34:	4b0b      	ldr	r3, [pc, #44]	; (800ee64 <tcp_input+0x280>)
 800ee36:	22fd      	movs	r2, #253	; 0xfd
 800ee38:	491c      	ldr	r1, [pc, #112]	; (800eeac <tcp_input+0x2c8>)
 800ee3a:	480c      	ldr	r0, [pc, #48]	; (800ee6c <tcp_input+0x288>)
 800ee3c:	f007 f9c8 	bl	80161d0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	7a1b      	ldrb	r3, [r3, #8]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d033      	beq.n	800eeb0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	7a1a      	ldrb	r2, [r3, #8]
 800ee4c:	4b09      	ldr	r3, [pc, #36]	; (800ee74 <tcp_input+0x290>)
 800ee4e:	685b      	ldr	r3, [r3, #4]
 800ee50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ee54:	3301      	adds	r3, #1
 800ee56:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d029      	beq.n	800eeb0 <tcp_input+0x2cc>
      prev = pcb;
 800ee5c:	69fb      	ldr	r3, [r7, #28]
 800ee5e:	61bb      	str	r3, [r7, #24]
      continue;
 800ee60:	e06b      	b.n	800ef3a <tcp_input+0x356>
 800ee62:	bf00      	nop
 800ee64:	080184bc 	.word	0x080184bc
 800ee68:	080184f0 	.word	0x080184f0
 800ee6c:	08018508 	.word	0x08018508
 800ee70:	20008f48 	.word	0x20008f48
 800ee74:	200059b0 	.word	0x200059b0
 800ee78:	20008f4c 	.word	0x20008f4c
 800ee7c:	20008f50 	.word	0x20008f50
 800ee80:	20008f4e 	.word	0x20008f4e
 800ee84:	08018530 	.word	0x08018530
 800ee88:	08018540 	.word	0x08018540
 800ee8c:	0801854c 	.word	0x0801854c
 800ee90:	20008f58 	.word	0x20008f58
 800ee94:	20008f5c 	.word	0x20008f5c
 800ee98:	20008f64 	.word	0x20008f64
 800ee9c:	20008f62 	.word	0x20008f62
 800eea0:	20008f2c 	.word	0x20008f2c
 800eea4:	0801856c 	.word	0x0801856c
 800eea8:	08018594 	.word	0x08018594
 800eeac:	080185c0 	.word	0x080185c0
    }

    if (pcb->remote_port == tcphdr->src &&
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	8b1a      	ldrh	r2, [r3, #24]
 800eeb4:	4b72      	ldr	r3, [pc, #456]	; (800f080 <tcp_input+0x49c>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	881b      	ldrh	r3, [r3, #0]
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d13a      	bne.n	800ef36 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	8ada      	ldrh	r2, [r3, #22]
 800eec4:	4b6e      	ldr	r3, [pc, #440]	; (800f080 <tcp_input+0x49c>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	885b      	ldrh	r3, [r3, #2]
 800eeca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800eecc:	429a      	cmp	r2, r3
 800eece:	d132      	bne.n	800ef36 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eed0:	69fb      	ldr	r3, [r7, #28]
 800eed2:	685a      	ldr	r2, [r3, #4]
 800eed4:	4b6b      	ldr	r3, [pc, #428]	; (800f084 <tcp_input+0x4a0>)
 800eed6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d12c      	bne.n	800ef36 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	681a      	ldr	r2, [r3, #0]
 800eee0:	4b68      	ldr	r3, [pc, #416]	; (800f084 <tcp_input+0x4a0>)
 800eee2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d126      	bne.n	800ef36 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	68db      	ldr	r3, [r3, #12]
 800eeec:	69fa      	ldr	r2, [r7, #28]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d106      	bne.n	800ef00 <tcp_input+0x31c>
 800eef2:	4b65      	ldr	r3, [pc, #404]	; (800f088 <tcp_input+0x4a4>)
 800eef4:	f240 120d 	movw	r2, #269	; 0x10d
 800eef8:	4964      	ldr	r1, [pc, #400]	; (800f08c <tcp_input+0x4a8>)
 800eefa:	4865      	ldr	r0, [pc, #404]	; (800f090 <tcp_input+0x4ac>)
 800eefc:	f007 f968 	bl	80161d0 <iprintf>
      if (prev != NULL) {
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d00a      	beq.n	800ef1c <tcp_input+0x338>
        prev->next = pcb->next;
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	68da      	ldr	r2, [r3, #12]
 800ef0a:	69bb      	ldr	r3, [r7, #24]
 800ef0c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ef0e:	4b61      	ldr	r3, [pc, #388]	; (800f094 <tcp_input+0x4b0>)
 800ef10:	681a      	ldr	r2, [r3, #0]
 800ef12:	69fb      	ldr	r3, [r7, #28]
 800ef14:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ef16:	4a5f      	ldr	r2, [pc, #380]	; (800f094 <tcp_input+0x4b0>)
 800ef18:	69fb      	ldr	r3, [r7, #28]
 800ef1a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ef1c:	69fb      	ldr	r3, [r7, #28]
 800ef1e:	68db      	ldr	r3, [r3, #12]
 800ef20:	69fa      	ldr	r2, [r7, #28]
 800ef22:	429a      	cmp	r2, r3
 800ef24:	d111      	bne.n	800ef4a <tcp_input+0x366>
 800ef26:	4b58      	ldr	r3, [pc, #352]	; (800f088 <tcp_input+0x4a4>)
 800ef28:	f240 1215 	movw	r2, #277	; 0x115
 800ef2c:	495a      	ldr	r1, [pc, #360]	; (800f098 <tcp_input+0x4b4>)
 800ef2e:	4858      	ldr	r0, [pc, #352]	; (800f090 <tcp_input+0x4ac>)
 800ef30:	f007 f94e 	bl	80161d0 <iprintf>
      break;
 800ef34:	e009      	b.n	800ef4a <tcp_input+0x366>
    }
    prev = pcb;
 800ef36:	69fb      	ldr	r3, [r7, #28]
 800ef38:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	68db      	ldr	r3, [r3, #12]
 800ef3e:	61fb      	str	r3, [r7, #28]
 800ef40:	69fb      	ldr	r3, [r7, #28]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	f47f af5e 	bne.w	800ee04 <tcp_input+0x220>
 800ef48:	e000      	b.n	800ef4c <tcp_input+0x368>
      break;
 800ef4a:	bf00      	nop
  }

  if (pcb == NULL) {
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	f040 80aa 	bne.w	800f0a8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef54:	4b51      	ldr	r3, [pc, #324]	; (800f09c <tcp_input+0x4b8>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	61fb      	str	r3, [r7, #28]
 800ef5a:	e03f      	b.n	800efdc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	7d1b      	ldrb	r3, [r3, #20]
 800ef60:	2b0a      	cmp	r3, #10
 800ef62:	d006      	beq.n	800ef72 <tcp_input+0x38e>
 800ef64:	4b48      	ldr	r3, [pc, #288]	; (800f088 <tcp_input+0x4a4>)
 800ef66:	f240 121f 	movw	r2, #287	; 0x11f
 800ef6a:	494d      	ldr	r1, [pc, #308]	; (800f0a0 <tcp_input+0x4bc>)
 800ef6c:	4848      	ldr	r0, [pc, #288]	; (800f090 <tcp_input+0x4ac>)
 800ef6e:	f007 f92f 	bl	80161d0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef72:	69fb      	ldr	r3, [r7, #28]
 800ef74:	7a1b      	ldrb	r3, [r3, #8]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d009      	beq.n	800ef8e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	7a1a      	ldrb	r2, [r3, #8]
 800ef7e:	4b41      	ldr	r3, [pc, #260]	; (800f084 <tcp_input+0x4a0>)
 800ef80:	685b      	ldr	r3, [r3, #4]
 800ef82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef86:	3301      	adds	r3, #1
 800ef88:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d122      	bne.n	800efd4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ef8e:	69fb      	ldr	r3, [r7, #28]
 800ef90:	8b1a      	ldrh	r2, [r3, #24]
 800ef92:	4b3b      	ldr	r3, [pc, #236]	; (800f080 <tcp_input+0x49c>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	881b      	ldrh	r3, [r3, #0]
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d11b      	bne.n	800efd6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ef9e:	69fb      	ldr	r3, [r7, #28]
 800efa0:	8ada      	ldrh	r2, [r3, #22]
 800efa2:	4b37      	ldr	r3, [pc, #220]	; (800f080 <tcp_input+0x49c>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	885b      	ldrh	r3, [r3, #2]
 800efa8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800efaa:	429a      	cmp	r2, r3
 800efac:	d113      	bne.n	800efd6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800efae:	69fb      	ldr	r3, [r7, #28]
 800efb0:	685a      	ldr	r2, [r3, #4]
 800efb2:	4b34      	ldr	r3, [pc, #208]	; (800f084 <tcp_input+0x4a0>)
 800efb4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d10d      	bne.n	800efd6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800efba:	69fb      	ldr	r3, [r7, #28]
 800efbc:	681a      	ldr	r2, [r3, #0]
 800efbe:	4b31      	ldr	r3, [pc, #196]	; (800f084 <tcp_input+0x4a0>)
 800efc0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d107      	bne.n	800efd6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800efc6:	69f8      	ldr	r0, [r7, #28]
 800efc8:	f000 fb56 	bl	800f678 <tcp_timewait_input>
        }
        pbuf_free(p);
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f7fd ff3f 	bl	800ce50 <pbuf_free>
        return;
 800efd2:	e1fd      	b.n	800f3d0 <tcp_input+0x7ec>
        continue;
 800efd4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800efd6:	69fb      	ldr	r3, [r7, #28]
 800efd8:	68db      	ldr	r3, [r3, #12]
 800efda:	61fb      	str	r3, [r7, #28]
 800efdc:	69fb      	ldr	r3, [r7, #28]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d1bc      	bne.n	800ef5c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800efe2:	2300      	movs	r3, #0
 800efe4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800efe6:	4b2f      	ldr	r3, [pc, #188]	; (800f0a4 <tcp_input+0x4c0>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	617b      	str	r3, [r7, #20]
 800efec:	e02a      	b.n	800f044 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	7a1b      	ldrb	r3, [r3, #8]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d00c      	beq.n	800f010 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	7a1a      	ldrb	r2, [r3, #8]
 800effa:	4b22      	ldr	r3, [pc, #136]	; (800f084 <tcp_input+0x4a0>)
 800effc:	685b      	ldr	r3, [r3, #4]
 800effe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f002:	3301      	adds	r3, #1
 800f004:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f006:	429a      	cmp	r2, r3
 800f008:	d002      	beq.n	800f010 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	61bb      	str	r3, [r7, #24]
        continue;
 800f00e:	e016      	b.n	800f03e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	8ada      	ldrh	r2, [r3, #22]
 800f014:	4b1a      	ldr	r3, [pc, #104]	; (800f080 <tcp_input+0x49c>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	885b      	ldrh	r3, [r3, #2]
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d10c      	bne.n	800f03a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	681a      	ldr	r2, [r3, #0]
 800f024:	4b17      	ldr	r3, [pc, #92]	; (800f084 <tcp_input+0x4a0>)
 800f026:	695b      	ldr	r3, [r3, #20]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d00f      	beq.n	800f04c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f02c:	697b      	ldr	r3, [r7, #20]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00d      	beq.n	800f04e <tcp_input+0x46a>
 800f032:	697b      	ldr	r3, [r7, #20]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d009      	beq.n	800f04e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	68db      	ldr	r3, [r3, #12]
 800f042:	617b      	str	r3, [r7, #20]
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1d1      	bne.n	800efee <tcp_input+0x40a>
 800f04a:	e000      	b.n	800f04e <tcp_input+0x46a>
            break;
 800f04c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f04e:	697b      	ldr	r3, [r7, #20]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d029      	beq.n	800f0a8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00a      	beq.n	800f070 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	68da      	ldr	r2, [r3, #12]
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f062:	4b10      	ldr	r3, [pc, #64]	; (800f0a4 <tcp_input+0x4c0>)
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f06a:	4a0e      	ldr	r2, [pc, #56]	; (800f0a4 <tcp_input+0x4c0>)
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f070:	6978      	ldr	r0, [r7, #20]
 800f072:	f000 fa03 	bl	800f47c <tcp_listen_input>
      }
      pbuf_free(p);
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f7fd feea 	bl	800ce50 <pbuf_free>
      return;
 800f07c:	e1a8      	b.n	800f3d0 <tcp_input+0x7ec>
 800f07e:	bf00      	nop
 800f080:	20008f48 	.word	0x20008f48
 800f084:	200059b0 	.word	0x200059b0
 800f088:	080184bc 	.word	0x080184bc
 800f08c:	080185e8 	.word	0x080185e8
 800f090:	08018508 	.word	0x08018508
 800f094:	20008f2c 	.word	0x20008f2c
 800f098:	08018614 	.word	0x08018614
 800f09c:	20008f30 	.word	0x20008f30
 800f0a0:	08018640 	.word	0x08018640
 800f0a4:	20008f28 	.word	0x20008f28
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	f000 8158 	beq.w	800f360 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f0b0:	4b95      	ldr	r3, [pc, #596]	; (800f308 <tcp_input+0x724>)
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	891a      	ldrh	r2, [r3, #8]
 800f0ba:	4b93      	ldr	r3, [pc, #588]	; (800f308 <tcp_input+0x724>)
 800f0bc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f0be:	4a92      	ldr	r2, [pc, #584]	; (800f308 <tcp_input+0x724>)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f0c4:	4b91      	ldr	r3, [pc, #580]	; (800f30c <tcp_input+0x728>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4a8f      	ldr	r2, [pc, #572]	; (800f308 <tcp_input+0x724>)
 800f0ca:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f0cc:	4b90      	ldr	r3, [pc, #576]	; (800f310 <tcp_input+0x72c>)
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f0d2:	4b90      	ldr	r3, [pc, #576]	; (800f314 <tcp_input+0x730>)
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f0d8:	4b8f      	ldr	r3, [pc, #572]	; (800f318 <tcp_input+0x734>)
 800f0da:	2200      	movs	r2, #0
 800f0dc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f0de:	4b8f      	ldr	r3, [pc, #572]	; (800f31c <tcp_input+0x738>)
 800f0e0:	781b      	ldrb	r3, [r3, #0]
 800f0e2:	f003 0308 	and.w	r3, r3, #8
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d006      	beq.n	800f0f8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	7b5b      	ldrb	r3, [r3, #13]
 800f0ee:	f043 0301 	orr.w	r3, r3, #1
 800f0f2:	b2da      	uxtb	r2, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f0f8:	69fb      	ldr	r3, [r7, #28]
 800f0fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d017      	beq.n	800f130 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f100:	69f8      	ldr	r0, [r7, #28]
 800f102:	f7ff f929 	bl	800e358 <tcp_process_refused_data>
 800f106:	4603      	mov	r3, r0
 800f108:	f113 0f0d 	cmn.w	r3, #13
 800f10c:	d007      	beq.n	800f11e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f10e:	69fb      	ldr	r3, [r7, #28]
 800f110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f112:	2b00      	cmp	r3, #0
 800f114:	d00c      	beq.n	800f130 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f116:	4b82      	ldr	r3, [pc, #520]	; (800f320 <tcp_input+0x73c>)
 800f118:	881b      	ldrh	r3, [r3, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d008      	beq.n	800f130 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f122:	2b00      	cmp	r3, #0
 800f124:	f040 80e3 	bne.w	800f2ee <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f128:	69f8      	ldr	r0, [r7, #28]
 800f12a:	f003 f9ad 	bl	8012488 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f12e:	e0de      	b.n	800f2ee <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f130:	4a7c      	ldr	r2, [pc, #496]	; (800f324 <tcp_input+0x740>)
 800f132:	69fb      	ldr	r3, [r7, #28]
 800f134:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f136:	69f8      	ldr	r0, [r7, #28]
 800f138:	f000 fb18 	bl	800f76c <tcp_process>
 800f13c:	4603      	mov	r3, r0
 800f13e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f140:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f144:	f113 0f0d 	cmn.w	r3, #13
 800f148:	f000 80d3 	beq.w	800f2f2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f14c:	4b71      	ldr	r3, [pc, #452]	; (800f314 <tcp_input+0x730>)
 800f14e:	781b      	ldrb	r3, [r3, #0]
 800f150:	f003 0308 	and.w	r3, r3, #8
 800f154:	2b00      	cmp	r3, #0
 800f156:	d015      	beq.n	800f184 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f158:	69fb      	ldr	r3, [r7, #28]
 800f15a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d008      	beq.n	800f174 <tcp_input+0x590>
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f168:	69fa      	ldr	r2, [r7, #28]
 800f16a:	6912      	ldr	r2, [r2, #16]
 800f16c:	f06f 010d 	mvn.w	r1, #13
 800f170:	4610      	mov	r0, r2
 800f172:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f174:	69f9      	ldr	r1, [r7, #28]
 800f176:	486c      	ldr	r0, [pc, #432]	; (800f328 <tcp_input+0x744>)
 800f178:	f7ff fbbc 	bl	800e8f4 <tcp_pcb_remove>
        tcp_free(pcb);
 800f17c:	69f8      	ldr	r0, [r7, #28]
 800f17e:	f7fe f9a9 	bl	800d4d4 <tcp_free>
 800f182:	e0da      	b.n	800f33a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f184:	2300      	movs	r3, #0
 800f186:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f188:	4b63      	ldr	r3, [pc, #396]	; (800f318 <tcp_input+0x734>)
 800f18a:	881b      	ldrh	r3, [r3, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d01d      	beq.n	800f1cc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f190:	4b61      	ldr	r3, [pc, #388]	; (800f318 <tcp_input+0x734>)
 800f192:	881b      	ldrh	r3, [r3, #0]
 800f194:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00a      	beq.n	800f1b6 <tcp_input+0x5d2>
 800f1a0:	69fb      	ldr	r3, [r7, #28]
 800f1a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f1a6:	69fa      	ldr	r2, [r7, #28]
 800f1a8:	6910      	ldr	r0, [r2, #16]
 800f1aa:	89fa      	ldrh	r2, [r7, #14]
 800f1ac:	69f9      	ldr	r1, [r7, #28]
 800f1ae:	4798      	blx	r3
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	74fb      	strb	r3, [r7, #19]
 800f1b4:	e001      	b.n	800f1ba <tcp_input+0x5d6>
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f1ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f1be:	f113 0f0d 	cmn.w	r3, #13
 800f1c2:	f000 8098 	beq.w	800f2f6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f1c6:	4b54      	ldr	r3, [pc, #336]	; (800f318 <tcp_input+0x734>)
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f1cc:	69f8      	ldr	r0, [r7, #28]
 800f1ce:	f000 f915 	bl	800f3fc <tcp_input_delayed_close>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	f040 8090 	bne.w	800f2fa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f1da:	4b4d      	ldr	r3, [pc, #308]	; (800f310 <tcp_input+0x72c>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d041      	beq.n	800f266 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f1e2:	69fb      	ldr	r3, [r7, #28]
 800f1e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d006      	beq.n	800f1f8 <tcp_input+0x614>
 800f1ea:	4b50      	ldr	r3, [pc, #320]	; (800f32c <tcp_input+0x748>)
 800f1ec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f1f0:	494f      	ldr	r1, [pc, #316]	; (800f330 <tcp_input+0x74c>)
 800f1f2:	4850      	ldr	r0, [pc, #320]	; (800f334 <tcp_input+0x750>)
 800f1f4:	f006 ffec 	bl	80161d0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	8b5b      	ldrh	r3, [r3, #26]
 800f1fc:	f003 0310 	and.w	r3, r3, #16
 800f200:	2b00      	cmp	r3, #0
 800f202:	d008      	beq.n	800f216 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f204:	4b42      	ldr	r3, [pc, #264]	; (800f310 <tcp_input+0x72c>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fd fe21 	bl	800ce50 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f20e:	69f8      	ldr	r0, [r7, #28]
 800f210:	f7fe fc48 	bl	800daa4 <tcp_abort>
            goto aborted;
 800f214:	e091      	b.n	800f33a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00c      	beq.n	800f23a <tcp_input+0x656>
 800f220:	69fb      	ldr	r3, [r7, #28]
 800f222:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f226:	69fb      	ldr	r3, [r7, #28]
 800f228:	6918      	ldr	r0, [r3, #16]
 800f22a:	4b39      	ldr	r3, [pc, #228]	; (800f310 <tcp_input+0x72c>)
 800f22c:	681a      	ldr	r2, [r3, #0]
 800f22e:	2300      	movs	r3, #0
 800f230:	69f9      	ldr	r1, [r7, #28]
 800f232:	47a0      	blx	r4
 800f234:	4603      	mov	r3, r0
 800f236:	74fb      	strb	r3, [r7, #19]
 800f238:	e008      	b.n	800f24c <tcp_input+0x668>
 800f23a:	4b35      	ldr	r3, [pc, #212]	; (800f310 <tcp_input+0x72c>)
 800f23c:	681a      	ldr	r2, [r3, #0]
 800f23e:	2300      	movs	r3, #0
 800f240:	69f9      	ldr	r1, [r7, #28]
 800f242:	2000      	movs	r0, #0
 800f244:	f7ff f95e 	bl	800e504 <tcp_recv_null>
 800f248:	4603      	mov	r3, r0
 800f24a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f24c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f250:	f113 0f0d 	cmn.w	r3, #13
 800f254:	d053      	beq.n	800f2fe <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f256:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d003      	beq.n	800f266 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f25e:	4b2c      	ldr	r3, [pc, #176]	; (800f310 <tcp_input+0x72c>)
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	69fb      	ldr	r3, [r7, #28]
 800f264:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f266:	4b2b      	ldr	r3, [pc, #172]	; (800f314 <tcp_input+0x730>)
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	f003 0320 	and.w	r3, r3, #32
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d030      	beq.n	800f2d4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f272:	69fb      	ldr	r3, [r7, #28]
 800f274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f276:	2b00      	cmp	r3, #0
 800f278:	d009      	beq.n	800f28e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f27e:	7b5a      	ldrb	r2, [r3, #13]
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f284:	f042 0220 	orr.w	r2, r2, #32
 800f288:	b2d2      	uxtb	r2, r2
 800f28a:	735a      	strb	r2, [r3, #13]
 800f28c:	e022      	b.n	800f2d4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f292:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f296:	d005      	beq.n	800f2a4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f298:	69fb      	ldr	r3, [r7, #28]
 800f29a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f29c:	3301      	adds	r3, #1
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f2a4:	69fb      	ldr	r3, [r7, #28]
 800f2a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d00b      	beq.n	800f2c6 <tcp_input+0x6e2>
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	6918      	ldr	r0, [r3, #16]
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	69f9      	ldr	r1, [r7, #28]
 800f2be:	47a0      	blx	r4
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	74fb      	strb	r3, [r7, #19]
 800f2c4:	e001      	b.n	800f2ca <tcp_input+0x6e6>
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f2ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f2ce:	f113 0f0d 	cmn.w	r3, #13
 800f2d2:	d016      	beq.n	800f302 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f2d4:	4b13      	ldr	r3, [pc, #76]	; (800f324 <tcp_input+0x740>)
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f2da:	69f8      	ldr	r0, [r7, #28]
 800f2dc:	f000 f88e 	bl	800f3fc <tcp_input_delayed_close>
 800f2e0:	4603      	mov	r3, r0
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d128      	bne.n	800f338 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f2e6:	69f8      	ldr	r0, [r7, #28]
 800f2e8:	f002 fac8 	bl	801187c <tcp_output>
 800f2ec:	e025      	b.n	800f33a <tcp_input+0x756>
        goto aborted;
 800f2ee:	bf00      	nop
 800f2f0:	e023      	b.n	800f33a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f2f2:	bf00      	nop
 800f2f4:	e021      	b.n	800f33a <tcp_input+0x756>
              goto aborted;
 800f2f6:	bf00      	nop
 800f2f8:	e01f      	b.n	800f33a <tcp_input+0x756>
          goto aborted;
 800f2fa:	bf00      	nop
 800f2fc:	e01d      	b.n	800f33a <tcp_input+0x756>
            goto aborted;
 800f2fe:	bf00      	nop
 800f300:	e01b      	b.n	800f33a <tcp_input+0x756>
              goto aborted;
 800f302:	bf00      	nop
 800f304:	e019      	b.n	800f33a <tcp_input+0x756>
 800f306:	bf00      	nop
 800f308:	20008f38 	.word	0x20008f38
 800f30c:	20008f48 	.word	0x20008f48
 800f310:	20008f68 	.word	0x20008f68
 800f314:	20008f65 	.word	0x20008f65
 800f318:	20008f60 	.word	0x20008f60
 800f31c:	20008f64 	.word	0x20008f64
 800f320:	20008f62 	.word	0x20008f62
 800f324:	20008f6c 	.word	0x20008f6c
 800f328:	20008f2c 	.word	0x20008f2c
 800f32c:	080184bc 	.word	0x080184bc
 800f330:	08018670 	.word	0x08018670
 800f334:	08018508 	.word	0x08018508
          goto aborted;
 800f338:	bf00      	nop
    tcp_input_pcb = NULL;
 800f33a:	4b27      	ldr	r3, [pc, #156]	; (800f3d8 <tcp_input+0x7f4>)
 800f33c:	2200      	movs	r2, #0
 800f33e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f340:	4b26      	ldr	r3, [pc, #152]	; (800f3dc <tcp_input+0x7f8>)
 800f342:	2200      	movs	r2, #0
 800f344:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f346:	4b26      	ldr	r3, [pc, #152]	; (800f3e0 <tcp_input+0x7fc>)
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d03f      	beq.n	800f3ce <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f34e:	4b24      	ldr	r3, [pc, #144]	; (800f3e0 <tcp_input+0x7fc>)
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	4618      	mov	r0, r3
 800f354:	f7fd fd7c 	bl	800ce50 <pbuf_free>
      inseg.p = NULL;
 800f358:	4b21      	ldr	r3, [pc, #132]	; (800f3e0 <tcp_input+0x7fc>)
 800f35a:	2200      	movs	r2, #0
 800f35c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f35e:	e036      	b.n	800f3ce <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f360:	4b20      	ldr	r3, [pc, #128]	; (800f3e4 <tcp_input+0x800>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	899b      	ldrh	r3, [r3, #12]
 800f366:	b29b      	uxth	r3, r3
 800f368:	4618      	mov	r0, r3
 800f36a:	f7fc fa13 	bl	800b794 <lwip_htons>
 800f36e:	4603      	mov	r3, r0
 800f370:	b2db      	uxtb	r3, r3
 800f372:	f003 0304 	and.w	r3, r3, #4
 800f376:	2b00      	cmp	r3, #0
 800f378:	d118      	bne.n	800f3ac <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f37a:	4b1b      	ldr	r3, [pc, #108]	; (800f3e8 <tcp_input+0x804>)
 800f37c:	6819      	ldr	r1, [r3, #0]
 800f37e:	4b1b      	ldr	r3, [pc, #108]	; (800f3ec <tcp_input+0x808>)
 800f380:	881b      	ldrh	r3, [r3, #0]
 800f382:	461a      	mov	r2, r3
 800f384:	4b1a      	ldr	r3, [pc, #104]	; (800f3f0 <tcp_input+0x80c>)
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f38a:	4b16      	ldr	r3, [pc, #88]	; (800f3e4 <tcp_input+0x800>)
 800f38c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f38e:	885b      	ldrh	r3, [r3, #2]
 800f390:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f392:	4a14      	ldr	r2, [pc, #80]	; (800f3e4 <tcp_input+0x800>)
 800f394:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f396:	8812      	ldrh	r2, [r2, #0]
 800f398:	b292      	uxth	r2, r2
 800f39a:	9202      	str	r2, [sp, #8]
 800f39c:	9301      	str	r3, [sp, #4]
 800f39e:	4b15      	ldr	r3, [pc, #84]	; (800f3f4 <tcp_input+0x810>)
 800f3a0:	9300      	str	r3, [sp, #0]
 800f3a2:	4b15      	ldr	r3, [pc, #84]	; (800f3f8 <tcp_input+0x814>)
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	f003 f81c 	bl	80123e4 <tcp_rst>
    pbuf_free(p);
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f7fd fd4f 	bl	800ce50 <pbuf_free>
  return;
 800f3b2:	e00c      	b.n	800f3ce <tcp_input+0x7ea>
    goto dropped;
 800f3b4:	bf00      	nop
 800f3b6:	e006      	b.n	800f3c6 <tcp_input+0x7e2>
    goto dropped;
 800f3b8:	bf00      	nop
 800f3ba:	e004      	b.n	800f3c6 <tcp_input+0x7e2>
    goto dropped;
 800f3bc:	bf00      	nop
 800f3be:	e002      	b.n	800f3c6 <tcp_input+0x7e2>
      goto dropped;
 800f3c0:	bf00      	nop
 800f3c2:	e000      	b.n	800f3c6 <tcp_input+0x7e2>
      goto dropped;
 800f3c4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f7fd fd42 	bl	800ce50 <pbuf_free>
 800f3cc:	e000      	b.n	800f3d0 <tcp_input+0x7ec>
  return;
 800f3ce:	bf00      	nop
}
 800f3d0:	3724      	adds	r7, #36	; 0x24
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd90      	pop	{r4, r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	20008f6c 	.word	0x20008f6c
 800f3dc:	20008f68 	.word	0x20008f68
 800f3e0:	20008f38 	.word	0x20008f38
 800f3e4:	20008f48 	.word	0x20008f48
 800f3e8:	20008f5c 	.word	0x20008f5c
 800f3ec:	20008f62 	.word	0x20008f62
 800f3f0:	20008f58 	.word	0x20008f58
 800f3f4:	200059c0 	.word	0x200059c0
 800f3f8:	200059c4 	.word	0x200059c4

0800f3fc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d106      	bne.n	800f418 <tcp_input_delayed_close+0x1c>
 800f40a:	4b17      	ldr	r3, [pc, #92]	; (800f468 <tcp_input_delayed_close+0x6c>)
 800f40c:	f240 225a 	movw	r2, #602	; 0x25a
 800f410:	4916      	ldr	r1, [pc, #88]	; (800f46c <tcp_input_delayed_close+0x70>)
 800f412:	4817      	ldr	r0, [pc, #92]	; (800f470 <tcp_input_delayed_close+0x74>)
 800f414:	f006 fedc 	bl	80161d0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f418:	4b16      	ldr	r3, [pc, #88]	; (800f474 <tcp_input_delayed_close+0x78>)
 800f41a:	781b      	ldrb	r3, [r3, #0]
 800f41c:	f003 0310 	and.w	r3, r3, #16
 800f420:	2b00      	cmp	r3, #0
 800f422:	d01c      	beq.n	800f45e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	8b5b      	ldrh	r3, [r3, #26]
 800f428:	f003 0310 	and.w	r3, r3, #16
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d10d      	bne.n	800f44c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f436:	2b00      	cmp	r3, #0
 800f438:	d008      	beq.n	800f44c <tcp_input_delayed_close+0x50>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	6912      	ldr	r2, [r2, #16]
 800f444:	f06f 010e 	mvn.w	r1, #14
 800f448:	4610      	mov	r0, r2
 800f44a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f44c:	6879      	ldr	r1, [r7, #4]
 800f44e:	480a      	ldr	r0, [pc, #40]	; (800f478 <tcp_input_delayed_close+0x7c>)
 800f450:	f7ff fa50 	bl	800e8f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f7fe f83d 	bl	800d4d4 <tcp_free>
    return 1;
 800f45a:	2301      	movs	r3, #1
 800f45c:	e000      	b.n	800f460 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f45e:	2300      	movs	r3, #0
}
 800f460:	4618      	mov	r0, r3
 800f462:	3708      	adds	r7, #8
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	080184bc 	.word	0x080184bc
 800f46c:	0801868c 	.word	0x0801868c
 800f470:	08018508 	.word	0x08018508
 800f474:	20008f65 	.word	0x20008f65
 800f478:	20008f2c 	.word	0x20008f2c

0800f47c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f47c:	b590      	push	{r4, r7, lr}
 800f47e:	b08b      	sub	sp, #44	; 0x2c
 800f480:	af04      	add	r7, sp, #16
 800f482:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f484:	4b6f      	ldr	r3, [pc, #444]	; (800f644 <tcp_listen_input+0x1c8>)
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	f003 0304 	and.w	r3, r3, #4
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	f040 80d2 	bne.w	800f636 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d106      	bne.n	800f4a6 <tcp_listen_input+0x2a>
 800f498:	4b6b      	ldr	r3, [pc, #428]	; (800f648 <tcp_listen_input+0x1cc>)
 800f49a:	f240 2281 	movw	r2, #641	; 0x281
 800f49e:	496b      	ldr	r1, [pc, #428]	; (800f64c <tcp_listen_input+0x1d0>)
 800f4a0:	486b      	ldr	r0, [pc, #428]	; (800f650 <tcp_listen_input+0x1d4>)
 800f4a2:	f006 fe95 	bl	80161d0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f4a6:	4b67      	ldr	r3, [pc, #412]	; (800f644 <tcp_listen_input+0x1c8>)
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	f003 0310 	and.w	r3, r3, #16
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d019      	beq.n	800f4e6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4b2:	4b68      	ldr	r3, [pc, #416]	; (800f654 <tcp_listen_input+0x1d8>)
 800f4b4:	6819      	ldr	r1, [r3, #0]
 800f4b6:	4b68      	ldr	r3, [pc, #416]	; (800f658 <tcp_listen_input+0x1dc>)
 800f4b8:	881b      	ldrh	r3, [r3, #0]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	4b67      	ldr	r3, [pc, #412]	; (800f65c <tcp_listen_input+0x1e0>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4c2:	4b67      	ldr	r3, [pc, #412]	; (800f660 <tcp_listen_input+0x1e4>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4c6:	885b      	ldrh	r3, [r3, #2]
 800f4c8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f4ca:	4a65      	ldr	r2, [pc, #404]	; (800f660 <tcp_listen_input+0x1e4>)
 800f4cc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f4ce:	8812      	ldrh	r2, [r2, #0]
 800f4d0:	b292      	uxth	r2, r2
 800f4d2:	9202      	str	r2, [sp, #8]
 800f4d4:	9301      	str	r3, [sp, #4]
 800f4d6:	4b63      	ldr	r3, [pc, #396]	; (800f664 <tcp_listen_input+0x1e8>)
 800f4d8:	9300      	str	r3, [sp, #0]
 800f4da:	4b63      	ldr	r3, [pc, #396]	; (800f668 <tcp_listen_input+0x1ec>)
 800f4dc:	4602      	mov	r2, r0
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f002 ff80 	bl	80123e4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f4e4:	e0a9      	b.n	800f63a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f4e6:	4b57      	ldr	r3, [pc, #348]	; (800f644 <tcp_listen_input+0x1c8>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	f003 0302 	and.w	r3, r3, #2
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f000 80a3 	beq.w	800f63a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	7d5b      	ldrb	r3, [r3, #21]
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7ff f927 	bl	800e74c <tcp_alloc>
 800f4fe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d111      	bne.n	800f52a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	699b      	ldr	r3, [r3, #24]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d00a      	beq.n	800f524 <tcp_listen_input+0xa8>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	699b      	ldr	r3, [r3, #24]
 800f512:	687a      	ldr	r2, [r7, #4]
 800f514:	6910      	ldr	r0, [r2, #16]
 800f516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f51a:	2100      	movs	r1, #0
 800f51c:	4798      	blx	r3
 800f51e:	4603      	mov	r3, r0
 800f520:	73bb      	strb	r3, [r7, #14]
      return;
 800f522:	e08b      	b.n	800f63c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f524:	23f0      	movs	r3, #240	; 0xf0
 800f526:	73bb      	strb	r3, [r7, #14]
      return;
 800f528:	e088      	b.n	800f63c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f52a:	4b50      	ldr	r3, [pc, #320]	; (800f66c <tcp_listen_input+0x1f0>)
 800f52c:	695a      	ldr	r2, [r3, #20]
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f532:	4b4e      	ldr	r3, [pc, #312]	; (800f66c <tcp_listen_input+0x1f0>)
 800f534:	691a      	ldr	r2, [r3, #16]
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	8ada      	ldrh	r2, [r3, #22]
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f542:	4b47      	ldr	r3, [pc, #284]	; (800f660 <tcp_listen_input+0x1e4>)
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	881b      	ldrh	r3, [r3, #0]
 800f548:	b29a      	uxth	r2, r3
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	2203      	movs	r2, #3
 800f552:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f554:	4b41      	ldr	r3, [pc, #260]	; (800f65c <tcp_listen_input+0x1e0>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	1c5a      	adds	r2, r3, #1
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f566:	6978      	ldr	r0, [r7, #20]
 800f568:	f7ff fa58 	bl	800ea1c <tcp_next_iss>
 800f56c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	693a      	ldr	r2, [r7, #16]
 800f572:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f574:	697b      	ldr	r3, [r7, #20]
 800f576:	693a      	ldr	r2, [r7, #16]
 800f578:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f57a:	697b      	ldr	r3, [r7, #20]
 800f57c:	693a      	ldr	r2, [r7, #16]
 800f57e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	693a      	ldr	r2, [r7, #16]
 800f584:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f586:	4b35      	ldr	r3, [pc, #212]	; (800f65c <tcp_listen_input+0x1e0>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	1e5a      	subs	r2, r3, #1
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	691a      	ldr	r2, [r3, #16]
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	7a5b      	ldrb	r3, [r3, #9]
 800f5a2:	f003 030c 	and.w	r3, r3, #12
 800f5a6:	b2da      	uxtb	r2, r3
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	7a1a      	ldrb	r2, [r3, #8]
 800f5b0:	697b      	ldr	r3, [r7, #20]
 800f5b2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f5b4:	4b2e      	ldr	r3, [pc, #184]	; (800f670 <tcp_listen_input+0x1f4>)
 800f5b6:	681a      	ldr	r2, [r3, #0]
 800f5b8:	697b      	ldr	r3, [r7, #20]
 800f5ba:	60da      	str	r2, [r3, #12]
 800f5bc:	4a2c      	ldr	r2, [pc, #176]	; (800f670 <tcp_listen_input+0x1f4>)
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	6013      	str	r3, [r2, #0]
 800f5c2:	f003 f8d1 	bl	8012768 <tcp_timer_needed>
 800f5c6:	4b2b      	ldr	r3, [pc, #172]	; (800f674 <tcp_listen_input+0x1f8>)
 800f5c8:	2201      	movs	r2, #1
 800f5ca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f5cc:	6978      	ldr	r0, [r7, #20]
 800f5ce:	f001 fd8f 	bl	80110f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f5d2:	4b23      	ldr	r3, [pc, #140]	; (800f660 <tcp_listen_input+0x1e4>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	89db      	ldrh	r3, [r3, #14]
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f5ec:	697b      	ldr	r3, [r7, #20]
 800f5ee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f5f0:	697b      	ldr	r3, [r7, #20]
 800f5f2:	3304      	adds	r3, #4
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	f005 f827 	bl	8014648 <ip4_route>
 800f5fa:	4601      	mov	r1, r0
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	3304      	adds	r3, #4
 800f600:	461a      	mov	r2, r3
 800f602:	4620      	mov	r0, r4
 800f604:	f7ff fa30 	bl	800ea68 <tcp_eff_send_mss_netif>
 800f608:	4603      	mov	r3, r0
 800f60a:	461a      	mov	r2, r3
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f610:	2112      	movs	r1, #18
 800f612:	6978      	ldr	r0, [r7, #20]
 800f614:	f002 f844 	bl	80116a0 <tcp_enqueue_flags>
 800f618:	4603      	mov	r3, r0
 800f61a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f61c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d004      	beq.n	800f62e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f624:	2100      	movs	r1, #0
 800f626:	6978      	ldr	r0, [r7, #20]
 800f628:	f7fe f97e 	bl	800d928 <tcp_abandon>
      return;
 800f62c:	e006      	b.n	800f63c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f62e:	6978      	ldr	r0, [r7, #20]
 800f630:	f002 f924 	bl	801187c <tcp_output>
  return;
 800f634:	e001      	b.n	800f63a <tcp_listen_input+0x1be>
    return;
 800f636:	bf00      	nop
 800f638:	e000      	b.n	800f63c <tcp_listen_input+0x1c0>
  return;
 800f63a:	bf00      	nop
}
 800f63c:	371c      	adds	r7, #28
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd90      	pop	{r4, r7, pc}
 800f642:	bf00      	nop
 800f644:	20008f64 	.word	0x20008f64
 800f648:	080184bc 	.word	0x080184bc
 800f64c:	080186b4 	.word	0x080186b4
 800f650:	08018508 	.word	0x08018508
 800f654:	20008f5c 	.word	0x20008f5c
 800f658:	20008f62 	.word	0x20008f62
 800f65c:	20008f58 	.word	0x20008f58
 800f660:	20008f48 	.word	0x20008f48
 800f664:	200059c0 	.word	0x200059c0
 800f668:	200059c4 	.word	0x200059c4
 800f66c:	200059b0 	.word	0x200059b0
 800f670:	20008f2c 	.word	0x20008f2c
 800f674:	20008f34 	.word	0x20008f34

0800f678 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af04      	add	r7, sp, #16
 800f67e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f680:	4b2f      	ldr	r3, [pc, #188]	; (800f740 <tcp_timewait_input+0xc8>)
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	f003 0304 	and.w	r3, r3, #4
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d153      	bne.n	800f734 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d106      	bne.n	800f6a0 <tcp_timewait_input+0x28>
 800f692:	4b2c      	ldr	r3, [pc, #176]	; (800f744 <tcp_timewait_input+0xcc>)
 800f694:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f698:	492b      	ldr	r1, [pc, #172]	; (800f748 <tcp_timewait_input+0xd0>)
 800f69a:	482c      	ldr	r0, [pc, #176]	; (800f74c <tcp_timewait_input+0xd4>)
 800f69c:	f006 fd98 	bl	80161d0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f6a0:	4b27      	ldr	r3, [pc, #156]	; (800f740 <tcp_timewait_input+0xc8>)
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	f003 0302 	and.w	r3, r3, #2
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d02a      	beq.n	800f702 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f6ac:	4b28      	ldr	r3, [pc, #160]	; (800f750 <tcp_timewait_input+0xd8>)
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b4:	1ad3      	subs	r3, r2, r3
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	db2d      	blt.n	800f716 <tcp_timewait_input+0x9e>
 800f6ba:	4b25      	ldr	r3, [pc, #148]	; (800f750 <tcp_timewait_input+0xd8>)
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c2:	6879      	ldr	r1, [r7, #4]
 800f6c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6c6:	440b      	add	r3, r1
 800f6c8:	1ad3      	subs	r3, r2, r3
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	dc23      	bgt.n	800f716 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6ce:	4b21      	ldr	r3, [pc, #132]	; (800f754 <tcp_timewait_input+0xdc>)
 800f6d0:	6819      	ldr	r1, [r3, #0]
 800f6d2:	4b21      	ldr	r3, [pc, #132]	; (800f758 <tcp_timewait_input+0xe0>)
 800f6d4:	881b      	ldrh	r3, [r3, #0]
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	4b1d      	ldr	r3, [pc, #116]	; (800f750 <tcp_timewait_input+0xd8>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f6de:	4b1f      	ldr	r3, [pc, #124]	; (800f75c <tcp_timewait_input+0xe4>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6e2:	885b      	ldrh	r3, [r3, #2]
 800f6e4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f6e6:	4a1d      	ldr	r2, [pc, #116]	; (800f75c <tcp_timewait_input+0xe4>)
 800f6e8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6ea:	8812      	ldrh	r2, [r2, #0]
 800f6ec:	b292      	uxth	r2, r2
 800f6ee:	9202      	str	r2, [sp, #8]
 800f6f0:	9301      	str	r3, [sp, #4]
 800f6f2:	4b1b      	ldr	r3, [pc, #108]	; (800f760 <tcp_timewait_input+0xe8>)
 800f6f4:	9300      	str	r3, [sp, #0]
 800f6f6:	4b1b      	ldr	r3, [pc, #108]	; (800f764 <tcp_timewait_input+0xec>)
 800f6f8:	4602      	mov	r2, r0
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f002 fe72 	bl	80123e4 <tcp_rst>
      return;
 800f700:	e01b      	b.n	800f73a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f702:	4b0f      	ldr	r3, [pc, #60]	; (800f740 <tcp_timewait_input+0xc8>)
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	f003 0301 	and.w	r3, r3, #1
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d003      	beq.n	800f716 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f70e:	4b16      	ldr	r3, [pc, #88]	; (800f768 <tcp_timewait_input+0xf0>)
 800f710:	681a      	ldr	r2, [r3, #0]
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f716:	4b10      	ldr	r3, [pc, #64]	; (800f758 <tcp_timewait_input+0xe0>)
 800f718:	881b      	ldrh	r3, [r3, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00c      	beq.n	800f738 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	8b5b      	ldrh	r3, [r3, #26]
 800f722:	f043 0302 	orr.w	r3, r3, #2
 800f726:	b29a      	uxth	r2, r3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	f002 f8a5 	bl	801187c <tcp_output>
  }
  return;
 800f732:	e001      	b.n	800f738 <tcp_timewait_input+0xc0>
    return;
 800f734:	bf00      	nop
 800f736:	e000      	b.n	800f73a <tcp_timewait_input+0xc2>
  return;
 800f738:	bf00      	nop
}
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	20008f64 	.word	0x20008f64
 800f744:	080184bc 	.word	0x080184bc
 800f748:	080186d4 	.word	0x080186d4
 800f74c:	08018508 	.word	0x08018508
 800f750:	20008f58 	.word	0x20008f58
 800f754:	20008f5c 	.word	0x20008f5c
 800f758:	20008f62 	.word	0x20008f62
 800f75c:	20008f48 	.word	0x20008f48
 800f760:	200059c0 	.word	0x200059c0
 800f764:	200059c4 	.word	0x200059c4
 800f768:	20008f20 	.word	0x20008f20

0800f76c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f76c:	b590      	push	{r4, r7, lr}
 800f76e:	b08d      	sub	sp, #52	; 0x34
 800f770:	af04      	add	r7, sp, #16
 800f772:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f774:	2300      	movs	r3, #0
 800f776:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f778:	2300      	movs	r3, #0
 800f77a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d106      	bne.n	800f790 <tcp_process+0x24>
 800f782:	4b9d      	ldr	r3, [pc, #628]	; (800f9f8 <tcp_process+0x28c>)
 800f784:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f788:	499c      	ldr	r1, [pc, #624]	; (800f9fc <tcp_process+0x290>)
 800f78a:	489d      	ldr	r0, [pc, #628]	; (800fa00 <tcp_process+0x294>)
 800f78c:	f006 fd20 	bl	80161d0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f790:	4b9c      	ldr	r3, [pc, #624]	; (800fa04 <tcp_process+0x298>)
 800f792:	781b      	ldrb	r3, [r3, #0]
 800f794:	f003 0304 	and.w	r3, r3, #4
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d04e      	beq.n	800f83a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	7d1b      	ldrb	r3, [r3, #20]
 800f7a0:	2b02      	cmp	r3, #2
 800f7a2:	d108      	bne.n	800f7b6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f7a8:	4b97      	ldr	r3, [pc, #604]	; (800fa08 <tcp_process+0x29c>)
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	d123      	bne.n	800f7f8 <tcp_process+0x8c>
        acceptable = 1;
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	76fb      	strb	r3, [r7, #27]
 800f7b4:	e020      	b.n	800f7f8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7ba:	4b94      	ldr	r3, [pc, #592]	; (800fa0c <tcp_process+0x2a0>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d102      	bne.n	800f7c8 <tcp_process+0x5c>
        acceptable = 1;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	76fb      	strb	r3, [r7, #27]
 800f7c6:	e017      	b.n	800f7f8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f7c8:	4b90      	ldr	r3, [pc, #576]	; (800fa0c <tcp_process+0x2a0>)
 800f7ca:	681a      	ldr	r2, [r3, #0]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7d0:	1ad3      	subs	r3, r2, r3
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	db10      	blt.n	800f7f8 <tcp_process+0x8c>
 800f7d6:	4b8d      	ldr	r3, [pc, #564]	; (800fa0c <tcp_process+0x2a0>)
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7de:	6879      	ldr	r1, [r7, #4]
 800f7e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f7e2:	440b      	add	r3, r1
 800f7e4:	1ad3      	subs	r3, r2, r3
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	dc06      	bgt.n	800f7f8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	8b5b      	ldrh	r3, [r3, #26]
 800f7ee:	f043 0302 	orr.w	r3, r3, #2
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f7f8:	7efb      	ldrb	r3, [r7, #27]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d01b      	beq.n	800f836 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	7d1b      	ldrb	r3, [r3, #20]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d106      	bne.n	800f814 <tcp_process+0xa8>
 800f806:	4b7c      	ldr	r3, [pc, #496]	; (800f9f8 <tcp_process+0x28c>)
 800f808:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f80c:	4980      	ldr	r1, [pc, #512]	; (800fa10 <tcp_process+0x2a4>)
 800f80e:	487c      	ldr	r0, [pc, #496]	; (800fa00 <tcp_process+0x294>)
 800f810:	f006 fcde 	bl	80161d0 <iprintf>
      recv_flags |= TF_RESET;
 800f814:	4b7f      	ldr	r3, [pc, #508]	; (800fa14 <tcp_process+0x2a8>)
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	f043 0308 	orr.w	r3, r3, #8
 800f81c:	b2da      	uxtb	r2, r3
 800f81e:	4b7d      	ldr	r3, [pc, #500]	; (800fa14 <tcp_process+0x2a8>)
 800f820:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	8b5b      	ldrh	r3, [r3, #26]
 800f826:	f023 0301 	bic.w	r3, r3, #1
 800f82a:	b29a      	uxth	r2, r3
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f830:	f06f 030d 	mvn.w	r3, #13
 800f834:	e37a      	b.n	800ff2c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f836:	2300      	movs	r3, #0
 800f838:	e378      	b.n	800ff2c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f83a:	4b72      	ldr	r3, [pc, #456]	; (800fa04 <tcp_process+0x298>)
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	f003 0302 	and.w	r3, r3, #2
 800f842:	2b00      	cmp	r3, #0
 800f844:	d010      	beq.n	800f868 <tcp_process+0xfc>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	7d1b      	ldrb	r3, [r3, #20]
 800f84a:	2b02      	cmp	r3, #2
 800f84c:	d00c      	beq.n	800f868 <tcp_process+0xfc>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	7d1b      	ldrb	r3, [r3, #20]
 800f852:	2b03      	cmp	r3, #3
 800f854:	d008      	beq.n	800f868 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	8b5b      	ldrh	r3, [r3, #26]
 800f85a:	f043 0302 	orr.w	r3, r3, #2
 800f85e:	b29a      	uxth	r2, r3
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f864:	2300      	movs	r3, #0
 800f866:	e361      	b.n	800ff2c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	8b5b      	ldrh	r3, [r3, #26]
 800f86c:	f003 0310 	and.w	r3, r3, #16
 800f870:	2b00      	cmp	r3, #0
 800f872:	d103      	bne.n	800f87c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f874:	4b68      	ldr	r3, [pc, #416]	; (800fa18 <tcp_process+0x2ac>)
 800f876:	681a      	ldr	r2, [r3, #0]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2200      	movs	r2, #0
 800f880:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f001 fc2f 	bl	80110f0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	7d1b      	ldrb	r3, [r3, #20]
 800f896:	3b02      	subs	r3, #2
 800f898:	2b07      	cmp	r3, #7
 800f89a:	f200 8337 	bhi.w	800ff0c <tcp_process+0x7a0>
 800f89e:	a201      	add	r2, pc, #4	; (adr r2, 800f8a4 <tcp_process+0x138>)
 800f8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a4:	0800f8c5 	.word	0x0800f8c5
 800f8a8:	0800faf5 	.word	0x0800faf5
 800f8ac:	0800fc6d 	.word	0x0800fc6d
 800f8b0:	0800fc97 	.word	0x0800fc97
 800f8b4:	0800fdbb 	.word	0x0800fdbb
 800f8b8:	0800fc6d 	.word	0x0800fc6d
 800f8bc:	0800fe47 	.word	0x0800fe47
 800f8c0:	0800fed7 	.word	0x0800fed7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f8c4:	4b4f      	ldr	r3, [pc, #316]	; (800fa04 <tcp_process+0x298>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	f003 0310 	and.w	r3, r3, #16
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	f000 80e4 	beq.w	800fa9a <tcp_process+0x32e>
 800f8d2:	4b4c      	ldr	r3, [pc, #304]	; (800fa04 <tcp_process+0x298>)
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	f003 0302 	and.w	r3, r3, #2
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	f000 80dd 	beq.w	800fa9a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8e4:	1c5a      	adds	r2, r3, #1
 800f8e6:	4b48      	ldr	r3, [pc, #288]	; (800fa08 <tcp_process+0x29c>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	f040 80d5 	bne.w	800fa9a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f8f0:	4b46      	ldr	r3, [pc, #280]	; (800fa0c <tcp_process+0x2a0>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	1c5a      	adds	r2, r3, #1
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f902:	4b41      	ldr	r3, [pc, #260]	; (800fa08 <tcp_process+0x29c>)
 800f904:	681a      	ldr	r2, [r3, #0]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f90a:	4b44      	ldr	r3, [pc, #272]	; (800fa1c <tcp_process+0x2b0>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	89db      	ldrh	r3, [r3, #14]
 800f910:	b29a      	uxth	r2, r3
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f924:	4b39      	ldr	r3, [pc, #228]	; (800fa0c <tcp_process+0x2a0>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	1e5a      	subs	r2, r3, #1
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2204      	movs	r2, #4
 800f932:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	3304      	adds	r3, #4
 800f93c:	4618      	mov	r0, r3
 800f93e:	f004 fe83 	bl	8014648 <ip4_route>
 800f942:	4601      	mov	r1, r0
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	3304      	adds	r3, #4
 800f948:	461a      	mov	r2, r3
 800f94a:	4620      	mov	r0, r4
 800f94c:	f7ff f88c 	bl	800ea68 <tcp_eff_send_mss_netif>
 800f950:	4603      	mov	r3, r0
 800f952:	461a      	mov	r2, r3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f95c:	009a      	lsls	r2, r3, #2
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f962:	005b      	lsls	r3, r3, #1
 800f964:	f241 111c 	movw	r1, #4380	; 0x111c
 800f968:	428b      	cmp	r3, r1
 800f96a:	bf38      	it	cc
 800f96c:	460b      	movcc	r3, r1
 800f96e:	429a      	cmp	r2, r3
 800f970:	d204      	bcs.n	800f97c <tcp_process+0x210>
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	b29b      	uxth	r3, r3
 800f97a:	e00d      	b.n	800f998 <tcp_process+0x22c>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f980:	005b      	lsls	r3, r3, #1
 800f982:	f241 121c 	movw	r2, #4380	; 0x111c
 800f986:	4293      	cmp	r3, r2
 800f988:	d904      	bls.n	800f994 <tcp_process+0x228>
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f98e:	005b      	lsls	r3, r3, #1
 800f990:	b29b      	uxth	r3, r3
 800f992:	e001      	b.n	800f998 <tcp_process+0x22c>
 800f994:	f241 131c 	movw	r3, #4380	; 0x111c
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d106      	bne.n	800f9b6 <tcp_process+0x24a>
 800f9a8:	4b13      	ldr	r3, [pc, #76]	; (800f9f8 <tcp_process+0x28c>)
 800f9aa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f9ae:	491c      	ldr	r1, [pc, #112]	; (800fa20 <tcp_process+0x2b4>)
 800f9b0:	4813      	ldr	r0, [pc, #76]	; (800fa00 <tcp_process+0x294>)
 800f9b2:	f006 fc0d 	bl	80161d0 <iprintf>
        --pcb->snd_queuelen;
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9bc:	3b01      	subs	r3, #1
 800f9be:	b29a      	uxth	r2, r3
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ca:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f9cc:	69fb      	ldr	r3, [r7, #28]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d12a      	bne.n	800fa28 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9d6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d106      	bne.n	800f9ec <tcp_process+0x280>
 800f9de:	4b06      	ldr	r3, [pc, #24]	; (800f9f8 <tcp_process+0x28c>)
 800f9e0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f9e4:	490f      	ldr	r1, [pc, #60]	; (800fa24 <tcp_process+0x2b8>)
 800f9e6:	4806      	ldr	r0, [pc, #24]	; (800fa00 <tcp_process+0x294>)
 800f9e8:	f006 fbf2 	bl	80161d0 <iprintf>
          pcb->unsent = rseg->next;
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	66da      	str	r2, [r3, #108]	; 0x6c
 800f9f4:	e01c      	b.n	800fa30 <tcp_process+0x2c4>
 800f9f6:	bf00      	nop
 800f9f8:	080184bc 	.word	0x080184bc
 800f9fc:	080186f4 	.word	0x080186f4
 800fa00:	08018508 	.word	0x08018508
 800fa04:	20008f64 	.word	0x20008f64
 800fa08:	20008f5c 	.word	0x20008f5c
 800fa0c:	20008f58 	.word	0x20008f58
 800fa10:	08018710 	.word	0x08018710
 800fa14:	20008f65 	.word	0x20008f65
 800fa18:	20008f20 	.word	0x20008f20
 800fa1c:	20008f48 	.word	0x20008f48
 800fa20:	08018730 	.word	0x08018730
 800fa24:	08018748 	.word	0x08018748
        } else {
          pcb->unacked = rseg->next;
 800fa28:	69fb      	ldr	r3, [r7, #28]
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800fa30:	69f8      	ldr	r0, [r7, #28]
 800fa32:	f7fe fd22 	bl	800e47a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d104      	bne.n	800fa48 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa44:	861a      	strh	r2, [r3, #48]	; 0x30
 800fa46:	e006      	b.n	800fa56 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2200      	movs	r2, #0
 800fa52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d00a      	beq.n	800fa76 <tcp_process+0x30a>
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fa66:	687a      	ldr	r2, [r7, #4]
 800fa68:	6910      	ldr	r0, [r2, #16]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	6879      	ldr	r1, [r7, #4]
 800fa6e:	4798      	blx	r3
 800fa70:	4603      	mov	r3, r0
 800fa72:	76bb      	strb	r3, [r7, #26]
 800fa74:	e001      	b.n	800fa7a <tcp_process+0x30e>
 800fa76:	2300      	movs	r3, #0
 800fa78:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fa7a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fa7e:	f113 0f0d 	cmn.w	r3, #13
 800fa82:	d102      	bne.n	800fa8a <tcp_process+0x31e>
          return ERR_ABRT;
 800fa84:	f06f 030c 	mvn.w	r3, #12
 800fa88:	e250      	b.n	800ff2c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	8b5b      	ldrh	r3, [r3, #26]
 800fa8e:	f043 0302 	orr.w	r3, r3, #2
 800fa92:	b29a      	uxth	r2, r3
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fa98:	e23a      	b.n	800ff10 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fa9a:	4b98      	ldr	r3, [pc, #608]	; (800fcfc <tcp_process+0x590>)
 800fa9c:	781b      	ldrb	r3, [r3, #0]
 800fa9e:	f003 0310 	and.w	r3, r3, #16
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	f000 8234 	beq.w	800ff10 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800faa8:	4b95      	ldr	r3, [pc, #596]	; (800fd00 <tcp_process+0x594>)
 800faaa:	6819      	ldr	r1, [r3, #0]
 800faac:	4b95      	ldr	r3, [pc, #596]	; (800fd04 <tcp_process+0x598>)
 800faae:	881b      	ldrh	r3, [r3, #0]
 800fab0:	461a      	mov	r2, r3
 800fab2:	4b95      	ldr	r3, [pc, #596]	; (800fd08 <tcp_process+0x59c>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fab8:	4b94      	ldr	r3, [pc, #592]	; (800fd0c <tcp_process+0x5a0>)
 800faba:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fabc:	885b      	ldrh	r3, [r3, #2]
 800fabe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fac0:	4a92      	ldr	r2, [pc, #584]	; (800fd0c <tcp_process+0x5a0>)
 800fac2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fac4:	8812      	ldrh	r2, [r2, #0]
 800fac6:	b292      	uxth	r2, r2
 800fac8:	9202      	str	r2, [sp, #8]
 800faca:	9301      	str	r3, [sp, #4]
 800facc:	4b90      	ldr	r3, [pc, #576]	; (800fd10 <tcp_process+0x5a4>)
 800face:	9300      	str	r3, [sp, #0]
 800fad0:	4b90      	ldr	r3, [pc, #576]	; (800fd14 <tcp_process+0x5a8>)
 800fad2:	4602      	mov	r2, r0
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f002 fc85 	bl	80123e4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fae0:	2b05      	cmp	r3, #5
 800fae2:	f200 8215 	bhi.w	800ff10 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f002 fa4f 	bl	8011f90 <tcp_rexmit_rto>
      break;
 800faf2:	e20d      	b.n	800ff10 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800faf4:	4b81      	ldr	r3, [pc, #516]	; (800fcfc <tcp_process+0x590>)
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	f003 0310 	and.w	r3, r3, #16
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	f000 80a1 	beq.w	800fc44 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fb02:	4b7f      	ldr	r3, [pc, #508]	; (800fd00 <tcp_process+0x594>)
 800fb04:	681a      	ldr	r2, [r3, #0]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb0a:	1ad3      	subs	r3, r2, r3
 800fb0c:	3b01      	subs	r3, #1
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	db7e      	blt.n	800fc10 <tcp_process+0x4a4>
 800fb12:	4b7b      	ldr	r3, [pc, #492]	; (800fd00 <tcp_process+0x594>)
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fb1a:	1ad3      	subs	r3, r2, r3
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	dc77      	bgt.n	800fc10 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2204      	movs	r2, #4
 800fb24:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d102      	bne.n	800fb34 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fb2e:	23fa      	movs	r3, #250	; 0xfa
 800fb30:	76bb      	strb	r3, [r7, #26]
 800fb32:	e01d      	b.n	800fb70 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb38:	699b      	ldr	r3, [r3, #24]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d106      	bne.n	800fb4c <tcp_process+0x3e0>
 800fb3e:	4b76      	ldr	r3, [pc, #472]	; (800fd18 <tcp_process+0x5ac>)
 800fb40:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800fb44:	4975      	ldr	r1, [pc, #468]	; (800fd1c <tcp_process+0x5b0>)
 800fb46:	4876      	ldr	r0, [pc, #472]	; (800fd20 <tcp_process+0x5b4>)
 800fb48:	f006 fb42 	bl	80161d0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb50:	699b      	ldr	r3, [r3, #24]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d00a      	beq.n	800fb6c <tcp_process+0x400>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb5a:	699b      	ldr	r3, [r3, #24]
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	6910      	ldr	r0, [r2, #16]
 800fb60:	2200      	movs	r2, #0
 800fb62:	6879      	ldr	r1, [r7, #4]
 800fb64:	4798      	blx	r3
 800fb66:	4603      	mov	r3, r0
 800fb68:	76bb      	strb	r3, [r7, #26]
 800fb6a:	e001      	b.n	800fb70 <tcp_process+0x404>
 800fb6c:	23f0      	movs	r3, #240	; 0xf0
 800fb6e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fb70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d00a      	beq.n	800fb8e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fb78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fb7c:	f113 0f0d 	cmn.w	r3, #13
 800fb80:	d002      	beq.n	800fb88 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f7fd ff8e 	bl	800daa4 <tcp_abort>
            }
            return ERR_ABRT;
 800fb88:	f06f 030c 	mvn.w	r3, #12
 800fb8c:	e1ce      	b.n	800ff2c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f000 fae0 	bl	8010154 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fb94:	4b63      	ldr	r3, [pc, #396]	; (800fd24 <tcp_process+0x5b8>)
 800fb96:	881b      	ldrh	r3, [r3, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d005      	beq.n	800fba8 <tcp_process+0x43c>
            recv_acked--;
 800fb9c:	4b61      	ldr	r3, [pc, #388]	; (800fd24 <tcp_process+0x5b8>)
 800fb9e:	881b      	ldrh	r3, [r3, #0]
 800fba0:	3b01      	subs	r3, #1
 800fba2:	b29a      	uxth	r2, r3
 800fba4:	4b5f      	ldr	r3, [pc, #380]	; (800fd24 <tcp_process+0x5b8>)
 800fba6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbac:	009a      	lsls	r2, r3, #2
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbb2:	005b      	lsls	r3, r3, #1
 800fbb4:	f241 111c 	movw	r1, #4380	; 0x111c
 800fbb8:	428b      	cmp	r3, r1
 800fbba:	bf38      	it	cc
 800fbbc:	460b      	movcc	r3, r1
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d204      	bcs.n	800fbcc <tcp_process+0x460>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbc6:	009b      	lsls	r3, r3, #2
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	e00d      	b.n	800fbe8 <tcp_process+0x47c>
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbd0:	005b      	lsls	r3, r3, #1
 800fbd2:	f241 121c 	movw	r2, #4380	; 0x111c
 800fbd6:	4293      	cmp	r3, r2
 800fbd8:	d904      	bls.n	800fbe4 <tcp_process+0x478>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbde:	005b      	lsls	r3, r3, #1
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	e001      	b.n	800fbe8 <tcp_process+0x47c>
 800fbe4:	f241 131c 	movw	r3, #4380	; 0x111c
 800fbe8:	687a      	ldr	r2, [r7, #4]
 800fbea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fbee:	4b4e      	ldr	r3, [pc, #312]	; (800fd28 <tcp_process+0x5bc>)
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	f003 0320 	and.w	r3, r3, #32
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d037      	beq.n	800fc6a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	8b5b      	ldrh	r3, [r3, #26]
 800fbfe:	f043 0302 	orr.w	r3, r3, #2
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2207      	movs	r2, #7
 800fc0c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fc0e:	e02c      	b.n	800fc6a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc10:	4b3b      	ldr	r3, [pc, #236]	; (800fd00 <tcp_process+0x594>)
 800fc12:	6819      	ldr	r1, [r3, #0]
 800fc14:	4b3b      	ldr	r3, [pc, #236]	; (800fd04 <tcp_process+0x598>)
 800fc16:	881b      	ldrh	r3, [r3, #0]
 800fc18:	461a      	mov	r2, r3
 800fc1a:	4b3b      	ldr	r3, [pc, #236]	; (800fd08 <tcp_process+0x59c>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc20:	4b3a      	ldr	r3, [pc, #232]	; (800fd0c <tcp_process+0x5a0>)
 800fc22:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc24:	885b      	ldrh	r3, [r3, #2]
 800fc26:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fc28:	4a38      	ldr	r2, [pc, #224]	; (800fd0c <tcp_process+0x5a0>)
 800fc2a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc2c:	8812      	ldrh	r2, [r2, #0]
 800fc2e:	b292      	uxth	r2, r2
 800fc30:	9202      	str	r2, [sp, #8]
 800fc32:	9301      	str	r3, [sp, #4]
 800fc34:	4b36      	ldr	r3, [pc, #216]	; (800fd10 <tcp_process+0x5a4>)
 800fc36:	9300      	str	r3, [sp, #0]
 800fc38:	4b36      	ldr	r3, [pc, #216]	; (800fd14 <tcp_process+0x5a8>)
 800fc3a:	4602      	mov	r2, r0
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f002 fbd1 	bl	80123e4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fc42:	e167      	b.n	800ff14 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fc44:	4b2d      	ldr	r3, [pc, #180]	; (800fcfc <tcp_process+0x590>)
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	f003 0302 	and.w	r3, r3, #2
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	f000 8161 	beq.w	800ff14 <tcp_process+0x7a8>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc56:	1e5a      	subs	r2, r3, #1
 800fc58:	4b2b      	ldr	r3, [pc, #172]	; (800fd08 <tcp_process+0x59c>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	f040 8159 	bne.w	800ff14 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f002 f9b6 	bl	8011fd4 <tcp_rexmit>
      break;
 800fc68:	e154      	b.n	800ff14 <tcp_process+0x7a8>
 800fc6a:	e153      	b.n	800ff14 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f000 fa71 	bl	8010154 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fc72:	4b2d      	ldr	r3, [pc, #180]	; (800fd28 <tcp_process+0x5bc>)
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	f003 0320 	and.w	r3, r3, #32
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f000 814c 	beq.w	800ff18 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	8b5b      	ldrh	r3, [r3, #26]
 800fc84:	f043 0302 	orr.w	r3, r3, #2
 800fc88:	b29a      	uxth	r2, r3
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2207      	movs	r2, #7
 800fc92:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fc94:	e140      	b.n	800ff18 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f000 fa5c 	bl	8010154 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fc9c:	4b22      	ldr	r3, [pc, #136]	; (800fd28 <tcp_process+0x5bc>)
 800fc9e:	781b      	ldrb	r3, [r3, #0]
 800fca0:	f003 0320 	and.w	r3, r3, #32
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d071      	beq.n	800fd8c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fca8:	4b14      	ldr	r3, [pc, #80]	; (800fcfc <tcp_process+0x590>)
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	f003 0310 	and.w	r3, r3, #16
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d060      	beq.n	800fd76 <tcp_process+0x60a>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fcb8:	4b11      	ldr	r3, [pc, #68]	; (800fd00 <tcp_process+0x594>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d15a      	bne.n	800fd76 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d156      	bne.n	800fd76 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	8b5b      	ldrh	r3, [r3, #26]
 800fccc:	f043 0302 	orr.w	r3, r3, #2
 800fcd0:	b29a      	uxth	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f7fe fdbc 	bl	800e854 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fcdc:	4b13      	ldr	r3, [pc, #76]	; (800fd2c <tcp_process+0x5c0>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	687a      	ldr	r2, [r7, #4]
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d105      	bne.n	800fcf2 <tcp_process+0x586>
 800fce6:	4b11      	ldr	r3, [pc, #68]	; (800fd2c <tcp_process+0x5c0>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	68db      	ldr	r3, [r3, #12]
 800fcec:	4a0f      	ldr	r2, [pc, #60]	; (800fd2c <tcp_process+0x5c0>)
 800fcee:	6013      	str	r3, [r2, #0]
 800fcf0:	e02e      	b.n	800fd50 <tcp_process+0x5e4>
 800fcf2:	4b0e      	ldr	r3, [pc, #56]	; (800fd2c <tcp_process+0x5c0>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	617b      	str	r3, [r7, #20]
 800fcf8:	e027      	b.n	800fd4a <tcp_process+0x5de>
 800fcfa:	bf00      	nop
 800fcfc:	20008f64 	.word	0x20008f64
 800fd00:	20008f5c 	.word	0x20008f5c
 800fd04:	20008f62 	.word	0x20008f62
 800fd08:	20008f58 	.word	0x20008f58
 800fd0c:	20008f48 	.word	0x20008f48
 800fd10:	200059c0 	.word	0x200059c0
 800fd14:	200059c4 	.word	0x200059c4
 800fd18:	080184bc 	.word	0x080184bc
 800fd1c:	0801875c 	.word	0x0801875c
 800fd20:	08018508 	.word	0x08018508
 800fd24:	20008f60 	.word	0x20008f60
 800fd28:	20008f65 	.word	0x20008f65
 800fd2c:	20008f2c 	.word	0x20008f2c
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	687a      	ldr	r2, [r7, #4]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d104      	bne.n	800fd44 <tcp_process+0x5d8>
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	68da      	ldr	r2, [r3, #12]
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	60da      	str	r2, [r3, #12]
 800fd42:	e005      	b.n	800fd50 <tcp_process+0x5e4>
 800fd44:	697b      	ldr	r3, [r7, #20]
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	617b      	str	r3, [r7, #20]
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d1ef      	bne.n	800fd30 <tcp_process+0x5c4>
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2200      	movs	r2, #0
 800fd54:	60da      	str	r2, [r3, #12]
 800fd56:	4b77      	ldr	r3, [pc, #476]	; (800ff34 <tcp_process+0x7c8>)
 800fd58:	2201      	movs	r2, #1
 800fd5a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	220a      	movs	r2, #10
 800fd60:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800fd62:	4b75      	ldr	r3, [pc, #468]	; (800ff38 <tcp_process+0x7cc>)
 800fd64:	681a      	ldr	r2, [r3, #0]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	60da      	str	r2, [r3, #12]
 800fd6a:	4a73      	ldr	r2, [pc, #460]	; (800ff38 <tcp_process+0x7cc>)
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6013      	str	r3, [r2, #0]
 800fd70:	f002 fcfa 	bl	8012768 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800fd74:	e0d2      	b.n	800ff1c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	8b5b      	ldrh	r3, [r3, #26]
 800fd7a:	f043 0302 	orr.w	r3, r3, #2
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2208      	movs	r2, #8
 800fd88:	751a      	strb	r2, [r3, #20]
      break;
 800fd8a:	e0c7      	b.n	800ff1c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fd8c:	4b6b      	ldr	r3, [pc, #428]	; (800ff3c <tcp_process+0x7d0>)
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	f003 0310 	and.w	r3, r3, #16
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	f000 80c1 	beq.w	800ff1c <tcp_process+0x7b0>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd9e:	4b68      	ldr	r3, [pc, #416]	; (800ff40 <tcp_process+0x7d4>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	f040 80ba 	bne.w	800ff1c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	f040 80b5 	bne.w	800ff1c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2206      	movs	r2, #6
 800fdb6:	751a      	strb	r2, [r3, #20]
      break;
 800fdb8:	e0b0      	b.n	800ff1c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 f9ca 	bl	8010154 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fdc0:	4b60      	ldr	r3, [pc, #384]	; (800ff44 <tcp_process+0x7d8>)
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	f003 0320 	and.w	r3, r3, #32
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	f000 80a9 	beq.w	800ff20 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	8b5b      	ldrh	r3, [r3, #26]
 800fdd2:	f043 0302 	orr.w	r3, r3, #2
 800fdd6:	b29a      	uxth	r2, r3
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f7fe fd39 	bl	800e854 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fde2:	4b59      	ldr	r3, [pc, #356]	; (800ff48 <tcp_process+0x7dc>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d105      	bne.n	800fdf8 <tcp_process+0x68c>
 800fdec:	4b56      	ldr	r3, [pc, #344]	; (800ff48 <tcp_process+0x7dc>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	4a55      	ldr	r2, [pc, #340]	; (800ff48 <tcp_process+0x7dc>)
 800fdf4:	6013      	str	r3, [r2, #0]
 800fdf6:	e013      	b.n	800fe20 <tcp_process+0x6b4>
 800fdf8:	4b53      	ldr	r3, [pc, #332]	; (800ff48 <tcp_process+0x7dc>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	613b      	str	r3, [r7, #16]
 800fdfe:	e00c      	b.n	800fe1a <tcp_process+0x6ae>
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	d104      	bne.n	800fe14 <tcp_process+0x6a8>
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	68da      	ldr	r2, [r3, #12]
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	60da      	str	r2, [r3, #12]
 800fe12:	e005      	b.n	800fe20 <tcp_process+0x6b4>
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	613b      	str	r3, [r7, #16]
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d1ef      	bne.n	800fe00 <tcp_process+0x694>
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2200      	movs	r2, #0
 800fe24:	60da      	str	r2, [r3, #12]
 800fe26:	4b43      	ldr	r3, [pc, #268]	; (800ff34 <tcp_process+0x7c8>)
 800fe28:	2201      	movs	r2, #1
 800fe2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	220a      	movs	r2, #10
 800fe30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fe32:	4b41      	ldr	r3, [pc, #260]	; (800ff38 <tcp_process+0x7cc>)
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	60da      	str	r2, [r3, #12]
 800fe3a:	4a3f      	ldr	r2, [pc, #252]	; (800ff38 <tcp_process+0x7cc>)
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6013      	str	r3, [r2, #0]
 800fe40:	f002 fc92 	bl	8012768 <tcp_timer_needed>
      }
      break;
 800fe44:	e06c      	b.n	800ff20 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f000 f984 	bl	8010154 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fe4c:	4b3b      	ldr	r3, [pc, #236]	; (800ff3c <tcp_process+0x7d0>)
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	f003 0310 	and.w	r3, r3, #16
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d065      	beq.n	800ff24 <tcp_process+0x7b8>
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fe5c:	4b38      	ldr	r3, [pc, #224]	; (800ff40 <tcp_process+0x7d4>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	429a      	cmp	r2, r3
 800fe62:	d15f      	bne.n	800ff24 <tcp_process+0x7b8>
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d15b      	bne.n	800ff24 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f7fe fcf1 	bl	800e854 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800fe72:	4b35      	ldr	r3, [pc, #212]	; (800ff48 <tcp_process+0x7dc>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d105      	bne.n	800fe88 <tcp_process+0x71c>
 800fe7c:	4b32      	ldr	r3, [pc, #200]	; (800ff48 <tcp_process+0x7dc>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	68db      	ldr	r3, [r3, #12]
 800fe82:	4a31      	ldr	r2, [pc, #196]	; (800ff48 <tcp_process+0x7dc>)
 800fe84:	6013      	str	r3, [r2, #0]
 800fe86:	e013      	b.n	800feb0 <tcp_process+0x744>
 800fe88:	4b2f      	ldr	r3, [pc, #188]	; (800ff48 <tcp_process+0x7dc>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	60fb      	str	r3, [r7, #12]
 800fe8e:	e00c      	b.n	800feaa <tcp_process+0x73e>
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	687a      	ldr	r2, [r7, #4]
 800fe96:	429a      	cmp	r2, r3
 800fe98:	d104      	bne.n	800fea4 <tcp_process+0x738>
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	68da      	ldr	r2, [r3, #12]
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	60da      	str	r2, [r3, #12]
 800fea2:	e005      	b.n	800feb0 <tcp_process+0x744>
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	68db      	ldr	r3, [r3, #12]
 800fea8:	60fb      	str	r3, [r7, #12]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1ef      	bne.n	800fe90 <tcp_process+0x724>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2200      	movs	r2, #0
 800feb4:	60da      	str	r2, [r3, #12]
 800feb6:	4b1f      	ldr	r3, [pc, #124]	; (800ff34 <tcp_process+0x7c8>)
 800feb8:	2201      	movs	r2, #1
 800feba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	220a      	movs	r2, #10
 800fec0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800fec2:	4b1d      	ldr	r3, [pc, #116]	; (800ff38 <tcp_process+0x7cc>)
 800fec4:	681a      	ldr	r2, [r3, #0]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	60da      	str	r2, [r3, #12]
 800feca:	4a1b      	ldr	r2, [pc, #108]	; (800ff38 <tcp_process+0x7cc>)
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6013      	str	r3, [r2, #0]
 800fed0:	f002 fc4a 	bl	8012768 <tcp_timer_needed>
      }
      break;
 800fed4:	e026      	b.n	800ff24 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	f000 f93c 	bl	8010154 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fedc:	4b17      	ldr	r3, [pc, #92]	; (800ff3c <tcp_process+0x7d0>)
 800fede:	781b      	ldrb	r3, [r3, #0]
 800fee0:	f003 0310 	and.w	r3, r3, #16
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d01f      	beq.n	800ff28 <tcp_process+0x7bc>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800feec:	4b14      	ldr	r3, [pc, #80]	; (800ff40 <tcp_process+0x7d4>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d119      	bne.n	800ff28 <tcp_process+0x7bc>
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d115      	bne.n	800ff28 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fefc:	4b11      	ldr	r3, [pc, #68]	; (800ff44 <tcp_process+0x7d8>)
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	f043 0310 	orr.w	r3, r3, #16
 800ff04:	b2da      	uxtb	r2, r3
 800ff06:	4b0f      	ldr	r3, [pc, #60]	; (800ff44 <tcp_process+0x7d8>)
 800ff08:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ff0a:	e00d      	b.n	800ff28 <tcp_process+0x7bc>
    default:
      break;
 800ff0c:	bf00      	nop
 800ff0e:	e00c      	b.n	800ff2a <tcp_process+0x7be>
      break;
 800ff10:	bf00      	nop
 800ff12:	e00a      	b.n	800ff2a <tcp_process+0x7be>
      break;
 800ff14:	bf00      	nop
 800ff16:	e008      	b.n	800ff2a <tcp_process+0x7be>
      break;
 800ff18:	bf00      	nop
 800ff1a:	e006      	b.n	800ff2a <tcp_process+0x7be>
      break;
 800ff1c:	bf00      	nop
 800ff1e:	e004      	b.n	800ff2a <tcp_process+0x7be>
      break;
 800ff20:	bf00      	nop
 800ff22:	e002      	b.n	800ff2a <tcp_process+0x7be>
      break;
 800ff24:	bf00      	nop
 800ff26:	e000      	b.n	800ff2a <tcp_process+0x7be>
      break;
 800ff28:	bf00      	nop
  }
  return ERR_OK;
 800ff2a:	2300      	movs	r3, #0
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3724      	adds	r7, #36	; 0x24
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd90      	pop	{r4, r7, pc}
 800ff34:	20008f34 	.word	0x20008f34
 800ff38:	20008f30 	.word	0x20008f30
 800ff3c:	20008f64 	.word	0x20008f64
 800ff40:	20008f5c 	.word	0x20008f5c
 800ff44:	20008f65 	.word	0x20008f65
 800ff48:	20008f2c 	.word	0x20008f2c

0800ff4c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ff4c:	b590      	push	{r4, r7, lr}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d106      	bne.n	800ff6a <tcp_oos_insert_segment+0x1e>
 800ff5c:	4b3b      	ldr	r3, [pc, #236]	; (801004c <tcp_oos_insert_segment+0x100>)
 800ff5e:	f240 421f 	movw	r2, #1055	; 0x41f
 800ff62:	493b      	ldr	r1, [pc, #236]	; (8010050 <tcp_oos_insert_segment+0x104>)
 800ff64:	483b      	ldr	r0, [pc, #236]	; (8010054 <tcp_oos_insert_segment+0x108>)
 800ff66:	f006 f933 	bl	80161d0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	899b      	ldrh	r3, [r3, #12]
 800ff70:	b29b      	uxth	r3, r3
 800ff72:	4618      	mov	r0, r3
 800ff74:	f7fb fc0e 	bl	800b794 <lwip_htons>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	b2db      	uxtb	r3, r3
 800ff7c:	f003 0301 	and.w	r3, r3, #1
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d028      	beq.n	800ffd6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ff84:	6838      	ldr	r0, [r7, #0]
 800ff86:	f7fe fa63 	bl	800e450 <tcp_segs_free>
    next = NULL;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	603b      	str	r3, [r7, #0]
 800ff8e:	e056      	b.n	801003e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	899b      	ldrh	r3, [r3, #12]
 800ff96:	b29b      	uxth	r3, r3
 800ff98:	4618      	mov	r0, r3
 800ff9a:	f7fb fbfb 	bl	800b794 <lwip_htons>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	f003 0301 	and.w	r3, r3, #1
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d00d      	beq.n	800ffc6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	68db      	ldr	r3, [r3, #12]
 800ffae:	899b      	ldrh	r3, [r3, #12]
 800ffb0:	b29c      	uxth	r4, r3
 800ffb2:	2001      	movs	r0, #1
 800ffb4:	f7fb fbee 	bl	800b794 <lwip_htons>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	461a      	mov	r2, r3
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	4322      	orrs	r2, r4
 800ffc2:	b292      	uxth	r2, r2
 800ffc4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ffd0:	68f8      	ldr	r0, [r7, #12]
 800ffd2:	f7fe fa52 	bl	800e47a <tcp_seg_free>
    while (next &&
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d00e      	beq.n	800fffa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	891b      	ldrh	r3, [r3, #8]
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	4b1d      	ldr	r3, [pc, #116]	; (8010058 <tcp_oos_insert_segment+0x10c>)
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	441a      	add	r2, r3
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	685b      	ldr	r3, [r3, #4]
 800ffee:	6839      	ldr	r1, [r7, #0]
 800fff0:	8909      	ldrh	r1, [r1, #8]
 800fff2:	440b      	add	r3, r1
 800fff4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	daca      	bge.n	800ff90 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d01e      	beq.n	801003e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	891b      	ldrh	r3, [r3, #8]
 8010004:	461a      	mov	r2, r3
 8010006:	4b14      	ldr	r3, [pc, #80]	; (8010058 <tcp_oos_insert_segment+0x10c>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	441a      	add	r2, r3
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	68db      	ldr	r3, [r3, #12]
 8010010:	685b      	ldr	r3, [r3, #4]
 8010012:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010014:	2b00      	cmp	r3, #0
 8010016:	dd12      	ble.n	801003e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	68db      	ldr	r3, [r3, #12]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	b29a      	uxth	r2, r3
 8010020:	4b0d      	ldr	r3, [pc, #52]	; (8010058 <tcp_oos_insert_segment+0x10c>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	b29b      	uxth	r3, r3
 8010026:	1ad3      	subs	r3, r2, r3
 8010028:	b29a      	uxth	r2, r3
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	685a      	ldr	r2, [r3, #4]
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	891b      	ldrh	r3, [r3, #8]
 8010036:	4619      	mov	r1, r3
 8010038:	4610      	mov	r0, r2
 801003a:	f7fc fd83 	bl	800cb44 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	683a      	ldr	r2, [r7, #0]
 8010042:	601a      	str	r2, [r3, #0]
}
 8010044:	bf00      	nop
 8010046:	3714      	adds	r7, #20
 8010048:	46bd      	mov	sp, r7
 801004a:	bd90      	pop	{r4, r7, pc}
 801004c:	080184bc 	.word	0x080184bc
 8010050:	0801877c 	.word	0x0801877c
 8010054:	08018508 	.word	0x08018508
 8010058:	20008f58 	.word	0x20008f58

0801005c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801005c:	b5b0      	push	{r4, r5, r7, lr}
 801005e:	b086      	sub	sp, #24
 8010060:	af00      	add	r7, sp, #0
 8010062:	60f8      	str	r0, [r7, #12]
 8010064:	60b9      	str	r1, [r7, #8]
 8010066:	607a      	str	r2, [r7, #4]
 8010068:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801006a:	e03e      	b.n	80100ea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801006c:	68bb      	ldr	r3, [r7, #8]
 801006e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	685b      	ldr	r3, [r3, #4]
 801007a:	4618      	mov	r0, r3
 801007c:	f7fc ff70 	bl	800cf60 <pbuf_clen>
 8010080:	4603      	mov	r3, r0
 8010082:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801008a:	8a7a      	ldrh	r2, [r7, #18]
 801008c:	429a      	cmp	r2, r3
 801008e:	d906      	bls.n	801009e <tcp_free_acked_segments+0x42>
 8010090:	4b2a      	ldr	r3, [pc, #168]	; (801013c <tcp_free_acked_segments+0xe0>)
 8010092:	f240 4257 	movw	r2, #1111	; 0x457
 8010096:	492a      	ldr	r1, [pc, #168]	; (8010140 <tcp_free_acked_segments+0xe4>)
 8010098:	482a      	ldr	r0, [pc, #168]	; (8010144 <tcp_free_acked_segments+0xe8>)
 801009a:	f006 f899 	bl	80161d0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80100a4:	8a7b      	ldrh	r3, [r7, #18]
 80100a6:	1ad3      	subs	r3, r2, r3
 80100a8:	b29a      	uxth	r2, r3
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	891a      	ldrh	r2, [r3, #8]
 80100b4:	4b24      	ldr	r3, [pc, #144]	; (8010148 <tcp_free_acked_segments+0xec>)
 80100b6:	881b      	ldrh	r3, [r3, #0]
 80100b8:	4413      	add	r3, r2
 80100ba:	b29a      	uxth	r2, r3
 80100bc:	4b22      	ldr	r3, [pc, #136]	; (8010148 <tcp_free_acked_segments+0xec>)
 80100be:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80100c0:	6978      	ldr	r0, [r7, #20]
 80100c2:	f7fe f9da 	bl	800e47a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d00c      	beq.n	80100ea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d109      	bne.n	80100ea <tcp_free_acked_segments+0x8e>
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d106      	bne.n	80100ea <tcp_free_acked_segments+0x8e>
 80100dc:	4b17      	ldr	r3, [pc, #92]	; (801013c <tcp_free_acked_segments+0xe0>)
 80100de:	f240 4261 	movw	r2, #1121	; 0x461
 80100e2:	491a      	ldr	r1, [pc, #104]	; (801014c <tcp_free_acked_segments+0xf0>)
 80100e4:	4817      	ldr	r0, [pc, #92]	; (8010144 <tcp_free_acked_segments+0xe8>)
 80100e6:	f006 f873 	bl	80161d0 <iprintf>
  while (seg_list != NULL &&
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d020      	beq.n	8010132 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	685b      	ldr	r3, [r3, #4]
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7fb fb61 	bl	800b7be <lwip_htonl>
 80100fc:	4604      	mov	r4, r0
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	891b      	ldrh	r3, [r3, #8]
 8010102:	461d      	mov	r5, r3
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	68db      	ldr	r3, [r3, #12]
 8010108:	899b      	ldrh	r3, [r3, #12]
 801010a:	b29b      	uxth	r3, r3
 801010c:	4618      	mov	r0, r3
 801010e:	f7fb fb41 	bl	800b794 <lwip_htons>
 8010112:	4603      	mov	r3, r0
 8010114:	b2db      	uxtb	r3, r3
 8010116:	f003 0303 	and.w	r3, r3, #3
 801011a:	2b00      	cmp	r3, #0
 801011c:	d001      	beq.n	8010122 <tcp_free_acked_segments+0xc6>
 801011e:	2301      	movs	r3, #1
 8010120:	e000      	b.n	8010124 <tcp_free_acked_segments+0xc8>
 8010122:	2300      	movs	r3, #0
 8010124:	442b      	add	r3, r5
 8010126:	18e2      	adds	r2, r4, r3
 8010128:	4b09      	ldr	r3, [pc, #36]	; (8010150 <tcp_free_acked_segments+0xf4>)
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801012e:	2b00      	cmp	r3, #0
 8010130:	dd9c      	ble.n	801006c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010132:	68bb      	ldr	r3, [r7, #8]
}
 8010134:	4618      	mov	r0, r3
 8010136:	3718      	adds	r7, #24
 8010138:	46bd      	mov	sp, r7
 801013a:	bdb0      	pop	{r4, r5, r7, pc}
 801013c:	080184bc 	.word	0x080184bc
 8010140:	080187a4 	.word	0x080187a4
 8010144:	08018508 	.word	0x08018508
 8010148:	20008f60 	.word	0x20008f60
 801014c:	080187cc 	.word	0x080187cc
 8010150:	20008f5c 	.word	0x20008f5c

08010154 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010154:	b5b0      	push	{r4, r5, r7, lr}
 8010156:	b094      	sub	sp, #80	; 0x50
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801015c:	2300      	movs	r3, #0
 801015e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d106      	bne.n	8010174 <tcp_receive+0x20>
 8010166:	4b91      	ldr	r3, [pc, #580]	; (80103ac <tcp_receive+0x258>)
 8010168:	f240 427b 	movw	r2, #1147	; 0x47b
 801016c:	4990      	ldr	r1, [pc, #576]	; (80103b0 <tcp_receive+0x25c>)
 801016e:	4891      	ldr	r0, [pc, #580]	; (80103b4 <tcp_receive+0x260>)
 8010170:	f006 f82e 	bl	80161d0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	7d1b      	ldrb	r3, [r3, #20]
 8010178:	2b03      	cmp	r3, #3
 801017a:	d806      	bhi.n	801018a <tcp_receive+0x36>
 801017c:	4b8b      	ldr	r3, [pc, #556]	; (80103ac <tcp_receive+0x258>)
 801017e:	f240 427c 	movw	r2, #1148	; 0x47c
 8010182:	498d      	ldr	r1, [pc, #564]	; (80103b8 <tcp_receive+0x264>)
 8010184:	488b      	ldr	r0, [pc, #556]	; (80103b4 <tcp_receive+0x260>)
 8010186:	f006 f823 	bl	80161d0 <iprintf>

  if (flags & TCP_ACK) {
 801018a:	4b8c      	ldr	r3, [pc, #560]	; (80103bc <tcp_receive+0x268>)
 801018c:	781b      	ldrb	r3, [r3, #0]
 801018e:	f003 0310 	and.w	r3, r3, #16
 8010192:	2b00      	cmp	r3, #0
 8010194:	f000 8264 	beq.w	8010660 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801019e:	461a      	mov	r2, r3
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101a4:	4413      	add	r3, r2
 80101a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101ac:	4b84      	ldr	r3, [pc, #528]	; (80103c0 <tcp_receive+0x26c>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	db1b      	blt.n	80101ee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101ba:	4b81      	ldr	r3, [pc, #516]	; (80103c0 <tcp_receive+0x26c>)
 80101bc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80101be:	429a      	cmp	r2, r3
 80101c0:	d106      	bne.n	80101d0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80101c6:	4b7f      	ldr	r3, [pc, #508]	; (80103c4 <tcp_receive+0x270>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	1ad3      	subs	r3, r2, r3
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	db0e      	blt.n	80101ee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80101d4:	4b7b      	ldr	r3, [pc, #492]	; (80103c4 <tcp_receive+0x270>)
 80101d6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80101d8:	429a      	cmp	r2, r3
 80101da:	d125      	bne.n	8010228 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80101dc:	4b7a      	ldr	r3, [pc, #488]	; (80103c8 <tcp_receive+0x274>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	89db      	ldrh	r3, [r3, #14]
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d91c      	bls.n	8010228 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80101ee:	4b76      	ldr	r3, [pc, #472]	; (80103c8 <tcp_receive+0x274>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	89db      	ldrh	r3, [r3, #14]
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010208:	429a      	cmp	r2, r3
 801020a:	d205      	bcs.n	8010218 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010218:	4b69      	ldr	r3, [pc, #420]	; (80103c0 <tcp_receive+0x26c>)
 801021a:	681a      	ldr	r2, [r3, #0]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010220:	4b68      	ldr	r3, [pc, #416]	; (80103c4 <tcp_receive+0x270>)
 8010222:	681a      	ldr	r2, [r3, #0]
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010228:	4b66      	ldr	r3, [pc, #408]	; (80103c4 <tcp_receive+0x270>)
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010230:	1ad3      	subs	r3, r2, r3
 8010232:	2b00      	cmp	r3, #0
 8010234:	dc58      	bgt.n	80102e8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010236:	4b65      	ldr	r3, [pc, #404]	; (80103cc <tcp_receive+0x278>)
 8010238:	881b      	ldrh	r3, [r3, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d14b      	bne.n	80102d6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010242:	687a      	ldr	r2, [r7, #4]
 8010244:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010248:	4413      	add	r3, r2
 801024a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801024c:	429a      	cmp	r2, r3
 801024e:	d142      	bne.n	80102d6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010256:	2b00      	cmp	r3, #0
 8010258:	db3d      	blt.n	80102d6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801025e:	4b59      	ldr	r3, [pc, #356]	; (80103c4 <tcp_receive+0x270>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	429a      	cmp	r2, r3
 8010264:	d137      	bne.n	80102d6 <tcp_receive+0x182>
              found_dupack = 1;
 8010266:	2301      	movs	r3, #1
 8010268:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010270:	2bff      	cmp	r3, #255	; 0xff
 8010272:	d007      	beq.n	8010284 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801027a:	3301      	adds	r3, #1
 801027c:	b2da      	uxtb	r2, r3
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801028a:	2b03      	cmp	r3, #3
 801028c:	d91b      	bls.n	80102c6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010298:	4413      	add	r3, r2
 801029a:	b29a      	uxth	r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d30a      	bcc.n	80102bc <tcp_receive+0x168>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102b0:	4413      	add	r3, r2
 80102b2:	b29a      	uxth	r2, r3
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80102ba:	e004      	b.n	80102c6 <tcp_receive+0x172>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80102cc:	2b02      	cmp	r3, #2
 80102ce:	d902      	bls.n	80102d6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f001 feeb 	bl	80120ac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80102d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102d8:	2b00      	cmp	r3, #0
 80102da:	f040 8161 	bne.w	80105a0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2200      	movs	r2, #0
 80102e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80102e6:	e15b      	b.n	80105a0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80102e8:	4b36      	ldr	r3, [pc, #216]	; (80103c4 <tcp_receive+0x270>)
 80102ea:	681a      	ldr	r2, [r3, #0]
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102f0:	1ad3      	subs	r3, r2, r3
 80102f2:	3b01      	subs	r3, #1
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f2c0 814e 	blt.w	8010596 <tcp_receive+0x442>
 80102fa:	4b32      	ldr	r3, [pc, #200]	; (80103c4 <tcp_receive+0x270>)
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010302:	1ad3      	subs	r3, r2, r3
 8010304:	2b00      	cmp	r3, #0
 8010306:	f300 8146 	bgt.w	8010596 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	8b5b      	ldrh	r3, [r3, #26]
 801030e:	f003 0304 	and.w	r3, r3, #4
 8010312:	2b00      	cmp	r3, #0
 8010314:	d010      	beq.n	8010338 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	8b5b      	ldrh	r3, [r3, #26]
 801031a:	f023 0304 	bic.w	r3, r3, #4
 801031e:	b29a      	uxth	r2, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2200      	movs	r2, #0
 8010334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2200      	movs	r2, #0
 801033c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010346:	10db      	asrs	r3, r3, #3
 8010348:	b21b      	sxth	r3, r3
 801034a:	b29a      	uxth	r2, r3
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010352:	b29b      	uxth	r3, r3
 8010354:	4413      	add	r3, r2
 8010356:	b29b      	uxth	r3, r3
 8010358:	b21a      	sxth	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010360:	4b18      	ldr	r3, [pc, #96]	; (80103c4 <tcp_receive+0x270>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	b29a      	uxth	r2, r3
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801036a:	b29b      	uxth	r3, r3
 801036c:	1ad3      	subs	r3, r2, r3
 801036e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2200      	movs	r2, #0
 8010374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010378:	4b12      	ldr	r3, [pc, #72]	; (80103c4 <tcp_receive+0x270>)
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	7d1b      	ldrb	r3, [r3, #20]
 8010384:	2b03      	cmp	r3, #3
 8010386:	f240 8097 	bls.w	80104b8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010396:	429a      	cmp	r2, r3
 8010398:	d245      	bcs.n	8010426 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	8b5b      	ldrh	r3, [r3, #26]
 801039e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d014      	beq.n	80103d0 <tcp_receive+0x27c>
 80103a6:	2301      	movs	r3, #1
 80103a8:	e013      	b.n	80103d2 <tcp_receive+0x27e>
 80103aa:	bf00      	nop
 80103ac:	080184bc 	.word	0x080184bc
 80103b0:	080187ec 	.word	0x080187ec
 80103b4:	08018508 	.word	0x08018508
 80103b8:	08018808 	.word	0x08018808
 80103bc:	20008f64 	.word	0x20008f64
 80103c0:	20008f58 	.word	0x20008f58
 80103c4:	20008f5c 	.word	0x20008f5c
 80103c8:	20008f48 	.word	0x20008f48
 80103cc:	20008f62 	.word	0x20008f62
 80103d0:	2302      	movs	r3, #2
 80103d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80103d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80103da:	b29a      	uxth	r2, r3
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103e0:	fb12 f303 	smulbb	r3, r2, r3
 80103e4:	b29b      	uxth	r3, r3
 80103e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80103e8:	4293      	cmp	r3, r2
 80103ea:	bf28      	it	cs
 80103ec:	4613      	movcs	r3, r2
 80103ee:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80103f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80103f8:	4413      	add	r3, r2
 80103fa:	b29a      	uxth	r2, r3
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010402:	429a      	cmp	r2, r3
 8010404:	d309      	bcc.n	801041a <tcp_receive+0x2c6>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801040c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801040e:	4413      	add	r3, r2
 8010410:	b29a      	uxth	r2, r3
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010418:	e04e      	b.n	80104b8 <tcp_receive+0x364>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010420:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010424:	e048      	b.n	80104b8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801042c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801042e:	4413      	add	r3, r2
 8010430:	b29a      	uxth	r2, r3
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010438:	429a      	cmp	r2, r3
 801043a:	d309      	bcc.n	8010450 <tcp_receive+0x2fc>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010442:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010444:	4413      	add	r3, r2
 8010446:	b29a      	uxth	r2, r3
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801044e:	e004      	b.n	801045a <tcp_receive+0x306>
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010456:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010466:	429a      	cmp	r2, r3
 8010468:	d326      	bcc.n	80104b8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010476:	1ad3      	subs	r3, r2, r3
 8010478:	b29a      	uxth	r2, r3
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801048a:	4413      	add	r3, r2
 801048c:	b29a      	uxth	r2, r3
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010494:	429a      	cmp	r2, r3
 8010496:	d30a      	bcc.n	80104ae <tcp_receive+0x35a>
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104a2:	4413      	add	r3, r2
 80104a4:	b29a      	uxth	r2, r3
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80104ac:	e004      	b.n	80104b8 <tcp_receive+0x364>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104c0:	4a98      	ldr	r2, [pc, #608]	; (8010724 <tcp_receive+0x5d0>)
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f7ff fdca 	bl	801005c <tcp_free_acked_segments>
 80104c8:	4602      	mov	r2, r0
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104d6:	4a94      	ldr	r2, [pc, #592]	; (8010728 <tcp_receive+0x5d4>)
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f7ff fdbf 	bl	801005c <tcp_free_acked_segments>
 80104de:	4602      	mov	r2, r0
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d104      	bne.n	80104f6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80104f2:	861a      	strh	r2, [r3, #48]	; 0x30
 80104f4:	e002      	b.n	80104fc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2200      	movs	r2, #0
 80104fa:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2200      	movs	r2, #0
 8010500:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010506:	2b00      	cmp	r3, #0
 8010508:	d103      	bne.n	8010512 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2200      	movs	r2, #0
 801050e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010518:	4b84      	ldr	r3, [pc, #528]	; (801072c <tcp_receive+0x5d8>)
 801051a:	881b      	ldrh	r3, [r3, #0]
 801051c:	4413      	add	r3, r2
 801051e:	b29a      	uxth	r2, r3
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	8b5b      	ldrh	r3, [r3, #26]
 801052a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801052e:	2b00      	cmp	r3, #0
 8010530:	d035      	beq.n	801059e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010536:	2b00      	cmp	r3, #0
 8010538:	d118      	bne.n	801056c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801053e:	2b00      	cmp	r3, #0
 8010540:	d00c      	beq.n	801055c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801054a:	68db      	ldr	r3, [r3, #12]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	4618      	mov	r0, r3
 8010550:	f7fb f935 	bl	800b7be <lwip_htonl>
 8010554:	4603      	mov	r3, r0
 8010556:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010558:	2b00      	cmp	r3, #0
 801055a:	dc20      	bgt.n	801059e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	8b5b      	ldrh	r3, [r3, #26]
 8010560:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010564:	b29a      	uxth	r2, r3
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801056a:	e018      	b.n	801059e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010574:	68db      	ldr	r3, [r3, #12]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	4618      	mov	r0, r3
 801057a:	f7fb f920 	bl	800b7be <lwip_htonl>
 801057e:	4603      	mov	r3, r0
 8010580:	1ae3      	subs	r3, r4, r3
 8010582:	2b00      	cmp	r3, #0
 8010584:	dc0b      	bgt.n	801059e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	8b5b      	ldrh	r3, [r3, #26]
 801058a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801058e:	b29a      	uxth	r2, r3
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010594:	e003      	b.n	801059e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f001 ff76 	bl	8012488 <tcp_send_empty_ack>
 801059c:	e000      	b.n	80105a0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801059e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d05b      	beq.n	8010660 <tcp_receive+0x50c>
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80105ac:	4b60      	ldr	r3, [pc, #384]	; (8010730 <tcp_receive+0x5dc>)
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	1ad3      	subs	r3, r2, r3
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	da54      	bge.n	8010660 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80105b6:	4b5f      	ldr	r3, [pc, #380]	; (8010734 <tcp_receive+0x5e0>)
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	b29a      	uxth	r2, r3
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	b29b      	uxth	r3, r3
 80105c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80105ca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80105d4:	10db      	asrs	r3, r3, #3
 80105d6:	b21b      	sxth	r3, r3
 80105d8:	b29b      	uxth	r3, r3
 80105da:	1ad3      	subs	r3, r2, r3
 80105dc:	b29b      	uxth	r3, r3
 80105de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80105e8:	b29a      	uxth	r2, r3
 80105ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80105ee:	4413      	add	r3, r2
 80105f0:	b29b      	uxth	r3, r3
 80105f2:	b21a      	sxth	r2, r3
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80105f8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	da05      	bge.n	801060c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010600:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010604:	425b      	negs	r3, r3
 8010606:	b29b      	uxth	r3, r3
 8010608:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801060c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010616:	109b      	asrs	r3, r3, #2
 8010618:	b21b      	sxth	r3, r3
 801061a:	b29b      	uxth	r3, r3
 801061c:	1ad3      	subs	r3, r2, r3
 801061e:	b29b      	uxth	r3, r3
 8010620:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801062a:	b29a      	uxth	r2, r3
 801062c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010630:	4413      	add	r3, r2
 8010632:	b29b      	uxth	r3, r3
 8010634:	b21a      	sxth	r2, r3
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010640:	10db      	asrs	r3, r3, #3
 8010642:	b21b      	sxth	r3, r3
 8010644:	b29a      	uxth	r2, r3
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801064c:	b29b      	uxth	r3, r3
 801064e:	4413      	add	r3, r2
 8010650:	b29b      	uxth	r3, r3
 8010652:	b21a      	sxth	r2, r3
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2200      	movs	r2, #0
 801065e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010660:	4b35      	ldr	r3, [pc, #212]	; (8010738 <tcp_receive+0x5e4>)
 8010662:	881b      	ldrh	r3, [r3, #0]
 8010664:	2b00      	cmp	r3, #0
 8010666:	f000 84e2 	beq.w	801102e <tcp_receive+0xeda>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	7d1b      	ldrb	r3, [r3, #20]
 801066e:	2b06      	cmp	r3, #6
 8010670:	f200 84dd 	bhi.w	801102e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010678:	4b30      	ldr	r3, [pc, #192]	; (801073c <tcp_receive+0x5e8>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	1ad3      	subs	r3, r2, r3
 801067e:	3b01      	subs	r3, #1
 8010680:	2b00      	cmp	r3, #0
 8010682:	f2c0 808f 	blt.w	80107a4 <tcp_receive+0x650>
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801068a:	4b2b      	ldr	r3, [pc, #172]	; (8010738 <tcp_receive+0x5e4>)
 801068c:	881b      	ldrh	r3, [r3, #0]
 801068e:	4619      	mov	r1, r3
 8010690:	4b2a      	ldr	r3, [pc, #168]	; (801073c <tcp_receive+0x5e8>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	440b      	add	r3, r1
 8010696:	1ad3      	subs	r3, r2, r3
 8010698:	3301      	adds	r3, #1
 801069a:	2b00      	cmp	r3, #0
 801069c:	f300 8082 	bgt.w	80107a4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80106a0:	4b27      	ldr	r3, [pc, #156]	; (8010740 <tcp_receive+0x5ec>)
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106aa:	4b24      	ldr	r3, [pc, #144]	; (801073c <tcp_receive+0x5e8>)
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	1ad3      	subs	r3, r2, r3
 80106b0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80106b2:	4b23      	ldr	r3, [pc, #140]	; (8010740 <tcp_receive+0x5ec>)
 80106b4:	685b      	ldr	r3, [r3, #4]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d106      	bne.n	80106c8 <tcp_receive+0x574>
 80106ba:	4b22      	ldr	r3, [pc, #136]	; (8010744 <tcp_receive+0x5f0>)
 80106bc:	f240 5294 	movw	r2, #1428	; 0x594
 80106c0:	4921      	ldr	r1, [pc, #132]	; (8010748 <tcp_receive+0x5f4>)
 80106c2:	4822      	ldr	r0, [pc, #136]	; (801074c <tcp_receive+0x5f8>)
 80106c4:	f005 fd84 	bl	80161d0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80106c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d906      	bls.n	80106e0 <tcp_receive+0x58c>
 80106d2:	4b1c      	ldr	r3, [pc, #112]	; (8010744 <tcp_receive+0x5f0>)
 80106d4:	f240 5295 	movw	r2, #1429	; 0x595
 80106d8:	491d      	ldr	r1, [pc, #116]	; (8010750 <tcp_receive+0x5fc>)
 80106da:	481c      	ldr	r0, [pc, #112]	; (801074c <tcp_receive+0x5f8>)
 80106dc:	f005 fd78 	bl	80161d0 <iprintf>
      off = (u16_t)off32;
 80106e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80106e6:	4b16      	ldr	r3, [pc, #88]	; (8010740 <tcp_receive+0x5ec>)
 80106e8:	685b      	ldr	r3, [r3, #4]
 80106ea:	891b      	ldrh	r3, [r3, #8]
 80106ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d906      	bls.n	8010702 <tcp_receive+0x5ae>
 80106f4:	4b13      	ldr	r3, [pc, #76]	; (8010744 <tcp_receive+0x5f0>)
 80106f6:	f240 5297 	movw	r2, #1431	; 0x597
 80106fa:	4916      	ldr	r1, [pc, #88]	; (8010754 <tcp_receive+0x600>)
 80106fc:	4813      	ldr	r0, [pc, #76]	; (801074c <tcp_receive+0x5f8>)
 80106fe:	f005 fd67 	bl	80161d0 <iprintf>
      inseg.len -= off;
 8010702:	4b0f      	ldr	r3, [pc, #60]	; (8010740 <tcp_receive+0x5ec>)
 8010704:	891a      	ldrh	r2, [r3, #8]
 8010706:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801070a:	1ad3      	subs	r3, r2, r3
 801070c:	b29a      	uxth	r2, r3
 801070e:	4b0c      	ldr	r3, [pc, #48]	; (8010740 <tcp_receive+0x5ec>)
 8010710:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010712:	4b0b      	ldr	r3, [pc, #44]	; (8010740 <tcp_receive+0x5ec>)
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	891a      	ldrh	r2, [r3, #8]
 8010718:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801071c:	1ad3      	subs	r3, r2, r3
 801071e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010720:	e02a      	b.n	8010778 <tcp_receive+0x624>
 8010722:	bf00      	nop
 8010724:	08018824 	.word	0x08018824
 8010728:	0801882c 	.word	0x0801882c
 801072c:	20008f60 	.word	0x20008f60
 8010730:	20008f5c 	.word	0x20008f5c
 8010734:	20008f20 	.word	0x20008f20
 8010738:	20008f62 	.word	0x20008f62
 801073c:	20008f58 	.word	0x20008f58
 8010740:	20008f38 	.word	0x20008f38
 8010744:	080184bc 	.word	0x080184bc
 8010748:	08018834 	.word	0x08018834
 801074c:	08018508 	.word	0x08018508
 8010750:	08018844 	.word	0x08018844
 8010754:	08018854 	.word	0x08018854
        off -= p->len;
 8010758:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801075a:	895b      	ldrh	r3, [r3, #10]
 801075c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010760:	1ad3      	subs	r3, r2, r3
 8010762:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010766:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010768:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801076a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801076c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801076e:	2200      	movs	r2, #0
 8010770:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801077a:	895b      	ldrh	r3, [r3, #10]
 801077c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010780:	429a      	cmp	r2, r3
 8010782:	d8e9      	bhi.n	8010758 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010784:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010788:	4619      	mov	r1, r3
 801078a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801078c:	f7fc fada 	bl	800cd44 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010794:	4a91      	ldr	r2, [pc, #580]	; (80109dc <tcp_receive+0x888>)
 8010796:	6013      	str	r3, [r2, #0]
 8010798:	4b91      	ldr	r3, [pc, #580]	; (80109e0 <tcp_receive+0x88c>)
 801079a:	68db      	ldr	r3, [r3, #12]
 801079c:	4a8f      	ldr	r2, [pc, #572]	; (80109dc <tcp_receive+0x888>)
 801079e:	6812      	ldr	r2, [r2, #0]
 80107a0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80107a2:	e00d      	b.n	80107c0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80107a4:	4b8d      	ldr	r3, [pc, #564]	; (80109dc <tcp_receive+0x888>)
 80107a6:	681a      	ldr	r2, [r3, #0]
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ac:	1ad3      	subs	r3, r2, r3
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	da06      	bge.n	80107c0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	8b5b      	ldrh	r3, [r3, #26]
 80107b6:	f043 0302 	orr.w	r3, r3, #2
 80107ba:	b29a      	uxth	r2, r3
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80107c0:	4b86      	ldr	r3, [pc, #536]	; (80109dc <tcp_receive+0x888>)
 80107c2:	681a      	ldr	r2, [r3, #0]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	f2c0 842a 	blt.w	8011024 <tcp_receive+0xed0>
 80107d0:	4b82      	ldr	r3, [pc, #520]	; (80109dc <tcp_receive+0x888>)
 80107d2:	681a      	ldr	r2, [r3, #0]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107d8:	6879      	ldr	r1, [r7, #4]
 80107da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107dc:	440b      	add	r3, r1
 80107de:	1ad3      	subs	r3, r2, r3
 80107e0:	3301      	adds	r3, #1
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	f300 841e 	bgt.w	8011024 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107ec:	4b7b      	ldr	r3, [pc, #492]	; (80109dc <tcp_receive+0x888>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	429a      	cmp	r2, r3
 80107f2:	f040 829a 	bne.w	8010d2a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80107f6:	4b7a      	ldr	r3, [pc, #488]	; (80109e0 <tcp_receive+0x88c>)
 80107f8:	891c      	ldrh	r4, [r3, #8]
 80107fa:	4b79      	ldr	r3, [pc, #484]	; (80109e0 <tcp_receive+0x88c>)
 80107fc:	68db      	ldr	r3, [r3, #12]
 80107fe:	899b      	ldrh	r3, [r3, #12]
 8010800:	b29b      	uxth	r3, r3
 8010802:	4618      	mov	r0, r3
 8010804:	f7fa ffc6 	bl	800b794 <lwip_htons>
 8010808:	4603      	mov	r3, r0
 801080a:	b2db      	uxtb	r3, r3
 801080c:	f003 0303 	and.w	r3, r3, #3
 8010810:	2b00      	cmp	r3, #0
 8010812:	d001      	beq.n	8010818 <tcp_receive+0x6c4>
 8010814:	2301      	movs	r3, #1
 8010816:	e000      	b.n	801081a <tcp_receive+0x6c6>
 8010818:	2300      	movs	r3, #0
 801081a:	4423      	add	r3, r4
 801081c:	b29a      	uxth	r2, r3
 801081e:	4b71      	ldr	r3, [pc, #452]	; (80109e4 <tcp_receive+0x890>)
 8010820:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010826:	4b6f      	ldr	r3, [pc, #444]	; (80109e4 <tcp_receive+0x890>)
 8010828:	881b      	ldrh	r3, [r3, #0]
 801082a:	429a      	cmp	r2, r3
 801082c:	d275      	bcs.n	801091a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801082e:	4b6c      	ldr	r3, [pc, #432]	; (80109e0 <tcp_receive+0x88c>)
 8010830:	68db      	ldr	r3, [r3, #12]
 8010832:	899b      	ldrh	r3, [r3, #12]
 8010834:	b29b      	uxth	r3, r3
 8010836:	4618      	mov	r0, r3
 8010838:	f7fa ffac 	bl	800b794 <lwip_htons>
 801083c:	4603      	mov	r3, r0
 801083e:	b2db      	uxtb	r3, r3
 8010840:	f003 0301 	and.w	r3, r3, #1
 8010844:	2b00      	cmp	r3, #0
 8010846:	d01f      	beq.n	8010888 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010848:	4b65      	ldr	r3, [pc, #404]	; (80109e0 <tcp_receive+0x88c>)
 801084a:	68db      	ldr	r3, [r3, #12]
 801084c:	899b      	ldrh	r3, [r3, #12]
 801084e:	b29b      	uxth	r3, r3
 8010850:	b21b      	sxth	r3, r3
 8010852:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010856:	b21c      	sxth	r4, r3
 8010858:	4b61      	ldr	r3, [pc, #388]	; (80109e0 <tcp_receive+0x88c>)
 801085a:	68db      	ldr	r3, [r3, #12]
 801085c:	899b      	ldrh	r3, [r3, #12]
 801085e:	b29b      	uxth	r3, r3
 8010860:	4618      	mov	r0, r3
 8010862:	f7fa ff97 	bl	800b794 <lwip_htons>
 8010866:	4603      	mov	r3, r0
 8010868:	b2db      	uxtb	r3, r3
 801086a:	b29b      	uxth	r3, r3
 801086c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010870:	b29b      	uxth	r3, r3
 8010872:	4618      	mov	r0, r3
 8010874:	f7fa ff8e 	bl	800b794 <lwip_htons>
 8010878:	4603      	mov	r3, r0
 801087a:	b21b      	sxth	r3, r3
 801087c:	4323      	orrs	r3, r4
 801087e:	b21a      	sxth	r2, r3
 8010880:	4b57      	ldr	r3, [pc, #348]	; (80109e0 <tcp_receive+0x88c>)
 8010882:	68db      	ldr	r3, [r3, #12]
 8010884:	b292      	uxth	r2, r2
 8010886:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801088c:	4b54      	ldr	r3, [pc, #336]	; (80109e0 <tcp_receive+0x88c>)
 801088e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010890:	4b53      	ldr	r3, [pc, #332]	; (80109e0 <tcp_receive+0x88c>)
 8010892:	68db      	ldr	r3, [r3, #12]
 8010894:	899b      	ldrh	r3, [r3, #12]
 8010896:	b29b      	uxth	r3, r3
 8010898:	4618      	mov	r0, r3
 801089a:	f7fa ff7b 	bl	800b794 <lwip_htons>
 801089e:	4603      	mov	r3, r0
 80108a0:	b2db      	uxtb	r3, r3
 80108a2:	f003 0302 	and.w	r3, r3, #2
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d005      	beq.n	80108b6 <tcp_receive+0x762>
            inseg.len -= 1;
 80108aa:	4b4d      	ldr	r3, [pc, #308]	; (80109e0 <tcp_receive+0x88c>)
 80108ac:	891b      	ldrh	r3, [r3, #8]
 80108ae:	3b01      	subs	r3, #1
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	4b4b      	ldr	r3, [pc, #300]	; (80109e0 <tcp_receive+0x88c>)
 80108b4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80108b6:	4b4a      	ldr	r3, [pc, #296]	; (80109e0 <tcp_receive+0x88c>)
 80108b8:	685b      	ldr	r3, [r3, #4]
 80108ba:	4a49      	ldr	r2, [pc, #292]	; (80109e0 <tcp_receive+0x88c>)
 80108bc:	8912      	ldrh	r2, [r2, #8]
 80108be:	4611      	mov	r1, r2
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7fc f93f 	bl	800cb44 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80108c6:	4b46      	ldr	r3, [pc, #280]	; (80109e0 <tcp_receive+0x88c>)
 80108c8:	891c      	ldrh	r4, [r3, #8]
 80108ca:	4b45      	ldr	r3, [pc, #276]	; (80109e0 <tcp_receive+0x88c>)
 80108cc:	68db      	ldr	r3, [r3, #12]
 80108ce:	899b      	ldrh	r3, [r3, #12]
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7fa ff5e 	bl	800b794 <lwip_htons>
 80108d8:	4603      	mov	r3, r0
 80108da:	b2db      	uxtb	r3, r3
 80108dc:	f003 0303 	and.w	r3, r3, #3
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d001      	beq.n	80108e8 <tcp_receive+0x794>
 80108e4:	2301      	movs	r3, #1
 80108e6:	e000      	b.n	80108ea <tcp_receive+0x796>
 80108e8:	2300      	movs	r3, #0
 80108ea:	4423      	add	r3, r4
 80108ec:	b29a      	uxth	r2, r3
 80108ee:	4b3d      	ldr	r3, [pc, #244]	; (80109e4 <tcp_receive+0x890>)
 80108f0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80108f2:	4b3c      	ldr	r3, [pc, #240]	; (80109e4 <tcp_receive+0x890>)
 80108f4:	881b      	ldrh	r3, [r3, #0]
 80108f6:	461a      	mov	r2, r3
 80108f8:	4b38      	ldr	r3, [pc, #224]	; (80109dc <tcp_receive+0x888>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	441a      	add	r2, r3
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010902:	6879      	ldr	r1, [r7, #4]
 8010904:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010906:	440b      	add	r3, r1
 8010908:	429a      	cmp	r2, r3
 801090a:	d006      	beq.n	801091a <tcp_receive+0x7c6>
 801090c:	4b36      	ldr	r3, [pc, #216]	; (80109e8 <tcp_receive+0x894>)
 801090e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010912:	4936      	ldr	r1, [pc, #216]	; (80109ec <tcp_receive+0x898>)
 8010914:	4836      	ldr	r0, [pc, #216]	; (80109f0 <tcp_receive+0x89c>)
 8010916:	f005 fc5b 	bl	80161d0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801091e:	2b00      	cmp	r3, #0
 8010920:	f000 80e7 	beq.w	8010af2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010924:	4b2e      	ldr	r3, [pc, #184]	; (80109e0 <tcp_receive+0x88c>)
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	899b      	ldrh	r3, [r3, #12]
 801092a:	b29b      	uxth	r3, r3
 801092c:	4618      	mov	r0, r3
 801092e:	f7fa ff31 	bl	800b794 <lwip_htons>
 8010932:	4603      	mov	r3, r0
 8010934:	b2db      	uxtb	r3, r3
 8010936:	f003 0301 	and.w	r3, r3, #1
 801093a:	2b00      	cmp	r3, #0
 801093c:	d010      	beq.n	8010960 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801093e:	e00a      	b.n	8010956 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010944:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801094a:	681a      	ldr	r2, [r3, #0]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010950:	68f8      	ldr	r0, [r7, #12]
 8010952:	f7fd fd92 	bl	800e47a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801095a:	2b00      	cmp	r3, #0
 801095c:	d1f0      	bne.n	8010940 <tcp_receive+0x7ec>
 801095e:	e0c8      	b.n	8010af2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010964:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010966:	e052      	b.n	8010a0e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	899b      	ldrh	r3, [r3, #12]
 801096e:	b29b      	uxth	r3, r3
 8010970:	4618      	mov	r0, r3
 8010972:	f7fa ff0f 	bl	800b794 <lwip_htons>
 8010976:	4603      	mov	r3, r0
 8010978:	b2db      	uxtb	r3, r3
 801097a:	f003 0301 	and.w	r3, r3, #1
 801097e:	2b00      	cmp	r3, #0
 8010980:	d03d      	beq.n	80109fe <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010982:	4b17      	ldr	r3, [pc, #92]	; (80109e0 <tcp_receive+0x88c>)
 8010984:	68db      	ldr	r3, [r3, #12]
 8010986:	899b      	ldrh	r3, [r3, #12]
 8010988:	b29b      	uxth	r3, r3
 801098a:	4618      	mov	r0, r3
 801098c:	f7fa ff02 	bl	800b794 <lwip_htons>
 8010990:	4603      	mov	r3, r0
 8010992:	b2db      	uxtb	r3, r3
 8010994:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010998:	2b00      	cmp	r3, #0
 801099a:	d130      	bne.n	80109fe <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801099c:	4b10      	ldr	r3, [pc, #64]	; (80109e0 <tcp_receive+0x88c>)
 801099e:	68db      	ldr	r3, [r3, #12]
 80109a0:	899b      	ldrh	r3, [r3, #12]
 80109a2:	b29c      	uxth	r4, r3
 80109a4:	2001      	movs	r0, #1
 80109a6:	f7fa fef5 	bl	800b794 <lwip_htons>
 80109aa:	4603      	mov	r3, r0
 80109ac:	461a      	mov	r2, r3
 80109ae:	4b0c      	ldr	r3, [pc, #48]	; (80109e0 <tcp_receive+0x88c>)
 80109b0:	68db      	ldr	r3, [r3, #12]
 80109b2:	4322      	orrs	r2, r4
 80109b4:	b292      	uxth	r2, r2
 80109b6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80109b8:	4b09      	ldr	r3, [pc, #36]	; (80109e0 <tcp_receive+0x88c>)
 80109ba:	891c      	ldrh	r4, [r3, #8]
 80109bc:	4b08      	ldr	r3, [pc, #32]	; (80109e0 <tcp_receive+0x88c>)
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	899b      	ldrh	r3, [r3, #12]
 80109c2:	b29b      	uxth	r3, r3
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7fa fee5 	bl	800b794 <lwip_htons>
 80109ca:	4603      	mov	r3, r0
 80109cc:	b2db      	uxtb	r3, r3
 80109ce:	f003 0303 	and.w	r3, r3, #3
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d00e      	beq.n	80109f4 <tcp_receive+0x8a0>
 80109d6:	2301      	movs	r3, #1
 80109d8:	e00d      	b.n	80109f6 <tcp_receive+0x8a2>
 80109da:	bf00      	nop
 80109dc:	20008f58 	.word	0x20008f58
 80109e0:	20008f38 	.word	0x20008f38
 80109e4:	20008f62 	.word	0x20008f62
 80109e8:	080184bc 	.word	0x080184bc
 80109ec:	08018864 	.word	0x08018864
 80109f0:	08018508 	.word	0x08018508
 80109f4:	2300      	movs	r3, #0
 80109f6:	4423      	add	r3, r4
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	4b98      	ldr	r3, [pc, #608]	; (8010c5c <tcp_receive+0xb08>)
 80109fc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80109fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a00:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010a08:	6938      	ldr	r0, [r7, #16]
 8010a0a:	f7fd fd36 	bl	800e47a <tcp_seg_free>
            while (next &&
 8010a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d00e      	beq.n	8010a32 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010a14:	4b91      	ldr	r3, [pc, #580]	; (8010c5c <tcp_receive+0xb08>)
 8010a16:	881b      	ldrh	r3, [r3, #0]
 8010a18:	461a      	mov	r2, r3
 8010a1a:	4b91      	ldr	r3, [pc, #580]	; (8010c60 <tcp_receive+0xb0c>)
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	441a      	add	r2, r3
 8010a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a22:	68db      	ldr	r3, [r3, #12]
 8010a24:	685b      	ldr	r3, [r3, #4]
 8010a26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010a28:	8909      	ldrh	r1, [r1, #8]
 8010a2a:	440b      	add	r3, r1
 8010a2c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	da9a      	bge.n	8010968 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d059      	beq.n	8010aec <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010a38:	4b88      	ldr	r3, [pc, #544]	; (8010c5c <tcp_receive+0xb08>)
 8010a3a:	881b      	ldrh	r3, [r3, #0]
 8010a3c:	461a      	mov	r2, r3
 8010a3e:	4b88      	ldr	r3, [pc, #544]	; (8010c60 <tcp_receive+0xb0c>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	441a      	add	r2, r3
 8010a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a46:	68db      	ldr	r3, [r3, #12]
 8010a48:	685b      	ldr	r3, [r3, #4]
 8010a4a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	dd4d      	ble.n	8010aec <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010a52:	68db      	ldr	r3, [r3, #12]
 8010a54:	685b      	ldr	r3, [r3, #4]
 8010a56:	b29a      	uxth	r2, r3
 8010a58:	4b81      	ldr	r3, [pc, #516]	; (8010c60 <tcp_receive+0xb0c>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	1ad3      	subs	r3, r2, r3
 8010a60:	b29a      	uxth	r2, r3
 8010a62:	4b80      	ldr	r3, [pc, #512]	; (8010c64 <tcp_receive+0xb10>)
 8010a64:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010a66:	4b7f      	ldr	r3, [pc, #508]	; (8010c64 <tcp_receive+0xb10>)
 8010a68:	68db      	ldr	r3, [r3, #12]
 8010a6a:	899b      	ldrh	r3, [r3, #12]
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f7fa fe90 	bl	800b794 <lwip_htons>
 8010a74:	4603      	mov	r3, r0
 8010a76:	b2db      	uxtb	r3, r3
 8010a78:	f003 0302 	and.w	r3, r3, #2
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d005      	beq.n	8010a8c <tcp_receive+0x938>
                inseg.len -= 1;
 8010a80:	4b78      	ldr	r3, [pc, #480]	; (8010c64 <tcp_receive+0xb10>)
 8010a82:	891b      	ldrh	r3, [r3, #8]
 8010a84:	3b01      	subs	r3, #1
 8010a86:	b29a      	uxth	r2, r3
 8010a88:	4b76      	ldr	r3, [pc, #472]	; (8010c64 <tcp_receive+0xb10>)
 8010a8a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010a8c:	4b75      	ldr	r3, [pc, #468]	; (8010c64 <tcp_receive+0xb10>)
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	4a74      	ldr	r2, [pc, #464]	; (8010c64 <tcp_receive+0xb10>)
 8010a92:	8912      	ldrh	r2, [r2, #8]
 8010a94:	4611      	mov	r1, r2
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7fc f854 	bl	800cb44 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010a9c:	4b71      	ldr	r3, [pc, #452]	; (8010c64 <tcp_receive+0xb10>)
 8010a9e:	891c      	ldrh	r4, [r3, #8]
 8010aa0:	4b70      	ldr	r3, [pc, #448]	; (8010c64 <tcp_receive+0xb10>)
 8010aa2:	68db      	ldr	r3, [r3, #12]
 8010aa4:	899b      	ldrh	r3, [r3, #12]
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f7fa fe73 	bl	800b794 <lwip_htons>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	b2db      	uxtb	r3, r3
 8010ab2:	f003 0303 	and.w	r3, r3, #3
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d001      	beq.n	8010abe <tcp_receive+0x96a>
 8010aba:	2301      	movs	r3, #1
 8010abc:	e000      	b.n	8010ac0 <tcp_receive+0x96c>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	4423      	add	r3, r4
 8010ac2:	b29a      	uxth	r2, r3
 8010ac4:	4b65      	ldr	r3, [pc, #404]	; (8010c5c <tcp_receive+0xb08>)
 8010ac6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010ac8:	4b64      	ldr	r3, [pc, #400]	; (8010c5c <tcp_receive+0xb08>)
 8010aca:	881b      	ldrh	r3, [r3, #0]
 8010acc:	461a      	mov	r2, r3
 8010ace:	4b64      	ldr	r3, [pc, #400]	; (8010c60 <tcp_receive+0xb0c>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	441a      	add	r2, r3
 8010ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ad6:	68db      	ldr	r3, [r3, #12]
 8010ad8:	685b      	ldr	r3, [r3, #4]
 8010ada:	429a      	cmp	r2, r3
 8010adc:	d006      	beq.n	8010aec <tcp_receive+0x998>
 8010ade:	4b62      	ldr	r3, [pc, #392]	; (8010c68 <tcp_receive+0xb14>)
 8010ae0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010ae4:	4961      	ldr	r1, [pc, #388]	; (8010c6c <tcp_receive+0xb18>)
 8010ae6:	4862      	ldr	r0, [pc, #392]	; (8010c70 <tcp_receive+0xb1c>)
 8010ae8:	f005 fb72 	bl	80161d0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010af0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010af2:	4b5a      	ldr	r3, [pc, #360]	; (8010c5c <tcp_receive+0xb08>)
 8010af4:	881b      	ldrh	r3, [r3, #0]
 8010af6:	461a      	mov	r2, r3
 8010af8:	4b59      	ldr	r3, [pc, #356]	; (8010c60 <tcp_receive+0xb0c>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	441a      	add	r2, r3
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b06:	4b55      	ldr	r3, [pc, #340]	; (8010c5c <tcp_receive+0xb08>)
 8010b08:	881b      	ldrh	r3, [r3, #0]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d206      	bcs.n	8010b1c <tcp_receive+0x9c8>
 8010b0e:	4b56      	ldr	r3, [pc, #344]	; (8010c68 <tcp_receive+0xb14>)
 8010b10:	f240 6207 	movw	r2, #1543	; 0x607
 8010b14:	4957      	ldr	r1, [pc, #348]	; (8010c74 <tcp_receive+0xb20>)
 8010b16:	4856      	ldr	r0, [pc, #344]	; (8010c70 <tcp_receive+0xb1c>)
 8010b18:	f005 fb5a 	bl	80161d0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b20:	4b4e      	ldr	r3, [pc, #312]	; (8010c5c <tcp_receive+0xb08>)
 8010b22:	881b      	ldrh	r3, [r3, #0]
 8010b24:	1ad3      	subs	r3, r2, r3
 8010b26:	b29a      	uxth	r2, r3
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f7fc ffc5 	bl	800dabc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010b32:	4b4c      	ldr	r3, [pc, #304]	; (8010c64 <tcp_receive+0xb10>)
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	891b      	ldrh	r3, [r3, #8]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d006      	beq.n	8010b4a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010b3c:	4b49      	ldr	r3, [pc, #292]	; (8010c64 <tcp_receive+0xb10>)
 8010b3e:	685b      	ldr	r3, [r3, #4]
 8010b40:	4a4d      	ldr	r2, [pc, #308]	; (8010c78 <tcp_receive+0xb24>)
 8010b42:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010b44:	4b47      	ldr	r3, [pc, #284]	; (8010c64 <tcp_receive+0xb10>)
 8010b46:	2200      	movs	r2, #0
 8010b48:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010b4a:	4b46      	ldr	r3, [pc, #280]	; (8010c64 <tcp_receive+0xb10>)
 8010b4c:	68db      	ldr	r3, [r3, #12]
 8010b4e:	899b      	ldrh	r3, [r3, #12]
 8010b50:	b29b      	uxth	r3, r3
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7fa fe1e 	bl	800b794 <lwip_htons>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	b2db      	uxtb	r3, r3
 8010b5c:	f003 0301 	and.w	r3, r3, #1
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f000 80b8 	beq.w	8010cd6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010b66:	4b45      	ldr	r3, [pc, #276]	; (8010c7c <tcp_receive+0xb28>)
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	f043 0320 	orr.w	r3, r3, #32
 8010b6e:	b2da      	uxtb	r2, r3
 8010b70:	4b42      	ldr	r3, [pc, #264]	; (8010c7c <tcp_receive+0xb28>)
 8010b72:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010b74:	e0af      	b.n	8010cd6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b7a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010b80:	68db      	ldr	r3, [r3, #12]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	4a36      	ldr	r2, [pc, #216]	; (8010c60 <tcp_receive+0xb0c>)
 8010b86:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	891b      	ldrh	r3, [r3, #8]
 8010b8c:	461c      	mov	r4, r3
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	68db      	ldr	r3, [r3, #12]
 8010b92:	899b      	ldrh	r3, [r3, #12]
 8010b94:	b29b      	uxth	r3, r3
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fa fdfc 	bl	800b794 <lwip_htons>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	b2db      	uxtb	r3, r3
 8010ba0:	f003 0303 	and.w	r3, r3, #3
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d001      	beq.n	8010bac <tcp_receive+0xa58>
 8010ba8:	2301      	movs	r3, #1
 8010baa:	e000      	b.n	8010bae <tcp_receive+0xa5a>
 8010bac:	2300      	movs	r3, #0
 8010bae:	191a      	adds	r2, r3, r4
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bb4:	441a      	add	r2, r3
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010bbe:	461c      	mov	r4, r3
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	891b      	ldrh	r3, [r3, #8]
 8010bc4:	461d      	mov	r5, r3
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	899b      	ldrh	r3, [r3, #12]
 8010bcc:	b29b      	uxth	r3, r3
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f7fa fde0 	bl	800b794 <lwip_htons>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	b2db      	uxtb	r3, r3
 8010bd8:	f003 0303 	and.w	r3, r3, #3
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d001      	beq.n	8010be4 <tcp_receive+0xa90>
 8010be0:	2301      	movs	r3, #1
 8010be2:	e000      	b.n	8010be6 <tcp_receive+0xa92>
 8010be4:	2300      	movs	r3, #0
 8010be6:	442b      	add	r3, r5
 8010be8:	429c      	cmp	r4, r3
 8010bea:	d206      	bcs.n	8010bfa <tcp_receive+0xaa6>
 8010bec:	4b1e      	ldr	r3, [pc, #120]	; (8010c68 <tcp_receive+0xb14>)
 8010bee:	f240 622b 	movw	r2, #1579	; 0x62b
 8010bf2:	4923      	ldr	r1, [pc, #140]	; (8010c80 <tcp_receive+0xb2c>)
 8010bf4:	481e      	ldr	r0, [pc, #120]	; (8010c70 <tcp_receive+0xb1c>)
 8010bf6:	f005 faeb 	bl	80161d0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010bfa:	68bb      	ldr	r3, [r7, #8]
 8010bfc:	891b      	ldrh	r3, [r3, #8]
 8010bfe:	461c      	mov	r4, r3
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	68db      	ldr	r3, [r3, #12]
 8010c04:	899b      	ldrh	r3, [r3, #12]
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fa fdc3 	bl	800b794 <lwip_htons>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	f003 0303 	and.w	r3, r3, #3
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d001      	beq.n	8010c1e <tcp_receive+0xaca>
 8010c1a:	2301      	movs	r3, #1
 8010c1c:	e000      	b.n	8010c20 <tcp_receive+0xacc>
 8010c1e:	2300      	movs	r3, #0
 8010c20:	1919      	adds	r1, r3, r4
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010c26:	b28b      	uxth	r3, r1
 8010c28:	1ad3      	subs	r3, r2, r3
 8010c2a:	b29a      	uxth	r2, r3
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010c30:	6878      	ldr	r0, [r7, #4]
 8010c32:	f7fc ff43 	bl	800dabc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010c36:	68bb      	ldr	r3, [r7, #8]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	891b      	ldrh	r3, [r3, #8]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d028      	beq.n	8010c92 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010c40:	4b0d      	ldr	r3, [pc, #52]	; (8010c78 <tcp_receive+0xb24>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d01d      	beq.n	8010c84 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010c48:	4b0b      	ldr	r3, [pc, #44]	; (8010c78 <tcp_receive+0xb24>)
 8010c4a:	681a      	ldr	r2, [r3, #0]
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	685b      	ldr	r3, [r3, #4]
 8010c50:	4619      	mov	r1, r3
 8010c52:	4610      	mov	r0, r2
 8010c54:	f7fc f9be 	bl	800cfd4 <pbuf_cat>
 8010c58:	e018      	b.n	8010c8c <tcp_receive+0xb38>
 8010c5a:	bf00      	nop
 8010c5c:	20008f62 	.word	0x20008f62
 8010c60:	20008f58 	.word	0x20008f58
 8010c64:	20008f38 	.word	0x20008f38
 8010c68:	080184bc 	.word	0x080184bc
 8010c6c:	0801889c 	.word	0x0801889c
 8010c70:	08018508 	.word	0x08018508
 8010c74:	080188d8 	.word	0x080188d8
 8010c78:	20008f68 	.word	0x20008f68
 8010c7c:	20008f65 	.word	0x20008f65
 8010c80:	080188f8 	.word	0x080188f8
            } else {
              recv_data = cseg->p;
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	4a70      	ldr	r2, [pc, #448]	; (8010e4c <tcp_receive+0xcf8>)
 8010c8a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	68db      	ldr	r3, [r3, #12]
 8010c96:	899b      	ldrh	r3, [r3, #12]
 8010c98:	b29b      	uxth	r3, r3
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f7fa fd7a 	bl	800b794 <lwip_htons>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	b2db      	uxtb	r3, r3
 8010ca4:	f003 0301 	and.w	r3, r3, #1
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d00d      	beq.n	8010cc8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010cac:	4b68      	ldr	r3, [pc, #416]	; (8010e50 <tcp_receive+0xcfc>)
 8010cae:	781b      	ldrb	r3, [r3, #0]
 8010cb0:	f043 0320 	orr.w	r3, r3, #32
 8010cb4:	b2da      	uxtb	r2, r3
 8010cb6:	4b66      	ldr	r3, [pc, #408]	; (8010e50 <tcp_receive+0xcfc>)
 8010cb8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	7d1b      	ldrb	r3, [r3, #20]
 8010cbe:	2b04      	cmp	r3, #4
 8010cc0:	d102      	bne.n	8010cc8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	2207      	movs	r2, #7
 8010cc6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	681a      	ldr	r2, [r3, #0]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010cd0:	68b8      	ldr	r0, [r7, #8]
 8010cd2:	f7fd fbd2 	bl	800e47a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d008      	beq.n	8010cf0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010ce2:	68db      	ldr	r3, [r3, #12]
 8010ce4:	685a      	ldr	r2, [r3, #4]
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010cea:	429a      	cmp	r2, r3
 8010cec:	f43f af43 	beq.w	8010b76 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	8b5b      	ldrh	r3, [r3, #26]
 8010cf4:	f003 0301 	and.w	r3, r3, #1
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00e      	beq.n	8010d1a <tcp_receive+0xbc6>
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	8b5b      	ldrh	r3, [r3, #26]
 8010d00:	f023 0301 	bic.w	r3, r3, #1
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	835a      	strh	r2, [r3, #26]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	8b5b      	ldrh	r3, [r3, #26]
 8010d0e:	f043 0302 	orr.w	r3, r3, #2
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010d18:	e188      	b.n	801102c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	8b5b      	ldrh	r3, [r3, #26]
 8010d1e:	f043 0301 	orr.w	r3, r3, #1
 8010d22:	b29a      	uxth	r2, r3
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010d28:	e180      	b.n	801102c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d106      	bne.n	8010d40 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010d32:	4848      	ldr	r0, [pc, #288]	; (8010e54 <tcp_receive+0xd00>)
 8010d34:	f7fd fbba 	bl	800e4ac <tcp_seg_copy>
 8010d38:	4602      	mov	r2, r0
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	675a      	str	r2, [r3, #116]	; 0x74
 8010d3e:	e16d      	b.n	801101c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010d40:	2300      	movs	r3, #0
 8010d42:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d48:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d4a:	e157      	b.n	8010ffc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d4e:	68db      	ldr	r3, [r3, #12]
 8010d50:	685a      	ldr	r2, [r3, #4]
 8010d52:	4b41      	ldr	r3, [pc, #260]	; (8010e58 <tcp_receive+0xd04>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d11d      	bne.n	8010d96 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010d5a:	4b3e      	ldr	r3, [pc, #248]	; (8010e54 <tcp_receive+0xd00>)
 8010d5c:	891a      	ldrh	r2, [r3, #8]
 8010d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d60:	891b      	ldrh	r3, [r3, #8]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	f240 814f 	bls.w	8011006 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010d68:	483a      	ldr	r0, [pc, #232]	; (8010e54 <tcp_receive+0xd00>)
 8010d6a:	f7fd fb9f 	bl	800e4ac <tcp_seg_copy>
 8010d6e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	f000 8149 	beq.w	801100a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d003      	beq.n	8010d86 <tcp_receive+0xc32>
                    prev->next = cseg;
 8010d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d80:	697a      	ldr	r2, [r7, #20]
 8010d82:	601a      	str	r2, [r3, #0]
 8010d84:	e002      	b.n	8010d8c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	697a      	ldr	r2, [r7, #20]
 8010d8a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010d8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010d8e:	6978      	ldr	r0, [r7, #20]
 8010d90:	f7ff f8dc 	bl	800ff4c <tcp_oos_insert_segment>
                }
                break;
 8010d94:	e139      	b.n	801100a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d117      	bne.n	8010dcc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010d9c:	4b2e      	ldr	r3, [pc, #184]	; (8010e58 <tcp_receive+0xd04>)
 8010d9e:	681a      	ldr	r2, [r3, #0]
 8010da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010da2:	68db      	ldr	r3, [r3, #12]
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	1ad3      	subs	r3, r2, r3
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	da57      	bge.n	8010e5c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010dac:	4829      	ldr	r0, [pc, #164]	; (8010e54 <tcp_receive+0xd00>)
 8010dae:	f7fd fb7d 	bl	800e4ac <tcp_seg_copy>
 8010db2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010db4:	69bb      	ldr	r3, [r7, #24]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f000 8129 	beq.w	801100e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	69ba      	ldr	r2, [r7, #24]
 8010dc0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010dc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010dc4:	69b8      	ldr	r0, [r7, #24]
 8010dc6:	f7ff f8c1 	bl	800ff4c <tcp_oos_insert_segment>
                  }
                  break;
 8010dca:	e120      	b.n	801100e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010dcc:	4b22      	ldr	r3, [pc, #136]	; (8010e58 <tcp_receive+0xd04>)
 8010dce:	681a      	ldr	r2, [r3, #0]
 8010dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd2:	68db      	ldr	r3, [r3, #12]
 8010dd4:	685b      	ldr	r3, [r3, #4]
 8010dd6:	1ad3      	subs	r3, r2, r3
 8010dd8:	3b01      	subs	r3, #1
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	db3e      	blt.n	8010e5c <tcp_receive+0xd08>
 8010dde:	4b1e      	ldr	r3, [pc, #120]	; (8010e58 <tcp_receive+0xd04>)
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010de4:	68db      	ldr	r3, [r3, #12]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	1ad3      	subs	r3, r2, r3
 8010dea:	3301      	adds	r3, #1
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	dc35      	bgt.n	8010e5c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010df0:	4818      	ldr	r0, [pc, #96]	; (8010e54 <tcp_receive+0xd00>)
 8010df2:	f7fd fb5b 	bl	800e4ac <tcp_seg_copy>
 8010df6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010df8:	69fb      	ldr	r3, [r7, #28]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f000 8109 	beq.w	8011012 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	685b      	ldr	r3, [r3, #4]
 8010e06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e08:	8912      	ldrh	r2, [r2, #8]
 8010e0a:	441a      	add	r2, r3
 8010e0c:	4b12      	ldr	r3, [pc, #72]	; (8010e58 <tcp_receive+0xd04>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	1ad3      	subs	r3, r2, r3
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	dd12      	ble.n	8010e3c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010e16:	4b10      	ldr	r3, [pc, #64]	; (8010e58 <tcp_receive+0xd04>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	b29a      	uxth	r2, r3
 8010e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	685b      	ldr	r3, [r3, #4]
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	1ad3      	subs	r3, r2, r3
 8010e26:	b29a      	uxth	r2, r3
 8010e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e2a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e2e:	685a      	ldr	r2, [r3, #4]
 8010e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e32:	891b      	ldrh	r3, [r3, #8]
 8010e34:	4619      	mov	r1, r3
 8010e36:	4610      	mov	r0, r2
 8010e38:	f7fb fe84 	bl	800cb44 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e3e:	69fa      	ldr	r2, [r7, #28]
 8010e40:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010e42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010e44:	69f8      	ldr	r0, [r7, #28]
 8010e46:	f7ff f881 	bl	800ff4c <tcp_oos_insert_segment>
                  }
                  break;
 8010e4a:	e0e2      	b.n	8011012 <tcp_receive+0xebe>
 8010e4c:	20008f68 	.word	0x20008f68
 8010e50:	20008f65 	.word	0x20008f65
 8010e54:	20008f38 	.word	0x20008f38
 8010e58:	20008f58 	.word	0x20008f58
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e5e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	f040 80c6 	bne.w	8010ff6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010e6a:	4b80      	ldr	r3, [pc, #512]	; (801106c <tcp_receive+0xf18>)
 8010e6c:	681a      	ldr	r2, [r3, #0]
 8010e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e70:	68db      	ldr	r3, [r3, #12]
 8010e72:	685b      	ldr	r3, [r3, #4]
 8010e74:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	f340 80bd 	ble.w	8010ff6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	899b      	ldrh	r3, [r3, #12]
 8010e82:	b29b      	uxth	r3, r3
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fa fc85 	bl	800b794 <lwip_htons>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	f003 0301 	and.w	r3, r3, #1
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	f040 80bf 	bne.w	8011016 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8010e98:	4875      	ldr	r0, [pc, #468]	; (8011070 <tcp_receive+0xf1c>)
 8010e9a:	f7fd fb07 	bl	800e4ac <tcp_seg_copy>
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	f000 80b6 	beq.w	801101a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb0:	68db      	ldr	r3, [r3, #12]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010eb6:	8912      	ldrh	r2, [r2, #8]
 8010eb8:	441a      	add	r2, r3
 8010eba:	4b6c      	ldr	r3, [pc, #432]	; (801106c <tcp_receive+0xf18>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	1ad3      	subs	r3, r2, r3
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	dd12      	ble.n	8010eea <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010ec4:	4b69      	ldr	r3, [pc, #420]	; (801106c <tcp_receive+0xf18>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	b29a      	uxth	r2, r3
 8010eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ecc:	68db      	ldr	r3, [r3, #12]
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	1ad3      	subs	r3, r2, r3
 8010ed4:	b29a      	uxth	r2, r3
 8010ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ed8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010edc:	685a      	ldr	r2, [r3, #4]
 8010ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee0:	891b      	ldrh	r3, [r3, #8]
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	4610      	mov	r0, r2
 8010ee6:	f7fb fe2d 	bl	800cb44 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010eea:	4b62      	ldr	r3, [pc, #392]	; (8011074 <tcp_receive+0xf20>)
 8010eec:	881b      	ldrh	r3, [r3, #0]
 8010eee:	461a      	mov	r2, r3
 8010ef0:	4b5e      	ldr	r3, [pc, #376]	; (801106c <tcp_receive+0xf18>)
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	441a      	add	r2, r3
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010efa:	6879      	ldr	r1, [r7, #4]
 8010efc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010efe:	440b      	add	r3, r1
 8010f00:	1ad3      	subs	r3, r2, r3
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	f340 8089 	ble.w	801101a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	68db      	ldr	r3, [r3, #12]
 8010f0e:	899b      	ldrh	r3, [r3, #12]
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	4618      	mov	r0, r3
 8010f14:	f7fa fc3e 	bl	800b794 <lwip_htons>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	f003 0301 	and.w	r3, r3, #1
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d022      	beq.n	8010f6a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	68db      	ldr	r3, [r3, #12]
 8010f2a:	899b      	ldrh	r3, [r3, #12]
 8010f2c:	b29b      	uxth	r3, r3
 8010f2e:	b21b      	sxth	r3, r3
 8010f30:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010f34:	b21c      	sxth	r4, r3
 8010f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	68db      	ldr	r3, [r3, #12]
 8010f3c:	899b      	ldrh	r3, [r3, #12]
 8010f3e:	b29b      	uxth	r3, r3
 8010f40:	4618      	mov	r0, r3
 8010f42:	f7fa fc27 	bl	800b794 <lwip_htons>
 8010f46:	4603      	mov	r3, r0
 8010f48:	b2db      	uxtb	r3, r3
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7fa fc1e 	bl	800b794 <lwip_htons>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	b21b      	sxth	r3, r3
 8010f5c:	4323      	orrs	r3, r4
 8010f5e:	b21a      	sxth	r2, r3
 8010f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	68db      	ldr	r3, [r3, #12]
 8010f66:	b292      	uxth	r2, r2
 8010f68:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f6e:	b29a      	uxth	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f74:	4413      	add	r3, r2
 8010f76:	b299      	uxth	r1, r3
 8010f78:	4b3c      	ldr	r3, [pc, #240]	; (801106c <tcp_receive+0xf18>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	b29a      	uxth	r2, r3
 8010f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	1a8a      	subs	r2, r1, r2
 8010f84:	b292      	uxth	r2, r2
 8010f86:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	685a      	ldr	r2, [r3, #4]
 8010f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	891b      	ldrh	r3, [r3, #8]
 8010f94:	4619      	mov	r1, r3
 8010f96:	4610      	mov	r0, r2
 8010f98:	f7fb fdd4 	bl	800cb44 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	891c      	ldrh	r4, [r3, #8]
 8010fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	68db      	ldr	r3, [r3, #12]
 8010fa8:	899b      	ldrh	r3, [r3, #12]
 8010faa:	b29b      	uxth	r3, r3
 8010fac:	4618      	mov	r0, r3
 8010fae:	f7fa fbf1 	bl	800b794 <lwip_htons>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	f003 0303 	and.w	r3, r3, #3
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d001      	beq.n	8010fc2 <tcp_receive+0xe6e>
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	e000      	b.n	8010fc4 <tcp_receive+0xe70>
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	4423      	add	r3, r4
 8010fc6:	b29a      	uxth	r2, r3
 8010fc8:	4b2a      	ldr	r3, [pc, #168]	; (8011074 <tcp_receive+0xf20>)
 8010fca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010fcc:	4b29      	ldr	r3, [pc, #164]	; (8011074 <tcp_receive+0xf20>)
 8010fce:	881b      	ldrh	r3, [r3, #0]
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	4b26      	ldr	r3, [pc, #152]	; (801106c <tcp_receive+0xf18>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	441a      	add	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fdc:	6879      	ldr	r1, [r7, #4]
 8010fde:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010fe0:	440b      	add	r3, r1
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d019      	beq.n	801101a <tcp_receive+0xec6>
 8010fe6:	4b24      	ldr	r3, [pc, #144]	; (8011078 <tcp_receive+0xf24>)
 8010fe8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010fec:	4923      	ldr	r1, [pc, #140]	; (801107c <tcp_receive+0xf28>)
 8010fee:	4824      	ldr	r0, [pc, #144]	; (8011080 <tcp_receive+0xf2c>)
 8010ff0:	f005 f8ee 	bl	80161d0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010ff4:	e011      	b.n	801101a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8010ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f47f aea4 	bne.w	8010d4c <tcp_receive+0xbf8>
 8011004:	e00a      	b.n	801101c <tcp_receive+0xec8>
                break;
 8011006:	bf00      	nop
 8011008:	e008      	b.n	801101c <tcp_receive+0xec8>
                break;
 801100a:	bf00      	nop
 801100c:	e006      	b.n	801101c <tcp_receive+0xec8>
                  break;
 801100e:	bf00      	nop
 8011010:	e004      	b.n	801101c <tcp_receive+0xec8>
                  break;
 8011012:	bf00      	nop
 8011014:	e002      	b.n	801101c <tcp_receive+0xec8>
                  break;
 8011016:	bf00      	nop
 8011018:	e000      	b.n	801101c <tcp_receive+0xec8>
                break;
 801101a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801101c:	6878      	ldr	r0, [r7, #4]
 801101e:	f001 fa33 	bl	8012488 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011022:	e003      	b.n	801102c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f001 fa2f 	bl	8012488 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801102a:	e01a      	b.n	8011062 <tcp_receive+0xf0e>
 801102c:	e019      	b.n	8011062 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801102e:	4b0f      	ldr	r3, [pc, #60]	; (801106c <tcp_receive+0xf18>)
 8011030:	681a      	ldr	r2, [r3, #0]
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011036:	1ad3      	subs	r3, r2, r3
 8011038:	2b00      	cmp	r3, #0
 801103a:	db0a      	blt.n	8011052 <tcp_receive+0xefe>
 801103c:	4b0b      	ldr	r3, [pc, #44]	; (801106c <tcp_receive+0xf18>)
 801103e:	681a      	ldr	r2, [r3, #0]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011044:	6879      	ldr	r1, [r7, #4]
 8011046:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011048:	440b      	add	r3, r1
 801104a:	1ad3      	subs	r3, r2, r3
 801104c:	3301      	adds	r3, #1
 801104e:	2b00      	cmp	r3, #0
 8011050:	dd07      	ble.n	8011062 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	8b5b      	ldrh	r3, [r3, #26]
 8011056:	f043 0302 	orr.w	r3, r3, #2
 801105a:	b29a      	uxth	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011060:	e7ff      	b.n	8011062 <tcp_receive+0xf0e>
 8011062:	bf00      	nop
 8011064:	3750      	adds	r7, #80	; 0x50
 8011066:	46bd      	mov	sp, r7
 8011068:	bdb0      	pop	{r4, r5, r7, pc}
 801106a:	bf00      	nop
 801106c:	20008f58 	.word	0x20008f58
 8011070:	20008f38 	.word	0x20008f38
 8011074:	20008f62 	.word	0x20008f62
 8011078:	080184bc 	.word	0x080184bc
 801107c:	08018864 	.word	0x08018864
 8011080:	08018508 	.word	0x08018508

08011084 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011084:	b480      	push	{r7}
 8011086:	b083      	sub	sp, #12
 8011088:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801108a:	4b15      	ldr	r3, [pc, #84]	; (80110e0 <tcp_get_next_optbyte+0x5c>)
 801108c:	881b      	ldrh	r3, [r3, #0]
 801108e:	1c5a      	adds	r2, r3, #1
 8011090:	b291      	uxth	r1, r2
 8011092:	4a13      	ldr	r2, [pc, #76]	; (80110e0 <tcp_get_next_optbyte+0x5c>)
 8011094:	8011      	strh	r1, [r2, #0]
 8011096:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011098:	4b12      	ldr	r3, [pc, #72]	; (80110e4 <tcp_get_next_optbyte+0x60>)
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d004      	beq.n	80110aa <tcp_get_next_optbyte+0x26>
 80110a0:	4b11      	ldr	r3, [pc, #68]	; (80110e8 <tcp_get_next_optbyte+0x64>)
 80110a2:	881b      	ldrh	r3, [r3, #0]
 80110a4:	88fa      	ldrh	r2, [r7, #6]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d208      	bcs.n	80110bc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80110aa:	4b10      	ldr	r3, [pc, #64]	; (80110ec <tcp_get_next_optbyte+0x68>)
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	3314      	adds	r3, #20
 80110b0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80110b2:	88fb      	ldrh	r3, [r7, #6]
 80110b4:	683a      	ldr	r2, [r7, #0]
 80110b6:	4413      	add	r3, r2
 80110b8:	781b      	ldrb	r3, [r3, #0]
 80110ba:	e00b      	b.n	80110d4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80110bc:	88fb      	ldrh	r3, [r7, #6]
 80110be:	b2da      	uxtb	r2, r3
 80110c0:	4b09      	ldr	r3, [pc, #36]	; (80110e8 <tcp_get_next_optbyte+0x64>)
 80110c2:	881b      	ldrh	r3, [r3, #0]
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	1ad3      	subs	r3, r2, r3
 80110c8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80110ca:	4b06      	ldr	r3, [pc, #24]	; (80110e4 <tcp_get_next_optbyte+0x60>)
 80110cc:	681a      	ldr	r2, [r3, #0]
 80110ce:	797b      	ldrb	r3, [r7, #5]
 80110d0:	4413      	add	r3, r2
 80110d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80110d4:	4618      	mov	r0, r3
 80110d6:	370c      	adds	r7, #12
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr
 80110e0:	20008f54 	.word	0x20008f54
 80110e4:	20008f50 	.word	0x20008f50
 80110e8:	20008f4e 	.word	0x20008f4e
 80110ec:	20008f48 	.word	0x20008f48

080110f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b084      	sub	sp, #16
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d106      	bne.n	801110c <tcp_parseopt+0x1c>
 80110fe:	4b32      	ldr	r3, [pc, #200]	; (80111c8 <tcp_parseopt+0xd8>)
 8011100:	f240 727d 	movw	r2, #1917	; 0x77d
 8011104:	4931      	ldr	r1, [pc, #196]	; (80111cc <tcp_parseopt+0xdc>)
 8011106:	4832      	ldr	r0, [pc, #200]	; (80111d0 <tcp_parseopt+0xe0>)
 8011108:	f005 f862 	bl	80161d0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801110c:	4b31      	ldr	r3, [pc, #196]	; (80111d4 <tcp_parseopt+0xe4>)
 801110e:	881b      	ldrh	r3, [r3, #0]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d055      	beq.n	80111c0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011114:	4b30      	ldr	r3, [pc, #192]	; (80111d8 <tcp_parseopt+0xe8>)
 8011116:	2200      	movs	r2, #0
 8011118:	801a      	strh	r2, [r3, #0]
 801111a:	e045      	b.n	80111a8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801111c:	f7ff ffb2 	bl	8011084 <tcp_get_next_optbyte>
 8011120:	4603      	mov	r3, r0
 8011122:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011124:	7bfb      	ldrb	r3, [r7, #15]
 8011126:	2b02      	cmp	r3, #2
 8011128:	d006      	beq.n	8011138 <tcp_parseopt+0x48>
 801112a:	2b02      	cmp	r3, #2
 801112c:	dc2b      	bgt.n	8011186 <tcp_parseopt+0x96>
 801112e:	2b00      	cmp	r3, #0
 8011130:	d041      	beq.n	80111b6 <tcp_parseopt+0xc6>
 8011132:	2b01      	cmp	r3, #1
 8011134:	d127      	bne.n	8011186 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011136:	e037      	b.n	80111a8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011138:	f7ff ffa4 	bl	8011084 <tcp_get_next_optbyte>
 801113c:	4603      	mov	r3, r0
 801113e:	2b04      	cmp	r3, #4
 8011140:	d13b      	bne.n	80111ba <tcp_parseopt+0xca>
 8011142:	4b25      	ldr	r3, [pc, #148]	; (80111d8 <tcp_parseopt+0xe8>)
 8011144:	881b      	ldrh	r3, [r3, #0]
 8011146:	3301      	adds	r3, #1
 8011148:	4a22      	ldr	r2, [pc, #136]	; (80111d4 <tcp_parseopt+0xe4>)
 801114a:	8812      	ldrh	r2, [r2, #0]
 801114c:	4293      	cmp	r3, r2
 801114e:	da34      	bge.n	80111ba <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011150:	f7ff ff98 	bl	8011084 <tcp_get_next_optbyte>
 8011154:	4603      	mov	r3, r0
 8011156:	b29b      	uxth	r3, r3
 8011158:	021b      	lsls	r3, r3, #8
 801115a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801115c:	f7ff ff92 	bl	8011084 <tcp_get_next_optbyte>
 8011160:	4603      	mov	r3, r0
 8011162:	b29a      	uxth	r2, r3
 8011164:	89bb      	ldrh	r3, [r7, #12]
 8011166:	4313      	orrs	r3, r2
 8011168:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801116a:	89bb      	ldrh	r3, [r7, #12]
 801116c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011170:	d804      	bhi.n	801117c <tcp_parseopt+0x8c>
 8011172:	89bb      	ldrh	r3, [r7, #12]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d001      	beq.n	801117c <tcp_parseopt+0x8c>
 8011178:	89ba      	ldrh	r2, [r7, #12]
 801117a:	e001      	b.n	8011180 <tcp_parseopt+0x90>
 801117c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011184:	e010      	b.n	80111a8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011186:	f7ff ff7d 	bl	8011084 <tcp_get_next_optbyte>
 801118a:	4603      	mov	r3, r0
 801118c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801118e:	7afb      	ldrb	r3, [r7, #11]
 8011190:	2b01      	cmp	r3, #1
 8011192:	d914      	bls.n	80111be <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011194:	7afb      	ldrb	r3, [r7, #11]
 8011196:	b29a      	uxth	r2, r3
 8011198:	4b0f      	ldr	r3, [pc, #60]	; (80111d8 <tcp_parseopt+0xe8>)
 801119a:	881b      	ldrh	r3, [r3, #0]
 801119c:	4413      	add	r3, r2
 801119e:	b29b      	uxth	r3, r3
 80111a0:	3b02      	subs	r3, #2
 80111a2:	b29a      	uxth	r2, r3
 80111a4:	4b0c      	ldr	r3, [pc, #48]	; (80111d8 <tcp_parseopt+0xe8>)
 80111a6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80111a8:	4b0b      	ldr	r3, [pc, #44]	; (80111d8 <tcp_parseopt+0xe8>)
 80111aa:	881a      	ldrh	r2, [r3, #0]
 80111ac:	4b09      	ldr	r3, [pc, #36]	; (80111d4 <tcp_parseopt+0xe4>)
 80111ae:	881b      	ldrh	r3, [r3, #0]
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d3b3      	bcc.n	801111c <tcp_parseopt+0x2c>
 80111b4:	e004      	b.n	80111c0 <tcp_parseopt+0xd0>
          return;
 80111b6:	bf00      	nop
 80111b8:	e002      	b.n	80111c0 <tcp_parseopt+0xd0>
            return;
 80111ba:	bf00      	nop
 80111bc:	e000      	b.n	80111c0 <tcp_parseopt+0xd0>
            return;
 80111be:	bf00      	nop
      }
    }
  }
}
 80111c0:	3710      	adds	r7, #16
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	080184bc 	.word	0x080184bc
 80111cc:	08018920 	.word	0x08018920
 80111d0:	08018508 	.word	0x08018508
 80111d4:	20008f4c 	.word	0x20008f4c
 80111d8:	20008f54 	.word	0x20008f54

080111dc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80111dc:	b480      	push	{r7}
 80111de:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80111e0:	4b05      	ldr	r3, [pc, #20]	; (80111f8 <tcp_trigger_input_pcb_close+0x1c>)
 80111e2:	781b      	ldrb	r3, [r3, #0]
 80111e4:	f043 0310 	orr.w	r3, r3, #16
 80111e8:	b2da      	uxtb	r2, r3
 80111ea:	4b03      	ldr	r3, [pc, #12]	; (80111f8 <tcp_trigger_input_pcb_close+0x1c>)
 80111ec:	701a      	strb	r2, [r3, #0]
}
 80111ee:	bf00      	nop
 80111f0:	46bd      	mov	sp, r7
 80111f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f6:	4770      	bx	lr
 80111f8:	20008f65 	.word	0x20008f65

080111fc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b084      	sub	sp, #16
 8011200:	af00      	add	r7, sp, #0
 8011202:	60f8      	str	r0, [r7, #12]
 8011204:	60b9      	str	r1, [r7, #8]
 8011206:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d00a      	beq.n	8011224 <tcp_route+0x28>
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	7a1b      	ldrb	r3, [r3, #8]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d006      	beq.n	8011224 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	7a1b      	ldrb	r3, [r3, #8]
 801121a:	4618      	mov	r0, r3
 801121c:	f7fb fab8 	bl	800c790 <netif_get_by_index>
 8011220:	4603      	mov	r3, r0
 8011222:	e003      	b.n	801122c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f003 fa0f 	bl	8014648 <ip4_route>
 801122a:	4603      	mov	r3, r0
  }
}
 801122c:	4618      	mov	r0, r3
 801122e:	3710      	adds	r7, #16
 8011230:	46bd      	mov	sp, r7
 8011232:	bd80      	pop	{r7, pc}

08011234 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011234:	b590      	push	{r4, r7, lr}
 8011236:	b087      	sub	sp, #28
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	603b      	str	r3, [r7, #0]
 8011240:	4613      	mov	r3, r2
 8011242:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d105      	bne.n	8011256 <tcp_create_segment+0x22>
 801124a:	4b44      	ldr	r3, [pc, #272]	; (801135c <tcp_create_segment+0x128>)
 801124c:	22a3      	movs	r2, #163	; 0xa3
 801124e:	4944      	ldr	r1, [pc, #272]	; (8011360 <tcp_create_segment+0x12c>)
 8011250:	4844      	ldr	r0, [pc, #272]	; (8011364 <tcp_create_segment+0x130>)
 8011252:	f004 ffbd 	bl	80161d0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011256:	68bb      	ldr	r3, [r7, #8]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d105      	bne.n	8011268 <tcp_create_segment+0x34>
 801125c:	4b3f      	ldr	r3, [pc, #252]	; (801135c <tcp_create_segment+0x128>)
 801125e:	22a4      	movs	r2, #164	; 0xa4
 8011260:	4941      	ldr	r1, [pc, #260]	; (8011368 <tcp_create_segment+0x134>)
 8011262:	4840      	ldr	r0, [pc, #256]	; (8011364 <tcp_create_segment+0x130>)
 8011264:	f004 ffb4 	bl	80161d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011268:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801126c:	009b      	lsls	r3, r3, #2
 801126e:	b2db      	uxtb	r3, r3
 8011270:	f003 0304 	and.w	r3, r3, #4
 8011274:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011276:	2003      	movs	r0, #3
 8011278:	f7fa ff04 	bl	800c084 <memp_malloc>
 801127c:	6138      	str	r0, [r7, #16]
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d104      	bne.n	801128e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011284:	68b8      	ldr	r0, [r7, #8]
 8011286:	f7fb fde3 	bl	800ce50 <pbuf_free>
    return NULL;
 801128a:	2300      	movs	r3, #0
 801128c:	e061      	b.n	8011352 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011294:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	2200      	movs	r2, #0
 801129a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	68ba      	ldr	r2, [r7, #8]
 80112a0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	891a      	ldrh	r2, [r3, #8]
 80112a6:	7dfb      	ldrb	r3, [r7, #23]
 80112a8:	b29b      	uxth	r3, r3
 80112aa:	429a      	cmp	r2, r3
 80112ac:	d205      	bcs.n	80112ba <tcp_create_segment+0x86>
 80112ae:	4b2b      	ldr	r3, [pc, #172]	; (801135c <tcp_create_segment+0x128>)
 80112b0:	22b0      	movs	r2, #176	; 0xb0
 80112b2:	492e      	ldr	r1, [pc, #184]	; (801136c <tcp_create_segment+0x138>)
 80112b4:	482b      	ldr	r0, [pc, #172]	; (8011364 <tcp_create_segment+0x130>)
 80112b6:	f004 ff8b 	bl	80161d0 <iprintf>
  seg->len = p->tot_len - optlen;
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	891a      	ldrh	r2, [r3, #8]
 80112be:	7dfb      	ldrb	r3, [r7, #23]
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	1ad3      	subs	r3, r2, r3
 80112c4:	b29a      	uxth	r2, r3
 80112c6:	693b      	ldr	r3, [r7, #16]
 80112c8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80112ca:	2114      	movs	r1, #20
 80112cc:	68b8      	ldr	r0, [r7, #8]
 80112ce:	f7fb fd29 	bl	800cd24 <pbuf_add_header>
 80112d2:	4603      	mov	r3, r0
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d004      	beq.n	80112e2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80112d8:	6938      	ldr	r0, [r7, #16]
 80112da:	f7fd f8ce 	bl	800e47a <tcp_seg_free>
    return NULL;
 80112de:	2300      	movs	r3, #0
 80112e0:	e037      	b.n	8011352 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	685b      	ldr	r3, [r3, #4]
 80112e6:	685a      	ldr	r2, [r3, #4]
 80112e8:	693b      	ldr	r3, [r7, #16]
 80112ea:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	8ada      	ldrh	r2, [r3, #22]
 80112f0:	693b      	ldr	r3, [r7, #16]
 80112f2:	68dc      	ldr	r4, [r3, #12]
 80112f4:	4610      	mov	r0, r2
 80112f6:	f7fa fa4d 	bl	800b794 <lwip_htons>
 80112fa:	4603      	mov	r3, r0
 80112fc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	8b1a      	ldrh	r2, [r3, #24]
 8011302:	693b      	ldr	r3, [r7, #16]
 8011304:	68dc      	ldr	r4, [r3, #12]
 8011306:	4610      	mov	r0, r2
 8011308:	f7fa fa44 	bl	800b794 <lwip_htons>
 801130c:	4603      	mov	r3, r0
 801130e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	68dc      	ldr	r4, [r3, #12]
 8011314:	6838      	ldr	r0, [r7, #0]
 8011316:	f7fa fa52 	bl	800b7be <lwip_htonl>
 801131a:	4603      	mov	r3, r0
 801131c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801131e:	7dfb      	ldrb	r3, [r7, #23]
 8011320:	089b      	lsrs	r3, r3, #2
 8011322:	b2db      	uxtb	r3, r3
 8011324:	b29b      	uxth	r3, r3
 8011326:	3305      	adds	r3, #5
 8011328:	b29b      	uxth	r3, r3
 801132a:	031b      	lsls	r3, r3, #12
 801132c:	b29a      	uxth	r2, r3
 801132e:	79fb      	ldrb	r3, [r7, #7]
 8011330:	b29b      	uxth	r3, r3
 8011332:	4313      	orrs	r3, r2
 8011334:	b29a      	uxth	r2, r3
 8011336:	693b      	ldr	r3, [r7, #16]
 8011338:	68dc      	ldr	r4, [r3, #12]
 801133a:	4610      	mov	r0, r2
 801133c:	f7fa fa2a 	bl	800b794 <lwip_htons>
 8011340:	4603      	mov	r3, r0
 8011342:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	2200      	movs	r2, #0
 801134a:	749a      	strb	r2, [r3, #18]
 801134c:	2200      	movs	r2, #0
 801134e:	74da      	strb	r2, [r3, #19]
  return seg;
 8011350:	693b      	ldr	r3, [r7, #16]
}
 8011352:	4618      	mov	r0, r3
 8011354:	371c      	adds	r7, #28
 8011356:	46bd      	mov	sp, r7
 8011358:	bd90      	pop	{r4, r7, pc}
 801135a:	bf00      	nop
 801135c:	0801893c 	.word	0x0801893c
 8011360:	08018970 	.word	0x08018970
 8011364:	08018990 	.word	0x08018990
 8011368:	080189b8 	.word	0x080189b8
 801136c:	080189dc 	.word	0x080189dc

08011370 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011370:	b590      	push	{r4, r7, lr}
 8011372:	b08b      	sub	sp, #44	; 0x2c
 8011374:	af02      	add	r7, sp, #8
 8011376:	6078      	str	r0, [r7, #4]
 8011378:	460b      	mov	r3, r1
 801137a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801137c:	2300      	movs	r3, #0
 801137e:	61fb      	str	r3, [r7, #28]
 8011380:	2300      	movs	r3, #0
 8011382:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011384:	2300      	movs	r3, #0
 8011386:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d106      	bne.n	801139c <tcp_split_unsent_seg+0x2c>
 801138e:	4b95      	ldr	r3, [pc, #596]	; (80115e4 <tcp_split_unsent_seg+0x274>)
 8011390:	f240 324b 	movw	r2, #843	; 0x34b
 8011394:	4994      	ldr	r1, [pc, #592]	; (80115e8 <tcp_split_unsent_seg+0x278>)
 8011396:	4895      	ldr	r0, [pc, #596]	; (80115ec <tcp_split_unsent_seg+0x27c>)
 8011398:	f004 ff1a 	bl	80161d0 <iprintf>

  useg = pcb->unsent;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113a0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80113a2:	697b      	ldr	r3, [r7, #20]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d102      	bne.n	80113ae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80113a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113ac:	e116      	b.n	80115dc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80113ae:	887b      	ldrh	r3, [r7, #2]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d109      	bne.n	80113c8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80113b4:	4b8b      	ldr	r3, [pc, #556]	; (80115e4 <tcp_split_unsent_seg+0x274>)
 80113b6:	f240 3253 	movw	r2, #851	; 0x353
 80113ba:	498d      	ldr	r1, [pc, #564]	; (80115f0 <tcp_split_unsent_seg+0x280>)
 80113bc:	488b      	ldr	r0, [pc, #556]	; (80115ec <tcp_split_unsent_seg+0x27c>)
 80113be:	f004 ff07 	bl	80161d0 <iprintf>
    return ERR_VAL;
 80113c2:	f06f 0305 	mvn.w	r3, #5
 80113c6:	e109      	b.n	80115dc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80113c8:	697b      	ldr	r3, [r7, #20]
 80113ca:	891b      	ldrh	r3, [r3, #8]
 80113cc:	887a      	ldrh	r2, [r7, #2]
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d301      	bcc.n	80113d6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80113d2:	2300      	movs	r3, #0
 80113d4:	e102      	b.n	80115dc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113da:	887a      	ldrh	r2, [r7, #2]
 80113dc:	429a      	cmp	r2, r3
 80113de:	d906      	bls.n	80113ee <tcp_split_unsent_seg+0x7e>
 80113e0:	4b80      	ldr	r3, [pc, #512]	; (80115e4 <tcp_split_unsent_seg+0x274>)
 80113e2:	f240 325b 	movw	r2, #859	; 0x35b
 80113e6:	4983      	ldr	r1, [pc, #524]	; (80115f4 <tcp_split_unsent_seg+0x284>)
 80113e8:	4880      	ldr	r0, [pc, #512]	; (80115ec <tcp_split_unsent_seg+0x27c>)
 80113ea:	f004 fef1 	bl	80161d0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80113ee:	697b      	ldr	r3, [r7, #20]
 80113f0:	891b      	ldrh	r3, [r3, #8]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d106      	bne.n	8011404 <tcp_split_unsent_seg+0x94>
 80113f6:	4b7b      	ldr	r3, [pc, #492]	; (80115e4 <tcp_split_unsent_seg+0x274>)
 80113f8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80113fc:	497e      	ldr	r1, [pc, #504]	; (80115f8 <tcp_split_unsent_seg+0x288>)
 80113fe:	487b      	ldr	r0, [pc, #492]	; (80115ec <tcp_split_unsent_seg+0x27c>)
 8011400:	f004 fee6 	bl	80161d0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	7a9b      	ldrb	r3, [r3, #10]
 8011408:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801140a:	7bfb      	ldrb	r3, [r7, #15]
 801140c:	009b      	lsls	r3, r3, #2
 801140e:	b2db      	uxtb	r3, r3
 8011410:	f003 0304 	and.w	r3, r3, #4
 8011414:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011416:	697b      	ldr	r3, [r7, #20]
 8011418:	891a      	ldrh	r2, [r3, #8]
 801141a:	887b      	ldrh	r3, [r7, #2]
 801141c:	1ad3      	subs	r3, r2, r3
 801141e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011420:	7bbb      	ldrb	r3, [r7, #14]
 8011422:	b29a      	uxth	r2, r3
 8011424:	89bb      	ldrh	r3, [r7, #12]
 8011426:	4413      	add	r3, r2
 8011428:	b29b      	uxth	r3, r3
 801142a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801142e:	4619      	mov	r1, r3
 8011430:	2036      	movs	r0, #54	; 0x36
 8011432:	f7fb fa29 	bl	800c888 <pbuf_alloc>
 8011436:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	2b00      	cmp	r3, #0
 801143c:	f000 80b7 	beq.w	80115ae <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	685b      	ldr	r3, [r3, #4]
 8011444:	891a      	ldrh	r2, [r3, #8]
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	891b      	ldrh	r3, [r3, #8]
 801144a:	1ad3      	subs	r3, r2, r3
 801144c:	b29a      	uxth	r2, r3
 801144e:	887b      	ldrh	r3, [r7, #2]
 8011450:	4413      	add	r3, r2
 8011452:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	6858      	ldr	r0, [r3, #4]
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	685a      	ldr	r2, [r3, #4]
 801145c:	7bbb      	ldrb	r3, [r7, #14]
 801145e:	18d1      	adds	r1, r2, r3
 8011460:	897b      	ldrh	r3, [r7, #10]
 8011462:	89ba      	ldrh	r2, [r7, #12]
 8011464:	f7fb feee 	bl	800d244 <pbuf_copy_partial>
 8011468:	4603      	mov	r3, r0
 801146a:	461a      	mov	r2, r3
 801146c:	89bb      	ldrh	r3, [r7, #12]
 801146e:	4293      	cmp	r3, r2
 8011470:	f040 809f 	bne.w	80115b2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011474:	697b      	ldr	r3, [r7, #20]
 8011476:	68db      	ldr	r3, [r3, #12]
 8011478:	899b      	ldrh	r3, [r3, #12]
 801147a:	b29b      	uxth	r3, r3
 801147c:	4618      	mov	r0, r3
 801147e:	f7fa f989 	bl	800b794 <lwip_htons>
 8011482:	4603      	mov	r3, r0
 8011484:	b2db      	uxtb	r3, r3
 8011486:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801148a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801148c:	2300      	movs	r3, #0
 801148e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011490:	7efb      	ldrb	r3, [r7, #27]
 8011492:	f003 0308 	and.w	r3, r3, #8
 8011496:	2b00      	cmp	r3, #0
 8011498:	d007      	beq.n	80114aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801149a:	7efb      	ldrb	r3, [r7, #27]
 801149c:	f023 0308 	bic.w	r3, r3, #8
 80114a0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80114a2:	7ebb      	ldrb	r3, [r7, #26]
 80114a4:	f043 0308 	orr.w	r3, r3, #8
 80114a8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80114aa:	7efb      	ldrb	r3, [r7, #27]
 80114ac:	f003 0301 	and.w	r3, r3, #1
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d007      	beq.n	80114c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80114b4:	7efb      	ldrb	r3, [r7, #27]
 80114b6:	f023 0301 	bic.w	r3, r3, #1
 80114ba:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80114bc:	7ebb      	ldrb	r3, [r7, #26]
 80114be:	f043 0301 	orr.w	r3, r3, #1
 80114c2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80114c4:	697b      	ldr	r3, [r7, #20]
 80114c6:	68db      	ldr	r3, [r3, #12]
 80114c8:	685b      	ldr	r3, [r3, #4]
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fa f977 	bl	800b7be <lwip_htonl>
 80114d0:	4602      	mov	r2, r0
 80114d2:	887b      	ldrh	r3, [r7, #2]
 80114d4:	18d1      	adds	r1, r2, r3
 80114d6:	7eba      	ldrb	r2, [r7, #26]
 80114d8:	7bfb      	ldrb	r3, [r7, #15]
 80114da:	9300      	str	r3, [sp, #0]
 80114dc:	460b      	mov	r3, r1
 80114de:	6939      	ldr	r1, [r7, #16]
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f7ff fea7 	bl	8011234 <tcp_create_segment>
 80114e6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d063      	beq.n	80115b6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	685b      	ldr	r3, [r3, #4]
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7fb fd34 	bl	800cf60 <pbuf_clen>
 80114f8:	4603      	mov	r3, r0
 80114fa:	461a      	mov	r2, r3
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011502:	1a9b      	subs	r3, r3, r2
 8011504:	b29a      	uxth	r2, r3
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	6858      	ldr	r0, [r3, #4]
 8011510:	697b      	ldr	r3, [r7, #20]
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	891a      	ldrh	r2, [r3, #8]
 8011516:	89bb      	ldrh	r3, [r7, #12]
 8011518:	1ad3      	subs	r3, r2, r3
 801151a:	b29b      	uxth	r3, r3
 801151c:	4619      	mov	r1, r3
 801151e:	f7fb fb11 	bl	800cb44 <pbuf_realloc>
  useg->len -= remainder;
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	891a      	ldrh	r2, [r3, #8]
 8011526:	89bb      	ldrh	r3, [r7, #12]
 8011528:	1ad3      	subs	r3, r2, r3
 801152a:	b29a      	uxth	r2, r3
 801152c:	697b      	ldr	r3, [r7, #20]
 801152e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	68db      	ldr	r3, [r3, #12]
 8011534:	899b      	ldrh	r3, [r3, #12]
 8011536:	b29c      	uxth	r4, r3
 8011538:	7efb      	ldrb	r3, [r7, #27]
 801153a:	b29b      	uxth	r3, r3
 801153c:	4618      	mov	r0, r3
 801153e:	f7fa f929 	bl	800b794 <lwip_htons>
 8011542:	4603      	mov	r3, r0
 8011544:	461a      	mov	r2, r3
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	68db      	ldr	r3, [r3, #12]
 801154a:	4322      	orrs	r2, r4
 801154c:	b292      	uxth	r2, r2
 801154e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	4618      	mov	r0, r3
 8011556:	f7fb fd03 	bl	800cf60 <pbuf_clen>
 801155a:	4603      	mov	r3, r0
 801155c:	461a      	mov	r2, r3
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011564:	4413      	add	r3, r2
 8011566:	b29a      	uxth	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801156e:	69fb      	ldr	r3, [r7, #28]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	4618      	mov	r0, r3
 8011574:	f7fb fcf4 	bl	800cf60 <pbuf_clen>
 8011578:	4603      	mov	r3, r0
 801157a:	461a      	mov	r2, r3
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011582:	4413      	add	r3, r2
 8011584:	b29a      	uxth	r2, r3
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801158c:	697b      	ldr	r3, [r7, #20]
 801158e:	681a      	ldr	r2, [r3, #0]
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	69fa      	ldr	r2, [r7, #28]
 8011598:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801159a:	69fb      	ldr	r3, [r7, #28]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d103      	bne.n	80115aa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	2200      	movs	r2, #0
 80115a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80115aa:	2300      	movs	r3, #0
 80115ac:	e016      	b.n	80115dc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80115ae:	bf00      	nop
 80115b0:	e002      	b.n	80115b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80115b2:	bf00      	nop
 80115b4:	e000      	b.n	80115b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80115b6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d006      	beq.n	80115cc <tcp_split_unsent_seg+0x25c>
 80115be:	4b09      	ldr	r3, [pc, #36]	; (80115e4 <tcp_split_unsent_seg+0x274>)
 80115c0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80115c4:	490d      	ldr	r1, [pc, #52]	; (80115fc <tcp_split_unsent_seg+0x28c>)
 80115c6:	4809      	ldr	r0, [pc, #36]	; (80115ec <tcp_split_unsent_seg+0x27c>)
 80115c8:	f004 fe02 	bl	80161d0 <iprintf>
  if (p != NULL) {
 80115cc:	693b      	ldr	r3, [r7, #16]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d002      	beq.n	80115d8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80115d2:	6938      	ldr	r0, [r7, #16]
 80115d4:	f7fb fc3c 	bl	800ce50 <pbuf_free>
  }

  return ERR_MEM;
 80115d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3724      	adds	r7, #36	; 0x24
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd90      	pop	{r4, r7, pc}
 80115e4:	0801893c 	.word	0x0801893c
 80115e8:	08018cd0 	.word	0x08018cd0
 80115ec:	08018990 	.word	0x08018990
 80115f0:	08018cf4 	.word	0x08018cf4
 80115f4:	08018d18 	.word	0x08018d18
 80115f8:	08018d28 	.word	0x08018d28
 80115fc:	08018d38 	.word	0x08018d38

08011600 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011600:	b590      	push	{r4, r7, lr}
 8011602:	b085      	sub	sp, #20
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d106      	bne.n	801161c <tcp_send_fin+0x1c>
 801160e:	4b21      	ldr	r3, [pc, #132]	; (8011694 <tcp_send_fin+0x94>)
 8011610:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011614:	4920      	ldr	r1, [pc, #128]	; (8011698 <tcp_send_fin+0x98>)
 8011616:	4821      	ldr	r0, [pc, #132]	; (801169c <tcp_send_fin+0x9c>)
 8011618:	f004 fdda 	bl	80161d0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011620:	2b00      	cmp	r3, #0
 8011622:	d02e      	beq.n	8011682 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011628:	60fb      	str	r3, [r7, #12]
 801162a:	e002      	b.n	8011632 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d1f8      	bne.n	801162c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	68db      	ldr	r3, [r3, #12]
 801163e:	899b      	ldrh	r3, [r3, #12]
 8011640:	b29b      	uxth	r3, r3
 8011642:	4618      	mov	r0, r3
 8011644:	f7fa f8a6 	bl	800b794 <lwip_htons>
 8011648:	4603      	mov	r3, r0
 801164a:	b2db      	uxtb	r3, r3
 801164c:	f003 0307 	and.w	r3, r3, #7
 8011650:	2b00      	cmp	r3, #0
 8011652:	d116      	bne.n	8011682 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	68db      	ldr	r3, [r3, #12]
 8011658:	899b      	ldrh	r3, [r3, #12]
 801165a:	b29c      	uxth	r4, r3
 801165c:	2001      	movs	r0, #1
 801165e:	f7fa f899 	bl	800b794 <lwip_htons>
 8011662:	4603      	mov	r3, r0
 8011664:	461a      	mov	r2, r3
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	68db      	ldr	r3, [r3, #12]
 801166a:	4322      	orrs	r2, r4
 801166c:	b292      	uxth	r2, r2
 801166e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	8b5b      	ldrh	r3, [r3, #26]
 8011674:	f043 0320 	orr.w	r3, r3, #32
 8011678:	b29a      	uxth	r2, r3
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801167e:	2300      	movs	r3, #0
 8011680:	e004      	b.n	801168c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011682:	2101      	movs	r1, #1
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f000 f80b 	bl	80116a0 <tcp_enqueue_flags>
 801168a:	4603      	mov	r3, r0
}
 801168c:	4618      	mov	r0, r3
 801168e:	3714      	adds	r7, #20
 8011690:	46bd      	mov	sp, r7
 8011692:	bd90      	pop	{r4, r7, pc}
 8011694:	0801893c 	.word	0x0801893c
 8011698:	08018d44 	.word	0x08018d44
 801169c:	08018990 	.word	0x08018990

080116a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80116a0:	b580      	push	{r7, lr}
 80116a2:	b08a      	sub	sp, #40	; 0x28
 80116a4:	af02      	add	r7, sp, #8
 80116a6:	6078      	str	r0, [r7, #4]
 80116a8:	460b      	mov	r3, r1
 80116aa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80116ac:	2300      	movs	r3, #0
 80116ae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80116b0:	2300      	movs	r3, #0
 80116b2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80116b4:	78fb      	ldrb	r3, [r7, #3]
 80116b6:	f003 0303 	and.w	r3, r3, #3
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d106      	bne.n	80116cc <tcp_enqueue_flags+0x2c>
 80116be:	4b67      	ldr	r3, [pc, #412]	; (801185c <tcp_enqueue_flags+0x1bc>)
 80116c0:	f240 4211 	movw	r2, #1041	; 0x411
 80116c4:	4966      	ldr	r1, [pc, #408]	; (8011860 <tcp_enqueue_flags+0x1c0>)
 80116c6:	4867      	ldr	r0, [pc, #412]	; (8011864 <tcp_enqueue_flags+0x1c4>)
 80116c8:	f004 fd82 	bl	80161d0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d106      	bne.n	80116e0 <tcp_enqueue_flags+0x40>
 80116d2:	4b62      	ldr	r3, [pc, #392]	; (801185c <tcp_enqueue_flags+0x1bc>)
 80116d4:	f240 4213 	movw	r2, #1043	; 0x413
 80116d8:	4963      	ldr	r1, [pc, #396]	; (8011868 <tcp_enqueue_flags+0x1c8>)
 80116da:	4862      	ldr	r0, [pc, #392]	; (8011864 <tcp_enqueue_flags+0x1c4>)
 80116dc:	f004 fd78 	bl	80161d0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80116e0:	78fb      	ldrb	r3, [r7, #3]
 80116e2:	f003 0302 	and.w	r3, r3, #2
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d001      	beq.n	80116ee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80116ea:	2301      	movs	r3, #1
 80116ec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80116ee:	7ffb      	ldrb	r3, [r7, #31]
 80116f0:	009b      	lsls	r3, r3, #2
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	f003 0304 	and.w	r3, r3, #4
 80116f8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80116fa:	7dfb      	ldrb	r3, [r7, #23]
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011702:	4619      	mov	r1, r3
 8011704:	2036      	movs	r0, #54	; 0x36
 8011706:	f7fb f8bf 	bl	800c888 <pbuf_alloc>
 801170a:	6138      	str	r0, [r7, #16]
 801170c:	693b      	ldr	r3, [r7, #16]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d109      	bne.n	8011726 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	8b5b      	ldrh	r3, [r3, #26]
 8011716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801171a:	b29a      	uxth	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011724:	e095      	b.n	8011852 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011726:	693b      	ldr	r3, [r7, #16]
 8011728:	895a      	ldrh	r2, [r3, #10]
 801172a:	7dfb      	ldrb	r3, [r7, #23]
 801172c:	b29b      	uxth	r3, r3
 801172e:	429a      	cmp	r2, r3
 8011730:	d206      	bcs.n	8011740 <tcp_enqueue_flags+0xa0>
 8011732:	4b4a      	ldr	r3, [pc, #296]	; (801185c <tcp_enqueue_flags+0x1bc>)
 8011734:	f240 4239 	movw	r2, #1081	; 0x439
 8011738:	494c      	ldr	r1, [pc, #304]	; (801186c <tcp_enqueue_flags+0x1cc>)
 801173a:	484a      	ldr	r0, [pc, #296]	; (8011864 <tcp_enqueue_flags+0x1c4>)
 801173c:	f004 fd48 	bl	80161d0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011744:	78fa      	ldrb	r2, [r7, #3]
 8011746:	7ffb      	ldrb	r3, [r7, #31]
 8011748:	9300      	str	r3, [sp, #0]
 801174a:	460b      	mov	r3, r1
 801174c:	6939      	ldr	r1, [r7, #16]
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f7ff fd70 	bl	8011234 <tcp_create_segment>
 8011754:	60f8      	str	r0, [r7, #12]
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d109      	bne.n	8011770 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	8b5b      	ldrh	r3, [r3, #26]
 8011760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011764:	b29a      	uxth	r2, r3
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801176a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801176e:	e070      	b.n	8011852 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	f003 0303 	and.w	r3, r3, #3
 8011778:	2b00      	cmp	r3, #0
 801177a:	d006      	beq.n	801178a <tcp_enqueue_flags+0xea>
 801177c:	4b37      	ldr	r3, [pc, #220]	; (801185c <tcp_enqueue_flags+0x1bc>)
 801177e:	f240 4242 	movw	r2, #1090	; 0x442
 8011782:	493b      	ldr	r1, [pc, #236]	; (8011870 <tcp_enqueue_flags+0x1d0>)
 8011784:	4837      	ldr	r0, [pc, #220]	; (8011864 <tcp_enqueue_flags+0x1c4>)
 8011786:	f004 fd23 	bl	80161d0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	891b      	ldrh	r3, [r3, #8]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d006      	beq.n	80117a0 <tcp_enqueue_flags+0x100>
 8011792:	4b32      	ldr	r3, [pc, #200]	; (801185c <tcp_enqueue_flags+0x1bc>)
 8011794:	f240 4243 	movw	r2, #1091	; 0x443
 8011798:	4936      	ldr	r1, [pc, #216]	; (8011874 <tcp_enqueue_flags+0x1d4>)
 801179a:	4832      	ldr	r0, [pc, #200]	; (8011864 <tcp_enqueue_flags+0x1c4>)
 801179c:	f004 fd18 	bl	80161d0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d103      	bne.n	80117b0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	68fa      	ldr	r2, [r7, #12]
 80117ac:	66da      	str	r2, [r3, #108]	; 0x6c
 80117ae:	e00d      	b.n	80117cc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117b4:	61bb      	str	r3, [r7, #24]
 80117b6:	e002      	b.n	80117be <tcp_enqueue_flags+0x11e>
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	61bb      	str	r3, [r7, #24]
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d1f8      	bne.n	80117b8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	68fa      	ldr	r2, [r7, #12]
 80117ca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2200      	movs	r2, #0
 80117d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80117d4:	78fb      	ldrb	r3, [r7, #3]
 80117d6:	f003 0302 	and.w	r3, r3, #2
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d104      	bne.n	80117e8 <tcp_enqueue_flags+0x148>
 80117de:	78fb      	ldrb	r3, [r7, #3]
 80117e0:	f003 0301 	and.w	r3, r3, #1
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d004      	beq.n	80117f2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117ec:	1c5a      	adds	r2, r3, #1
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80117f2:	78fb      	ldrb	r3, [r7, #3]
 80117f4:	f003 0301 	and.w	r3, r3, #1
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d006      	beq.n	801180a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	8b5b      	ldrh	r3, [r3, #26]
 8011800:	f043 0320 	orr.w	r3, r3, #32
 8011804:	b29a      	uxth	r2, r3
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	4618      	mov	r0, r3
 8011810:	f7fb fba6 	bl	800cf60 <pbuf_clen>
 8011814:	4603      	mov	r3, r0
 8011816:	461a      	mov	r2, r3
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801181e:	4413      	add	r3, r2
 8011820:	b29a      	uxth	r2, r3
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00e      	beq.n	8011850 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011836:	2b00      	cmp	r3, #0
 8011838:	d10a      	bne.n	8011850 <tcp_enqueue_flags+0x1b0>
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801183e:	2b00      	cmp	r3, #0
 8011840:	d106      	bne.n	8011850 <tcp_enqueue_flags+0x1b0>
 8011842:	4b06      	ldr	r3, [pc, #24]	; (801185c <tcp_enqueue_flags+0x1bc>)
 8011844:	f240 4265 	movw	r2, #1125	; 0x465
 8011848:	490b      	ldr	r1, [pc, #44]	; (8011878 <tcp_enqueue_flags+0x1d8>)
 801184a:	4806      	ldr	r0, [pc, #24]	; (8011864 <tcp_enqueue_flags+0x1c4>)
 801184c:	f004 fcc0 	bl	80161d0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011850:	2300      	movs	r3, #0
}
 8011852:	4618      	mov	r0, r3
 8011854:	3720      	adds	r7, #32
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop
 801185c:	0801893c 	.word	0x0801893c
 8011860:	08018d60 	.word	0x08018d60
 8011864:	08018990 	.word	0x08018990
 8011868:	08018db8 	.word	0x08018db8
 801186c:	08018dd8 	.word	0x08018dd8
 8011870:	08018e14 	.word	0x08018e14
 8011874:	08018e2c 	.word	0x08018e2c
 8011878:	08018e58 	.word	0x08018e58

0801187c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801187c:	b5b0      	push	{r4, r5, r7, lr}
 801187e:	b08a      	sub	sp, #40	; 0x28
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d106      	bne.n	8011898 <tcp_output+0x1c>
 801188a:	4b8a      	ldr	r3, [pc, #552]	; (8011ab4 <tcp_output+0x238>)
 801188c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011890:	4989      	ldr	r1, [pc, #548]	; (8011ab8 <tcp_output+0x23c>)
 8011892:	488a      	ldr	r0, [pc, #552]	; (8011abc <tcp_output+0x240>)
 8011894:	f004 fc9c 	bl	80161d0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	7d1b      	ldrb	r3, [r3, #20]
 801189c:	2b01      	cmp	r3, #1
 801189e:	d106      	bne.n	80118ae <tcp_output+0x32>
 80118a0:	4b84      	ldr	r3, [pc, #528]	; (8011ab4 <tcp_output+0x238>)
 80118a2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80118a6:	4986      	ldr	r1, [pc, #536]	; (8011ac0 <tcp_output+0x244>)
 80118a8:	4884      	ldr	r0, [pc, #528]	; (8011abc <tcp_output+0x240>)
 80118aa:	f004 fc91 	bl	80161d0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80118ae:	4b85      	ldr	r3, [pc, #532]	; (8011ac4 <tcp_output+0x248>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	687a      	ldr	r2, [r7, #4]
 80118b4:	429a      	cmp	r2, r3
 80118b6:	d101      	bne.n	80118bc <tcp_output+0x40>
    return ERR_OK;
 80118b8:	2300      	movs	r3, #0
 80118ba:	e1ce      	b.n	8011c5a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80118c8:	4293      	cmp	r3, r2
 80118ca:	bf28      	it	cs
 80118cc:	4613      	movcs	r3, r2
 80118ce:	b29b      	uxth	r3, r3
 80118d0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80118d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d10b      	bne.n	80118f6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	8b5b      	ldrh	r3, [r3, #26]
 80118e2:	f003 0302 	and.w	r3, r3, #2
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	f000 81aa 	beq.w	8011c40 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80118ec:	6878      	ldr	r0, [r7, #4]
 80118ee:	f000 fdcb 	bl	8012488 <tcp_send_empty_ack>
 80118f2:	4603      	mov	r3, r0
 80118f4:	e1b1      	b.n	8011c5a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80118f6:	6879      	ldr	r1, [r7, #4]
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	3304      	adds	r3, #4
 80118fc:	461a      	mov	r2, r3
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f7ff fc7c 	bl	80111fc <tcp_route>
 8011904:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	2b00      	cmp	r3, #0
 801190a:	d102      	bne.n	8011912 <tcp_output+0x96>
    return ERR_RTE;
 801190c:	f06f 0303 	mvn.w	r3, #3
 8011910:	e1a3      	b.n	8011c5a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d003      	beq.n	8011920 <tcp_output+0xa4>
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d111      	bne.n	8011944 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011920:	697b      	ldr	r3, [r7, #20]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d002      	beq.n	801192c <tcp_output+0xb0>
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	3304      	adds	r3, #4
 801192a:	e000      	b.n	801192e <tcp_output+0xb2>
 801192c:	2300      	movs	r3, #0
 801192e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d102      	bne.n	801193c <tcp_output+0xc0>
      return ERR_RTE;
 8011936:	f06f 0303 	mvn.w	r3, #3
 801193a:	e18e      	b.n	8011c5a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	681a      	ldr	r2, [r3, #0]
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011946:	68db      	ldr	r3, [r3, #12]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	4618      	mov	r0, r3
 801194c:	f7f9 ff37 	bl	800b7be <lwip_htonl>
 8011950:	4602      	mov	r2, r0
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011956:	1ad3      	subs	r3, r2, r3
 8011958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801195a:	8912      	ldrh	r2, [r2, #8]
 801195c:	4413      	add	r3, r2
 801195e:	69ba      	ldr	r2, [r7, #24]
 8011960:	429a      	cmp	r2, r3
 8011962:	d227      	bcs.n	80119b4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801196a:	461a      	mov	r2, r3
 801196c:	69bb      	ldr	r3, [r7, #24]
 801196e:	4293      	cmp	r3, r2
 8011970:	d114      	bne.n	801199c <tcp_output+0x120>
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011976:	2b00      	cmp	r3, #0
 8011978:	d110      	bne.n	801199c <tcp_output+0x120>
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011980:	2b00      	cmp	r3, #0
 8011982:	d10b      	bne.n	801199c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2201      	movs	r2, #1
 8011990:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2200      	movs	r2, #0
 8011998:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	8b5b      	ldrh	r3, [r3, #26]
 80119a0:	f003 0302 	and.w	r3, r3, #2
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	f000 814d 	beq.w	8011c44 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f000 fd6c 	bl	8012488 <tcp_send_empty_ack>
 80119b0:	4603      	mov	r3, r0
 80119b2:	e152      	b.n	8011c5a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2200      	movs	r2, #0
 80119b8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119c0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80119c2:	6a3b      	ldr	r3, [r7, #32]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	f000 811c 	beq.w	8011c02 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80119ca:	e002      	b.n	80119d2 <tcp_output+0x156>
 80119cc:	6a3b      	ldr	r3, [r7, #32]
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	623b      	str	r3, [r7, #32]
 80119d2:	6a3b      	ldr	r3, [r7, #32]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d1f8      	bne.n	80119cc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80119da:	e112      	b.n	8011c02 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80119dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119de:	68db      	ldr	r3, [r3, #12]
 80119e0:	899b      	ldrh	r3, [r3, #12]
 80119e2:	b29b      	uxth	r3, r3
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7f9 fed5 	bl	800b794 <lwip_htons>
 80119ea:	4603      	mov	r3, r0
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	f003 0304 	and.w	r3, r3, #4
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d006      	beq.n	8011a04 <tcp_output+0x188>
 80119f6:	4b2f      	ldr	r3, [pc, #188]	; (8011ab4 <tcp_output+0x238>)
 80119f8:	f240 5236 	movw	r2, #1334	; 0x536
 80119fc:	4932      	ldr	r1, [pc, #200]	; (8011ac8 <tcp_output+0x24c>)
 80119fe:	482f      	ldr	r0, [pc, #188]	; (8011abc <tcp_output+0x240>)
 8011a00:	f004 fbe6 	bl	80161d0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d01f      	beq.n	8011a4c <tcp_output+0x1d0>
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	8b5b      	ldrh	r3, [r3, #26]
 8011a10:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d119      	bne.n	8011a4c <tcp_output+0x1d0>
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d00b      	beq.n	8011a38 <tcp_output+0x1bc>
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d110      	bne.n	8011a4c <tcp_output+0x1d0>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a2e:	891a      	ldrh	r2, [r3, #8]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d209      	bcs.n	8011a4c <tcp_output+0x1d0>
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d004      	beq.n	8011a4c <tcp_output+0x1d0>
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011a48:	2b08      	cmp	r3, #8
 8011a4a:	d901      	bls.n	8011a50 <tcp_output+0x1d4>
 8011a4c:	2301      	movs	r3, #1
 8011a4e:	e000      	b.n	8011a52 <tcp_output+0x1d6>
 8011a50:	2300      	movs	r3, #0
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d106      	bne.n	8011a64 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	8b5b      	ldrh	r3, [r3, #26]
 8011a5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	f000 80e4 	beq.w	8011c2c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	7d1b      	ldrb	r3, [r3, #20]
 8011a68:	2b02      	cmp	r3, #2
 8011a6a:	d00d      	beq.n	8011a88 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	899b      	ldrh	r3, [r3, #12]
 8011a72:	b29c      	uxth	r4, r3
 8011a74:	2010      	movs	r0, #16
 8011a76:	f7f9 fe8d 	bl	800b794 <lwip_htons>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a80:	68db      	ldr	r3, [r3, #12]
 8011a82:	4322      	orrs	r2, r4
 8011a84:	b292      	uxth	r2, r2
 8011a86:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011a88:	697a      	ldr	r2, [r7, #20]
 8011a8a:	6879      	ldr	r1, [r7, #4]
 8011a8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a8e:	f000 f909 	bl	8011ca4 <tcp_output_segment>
 8011a92:	4603      	mov	r3, r0
 8011a94:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d016      	beq.n	8011acc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	8b5b      	ldrh	r3, [r3, #26]
 8011aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011aa6:	b29a      	uxth	r2, r3
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	835a      	strh	r2, [r3, #26]
      return err;
 8011aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ab0:	e0d3      	b.n	8011c5a <tcp_output+0x3de>
 8011ab2:	bf00      	nop
 8011ab4:	0801893c 	.word	0x0801893c
 8011ab8:	08018e80 	.word	0x08018e80
 8011abc:	08018990 	.word	0x08018990
 8011ac0:	08018e98 	.word	0x08018e98
 8011ac4:	20008f6c 	.word	0x20008f6c
 8011ac8:	08018ec0 	.word	0x08018ec0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ace:	681a      	ldr	r2, [r3, #0]
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	7d1b      	ldrb	r3, [r3, #20]
 8011ad8:	2b02      	cmp	r3, #2
 8011ada:	d006      	beq.n	8011aea <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	8b5b      	ldrh	r3, [r3, #26]
 8011ae0:	f023 0303 	bic.w	r3, r3, #3
 8011ae4:	b29a      	uxth	r2, r3
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aec:	68db      	ldr	r3, [r3, #12]
 8011aee:	685b      	ldr	r3, [r3, #4]
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7f9 fe64 	bl	800b7be <lwip_htonl>
 8011af6:	4604      	mov	r4, r0
 8011af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afa:	891b      	ldrh	r3, [r3, #8]
 8011afc:	461d      	mov	r5, r3
 8011afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b00:	68db      	ldr	r3, [r3, #12]
 8011b02:	899b      	ldrh	r3, [r3, #12]
 8011b04:	b29b      	uxth	r3, r3
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7f9 fe44 	bl	800b794 <lwip_htons>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	f003 0303 	and.w	r3, r3, #3
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d001      	beq.n	8011b1c <tcp_output+0x2a0>
 8011b18:	2301      	movs	r3, #1
 8011b1a:	e000      	b.n	8011b1e <tcp_output+0x2a2>
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	442b      	add	r3, r5
 8011b20:	4423      	add	r3, r4
 8011b22:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	1ad3      	subs	r3, r2, r3
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	da02      	bge.n	8011b36 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	68ba      	ldr	r2, [r7, #8]
 8011b34:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b38:	891b      	ldrh	r3, [r3, #8]
 8011b3a:	461c      	mov	r4, r3
 8011b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3e:	68db      	ldr	r3, [r3, #12]
 8011b40:	899b      	ldrh	r3, [r3, #12]
 8011b42:	b29b      	uxth	r3, r3
 8011b44:	4618      	mov	r0, r3
 8011b46:	f7f9 fe25 	bl	800b794 <lwip_htons>
 8011b4a:	4603      	mov	r3, r0
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	f003 0303 	and.w	r3, r3, #3
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d001      	beq.n	8011b5a <tcp_output+0x2de>
 8011b56:	2301      	movs	r3, #1
 8011b58:	e000      	b.n	8011b5c <tcp_output+0x2e0>
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	4423      	add	r3, r4
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d049      	beq.n	8011bf6 <tcp_output+0x37a>
      seg->next = NULL;
 8011b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b64:	2200      	movs	r2, #0
 8011b66:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d105      	bne.n	8011b7c <tcp_output+0x300>
        pcb->unacked = seg;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b74:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b78:	623b      	str	r3, [r7, #32]
 8011b7a:	e03f      	b.n	8011bfc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b7e:	68db      	ldr	r3, [r3, #12]
 8011b80:	685b      	ldr	r3, [r3, #4]
 8011b82:	4618      	mov	r0, r3
 8011b84:	f7f9 fe1b 	bl	800b7be <lwip_htonl>
 8011b88:	4604      	mov	r4, r0
 8011b8a:	6a3b      	ldr	r3, [r7, #32]
 8011b8c:	68db      	ldr	r3, [r3, #12]
 8011b8e:	685b      	ldr	r3, [r3, #4]
 8011b90:	4618      	mov	r0, r3
 8011b92:	f7f9 fe14 	bl	800b7be <lwip_htonl>
 8011b96:	4603      	mov	r3, r0
 8011b98:	1ae3      	subs	r3, r4, r3
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	da24      	bge.n	8011be8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	3370      	adds	r3, #112	; 0x70
 8011ba2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011ba4:	e002      	b.n	8011bac <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011ba6:	69fb      	ldr	r3, [r7, #28]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011bac:	69fb      	ldr	r3, [r7, #28]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d011      	beq.n	8011bd8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011bb4:	69fb      	ldr	r3, [r7, #28]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	68db      	ldr	r3, [r3, #12]
 8011bba:	685b      	ldr	r3, [r3, #4]
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	f7f9 fdfe 	bl	800b7be <lwip_htonl>
 8011bc2:	4604      	mov	r4, r0
 8011bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc6:	68db      	ldr	r3, [r3, #12]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f7f9 fdf7 	bl	800b7be <lwip_htonl>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	dbe6      	blt.n	8011ba6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011bd8:	69fb      	ldr	r3, [r7, #28]
 8011bda:	681a      	ldr	r2, [r3, #0]
 8011bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bde:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011be0:	69fb      	ldr	r3, [r7, #28]
 8011be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011be4:	601a      	str	r2, [r3, #0]
 8011be6:	e009      	b.n	8011bfc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011be8:	6a3b      	ldr	r3, [r7, #32]
 8011bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011bee:	6a3b      	ldr	r3, [r7, #32]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	623b      	str	r3, [r7, #32]
 8011bf4:	e002      	b.n	8011bfc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bf8:	f7fc fc3f 	bl	800e47a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c00:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d012      	beq.n	8011c2e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c0a:	68db      	ldr	r3, [r3, #12]
 8011c0c:	685b      	ldr	r3, [r3, #4]
 8011c0e:	4618      	mov	r0, r3
 8011c10:	f7f9 fdd5 	bl	800b7be <lwip_htonl>
 8011c14:	4602      	mov	r2, r0
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011c1a:	1ad3      	subs	r3, r2, r3
 8011c1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c1e:	8912      	ldrh	r2, [r2, #8]
 8011c20:	4413      	add	r3, r2
  while (seg != NULL &&
 8011c22:	69ba      	ldr	r2, [r7, #24]
 8011c24:	429a      	cmp	r2, r3
 8011c26:	f4bf aed9 	bcs.w	80119dc <tcp_output+0x160>
 8011c2a:	e000      	b.n	8011c2e <tcp_output+0x3b2>
      break;
 8011c2c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d108      	bne.n	8011c48 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011c3e:	e004      	b.n	8011c4a <tcp_output+0x3ce>
    goto output_done;
 8011c40:	bf00      	nop
 8011c42:	e002      	b.n	8011c4a <tcp_output+0x3ce>
    goto output_done;
 8011c44:	bf00      	nop
 8011c46:	e000      	b.n	8011c4a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011c48:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	8b5b      	ldrh	r3, [r3, #26]
 8011c4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011c52:	b29a      	uxth	r2, r3
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3728      	adds	r7, #40	; 0x28
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bdb0      	pop	{r4, r5, r7, pc}
 8011c62:	bf00      	nop

08011c64 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b082      	sub	sp, #8
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d106      	bne.n	8011c80 <tcp_output_segment_busy+0x1c>
 8011c72:	4b09      	ldr	r3, [pc, #36]	; (8011c98 <tcp_output_segment_busy+0x34>)
 8011c74:	f240 529a 	movw	r2, #1434	; 0x59a
 8011c78:	4908      	ldr	r1, [pc, #32]	; (8011c9c <tcp_output_segment_busy+0x38>)
 8011c7a:	4809      	ldr	r0, [pc, #36]	; (8011ca0 <tcp_output_segment_busy+0x3c>)
 8011c7c:	f004 faa8 	bl	80161d0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	685b      	ldr	r3, [r3, #4]
 8011c84:	7b9b      	ldrb	r3, [r3, #14]
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d001      	beq.n	8011c8e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	e000      	b.n	8011c90 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011c8e:	2300      	movs	r3, #0
}
 8011c90:	4618      	mov	r0, r3
 8011c92:	3708      	adds	r7, #8
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	0801893c 	.word	0x0801893c
 8011c9c:	08018ed8 	.word	0x08018ed8
 8011ca0:	08018990 	.word	0x08018990

08011ca4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011ca4:	b5b0      	push	{r4, r5, r7, lr}
 8011ca6:	b08c      	sub	sp, #48	; 0x30
 8011ca8:	af04      	add	r7, sp, #16
 8011caa:	60f8      	str	r0, [r7, #12]
 8011cac:	60b9      	str	r1, [r7, #8]
 8011cae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d106      	bne.n	8011cc4 <tcp_output_segment+0x20>
 8011cb6:	4b63      	ldr	r3, [pc, #396]	; (8011e44 <tcp_output_segment+0x1a0>)
 8011cb8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011cbc:	4962      	ldr	r1, [pc, #392]	; (8011e48 <tcp_output_segment+0x1a4>)
 8011cbe:	4863      	ldr	r0, [pc, #396]	; (8011e4c <tcp_output_segment+0x1a8>)
 8011cc0:	f004 fa86 	bl	80161d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d106      	bne.n	8011cd8 <tcp_output_segment+0x34>
 8011cca:	4b5e      	ldr	r3, [pc, #376]	; (8011e44 <tcp_output_segment+0x1a0>)
 8011ccc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011cd0:	495f      	ldr	r1, [pc, #380]	; (8011e50 <tcp_output_segment+0x1ac>)
 8011cd2:	485e      	ldr	r0, [pc, #376]	; (8011e4c <tcp_output_segment+0x1a8>)
 8011cd4:	f004 fa7c 	bl	80161d0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d106      	bne.n	8011cec <tcp_output_segment+0x48>
 8011cde:	4b59      	ldr	r3, [pc, #356]	; (8011e44 <tcp_output_segment+0x1a0>)
 8011ce0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011ce4:	495b      	ldr	r1, [pc, #364]	; (8011e54 <tcp_output_segment+0x1b0>)
 8011ce6:	4859      	ldr	r0, [pc, #356]	; (8011e4c <tcp_output_segment+0x1a8>)
 8011ce8:	f004 fa72 	bl	80161d0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011cec:	68f8      	ldr	r0, [r7, #12]
 8011cee:	f7ff ffb9 	bl	8011c64 <tcp_output_segment_busy>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d001      	beq.n	8011cfc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	e09f      	b.n	8011e3c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	68dc      	ldr	r4, [r3, #12]
 8011d04:	4610      	mov	r0, r2
 8011d06:	f7f9 fd5a 	bl	800b7be <lwip_htonl>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	68dc      	ldr	r4, [r3, #12]
 8011d16:	4610      	mov	r0, r2
 8011d18:	f7f9 fd3c 	bl	800b794 <lwip_htons>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d24:	68ba      	ldr	r2, [r7, #8]
 8011d26:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011d28:	441a      	add	r2, r3
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	68db      	ldr	r3, [r3, #12]
 8011d32:	3314      	adds	r3, #20
 8011d34:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	7a9b      	ldrb	r3, [r3, #10]
 8011d3a:	f003 0301 	and.w	r3, r3, #1
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d015      	beq.n	8011d6e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	3304      	adds	r3, #4
 8011d46:	461a      	mov	r2, r3
 8011d48:	6879      	ldr	r1, [r7, #4]
 8011d4a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011d4e:	f7fc fe8b 	bl	800ea68 <tcp_eff_send_mss_netif>
 8011d52:	4603      	mov	r3, r0
 8011d54:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011d56:	8b7b      	ldrh	r3, [r7, #26]
 8011d58:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7f9 fd2e 	bl	800b7be <lwip_htonl>
 8011d62:	4602      	mov	r2, r0
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011d68:	69fb      	ldr	r3, [r7, #28]
 8011d6a:	3304      	adds	r3, #4
 8011d6c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	da02      	bge.n	8011d7e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011d7e:	68bb      	ldr	r3, [r7, #8]
 8011d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d10c      	bne.n	8011da0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011d86:	4b34      	ldr	r3, [pc, #208]	; (8011e58 <tcp_output_segment+0x1b4>)
 8011d88:	681a      	ldr	r2, [r3, #0]
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	68db      	ldr	r3, [r3, #12]
 8011d92:	685b      	ldr	r3, [r3, #4]
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7f9 fd12 	bl	800b7be <lwip_htonl>
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	68da      	ldr	r2, [r3, #12]
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	1ad3      	subs	r3, r2, r3
 8011dac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	8959      	ldrh	r1, [r3, #10]
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	685b      	ldr	r3, [r3, #4]
 8011db8:	8b3a      	ldrh	r2, [r7, #24]
 8011dba:	1a8a      	subs	r2, r1, r2
 8011dbc:	b292      	uxth	r2, r2
 8011dbe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	8919      	ldrh	r1, [r3, #8]
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	685b      	ldr	r3, [r3, #4]
 8011dca:	8b3a      	ldrh	r2, [r7, #24]
 8011dcc:	1a8a      	subs	r2, r1, r2
 8011dce:	b292      	uxth	r2, r2
 8011dd0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	68fa      	ldr	r2, [r7, #12]
 8011dd8:	68d2      	ldr	r2, [r2, #12]
 8011dda:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	68db      	ldr	r3, [r3, #12]
 8011de0:	2200      	movs	r2, #0
 8011de2:	741a      	strb	r2, [r3, #16]
 8011de4:	2200      	movs	r2, #0
 8011de6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	68db      	ldr	r3, [r3, #12]
 8011dec:	f103 0214 	add.w	r2, r3, #20
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	7a9b      	ldrb	r3, [r3, #10]
 8011df4:	009b      	lsls	r3, r3, #2
 8011df6:	f003 0304 	and.w	r3, r3, #4
 8011dfa:	4413      	add	r3, r2
 8011dfc:	69fa      	ldr	r2, [r7, #28]
 8011dfe:	429a      	cmp	r2, r3
 8011e00:	d006      	beq.n	8011e10 <tcp_output_segment+0x16c>
 8011e02:	4b10      	ldr	r3, [pc, #64]	; (8011e44 <tcp_output_segment+0x1a0>)
 8011e04:	f240 621c 	movw	r2, #1564	; 0x61c
 8011e08:	4914      	ldr	r1, [pc, #80]	; (8011e5c <tcp_output_segment+0x1b8>)
 8011e0a:	4810      	ldr	r0, [pc, #64]	; (8011e4c <tcp_output_segment+0x1a8>)
 8011e0c:	f004 f9e0 	bl	80161d0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	6858      	ldr	r0, [r3, #4]
 8011e14:	68b9      	ldr	r1, [r7, #8]
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	1d1c      	adds	r4, r3, #4
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	7add      	ldrb	r5, [r3, #11]
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	7a9b      	ldrb	r3, [r3, #10]
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	9202      	str	r2, [sp, #8]
 8011e26:	2206      	movs	r2, #6
 8011e28:	9201      	str	r2, [sp, #4]
 8011e2a:	9300      	str	r3, [sp, #0]
 8011e2c:	462b      	mov	r3, r5
 8011e2e:	4622      	mov	r2, r4
 8011e30:	f002 fdc8 	bl	80149c4 <ip4_output_if>
 8011e34:	4603      	mov	r3, r0
 8011e36:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3720      	adds	r7, #32
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bdb0      	pop	{r4, r5, r7, pc}
 8011e44:	0801893c 	.word	0x0801893c
 8011e48:	08018f00 	.word	0x08018f00
 8011e4c:	08018990 	.word	0x08018990
 8011e50:	08018f20 	.word	0x08018f20
 8011e54:	08018f40 	.word	0x08018f40
 8011e58:	20008f20 	.word	0x20008f20
 8011e5c:	08018f64 	.word	0x08018f64

08011e60 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011e60:	b5b0      	push	{r4, r5, r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d106      	bne.n	8011e7c <tcp_rexmit_rto_prepare+0x1c>
 8011e6e:	4b31      	ldr	r3, [pc, #196]	; (8011f34 <tcp_rexmit_rto_prepare+0xd4>)
 8011e70:	f240 6263 	movw	r2, #1635	; 0x663
 8011e74:	4930      	ldr	r1, [pc, #192]	; (8011f38 <tcp_rexmit_rto_prepare+0xd8>)
 8011e76:	4831      	ldr	r0, [pc, #196]	; (8011f3c <tcp_rexmit_rto_prepare+0xdc>)
 8011e78:	f004 f9aa 	bl	80161d0 <iprintf>

  if (pcb->unacked == NULL) {
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d102      	bne.n	8011e8a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011e84:	f06f 0305 	mvn.w	r3, #5
 8011e88:	e050      	b.n	8011f2c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e8e:	60fb      	str	r3, [r7, #12]
 8011e90:	e00b      	b.n	8011eaa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011e92:	68f8      	ldr	r0, [r7, #12]
 8011e94:	f7ff fee6 	bl	8011c64 <tcp_output_segment_busy>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d002      	beq.n	8011ea4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011e9e:	f06f 0305 	mvn.w	r3, #5
 8011ea2:	e043      	b.n	8011f2c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	60fb      	str	r3, [r7, #12]
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d1ef      	bne.n	8011e92 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011eb2:	68f8      	ldr	r0, [r7, #12]
 8011eb4:	f7ff fed6 	bl	8011c64 <tcp_output_segment_busy>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d002      	beq.n	8011ec4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011ebe:	f06f 0305 	mvn.w	r3, #5
 8011ec2:	e033      	b.n	8011f2c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	8b5b      	ldrh	r3, [r3, #26]
 8011ede:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011ee2:	b29a      	uxth	r2, r3
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	68db      	ldr	r3, [r3, #12]
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f7f9 fc65 	bl	800b7be <lwip_htonl>
 8011ef4:	4604      	mov	r4, r0
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	891b      	ldrh	r3, [r3, #8]
 8011efa:	461d      	mov	r5, r3
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	68db      	ldr	r3, [r3, #12]
 8011f00:	899b      	ldrh	r3, [r3, #12]
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7f9 fc45 	bl	800b794 <lwip_htons>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	b2db      	uxtb	r3, r3
 8011f0e:	f003 0303 	and.w	r3, r3, #3
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d001      	beq.n	8011f1a <tcp_rexmit_rto_prepare+0xba>
 8011f16:	2301      	movs	r3, #1
 8011f18:	e000      	b.n	8011f1c <tcp_rexmit_rto_prepare+0xbc>
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	442b      	add	r3, r5
 8011f1e:	18e2      	adds	r2, r4, r3
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2200      	movs	r2, #0
 8011f28:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011f2a:	2300      	movs	r3, #0
}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3710      	adds	r7, #16
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bdb0      	pop	{r4, r5, r7, pc}
 8011f34:	0801893c 	.word	0x0801893c
 8011f38:	08018f78 	.word	0x08018f78
 8011f3c:	08018990 	.word	0x08018990

08011f40 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d106      	bne.n	8011f5c <tcp_rexmit_rto_commit+0x1c>
 8011f4e:	4b0d      	ldr	r3, [pc, #52]	; (8011f84 <tcp_rexmit_rto_commit+0x44>)
 8011f50:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011f54:	490c      	ldr	r1, [pc, #48]	; (8011f88 <tcp_rexmit_rto_commit+0x48>)
 8011f56:	480d      	ldr	r0, [pc, #52]	; (8011f8c <tcp_rexmit_rto_commit+0x4c>)
 8011f58:	f004 f93a 	bl	80161d0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f62:	2bff      	cmp	r3, #255	; 0xff
 8011f64:	d007      	beq.n	8011f76 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011f6c:	3301      	adds	r3, #1
 8011f6e:	b2da      	uxtb	r2, r3
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f7ff fc80 	bl	801187c <tcp_output>
}
 8011f7c:	bf00      	nop
 8011f7e:	3708      	adds	r7, #8
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	0801893c 	.word	0x0801893c
 8011f88:	08018f9c 	.word	0x08018f9c
 8011f8c:	08018990 	.word	0x08018990

08011f90 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b082      	sub	sp, #8
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d106      	bne.n	8011fac <tcp_rexmit_rto+0x1c>
 8011f9e:	4b0a      	ldr	r3, [pc, #40]	; (8011fc8 <tcp_rexmit_rto+0x38>)
 8011fa0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011fa4:	4909      	ldr	r1, [pc, #36]	; (8011fcc <tcp_rexmit_rto+0x3c>)
 8011fa6:	480a      	ldr	r0, [pc, #40]	; (8011fd0 <tcp_rexmit_rto+0x40>)
 8011fa8:	f004 f912 	bl	80161d0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f7ff ff57 	bl	8011e60 <tcp_rexmit_rto_prepare>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d102      	bne.n	8011fbe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011fb8:	6878      	ldr	r0, [r7, #4]
 8011fba:	f7ff ffc1 	bl	8011f40 <tcp_rexmit_rto_commit>
  }
}
 8011fbe:	bf00      	nop
 8011fc0:	3708      	adds	r7, #8
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
 8011fc6:	bf00      	nop
 8011fc8:	0801893c 	.word	0x0801893c
 8011fcc:	08018fc0 	.word	0x08018fc0
 8011fd0:	08018990 	.word	0x08018990

08011fd4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011fd4:	b590      	push	{r4, r7, lr}
 8011fd6:	b085      	sub	sp, #20
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d106      	bne.n	8011ff0 <tcp_rexmit+0x1c>
 8011fe2:	4b2f      	ldr	r3, [pc, #188]	; (80120a0 <tcp_rexmit+0xcc>)
 8011fe4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011fe8:	492e      	ldr	r1, [pc, #184]	; (80120a4 <tcp_rexmit+0xd0>)
 8011fea:	482f      	ldr	r0, [pc, #188]	; (80120a8 <tcp_rexmit+0xd4>)
 8011fec:	f004 f8f0 	bl	80161d0 <iprintf>

  if (pcb->unacked == NULL) {
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d102      	bne.n	8011ffe <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011ff8:	f06f 0305 	mvn.w	r3, #5
 8011ffc:	e04c      	b.n	8012098 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012002:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012004:	68b8      	ldr	r0, [r7, #8]
 8012006:	f7ff fe2d 	bl	8011c64 <tcp_output_segment_busy>
 801200a:	4603      	mov	r3, r0
 801200c:	2b00      	cmp	r3, #0
 801200e:	d002      	beq.n	8012016 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8012010:	f06f 0305 	mvn.w	r3, #5
 8012014:	e040      	b.n	8012098 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	681a      	ldr	r2, [r3, #0]
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	336c      	adds	r3, #108	; 0x6c
 8012022:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012024:	e002      	b.n	801202c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d011      	beq.n	8012058 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	68db      	ldr	r3, [r3, #12]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	4618      	mov	r0, r3
 801203e:	f7f9 fbbe 	bl	800b7be <lwip_htonl>
 8012042:	4604      	mov	r4, r0
 8012044:	68bb      	ldr	r3, [r7, #8]
 8012046:	68db      	ldr	r3, [r3, #12]
 8012048:	685b      	ldr	r3, [r3, #4]
 801204a:	4618      	mov	r0, r3
 801204c:	f7f9 fbb7 	bl	800b7be <lwip_htonl>
 8012050:	4603      	mov	r3, r0
 8012052:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012054:	2b00      	cmp	r3, #0
 8012056:	dbe6      	blt.n	8012026 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	68bb      	ldr	r3, [r7, #8]
 801205e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	68ba      	ldr	r2, [r7, #8]
 8012064:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d103      	bne.n	8012076 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	2200      	movs	r2, #0
 8012072:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801207c:	2bff      	cmp	r3, #255	; 0xff
 801207e:	d007      	beq.n	8012090 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012086:	3301      	adds	r3, #1
 8012088:	b2da      	uxtb	r2, r3
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2200      	movs	r2, #0
 8012094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012096:	2300      	movs	r3, #0
}
 8012098:	4618      	mov	r0, r3
 801209a:	3714      	adds	r7, #20
 801209c:	46bd      	mov	sp, r7
 801209e:	bd90      	pop	{r4, r7, pc}
 80120a0:	0801893c 	.word	0x0801893c
 80120a4:	08018fdc 	.word	0x08018fdc
 80120a8:	08018990 	.word	0x08018990

080120ac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b082      	sub	sp, #8
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d106      	bne.n	80120c8 <tcp_rexmit_fast+0x1c>
 80120ba:	4b2a      	ldr	r3, [pc, #168]	; (8012164 <tcp_rexmit_fast+0xb8>)
 80120bc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80120c0:	4929      	ldr	r1, [pc, #164]	; (8012168 <tcp_rexmit_fast+0xbc>)
 80120c2:	482a      	ldr	r0, [pc, #168]	; (801216c <tcp_rexmit_fast+0xc0>)
 80120c4:	f004 f884 	bl	80161d0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d045      	beq.n	801215c <tcp_rexmit_fast+0xb0>
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	8b5b      	ldrh	r3, [r3, #26]
 80120d4:	f003 0304 	and.w	r3, r3, #4
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d13f      	bne.n	801215c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f7ff ff79 	bl	8011fd4 <tcp_rexmit>
 80120e2:	4603      	mov	r3, r0
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d139      	bne.n	801215c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120f4:	4293      	cmp	r3, r2
 80120f6:	bf28      	it	cs
 80120f8:	4613      	movcs	r3, r2
 80120fa:	b29b      	uxth	r3, r3
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	da00      	bge.n	8012102 <tcp_rexmit_fast+0x56>
 8012100:	3301      	adds	r3, #1
 8012102:	105b      	asrs	r3, r3, #1
 8012104:	b29a      	uxth	r2, r3
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012112:	461a      	mov	r2, r3
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012118:	005b      	lsls	r3, r3, #1
 801211a:	429a      	cmp	r2, r3
 801211c:	d206      	bcs.n	801212c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012122:	005b      	lsls	r3, r3, #1
 8012124:	b29a      	uxth	r2, r3
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012136:	4619      	mov	r1, r3
 8012138:	0049      	lsls	r1, r1, #1
 801213a:	440b      	add	r3, r1
 801213c:	b29b      	uxth	r3, r3
 801213e:	4413      	add	r3, r2
 8012140:	b29a      	uxth	r2, r3
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	8b5b      	ldrh	r3, [r3, #26]
 801214c:	f043 0304 	orr.w	r3, r3, #4
 8012150:	b29a      	uxth	r2, r3
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2200      	movs	r2, #0
 801215a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801215c:	bf00      	nop
 801215e:	3708      	adds	r7, #8
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}
 8012164:	0801893c 	.word	0x0801893c
 8012168:	08018ff4 	.word	0x08018ff4
 801216c:	08018990 	.word	0x08018990

08012170 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b086      	sub	sp, #24
 8012174:	af00      	add	r7, sp, #0
 8012176:	60f8      	str	r0, [r7, #12]
 8012178:	607b      	str	r3, [r7, #4]
 801217a:	460b      	mov	r3, r1
 801217c:	817b      	strh	r3, [r7, #10]
 801217e:	4613      	mov	r3, r2
 8012180:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012182:	897a      	ldrh	r2, [r7, #10]
 8012184:	893b      	ldrh	r3, [r7, #8]
 8012186:	4413      	add	r3, r2
 8012188:	b29b      	uxth	r3, r3
 801218a:	3314      	adds	r3, #20
 801218c:	b29b      	uxth	r3, r3
 801218e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012192:	4619      	mov	r1, r3
 8012194:	2022      	movs	r0, #34	; 0x22
 8012196:	f7fa fb77 	bl	800c888 <pbuf_alloc>
 801219a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d04d      	beq.n	801223e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80121a2:	897b      	ldrh	r3, [r7, #10]
 80121a4:	3313      	adds	r3, #19
 80121a6:	697a      	ldr	r2, [r7, #20]
 80121a8:	8952      	ldrh	r2, [r2, #10]
 80121aa:	4293      	cmp	r3, r2
 80121ac:	db06      	blt.n	80121bc <tcp_output_alloc_header_common+0x4c>
 80121ae:	4b26      	ldr	r3, [pc, #152]	; (8012248 <tcp_output_alloc_header_common+0xd8>)
 80121b0:	f240 7223 	movw	r2, #1827	; 0x723
 80121b4:	4925      	ldr	r1, [pc, #148]	; (801224c <tcp_output_alloc_header_common+0xdc>)
 80121b6:	4826      	ldr	r0, [pc, #152]	; (8012250 <tcp_output_alloc_header_common+0xe0>)
 80121b8:	f004 f80a 	bl	80161d0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80121bc:	697b      	ldr	r3, [r7, #20]
 80121be:	685b      	ldr	r3, [r3, #4]
 80121c0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80121c2:	8c3b      	ldrh	r3, [r7, #32]
 80121c4:	4618      	mov	r0, r3
 80121c6:	f7f9 fae5 	bl	800b794 <lwip_htons>
 80121ca:	4603      	mov	r3, r0
 80121cc:	461a      	mov	r2, r3
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80121d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7f9 fadd 	bl	800b794 <lwip_htons>
 80121da:	4603      	mov	r3, r0
 80121dc:	461a      	mov	r2, r3
 80121de:	693b      	ldr	r3, [r7, #16]
 80121e0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	687a      	ldr	r2, [r7, #4]
 80121e6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80121e8:	68f8      	ldr	r0, [r7, #12]
 80121ea:	f7f9 fae8 	bl	800b7be <lwip_htonl>
 80121ee:	4602      	mov	r2, r0
 80121f0:	693b      	ldr	r3, [r7, #16]
 80121f2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80121f4:	897b      	ldrh	r3, [r7, #10]
 80121f6:	089b      	lsrs	r3, r3, #2
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	3305      	adds	r3, #5
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	031b      	lsls	r3, r3, #12
 8012200:	b29a      	uxth	r2, r3
 8012202:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012206:	b29b      	uxth	r3, r3
 8012208:	4313      	orrs	r3, r2
 801220a:	b29b      	uxth	r3, r3
 801220c:	4618      	mov	r0, r3
 801220e:	f7f9 fac1 	bl	800b794 <lwip_htons>
 8012212:	4603      	mov	r3, r0
 8012214:	461a      	mov	r2, r3
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801221a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801221c:	4618      	mov	r0, r3
 801221e:	f7f9 fab9 	bl	800b794 <lwip_htons>
 8012222:	4603      	mov	r3, r0
 8012224:	461a      	mov	r2, r3
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801222a:	693b      	ldr	r3, [r7, #16]
 801222c:	2200      	movs	r2, #0
 801222e:	741a      	strb	r2, [r3, #16]
 8012230:	2200      	movs	r2, #0
 8012232:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012234:	693b      	ldr	r3, [r7, #16]
 8012236:	2200      	movs	r2, #0
 8012238:	749a      	strb	r2, [r3, #18]
 801223a:	2200      	movs	r2, #0
 801223c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801223e:	697b      	ldr	r3, [r7, #20]
}
 8012240:	4618      	mov	r0, r3
 8012242:	3718      	adds	r7, #24
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}
 8012248:	0801893c 	.word	0x0801893c
 801224c:	08019014 	.word	0x08019014
 8012250:	08018990 	.word	0x08018990

08012254 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012254:	b5b0      	push	{r4, r5, r7, lr}
 8012256:	b08a      	sub	sp, #40	; 0x28
 8012258:	af04      	add	r7, sp, #16
 801225a:	60f8      	str	r0, [r7, #12]
 801225c:	607b      	str	r3, [r7, #4]
 801225e:	460b      	mov	r3, r1
 8012260:	817b      	strh	r3, [r7, #10]
 8012262:	4613      	mov	r3, r2
 8012264:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d106      	bne.n	801227a <tcp_output_alloc_header+0x26>
 801226c:	4b15      	ldr	r3, [pc, #84]	; (80122c4 <tcp_output_alloc_header+0x70>)
 801226e:	f240 7242 	movw	r2, #1858	; 0x742
 8012272:	4915      	ldr	r1, [pc, #84]	; (80122c8 <tcp_output_alloc_header+0x74>)
 8012274:	4815      	ldr	r0, [pc, #84]	; (80122cc <tcp_output_alloc_header+0x78>)
 8012276:	f003 ffab 	bl	80161d0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	8adb      	ldrh	r3, [r3, #22]
 8012282:	68fa      	ldr	r2, [r7, #12]
 8012284:	8b12      	ldrh	r2, [r2, #24]
 8012286:	68f9      	ldr	r1, [r7, #12]
 8012288:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801228a:	893d      	ldrh	r5, [r7, #8]
 801228c:	897c      	ldrh	r4, [r7, #10]
 801228e:	9103      	str	r1, [sp, #12]
 8012290:	2110      	movs	r1, #16
 8012292:	9102      	str	r1, [sp, #8]
 8012294:	9201      	str	r2, [sp, #4]
 8012296:	9300      	str	r3, [sp, #0]
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	462a      	mov	r2, r5
 801229c:	4621      	mov	r1, r4
 801229e:	f7ff ff67 	bl	8012170 <tcp_output_alloc_header_common>
 80122a2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d006      	beq.n	80122b8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ae:	68fa      	ldr	r2, [r7, #12]
 80122b0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80122b2:	441a      	add	r2, r3
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80122b8:	697b      	ldr	r3, [r7, #20]
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3718      	adds	r7, #24
 80122be:	46bd      	mov	sp, r7
 80122c0:	bdb0      	pop	{r4, r5, r7, pc}
 80122c2:	bf00      	nop
 80122c4:	0801893c 	.word	0x0801893c
 80122c8:	08019044 	.word	0x08019044
 80122cc:	08018990 	.word	0x08018990

080122d0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80122d0:	b580      	push	{r7, lr}
 80122d2:	b088      	sub	sp, #32
 80122d4:	af00      	add	r7, sp, #0
 80122d6:	60f8      	str	r0, [r7, #12]
 80122d8:	60b9      	str	r1, [r7, #8]
 80122da:	4611      	mov	r1, r2
 80122dc:	461a      	mov	r2, r3
 80122de:	460b      	mov	r3, r1
 80122e0:	71fb      	strb	r3, [r7, #7]
 80122e2:	4613      	mov	r3, r2
 80122e4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80122e6:	2300      	movs	r3, #0
 80122e8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d106      	bne.n	80122fe <tcp_output_fill_options+0x2e>
 80122f0:	4b13      	ldr	r3, [pc, #76]	; (8012340 <tcp_output_fill_options+0x70>)
 80122f2:	f240 7256 	movw	r2, #1878	; 0x756
 80122f6:	4913      	ldr	r1, [pc, #76]	; (8012344 <tcp_output_fill_options+0x74>)
 80122f8:	4813      	ldr	r0, [pc, #76]	; (8012348 <tcp_output_fill_options+0x78>)
 80122fa:	f003 ff69 	bl	80161d0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	3314      	adds	r3, #20
 8012308:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801230a:	69bb      	ldr	r3, [r7, #24]
 801230c:	f103 0214 	add.w	r2, r3, #20
 8012310:	8bfb      	ldrh	r3, [r7, #30]
 8012312:	009b      	lsls	r3, r3, #2
 8012314:	4619      	mov	r1, r3
 8012316:	79fb      	ldrb	r3, [r7, #7]
 8012318:	009b      	lsls	r3, r3, #2
 801231a:	f003 0304 	and.w	r3, r3, #4
 801231e:	440b      	add	r3, r1
 8012320:	4413      	add	r3, r2
 8012322:	697a      	ldr	r2, [r7, #20]
 8012324:	429a      	cmp	r2, r3
 8012326:	d006      	beq.n	8012336 <tcp_output_fill_options+0x66>
 8012328:	4b05      	ldr	r3, [pc, #20]	; (8012340 <tcp_output_fill_options+0x70>)
 801232a:	f240 7275 	movw	r2, #1909	; 0x775
 801232e:	4907      	ldr	r1, [pc, #28]	; (801234c <tcp_output_fill_options+0x7c>)
 8012330:	4805      	ldr	r0, [pc, #20]	; (8012348 <tcp_output_fill_options+0x78>)
 8012332:	f003 ff4d 	bl	80161d0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012336:	bf00      	nop
 8012338:	3720      	adds	r7, #32
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}
 801233e:	bf00      	nop
 8012340:	0801893c 	.word	0x0801893c
 8012344:	0801906c 	.word	0x0801906c
 8012348:	08018990 	.word	0x08018990
 801234c:	08018f64 	.word	0x08018f64

08012350 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b08a      	sub	sp, #40	; 0x28
 8012354:	af04      	add	r7, sp, #16
 8012356:	60f8      	str	r0, [r7, #12]
 8012358:	60b9      	str	r1, [r7, #8]
 801235a:	607a      	str	r2, [r7, #4]
 801235c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d106      	bne.n	8012372 <tcp_output_control_segment+0x22>
 8012364:	4b1c      	ldr	r3, [pc, #112]	; (80123d8 <tcp_output_control_segment+0x88>)
 8012366:	f240 7287 	movw	r2, #1927	; 0x787
 801236a:	491c      	ldr	r1, [pc, #112]	; (80123dc <tcp_output_control_segment+0x8c>)
 801236c:	481c      	ldr	r0, [pc, #112]	; (80123e0 <tcp_output_control_segment+0x90>)
 801236e:	f003 ff2f 	bl	80161d0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012372:	683a      	ldr	r2, [r7, #0]
 8012374:	6879      	ldr	r1, [r7, #4]
 8012376:	68f8      	ldr	r0, [r7, #12]
 8012378:	f7fe ff40 	bl	80111fc <tcp_route>
 801237c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801237e:	693b      	ldr	r3, [r7, #16]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d102      	bne.n	801238a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012384:	23fc      	movs	r3, #252	; 0xfc
 8012386:	75fb      	strb	r3, [r7, #23]
 8012388:	e01c      	b.n	80123c4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d006      	beq.n	801239e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	7adb      	ldrb	r3, [r3, #11]
 8012394:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	7a9b      	ldrb	r3, [r3, #10]
 801239a:	757b      	strb	r3, [r7, #21]
 801239c:	e003      	b.n	80123a6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801239e:	23ff      	movs	r3, #255	; 0xff
 80123a0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80123a2:	2300      	movs	r3, #0
 80123a4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80123a6:	7dba      	ldrb	r2, [r7, #22]
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	9302      	str	r3, [sp, #8]
 80123ac:	2306      	movs	r3, #6
 80123ae:	9301      	str	r3, [sp, #4]
 80123b0:	7d7b      	ldrb	r3, [r7, #21]
 80123b2:	9300      	str	r3, [sp, #0]
 80123b4:	4613      	mov	r3, r2
 80123b6:	683a      	ldr	r2, [r7, #0]
 80123b8:	6879      	ldr	r1, [r7, #4]
 80123ba:	68b8      	ldr	r0, [r7, #8]
 80123bc:	f002 fb02 	bl	80149c4 <ip4_output_if>
 80123c0:	4603      	mov	r3, r0
 80123c2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80123c4:	68b8      	ldr	r0, [r7, #8]
 80123c6:	f7fa fd43 	bl	800ce50 <pbuf_free>
  return err;
 80123ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80123ce:	4618      	mov	r0, r3
 80123d0:	3718      	adds	r7, #24
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
 80123d6:	bf00      	nop
 80123d8:	0801893c 	.word	0x0801893c
 80123dc:	08019094 	.word	0x08019094
 80123e0:	08018990 	.word	0x08018990

080123e4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80123e4:	b590      	push	{r4, r7, lr}
 80123e6:	b08b      	sub	sp, #44	; 0x2c
 80123e8:	af04      	add	r7, sp, #16
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
 80123f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d106      	bne.n	8012406 <tcp_rst+0x22>
 80123f8:	4b1f      	ldr	r3, [pc, #124]	; (8012478 <tcp_rst+0x94>)
 80123fa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80123fe:	491f      	ldr	r1, [pc, #124]	; (801247c <tcp_rst+0x98>)
 8012400:	481f      	ldr	r0, [pc, #124]	; (8012480 <tcp_rst+0x9c>)
 8012402:	f003 fee5 	bl	80161d0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012408:	2b00      	cmp	r3, #0
 801240a:	d106      	bne.n	801241a <tcp_rst+0x36>
 801240c:	4b1a      	ldr	r3, [pc, #104]	; (8012478 <tcp_rst+0x94>)
 801240e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012412:	491c      	ldr	r1, [pc, #112]	; (8012484 <tcp_rst+0xa0>)
 8012414:	481a      	ldr	r0, [pc, #104]	; (8012480 <tcp_rst+0x9c>)
 8012416:	f003 fedb 	bl	80161d0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801241a:	2300      	movs	r3, #0
 801241c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801241e:	f246 0308 	movw	r3, #24584	; 0x6008
 8012422:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012424:	7dfb      	ldrb	r3, [r7, #23]
 8012426:	b29c      	uxth	r4, r3
 8012428:	68b8      	ldr	r0, [r7, #8]
 801242a:	f7f9 f9c8 	bl	800b7be <lwip_htonl>
 801242e:	4602      	mov	r2, r0
 8012430:	8abb      	ldrh	r3, [r7, #20]
 8012432:	9303      	str	r3, [sp, #12]
 8012434:	2314      	movs	r3, #20
 8012436:	9302      	str	r3, [sp, #8]
 8012438:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801243a:	9301      	str	r3, [sp, #4]
 801243c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801243e:	9300      	str	r3, [sp, #0]
 8012440:	4613      	mov	r3, r2
 8012442:	2200      	movs	r2, #0
 8012444:	4621      	mov	r1, r4
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f7ff fe92 	bl	8012170 <tcp_output_alloc_header_common>
 801244c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801244e:	693b      	ldr	r3, [r7, #16]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d00c      	beq.n	801246e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012454:	7dfb      	ldrb	r3, [r7, #23]
 8012456:	2200      	movs	r2, #0
 8012458:	6939      	ldr	r1, [r7, #16]
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	f7ff ff38 	bl	80122d0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012462:	683a      	ldr	r2, [r7, #0]
 8012464:	6939      	ldr	r1, [r7, #16]
 8012466:	68f8      	ldr	r0, [r7, #12]
 8012468:	f7ff ff72 	bl	8012350 <tcp_output_control_segment>
 801246c:	e000      	b.n	8012470 <tcp_rst+0x8c>
    return;
 801246e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012470:	371c      	adds	r7, #28
 8012472:	46bd      	mov	sp, r7
 8012474:	bd90      	pop	{r4, r7, pc}
 8012476:	bf00      	nop
 8012478:	0801893c 	.word	0x0801893c
 801247c:	080190c0 	.word	0x080190c0
 8012480:	08018990 	.word	0x08018990
 8012484:	080190dc 	.word	0x080190dc

08012488 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012488:	b590      	push	{r4, r7, lr}
 801248a:	b087      	sub	sp, #28
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012490:	2300      	movs	r3, #0
 8012492:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012494:	2300      	movs	r3, #0
 8012496:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d106      	bne.n	80124ac <tcp_send_empty_ack+0x24>
 801249e:	4b28      	ldr	r3, [pc, #160]	; (8012540 <tcp_send_empty_ack+0xb8>)
 80124a0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80124a4:	4927      	ldr	r1, [pc, #156]	; (8012544 <tcp_send_empty_ack+0xbc>)
 80124a6:	4828      	ldr	r0, [pc, #160]	; (8012548 <tcp_send_empty_ack+0xc0>)
 80124a8:	f003 fe92 	bl	80161d0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80124ac:	7dfb      	ldrb	r3, [r7, #23]
 80124ae:	009b      	lsls	r3, r3, #2
 80124b0:	b2db      	uxtb	r3, r3
 80124b2:	f003 0304 	and.w	r3, r3, #4
 80124b6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80124b8:	7d7b      	ldrb	r3, [r7, #21]
 80124ba:	b29c      	uxth	r4, r3
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80124c0:	4618      	mov	r0, r3
 80124c2:	f7f9 f97c 	bl	800b7be <lwip_htonl>
 80124c6:	4603      	mov	r3, r0
 80124c8:	2200      	movs	r2, #0
 80124ca:	4621      	mov	r1, r4
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f7ff fec1 	bl	8012254 <tcp_output_alloc_header>
 80124d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80124d4:	693b      	ldr	r3, [r7, #16]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d109      	bne.n	80124ee <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	8b5b      	ldrh	r3, [r3, #26]
 80124de:	f043 0303 	orr.w	r3, r3, #3
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80124e8:	f06f 0301 	mvn.w	r3, #1
 80124ec:	e023      	b.n	8012536 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80124ee:	7dbb      	ldrb	r3, [r7, #22]
 80124f0:	7dfa      	ldrb	r2, [r7, #23]
 80124f2:	6939      	ldr	r1, [r7, #16]
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f7ff feeb 	bl	80122d0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	3304      	adds	r3, #4
 8012500:	6939      	ldr	r1, [r7, #16]
 8012502:	6878      	ldr	r0, [r7, #4]
 8012504:	f7ff ff24 	bl	8012350 <tcp_output_control_segment>
 8012508:	4603      	mov	r3, r0
 801250a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801250c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d007      	beq.n	8012524 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	8b5b      	ldrh	r3, [r3, #26]
 8012518:	f043 0303 	orr.w	r3, r3, #3
 801251c:	b29a      	uxth	r2, r3
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	835a      	strh	r2, [r3, #26]
 8012522:	e006      	b.n	8012532 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	8b5b      	ldrh	r3, [r3, #26]
 8012528:	f023 0303 	bic.w	r3, r3, #3
 801252c:	b29a      	uxth	r2, r3
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012536:	4618      	mov	r0, r3
 8012538:	371c      	adds	r7, #28
 801253a:	46bd      	mov	sp, r7
 801253c:	bd90      	pop	{r4, r7, pc}
 801253e:	bf00      	nop
 8012540:	0801893c 	.word	0x0801893c
 8012544:	080190f8 	.word	0x080190f8
 8012548:	08018990 	.word	0x08018990

0801254c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801254c:	b590      	push	{r4, r7, lr}
 801254e:	b087      	sub	sp, #28
 8012550:	af00      	add	r7, sp, #0
 8012552:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012554:	2300      	movs	r3, #0
 8012556:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d106      	bne.n	801256c <tcp_keepalive+0x20>
 801255e:	4b18      	ldr	r3, [pc, #96]	; (80125c0 <tcp_keepalive+0x74>)
 8012560:	f640 0224 	movw	r2, #2084	; 0x824
 8012564:	4917      	ldr	r1, [pc, #92]	; (80125c4 <tcp_keepalive+0x78>)
 8012566:	4818      	ldr	r0, [pc, #96]	; (80125c8 <tcp_keepalive+0x7c>)
 8012568:	f003 fe32 	bl	80161d0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801256c:	7dfb      	ldrb	r3, [r7, #23]
 801256e:	b29c      	uxth	r4, r3
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012574:	3b01      	subs	r3, #1
 8012576:	4618      	mov	r0, r3
 8012578:	f7f9 f921 	bl	800b7be <lwip_htonl>
 801257c:	4603      	mov	r3, r0
 801257e:	2200      	movs	r2, #0
 8012580:	4621      	mov	r1, r4
 8012582:	6878      	ldr	r0, [r7, #4]
 8012584:	f7ff fe66 	bl	8012254 <tcp_output_alloc_header>
 8012588:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d102      	bne.n	8012596 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012594:	e010      	b.n	80125b8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012596:	7dfb      	ldrb	r3, [r7, #23]
 8012598:	2200      	movs	r2, #0
 801259a:	6939      	ldr	r1, [r7, #16]
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f7ff fe97 	bl	80122d0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80125a2:	687a      	ldr	r2, [r7, #4]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	3304      	adds	r3, #4
 80125a8:	6939      	ldr	r1, [r7, #16]
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f7ff fed0 	bl	8012350 <tcp_output_control_segment>
 80125b0:	4603      	mov	r3, r0
 80125b2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80125b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	371c      	adds	r7, #28
 80125bc:	46bd      	mov	sp, r7
 80125be:	bd90      	pop	{r4, r7, pc}
 80125c0:	0801893c 	.word	0x0801893c
 80125c4:	08019118 	.word	0x08019118
 80125c8:	08018990 	.word	0x08018990

080125cc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80125cc:	b590      	push	{r4, r7, lr}
 80125ce:	b08b      	sub	sp, #44	; 0x2c
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80125d4:	2300      	movs	r3, #0
 80125d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d106      	bne.n	80125ee <tcp_zero_window_probe+0x22>
 80125e0:	4b4c      	ldr	r3, [pc, #304]	; (8012714 <tcp_zero_window_probe+0x148>)
 80125e2:	f640 024f 	movw	r2, #2127	; 0x84f
 80125e6:	494c      	ldr	r1, [pc, #304]	; (8012718 <tcp_zero_window_probe+0x14c>)
 80125e8:	484c      	ldr	r0, [pc, #304]	; (801271c <tcp_zero_window_probe+0x150>)
 80125ea:	f003 fdf1 	bl	80161d0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125f2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80125f4:	6a3b      	ldr	r3, [r7, #32]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d101      	bne.n	80125fe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80125fa:	2300      	movs	r3, #0
 80125fc:	e086      	b.n	801270c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012604:	2bff      	cmp	r3, #255	; 0xff
 8012606:	d007      	beq.n	8012618 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801260e:	3301      	adds	r3, #1
 8012610:	b2da      	uxtb	r2, r3
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012618:	6a3b      	ldr	r3, [r7, #32]
 801261a:	68db      	ldr	r3, [r3, #12]
 801261c:	899b      	ldrh	r3, [r3, #12]
 801261e:	b29b      	uxth	r3, r3
 8012620:	4618      	mov	r0, r3
 8012622:	f7f9 f8b7 	bl	800b794 <lwip_htons>
 8012626:	4603      	mov	r3, r0
 8012628:	b2db      	uxtb	r3, r3
 801262a:	f003 0301 	and.w	r3, r3, #1
 801262e:	2b00      	cmp	r3, #0
 8012630:	d005      	beq.n	801263e <tcp_zero_window_probe+0x72>
 8012632:	6a3b      	ldr	r3, [r7, #32]
 8012634:	891b      	ldrh	r3, [r3, #8]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d101      	bne.n	801263e <tcp_zero_window_probe+0x72>
 801263a:	2301      	movs	r3, #1
 801263c:	e000      	b.n	8012640 <tcp_zero_window_probe+0x74>
 801263e:	2300      	movs	r3, #0
 8012640:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012642:	7ffb      	ldrb	r3, [r7, #31]
 8012644:	2b00      	cmp	r3, #0
 8012646:	bf0c      	ite	eq
 8012648:	2301      	moveq	r3, #1
 801264a:	2300      	movne	r3, #0
 801264c:	b2db      	uxtb	r3, r3
 801264e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012654:	b299      	uxth	r1, r3
 8012656:	6a3b      	ldr	r3, [r7, #32]
 8012658:	68db      	ldr	r3, [r3, #12]
 801265a:	685b      	ldr	r3, [r3, #4]
 801265c:	8bba      	ldrh	r2, [r7, #28]
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f7ff fdf8 	bl	8012254 <tcp_output_alloc_header>
 8012664:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012666:	69bb      	ldr	r3, [r7, #24]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d102      	bne.n	8012672 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801266c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012670:	e04c      	b.n	801270c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	685b      	ldr	r3, [r3, #4]
 8012676:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012678:	7ffb      	ldrb	r3, [r7, #31]
 801267a:	2b00      	cmp	r3, #0
 801267c:	d011      	beq.n	80126a2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	899b      	ldrh	r3, [r3, #12]
 8012682:	b29b      	uxth	r3, r3
 8012684:	b21b      	sxth	r3, r3
 8012686:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801268a:	b21c      	sxth	r4, r3
 801268c:	2011      	movs	r0, #17
 801268e:	f7f9 f881 	bl	800b794 <lwip_htons>
 8012692:	4603      	mov	r3, r0
 8012694:	b21b      	sxth	r3, r3
 8012696:	4323      	orrs	r3, r4
 8012698:	b21b      	sxth	r3, r3
 801269a:	b29a      	uxth	r2, r3
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	819a      	strh	r2, [r3, #12]
 80126a0:	e010      	b.n	80126c4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80126a2:	69bb      	ldr	r3, [r7, #24]
 80126a4:	685b      	ldr	r3, [r3, #4]
 80126a6:	3314      	adds	r3, #20
 80126a8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80126aa:	6a3b      	ldr	r3, [r7, #32]
 80126ac:	6858      	ldr	r0, [r3, #4]
 80126ae:	6a3b      	ldr	r3, [r7, #32]
 80126b0:	685b      	ldr	r3, [r3, #4]
 80126b2:	891a      	ldrh	r2, [r3, #8]
 80126b4:	6a3b      	ldr	r3, [r7, #32]
 80126b6:	891b      	ldrh	r3, [r3, #8]
 80126b8:	1ad3      	subs	r3, r2, r3
 80126ba:	b29b      	uxth	r3, r3
 80126bc:	2201      	movs	r2, #1
 80126be:	6939      	ldr	r1, [r7, #16]
 80126c0:	f7fa fdc0 	bl	800d244 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80126c4:	6a3b      	ldr	r3, [r7, #32]
 80126c6:	68db      	ldr	r3, [r3, #12]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7f9 f877 	bl	800b7be <lwip_htonl>
 80126d0:	4603      	mov	r3, r0
 80126d2:	3301      	adds	r3, #1
 80126d4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	1ad3      	subs	r3, r2, r3
 80126de:	2b00      	cmp	r3, #0
 80126e0:	da02      	bge.n	80126e8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	68fa      	ldr	r2, [r7, #12]
 80126e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80126e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126ec:	2200      	movs	r2, #0
 80126ee:	69b9      	ldr	r1, [r7, #24]
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f7ff fded 	bl	80122d0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80126f6:	687a      	ldr	r2, [r7, #4]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	3304      	adds	r3, #4
 80126fc:	69b9      	ldr	r1, [r7, #24]
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f7ff fe26 	bl	8012350 <tcp_output_control_segment>
 8012704:	4603      	mov	r3, r0
 8012706:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012708:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801270c:	4618      	mov	r0, r3
 801270e:	372c      	adds	r7, #44	; 0x2c
 8012710:	46bd      	mov	sp, r7
 8012712:	bd90      	pop	{r4, r7, pc}
 8012714:	0801893c 	.word	0x0801893c
 8012718:	08019134 	.word	0x08019134
 801271c:	08018990 	.word	0x08018990

08012720 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b082      	sub	sp, #8
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012728:	f7fa ff0c 	bl	800d544 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801272c:	4b0a      	ldr	r3, [pc, #40]	; (8012758 <tcpip_tcp_timer+0x38>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d103      	bne.n	801273c <tcpip_tcp_timer+0x1c>
 8012734:	4b09      	ldr	r3, [pc, #36]	; (801275c <tcpip_tcp_timer+0x3c>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	2b00      	cmp	r3, #0
 801273a:	d005      	beq.n	8012748 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801273c:	2200      	movs	r2, #0
 801273e:	4908      	ldr	r1, [pc, #32]	; (8012760 <tcpip_tcp_timer+0x40>)
 8012740:	20fa      	movs	r0, #250	; 0xfa
 8012742:	f000 f8f3 	bl	801292c <sys_timeout>
 8012746:	e003      	b.n	8012750 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012748:	4b06      	ldr	r3, [pc, #24]	; (8012764 <tcpip_tcp_timer+0x44>)
 801274a:	2200      	movs	r2, #0
 801274c:	601a      	str	r2, [r3, #0]
  }
}
 801274e:	bf00      	nop
 8012750:	bf00      	nop
 8012752:	3708      	adds	r7, #8
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}
 8012758:	20008f2c 	.word	0x20008f2c
 801275c:	20008f30 	.word	0x20008f30
 8012760:	08012721 	.word	0x08012721
 8012764:	20008f78 	.word	0x20008f78

08012768 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801276c:	4b0a      	ldr	r3, [pc, #40]	; (8012798 <tcp_timer_needed+0x30>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d10f      	bne.n	8012794 <tcp_timer_needed+0x2c>
 8012774:	4b09      	ldr	r3, [pc, #36]	; (801279c <tcp_timer_needed+0x34>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d103      	bne.n	8012784 <tcp_timer_needed+0x1c>
 801277c:	4b08      	ldr	r3, [pc, #32]	; (80127a0 <tcp_timer_needed+0x38>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d007      	beq.n	8012794 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012784:	4b04      	ldr	r3, [pc, #16]	; (8012798 <tcp_timer_needed+0x30>)
 8012786:	2201      	movs	r2, #1
 8012788:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801278a:	2200      	movs	r2, #0
 801278c:	4905      	ldr	r1, [pc, #20]	; (80127a4 <tcp_timer_needed+0x3c>)
 801278e:	20fa      	movs	r0, #250	; 0xfa
 8012790:	f000 f8cc 	bl	801292c <sys_timeout>
  }
}
 8012794:	bf00      	nop
 8012796:	bd80      	pop	{r7, pc}
 8012798:	20008f78 	.word	0x20008f78
 801279c:	20008f2c 	.word	0x20008f2c
 80127a0:	20008f30 	.word	0x20008f30
 80127a4:	08012721 	.word	0x08012721

080127a8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b086      	sub	sp, #24
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	60f8      	str	r0, [r7, #12]
 80127b0:	60b9      	str	r1, [r7, #8]
 80127b2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80127b4:	2006      	movs	r0, #6
 80127b6:	f7f9 fc65 	bl	800c084 <memp_malloc>
 80127ba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d109      	bne.n	80127d6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80127c2:	693b      	ldr	r3, [r7, #16]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d151      	bne.n	801286c <sys_timeout_abs+0xc4>
 80127c8:	4b2a      	ldr	r3, [pc, #168]	; (8012874 <sys_timeout_abs+0xcc>)
 80127ca:	22be      	movs	r2, #190	; 0xbe
 80127cc:	492a      	ldr	r1, [pc, #168]	; (8012878 <sys_timeout_abs+0xd0>)
 80127ce:	482b      	ldr	r0, [pc, #172]	; (801287c <sys_timeout_abs+0xd4>)
 80127d0:	f003 fcfe 	bl	80161d0 <iprintf>
    return;
 80127d4:	e04a      	b.n	801286c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80127d6:	693b      	ldr	r3, [r7, #16]
 80127d8:	2200      	movs	r2, #0
 80127da:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80127dc:	693b      	ldr	r3, [r7, #16]
 80127de:	68ba      	ldr	r2, [r7, #8]
 80127e0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	687a      	ldr	r2, [r7, #4]
 80127e6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	68fa      	ldr	r2, [r7, #12]
 80127ec:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80127ee:	4b24      	ldr	r3, [pc, #144]	; (8012880 <sys_timeout_abs+0xd8>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d103      	bne.n	80127fe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80127f6:	4a22      	ldr	r2, [pc, #136]	; (8012880 <sys_timeout_abs+0xd8>)
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	6013      	str	r3, [r2, #0]
    return;
 80127fc:	e037      	b.n	801286e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80127fe:	693b      	ldr	r3, [r7, #16]
 8012800:	685a      	ldr	r2, [r3, #4]
 8012802:	4b1f      	ldr	r3, [pc, #124]	; (8012880 <sys_timeout_abs+0xd8>)
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	1ad3      	subs	r3, r2, r3
 801280a:	0fdb      	lsrs	r3, r3, #31
 801280c:	f003 0301 	and.w	r3, r3, #1
 8012810:	b2db      	uxtb	r3, r3
 8012812:	2b00      	cmp	r3, #0
 8012814:	d007      	beq.n	8012826 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012816:	4b1a      	ldr	r3, [pc, #104]	; (8012880 <sys_timeout_abs+0xd8>)
 8012818:	681a      	ldr	r2, [r3, #0]
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801281e:	4a18      	ldr	r2, [pc, #96]	; (8012880 <sys_timeout_abs+0xd8>)
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	6013      	str	r3, [r2, #0]
 8012824:	e023      	b.n	801286e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012826:	4b16      	ldr	r3, [pc, #88]	; (8012880 <sys_timeout_abs+0xd8>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	617b      	str	r3, [r7, #20]
 801282c:	e01a      	b.n	8012864 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d00b      	beq.n	801284e <sys_timeout_abs+0xa6>
 8012836:	693b      	ldr	r3, [r7, #16]
 8012838:	685a      	ldr	r2, [r3, #4]
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	685b      	ldr	r3, [r3, #4]
 8012840:	1ad3      	subs	r3, r2, r3
 8012842:	0fdb      	lsrs	r3, r3, #31
 8012844:	f003 0301 	and.w	r3, r3, #1
 8012848:	b2db      	uxtb	r3, r3
 801284a:	2b00      	cmp	r3, #0
 801284c:	d007      	beq.n	801285e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	681a      	ldr	r2, [r3, #0]
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012856:	697b      	ldr	r3, [r7, #20]
 8012858:	693a      	ldr	r2, [r7, #16]
 801285a:	601a      	str	r2, [r3, #0]
        break;
 801285c:	e007      	b.n	801286e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	617b      	str	r3, [r7, #20]
 8012864:	697b      	ldr	r3, [r7, #20]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d1e1      	bne.n	801282e <sys_timeout_abs+0x86>
 801286a:	e000      	b.n	801286e <sys_timeout_abs+0xc6>
    return;
 801286c:	bf00      	nop
      }
    }
  }
}
 801286e:	3718      	adds	r7, #24
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}
 8012874:	08019158 	.word	0x08019158
 8012878:	0801918c 	.word	0x0801918c
 801287c:	080191cc 	.word	0x080191cc
 8012880:	20008f70 	.word	0x20008f70

08012884 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b086      	sub	sp, #24
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	685b      	ldr	r3, [r3, #4]
 8012894:	4798      	blx	r3

  now = sys_now();
 8012896:	f7f8 fd71 	bl	800b37c <sys_now>
 801289a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	681a      	ldr	r2, [r3, #0]
 80128a0:	4b0f      	ldr	r3, [pc, #60]	; (80128e0 <lwip_cyclic_timer+0x5c>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	4413      	add	r3, r2
 80128a6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80128a8:	68fa      	ldr	r2, [r7, #12]
 80128aa:	693b      	ldr	r3, [r7, #16]
 80128ac:	1ad3      	subs	r3, r2, r3
 80128ae:	0fdb      	lsrs	r3, r3, #31
 80128b0:	f003 0301 	and.w	r3, r3, #1
 80128b4:	b2db      	uxtb	r3, r3
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d009      	beq.n	80128ce <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	681a      	ldr	r2, [r3, #0]
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	4413      	add	r3, r2
 80128c2:	687a      	ldr	r2, [r7, #4]
 80128c4:	4907      	ldr	r1, [pc, #28]	; (80128e4 <lwip_cyclic_timer+0x60>)
 80128c6:	4618      	mov	r0, r3
 80128c8:	f7ff ff6e 	bl	80127a8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80128cc:	e004      	b.n	80128d8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	4904      	ldr	r1, [pc, #16]	; (80128e4 <lwip_cyclic_timer+0x60>)
 80128d2:	68f8      	ldr	r0, [r7, #12]
 80128d4:	f7ff ff68 	bl	80127a8 <sys_timeout_abs>
}
 80128d8:	bf00      	nop
 80128da:	3718      	adds	r7, #24
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}
 80128e0:	20008f74 	.word	0x20008f74
 80128e4:	08012885 	.word	0x08012885

080128e8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80128ee:	2301      	movs	r3, #1
 80128f0:	607b      	str	r3, [r7, #4]
 80128f2:	e00e      	b.n	8012912 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80128f4:	4a0b      	ldr	r2, [pc, #44]	; (8012924 <sys_timeouts_init+0x3c>)
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	00db      	lsls	r3, r3, #3
 8012900:	4a08      	ldr	r2, [pc, #32]	; (8012924 <sys_timeouts_init+0x3c>)
 8012902:	4413      	add	r3, r2
 8012904:	461a      	mov	r2, r3
 8012906:	4908      	ldr	r1, [pc, #32]	; (8012928 <sys_timeouts_init+0x40>)
 8012908:	f000 f810 	bl	801292c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	3301      	adds	r3, #1
 8012910:	607b      	str	r3, [r7, #4]
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2b02      	cmp	r3, #2
 8012916:	d9ed      	bls.n	80128f4 <sys_timeouts_init+0xc>
  }
}
 8012918:	bf00      	nop
 801291a:	bf00      	nop
 801291c:	3708      	adds	r7, #8
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}
 8012922:	bf00      	nop
 8012924:	08019d70 	.word	0x08019d70
 8012928:	08012885 	.word	0x08012885

0801292c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b086      	sub	sp, #24
 8012930:	af00      	add	r7, sp, #0
 8012932:	60f8      	str	r0, [r7, #12]
 8012934:	60b9      	str	r1, [r7, #8]
 8012936:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801293e:	d306      	bcc.n	801294e <sys_timeout+0x22>
 8012940:	4b0a      	ldr	r3, [pc, #40]	; (801296c <sys_timeout+0x40>)
 8012942:	f240 1229 	movw	r2, #297	; 0x129
 8012946:	490a      	ldr	r1, [pc, #40]	; (8012970 <sys_timeout+0x44>)
 8012948:	480a      	ldr	r0, [pc, #40]	; (8012974 <sys_timeout+0x48>)
 801294a:	f003 fc41 	bl	80161d0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801294e:	f7f8 fd15 	bl	800b37c <sys_now>
 8012952:	4602      	mov	r2, r0
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	4413      	add	r3, r2
 8012958:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801295a:	687a      	ldr	r2, [r7, #4]
 801295c:	68b9      	ldr	r1, [r7, #8]
 801295e:	6978      	ldr	r0, [r7, #20]
 8012960:	f7ff ff22 	bl	80127a8 <sys_timeout_abs>
#endif
}
 8012964:	bf00      	nop
 8012966:	3718      	adds	r7, #24
 8012968:	46bd      	mov	sp, r7
 801296a:	bd80      	pop	{r7, pc}
 801296c:	08019158 	.word	0x08019158
 8012970:	080191f4 	.word	0x080191f4
 8012974:	080191cc 	.word	0x080191cc

08012978 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b084      	sub	sp, #16
 801297c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801297e:	f7f8 fcfd 	bl	800b37c <sys_now>
 8012982:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8012984:	4b1a      	ldr	r3, [pc, #104]	; (80129f0 <sys_check_timeouts+0x78>)
 8012986:	781b      	ldrb	r3, [r3, #0]
 8012988:	b2db      	uxtb	r3, r3
 801298a:	2b00      	cmp	r3, #0
 801298c:	d001      	beq.n	8012992 <sys_check_timeouts+0x1a>
 801298e:	f7f9 ff25 	bl	800c7dc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8012992:	4b18      	ldr	r3, [pc, #96]	; (80129f4 <sys_check_timeouts+0x7c>)
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012998:	68bb      	ldr	r3, [r7, #8]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d022      	beq.n	80129e4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	68fa      	ldr	r2, [r7, #12]
 80129a4:	1ad3      	subs	r3, r2, r3
 80129a6:	0fdb      	lsrs	r3, r3, #31
 80129a8:	f003 0301 	and.w	r3, r3, #1
 80129ac:	b2db      	uxtb	r3, r3
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d11a      	bne.n	80129e8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	4a0f      	ldr	r2, [pc, #60]	; (80129f4 <sys_check_timeouts+0x7c>)
 80129b8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	689b      	ldr	r3, [r3, #8]
 80129be:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	4a0b      	ldr	r2, [pc, #44]	; (80129f8 <sys_check_timeouts+0x80>)
 80129cc:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80129ce:	68b9      	ldr	r1, [r7, #8]
 80129d0:	2006      	movs	r0, #6
 80129d2:	f7f9 fbc7 	bl	800c164 <memp_free>
    if (handler != NULL) {
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d0d3      	beq.n	8012984 <sys_check_timeouts+0xc>
      handler(arg);
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	6838      	ldr	r0, [r7, #0]
 80129e0:	4798      	blx	r3
  do {
 80129e2:	e7cf      	b.n	8012984 <sys_check_timeouts+0xc>
      return;
 80129e4:	bf00      	nop
 80129e6:	e000      	b.n	80129ea <sys_check_timeouts+0x72>
      return;
 80129e8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80129ea:	3710      	adds	r7, #16
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}
 80129f0:	20008f1d 	.word	0x20008f1d
 80129f4:	20008f70 	.word	0x20008f70
 80129f8:	20008f74 	.word	0x20008f74

080129fc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012a00:	f003 fbfe 	bl	8016200 <rand>
 8012a04:	4603      	mov	r3, r0
 8012a06:	b29b      	uxth	r3, r3
 8012a08:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012a12:	b29a      	uxth	r2, r3
 8012a14:	4b01      	ldr	r3, [pc, #4]	; (8012a1c <udp_init+0x20>)
 8012a16:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012a18:	bf00      	nop
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	20000028 	.word	0x20000028

08012a20 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012a20:	b480      	push	{r7}
 8012a22:	b083      	sub	sp, #12
 8012a24:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012a26:	2300      	movs	r3, #0
 8012a28:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012a2a:	4b17      	ldr	r3, [pc, #92]	; (8012a88 <udp_new_port+0x68>)
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	1c5a      	adds	r2, r3, #1
 8012a30:	b291      	uxth	r1, r2
 8012a32:	4a15      	ldr	r2, [pc, #84]	; (8012a88 <udp_new_port+0x68>)
 8012a34:	8011      	strh	r1, [r2, #0]
 8012a36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a3a:	4293      	cmp	r3, r2
 8012a3c:	d103      	bne.n	8012a46 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012a3e:	4b12      	ldr	r3, [pc, #72]	; (8012a88 <udp_new_port+0x68>)
 8012a40:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012a44:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a46:	4b11      	ldr	r3, [pc, #68]	; (8012a8c <udp_new_port+0x6c>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	603b      	str	r3, [r7, #0]
 8012a4c:	e011      	b.n	8012a72 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012a4e:	683b      	ldr	r3, [r7, #0]
 8012a50:	8a5a      	ldrh	r2, [r3, #18]
 8012a52:	4b0d      	ldr	r3, [pc, #52]	; (8012a88 <udp_new_port+0x68>)
 8012a54:	881b      	ldrh	r3, [r3, #0]
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d108      	bne.n	8012a6c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012a5a:	88fb      	ldrh	r3, [r7, #6]
 8012a5c:	3301      	adds	r3, #1
 8012a5e:	80fb      	strh	r3, [r7, #6]
 8012a60:	88fb      	ldrh	r3, [r7, #6]
 8012a62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012a66:	d3e0      	bcc.n	8012a2a <udp_new_port+0xa>
        return 0;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	e007      	b.n	8012a7c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a6c:	683b      	ldr	r3, [r7, #0]
 8012a6e:	68db      	ldr	r3, [r3, #12]
 8012a70:	603b      	str	r3, [r7, #0]
 8012a72:	683b      	ldr	r3, [r7, #0]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d1ea      	bne.n	8012a4e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012a78:	4b03      	ldr	r3, [pc, #12]	; (8012a88 <udp_new_port+0x68>)
 8012a7a:	881b      	ldrh	r3, [r3, #0]
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	370c      	adds	r7, #12
 8012a80:	46bd      	mov	sp, r7
 8012a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a86:	4770      	bx	lr
 8012a88:	20000028 	.word	0x20000028
 8012a8c:	20008f7c 	.word	0x20008f7c

08012a90 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b084      	sub	sp, #16
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	60f8      	str	r0, [r7, #12]
 8012a98:	60b9      	str	r1, [r7, #8]
 8012a9a:	4613      	mov	r3, r2
 8012a9c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d105      	bne.n	8012ab0 <udp_input_local_match+0x20>
 8012aa4:	4b27      	ldr	r3, [pc, #156]	; (8012b44 <udp_input_local_match+0xb4>)
 8012aa6:	2287      	movs	r2, #135	; 0x87
 8012aa8:	4927      	ldr	r1, [pc, #156]	; (8012b48 <udp_input_local_match+0xb8>)
 8012aaa:	4828      	ldr	r0, [pc, #160]	; (8012b4c <udp_input_local_match+0xbc>)
 8012aac:	f003 fb90 	bl	80161d0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d105      	bne.n	8012ac2 <udp_input_local_match+0x32>
 8012ab6:	4b23      	ldr	r3, [pc, #140]	; (8012b44 <udp_input_local_match+0xb4>)
 8012ab8:	2288      	movs	r2, #136	; 0x88
 8012aba:	4925      	ldr	r1, [pc, #148]	; (8012b50 <udp_input_local_match+0xc0>)
 8012abc:	4823      	ldr	r0, [pc, #140]	; (8012b4c <udp_input_local_match+0xbc>)
 8012abe:	f003 fb87 	bl	80161d0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	7a1b      	ldrb	r3, [r3, #8]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d00b      	beq.n	8012ae2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	7a1a      	ldrb	r2, [r3, #8]
 8012ace:	4b21      	ldr	r3, [pc, #132]	; (8012b54 <udp_input_local_match+0xc4>)
 8012ad0:	685b      	ldr	r3, [r3, #4]
 8012ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ada:	429a      	cmp	r2, r3
 8012adc:	d001      	beq.n	8012ae2 <udp_input_local_match+0x52>
    return 0;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	e02b      	b.n	8012b3a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012ae2:	79fb      	ldrb	r3, [r7, #7]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d018      	beq.n	8012b1a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d013      	beq.n	8012b16 <udp_input_local_match+0x86>
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d00f      	beq.n	8012b16 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012af6:	4b17      	ldr	r3, [pc, #92]	; (8012b54 <udp_input_local_match+0xc4>)
 8012af8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012afe:	d00a      	beq.n	8012b16 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	681a      	ldr	r2, [r3, #0]
 8012b04:	4b13      	ldr	r3, [pc, #76]	; (8012b54 <udp_input_local_match+0xc4>)
 8012b06:	695b      	ldr	r3, [r3, #20]
 8012b08:	405a      	eors	r2, r3
 8012b0a:	68bb      	ldr	r3, [r7, #8]
 8012b0c:	3308      	adds	r3, #8
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d110      	bne.n	8012b38 <udp_input_local_match+0xa8>
          return 1;
 8012b16:	2301      	movs	r3, #1
 8012b18:	e00f      	b.n	8012b3a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d009      	beq.n	8012b34 <udp_input_local_match+0xa4>
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d005      	beq.n	8012b34 <udp_input_local_match+0xa4>
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	681a      	ldr	r2, [r3, #0]
 8012b2c:	4b09      	ldr	r3, [pc, #36]	; (8012b54 <udp_input_local_match+0xc4>)
 8012b2e:	695b      	ldr	r3, [r3, #20]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d101      	bne.n	8012b38 <udp_input_local_match+0xa8>
        return 1;
 8012b34:	2301      	movs	r3, #1
 8012b36:	e000      	b.n	8012b3a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012b38:	2300      	movs	r3, #0
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3710      	adds	r7, #16
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	08019240 	.word	0x08019240
 8012b48:	08019270 	.word	0x08019270
 8012b4c:	08019294 	.word	0x08019294
 8012b50:	080192bc 	.word	0x080192bc
 8012b54:	200059b0 	.word	0x200059b0

08012b58 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012b58:	b590      	push	{r4, r7, lr}
 8012b5a:	b08d      	sub	sp, #52	; 0x34
 8012b5c:	af02      	add	r7, sp, #8
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012b62:	2300      	movs	r3, #0
 8012b64:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d105      	bne.n	8012b78 <udp_input+0x20>
 8012b6c:	4b7c      	ldr	r3, [pc, #496]	; (8012d60 <udp_input+0x208>)
 8012b6e:	22cf      	movs	r2, #207	; 0xcf
 8012b70:	497c      	ldr	r1, [pc, #496]	; (8012d64 <udp_input+0x20c>)
 8012b72:	487d      	ldr	r0, [pc, #500]	; (8012d68 <udp_input+0x210>)
 8012b74:	f003 fb2c 	bl	80161d0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d105      	bne.n	8012b8a <udp_input+0x32>
 8012b7e:	4b78      	ldr	r3, [pc, #480]	; (8012d60 <udp_input+0x208>)
 8012b80:	22d0      	movs	r2, #208	; 0xd0
 8012b82:	497a      	ldr	r1, [pc, #488]	; (8012d6c <udp_input+0x214>)
 8012b84:	4878      	ldr	r0, [pc, #480]	; (8012d68 <udp_input+0x210>)
 8012b86:	f003 fb23 	bl	80161d0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	895b      	ldrh	r3, [r3, #10]
 8012b8e:	2b07      	cmp	r3, #7
 8012b90:	d803      	bhi.n	8012b9a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f7fa f95c 	bl	800ce50 <pbuf_free>
    goto end;
 8012b98:	e0de      	b.n	8012d58 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012ba0:	4b73      	ldr	r3, [pc, #460]	; (8012d70 <udp_input+0x218>)
 8012ba2:	695b      	ldr	r3, [r3, #20]
 8012ba4:	4a72      	ldr	r2, [pc, #456]	; (8012d70 <udp_input+0x218>)
 8012ba6:	6812      	ldr	r2, [r2, #0]
 8012ba8:	4611      	mov	r1, r2
 8012baa:	4618      	mov	r0, r3
 8012bac:	f001 ffe2 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	881b      	ldrh	r3, [r3, #0]
 8012bb8:	b29b      	uxth	r3, r3
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7f8 fdea 	bl	800b794 <lwip_htons>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012bc4:	697b      	ldr	r3, [r7, #20]
 8012bc6:	885b      	ldrh	r3, [r3, #2]
 8012bc8:	b29b      	uxth	r3, r3
 8012bca:	4618      	mov	r0, r3
 8012bcc:	f7f8 fde2 	bl	800b794 <lwip_htons>
 8012bd0:	4603      	mov	r3, r0
 8012bd2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012bdc:	2300      	movs	r3, #0
 8012bde:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012be0:	4b64      	ldr	r3, [pc, #400]	; (8012d74 <udp_input+0x21c>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	627b      	str	r3, [r7, #36]	; 0x24
 8012be6:	e054      	b.n	8012c92 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bea:	8a5b      	ldrh	r3, [r3, #18]
 8012bec:	89fa      	ldrh	r2, [r7, #14]
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d14a      	bne.n	8012c88 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012bf2:	7cfb      	ldrb	r3, [r7, #19]
 8012bf4:	461a      	mov	r2, r3
 8012bf6:	6839      	ldr	r1, [r7, #0]
 8012bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bfa:	f7ff ff49 	bl	8012a90 <udp_input_local_match>
 8012bfe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d041      	beq.n	8012c88 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c06:	7c1b      	ldrb	r3, [r3, #16]
 8012c08:	f003 0304 	and.w	r3, r3, #4
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d11d      	bne.n	8012c4c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d102      	bne.n	8012c1c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c18:	61fb      	str	r3, [r7, #28]
 8012c1a:	e017      	b.n	8012c4c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012c1c:	7cfb      	ldrb	r3, [r7, #19]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d014      	beq.n	8012c4c <udp_input+0xf4>
 8012c22:	4b53      	ldr	r3, [pc, #332]	; (8012d70 <udp_input+0x218>)
 8012c24:	695b      	ldr	r3, [r3, #20]
 8012c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c2a:	d10f      	bne.n	8012c4c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012c2c:	69fb      	ldr	r3, [r7, #28]
 8012c2e:	681a      	ldr	r2, [r3, #0]
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	3304      	adds	r3, #4
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	429a      	cmp	r2, r3
 8012c38:	d008      	beq.n	8012c4c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3c:	681a      	ldr	r2, [r3, #0]
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	3304      	adds	r3, #4
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	429a      	cmp	r2, r3
 8012c46:	d101      	bne.n	8012c4c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4e:	8a9b      	ldrh	r3, [r3, #20]
 8012c50:	8a3a      	ldrh	r2, [r7, #16]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d118      	bne.n	8012c88 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c58:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d005      	beq.n	8012c6a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c60:	685a      	ldr	r2, [r3, #4]
 8012c62:	4b43      	ldr	r3, [pc, #268]	; (8012d70 <udp_input+0x218>)
 8012c64:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d10e      	bne.n	8012c88 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012c6a:	6a3b      	ldr	r3, [r7, #32]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d014      	beq.n	8012c9a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c72:	68da      	ldr	r2, [r3, #12]
 8012c74:	6a3b      	ldr	r3, [r7, #32]
 8012c76:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012c78:	4b3e      	ldr	r3, [pc, #248]	; (8012d74 <udp_input+0x21c>)
 8012c7a:	681a      	ldr	r2, [r3, #0]
 8012c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012c80:	4a3c      	ldr	r2, [pc, #240]	; (8012d74 <udp_input+0x21c>)
 8012c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c84:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012c86:	e008      	b.n	8012c9a <udp_input+0x142>
      }
    }

    prev = pcb;
 8012c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c8e:	68db      	ldr	r3, [r3, #12]
 8012c90:	627b      	str	r3, [r7, #36]	; 0x24
 8012c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d1a7      	bne.n	8012be8 <udp_input+0x90>
 8012c98:	e000      	b.n	8012c9c <udp_input+0x144>
        break;
 8012c9a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d101      	bne.n	8012ca6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8012ca2:	69fb      	ldr	r3, [r7, #28]
 8012ca4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d002      	beq.n	8012cb2 <udp_input+0x15a>
    for_us = 1;
 8012cac:	2301      	movs	r3, #1
 8012cae:	76fb      	strb	r3, [r7, #27]
 8012cb0:	e00a      	b.n	8012cc8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	3304      	adds	r3, #4
 8012cb6:	681a      	ldr	r2, [r3, #0]
 8012cb8:	4b2d      	ldr	r3, [pc, #180]	; (8012d70 <udp_input+0x218>)
 8012cba:	695b      	ldr	r3, [r3, #20]
 8012cbc:	429a      	cmp	r2, r3
 8012cbe:	bf0c      	ite	eq
 8012cc0:	2301      	moveq	r3, #1
 8012cc2:	2300      	movne	r3, #0
 8012cc4:	b2db      	uxtb	r3, r3
 8012cc6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012cc8:	7efb      	ldrb	r3, [r7, #27]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d041      	beq.n	8012d52 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012cce:	2108      	movs	r1, #8
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7fa f837 	bl	800cd44 <pbuf_remove_header>
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d00a      	beq.n	8012cf2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012cdc:	4b20      	ldr	r3, [pc, #128]	; (8012d60 <udp_input+0x208>)
 8012cde:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012ce2:	4925      	ldr	r1, [pc, #148]	; (8012d78 <udp_input+0x220>)
 8012ce4:	4820      	ldr	r0, [pc, #128]	; (8012d68 <udp_input+0x210>)
 8012ce6:	f003 fa73 	bl	80161d0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	f7fa f8b0 	bl	800ce50 <pbuf_free>
      goto end;
 8012cf0:	e032      	b.n	8012d58 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d012      	beq.n	8012d1e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cfa:	699b      	ldr	r3, [r3, #24]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d00a      	beq.n	8012d16 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d02:	699c      	ldr	r4, [r3, #24]
 8012d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d06:	69d8      	ldr	r0, [r3, #28]
 8012d08:	8a3b      	ldrh	r3, [r7, #16]
 8012d0a:	9300      	str	r3, [sp, #0]
 8012d0c:	4b1b      	ldr	r3, [pc, #108]	; (8012d7c <udp_input+0x224>)
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d12:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012d14:	e021      	b.n	8012d5a <udp_input+0x202>
        pbuf_free(p);
 8012d16:	6878      	ldr	r0, [r7, #4]
 8012d18:	f7fa f89a 	bl	800ce50 <pbuf_free>
        goto end;
 8012d1c:	e01c      	b.n	8012d58 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012d1e:	7cfb      	ldrb	r3, [r7, #19]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d112      	bne.n	8012d4a <udp_input+0x1f2>
 8012d24:	4b12      	ldr	r3, [pc, #72]	; (8012d70 <udp_input+0x218>)
 8012d26:	695b      	ldr	r3, [r3, #20]
 8012d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012d2c:	2be0      	cmp	r3, #224	; 0xe0
 8012d2e:	d00c      	beq.n	8012d4a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012d30:	4b0f      	ldr	r3, [pc, #60]	; (8012d70 <udp_input+0x218>)
 8012d32:	899b      	ldrh	r3, [r3, #12]
 8012d34:	3308      	adds	r3, #8
 8012d36:	b29b      	uxth	r3, r3
 8012d38:	b21b      	sxth	r3, r3
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f7fa f874 	bl	800ce2a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012d42:	2103      	movs	r1, #3
 8012d44:	6878      	ldr	r0, [r7, #4]
 8012d46:	f001 fbf5 	bl	8014534 <icmp_dest_unreach>
      pbuf_free(p);
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f7fa f880 	bl	800ce50 <pbuf_free>
  return;
 8012d50:	e003      	b.n	8012d5a <udp_input+0x202>
    pbuf_free(p);
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f7fa f87c 	bl	800ce50 <pbuf_free>
  return;
 8012d58:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012d5a:	372c      	adds	r7, #44	; 0x2c
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd90      	pop	{r4, r7, pc}
 8012d60:	08019240 	.word	0x08019240
 8012d64:	080192e4 	.word	0x080192e4
 8012d68:	08019294 	.word	0x08019294
 8012d6c:	080192fc 	.word	0x080192fc
 8012d70:	200059b0 	.word	0x200059b0
 8012d74:	20008f7c 	.word	0x20008f7c
 8012d78:	08019318 	.word	0x08019318
 8012d7c:	200059c0 	.word	0x200059c0

08012d80 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b082      	sub	sp, #8
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
 8012d88:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d109      	bne.n	8012da4 <udp_send+0x24>
 8012d90:	4b11      	ldr	r3, [pc, #68]	; (8012dd8 <udp_send+0x58>)
 8012d92:	f240 12d5 	movw	r2, #469	; 0x1d5
 8012d96:	4911      	ldr	r1, [pc, #68]	; (8012ddc <udp_send+0x5c>)
 8012d98:	4811      	ldr	r0, [pc, #68]	; (8012de0 <udp_send+0x60>)
 8012d9a:	f003 fa19 	bl	80161d0 <iprintf>
 8012d9e:	f06f 030f 	mvn.w	r3, #15
 8012da2:	e015      	b.n	8012dd0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d109      	bne.n	8012dbe <udp_send+0x3e>
 8012daa:	4b0b      	ldr	r3, [pc, #44]	; (8012dd8 <udp_send+0x58>)
 8012dac:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8012db0:	490c      	ldr	r1, [pc, #48]	; (8012de4 <udp_send+0x64>)
 8012db2:	480b      	ldr	r0, [pc, #44]	; (8012de0 <udp_send+0x60>)
 8012db4:	f003 fa0c 	bl	80161d0 <iprintf>
 8012db8:	f06f 030f 	mvn.w	r3, #15
 8012dbc:	e008      	b.n	8012dd0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	1d1a      	adds	r2, r3, #4
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	8a9b      	ldrh	r3, [r3, #20]
 8012dc6:	6839      	ldr	r1, [r7, #0]
 8012dc8:	6878      	ldr	r0, [r7, #4]
 8012dca:	f000 f80d 	bl	8012de8 <udp_sendto>
 8012dce:	4603      	mov	r3, r0
}
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	3708      	adds	r7, #8
 8012dd4:	46bd      	mov	sp, r7
 8012dd6:	bd80      	pop	{r7, pc}
 8012dd8:	08019240 	.word	0x08019240
 8012ddc:	08019334 	.word	0x08019334
 8012de0:	08019294 	.word	0x08019294
 8012de4:	0801934c 	.word	0x0801934c

08012de8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b088      	sub	sp, #32
 8012dec:	af02      	add	r7, sp, #8
 8012dee:	60f8      	str	r0, [r7, #12]
 8012df0:	60b9      	str	r1, [r7, #8]
 8012df2:	607a      	str	r2, [r7, #4]
 8012df4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d109      	bne.n	8012e10 <udp_sendto+0x28>
 8012dfc:	4b23      	ldr	r3, [pc, #140]	; (8012e8c <udp_sendto+0xa4>)
 8012dfe:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012e02:	4923      	ldr	r1, [pc, #140]	; (8012e90 <udp_sendto+0xa8>)
 8012e04:	4823      	ldr	r0, [pc, #140]	; (8012e94 <udp_sendto+0xac>)
 8012e06:	f003 f9e3 	bl	80161d0 <iprintf>
 8012e0a:	f06f 030f 	mvn.w	r3, #15
 8012e0e:	e038      	b.n	8012e82 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d109      	bne.n	8012e2a <udp_sendto+0x42>
 8012e16:	4b1d      	ldr	r3, [pc, #116]	; (8012e8c <udp_sendto+0xa4>)
 8012e18:	f240 2219 	movw	r2, #537	; 0x219
 8012e1c:	491e      	ldr	r1, [pc, #120]	; (8012e98 <udp_sendto+0xb0>)
 8012e1e:	481d      	ldr	r0, [pc, #116]	; (8012e94 <udp_sendto+0xac>)
 8012e20:	f003 f9d6 	bl	80161d0 <iprintf>
 8012e24:	f06f 030f 	mvn.w	r3, #15
 8012e28:	e02b      	b.n	8012e82 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d109      	bne.n	8012e44 <udp_sendto+0x5c>
 8012e30:	4b16      	ldr	r3, [pc, #88]	; (8012e8c <udp_sendto+0xa4>)
 8012e32:	f240 221a 	movw	r2, #538	; 0x21a
 8012e36:	4919      	ldr	r1, [pc, #100]	; (8012e9c <udp_sendto+0xb4>)
 8012e38:	4816      	ldr	r0, [pc, #88]	; (8012e94 <udp_sendto+0xac>)
 8012e3a:	f003 f9c9 	bl	80161d0 <iprintf>
 8012e3e:	f06f 030f 	mvn.w	r3, #15
 8012e42:	e01e      	b.n	8012e82 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	7a1b      	ldrb	r3, [r3, #8]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d006      	beq.n	8012e5a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	7a1b      	ldrb	r3, [r3, #8]
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7f9 fc9d 	bl	800c790 <netif_get_by_index>
 8012e56:	6178      	str	r0, [r7, #20]
 8012e58:	e003      	b.n	8012e62 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f001 fbf4 	bl	8014648 <ip4_route>
 8012e60:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d102      	bne.n	8012e6e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8012e68:	f06f 0303 	mvn.w	r3, #3
 8012e6c:	e009      	b.n	8012e82 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8012e6e:	887a      	ldrh	r2, [r7, #2]
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	9300      	str	r3, [sp, #0]
 8012e74:	4613      	mov	r3, r2
 8012e76:	687a      	ldr	r2, [r7, #4]
 8012e78:	68b9      	ldr	r1, [r7, #8]
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	f000 f810 	bl	8012ea0 <udp_sendto_if>
 8012e80:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3718      	adds	r7, #24
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
 8012e8a:	bf00      	nop
 8012e8c:	08019240 	.word	0x08019240
 8012e90:	08019364 	.word	0x08019364
 8012e94:	08019294 	.word	0x08019294
 8012e98:	0801937c 	.word	0x0801937c
 8012e9c:	08019398 	.word	0x08019398

08012ea0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b088      	sub	sp, #32
 8012ea4:	af02      	add	r7, sp, #8
 8012ea6:	60f8      	str	r0, [r7, #12]
 8012ea8:	60b9      	str	r1, [r7, #8]
 8012eaa:	607a      	str	r2, [r7, #4]
 8012eac:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d109      	bne.n	8012ec8 <udp_sendto_if+0x28>
 8012eb4:	4b2e      	ldr	r3, [pc, #184]	; (8012f70 <udp_sendto_if+0xd0>)
 8012eb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012eba:	492e      	ldr	r1, [pc, #184]	; (8012f74 <udp_sendto_if+0xd4>)
 8012ebc:	482e      	ldr	r0, [pc, #184]	; (8012f78 <udp_sendto_if+0xd8>)
 8012ebe:	f003 f987 	bl	80161d0 <iprintf>
 8012ec2:	f06f 030f 	mvn.w	r3, #15
 8012ec6:	e04f      	b.n	8012f68 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d109      	bne.n	8012ee2 <udp_sendto_if+0x42>
 8012ece:	4b28      	ldr	r3, [pc, #160]	; (8012f70 <udp_sendto_if+0xd0>)
 8012ed0:	f240 2281 	movw	r2, #641	; 0x281
 8012ed4:	4929      	ldr	r1, [pc, #164]	; (8012f7c <udp_sendto_if+0xdc>)
 8012ed6:	4828      	ldr	r0, [pc, #160]	; (8012f78 <udp_sendto_if+0xd8>)
 8012ed8:	f003 f97a 	bl	80161d0 <iprintf>
 8012edc:	f06f 030f 	mvn.w	r3, #15
 8012ee0:	e042      	b.n	8012f68 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d109      	bne.n	8012efc <udp_sendto_if+0x5c>
 8012ee8:	4b21      	ldr	r3, [pc, #132]	; (8012f70 <udp_sendto_if+0xd0>)
 8012eea:	f240 2282 	movw	r2, #642	; 0x282
 8012eee:	4924      	ldr	r1, [pc, #144]	; (8012f80 <udp_sendto_if+0xe0>)
 8012ef0:	4821      	ldr	r0, [pc, #132]	; (8012f78 <udp_sendto_if+0xd8>)
 8012ef2:	f003 f96d 	bl	80161d0 <iprintf>
 8012ef6:	f06f 030f 	mvn.w	r3, #15
 8012efa:	e035      	b.n	8012f68 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012efc:	6a3b      	ldr	r3, [r7, #32]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d109      	bne.n	8012f16 <udp_sendto_if+0x76>
 8012f02:	4b1b      	ldr	r3, [pc, #108]	; (8012f70 <udp_sendto_if+0xd0>)
 8012f04:	f240 2283 	movw	r2, #643	; 0x283
 8012f08:	491e      	ldr	r1, [pc, #120]	; (8012f84 <udp_sendto_if+0xe4>)
 8012f0a:	481b      	ldr	r0, [pc, #108]	; (8012f78 <udp_sendto_if+0xd8>)
 8012f0c:	f003 f960 	bl	80161d0 <iprintf>
 8012f10:	f06f 030f 	mvn.w	r3, #15
 8012f14:	e028      	b.n	8012f68 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d009      	beq.n	8012f30 <udp_sendto_if+0x90>
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d005      	beq.n	8012f30 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f2c:	2be0      	cmp	r3, #224	; 0xe0
 8012f2e:	d103      	bne.n	8012f38 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012f30:	6a3b      	ldr	r3, [r7, #32]
 8012f32:	3304      	adds	r3, #4
 8012f34:	617b      	str	r3, [r7, #20]
 8012f36:	e00b      	b.n	8012f50 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	681a      	ldr	r2, [r3, #0]
 8012f3c:	6a3b      	ldr	r3, [r7, #32]
 8012f3e:	3304      	adds	r3, #4
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d002      	beq.n	8012f4c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8012f46:	f06f 0303 	mvn.w	r3, #3
 8012f4a:	e00d      	b.n	8012f68 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012f50:	887a      	ldrh	r2, [r7, #2]
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	9301      	str	r3, [sp, #4]
 8012f56:	6a3b      	ldr	r3, [r7, #32]
 8012f58:	9300      	str	r3, [sp, #0]
 8012f5a:	4613      	mov	r3, r2
 8012f5c:	687a      	ldr	r2, [r7, #4]
 8012f5e:	68b9      	ldr	r1, [r7, #8]
 8012f60:	68f8      	ldr	r0, [r7, #12]
 8012f62:	f000 f811 	bl	8012f88 <udp_sendto_if_src>
 8012f66:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8012f68:	4618      	mov	r0, r3
 8012f6a:	3718      	adds	r7, #24
 8012f6c:	46bd      	mov	sp, r7
 8012f6e:	bd80      	pop	{r7, pc}
 8012f70:	08019240 	.word	0x08019240
 8012f74:	080193b4 	.word	0x080193b4
 8012f78:	08019294 	.word	0x08019294
 8012f7c:	080193d0 	.word	0x080193d0
 8012f80:	080193ec 	.word	0x080193ec
 8012f84:	0801940c 	.word	0x0801940c

08012f88 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b08c      	sub	sp, #48	; 0x30
 8012f8c:	af04      	add	r7, sp, #16
 8012f8e:	60f8      	str	r0, [r7, #12]
 8012f90:	60b9      	str	r1, [r7, #8]
 8012f92:	607a      	str	r2, [r7, #4]
 8012f94:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d109      	bne.n	8012fb0 <udp_sendto_if_src+0x28>
 8012f9c:	4b65      	ldr	r3, [pc, #404]	; (8013134 <udp_sendto_if_src+0x1ac>)
 8012f9e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012fa2:	4965      	ldr	r1, [pc, #404]	; (8013138 <udp_sendto_if_src+0x1b0>)
 8012fa4:	4865      	ldr	r0, [pc, #404]	; (801313c <udp_sendto_if_src+0x1b4>)
 8012fa6:	f003 f913 	bl	80161d0 <iprintf>
 8012faa:	f06f 030f 	mvn.w	r3, #15
 8012fae:	e0bc      	b.n	801312a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d109      	bne.n	8012fca <udp_sendto_if_src+0x42>
 8012fb6:	4b5f      	ldr	r3, [pc, #380]	; (8013134 <udp_sendto_if_src+0x1ac>)
 8012fb8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012fbc:	4960      	ldr	r1, [pc, #384]	; (8013140 <udp_sendto_if_src+0x1b8>)
 8012fbe:	485f      	ldr	r0, [pc, #380]	; (801313c <udp_sendto_if_src+0x1b4>)
 8012fc0:	f003 f906 	bl	80161d0 <iprintf>
 8012fc4:	f06f 030f 	mvn.w	r3, #15
 8012fc8:	e0af      	b.n	801312a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d109      	bne.n	8012fe4 <udp_sendto_if_src+0x5c>
 8012fd0:	4b58      	ldr	r3, [pc, #352]	; (8013134 <udp_sendto_if_src+0x1ac>)
 8012fd2:	f240 22d3 	movw	r2, #723	; 0x2d3
 8012fd6:	495b      	ldr	r1, [pc, #364]	; (8013144 <udp_sendto_if_src+0x1bc>)
 8012fd8:	4858      	ldr	r0, [pc, #352]	; (801313c <udp_sendto_if_src+0x1b4>)
 8012fda:	f003 f8f9 	bl	80161d0 <iprintf>
 8012fde:	f06f 030f 	mvn.w	r3, #15
 8012fe2:	e0a2      	b.n	801312a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d109      	bne.n	8012ffe <udp_sendto_if_src+0x76>
 8012fea:	4b52      	ldr	r3, [pc, #328]	; (8013134 <udp_sendto_if_src+0x1ac>)
 8012fec:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012ff0:	4955      	ldr	r1, [pc, #340]	; (8013148 <udp_sendto_if_src+0x1c0>)
 8012ff2:	4852      	ldr	r0, [pc, #328]	; (801313c <udp_sendto_if_src+0x1b4>)
 8012ff4:	f003 f8ec 	bl	80161d0 <iprintf>
 8012ff8:	f06f 030f 	mvn.w	r3, #15
 8012ffc:	e095      	b.n	801312a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013000:	2b00      	cmp	r3, #0
 8013002:	d109      	bne.n	8013018 <udp_sendto_if_src+0x90>
 8013004:	4b4b      	ldr	r3, [pc, #300]	; (8013134 <udp_sendto_if_src+0x1ac>)
 8013006:	f240 22d5 	movw	r2, #725	; 0x2d5
 801300a:	4950      	ldr	r1, [pc, #320]	; (801314c <udp_sendto_if_src+0x1c4>)
 801300c:	484b      	ldr	r0, [pc, #300]	; (801313c <udp_sendto_if_src+0x1b4>)
 801300e:	f003 f8df 	bl	80161d0 <iprintf>
 8013012:	f06f 030f 	mvn.w	r3, #15
 8013016:	e088      	b.n	801312a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	8a5b      	ldrh	r3, [r3, #18]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d10f      	bne.n	8013040 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013020:	68f9      	ldr	r1, [r7, #12]
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	8a5b      	ldrh	r3, [r3, #18]
 8013026:	461a      	mov	r2, r3
 8013028:	68f8      	ldr	r0, [r7, #12]
 801302a:	f000 f893 	bl	8013154 <udp_bind>
 801302e:	4603      	mov	r3, r0
 8013030:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8013032:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d002      	beq.n	8013040 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801303a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801303e:	e074      	b.n	801312a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013040:	68bb      	ldr	r3, [r7, #8]
 8013042:	891b      	ldrh	r3, [r3, #8]
 8013044:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013048:	4293      	cmp	r3, r2
 801304a:	d902      	bls.n	8013052 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801304c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013050:	e06b      	b.n	801312a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8013052:	2108      	movs	r1, #8
 8013054:	68b8      	ldr	r0, [r7, #8]
 8013056:	f7f9 fe65 	bl	800cd24 <pbuf_add_header>
 801305a:	4603      	mov	r3, r0
 801305c:	2b00      	cmp	r3, #0
 801305e:	d015      	beq.n	801308c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013060:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013064:	2108      	movs	r1, #8
 8013066:	2022      	movs	r0, #34	; 0x22
 8013068:	f7f9 fc0e 	bl	800c888 <pbuf_alloc>
 801306c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d102      	bne.n	801307a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013074:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013078:	e057      	b.n	801312a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	891b      	ldrh	r3, [r3, #8]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d006      	beq.n	8013090 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8013082:	68b9      	ldr	r1, [r7, #8]
 8013084:	69f8      	ldr	r0, [r7, #28]
 8013086:	f7f9 fffb 	bl	800d080 <pbuf_chain>
 801308a:	e001      	b.n	8013090 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013090:	69fb      	ldr	r3, [r7, #28]
 8013092:	895b      	ldrh	r3, [r3, #10]
 8013094:	2b07      	cmp	r3, #7
 8013096:	d806      	bhi.n	80130a6 <udp_sendto_if_src+0x11e>
 8013098:	4b26      	ldr	r3, [pc, #152]	; (8013134 <udp_sendto_if_src+0x1ac>)
 801309a:	f240 320d 	movw	r2, #781	; 0x30d
 801309e:	492c      	ldr	r1, [pc, #176]	; (8013150 <udp_sendto_if_src+0x1c8>)
 80130a0:	4826      	ldr	r0, [pc, #152]	; (801313c <udp_sendto_if_src+0x1b4>)
 80130a2:	f003 f895 	bl	80161d0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	8a5b      	ldrh	r3, [r3, #18]
 80130b0:	4618      	mov	r0, r3
 80130b2:	f7f8 fb6f 	bl	800b794 <lwip_htons>
 80130b6:	4603      	mov	r3, r0
 80130b8:	461a      	mov	r2, r3
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80130be:	887b      	ldrh	r3, [r7, #2]
 80130c0:	4618      	mov	r0, r3
 80130c2:	f7f8 fb67 	bl	800b794 <lwip_htons>
 80130c6:	4603      	mov	r3, r0
 80130c8:	461a      	mov	r2, r3
 80130ca:	697b      	ldr	r3, [r7, #20]
 80130cc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	2200      	movs	r2, #0
 80130d2:	719a      	strb	r2, [r3, #6]
 80130d4:	2200      	movs	r2, #0
 80130d6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80130d8:	69fb      	ldr	r3, [r7, #28]
 80130da:	891b      	ldrh	r3, [r3, #8]
 80130dc:	4618      	mov	r0, r3
 80130de:	f7f8 fb59 	bl	800b794 <lwip_htons>
 80130e2:	4603      	mov	r3, r0
 80130e4:	461a      	mov	r2, r3
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80130ea:	2311      	movs	r3, #17
 80130ec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	7adb      	ldrb	r3, [r3, #11]
 80130f2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	7a9b      	ldrb	r3, [r3, #10]
 80130f8:	7cb9      	ldrb	r1, [r7, #18]
 80130fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80130fc:	9202      	str	r2, [sp, #8]
 80130fe:	7cfa      	ldrb	r2, [r7, #19]
 8013100:	9201      	str	r2, [sp, #4]
 8013102:	9300      	str	r3, [sp, #0]
 8013104:	460b      	mov	r3, r1
 8013106:	687a      	ldr	r2, [r7, #4]
 8013108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801310a:	69f8      	ldr	r0, [r7, #28]
 801310c:	f001 fc84 	bl	8014a18 <ip4_output_if_src>
 8013110:	4603      	mov	r3, r0
 8013112:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013114:	69fa      	ldr	r2, [r7, #28]
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	429a      	cmp	r2, r3
 801311a:	d004      	beq.n	8013126 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801311c:	69f8      	ldr	r0, [r7, #28]
 801311e:	f7f9 fe97 	bl	800ce50 <pbuf_free>
    q = NULL;
 8013122:	2300      	movs	r3, #0
 8013124:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013126:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801312a:	4618      	mov	r0, r3
 801312c:	3720      	adds	r7, #32
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
 8013132:	bf00      	nop
 8013134:	08019240 	.word	0x08019240
 8013138:	0801942c 	.word	0x0801942c
 801313c:	08019294 	.word	0x08019294
 8013140:	0801944c 	.word	0x0801944c
 8013144:	0801946c 	.word	0x0801946c
 8013148:	08019490 	.word	0x08019490
 801314c:	080194b4 	.word	0x080194b4
 8013150:	080194d8 	.word	0x080194d8

08013154 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b086      	sub	sp, #24
 8013158:	af00      	add	r7, sp, #0
 801315a:	60f8      	str	r0, [r7, #12]
 801315c:	60b9      	str	r1, [r7, #8]
 801315e:	4613      	mov	r3, r2
 8013160:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	2b00      	cmp	r3, #0
 8013166:	d101      	bne.n	801316c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013168:	4b39      	ldr	r3, [pc, #228]	; (8013250 <udp_bind+0xfc>)
 801316a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d109      	bne.n	8013186 <udp_bind+0x32>
 8013172:	4b38      	ldr	r3, [pc, #224]	; (8013254 <udp_bind+0x100>)
 8013174:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013178:	4937      	ldr	r1, [pc, #220]	; (8013258 <udp_bind+0x104>)
 801317a:	4838      	ldr	r0, [pc, #224]	; (801325c <udp_bind+0x108>)
 801317c:	f003 f828 	bl	80161d0 <iprintf>
 8013180:	f06f 030f 	mvn.w	r3, #15
 8013184:	e060      	b.n	8013248 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013186:	2300      	movs	r3, #0
 8013188:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801318a:	4b35      	ldr	r3, [pc, #212]	; (8013260 <udp_bind+0x10c>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	617b      	str	r3, [r7, #20]
 8013190:	e009      	b.n	80131a6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013192:	68fa      	ldr	r2, [r7, #12]
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	429a      	cmp	r2, r3
 8013198:	d102      	bne.n	80131a0 <udp_bind+0x4c>
      rebind = 1;
 801319a:	2301      	movs	r3, #1
 801319c:	74fb      	strb	r3, [r7, #19]
      break;
 801319e:	e005      	b.n	80131ac <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131a0:	697b      	ldr	r3, [r7, #20]
 80131a2:	68db      	ldr	r3, [r3, #12]
 80131a4:	617b      	str	r3, [r7, #20]
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d1f2      	bne.n	8013192 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80131ac:	88fb      	ldrh	r3, [r7, #6]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d109      	bne.n	80131c6 <udp_bind+0x72>
    port = udp_new_port();
 80131b2:	f7ff fc35 	bl	8012a20 <udp_new_port>
 80131b6:	4603      	mov	r3, r0
 80131b8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80131ba:	88fb      	ldrh	r3, [r7, #6]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d12c      	bne.n	801321a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80131c0:	f06f 0307 	mvn.w	r3, #7
 80131c4:	e040      	b.n	8013248 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80131c6:	4b26      	ldr	r3, [pc, #152]	; (8013260 <udp_bind+0x10c>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	617b      	str	r3, [r7, #20]
 80131cc:	e022      	b.n	8013214 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80131ce:	68fa      	ldr	r2, [r7, #12]
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d01b      	beq.n	801320e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80131d6:	697b      	ldr	r3, [r7, #20]
 80131d8:	8a5b      	ldrh	r3, [r3, #18]
 80131da:	88fa      	ldrh	r2, [r7, #6]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d116      	bne.n	801320e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	681a      	ldr	r2, [r3, #0]
 80131e4:	68bb      	ldr	r3, [r7, #8]
 80131e6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80131e8:	429a      	cmp	r2, r3
 80131ea:	d00d      	beq.n	8013208 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80131ec:	68bb      	ldr	r3, [r7, #8]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d00a      	beq.n	8013208 <udp_bind+0xb4>
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d006      	beq.n	8013208 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80131fa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d003      	beq.n	8013208 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d102      	bne.n	801320e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013208:	f06f 0307 	mvn.w	r3, #7
 801320c:	e01c      	b.n	8013248 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	617b      	str	r3, [r7, #20]
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d1d9      	bne.n	80131ce <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d002      	beq.n	8013226 <udp_bind+0xd2>
 8013220:	68bb      	ldr	r3, [r7, #8]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	e000      	b.n	8013228 <udp_bind+0xd4>
 8013226:	2300      	movs	r3, #0
 8013228:	68fa      	ldr	r2, [r7, #12]
 801322a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	88fa      	ldrh	r2, [r7, #6]
 8013230:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013232:	7cfb      	ldrb	r3, [r7, #19]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d106      	bne.n	8013246 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013238:	4b09      	ldr	r3, [pc, #36]	; (8013260 <udp_bind+0x10c>)
 801323a:	681a      	ldr	r2, [r3, #0]
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013240:	4a07      	ldr	r2, [pc, #28]	; (8013260 <udp_bind+0x10c>)
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013246:	2300      	movs	r3, #0
}
 8013248:	4618      	mov	r0, r3
 801324a:	3718      	adds	r7, #24
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}
 8013250:	08019d88 	.word	0x08019d88
 8013254:	08019240 	.word	0x08019240
 8013258:	08019508 	.word	0x08019508
 801325c:	08019294 	.word	0x08019294
 8013260:	20008f7c 	.word	0x20008f7c

08013264 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b086      	sub	sp, #24
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	4613      	mov	r3, r2
 8013270:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d109      	bne.n	801328c <udp_connect+0x28>
 8013278:	4b2c      	ldr	r3, [pc, #176]	; (801332c <udp_connect+0xc8>)
 801327a:	f240 4235 	movw	r2, #1077	; 0x435
 801327e:	492c      	ldr	r1, [pc, #176]	; (8013330 <udp_connect+0xcc>)
 8013280:	482c      	ldr	r0, [pc, #176]	; (8013334 <udp_connect+0xd0>)
 8013282:	f002 ffa5 	bl	80161d0 <iprintf>
 8013286:	f06f 030f 	mvn.w	r3, #15
 801328a:	e04b      	b.n	8013324 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d109      	bne.n	80132a6 <udp_connect+0x42>
 8013292:	4b26      	ldr	r3, [pc, #152]	; (801332c <udp_connect+0xc8>)
 8013294:	f240 4236 	movw	r2, #1078	; 0x436
 8013298:	4927      	ldr	r1, [pc, #156]	; (8013338 <udp_connect+0xd4>)
 801329a:	4826      	ldr	r0, [pc, #152]	; (8013334 <udp_connect+0xd0>)
 801329c:	f002 ff98 	bl	80161d0 <iprintf>
 80132a0:	f06f 030f 	mvn.w	r3, #15
 80132a4:	e03e      	b.n	8013324 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	8a5b      	ldrh	r3, [r3, #18]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d10f      	bne.n	80132ce <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80132ae:	68f9      	ldr	r1, [r7, #12]
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	8a5b      	ldrh	r3, [r3, #18]
 80132b4:	461a      	mov	r2, r3
 80132b6:	68f8      	ldr	r0, [r7, #12]
 80132b8:	f7ff ff4c 	bl	8013154 <udp_bind>
 80132bc:	4603      	mov	r3, r0
 80132be:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80132c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d002      	beq.n	80132ce <udp_connect+0x6a>
      return err;
 80132c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80132cc:	e02a      	b.n	8013324 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d002      	beq.n	80132da <udp_connect+0x76>
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	e000      	b.n	80132dc <udp_connect+0x78>
 80132da:	2300      	movs	r3, #0
 80132dc:	68fa      	ldr	r2, [r7, #12]
 80132de:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	88fa      	ldrh	r2, [r7, #6]
 80132e4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	7c1b      	ldrb	r3, [r3, #16]
 80132ea:	f043 0304 	orr.w	r3, r3, #4
 80132ee:	b2da      	uxtb	r2, r3
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80132f4:	4b11      	ldr	r3, [pc, #68]	; (801333c <udp_connect+0xd8>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	617b      	str	r3, [r7, #20]
 80132fa:	e008      	b.n	801330e <udp_connect+0xaa>
    if (pcb == ipcb) {
 80132fc:	68fa      	ldr	r2, [r7, #12]
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	429a      	cmp	r2, r3
 8013302:	d101      	bne.n	8013308 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013304:	2300      	movs	r3, #0
 8013306:	e00d      	b.n	8013324 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013308:	697b      	ldr	r3, [r7, #20]
 801330a:	68db      	ldr	r3, [r3, #12]
 801330c:	617b      	str	r3, [r7, #20]
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d1f3      	bne.n	80132fc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013314:	4b09      	ldr	r3, [pc, #36]	; (801333c <udp_connect+0xd8>)
 8013316:	681a      	ldr	r2, [r3, #0]
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801331c:	4a07      	ldr	r2, [pc, #28]	; (801333c <udp_connect+0xd8>)
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013322:	2300      	movs	r3, #0
}
 8013324:	4618      	mov	r0, r3
 8013326:	3718      	adds	r7, #24
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}
 801332c:	08019240 	.word	0x08019240
 8013330:	08019520 	.word	0x08019520
 8013334:	08019294 	.word	0x08019294
 8013338:	0801953c 	.word	0x0801953c
 801333c:	20008f7c 	.word	0x20008f7c

08013340 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013340:	b580      	push	{r7, lr}
 8013342:	b084      	sub	sp, #16
 8013344:	af00      	add	r7, sp, #0
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d107      	bne.n	8013362 <udp_recv+0x22>
 8013352:	4b08      	ldr	r3, [pc, #32]	; (8013374 <udp_recv+0x34>)
 8013354:	f240 428a 	movw	r2, #1162	; 0x48a
 8013358:	4907      	ldr	r1, [pc, #28]	; (8013378 <udp_recv+0x38>)
 801335a:	4808      	ldr	r0, [pc, #32]	; (801337c <udp_recv+0x3c>)
 801335c:	f002 ff38 	bl	80161d0 <iprintf>
 8013360:	e005      	b.n	801336e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	68ba      	ldr	r2, [r7, #8]
 8013366:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	687a      	ldr	r2, [r7, #4]
 801336c:	61da      	str	r2, [r3, #28]
}
 801336e:	3710      	adds	r7, #16
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	08019240 	.word	0x08019240
 8013378:	08019574 	.word	0x08019574
 801337c:	08019294 	.word	0x08019294

08013380 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b084      	sub	sp, #16
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d107      	bne.n	801339e <udp_remove+0x1e>
 801338e:	4b19      	ldr	r3, [pc, #100]	; (80133f4 <udp_remove+0x74>)
 8013390:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8013394:	4918      	ldr	r1, [pc, #96]	; (80133f8 <udp_remove+0x78>)
 8013396:	4819      	ldr	r0, [pc, #100]	; (80133fc <udp_remove+0x7c>)
 8013398:	f002 ff1a 	bl	80161d0 <iprintf>
 801339c:	e026      	b.n	80133ec <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801339e:	4b18      	ldr	r3, [pc, #96]	; (8013400 <udp_remove+0x80>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	687a      	ldr	r2, [r7, #4]
 80133a4:	429a      	cmp	r2, r3
 80133a6:	d105      	bne.n	80133b4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80133a8:	4b15      	ldr	r3, [pc, #84]	; (8013400 <udp_remove+0x80>)
 80133aa:	681b      	ldr	r3, [r3, #0]
 80133ac:	68db      	ldr	r3, [r3, #12]
 80133ae:	4a14      	ldr	r2, [pc, #80]	; (8013400 <udp_remove+0x80>)
 80133b0:	6013      	str	r3, [r2, #0]
 80133b2:	e017      	b.n	80133e4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80133b4:	4b12      	ldr	r3, [pc, #72]	; (8013400 <udp_remove+0x80>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	60fb      	str	r3, [r7, #12]
 80133ba:	e010      	b.n	80133de <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	68db      	ldr	r3, [r3, #12]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d009      	beq.n	80133d8 <udp_remove+0x58>
 80133c4:	68fb      	ldr	r3, [r7, #12]
 80133c6:	68db      	ldr	r3, [r3, #12]
 80133c8:	687a      	ldr	r2, [r7, #4]
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d104      	bne.n	80133d8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	68da      	ldr	r2, [r3, #12]
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	60da      	str	r2, [r3, #12]
        break;
 80133d6:	e005      	b.n	80133e4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	68db      	ldr	r3, [r3, #12]
 80133dc:	60fb      	str	r3, [r7, #12]
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d1eb      	bne.n	80133bc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80133e4:	6879      	ldr	r1, [r7, #4]
 80133e6:	2000      	movs	r0, #0
 80133e8:	f7f8 febc 	bl	800c164 <memp_free>
}
 80133ec:	3710      	adds	r7, #16
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
 80133f2:	bf00      	nop
 80133f4:	08019240 	.word	0x08019240
 80133f8:	0801958c 	.word	0x0801958c
 80133fc:	08019294 	.word	0x08019294
 8013400:	20008f7c 	.word	0x20008f7c

08013404 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b082      	sub	sp, #8
 8013408:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801340a:	2000      	movs	r0, #0
 801340c:	f7f8 fe3a 	bl	800c084 <memp_malloc>
 8013410:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d007      	beq.n	8013428 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013418:	2220      	movs	r2, #32
 801341a:	2100      	movs	r1, #0
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f002 fecf 	bl	80161c0 <memset>
    pcb->ttl = UDP_TTL;
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	22ff      	movs	r2, #255	; 0xff
 8013426:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013428:	687b      	ldr	r3, [r7, #4]
}
 801342a:	4618      	mov	r0, r3
 801342c:	3708      	adds	r7, #8
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}
	...

08013434 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013434:	b480      	push	{r7}
 8013436:	b085      	sub	sp, #20
 8013438:	af00      	add	r7, sp, #0
 801343a:	6078      	str	r0, [r7, #4]
 801343c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d01e      	beq.n	8013482 <udp_netif_ip_addr_changed+0x4e>
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d01a      	beq.n	8013482 <udp_netif_ip_addr_changed+0x4e>
 801344c:	683b      	ldr	r3, [r7, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d017      	beq.n	8013482 <udp_netif_ip_addr_changed+0x4e>
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d013      	beq.n	8013482 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801345a:	4b0d      	ldr	r3, [pc, #52]	; (8013490 <udp_netif_ip_addr_changed+0x5c>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	60fb      	str	r3, [r7, #12]
 8013460:	e00c      	b.n	801347c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	681a      	ldr	r2, [r3, #0]
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	429a      	cmp	r2, r3
 801346c:	d103      	bne.n	8013476 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	681a      	ldr	r2, [r3, #0]
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	68db      	ldr	r3, [r3, #12]
 801347a:	60fb      	str	r3, [r7, #12]
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d1ef      	bne.n	8013462 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013482:	bf00      	nop
 8013484:	3714      	adds	r7, #20
 8013486:	46bd      	mov	sp, r7
 8013488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801348c:	4770      	bx	lr
 801348e:	bf00      	nop
 8013490:	20008f7c 	.word	0x20008f7c

08013494 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b082      	sub	sp, #8
 8013498:	af00      	add	r7, sp, #0
 801349a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801349c:	4915      	ldr	r1, [pc, #84]	; (80134f4 <etharp_free_entry+0x60>)
 801349e:	687a      	ldr	r2, [r7, #4]
 80134a0:	4613      	mov	r3, r2
 80134a2:	005b      	lsls	r3, r3, #1
 80134a4:	4413      	add	r3, r2
 80134a6:	00db      	lsls	r3, r3, #3
 80134a8:	440b      	add	r3, r1
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d013      	beq.n	80134d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80134b0:	4910      	ldr	r1, [pc, #64]	; (80134f4 <etharp_free_entry+0x60>)
 80134b2:	687a      	ldr	r2, [r7, #4]
 80134b4:	4613      	mov	r3, r2
 80134b6:	005b      	lsls	r3, r3, #1
 80134b8:	4413      	add	r3, r2
 80134ba:	00db      	lsls	r3, r3, #3
 80134bc:	440b      	add	r3, r1
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7f9 fcc5 	bl	800ce50 <pbuf_free>
    arp_table[i].q = NULL;
 80134c6:	490b      	ldr	r1, [pc, #44]	; (80134f4 <etharp_free_entry+0x60>)
 80134c8:	687a      	ldr	r2, [r7, #4]
 80134ca:	4613      	mov	r3, r2
 80134cc:	005b      	lsls	r3, r3, #1
 80134ce:	4413      	add	r3, r2
 80134d0:	00db      	lsls	r3, r3, #3
 80134d2:	440b      	add	r3, r1
 80134d4:	2200      	movs	r2, #0
 80134d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80134d8:	4906      	ldr	r1, [pc, #24]	; (80134f4 <etharp_free_entry+0x60>)
 80134da:	687a      	ldr	r2, [r7, #4]
 80134dc:	4613      	mov	r3, r2
 80134de:	005b      	lsls	r3, r3, #1
 80134e0:	4413      	add	r3, r2
 80134e2:	00db      	lsls	r3, r3, #3
 80134e4:	440b      	add	r3, r1
 80134e6:	3314      	adds	r3, #20
 80134e8:	2200      	movs	r2, #0
 80134ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80134ec:	bf00      	nop
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	20008f80 	.word	0x20008f80

080134f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b082      	sub	sp, #8
 80134fc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80134fe:	2300      	movs	r3, #0
 8013500:	607b      	str	r3, [r7, #4]
 8013502:	e096      	b.n	8013632 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013504:	494f      	ldr	r1, [pc, #316]	; (8013644 <etharp_tmr+0x14c>)
 8013506:	687a      	ldr	r2, [r7, #4]
 8013508:	4613      	mov	r3, r2
 801350a:	005b      	lsls	r3, r3, #1
 801350c:	4413      	add	r3, r2
 801350e:	00db      	lsls	r3, r3, #3
 8013510:	440b      	add	r3, r1
 8013512:	3314      	adds	r3, #20
 8013514:	781b      	ldrb	r3, [r3, #0]
 8013516:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013518:	78fb      	ldrb	r3, [r7, #3]
 801351a:	2b00      	cmp	r3, #0
 801351c:	f000 8086 	beq.w	801362c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013520:	4948      	ldr	r1, [pc, #288]	; (8013644 <etharp_tmr+0x14c>)
 8013522:	687a      	ldr	r2, [r7, #4]
 8013524:	4613      	mov	r3, r2
 8013526:	005b      	lsls	r3, r3, #1
 8013528:	4413      	add	r3, r2
 801352a:	00db      	lsls	r3, r3, #3
 801352c:	440b      	add	r3, r1
 801352e:	3312      	adds	r3, #18
 8013530:	881b      	ldrh	r3, [r3, #0]
 8013532:	3301      	adds	r3, #1
 8013534:	b298      	uxth	r0, r3
 8013536:	4943      	ldr	r1, [pc, #268]	; (8013644 <etharp_tmr+0x14c>)
 8013538:	687a      	ldr	r2, [r7, #4]
 801353a:	4613      	mov	r3, r2
 801353c:	005b      	lsls	r3, r3, #1
 801353e:	4413      	add	r3, r2
 8013540:	00db      	lsls	r3, r3, #3
 8013542:	440b      	add	r3, r1
 8013544:	3312      	adds	r3, #18
 8013546:	4602      	mov	r2, r0
 8013548:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801354a:	493e      	ldr	r1, [pc, #248]	; (8013644 <etharp_tmr+0x14c>)
 801354c:	687a      	ldr	r2, [r7, #4]
 801354e:	4613      	mov	r3, r2
 8013550:	005b      	lsls	r3, r3, #1
 8013552:	4413      	add	r3, r2
 8013554:	00db      	lsls	r3, r3, #3
 8013556:	440b      	add	r3, r1
 8013558:	3312      	adds	r3, #18
 801355a:	881b      	ldrh	r3, [r3, #0]
 801355c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013560:	d215      	bcs.n	801358e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013562:	4938      	ldr	r1, [pc, #224]	; (8013644 <etharp_tmr+0x14c>)
 8013564:	687a      	ldr	r2, [r7, #4]
 8013566:	4613      	mov	r3, r2
 8013568:	005b      	lsls	r3, r3, #1
 801356a:	4413      	add	r3, r2
 801356c:	00db      	lsls	r3, r3, #3
 801356e:	440b      	add	r3, r1
 8013570:	3314      	adds	r3, #20
 8013572:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013574:	2b01      	cmp	r3, #1
 8013576:	d10e      	bne.n	8013596 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013578:	4932      	ldr	r1, [pc, #200]	; (8013644 <etharp_tmr+0x14c>)
 801357a:	687a      	ldr	r2, [r7, #4]
 801357c:	4613      	mov	r3, r2
 801357e:	005b      	lsls	r3, r3, #1
 8013580:	4413      	add	r3, r2
 8013582:	00db      	lsls	r3, r3, #3
 8013584:	440b      	add	r3, r1
 8013586:	3312      	adds	r3, #18
 8013588:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801358a:	2b04      	cmp	r3, #4
 801358c:	d903      	bls.n	8013596 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801358e:	6878      	ldr	r0, [r7, #4]
 8013590:	f7ff ff80 	bl	8013494 <etharp_free_entry>
 8013594:	e04a      	b.n	801362c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013596:	492b      	ldr	r1, [pc, #172]	; (8013644 <etharp_tmr+0x14c>)
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	4613      	mov	r3, r2
 801359c:	005b      	lsls	r3, r3, #1
 801359e:	4413      	add	r3, r2
 80135a0:	00db      	lsls	r3, r3, #3
 80135a2:	440b      	add	r3, r1
 80135a4:	3314      	adds	r3, #20
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	2b03      	cmp	r3, #3
 80135aa:	d10a      	bne.n	80135c2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80135ac:	4925      	ldr	r1, [pc, #148]	; (8013644 <etharp_tmr+0x14c>)
 80135ae:	687a      	ldr	r2, [r7, #4]
 80135b0:	4613      	mov	r3, r2
 80135b2:	005b      	lsls	r3, r3, #1
 80135b4:	4413      	add	r3, r2
 80135b6:	00db      	lsls	r3, r3, #3
 80135b8:	440b      	add	r3, r1
 80135ba:	3314      	adds	r3, #20
 80135bc:	2204      	movs	r2, #4
 80135be:	701a      	strb	r2, [r3, #0]
 80135c0:	e034      	b.n	801362c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80135c2:	4920      	ldr	r1, [pc, #128]	; (8013644 <etharp_tmr+0x14c>)
 80135c4:	687a      	ldr	r2, [r7, #4]
 80135c6:	4613      	mov	r3, r2
 80135c8:	005b      	lsls	r3, r3, #1
 80135ca:	4413      	add	r3, r2
 80135cc:	00db      	lsls	r3, r3, #3
 80135ce:	440b      	add	r3, r1
 80135d0:	3314      	adds	r3, #20
 80135d2:	781b      	ldrb	r3, [r3, #0]
 80135d4:	2b04      	cmp	r3, #4
 80135d6:	d10a      	bne.n	80135ee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80135d8:	491a      	ldr	r1, [pc, #104]	; (8013644 <etharp_tmr+0x14c>)
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	4613      	mov	r3, r2
 80135de:	005b      	lsls	r3, r3, #1
 80135e0:	4413      	add	r3, r2
 80135e2:	00db      	lsls	r3, r3, #3
 80135e4:	440b      	add	r3, r1
 80135e6:	3314      	adds	r3, #20
 80135e8:	2202      	movs	r2, #2
 80135ea:	701a      	strb	r2, [r3, #0]
 80135ec:	e01e      	b.n	801362c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80135ee:	4915      	ldr	r1, [pc, #84]	; (8013644 <etharp_tmr+0x14c>)
 80135f0:	687a      	ldr	r2, [r7, #4]
 80135f2:	4613      	mov	r3, r2
 80135f4:	005b      	lsls	r3, r3, #1
 80135f6:	4413      	add	r3, r2
 80135f8:	00db      	lsls	r3, r3, #3
 80135fa:	440b      	add	r3, r1
 80135fc:	3314      	adds	r3, #20
 80135fe:	781b      	ldrb	r3, [r3, #0]
 8013600:	2b01      	cmp	r3, #1
 8013602:	d113      	bne.n	801362c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013604:	490f      	ldr	r1, [pc, #60]	; (8013644 <etharp_tmr+0x14c>)
 8013606:	687a      	ldr	r2, [r7, #4]
 8013608:	4613      	mov	r3, r2
 801360a:	005b      	lsls	r3, r3, #1
 801360c:	4413      	add	r3, r2
 801360e:	00db      	lsls	r3, r3, #3
 8013610:	440b      	add	r3, r1
 8013612:	3308      	adds	r3, #8
 8013614:	6818      	ldr	r0, [r3, #0]
 8013616:	687a      	ldr	r2, [r7, #4]
 8013618:	4613      	mov	r3, r2
 801361a:	005b      	lsls	r3, r3, #1
 801361c:	4413      	add	r3, r2
 801361e:	00db      	lsls	r3, r3, #3
 8013620:	4a08      	ldr	r2, [pc, #32]	; (8013644 <etharp_tmr+0x14c>)
 8013622:	4413      	add	r3, r2
 8013624:	3304      	adds	r3, #4
 8013626:	4619      	mov	r1, r3
 8013628:	f000 fe6e 	bl	8014308 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	3301      	adds	r3, #1
 8013630:	607b      	str	r3, [r7, #4]
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	2b09      	cmp	r3, #9
 8013636:	f77f af65 	ble.w	8013504 <etharp_tmr+0xc>
      }
    }
  }
}
 801363a:	bf00      	nop
 801363c:	bf00      	nop
 801363e:	3708      	adds	r7, #8
 8013640:	46bd      	mov	sp, r7
 8013642:	bd80      	pop	{r7, pc}
 8013644:	20008f80 	.word	0x20008f80

08013648 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b08a      	sub	sp, #40	; 0x28
 801364c:	af00      	add	r7, sp, #0
 801364e:	60f8      	str	r0, [r7, #12]
 8013650:	460b      	mov	r3, r1
 8013652:	607a      	str	r2, [r7, #4]
 8013654:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013656:	230a      	movs	r3, #10
 8013658:	84fb      	strh	r3, [r7, #38]	; 0x26
 801365a:	230a      	movs	r3, #10
 801365c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801365e:	230a      	movs	r3, #10
 8013660:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013662:	2300      	movs	r3, #0
 8013664:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013666:	230a      	movs	r3, #10
 8013668:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801366a:	2300      	movs	r3, #0
 801366c:	83bb      	strh	r3, [r7, #28]
 801366e:	2300      	movs	r3, #0
 8013670:	837b      	strh	r3, [r7, #26]
 8013672:	2300      	movs	r3, #0
 8013674:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013676:	2300      	movs	r3, #0
 8013678:	843b      	strh	r3, [r7, #32]
 801367a:	e0ae      	b.n	80137da <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801367c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013680:	49a6      	ldr	r1, [pc, #664]	; (801391c <etharp_find_entry+0x2d4>)
 8013682:	4613      	mov	r3, r2
 8013684:	005b      	lsls	r3, r3, #1
 8013686:	4413      	add	r3, r2
 8013688:	00db      	lsls	r3, r3, #3
 801368a:	440b      	add	r3, r1
 801368c:	3314      	adds	r3, #20
 801368e:	781b      	ldrb	r3, [r3, #0]
 8013690:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013692:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013696:	2b0a      	cmp	r3, #10
 8013698:	d105      	bne.n	80136a6 <etharp_find_entry+0x5e>
 801369a:	7dfb      	ldrb	r3, [r7, #23]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d102      	bne.n	80136a6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80136a0:	8c3b      	ldrh	r3, [r7, #32]
 80136a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80136a4:	e095      	b.n	80137d2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80136a6:	7dfb      	ldrb	r3, [r7, #23]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	f000 8092 	beq.w	80137d2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80136ae:	7dfb      	ldrb	r3, [r7, #23]
 80136b0:	2b01      	cmp	r3, #1
 80136b2:	d009      	beq.n	80136c8 <etharp_find_entry+0x80>
 80136b4:	7dfb      	ldrb	r3, [r7, #23]
 80136b6:	2b01      	cmp	r3, #1
 80136b8:	d806      	bhi.n	80136c8 <etharp_find_entry+0x80>
 80136ba:	4b99      	ldr	r3, [pc, #612]	; (8013920 <etharp_find_entry+0x2d8>)
 80136bc:	f240 1223 	movw	r2, #291	; 0x123
 80136c0:	4998      	ldr	r1, [pc, #608]	; (8013924 <etharp_find_entry+0x2dc>)
 80136c2:	4899      	ldr	r0, [pc, #612]	; (8013928 <etharp_find_entry+0x2e0>)
 80136c4:	f002 fd84 	bl	80161d0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d020      	beq.n	8013710 <etharp_find_entry+0xc8>
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	6819      	ldr	r1, [r3, #0]
 80136d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136d6:	4891      	ldr	r0, [pc, #580]	; (801391c <etharp_find_entry+0x2d4>)
 80136d8:	4613      	mov	r3, r2
 80136da:	005b      	lsls	r3, r3, #1
 80136dc:	4413      	add	r3, r2
 80136de:	00db      	lsls	r3, r3, #3
 80136e0:	4403      	add	r3, r0
 80136e2:	3304      	adds	r3, #4
 80136e4:	681b      	ldr	r3, [r3, #0]
 80136e6:	4299      	cmp	r1, r3
 80136e8:	d112      	bne.n	8013710 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d00c      	beq.n	801370a <etharp_find_entry+0xc2>
 80136f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80136f4:	4989      	ldr	r1, [pc, #548]	; (801391c <etharp_find_entry+0x2d4>)
 80136f6:	4613      	mov	r3, r2
 80136f8:	005b      	lsls	r3, r3, #1
 80136fa:	4413      	add	r3, r2
 80136fc:	00db      	lsls	r3, r3, #3
 80136fe:	440b      	add	r3, r1
 8013700:	3308      	adds	r3, #8
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	429a      	cmp	r2, r3
 8013708:	d102      	bne.n	8013710 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801370a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801370e:	e100      	b.n	8013912 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013710:	7dfb      	ldrb	r3, [r7, #23]
 8013712:	2b01      	cmp	r3, #1
 8013714:	d140      	bne.n	8013798 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013716:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801371a:	4980      	ldr	r1, [pc, #512]	; (801391c <etharp_find_entry+0x2d4>)
 801371c:	4613      	mov	r3, r2
 801371e:	005b      	lsls	r3, r3, #1
 8013720:	4413      	add	r3, r2
 8013722:	00db      	lsls	r3, r3, #3
 8013724:	440b      	add	r3, r1
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d01a      	beq.n	8013762 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801372c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013730:	497a      	ldr	r1, [pc, #488]	; (801391c <etharp_find_entry+0x2d4>)
 8013732:	4613      	mov	r3, r2
 8013734:	005b      	lsls	r3, r3, #1
 8013736:	4413      	add	r3, r2
 8013738:	00db      	lsls	r3, r3, #3
 801373a:	440b      	add	r3, r1
 801373c:	3312      	adds	r3, #18
 801373e:	881b      	ldrh	r3, [r3, #0]
 8013740:	8bba      	ldrh	r2, [r7, #28]
 8013742:	429a      	cmp	r2, r3
 8013744:	d845      	bhi.n	80137d2 <etharp_find_entry+0x18a>
            old_queue = i;
 8013746:	8c3b      	ldrh	r3, [r7, #32]
 8013748:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801374a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801374e:	4973      	ldr	r1, [pc, #460]	; (801391c <etharp_find_entry+0x2d4>)
 8013750:	4613      	mov	r3, r2
 8013752:	005b      	lsls	r3, r3, #1
 8013754:	4413      	add	r3, r2
 8013756:	00db      	lsls	r3, r3, #3
 8013758:	440b      	add	r3, r1
 801375a:	3312      	adds	r3, #18
 801375c:	881b      	ldrh	r3, [r3, #0]
 801375e:	83bb      	strh	r3, [r7, #28]
 8013760:	e037      	b.n	80137d2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013762:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013766:	496d      	ldr	r1, [pc, #436]	; (801391c <etharp_find_entry+0x2d4>)
 8013768:	4613      	mov	r3, r2
 801376a:	005b      	lsls	r3, r3, #1
 801376c:	4413      	add	r3, r2
 801376e:	00db      	lsls	r3, r3, #3
 8013770:	440b      	add	r3, r1
 8013772:	3312      	adds	r3, #18
 8013774:	881b      	ldrh	r3, [r3, #0]
 8013776:	8b7a      	ldrh	r2, [r7, #26]
 8013778:	429a      	cmp	r2, r3
 801377a:	d82a      	bhi.n	80137d2 <etharp_find_entry+0x18a>
            old_pending = i;
 801377c:	8c3b      	ldrh	r3, [r7, #32]
 801377e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013780:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013784:	4965      	ldr	r1, [pc, #404]	; (801391c <etharp_find_entry+0x2d4>)
 8013786:	4613      	mov	r3, r2
 8013788:	005b      	lsls	r3, r3, #1
 801378a:	4413      	add	r3, r2
 801378c:	00db      	lsls	r3, r3, #3
 801378e:	440b      	add	r3, r1
 8013790:	3312      	adds	r3, #18
 8013792:	881b      	ldrh	r3, [r3, #0]
 8013794:	837b      	strh	r3, [r7, #26]
 8013796:	e01c      	b.n	80137d2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013798:	7dfb      	ldrb	r3, [r7, #23]
 801379a:	2b01      	cmp	r3, #1
 801379c:	d919      	bls.n	80137d2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801379e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137a2:	495e      	ldr	r1, [pc, #376]	; (801391c <etharp_find_entry+0x2d4>)
 80137a4:	4613      	mov	r3, r2
 80137a6:	005b      	lsls	r3, r3, #1
 80137a8:	4413      	add	r3, r2
 80137aa:	00db      	lsls	r3, r3, #3
 80137ac:	440b      	add	r3, r1
 80137ae:	3312      	adds	r3, #18
 80137b0:	881b      	ldrh	r3, [r3, #0]
 80137b2:	8b3a      	ldrh	r2, [r7, #24]
 80137b4:	429a      	cmp	r2, r3
 80137b6:	d80c      	bhi.n	80137d2 <etharp_find_entry+0x18a>
            old_stable = i;
 80137b8:	8c3b      	ldrh	r3, [r7, #32]
 80137ba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80137bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137c0:	4956      	ldr	r1, [pc, #344]	; (801391c <etharp_find_entry+0x2d4>)
 80137c2:	4613      	mov	r3, r2
 80137c4:	005b      	lsls	r3, r3, #1
 80137c6:	4413      	add	r3, r2
 80137c8:	00db      	lsls	r3, r3, #3
 80137ca:	440b      	add	r3, r1
 80137cc:	3312      	adds	r3, #18
 80137ce:	881b      	ldrh	r3, [r3, #0]
 80137d0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80137d2:	8c3b      	ldrh	r3, [r7, #32]
 80137d4:	3301      	adds	r3, #1
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	843b      	strh	r3, [r7, #32]
 80137da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80137de:	2b09      	cmp	r3, #9
 80137e0:	f77f af4c 	ble.w	801367c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80137e4:	7afb      	ldrb	r3, [r7, #11]
 80137e6:	f003 0302 	and.w	r3, r3, #2
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d108      	bne.n	8013800 <etharp_find_entry+0x1b8>
 80137ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80137f2:	2b0a      	cmp	r3, #10
 80137f4:	d107      	bne.n	8013806 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80137f6:	7afb      	ldrb	r3, [r7, #11]
 80137f8:	f003 0301 	and.w	r3, r3, #1
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d102      	bne.n	8013806 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013804:	e085      	b.n	8013912 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013806:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801380a:	2b09      	cmp	r3, #9
 801380c:	dc02      	bgt.n	8013814 <etharp_find_entry+0x1cc>
    i = empty;
 801380e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013810:	843b      	strh	r3, [r7, #32]
 8013812:	e039      	b.n	8013888 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013814:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013818:	2b09      	cmp	r3, #9
 801381a:	dc14      	bgt.n	8013846 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801381c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801381e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013820:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013824:	493d      	ldr	r1, [pc, #244]	; (801391c <etharp_find_entry+0x2d4>)
 8013826:	4613      	mov	r3, r2
 8013828:	005b      	lsls	r3, r3, #1
 801382a:	4413      	add	r3, r2
 801382c:	00db      	lsls	r3, r3, #3
 801382e:	440b      	add	r3, r1
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d018      	beq.n	8013868 <etharp_find_entry+0x220>
 8013836:	4b3a      	ldr	r3, [pc, #232]	; (8013920 <etharp_find_entry+0x2d8>)
 8013838:	f240 126d 	movw	r2, #365	; 0x16d
 801383c:	493b      	ldr	r1, [pc, #236]	; (801392c <etharp_find_entry+0x2e4>)
 801383e:	483a      	ldr	r0, [pc, #232]	; (8013928 <etharp_find_entry+0x2e0>)
 8013840:	f002 fcc6 	bl	80161d0 <iprintf>
 8013844:	e010      	b.n	8013868 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013846:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801384a:	2b09      	cmp	r3, #9
 801384c:	dc02      	bgt.n	8013854 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801384e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013850:	843b      	strh	r3, [r7, #32]
 8013852:	e009      	b.n	8013868 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013854:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013858:	2b09      	cmp	r3, #9
 801385a:	dc02      	bgt.n	8013862 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801385c:	8bfb      	ldrh	r3, [r7, #30]
 801385e:	843b      	strh	r3, [r7, #32]
 8013860:	e002      	b.n	8013868 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013866:	e054      	b.n	8013912 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013868:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801386c:	2b09      	cmp	r3, #9
 801386e:	dd06      	ble.n	801387e <etharp_find_entry+0x236>
 8013870:	4b2b      	ldr	r3, [pc, #172]	; (8013920 <etharp_find_entry+0x2d8>)
 8013872:	f240 127f 	movw	r2, #383	; 0x17f
 8013876:	492e      	ldr	r1, [pc, #184]	; (8013930 <etharp_find_entry+0x2e8>)
 8013878:	482b      	ldr	r0, [pc, #172]	; (8013928 <etharp_find_entry+0x2e0>)
 801387a:	f002 fca9 	bl	80161d0 <iprintf>
    etharp_free_entry(i);
 801387e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013882:	4618      	mov	r0, r3
 8013884:	f7ff fe06 	bl	8013494 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013888:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801388c:	2b09      	cmp	r3, #9
 801388e:	dd06      	ble.n	801389e <etharp_find_entry+0x256>
 8013890:	4b23      	ldr	r3, [pc, #140]	; (8013920 <etharp_find_entry+0x2d8>)
 8013892:	f240 1283 	movw	r2, #387	; 0x183
 8013896:	4926      	ldr	r1, [pc, #152]	; (8013930 <etharp_find_entry+0x2e8>)
 8013898:	4823      	ldr	r0, [pc, #140]	; (8013928 <etharp_find_entry+0x2e0>)
 801389a:	f002 fc99 	bl	80161d0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801389e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138a2:	491e      	ldr	r1, [pc, #120]	; (801391c <etharp_find_entry+0x2d4>)
 80138a4:	4613      	mov	r3, r2
 80138a6:	005b      	lsls	r3, r3, #1
 80138a8:	4413      	add	r3, r2
 80138aa:	00db      	lsls	r3, r3, #3
 80138ac:	440b      	add	r3, r1
 80138ae:	3314      	adds	r3, #20
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d006      	beq.n	80138c4 <etharp_find_entry+0x27c>
 80138b6:	4b1a      	ldr	r3, [pc, #104]	; (8013920 <etharp_find_entry+0x2d8>)
 80138b8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80138bc:	491d      	ldr	r1, [pc, #116]	; (8013934 <etharp_find_entry+0x2ec>)
 80138be:	481a      	ldr	r0, [pc, #104]	; (8013928 <etharp_find_entry+0x2e0>)
 80138c0:	f002 fc86 	bl	80161d0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d00b      	beq.n	80138e2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80138ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	6819      	ldr	r1, [r3, #0]
 80138d2:	4812      	ldr	r0, [pc, #72]	; (801391c <etharp_find_entry+0x2d4>)
 80138d4:	4613      	mov	r3, r2
 80138d6:	005b      	lsls	r3, r3, #1
 80138d8:	4413      	add	r3, r2
 80138da:	00db      	lsls	r3, r3, #3
 80138dc:	4403      	add	r3, r0
 80138de:	3304      	adds	r3, #4
 80138e0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80138e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138e6:	490d      	ldr	r1, [pc, #52]	; (801391c <etharp_find_entry+0x2d4>)
 80138e8:	4613      	mov	r3, r2
 80138ea:	005b      	lsls	r3, r3, #1
 80138ec:	4413      	add	r3, r2
 80138ee:	00db      	lsls	r3, r3, #3
 80138f0:	440b      	add	r3, r1
 80138f2:	3312      	adds	r3, #18
 80138f4:	2200      	movs	r2, #0
 80138f6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80138f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138fc:	4907      	ldr	r1, [pc, #28]	; (801391c <etharp_find_entry+0x2d4>)
 80138fe:	4613      	mov	r3, r2
 8013900:	005b      	lsls	r3, r3, #1
 8013902:	4413      	add	r3, r2
 8013904:	00db      	lsls	r3, r3, #3
 8013906:	440b      	add	r3, r1
 8013908:	3308      	adds	r3, #8
 801390a:	687a      	ldr	r2, [r7, #4]
 801390c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801390e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013912:	4618      	mov	r0, r3
 8013914:	3728      	adds	r7, #40	; 0x28
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}
 801391a:	bf00      	nop
 801391c:	20008f80 	.word	0x20008f80
 8013920:	080195a4 	.word	0x080195a4
 8013924:	080195dc 	.word	0x080195dc
 8013928:	0801961c 	.word	0x0801961c
 801392c:	08019644 	.word	0x08019644
 8013930:	0801965c 	.word	0x0801965c
 8013934:	08019670 	.word	0x08019670

08013938 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013938:	b580      	push	{r7, lr}
 801393a:	b088      	sub	sp, #32
 801393c:	af02      	add	r7, sp, #8
 801393e:	60f8      	str	r0, [r7, #12]
 8013940:	60b9      	str	r1, [r7, #8]
 8013942:	607a      	str	r2, [r7, #4]
 8013944:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801394c:	2b06      	cmp	r3, #6
 801394e:	d006      	beq.n	801395e <etharp_update_arp_entry+0x26>
 8013950:	4b48      	ldr	r3, [pc, #288]	; (8013a74 <etharp_update_arp_entry+0x13c>)
 8013952:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013956:	4948      	ldr	r1, [pc, #288]	; (8013a78 <etharp_update_arp_entry+0x140>)
 8013958:	4848      	ldr	r0, [pc, #288]	; (8013a7c <etharp_update_arp_entry+0x144>)
 801395a:	f002 fc39 	bl	80161d0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d012      	beq.n	801398a <etharp_update_arp_entry+0x52>
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d00e      	beq.n	801398a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	68f9      	ldr	r1, [r7, #12]
 8013972:	4618      	mov	r0, r3
 8013974:	f001 f8fe 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 8013978:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801397a:	2b00      	cmp	r3, #0
 801397c:	d105      	bne.n	801398a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013986:	2be0      	cmp	r3, #224	; 0xe0
 8013988:	d102      	bne.n	8013990 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801398a:	f06f 030f 	mvn.w	r3, #15
 801398e:	e06c      	b.n	8013a6a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013990:	78fb      	ldrb	r3, [r7, #3]
 8013992:	68fa      	ldr	r2, [r7, #12]
 8013994:	4619      	mov	r1, r3
 8013996:	68b8      	ldr	r0, [r7, #8]
 8013998:	f7ff fe56 	bl	8013648 <etharp_find_entry>
 801399c:	4603      	mov	r3, r0
 801399e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80139a0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	da02      	bge.n	80139ae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80139a8:	8afb      	ldrh	r3, [r7, #22]
 80139aa:	b25b      	sxtb	r3, r3
 80139ac:	e05d      	b.n	8013a6a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80139ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139b2:	4933      	ldr	r1, [pc, #204]	; (8013a80 <etharp_update_arp_entry+0x148>)
 80139b4:	4613      	mov	r3, r2
 80139b6:	005b      	lsls	r3, r3, #1
 80139b8:	4413      	add	r3, r2
 80139ba:	00db      	lsls	r3, r3, #3
 80139bc:	440b      	add	r3, r1
 80139be:	3314      	adds	r3, #20
 80139c0:	2202      	movs	r2, #2
 80139c2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80139c4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139c8:	492d      	ldr	r1, [pc, #180]	; (8013a80 <etharp_update_arp_entry+0x148>)
 80139ca:	4613      	mov	r3, r2
 80139cc:	005b      	lsls	r3, r3, #1
 80139ce:	4413      	add	r3, r2
 80139d0:	00db      	lsls	r3, r3, #3
 80139d2:	440b      	add	r3, r1
 80139d4:	3308      	adds	r3, #8
 80139d6:	68fa      	ldr	r2, [r7, #12]
 80139d8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80139da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139de:	4613      	mov	r3, r2
 80139e0:	005b      	lsls	r3, r3, #1
 80139e2:	4413      	add	r3, r2
 80139e4:	00db      	lsls	r3, r3, #3
 80139e6:	3308      	adds	r3, #8
 80139e8:	4a25      	ldr	r2, [pc, #148]	; (8013a80 <etharp_update_arp_entry+0x148>)
 80139ea:	4413      	add	r3, r2
 80139ec:	3304      	adds	r3, #4
 80139ee:	2206      	movs	r2, #6
 80139f0:	6879      	ldr	r1, [r7, #4]
 80139f2:	4618      	mov	r0, r3
 80139f4:	f002 fbd6 	bl	80161a4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80139f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80139fc:	4920      	ldr	r1, [pc, #128]	; (8013a80 <etharp_update_arp_entry+0x148>)
 80139fe:	4613      	mov	r3, r2
 8013a00:	005b      	lsls	r3, r3, #1
 8013a02:	4413      	add	r3, r2
 8013a04:	00db      	lsls	r3, r3, #3
 8013a06:	440b      	add	r3, r1
 8013a08:	3312      	adds	r3, #18
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013a0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a12:	491b      	ldr	r1, [pc, #108]	; (8013a80 <etharp_update_arp_entry+0x148>)
 8013a14:	4613      	mov	r3, r2
 8013a16:	005b      	lsls	r3, r3, #1
 8013a18:	4413      	add	r3, r2
 8013a1a:	00db      	lsls	r3, r3, #3
 8013a1c:	440b      	add	r3, r1
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d021      	beq.n	8013a68 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013a24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a28:	4915      	ldr	r1, [pc, #84]	; (8013a80 <etharp_update_arp_entry+0x148>)
 8013a2a:	4613      	mov	r3, r2
 8013a2c:	005b      	lsls	r3, r3, #1
 8013a2e:	4413      	add	r3, r2
 8013a30:	00db      	lsls	r3, r3, #3
 8013a32:	440b      	add	r3, r1
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013a38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013a3c:	4910      	ldr	r1, [pc, #64]	; (8013a80 <etharp_update_arp_entry+0x148>)
 8013a3e:	4613      	mov	r3, r2
 8013a40:	005b      	lsls	r3, r3, #1
 8013a42:	4413      	add	r3, r2
 8013a44:	00db      	lsls	r3, r3, #3
 8013a46:	440b      	add	r3, r1
 8013a48:	2200      	movs	r2, #0
 8013a4a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013a52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013a56:	9300      	str	r3, [sp, #0]
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	6939      	ldr	r1, [r7, #16]
 8013a5c:	68f8      	ldr	r0, [r7, #12]
 8013a5e:	f001 ff97 	bl	8015990 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013a62:	6938      	ldr	r0, [r7, #16]
 8013a64:	f7f9 f9f4 	bl	800ce50 <pbuf_free>
  }
  return ERR_OK;
 8013a68:	2300      	movs	r3, #0
}
 8013a6a:	4618      	mov	r0, r3
 8013a6c:	3718      	adds	r7, #24
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bd80      	pop	{r7, pc}
 8013a72:	bf00      	nop
 8013a74:	080195a4 	.word	0x080195a4
 8013a78:	0801969c 	.word	0x0801969c
 8013a7c:	0801961c 	.word	0x0801961c
 8013a80:	20008f80 	.word	0x20008f80

08013a84 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b084      	sub	sp, #16
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	60fb      	str	r3, [r7, #12]
 8013a90:	e01e      	b.n	8013ad0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013a92:	4913      	ldr	r1, [pc, #76]	; (8013ae0 <etharp_cleanup_netif+0x5c>)
 8013a94:	68fa      	ldr	r2, [r7, #12]
 8013a96:	4613      	mov	r3, r2
 8013a98:	005b      	lsls	r3, r3, #1
 8013a9a:	4413      	add	r3, r2
 8013a9c:	00db      	lsls	r3, r3, #3
 8013a9e:	440b      	add	r3, r1
 8013aa0:	3314      	adds	r3, #20
 8013aa2:	781b      	ldrb	r3, [r3, #0]
 8013aa4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013aa6:	7afb      	ldrb	r3, [r7, #11]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d00e      	beq.n	8013aca <etharp_cleanup_netif+0x46>
 8013aac:	490c      	ldr	r1, [pc, #48]	; (8013ae0 <etharp_cleanup_netif+0x5c>)
 8013aae:	68fa      	ldr	r2, [r7, #12]
 8013ab0:	4613      	mov	r3, r2
 8013ab2:	005b      	lsls	r3, r3, #1
 8013ab4:	4413      	add	r3, r2
 8013ab6:	00db      	lsls	r3, r3, #3
 8013ab8:	440b      	add	r3, r1
 8013aba:	3308      	adds	r3, #8
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	687a      	ldr	r2, [r7, #4]
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	d102      	bne.n	8013aca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013ac4:	68f8      	ldr	r0, [r7, #12]
 8013ac6:	f7ff fce5 	bl	8013494 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	3301      	adds	r3, #1
 8013ace:	60fb      	str	r3, [r7, #12]
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2b09      	cmp	r3, #9
 8013ad4:	dddd      	ble.n	8013a92 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013ad6:	bf00      	nop
 8013ad8:	bf00      	nop
 8013ada:	3710      	adds	r7, #16
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}
 8013ae0:	20008f80 	.word	0x20008f80

08013ae4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013ae4:	b5b0      	push	{r4, r5, r7, lr}
 8013ae6:	b08a      	sub	sp, #40	; 0x28
 8013ae8:	af04      	add	r7, sp, #16
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013aee:	683b      	ldr	r3, [r7, #0]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d107      	bne.n	8013b04 <etharp_input+0x20>
 8013af4:	4b3d      	ldr	r3, [pc, #244]	; (8013bec <etharp_input+0x108>)
 8013af6:	f240 228a 	movw	r2, #650	; 0x28a
 8013afa:	493d      	ldr	r1, [pc, #244]	; (8013bf0 <etharp_input+0x10c>)
 8013afc:	483d      	ldr	r0, [pc, #244]	; (8013bf4 <etharp_input+0x110>)
 8013afe:	f002 fb67 	bl	80161d0 <iprintf>
 8013b02:	e06f      	b.n	8013be4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	685b      	ldr	r3, [r3, #4]
 8013b08:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013b0a:	693b      	ldr	r3, [r7, #16]
 8013b0c:	881b      	ldrh	r3, [r3, #0]
 8013b0e:	b29b      	uxth	r3, r3
 8013b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b14:	d10c      	bne.n	8013b30 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013b1a:	2b06      	cmp	r3, #6
 8013b1c:	d108      	bne.n	8013b30 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013b1e:	693b      	ldr	r3, [r7, #16]
 8013b20:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013b22:	2b04      	cmp	r3, #4
 8013b24:	d104      	bne.n	8013b30 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	885b      	ldrh	r3, [r3, #2]
 8013b2a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013b2c:	2b08      	cmp	r3, #8
 8013b2e:	d003      	beq.n	8013b38 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f7f9 f98d 	bl	800ce50 <pbuf_free>
    return;
 8013b36:	e055      	b.n	8013be4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013b38:	693b      	ldr	r3, [r7, #16]
 8013b3a:	330e      	adds	r3, #14
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013b40:	693b      	ldr	r3, [r7, #16]
 8013b42:	3318      	adds	r3, #24
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013b48:	683b      	ldr	r3, [r7, #0]
 8013b4a:	3304      	adds	r3, #4
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d102      	bne.n	8013b58 <etharp_input+0x74>
    for_us = 0;
 8013b52:	2300      	movs	r3, #0
 8013b54:	75fb      	strb	r3, [r7, #23]
 8013b56:	e009      	b.n	8013b6c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013b58:	68ba      	ldr	r2, [r7, #8]
 8013b5a:	683b      	ldr	r3, [r7, #0]
 8013b5c:	3304      	adds	r3, #4
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	429a      	cmp	r2, r3
 8013b62:	bf0c      	ite	eq
 8013b64:	2301      	moveq	r3, #1
 8013b66:	2300      	movne	r3, #0
 8013b68:	b2db      	uxtb	r3, r3
 8013b6a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013b6c:	693b      	ldr	r3, [r7, #16]
 8013b6e:	f103 0208 	add.w	r2, r3, #8
 8013b72:	7dfb      	ldrb	r3, [r7, #23]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d001      	beq.n	8013b7c <etharp_input+0x98>
 8013b78:	2301      	movs	r3, #1
 8013b7a:	e000      	b.n	8013b7e <etharp_input+0x9a>
 8013b7c:	2302      	movs	r3, #2
 8013b7e:	f107 010c 	add.w	r1, r7, #12
 8013b82:	6838      	ldr	r0, [r7, #0]
 8013b84:	f7ff fed8 	bl	8013938 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013b88:	693b      	ldr	r3, [r7, #16]
 8013b8a:	88db      	ldrh	r3, [r3, #6]
 8013b8c:	b29b      	uxth	r3, r3
 8013b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b92:	d003      	beq.n	8013b9c <etharp_input+0xb8>
 8013b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b98:	d01e      	beq.n	8013bd8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013b9a:	e020      	b.n	8013bde <etharp_input+0xfa>
      if (for_us) {
 8013b9c:	7dfb      	ldrb	r3, [r7, #23]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d01c      	beq.n	8013bdc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013ba2:	683b      	ldr	r3, [r7, #0]
 8013ba4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013bb8:	693a      	ldr	r2, [r7, #16]
 8013bba:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013bbc:	2102      	movs	r1, #2
 8013bbe:	9103      	str	r1, [sp, #12]
 8013bc0:	f107 010c 	add.w	r1, r7, #12
 8013bc4:	9102      	str	r1, [sp, #8]
 8013bc6:	9201      	str	r2, [sp, #4]
 8013bc8:	9300      	str	r3, [sp, #0]
 8013bca:	462b      	mov	r3, r5
 8013bcc:	4622      	mov	r2, r4
 8013bce:	4601      	mov	r1, r0
 8013bd0:	6838      	ldr	r0, [r7, #0]
 8013bd2:	f000 faeb 	bl	80141ac <etharp_raw>
      break;
 8013bd6:	e001      	b.n	8013bdc <etharp_input+0xf8>
      break;
 8013bd8:	bf00      	nop
 8013bda:	e000      	b.n	8013bde <etharp_input+0xfa>
      break;
 8013bdc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013bde:	6878      	ldr	r0, [r7, #4]
 8013be0:	f7f9 f936 	bl	800ce50 <pbuf_free>
}
 8013be4:	3718      	adds	r7, #24
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bdb0      	pop	{r4, r5, r7, pc}
 8013bea:	bf00      	nop
 8013bec:	080195a4 	.word	0x080195a4
 8013bf0:	080196f4 	.word	0x080196f4
 8013bf4:	0801961c 	.word	0x0801961c

08013bf8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b086      	sub	sp, #24
 8013bfc:	af02      	add	r7, sp, #8
 8013bfe:	60f8      	str	r0, [r7, #12]
 8013c00:	60b9      	str	r1, [r7, #8]
 8013c02:	4613      	mov	r3, r2
 8013c04:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013c06:	79fa      	ldrb	r2, [r7, #7]
 8013c08:	4944      	ldr	r1, [pc, #272]	; (8013d1c <etharp_output_to_arp_index+0x124>)
 8013c0a:	4613      	mov	r3, r2
 8013c0c:	005b      	lsls	r3, r3, #1
 8013c0e:	4413      	add	r3, r2
 8013c10:	00db      	lsls	r3, r3, #3
 8013c12:	440b      	add	r3, r1
 8013c14:	3314      	adds	r3, #20
 8013c16:	781b      	ldrb	r3, [r3, #0]
 8013c18:	2b01      	cmp	r3, #1
 8013c1a:	d806      	bhi.n	8013c2a <etharp_output_to_arp_index+0x32>
 8013c1c:	4b40      	ldr	r3, [pc, #256]	; (8013d20 <etharp_output_to_arp_index+0x128>)
 8013c1e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013c22:	4940      	ldr	r1, [pc, #256]	; (8013d24 <etharp_output_to_arp_index+0x12c>)
 8013c24:	4840      	ldr	r0, [pc, #256]	; (8013d28 <etharp_output_to_arp_index+0x130>)
 8013c26:	f002 fad3 	bl	80161d0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013c2a:	79fa      	ldrb	r2, [r7, #7]
 8013c2c:	493b      	ldr	r1, [pc, #236]	; (8013d1c <etharp_output_to_arp_index+0x124>)
 8013c2e:	4613      	mov	r3, r2
 8013c30:	005b      	lsls	r3, r3, #1
 8013c32:	4413      	add	r3, r2
 8013c34:	00db      	lsls	r3, r3, #3
 8013c36:	440b      	add	r3, r1
 8013c38:	3314      	adds	r3, #20
 8013c3a:	781b      	ldrb	r3, [r3, #0]
 8013c3c:	2b02      	cmp	r3, #2
 8013c3e:	d153      	bne.n	8013ce8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013c40:	79fa      	ldrb	r2, [r7, #7]
 8013c42:	4936      	ldr	r1, [pc, #216]	; (8013d1c <etharp_output_to_arp_index+0x124>)
 8013c44:	4613      	mov	r3, r2
 8013c46:	005b      	lsls	r3, r3, #1
 8013c48:	4413      	add	r3, r2
 8013c4a:	00db      	lsls	r3, r3, #3
 8013c4c:	440b      	add	r3, r1
 8013c4e:	3312      	adds	r3, #18
 8013c50:	881b      	ldrh	r3, [r3, #0]
 8013c52:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013c56:	d919      	bls.n	8013c8c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013c58:	79fa      	ldrb	r2, [r7, #7]
 8013c5a:	4613      	mov	r3, r2
 8013c5c:	005b      	lsls	r3, r3, #1
 8013c5e:	4413      	add	r3, r2
 8013c60:	00db      	lsls	r3, r3, #3
 8013c62:	4a2e      	ldr	r2, [pc, #184]	; (8013d1c <etharp_output_to_arp_index+0x124>)
 8013c64:	4413      	add	r3, r2
 8013c66:	3304      	adds	r3, #4
 8013c68:	4619      	mov	r1, r3
 8013c6a:	68f8      	ldr	r0, [r7, #12]
 8013c6c:	f000 fb4c 	bl	8014308 <etharp_request>
 8013c70:	4603      	mov	r3, r0
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d138      	bne.n	8013ce8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013c76:	79fa      	ldrb	r2, [r7, #7]
 8013c78:	4928      	ldr	r1, [pc, #160]	; (8013d1c <etharp_output_to_arp_index+0x124>)
 8013c7a:	4613      	mov	r3, r2
 8013c7c:	005b      	lsls	r3, r3, #1
 8013c7e:	4413      	add	r3, r2
 8013c80:	00db      	lsls	r3, r3, #3
 8013c82:	440b      	add	r3, r1
 8013c84:	3314      	adds	r3, #20
 8013c86:	2203      	movs	r2, #3
 8013c88:	701a      	strb	r2, [r3, #0]
 8013c8a:	e02d      	b.n	8013ce8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013c8c:	79fa      	ldrb	r2, [r7, #7]
 8013c8e:	4923      	ldr	r1, [pc, #140]	; (8013d1c <etharp_output_to_arp_index+0x124>)
 8013c90:	4613      	mov	r3, r2
 8013c92:	005b      	lsls	r3, r3, #1
 8013c94:	4413      	add	r3, r2
 8013c96:	00db      	lsls	r3, r3, #3
 8013c98:	440b      	add	r3, r1
 8013c9a:	3312      	adds	r3, #18
 8013c9c:	881b      	ldrh	r3, [r3, #0]
 8013c9e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013ca2:	d321      	bcc.n	8013ce8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013ca4:	79fa      	ldrb	r2, [r7, #7]
 8013ca6:	4613      	mov	r3, r2
 8013ca8:	005b      	lsls	r3, r3, #1
 8013caa:	4413      	add	r3, r2
 8013cac:	00db      	lsls	r3, r3, #3
 8013cae:	4a1b      	ldr	r2, [pc, #108]	; (8013d1c <etharp_output_to_arp_index+0x124>)
 8013cb0:	4413      	add	r3, r2
 8013cb2:	1d19      	adds	r1, r3, #4
 8013cb4:	79fa      	ldrb	r2, [r7, #7]
 8013cb6:	4613      	mov	r3, r2
 8013cb8:	005b      	lsls	r3, r3, #1
 8013cba:	4413      	add	r3, r2
 8013cbc:	00db      	lsls	r3, r3, #3
 8013cbe:	3308      	adds	r3, #8
 8013cc0:	4a16      	ldr	r2, [pc, #88]	; (8013d1c <etharp_output_to_arp_index+0x124>)
 8013cc2:	4413      	add	r3, r2
 8013cc4:	3304      	adds	r3, #4
 8013cc6:	461a      	mov	r2, r3
 8013cc8:	68f8      	ldr	r0, [r7, #12]
 8013cca:	f000 fafb 	bl	80142c4 <etharp_request_dst>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d109      	bne.n	8013ce8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013cd4:	79fa      	ldrb	r2, [r7, #7]
 8013cd6:	4911      	ldr	r1, [pc, #68]	; (8013d1c <etharp_output_to_arp_index+0x124>)
 8013cd8:	4613      	mov	r3, r2
 8013cda:	005b      	lsls	r3, r3, #1
 8013cdc:	4413      	add	r3, r2
 8013cde:	00db      	lsls	r3, r3, #3
 8013ce0:	440b      	add	r3, r1
 8013ce2:	3314      	adds	r3, #20
 8013ce4:	2203      	movs	r2, #3
 8013ce6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013cee:	79fa      	ldrb	r2, [r7, #7]
 8013cf0:	4613      	mov	r3, r2
 8013cf2:	005b      	lsls	r3, r3, #1
 8013cf4:	4413      	add	r3, r2
 8013cf6:	00db      	lsls	r3, r3, #3
 8013cf8:	3308      	adds	r3, #8
 8013cfa:	4a08      	ldr	r2, [pc, #32]	; (8013d1c <etharp_output_to_arp_index+0x124>)
 8013cfc:	4413      	add	r3, r2
 8013cfe:	3304      	adds	r3, #4
 8013d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013d04:	9200      	str	r2, [sp, #0]
 8013d06:	460a      	mov	r2, r1
 8013d08:	68b9      	ldr	r1, [r7, #8]
 8013d0a:	68f8      	ldr	r0, [r7, #12]
 8013d0c:	f001 fe40 	bl	8015990 <ethernet_output>
 8013d10:	4603      	mov	r3, r0
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	3710      	adds	r7, #16
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}
 8013d1a:	bf00      	nop
 8013d1c:	20008f80 	.word	0x20008f80
 8013d20:	080195a4 	.word	0x080195a4
 8013d24:	08019714 	.word	0x08019714
 8013d28:	0801961c 	.word	0x0801961c

08013d2c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b08a      	sub	sp, #40	; 0x28
 8013d30:	af02      	add	r7, sp, #8
 8013d32:	60f8      	str	r0, [r7, #12]
 8013d34:	60b9      	str	r1, [r7, #8]
 8013d36:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d106      	bne.n	8013d50 <etharp_output+0x24>
 8013d42:	4b73      	ldr	r3, [pc, #460]	; (8013f10 <etharp_output+0x1e4>)
 8013d44:	f240 321e 	movw	r2, #798	; 0x31e
 8013d48:	4972      	ldr	r1, [pc, #456]	; (8013f14 <etharp_output+0x1e8>)
 8013d4a:	4873      	ldr	r0, [pc, #460]	; (8013f18 <etharp_output+0x1ec>)
 8013d4c:	f002 fa40 	bl	80161d0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013d50:	68bb      	ldr	r3, [r7, #8]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d106      	bne.n	8013d64 <etharp_output+0x38>
 8013d56:	4b6e      	ldr	r3, [pc, #440]	; (8013f10 <etharp_output+0x1e4>)
 8013d58:	f240 321f 	movw	r2, #799	; 0x31f
 8013d5c:	496f      	ldr	r1, [pc, #444]	; (8013f1c <etharp_output+0x1f0>)
 8013d5e:	486e      	ldr	r0, [pc, #440]	; (8013f18 <etharp_output+0x1ec>)
 8013d60:	f002 fa36 	bl	80161d0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d106      	bne.n	8013d78 <etharp_output+0x4c>
 8013d6a:	4b69      	ldr	r3, [pc, #420]	; (8013f10 <etharp_output+0x1e4>)
 8013d6c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013d70:	496b      	ldr	r1, [pc, #428]	; (8013f20 <etharp_output+0x1f4>)
 8013d72:	4869      	ldr	r0, [pc, #420]	; (8013f18 <etharp_output+0x1ec>)
 8013d74:	f002 fa2c 	bl	80161d0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	68f9      	ldr	r1, [r7, #12]
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f000 fef8 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 8013d84:	4603      	mov	r3, r0
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d002      	beq.n	8013d90 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013d8a:	4b66      	ldr	r3, [pc, #408]	; (8013f24 <etharp_output+0x1f8>)
 8013d8c:	61fb      	str	r3, [r7, #28]
 8013d8e:	e0af      	b.n	8013ef0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d98:	2be0      	cmp	r3, #224	; 0xe0
 8013d9a:	d118      	bne.n	8013dce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013d9c:	2301      	movs	r3, #1
 8013d9e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013da0:	2300      	movs	r3, #0
 8013da2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013da4:	235e      	movs	r3, #94	; 0x5e
 8013da6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	3301      	adds	r3, #1
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013db2:	b2db      	uxtb	r3, r3
 8013db4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	3302      	adds	r3, #2
 8013dba:	781b      	ldrb	r3, [r3, #0]
 8013dbc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	3303      	adds	r3, #3
 8013dc2:	781b      	ldrb	r3, [r3, #0]
 8013dc4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013dc6:	f107 0310 	add.w	r3, r7, #16
 8013dca:	61fb      	str	r3, [r7, #28]
 8013dcc:	e090      	b.n	8013ef0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	3304      	adds	r3, #4
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	405a      	eors	r2, r3
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	3308      	adds	r3, #8
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	4013      	ands	r3, r2
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d012      	beq.n	8013e0c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013dec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013df0:	4293      	cmp	r3, r2
 8013df2:	d00b      	beq.n	8013e0c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	330c      	adds	r3, #12
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d003      	beq.n	8013e06 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	330c      	adds	r3, #12
 8013e02:	61bb      	str	r3, [r7, #24]
 8013e04:	e002      	b.n	8013e0c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013e06:	f06f 0303 	mvn.w	r3, #3
 8013e0a:	e07d      	b.n	8013f08 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013e0c:	4b46      	ldr	r3, [pc, #280]	; (8013f28 <etharp_output+0x1fc>)
 8013e0e:	781b      	ldrb	r3, [r3, #0]
 8013e10:	4619      	mov	r1, r3
 8013e12:	4a46      	ldr	r2, [pc, #280]	; (8013f2c <etharp_output+0x200>)
 8013e14:	460b      	mov	r3, r1
 8013e16:	005b      	lsls	r3, r3, #1
 8013e18:	440b      	add	r3, r1
 8013e1a:	00db      	lsls	r3, r3, #3
 8013e1c:	4413      	add	r3, r2
 8013e1e:	3314      	adds	r3, #20
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	2b01      	cmp	r3, #1
 8013e24:	d925      	bls.n	8013e72 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013e26:	4b40      	ldr	r3, [pc, #256]	; (8013f28 <etharp_output+0x1fc>)
 8013e28:	781b      	ldrb	r3, [r3, #0]
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	4a3f      	ldr	r2, [pc, #252]	; (8013f2c <etharp_output+0x200>)
 8013e2e:	460b      	mov	r3, r1
 8013e30:	005b      	lsls	r3, r3, #1
 8013e32:	440b      	add	r3, r1
 8013e34:	00db      	lsls	r3, r3, #3
 8013e36:	4413      	add	r3, r2
 8013e38:	3308      	adds	r3, #8
 8013e3a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013e3c:	68fa      	ldr	r2, [r7, #12]
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d117      	bne.n	8013e72 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013e42:	69bb      	ldr	r3, [r7, #24]
 8013e44:	681a      	ldr	r2, [r3, #0]
 8013e46:	4b38      	ldr	r3, [pc, #224]	; (8013f28 <etharp_output+0x1fc>)
 8013e48:	781b      	ldrb	r3, [r3, #0]
 8013e4a:	4618      	mov	r0, r3
 8013e4c:	4937      	ldr	r1, [pc, #220]	; (8013f2c <etharp_output+0x200>)
 8013e4e:	4603      	mov	r3, r0
 8013e50:	005b      	lsls	r3, r3, #1
 8013e52:	4403      	add	r3, r0
 8013e54:	00db      	lsls	r3, r3, #3
 8013e56:	440b      	add	r3, r1
 8013e58:	3304      	adds	r3, #4
 8013e5a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013e5c:	429a      	cmp	r2, r3
 8013e5e:	d108      	bne.n	8013e72 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013e60:	4b31      	ldr	r3, [pc, #196]	; (8013f28 <etharp_output+0x1fc>)
 8013e62:	781b      	ldrb	r3, [r3, #0]
 8013e64:	461a      	mov	r2, r3
 8013e66:	68b9      	ldr	r1, [r7, #8]
 8013e68:	68f8      	ldr	r0, [r7, #12]
 8013e6a:	f7ff fec5 	bl	8013bf8 <etharp_output_to_arp_index>
 8013e6e:	4603      	mov	r3, r0
 8013e70:	e04a      	b.n	8013f08 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013e72:	2300      	movs	r3, #0
 8013e74:	75fb      	strb	r3, [r7, #23]
 8013e76:	e031      	b.n	8013edc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013e78:	7dfa      	ldrb	r2, [r7, #23]
 8013e7a:	492c      	ldr	r1, [pc, #176]	; (8013f2c <etharp_output+0x200>)
 8013e7c:	4613      	mov	r3, r2
 8013e7e:	005b      	lsls	r3, r3, #1
 8013e80:	4413      	add	r3, r2
 8013e82:	00db      	lsls	r3, r3, #3
 8013e84:	440b      	add	r3, r1
 8013e86:	3314      	adds	r3, #20
 8013e88:	781b      	ldrb	r3, [r3, #0]
 8013e8a:	2b01      	cmp	r3, #1
 8013e8c:	d923      	bls.n	8013ed6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013e8e:	7dfa      	ldrb	r2, [r7, #23]
 8013e90:	4926      	ldr	r1, [pc, #152]	; (8013f2c <etharp_output+0x200>)
 8013e92:	4613      	mov	r3, r2
 8013e94:	005b      	lsls	r3, r3, #1
 8013e96:	4413      	add	r3, r2
 8013e98:	00db      	lsls	r3, r3, #3
 8013e9a:	440b      	add	r3, r1
 8013e9c:	3308      	adds	r3, #8
 8013e9e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013ea0:	68fa      	ldr	r2, [r7, #12]
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d117      	bne.n	8013ed6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013ea6:	69bb      	ldr	r3, [r7, #24]
 8013ea8:	6819      	ldr	r1, [r3, #0]
 8013eaa:	7dfa      	ldrb	r2, [r7, #23]
 8013eac:	481f      	ldr	r0, [pc, #124]	; (8013f2c <etharp_output+0x200>)
 8013eae:	4613      	mov	r3, r2
 8013eb0:	005b      	lsls	r3, r3, #1
 8013eb2:	4413      	add	r3, r2
 8013eb4:	00db      	lsls	r3, r3, #3
 8013eb6:	4403      	add	r3, r0
 8013eb8:	3304      	adds	r3, #4
 8013eba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013ebc:	4299      	cmp	r1, r3
 8013ebe:	d10a      	bne.n	8013ed6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013ec0:	4a19      	ldr	r2, [pc, #100]	; (8013f28 <etharp_output+0x1fc>)
 8013ec2:	7dfb      	ldrb	r3, [r7, #23]
 8013ec4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013ec6:	7dfb      	ldrb	r3, [r7, #23]
 8013ec8:	461a      	mov	r2, r3
 8013eca:	68b9      	ldr	r1, [r7, #8]
 8013ecc:	68f8      	ldr	r0, [r7, #12]
 8013ece:	f7ff fe93 	bl	8013bf8 <etharp_output_to_arp_index>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	e018      	b.n	8013f08 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013ed6:	7dfb      	ldrb	r3, [r7, #23]
 8013ed8:	3301      	adds	r3, #1
 8013eda:	75fb      	strb	r3, [r7, #23]
 8013edc:	7dfb      	ldrb	r3, [r7, #23]
 8013ede:	2b09      	cmp	r3, #9
 8013ee0:	d9ca      	bls.n	8013e78 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013ee2:	68ba      	ldr	r2, [r7, #8]
 8013ee4:	69b9      	ldr	r1, [r7, #24]
 8013ee6:	68f8      	ldr	r0, [r7, #12]
 8013ee8:	f000 f822 	bl	8013f30 <etharp_query>
 8013eec:	4603      	mov	r3, r0
 8013eee:	e00b      	b.n	8013f08 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013ef6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013efa:	9300      	str	r3, [sp, #0]
 8013efc:	69fb      	ldr	r3, [r7, #28]
 8013efe:	68b9      	ldr	r1, [r7, #8]
 8013f00:	68f8      	ldr	r0, [r7, #12]
 8013f02:	f001 fd45 	bl	8015990 <ethernet_output>
 8013f06:	4603      	mov	r3, r0
}
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3720      	adds	r7, #32
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}
 8013f10:	080195a4 	.word	0x080195a4
 8013f14:	080196f4 	.word	0x080196f4
 8013f18:	0801961c 	.word	0x0801961c
 8013f1c:	08019744 	.word	0x08019744
 8013f20:	080196e4 	.word	0x080196e4
 8013f24:	08019d8c 	.word	0x08019d8c
 8013f28:	20009070 	.word	0x20009070
 8013f2c:	20008f80 	.word	0x20008f80

08013f30 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b08c      	sub	sp, #48	; 0x30
 8013f34:	af02      	add	r7, sp, #8
 8013f36:	60f8      	str	r0, [r7, #12]
 8013f38:	60b9      	str	r1, [r7, #8]
 8013f3a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	3326      	adds	r3, #38	; 0x26
 8013f40:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013f42:	23ff      	movs	r3, #255	; 0xff
 8013f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013f48:	2300      	movs	r3, #0
 8013f4a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	68f9      	ldr	r1, [r7, #12]
 8013f52:	4618      	mov	r0, r3
 8013f54:	f000 fe0e 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d10c      	bne.n	8013f78 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013f5e:	68bb      	ldr	r3, [r7, #8]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013f66:	2be0      	cmp	r3, #224	; 0xe0
 8013f68:	d006      	beq.n	8013f78 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d003      	beq.n	8013f78 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d102      	bne.n	8013f7e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013f78:	f06f 030f 	mvn.w	r3, #15
 8013f7c:	e101      	b.n	8014182 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013f7e:	68fa      	ldr	r2, [r7, #12]
 8013f80:	2101      	movs	r1, #1
 8013f82:	68b8      	ldr	r0, [r7, #8]
 8013f84:	f7ff fb60 	bl	8013648 <etharp_find_entry>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013f8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	da02      	bge.n	8013f9a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013f94:	8a7b      	ldrh	r3, [r7, #18]
 8013f96:	b25b      	sxtb	r3, r3
 8013f98:	e0f3      	b.n	8014182 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013f9a:	8a7b      	ldrh	r3, [r7, #18]
 8013f9c:	2b7e      	cmp	r3, #126	; 0x7e
 8013f9e:	d906      	bls.n	8013fae <etharp_query+0x7e>
 8013fa0:	4b7a      	ldr	r3, [pc, #488]	; (801418c <etharp_query+0x25c>)
 8013fa2:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013fa6:	497a      	ldr	r1, [pc, #488]	; (8014190 <etharp_query+0x260>)
 8013fa8:	487a      	ldr	r0, [pc, #488]	; (8014194 <etharp_query+0x264>)
 8013faa:	f002 f911 	bl	80161d0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013fae:	8a7b      	ldrh	r3, [r7, #18]
 8013fb0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013fb2:	7c7a      	ldrb	r2, [r7, #17]
 8013fb4:	4978      	ldr	r1, [pc, #480]	; (8014198 <etharp_query+0x268>)
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	005b      	lsls	r3, r3, #1
 8013fba:	4413      	add	r3, r2
 8013fbc:	00db      	lsls	r3, r3, #3
 8013fbe:	440b      	add	r3, r1
 8013fc0:	3314      	adds	r3, #20
 8013fc2:	781b      	ldrb	r3, [r3, #0]
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d115      	bne.n	8013ff4 <etharp_query+0xc4>
    is_new_entry = 1;
 8013fc8:	2301      	movs	r3, #1
 8013fca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013fcc:	7c7a      	ldrb	r2, [r7, #17]
 8013fce:	4972      	ldr	r1, [pc, #456]	; (8014198 <etharp_query+0x268>)
 8013fd0:	4613      	mov	r3, r2
 8013fd2:	005b      	lsls	r3, r3, #1
 8013fd4:	4413      	add	r3, r2
 8013fd6:	00db      	lsls	r3, r3, #3
 8013fd8:	440b      	add	r3, r1
 8013fda:	3314      	adds	r3, #20
 8013fdc:	2201      	movs	r2, #1
 8013fde:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013fe0:	7c7a      	ldrb	r2, [r7, #17]
 8013fe2:	496d      	ldr	r1, [pc, #436]	; (8014198 <etharp_query+0x268>)
 8013fe4:	4613      	mov	r3, r2
 8013fe6:	005b      	lsls	r3, r3, #1
 8013fe8:	4413      	add	r3, r2
 8013fea:	00db      	lsls	r3, r3, #3
 8013fec:	440b      	add	r3, r1
 8013fee:	3308      	adds	r3, #8
 8013ff0:	68fa      	ldr	r2, [r7, #12]
 8013ff2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013ff4:	7c7a      	ldrb	r2, [r7, #17]
 8013ff6:	4968      	ldr	r1, [pc, #416]	; (8014198 <etharp_query+0x268>)
 8013ff8:	4613      	mov	r3, r2
 8013ffa:	005b      	lsls	r3, r3, #1
 8013ffc:	4413      	add	r3, r2
 8013ffe:	00db      	lsls	r3, r3, #3
 8014000:	440b      	add	r3, r1
 8014002:	3314      	adds	r3, #20
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	2b01      	cmp	r3, #1
 8014008:	d011      	beq.n	801402e <etharp_query+0xfe>
 801400a:	7c7a      	ldrb	r2, [r7, #17]
 801400c:	4962      	ldr	r1, [pc, #392]	; (8014198 <etharp_query+0x268>)
 801400e:	4613      	mov	r3, r2
 8014010:	005b      	lsls	r3, r3, #1
 8014012:	4413      	add	r3, r2
 8014014:	00db      	lsls	r3, r3, #3
 8014016:	440b      	add	r3, r1
 8014018:	3314      	adds	r3, #20
 801401a:	781b      	ldrb	r3, [r3, #0]
 801401c:	2b01      	cmp	r3, #1
 801401e:	d806      	bhi.n	801402e <etharp_query+0xfe>
 8014020:	4b5a      	ldr	r3, [pc, #360]	; (801418c <etharp_query+0x25c>)
 8014022:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014026:	495d      	ldr	r1, [pc, #372]	; (801419c <etharp_query+0x26c>)
 8014028:	485a      	ldr	r0, [pc, #360]	; (8014194 <etharp_query+0x264>)
 801402a:	f002 f8d1 	bl	80161d0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801402e:	6a3b      	ldr	r3, [r7, #32]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d102      	bne.n	801403a <etharp_query+0x10a>
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d10c      	bne.n	8014054 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801403a:	68b9      	ldr	r1, [r7, #8]
 801403c:	68f8      	ldr	r0, [r7, #12]
 801403e:	f000 f963 	bl	8014308 <etharp_request>
 8014042:	4603      	mov	r3, r0
 8014044:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d102      	bne.n	8014054 <etharp_query+0x124>
      return result;
 801404e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014052:	e096      	b.n	8014182 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d106      	bne.n	8014068 <etharp_query+0x138>
 801405a:	4b4c      	ldr	r3, [pc, #304]	; (801418c <etharp_query+0x25c>)
 801405c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014060:	494f      	ldr	r1, [pc, #316]	; (80141a0 <etharp_query+0x270>)
 8014062:	484c      	ldr	r0, [pc, #304]	; (8014194 <etharp_query+0x264>)
 8014064:	f002 f8b4 	bl	80161d0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014068:	7c7a      	ldrb	r2, [r7, #17]
 801406a:	494b      	ldr	r1, [pc, #300]	; (8014198 <etharp_query+0x268>)
 801406c:	4613      	mov	r3, r2
 801406e:	005b      	lsls	r3, r3, #1
 8014070:	4413      	add	r3, r2
 8014072:	00db      	lsls	r3, r3, #3
 8014074:	440b      	add	r3, r1
 8014076:	3314      	adds	r3, #20
 8014078:	781b      	ldrb	r3, [r3, #0]
 801407a:	2b01      	cmp	r3, #1
 801407c:	d917      	bls.n	80140ae <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801407e:	4a49      	ldr	r2, [pc, #292]	; (80141a4 <etharp_query+0x274>)
 8014080:	7c7b      	ldrb	r3, [r7, #17]
 8014082:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014084:	7c7a      	ldrb	r2, [r7, #17]
 8014086:	4613      	mov	r3, r2
 8014088:	005b      	lsls	r3, r3, #1
 801408a:	4413      	add	r3, r2
 801408c:	00db      	lsls	r3, r3, #3
 801408e:	3308      	adds	r3, #8
 8014090:	4a41      	ldr	r2, [pc, #260]	; (8014198 <etharp_query+0x268>)
 8014092:	4413      	add	r3, r2
 8014094:	3304      	adds	r3, #4
 8014096:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801409a:	9200      	str	r2, [sp, #0]
 801409c:	697a      	ldr	r2, [r7, #20]
 801409e:	6879      	ldr	r1, [r7, #4]
 80140a0:	68f8      	ldr	r0, [r7, #12]
 80140a2:	f001 fc75 	bl	8015990 <ethernet_output>
 80140a6:	4603      	mov	r3, r0
 80140a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80140ac:	e067      	b.n	801417e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80140ae:	7c7a      	ldrb	r2, [r7, #17]
 80140b0:	4939      	ldr	r1, [pc, #228]	; (8014198 <etharp_query+0x268>)
 80140b2:	4613      	mov	r3, r2
 80140b4:	005b      	lsls	r3, r3, #1
 80140b6:	4413      	add	r3, r2
 80140b8:	00db      	lsls	r3, r3, #3
 80140ba:	440b      	add	r3, r1
 80140bc:	3314      	adds	r3, #20
 80140be:	781b      	ldrb	r3, [r3, #0]
 80140c0:	2b01      	cmp	r3, #1
 80140c2:	d15c      	bne.n	801417e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80140c4:	2300      	movs	r3, #0
 80140c6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80140cc:	e01c      	b.n	8014108 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80140ce:	69fb      	ldr	r3, [r7, #28]
 80140d0:	895a      	ldrh	r2, [r3, #10]
 80140d2:	69fb      	ldr	r3, [r7, #28]
 80140d4:	891b      	ldrh	r3, [r3, #8]
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d10a      	bne.n	80140f0 <etharp_query+0x1c0>
 80140da:	69fb      	ldr	r3, [r7, #28]
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d006      	beq.n	80140f0 <etharp_query+0x1c0>
 80140e2:	4b2a      	ldr	r3, [pc, #168]	; (801418c <etharp_query+0x25c>)
 80140e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80140e8:	492f      	ldr	r1, [pc, #188]	; (80141a8 <etharp_query+0x278>)
 80140ea:	482a      	ldr	r0, [pc, #168]	; (8014194 <etharp_query+0x264>)
 80140ec:	f002 f870 	bl	80161d0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	7b1b      	ldrb	r3, [r3, #12]
 80140f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d002      	beq.n	8014102 <etharp_query+0x1d2>
        copy_needed = 1;
 80140fc:	2301      	movs	r3, #1
 80140fe:	61bb      	str	r3, [r7, #24]
        break;
 8014100:	e005      	b.n	801410e <etharp_query+0x1de>
      }
      p = p->next;
 8014102:	69fb      	ldr	r3, [r7, #28]
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014108:	69fb      	ldr	r3, [r7, #28]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d1df      	bne.n	80140ce <etharp_query+0x19e>
    }
    if (copy_needed) {
 801410e:	69bb      	ldr	r3, [r7, #24]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d007      	beq.n	8014124 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014114:	687a      	ldr	r2, [r7, #4]
 8014116:	f44f 7120 	mov.w	r1, #640	; 0x280
 801411a:	200e      	movs	r0, #14
 801411c:	f7f9 f996 	bl	800d44c <pbuf_clone>
 8014120:	61f8      	str	r0, [r7, #28]
 8014122:	e004      	b.n	801412e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014128:	69f8      	ldr	r0, [r7, #28]
 801412a:	f7f8 ff31 	bl	800cf90 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801412e:	69fb      	ldr	r3, [r7, #28]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d021      	beq.n	8014178 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014134:	7c7a      	ldrb	r2, [r7, #17]
 8014136:	4918      	ldr	r1, [pc, #96]	; (8014198 <etharp_query+0x268>)
 8014138:	4613      	mov	r3, r2
 801413a:	005b      	lsls	r3, r3, #1
 801413c:	4413      	add	r3, r2
 801413e:	00db      	lsls	r3, r3, #3
 8014140:	440b      	add	r3, r1
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d00a      	beq.n	801415e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014148:	7c7a      	ldrb	r2, [r7, #17]
 801414a:	4913      	ldr	r1, [pc, #76]	; (8014198 <etharp_query+0x268>)
 801414c:	4613      	mov	r3, r2
 801414e:	005b      	lsls	r3, r3, #1
 8014150:	4413      	add	r3, r2
 8014152:	00db      	lsls	r3, r3, #3
 8014154:	440b      	add	r3, r1
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	4618      	mov	r0, r3
 801415a:	f7f8 fe79 	bl	800ce50 <pbuf_free>
      }
      arp_table[i].q = p;
 801415e:	7c7a      	ldrb	r2, [r7, #17]
 8014160:	490d      	ldr	r1, [pc, #52]	; (8014198 <etharp_query+0x268>)
 8014162:	4613      	mov	r3, r2
 8014164:	005b      	lsls	r3, r3, #1
 8014166:	4413      	add	r3, r2
 8014168:	00db      	lsls	r3, r3, #3
 801416a:	440b      	add	r3, r1
 801416c:	69fa      	ldr	r2, [r7, #28]
 801416e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014170:	2300      	movs	r3, #0
 8014172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014176:	e002      	b.n	801417e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014178:	23ff      	movs	r3, #255	; 0xff
 801417a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801417e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014182:	4618      	mov	r0, r3
 8014184:	3728      	adds	r7, #40	; 0x28
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}
 801418a:	bf00      	nop
 801418c:	080195a4 	.word	0x080195a4
 8014190:	08019750 	.word	0x08019750
 8014194:	0801961c 	.word	0x0801961c
 8014198:	20008f80 	.word	0x20008f80
 801419c:	08019760 	.word	0x08019760
 80141a0:	08019744 	.word	0x08019744
 80141a4:	20009070 	.word	0x20009070
 80141a8:	08019788 	.word	0x08019788

080141ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b08a      	sub	sp, #40	; 0x28
 80141b0:	af02      	add	r7, sp, #8
 80141b2:	60f8      	str	r0, [r7, #12]
 80141b4:	60b9      	str	r1, [r7, #8]
 80141b6:	607a      	str	r2, [r7, #4]
 80141b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80141ba:	2300      	movs	r3, #0
 80141bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d106      	bne.n	80141d2 <etharp_raw+0x26>
 80141c4:	4b3a      	ldr	r3, [pc, #232]	; (80142b0 <etharp_raw+0x104>)
 80141c6:	f240 4257 	movw	r2, #1111	; 0x457
 80141ca:	493a      	ldr	r1, [pc, #232]	; (80142b4 <etharp_raw+0x108>)
 80141cc:	483a      	ldr	r0, [pc, #232]	; (80142b8 <etharp_raw+0x10c>)
 80141ce:	f001 ffff 	bl	80161d0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80141d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141d6:	211c      	movs	r1, #28
 80141d8:	200e      	movs	r0, #14
 80141da:	f7f8 fb55 	bl	800c888 <pbuf_alloc>
 80141de:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d102      	bne.n	80141ec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80141e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80141ea:	e05d      	b.n	80142a8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80141ec:	69bb      	ldr	r3, [r7, #24]
 80141ee:	895b      	ldrh	r3, [r3, #10]
 80141f0:	2b1b      	cmp	r3, #27
 80141f2:	d806      	bhi.n	8014202 <etharp_raw+0x56>
 80141f4:	4b2e      	ldr	r3, [pc, #184]	; (80142b0 <etharp_raw+0x104>)
 80141f6:	f240 4262 	movw	r2, #1122	; 0x462
 80141fa:	4930      	ldr	r1, [pc, #192]	; (80142bc <etharp_raw+0x110>)
 80141fc:	482e      	ldr	r0, [pc, #184]	; (80142b8 <etharp_raw+0x10c>)
 80141fe:	f001 ffe7 	bl	80161d0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014202:	69bb      	ldr	r3, [r7, #24]
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014208:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801420a:	4618      	mov	r0, r3
 801420c:	f7f7 fac2 	bl	800b794 <lwip_htons>
 8014210:	4603      	mov	r3, r0
 8014212:	461a      	mov	r2, r3
 8014214:	697b      	ldr	r3, [r7, #20]
 8014216:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801421e:	2b06      	cmp	r3, #6
 8014220:	d006      	beq.n	8014230 <etharp_raw+0x84>
 8014222:	4b23      	ldr	r3, [pc, #140]	; (80142b0 <etharp_raw+0x104>)
 8014224:	f240 4269 	movw	r2, #1129	; 0x469
 8014228:	4925      	ldr	r1, [pc, #148]	; (80142c0 <etharp_raw+0x114>)
 801422a:	4823      	ldr	r0, [pc, #140]	; (80142b8 <etharp_raw+0x10c>)
 801422c:	f001 ffd0 	bl	80161d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	3308      	adds	r3, #8
 8014234:	2206      	movs	r2, #6
 8014236:	6839      	ldr	r1, [r7, #0]
 8014238:	4618      	mov	r0, r3
 801423a:	f001 ffb3 	bl	80161a4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801423e:	697b      	ldr	r3, [r7, #20]
 8014240:	3312      	adds	r3, #18
 8014242:	2206      	movs	r2, #6
 8014244:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014246:	4618      	mov	r0, r3
 8014248:	f001 ffac 	bl	80161a4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	330e      	adds	r3, #14
 8014250:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014252:	6812      	ldr	r2, [r2, #0]
 8014254:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	3318      	adds	r3, #24
 801425a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801425c:	6812      	ldr	r2, [r2, #0]
 801425e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	2200      	movs	r2, #0
 8014264:	701a      	strb	r2, [r3, #0]
 8014266:	2200      	movs	r2, #0
 8014268:	f042 0201 	orr.w	r2, r2, #1
 801426c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	2200      	movs	r2, #0
 8014272:	f042 0208 	orr.w	r2, r2, #8
 8014276:	709a      	strb	r2, [r3, #2]
 8014278:	2200      	movs	r2, #0
 801427a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801427c:	697b      	ldr	r3, [r7, #20]
 801427e:	2206      	movs	r2, #6
 8014280:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	2204      	movs	r2, #4
 8014286:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014288:	f640 0306 	movw	r3, #2054	; 0x806
 801428c:	9300      	str	r3, [sp, #0]
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	68ba      	ldr	r2, [r7, #8]
 8014292:	69b9      	ldr	r1, [r7, #24]
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f001 fb7b 	bl	8015990 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801429a:	69b8      	ldr	r0, [r7, #24]
 801429c:	f7f8 fdd8 	bl	800ce50 <pbuf_free>
  p = NULL;
 80142a0:	2300      	movs	r3, #0
 80142a2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80142a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80142a8:	4618      	mov	r0, r3
 80142aa:	3720      	adds	r7, #32
 80142ac:	46bd      	mov	sp, r7
 80142ae:	bd80      	pop	{r7, pc}
 80142b0:	080195a4 	.word	0x080195a4
 80142b4:	080196f4 	.word	0x080196f4
 80142b8:	0801961c 	.word	0x0801961c
 80142bc:	080197a4 	.word	0x080197a4
 80142c0:	080197d8 	.word	0x080197d8

080142c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b088      	sub	sp, #32
 80142c8:	af04      	add	r7, sp, #16
 80142ca:	60f8      	str	r0, [r7, #12]
 80142cc:	60b9      	str	r1, [r7, #8]
 80142ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80142e0:	2201      	movs	r2, #1
 80142e2:	9203      	str	r2, [sp, #12]
 80142e4:	68ba      	ldr	r2, [r7, #8]
 80142e6:	9202      	str	r2, [sp, #8]
 80142e8:	4a06      	ldr	r2, [pc, #24]	; (8014304 <etharp_request_dst+0x40>)
 80142ea:	9201      	str	r2, [sp, #4]
 80142ec:	9300      	str	r3, [sp, #0]
 80142ee:	4603      	mov	r3, r0
 80142f0:	687a      	ldr	r2, [r7, #4]
 80142f2:	68f8      	ldr	r0, [r7, #12]
 80142f4:	f7ff ff5a 	bl	80141ac <etharp_raw>
 80142f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80142fa:	4618      	mov	r0, r3
 80142fc:	3710      	adds	r7, #16
 80142fe:	46bd      	mov	sp, r7
 8014300:	bd80      	pop	{r7, pc}
 8014302:	bf00      	nop
 8014304:	08019d94 	.word	0x08019d94

08014308 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b082      	sub	sp, #8
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
 8014310:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014312:	4a05      	ldr	r2, [pc, #20]	; (8014328 <etharp_request+0x20>)
 8014314:	6839      	ldr	r1, [r7, #0]
 8014316:	6878      	ldr	r0, [r7, #4]
 8014318:	f7ff ffd4 	bl	80142c4 <etharp_request_dst>
 801431c:	4603      	mov	r3, r0
}
 801431e:	4618      	mov	r0, r3
 8014320:	3708      	adds	r7, #8
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}
 8014326:	bf00      	nop
 8014328:	08019d8c 	.word	0x08019d8c

0801432c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801432c:	b580      	push	{r7, lr}
 801432e:	b08e      	sub	sp, #56	; 0x38
 8014330:	af04      	add	r7, sp, #16
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014336:	4b79      	ldr	r3, [pc, #484]	; (801451c <icmp_input+0x1f0>)
 8014338:	689b      	ldr	r3, [r3, #8]
 801433a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	f003 030f 	and.w	r3, r3, #15
 8014344:	b2db      	uxtb	r3, r3
 8014346:	009b      	lsls	r3, r3, #2
 8014348:	b2db      	uxtb	r3, r3
 801434a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801434c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801434e:	2b13      	cmp	r3, #19
 8014350:	f240 80cd 	bls.w	80144ee <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	895b      	ldrh	r3, [r3, #10]
 8014358:	2b03      	cmp	r3, #3
 801435a:	f240 80ca 	bls.w	80144f2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014368:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801436c:	2b00      	cmp	r3, #0
 801436e:	f000 80b7 	beq.w	80144e0 <icmp_input+0x1b4>
 8014372:	2b08      	cmp	r3, #8
 8014374:	f040 80b7 	bne.w	80144e6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014378:	4b69      	ldr	r3, [pc, #420]	; (8014520 <icmp_input+0x1f4>)
 801437a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801437c:	4b67      	ldr	r3, [pc, #412]	; (801451c <icmp_input+0x1f0>)
 801437e:	695b      	ldr	r3, [r3, #20]
 8014380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014384:	2be0      	cmp	r3, #224	; 0xe0
 8014386:	f000 80bb 	beq.w	8014500 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801438a:	4b64      	ldr	r3, [pc, #400]	; (801451c <icmp_input+0x1f0>)
 801438c:	695b      	ldr	r3, [r3, #20]
 801438e:	4a63      	ldr	r2, [pc, #396]	; (801451c <icmp_input+0x1f0>)
 8014390:	6812      	ldr	r2, [r2, #0]
 8014392:	4611      	mov	r1, r2
 8014394:	4618      	mov	r0, r3
 8014396:	f000 fbed 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 801439a:	4603      	mov	r3, r0
 801439c:	2b00      	cmp	r3, #0
 801439e:	f040 80b1 	bne.w	8014504 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	891b      	ldrh	r3, [r3, #8]
 80143a6:	2b07      	cmp	r3, #7
 80143a8:	f240 80a5 	bls.w	80144f6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80143ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143ae:	330e      	adds	r3, #14
 80143b0:	4619      	mov	r1, r3
 80143b2:	6878      	ldr	r0, [r7, #4]
 80143b4:	f7f8 fcb6 	bl	800cd24 <pbuf_add_header>
 80143b8:	4603      	mov	r3, r0
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d04b      	beq.n	8014456 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	891a      	ldrh	r2, [r3, #8]
 80143c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143c4:	4413      	add	r3, r2
 80143c6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	891b      	ldrh	r3, [r3, #8]
 80143cc:	8b7a      	ldrh	r2, [r7, #26]
 80143ce:	429a      	cmp	r2, r3
 80143d0:	f0c0 809a 	bcc.w	8014508 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80143d4:	8b7b      	ldrh	r3, [r7, #26]
 80143d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80143da:	4619      	mov	r1, r3
 80143dc:	200e      	movs	r0, #14
 80143de:	f7f8 fa53 	bl	800c888 <pbuf_alloc>
 80143e2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	f000 8090 	beq.w	801450c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	895b      	ldrh	r3, [r3, #10]
 80143f0:	461a      	mov	r2, r3
 80143f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80143f4:	3308      	adds	r3, #8
 80143f6:	429a      	cmp	r2, r3
 80143f8:	d203      	bcs.n	8014402 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80143fa:	6978      	ldr	r0, [r7, #20]
 80143fc:	f7f8 fd28 	bl	800ce50 <pbuf_free>
          goto icmperr;
 8014400:	e085      	b.n	801450e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	685b      	ldr	r3, [r3, #4]
 8014406:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801440a:	4618      	mov	r0, r3
 801440c:	f001 feca 	bl	80161a4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014410:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014412:	4619      	mov	r1, r3
 8014414:	6978      	ldr	r0, [r7, #20]
 8014416:	f7f8 fc95 	bl	800cd44 <pbuf_remove_header>
 801441a:	4603      	mov	r3, r0
 801441c:	2b00      	cmp	r3, #0
 801441e:	d009      	beq.n	8014434 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014420:	4b40      	ldr	r3, [pc, #256]	; (8014524 <icmp_input+0x1f8>)
 8014422:	22b6      	movs	r2, #182	; 0xb6
 8014424:	4940      	ldr	r1, [pc, #256]	; (8014528 <icmp_input+0x1fc>)
 8014426:	4841      	ldr	r0, [pc, #260]	; (801452c <icmp_input+0x200>)
 8014428:	f001 fed2 	bl	80161d0 <iprintf>
          pbuf_free(r);
 801442c:	6978      	ldr	r0, [r7, #20]
 801442e:	f7f8 fd0f 	bl	800ce50 <pbuf_free>
          goto icmperr;
 8014432:	e06c      	b.n	801450e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014434:	6879      	ldr	r1, [r7, #4]
 8014436:	6978      	ldr	r0, [r7, #20]
 8014438:	f7f8 fe32 	bl	800d0a0 <pbuf_copy>
 801443c:	4603      	mov	r3, r0
 801443e:	2b00      	cmp	r3, #0
 8014440:	d003      	beq.n	801444a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014442:	6978      	ldr	r0, [r7, #20]
 8014444:	f7f8 fd04 	bl	800ce50 <pbuf_free>
          goto icmperr;
 8014448:	e061      	b.n	801450e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f7f8 fd00 	bl	800ce50 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014450:	697b      	ldr	r3, [r7, #20]
 8014452:	607b      	str	r3, [r7, #4]
 8014454:	e00f      	b.n	8014476 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014456:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014458:	330e      	adds	r3, #14
 801445a:	4619      	mov	r1, r3
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	f7f8 fc71 	bl	800cd44 <pbuf_remove_header>
 8014462:	4603      	mov	r3, r0
 8014464:	2b00      	cmp	r3, #0
 8014466:	d006      	beq.n	8014476 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014468:	4b2e      	ldr	r3, [pc, #184]	; (8014524 <icmp_input+0x1f8>)
 801446a:	22c7      	movs	r2, #199	; 0xc7
 801446c:	4930      	ldr	r1, [pc, #192]	; (8014530 <icmp_input+0x204>)
 801446e:	482f      	ldr	r0, [pc, #188]	; (801452c <icmp_input+0x200>)
 8014470:	f001 feae 	bl	80161d0 <iprintf>
          goto icmperr;
 8014474:	e04b      	b.n	801450e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	685b      	ldr	r3, [r3, #4]
 801447a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801447c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801447e:	4619      	mov	r1, r3
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f7f8 fc4f 	bl	800cd24 <pbuf_add_header>
 8014486:	4603      	mov	r3, r0
 8014488:	2b00      	cmp	r3, #0
 801448a:	d12b      	bne.n	80144e4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	685b      	ldr	r3, [r3, #4]
 8014490:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014492:	69fb      	ldr	r3, [r7, #28]
 8014494:	681a      	ldr	r2, [r3, #0]
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801449a:	4b20      	ldr	r3, [pc, #128]	; (801451c <icmp_input+0x1f0>)
 801449c:	691a      	ldr	r2, [r3, #16]
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	2200      	movs	r2, #0
 80144a6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80144a8:	693b      	ldr	r3, [r7, #16]
 80144aa:	2200      	movs	r2, #0
 80144ac:	709a      	strb	r2, [r3, #2]
 80144ae:	2200      	movs	r2, #0
 80144b0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	22ff      	movs	r2, #255	; 0xff
 80144b6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	2200      	movs	r2, #0
 80144bc:	729a      	strb	r2, [r3, #10]
 80144be:	2200      	movs	r2, #0
 80144c0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80144c2:	683b      	ldr	r3, [r7, #0]
 80144c4:	9302      	str	r3, [sp, #8]
 80144c6:	2301      	movs	r3, #1
 80144c8:	9301      	str	r3, [sp, #4]
 80144ca:	2300      	movs	r3, #0
 80144cc:	9300      	str	r3, [sp, #0]
 80144ce:	23ff      	movs	r3, #255	; 0xff
 80144d0:	2200      	movs	r2, #0
 80144d2:	69f9      	ldr	r1, [r7, #28]
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f000 fa75 	bl	80149c4 <ip4_output_if>
 80144da:	4603      	mov	r3, r0
 80144dc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80144de:	e001      	b.n	80144e4 <icmp_input+0x1b8>
      break;
 80144e0:	bf00      	nop
 80144e2:	e000      	b.n	80144e6 <icmp_input+0x1ba>
      break;
 80144e4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80144e6:	6878      	ldr	r0, [r7, #4]
 80144e8:	f7f8 fcb2 	bl	800ce50 <pbuf_free>
  return;
 80144ec:	e013      	b.n	8014516 <icmp_input+0x1ea>
    goto lenerr;
 80144ee:	bf00      	nop
 80144f0:	e002      	b.n	80144f8 <icmp_input+0x1cc>
    goto lenerr;
 80144f2:	bf00      	nop
 80144f4:	e000      	b.n	80144f8 <icmp_input+0x1cc>
        goto lenerr;
 80144f6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80144f8:	6878      	ldr	r0, [r7, #4]
 80144fa:	f7f8 fca9 	bl	800ce50 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80144fe:	e00a      	b.n	8014516 <icmp_input+0x1ea>
        goto icmperr;
 8014500:	bf00      	nop
 8014502:	e004      	b.n	801450e <icmp_input+0x1e2>
        goto icmperr;
 8014504:	bf00      	nop
 8014506:	e002      	b.n	801450e <icmp_input+0x1e2>
          goto icmperr;
 8014508:	bf00      	nop
 801450a:	e000      	b.n	801450e <icmp_input+0x1e2>
          goto icmperr;
 801450c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801450e:	6878      	ldr	r0, [r7, #4]
 8014510:	f7f8 fc9e 	bl	800ce50 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014514:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014516:	3728      	adds	r7, #40	; 0x28
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}
 801451c:	200059b0 	.word	0x200059b0
 8014520:	200059c4 	.word	0x200059c4
 8014524:	0801981c 	.word	0x0801981c
 8014528:	08019854 	.word	0x08019854
 801452c:	0801988c 	.word	0x0801988c
 8014530:	080198b4 	.word	0x080198b4

08014534 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b082      	sub	sp, #8
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
 801453c:	460b      	mov	r3, r1
 801453e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014540:	78fb      	ldrb	r3, [r7, #3]
 8014542:	461a      	mov	r2, r3
 8014544:	2103      	movs	r1, #3
 8014546:	6878      	ldr	r0, [r7, #4]
 8014548:	f000 f814 	bl	8014574 <icmp_send_response>
}
 801454c:	bf00      	nop
 801454e:	3708      	adds	r7, #8
 8014550:	46bd      	mov	sp, r7
 8014552:	bd80      	pop	{r7, pc}

08014554 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014554:	b580      	push	{r7, lr}
 8014556:	b082      	sub	sp, #8
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	460b      	mov	r3, r1
 801455e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014560:	78fb      	ldrb	r3, [r7, #3]
 8014562:	461a      	mov	r2, r3
 8014564:	210b      	movs	r1, #11
 8014566:	6878      	ldr	r0, [r7, #4]
 8014568:	f000 f804 	bl	8014574 <icmp_send_response>
}
 801456c:	bf00      	nop
 801456e:	3708      	adds	r7, #8
 8014570:	46bd      	mov	sp, r7
 8014572:	bd80      	pop	{r7, pc}

08014574 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014574:	b580      	push	{r7, lr}
 8014576:	b08c      	sub	sp, #48	; 0x30
 8014578:	af04      	add	r7, sp, #16
 801457a:	6078      	str	r0, [r7, #4]
 801457c:	460b      	mov	r3, r1
 801457e:	70fb      	strb	r3, [r7, #3]
 8014580:	4613      	mov	r3, r2
 8014582:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014584:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014588:	2124      	movs	r1, #36	; 0x24
 801458a:	2022      	movs	r0, #34	; 0x22
 801458c:	f7f8 f97c 	bl	800c888 <pbuf_alloc>
 8014590:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014592:	69fb      	ldr	r3, [r7, #28]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d04c      	beq.n	8014632 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014598:	69fb      	ldr	r3, [r7, #28]
 801459a:	895b      	ldrh	r3, [r3, #10]
 801459c:	2b23      	cmp	r3, #35	; 0x23
 801459e:	d806      	bhi.n	80145ae <icmp_send_response+0x3a>
 80145a0:	4b26      	ldr	r3, [pc, #152]	; (801463c <icmp_send_response+0xc8>)
 80145a2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80145a6:	4926      	ldr	r1, [pc, #152]	; (8014640 <icmp_send_response+0xcc>)
 80145a8:	4826      	ldr	r0, [pc, #152]	; (8014644 <icmp_send_response+0xd0>)
 80145aa:	f001 fe11 	bl	80161d0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	685b      	ldr	r3, [r3, #4]
 80145b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80145b4:	69fb      	ldr	r3, [r7, #28]
 80145b6:	685b      	ldr	r3, [r3, #4]
 80145b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80145ba:	697b      	ldr	r3, [r7, #20]
 80145bc:	78fa      	ldrb	r2, [r7, #3]
 80145be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80145c0:	697b      	ldr	r3, [r7, #20]
 80145c2:	78ba      	ldrb	r2, [r7, #2]
 80145c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80145c6:	697b      	ldr	r3, [r7, #20]
 80145c8:	2200      	movs	r2, #0
 80145ca:	711a      	strb	r2, [r3, #4]
 80145cc:	2200      	movs	r2, #0
 80145ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80145d0:	697b      	ldr	r3, [r7, #20]
 80145d2:	2200      	movs	r2, #0
 80145d4:	719a      	strb	r2, [r3, #6]
 80145d6:	2200      	movs	r2, #0
 80145d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80145da:	69fb      	ldr	r3, [r7, #28]
 80145dc:	685b      	ldr	r3, [r3, #4]
 80145de:	f103 0008 	add.w	r0, r3, #8
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	685b      	ldr	r3, [r3, #4]
 80145e6:	221c      	movs	r2, #28
 80145e8:	4619      	mov	r1, r3
 80145ea:	f001 fddb 	bl	80161a4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80145ee:	69bb      	ldr	r3, [r7, #24]
 80145f0:	68db      	ldr	r3, [r3, #12]
 80145f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80145f4:	f107 030c 	add.w	r3, r7, #12
 80145f8:	4618      	mov	r0, r3
 80145fa:	f000 f825 	bl	8014648 <ip4_route>
 80145fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014600:	693b      	ldr	r3, [r7, #16]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d011      	beq.n	801462a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014606:	697b      	ldr	r3, [r7, #20]
 8014608:	2200      	movs	r2, #0
 801460a:	709a      	strb	r2, [r3, #2]
 801460c:	2200      	movs	r2, #0
 801460e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014610:	f107 020c 	add.w	r2, r7, #12
 8014614:	693b      	ldr	r3, [r7, #16]
 8014616:	9302      	str	r3, [sp, #8]
 8014618:	2301      	movs	r3, #1
 801461a:	9301      	str	r3, [sp, #4]
 801461c:	2300      	movs	r3, #0
 801461e:	9300      	str	r3, [sp, #0]
 8014620:	23ff      	movs	r3, #255	; 0xff
 8014622:	2100      	movs	r1, #0
 8014624:	69f8      	ldr	r0, [r7, #28]
 8014626:	f000 f9cd 	bl	80149c4 <ip4_output_if>
  }
  pbuf_free(q);
 801462a:	69f8      	ldr	r0, [r7, #28]
 801462c:	f7f8 fc10 	bl	800ce50 <pbuf_free>
 8014630:	e000      	b.n	8014634 <icmp_send_response+0xc0>
    return;
 8014632:	bf00      	nop
}
 8014634:	3720      	adds	r7, #32
 8014636:	46bd      	mov	sp, r7
 8014638:	bd80      	pop	{r7, pc}
 801463a:	bf00      	nop
 801463c:	0801981c 	.word	0x0801981c
 8014640:	080198e8 	.word	0x080198e8
 8014644:	0801988c 	.word	0x0801988c

08014648 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014648:	b480      	push	{r7}
 801464a:	b085      	sub	sp, #20
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014650:	4b33      	ldr	r3, [pc, #204]	; (8014720 <ip4_route+0xd8>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	60fb      	str	r3, [r7, #12]
 8014656:	e036      	b.n	80146c6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801465e:	f003 0301 	and.w	r3, r3, #1
 8014662:	b2db      	uxtb	r3, r3
 8014664:	2b00      	cmp	r3, #0
 8014666:	d02b      	beq.n	80146c0 <ip4_route+0x78>
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801466e:	089b      	lsrs	r3, r3, #2
 8014670:	f003 0301 	and.w	r3, r3, #1
 8014674:	b2db      	uxtb	r3, r3
 8014676:	2b00      	cmp	r3, #0
 8014678:	d022      	beq.n	80146c0 <ip4_route+0x78>
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	3304      	adds	r3, #4
 801467e:	681b      	ldr	r3, [r3, #0]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d01d      	beq.n	80146c0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	681a      	ldr	r2, [r3, #0]
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	3304      	adds	r3, #4
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	405a      	eors	r2, r3
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	3308      	adds	r3, #8
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	4013      	ands	r3, r2
 8014698:	2b00      	cmp	r3, #0
 801469a:	d101      	bne.n	80146a0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801469c:	68fb      	ldr	r3, [r7, #12]
 801469e:	e038      	b.n	8014712 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80146a6:	f003 0302 	and.w	r3, r3, #2
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d108      	bne.n	80146c0 <ip4_route+0x78>
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	681a      	ldr	r2, [r3, #0]
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	330c      	adds	r3, #12
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d101      	bne.n	80146c0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	e028      	b.n	8014712 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	60fb      	str	r3, [r7, #12]
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d1c5      	bne.n	8014658 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80146cc:	4b15      	ldr	r3, [pc, #84]	; (8014724 <ip4_route+0xdc>)
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d01a      	beq.n	801470a <ip4_route+0xc2>
 80146d4:	4b13      	ldr	r3, [pc, #76]	; (8014724 <ip4_route+0xdc>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80146dc:	f003 0301 	and.w	r3, r3, #1
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d012      	beq.n	801470a <ip4_route+0xc2>
 80146e4:	4b0f      	ldr	r3, [pc, #60]	; (8014724 <ip4_route+0xdc>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80146ec:	f003 0304 	and.w	r3, r3, #4
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d00a      	beq.n	801470a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80146f4:	4b0b      	ldr	r3, [pc, #44]	; (8014724 <ip4_route+0xdc>)
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	3304      	adds	r3, #4
 80146fa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d004      	beq.n	801470a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	681b      	ldr	r3, [r3, #0]
 8014704:	b2db      	uxtb	r3, r3
 8014706:	2b7f      	cmp	r3, #127	; 0x7f
 8014708:	d101      	bne.n	801470e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801470a:	2300      	movs	r3, #0
 801470c:	e001      	b.n	8014712 <ip4_route+0xca>
  }

  return netif_default;
 801470e:	4b05      	ldr	r3, [pc, #20]	; (8014724 <ip4_route+0xdc>)
 8014710:	681b      	ldr	r3, [r3, #0]
}
 8014712:	4618      	mov	r0, r3
 8014714:	3714      	adds	r7, #20
 8014716:	46bd      	mov	sp, r7
 8014718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471c:	4770      	bx	lr
 801471e:	bf00      	nop
 8014720:	20008f14 	.word	0x20008f14
 8014724:	20008f18 	.word	0x20008f18

08014728 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b082      	sub	sp, #8
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014736:	f003 0301 	and.w	r3, r3, #1
 801473a:	b2db      	uxtb	r3, r3
 801473c:	2b00      	cmp	r3, #0
 801473e:	d016      	beq.n	801476e <ip4_input_accept+0x46>
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	3304      	adds	r3, #4
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d011      	beq.n	801476e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801474a:	4b0b      	ldr	r3, [pc, #44]	; (8014778 <ip4_input_accept+0x50>)
 801474c:	695a      	ldr	r2, [r3, #20]
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	3304      	adds	r3, #4
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	429a      	cmp	r2, r3
 8014756:	d008      	beq.n	801476a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014758:	4b07      	ldr	r3, [pc, #28]	; (8014778 <ip4_input_accept+0x50>)
 801475a:	695b      	ldr	r3, [r3, #20]
 801475c:	6879      	ldr	r1, [r7, #4]
 801475e:	4618      	mov	r0, r3
 8014760:	f000 fa08 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 8014764:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014766:	2b00      	cmp	r3, #0
 8014768:	d001      	beq.n	801476e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801476a:	2301      	movs	r3, #1
 801476c:	e000      	b.n	8014770 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801476e:	2300      	movs	r3, #0
}
 8014770:	4618      	mov	r0, r3
 8014772:	3708      	adds	r7, #8
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}
 8014778:	200059b0 	.word	0x200059b0

0801477c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b086      	sub	sp, #24
 8014780:	af00      	add	r7, sp, #0
 8014782:	6078      	str	r0, [r7, #4]
 8014784:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	685b      	ldr	r3, [r3, #4]
 801478a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801478c:	697b      	ldr	r3, [r7, #20]
 801478e:	781b      	ldrb	r3, [r3, #0]
 8014790:	091b      	lsrs	r3, r3, #4
 8014792:	b2db      	uxtb	r3, r3
 8014794:	2b04      	cmp	r3, #4
 8014796:	d004      	beq.n	80147a2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f7f8 fb59 	bl	800ce50 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801479e:	2300      	movs	r3, #0
 80147a0:	e107      	b.n	80149b2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80147a2:	697b      	ldr	r3, [r7, #20]
 80147a4:	781b      	ldrb	r3, [r3, #0]
 80147a6:	f003 030f 	and.w	r3, r3, #15
 80147aa:	b2db      	uxtb	r3, r3
 80147ac:	009b      	lsls	r3, r3, #2
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	885b      	ldrh	r3, [r3, #2]
 80147b6:	b29b      	uxth	r3, r3
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7f6 ffeb 	bl	800b794 <lwip_htons>
 80147be:	4603      	mov	r3, r0
 80147c0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	891b      	ldrh	r3, [r3, #8]
 80147c6:	89ba      	ldrh	r2, [r7, #12]
 80147c8:	429a      	cmp	r2, r3
 80147ca:	d204      	bcs.n	80147d6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80147cc:	89bb      	ldrh	r3, [r7, #12]
 80147ce:	4619      	mov	r1, r3
 80147d0:	6878      	ldr	r0, [r7, #4]
 80147d2:	f7f8 f9b7 	bl	800cb44 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	895b      	ldrh	r3, [r3, #10]
 80147da:	89fa      	ldrh	r2, [r7, #14]
 80147dc:	429a      	cmp	r2, r3
 80147de:	d807      	bhi.n	80147f0 <ip4_input+0x74>
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	891b      	ldrh	r3, [r3, #8]
 80147e4:	89ba      	ldrh	r2, [r7, #12]
 80147e6:	429a      	cmp	r2, r3
 80147e8:	d802      	bhi.n	80147f0 <ip4_input+0x74>
 80147ea:	89fb      	ldrh	r3, [r7, #14]
 80147ec:	2b13      	cmp	r3, #19
 80147ee:	d804      	bhi.n	80147fa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80147f0:	6878      	ldr	r0, [r7, #4]
 80147f2:	f7f8 fb2d 	bl	800ce50 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80147f6:	2300      	movs	r3, #0
 80147f8:	e0db      	b.n	80149b2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80147fa:	697b      	ldr	r3, [r7, #20]
 80147fc:	691b      	ldr	r3, [r3, #16]
 80147fe:	4a6f      	ldr	r2, [pc, #444]	; (80149bc <ip4_input+0x240>)
 8014800:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	68db      	ldr	r3, [r3, #12]
 8014806:	4a6d      	ldr	r2, [pc, #436]	; (80149bc <ip4_input+0x240>)
 8014808:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801480a:	4b6c      	ldr	r3, [pc, #432]	; (80149bc <ip4_input+0x240>)
 801480c:	695b      	ldr	r3, [r3, #20]
 801480e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014812:	2be0      	cmp	r3, #224	; 0xe0
 8014814:	d112      	bne.n	801483c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801481c:	f003 0301 	and.w	r3, r3, #1
 8014820:	b2db      	uxtb	r3, r3
 8014822:	2b00      	cmp	r3, #0
 8014824:	d007      	beq.n	8014836 <ip4_input+0xba>
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	3304      	adds	r3, #4
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	2b00      	cmp	r3, #0
 801482e:	d002      	beq.n	8014836 <ip4_input+0xba>
      netif = inp;
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	613b      	str	r3, [r7, #16]
 8014834:	e02a      	b.n	801488c <ip4_input+0x110>
    } else {
      netif = NULL;
 8014836:	2300      	movs	r3, #0
 8014838:	613b      	str	r3, [r7, #16]
 801483a:	e027      	b.n	801488c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801483c:	6838      	ldr	r0, [r7, #0]
 801483e:	f7ff ff73 	bl	8014728 <ip4_input_accept>
 8014842:	4603      	mov	r3, r0
 8014844:	2b00      	cmp	r3, #0
 8014846:	d002      	beq.n	801484e <ip4_input+0xd2>
      netif = inp;
 8014848:	683b      	ldr	r3, [r7, #0]
 801484a:	613b      	str	r3, [r7, #16]
 801484c:	e01e      	b.n	801488c <ip4_input+0x110>
    } else {
      netif = NULL;
 801484e:	2300      	movs	r3, #0
 8014850:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014852:	4b5a      	ldr	r3, [pc, #360]	; (80149bc <ip4_input+0x240>)
 8014854:	695b      	ldr	r3, [r3, #20]
 8014856:	b2db      	uxtb	r3, r3
 8014858:	2b7f      	cmp	r3, #127	; 0x7f
 801485a:	d017      	beq.n	801488c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801485c:	4b58      	ldr	r3, [pc, #352]	; (80149c0 <ip4_input+0x244>)
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	613b      	str	r3, [r7, #16]
 8014862:	e00e      	b.n	8014882 <ip4_input+0x106>
          if (netif == inp) {
 8014864:	693a      	ldr	r2, [r7, #16]
 8014866:	683b      	ldr	r3, [r7, #0]
 8014868:	429a      	cmp	r2, r3
 801486a:	d006      	beq.n	801487a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801486c:	6938      	ldr	r0, [r7, #16]
 801486e:	f7ff ff5b 	bl	8014728 <ip4_input_accept>
 8014872:	4603      	mov	r3, r0
 8014874:	2b00      	cmp	r3, #0
 8014876:	d108      	bne.n	801488a <ip4_input+0x10e>
 8014878:	e000      	b.n	801487c <ip4_input+0x100>
            continue;
 801487a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	613b      	str	r3, [r7, #16]
 8014882:	693b      	ldr	r3, [r7, #16]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d1ed      	bne.n	8014864 <ip4_input+0xe8>
 8014888:	e000      	b.n	801488c <ip4_input+0x110>
            break;
 801488a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801488c:	4b4b      	ldr	r3, [pc, #300]	; (80149bc <ip4_input+0x240>)
 801488e:	691b      	ldr	r3, [r3, #16]
 8014890:	6839      	ldr	r1, [r7, #0]
 8014892:	4618      	mov	r0, r3
 8014894:	f000 f96e 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 8014898:	4603      	mov	r3, r0
 801489a:	2b00      	cmp	r3, #0
 801489c:	d105      	bne.n	80148aa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801489e:	4b47      	ldr	r3, [pc, #284]	; (80149bc <ip4_input+0x240>)
 80148a0:	691b      	ldr	r3, [r3, #16]
 80148a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80148a6:	2be0      	cmp	r3, #224	; 0xe0
 80148a8:	d104      	bne.n	80148b4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80148aa:	6878      	ldr	r0, [r7, #4]
 80148ac:	f7f8 fad0 	bl	800ce50 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80148b0:	2300      	movs	r3, #0
 80148b2:	e07e      	b.n	80149b2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80148b4:	693b      	ldr	r3, [r7, #16]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d104      	bne.n	80148c4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	f7f8 fac8 	bl	800ce50 <pbuf_free>
    return ERR_OK;
 80148c0:	2300      	movs	r3, #0
 80148c2:	e076      	b.n	80149b2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	88db      	ldrh	r3, [r3, #6]
 80148c8:	b29b      	uxth	r3, r3
 80148ca:	461a      	mov	r2, r3
 80148cc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80148d0:	4013      	ands	r3, r2
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d00b      	beq.n	80148ee <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f000 fc92 	bl	8015200 <ip4_reass>
 80148dc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d101      	bne.n	80148e8 <ip4_input+0x16c>
      return ERR_OK;
 80148e4:	2300      	movs	r3, #0
 80148e6:	e064      	b.n	80149b2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	685b      	ldr	r3, [r3, #4]
 80148ec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80148ee:	4a33      	ldr	r2, [pc, #204]	; (80149bc <ip4_input+0x240>)
 80148f0:	693b      	ldr	r3, [r7, #16]
 80148f2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80148f4:	4a31      	ldr	r2, [pc, #196]	; (80149bc <ip4_input+0x240>)
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80148fa:	4a30      	ldr	r2, [pc, #192]	; (80149bc <ip4_input+0x240>)
 80148fc:	697b      	ldr	r3, [r7, #20]
 80148fe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	781b      	ldrb	r3, [r3, #0]
 8014904:	f003 030f 	and.w	r3, r3, #15
 8014908:	b2db      	uxtb	r3, r3
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	b2db      	uxtb	r3, r3
 801490e:	b29a      	uxth	r2, r3
 8014910:	4b2a      	ldr	r3, [pc, #168]	; (80149bc <ip4_input+0x240>)
 8014912:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014914:	89fb      	ldrh	r3, [r7, #14]
 8014916:	4619      	mov	r1, r3
 8014918:	6878      	ldr	r0, [r7, #4]
 801491a:	f7f8 fa13 	bl	800cd44 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	7a5b      	ldrb	r3, [r3, #9]
 8014922:	2b11      	cmp	r3, #17
 8014924:	d006      	beq.n	8014934 <ip4_input+0x1b8>
 8014926:	2b11      	cmp	r3, #17
 8014928:	dc13      	bgt.n	8014952 <ip4_input+0x1d6>
 801492a:	2b01      	cmp	r3, #1
 801492c:	d00c      	beq.n	8014948 <ip4_input+0x1cc>
 801492e:	2b06      	cmp	r3, #6
 8014930:	d005      	beq.n	801493e <ip4_input+0x1c2>
 8014932:	e00e      	b.n	8014952 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014934:	6839      	ldr	r1, [r7, #0]
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f7fe f90e 	bl	8012b58 <udp_input>
        break;
 801493c:	e026      	b.n	801498c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801493e:	6839      	ldr	r1, [r7, #0]
 8014940:	6878      	ldr	r0, [r7, #4]
 8014942:	f7fa f94f 	bl	800ebe4 <tcp_input>
        break;
 8014946:	e021      	b.n	801498c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014948:	6839      	ldr	r1, [r7, #0]
 801494a:	6878      	ldr	r0, [r7, #4]
 801494c:	f7ff fcee 	bl	801432c <icmp_input>
        break;
 8014950:	e01c      	b.n	801498c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014952:	4b1a      	ldr	r3, [pc, #104]	; (80149bc <ip4_input+0x240>)
 8014954:	695b      	ldr	r3, [r3, #20]
 8014956:	6939      	ldr	r1, [r7, #16]
 8014958:	4618      	mov	r0, r3
 801495a:	f000 f90b 	bl	8014b74 <ip4_addr_isbroadcast_u32>
 801495e:	4603      	mov	r3, r0
 8014960:	2b00      	cmp	r3, #0
 8014962:	d10f      	bne.n	8014984 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014964:	4b15      	ldr	r3, [pc, #84]	; (80149bc <ip4_input+0x240>)
 8014966:	695b      	ldr	r3, [r3, #20]
 8014968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801496c:	2be0      	cmp	r3, #224	; 0xe0
 801496e:	d009      	beq.n	8014984 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014970:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014974:	4619      	mov	r1, r3
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f7f8 fa57 	bl	800ce2a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801497c:	2102      	movs	r1, #2
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f7ff fdd8 	bl	8014534 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014984:	6878      	ldr	r0, [r7, #4]
 8014986:	f7f8 fa63 	bl	800ce50 <pbuf_free>
        break;
 801498a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801498c:	4b0b      	ldr	r3, [pc, #44]	; (80149bc <ip4_input+0x240>)
 801498e:	2200      	movs	r2, #0
 8014990:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014992:	4b0a      	ldr	r3, [pc, #40]	; (80149bc <ip4_input+0x240>)
 8014994:	2200      	movs	r2, #0
 8014996:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014998:	4b08      	ldr	r3, [pc, #32]	; (80149bc <ip4_input+0x240>)
 801499a:	2200      	movs	r2, #0
 801499c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801499e:	4b07      	ldr	r3, [pc, #28]	; (80149bc <ip4_input+0x240>)
 80149a0:	2200      	movs	r2, #0
 80149a2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80149a4:	4b05      	ldr	r3, [pc, #20]	; (80149bc <ip4_input+0x240>)
 80149a6:	2200      	movs	r2, #0
 80149a8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80149aa:	4b04      	ldr	r3, [pc, #16]	; (80149bc <ip4_input+0x240>)
 80149ac:	2200      	movs	r2, #0
 80149ae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80149b0:	2300      	movs	r3, #0
}
 80149b2:	4618      	mov	r0, r3
 80149b4:	3718      	adds	r7, #24
 80149b6:	46bd      	mov	sp, r7
 80149b8:	bd80      	pop	{r7, pc}
 80149ba:	bf00      	nop
 80149bc:	200059b0 	.word	0x200059b0
 80149c0:	20008f14 	.word	0x20008f14

080149c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b08a      	sub	sp, #40	; 0x28
 80149c8:	af04      	add	r7, sp, #16
 80149ca:	60f8      	str	r0, [r7, #12]
 80149cc:	60b9      	str	r1, [r7, #8]
 80149ce:	607a      	str	r2, [r7, #4]
 80149d0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80149d2:	68bb      	ldr	r3, [r7, #8]
 80149d4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d009      	beq.n	80149f0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80149dc:	68bb      	ldr	r3, [r7, #8]
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d003      	beq.n	80149ea <ip4_output_if+0x26>
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d102      	bne.n	80149f0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80149ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ec:	3304      	adds	r3, #4
 80149ee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80149f0:	78fa      	ldrb	r2, [r7, #3]
 80149f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149f4:	9302      	str	r3, [sp, #8]
 80149f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80149fa:	9301      	str	r3, [sp, #4]
 80149fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014a00:	9300      	str	r3, [sp, #0]
 8014a02:	4613      	mov	r3, r2
 8014a04:	687a      	ldr	r2, [r7, #4]
 8014a06:	6979      	ldr	r1, [r7, #20]
 8014a08:	68f8      	ldr	r0, [r7, #12]
 8014a0a:	f000 f805 	bl	8014a18 <ip4_output_if_src>
 8014a0e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	3718      	adds	r7, #24
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd80      	pop	{r7, pc}

08014a18 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b088      	sub	sp, #32
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	60f8      	str	r0, [r7, #12]
 8014a20:	60b9      	str	r1, [r7, #8]
 8014a22:	607a      	str	r2, [r7, #4]
 8014a24:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	7b9b      	ldrb	r3, [r3, #14]
 8014a2a:	2b01      	cmp	r3, #1
 8014a2c:	d006      	beq.n	8014a3c <ip4_output_if_src+0x24>
 8014a2e:	4b4b      	ldr	r3, [pc, #300]	; (8014b5c <ip4_output_if_src+0x144>)
 8014a30:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014a34:	494a      	ldr	r1, [pc, #296]	; (8014b60 <ip4_output_if_src+0x148>)
 8014a36:	484b      	ldr	r0, [pc, #300]	; (8014b64 <ip4_output_if_src+0x14c>)
 8014a38:	f001 fbca 	bl	80161d0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d060      	beq.n	8014b04 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014a42:	2314      	movs	r3, #20
 8014a44:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014a46:	2114      	movs	r1, #20
 8014a48:	68f8      	ldr	r0, [r7, #12]
 8014a4a:	f7f8 f96b 	bl	800cd24 <pbuf_add_header>
 8014a4e:	4603      	mov	r3, r0
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d002      	beq.n	8014a5a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014a54:	f06f 0301 	mvn.w	r3, #1
 8014a58:	e07c      	b.n	8014b54 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	685b      	ldr	r3, [r3, #4]
 8014a5e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	895b      	ldrh	r3, [r3, #10]
 8014a64:	2b13      	cmp	r3, #19
 8014a66:	d806      	bhi.n	8014a76 <ip4_output_if_src+0x5e>
 8014a68:	4b3c      	ldr	r3, [pc, #240]	; (8014b5c <ip4_output_if_src+0x144>)
 8014a6a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014a6e:	493e      	ldr	r1, [pc, #248]	; (8014b68 <ip4_output_if_src+0x150>)
 8014a70:	483c      	ldr	r0, [pc, #240]	; (8014b64 <ip4_output_if_src+0x14c>)
 8014a72:	f001 fbad 	bl	80161d0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014a76:	69fb      	ldr	r3, [r7, #28]
 8014a78:	78fa      	ldrb	r2, [r7, #3]
 8014a7a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014a7c:	69fb      	ldr	r3, [r7, #28]
 8014a7e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014a82:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	69fb      	ldr	r3, [r7, #28]
 8014a8a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014a8c:	8b7b      	ldrh	r3, [r7, #26]
 8014a8e:	089b      	lsrs	r3, r3, #2
 8014a90:	b29b      	uxth	r3, r3
 8014a92:	b2db      	uxtb	r3, r3
 8014a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a98:	b2da      	uxtb	r2, r3
 8014a9a:	69fb      	ldr	r3, [r7, #28]
 8014a9c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014a9e:	69fb      	ldr	r3, [r7, #28]
 8014aa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014aa4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	891b      	ldrh	r3, [r3, #8]
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f7f6 fe72 	bl	800b794 <lwip_htons>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	69fb      	ldr	r3, [r7, #28]
 8014ab6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014ab8:	69fb      	ldr	r3, [r7, #28]
 8014aba:	2200      	movs	r2, #0
 8014abc:	719a      	strb	r2, [r3, #6]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014ac2:	4b2a      	ldr	r3, [pc, #168]	; (8014b6c <ip4_output_if_src+0x154>)
 8014ac4:	881b      	ldrh	r3, [r3, #0]
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7f6 fe64 	bl	800b794 <lwip_htons>
 8014acc:	4603      	mov	r3, r0
 8014ace:	461a      	mov	r2, r3
 8014ad0:	69fb      	ldr	r3, [r7, #28]
 8014ad2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014ad4:	4b25      	ldr	r3, [pc, #148]	; (8014b6c <ip4_output_if_src+0x154>)
 8014ad6:	881b      	ldrh	r3, [r3, #0]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	b29a      	uxth	r2, r3
 8014adc:	4b23      	ldr	r3, [pc, #140]	; (8014b6c <ip4_output_if_src+0x154>)
 8014ade:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014ae0:	68bb      	ldr	r3, [r7, #8]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d104      	bne.n	8014af0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014ae6:	4b22      	ldr	r3, [pc, #136]	; (8014b70 <ip4_output_if_src+0x158>)
 8014ae8:	681a      	ldr	r2, [r3, #0]
 8014aea:	69fb      	ldr	r3, [r7, #28]
 8014aec:	60da      	str	r2, [r3, #12]
 8014aee:	e003      	b.n	8014af8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	681a      	ldr	r2, [r3, #0]
 8014af4:	69fb      	ldr	r3, [r7, #28]
 8014af6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014af8:	69fb      	ldr	r3, [r7, #28]
 8014afa:	2200      	movs	r2, #0
 8014afc:	729a      	strb	r2, [r3, #10]
 8014afe:	2200      	movs	r2, #0
 8014b00:	72da      	strb	r2, [r3, #11]
 8014b02:	e00f      	b.n	8014b24 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	895b      	ldrh	r3, [r3, #10]
 8014b08:	2b13      	cmp	r3, #19
 8014b0a:	d802      	bhi.n	8014b12 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014b0c:	f06f 0301 	mvn.w	r3, #1
 8014b10:	e020      	b.n	8014b54 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	685b      	ldr	r3, [r3, #4]
 8014b16:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014b18:	69fb      	ldr	r3, [r7, #28]
 8014b1a:	691b      	ldr	r3, [r3, #16]
 8014b1c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014b1e:	f107 0314 	add.w	r3, r7, #20
 8014b22:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d00c      	beq.n	8014b46 <ip4_output_if_src+0x12e>
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	891a      	ldrh	r2, [r3, #8]
 8014b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014b34:	429a      	cmp	r2, r3
 8014b36:	d906      	bls.n	8014b46 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014b38:	687a      	ldr	r2, [r7, #4]
 8014b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014b3c:	68f8      	ldr	r0, [r7, #12]
 8014b3e:	f000 fd53 	bl	80155e8 <ip4_frag>
 8014b42:	4603      	mov	r3, r0
 8014b44:	e006      	b.n	8014b54 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b48:	695b      	ldr	r3, [r3, #20]
 8014b4a:	687a      	ldr	r2, [r7, #4]
 8014b4c:	68f9      	ldr	r1, [r7, #12]
 8014b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b50:	4798      	blx	r3
 8014b52:	4603      	mov	r3, r0
}
 8014b54:	4618      	mov	r0, r3
 8014b56:	3720      	adds	r7, #32
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}
 8014b5c:	08019914 	.word	0x08019914
 8014b60:	08019948 	.word	0x08019948
 8014b64:	08019954 	.word	0x08019954
 8014b68:	0801997c 	.word	0x0801997c
 8014b6c:	20009072 	.word	0x20009072
 8014b70:	08019d88 	.word	0x08019d88

08014b74 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014b74:	b480      	push	{r7}
 8014b76:	b085      	sub	sp, #20
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
 8014b7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b88:	d002      	beq.n	8014b90 <ip4_addr_isbroadcast_u32+0x1c>
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d101      	bne.n	8014b94 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014b90:	2301      	movs	r3, #1
 8014b92:	e02a      	b.n	8014bea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014b94:	683b      	ldr	r3, [r7, #0]
 8014b96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014b9a:	f003 0302 	and.w	r3, r3, #2
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d101      	bne.n	8014ba6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	e021      	b.n	8014bea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	3304      	adds	r3, #4
 8014baa:	681b      	ldr	r3, [r3, #0]
 8014bac:	687a      	ldr	r2, [r7, #4]
 8014bae:	429a      	cmp	r2, r3
 8014bb0:	d101      	bne.n	8014bb6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014bb2:	2300      	movs	r3, #0
 8014bb4:	e019      	b.n	8014bea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014bb6:	68fa      	ldr	r2, [r7, #12]
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	3304      	adds	r3, #4
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	405a      	eors	r2, r3
 8014bc0:	683b      	ldr	r3, [r7, #0]
 8014bc2:	3308      	adds	r3, #8
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	4013      	ands	r3, r2
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d10d      	bne.n	8014be8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	3308      	adds	r3, #8
 8014bd0:	681b      	ldr	r3, [r3, #0]
 8014bd2:	43da      	mvns	r2, r3
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014bd8:	683b      	ldr	r3, [r7, #0]
 8014bda:	3308      	adds	r3, #8
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014be0:	429a      	cmp	r2, r3
 8014be2:	d101      	bne.n	8014be8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014be4:	2301      	movs	r3, #1
 8014be6:	e000      	b.n	8014bea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014be8:	2300      	movs	r3, #0
  }
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	3714      	adds	r7, #20
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bf4:	4770      	bx	lr
	...

08014bf8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014bf8:	b580      	push	{r7, lr}
 8014bfa:	b084      	sub	sp, #16
 8014bfc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014bfe:	2300      	movs	r3, #0
 8014c00:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014c02:	4b12      	ldr	r3, [pc, #72]	; (8014c4c <ip_reass_tmr+0x54>)
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014c08:	e018      	b.n	8014c3c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	7fdb      	ldrb	r3, [r3, #31]
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d00b      	beq.n	8014c2a <ip_reass_tmr+0x32>
      r->timer--;
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	7fdb      	ldrb	r3, [r3, #31]
 8014c16:	3b01      	subs	r3, #1
 8014c18:	b2da      	uxtb	r2, r3
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	60fb      	str	r3, [r7, #12]
 8014c28:	e008      	b.n	8014c3c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014c34:	68b9      	ldr	r1, [r7, #8]
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f000 f80a 	bl	8014c50 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d1e3      	bne.n	8014c0a <ip_reass_tmr+0x12>
    }
  }
}
 8014c42:	bf00      	nop
 8014c44:	bf00      	nop
 8014c46:	3710      	adds	r7, #16
 8014c48:	46bd      	mov	sp, r7
 8014c4a:	bd80      	pop	{r7, pc}
 8014c4c:	20009074 	.word	0x20009074

08014c50 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b088      	sub	sp, #32
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014c5e:	683a      	ldr	r2, [r7, #0]
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	429a      	cmp	r2, r3
 8014c64:	d105      	bne.n	8014c72 <ip_reass_free_complete_datagram+0x22>
 8014c66:	4b45      	ldr	r3, [pc, #276]	; (8014d7c <ip_reass_free_complete_datagram+0x12c>)
 8014c68:	22ab      	movs	r2, #171	; 0xab
 8014c6a:	4945      	ldr	r1, [pc, #276]	; (8014d80 <ip_reass_free_complete_datagram+0x130>)
 8014c6c:	4845      	ldr	r0, [pc, #276]	; (8014d84 <ip_reass_free_complete_datagram+0x134>)
 8014c6e:	f001 faaf 	bl	80161d0 <iprintf>
  if (prev != NULL) {
 8014c72:	683b      	ldr	r3, [r7, #0]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d00a      	beq.n	8014c8e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	687a      	ldr	r2, [r7, #4]
 8014c7e:	429a      	cmp	r2, r3
 8014c80:	d005      	beq.n	8014c8e <ip_reass_free_complete_datagram+0x3e>
 8014c82:	4b3e      	ldr	r3, [pc, #248]	; (8014d7c <ip_reass_free_complete_datagram+0x12c>)
 8014c84:	22ad      	movs	r2, #173	; 0xad
 8014c86:	4940      	ldr	r1, [pc, #256]	; (8014d88 <ip_reass_free_complete_datagram+0x138>)
 8014c88:	483e      	ldr	r0, [pc, #248]	; (8014d84 <ip_reass_free_complete_datagram+0x134>)
 8014c8a:	f001 faa1 	bl	80161d0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	685b      	ldr	r3, [r3, #4]
 8014c92:	685b      	ldr	r3, [r3, #4]
 8014c94:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014c96:	697b      	ldr	r3, [r7, #20]
 8014c98:	889b      	ldrh	r3, [r3, #4]
 8014c9a:	b29b      	uxth	r3, r3
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d12a      	bne.n	8014cf6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	681a      	ldr	r2, [r3, #0]
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014cae:	69bb      	ldr	r3, [r7, #24]
 8014cb0:	6858      	ldr	r0, [r3, #4]
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	3308      	adds	r3, #8
 8014cb6:	2214      	movs	r2, #20
 8014cb8:	4619      	mov	r1, r3
 8014cba:	f001 fa73 	bl	80161a4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014cbe:	2101      	movs	r1, #1
 8014cc0:	69b8      	ldr	r0, [r7, #24]
 8014cc2:	f7ff fc47 	bl	8014554 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014cc6:	69b8      	ldr	r0, [r7, #24]
 8014cc8:	f7f8 f94a 	bl	800cf60 <pbuf_clen>
 8014ccc:	4603      	mov	r3, r0
 8014cce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014cd0:	8bfa      	ldrh	r2, [r7, #30]
 8014cd2:	8a7b      	ldrh	r3, [r7, #18]
 8014cd4:	4413      	add	r3, r2
 8014cd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014cda:	db05      	blt.n	8014ce8 <ip_reass_free_complete_datagram+0x98>
 8014cdc:	4b27      	ldr	r3, [pc, #156]	; (8014d7c <ip_reass_free_complete_datagram+0x12c>)
 8014cde:	22bc      	movs	r2, #188	; 0xbc
 8014ce0:	492a      	ldr	r1, [pc, #168]	; (8014d8c <ip_reass_free_complete_datagram+0x13c>)
 8014ce2:	4828      	ldr	r0, [pc, #160]	; (8014d84 <ip_reass_free_complete_datagram+0x134>)
 8014ce4:	f001 fa74 	bl	80161d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014ce8:	8bfa      	ldrh	r2, [r7, #30]
 8014cea:	8a7b      	ldrh	r3, [r7, #18]
 8014cec:	4413      	add	r3, r2
 8014cee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014cf0:	69b8      	ldr	r0, [r7, #24]
 8014cf2:	f7f8 f8ad 	bl	800ce50 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	685b      	ldr	r3, [r3, #4]
 8014cfa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014cfc:	e01f      	b.n	8014d3e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014cfe:	69bb      	ldr	r3, [r7, #24]
 8014d00:	685b      	ldr	r3, [r3, #4]
 8014d02:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014d04:	69bb      	ldr	r3, [r7, #24]
 8014d06:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014d0e:	68f8      	ldr	r0, [r7, #12]
 8014d10:	f7f8 f926 	bl	800cf60 <pbuf_clen>
 8014d14:	4603      	mov	r3, r0
 8014d16:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014d18:	8bfa      	ldrh	r2, [r7, #30]
 8014d1a:	8a7b      	ldrh	r3, [r7, #18]
 8014d1c:	4413      	add	r3, r2
 8014d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014d22:	db05      	blt.n	8014d30 <ip_reass_free_complete_datagram+0xe0>
 8014d24:	4b15      	ldr	r3, [pc, #84]	; (8014d7c <ip_reass_free_complete_datagram+0x12c>)
 8014d26:	22cc      	movs	r2, #204	; 0xcc
 8014d28:	4918      	ldr	r1, [pc, #96]	; (8014d8c <ip_reass_free_complete_datagram+0x13c>)
 8014d2a:	4816      	ldr	r0, [pc, #88]	; (8014d84 <ip_reass_free_complete_datagram+0x134>)
 8014d2c:	f001 fa50 	bl	80161d0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014d30:	8bfa      	ldrh	r2, [r7, #30]
 8014d32:	8a7b      	ldrh	r3, [r7, #18]
 8014d34:	4413      	add	r3, r2
 8014d36:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014d38:	68f8      	ldr	r0, [r7, #12]
 8014d3a:	f7f8 f889 	bl	800ce50 <pbuf_free>
  while (p != NULL) {
 8014d3e:	69bb      	ldr	r3, [r7, #24]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d1dc      	bne.n	8014cfe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014d44:	6839      	ldr	r1, [r7, #0]
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f000 f8c2 	bl	8014ed0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014d4c:	4b10      	ldr	r3, [pc, #64]	; (8014d90 <ip_reass_free_complete_datagram+0x140>)
 8014d4e:	881b      	ldrh	r3, [r3, #0]
 8014d50:	8bfa      	ldrh	r2, [r7, #30]
 8014d52:	429a      	cmp	r2, r3
 8014d54:	d905      	bls.n	8014d62 <ip_reass_free_complete_datagram+0x112>
 8014d56:	4b09      	ldr	r3, [pc, #36]	; (8014d7c <ip_reass_free_complete_datagram+0x12c>)
 8014d58:	22d2      	movs	r2, #210	; 0xd2
 8014d5a:	490e      	ldr	r1, [pc, #56]	; (8014d94 <ip_reass_free_complete_datagram+0x144>)
 8014d5c:	4809      	ldr	r0, [pc, #36]	; (8014d84 <ip_reass_free_complete_datagram+0x134>)
 8014d5e:	f001 fa37 	bl	80161d0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014d62:	4b0b      	ldr	r3, [pc, #44]	; (8014d90 <ip_reass_free_complete_datagram+0x140>)
 8014d64:	881a      	ldrh	r2, [r3, #0]
 8014d66:	8bfb      	ldrh	r3, [r7, #30]
 8014d68:	1ad3      	subs	r3, r2, r3
 8014d6a:	b29a      	uxth	r2, r3
 8014d6c:	4b08      	ldr	r3, [pc, #32]	; (8014d90 <ip_reass_free_complete_datagram+0x140>)
 8014d6e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014d70:	8bfb      	ldrh	r3, [r7, #30]
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3720      	adds	r7, #32
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}
 8014d7a:	bf00      	nop
 8014d7c:	080199ac 	.word	0x080199ac
 8014d80:	080199e8 	.word	0x080199e8
 8014d84:	080199f4 	.word	0x080199f4
 8014d88:	08019a1c 	.word	0x08019a1c
 8014d8c:	08019a30 	.word	0x08019a30
 8014d90:	20009078 	.word	0x20009078
 8014d94:	08019a50 	.word	0x08019a50

08014d98 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	b08a      	sub	sp, #40	; 0x28
 8014d9c:	af00      	add	r7, sp, #0
 8014d9e:	6078      	str	r0, [r7, #4]
 8014da0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014da2:	2300      	movs	r3, #0
 8014da4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014da6:	2300      	movs	r3, #0
 8014da8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014daa:	2300      	movs	r3, #0
 8014dac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014dae:	2300      	movs	r3, #0
 8014db0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014db2:	2300      	movs	r3, #0
 8014db4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014db6:	4b28      	ldr	r3, [pc, #160]	; (8014e58 <ip_reass_remove_oldest_datagram+0xc0>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014dbc:	e030      	b.n	8014e20 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dc0:	695a      	ldr	r2, [r3, #20]
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	68db      	ldr	r3, [r3, #12]
 8014dc6:	429a      	cmp	r2, r3
 8014dc8:	d10c      	bne.n	8014de4 <ip_reass_remove_oldest_datagram+0x4c>
 8014dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dcc:	699a      	ldr	r2, [r3, #24]
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	691b      	ldr	r3, [r3, #16]
 8014dd2:	429a      	cmp	r2, r3
 8014dd4:	d106      	bne.n	8014de4 <ip_reass_remove_oldest_datagram+0x4c>
 8014dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd8:	899a      	ldrh	r2, [r3, #12]
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	889b      	ldrh	r3, [r3, #4]
 8014dde:	b29b      	uxth	r3, r3
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d014      	beq.n	8014e0e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014de4:	693b      	ldr	r3, [r7, #16]
 8014de6:	3301      	adds	r3, #1
 8014de8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014dea:	6a3b      	ldr	r3, [r7, #32]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d104      	bne.n	8014dfa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014df2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	61bb      	str	r3, [r7, #24]
 8014df8:	e009      	b.n	8014e0e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dfc:	7fda      	ldrb	r2, [r3, #31]
 8014dfe:	6a3b      	ldr	r3, [r7, #32]
 8014e00:	7fdb      	ldrb	r3, [r3, #31]
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d803      	bhi.n	8014e0e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e08:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014e0a:	69fb      	ldr	r3, [r7, #28]
 8014e0c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d001      	beq.n	8014e1a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e18:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d1cb      	bne.n	8014dbe <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014e26:	6a3b      	ldr	r3, [r7, #32]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d008      	beq.n	8014e3e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014e2c:	69b9      	ldr	r1, [r7, #24]
 8014e2e:	6a38      	ldr	r0, [r7, #32]
 8014e30:	f7ff ff0e 	bl	8014c50 <ip_reass_free_complete_datagram>
 8014e34:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014e36:	697a      	ldr	r2, [r7, #20]
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	4413      	add	r3, r2
 8014e3c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014e3e:	697a      	ldr	r2, [r7, #20]
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	429a      	cmp	r2, r3
 8014e44:	da02      	bge.n	8014e4c <ip_reass_remove_oldest_datagram+0xb4>
 8014e46:	693b      	ldr	r3, [r7, #16]
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	dcac      	bgt.n	8014da6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014e4c:	697b      	ldr	r3, [r7, #20]
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3728      	adds	r7, #40	; 0x28
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}
 8014e56:	bf00      	nop
 8014e58:	20009074 	.word	0x20009074

08014e5c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b084      	sub	sp, #16
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
 8014e64:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014e66:	2004      	movs	r0, #4
 8014e68:	f7f7 f90c 	bl	800c084 <memp_malloc>
 8014e6c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d110      	bne.n	8014e96 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014e74:	6839      	ldr	r1, [r7, #0]
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	f7ff ff8e 	bl	8014d98 <ip_reass_remove_oldest_datagram>
 8014e7c:	4602      	mov	r2, r0
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	4293      	cmp	r3, r2
 8014e82:	dc03      	bgt.n	8014e8c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014e84:	2004      	movs	r0, #4
 8014e86:	f7f7 f8fd 	bl	800c084 <memp_malloc>
 8014e8a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014e8c:	68fb      	ldr	r3, [r7, #12]
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d101      	bne.n	8014e96 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014e92:	2300      	movs	r3, #0
 8014e94:	e016      	b.n	8014ec4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014e96:	2220      	movs	r2, #32
 8014e98:	2100      	movs	r1, #0
 8014e9a:	68f8      	ldr	r0, [r7, #12]
 8014e9c:	f001 f990 	bl	80161c0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014ea0:	68fb      	ldr	r3, [r7, #12]
 8014ea2:	220f      	movs	r2, #15
 8014ea4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014ea6:	4b09      	ldr	r3, [pc, #36]	; (8014ecc <ip_reass_enqueue_new_datagram+0x70>)
 8014ea8:	681a      	ldr	r2, [r3, #0]
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014eae:	4a07      	ldr	r2, [pc, #28]	; (8014ecc <ip_reass_enqueue_new_datagram+0x70>)
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	3308      	adds	r3, #8
 8014eb8:	2214      	movs	r2, #20
 8014eba:	6879      	ldr	r1, [r7, #4]
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f001 f971 	bl	80161a4 <memcpy>
  return ipr;
 8014ec2:	68fb      	ldr	r3, [r7, #12]
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3710      	adds	r7, #16
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	20009074 	.word	0x20009074

08014ed0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b082      	sub	sp, #8
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014eda:	4b10      	ldr	r3, [pc, #64]	; (8014f1c <ip_reass_dequeue_datagram+0x4c>)
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	687a      	ldr	r2, [r7, #4]
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	d104      	bne.n	8014eee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	4a0c      	ldr	r2, [pc, #48]	; (8014f1c <ip_reass_dequeue_datagram+0x4c>)
 8014eea:	6013      	str	r3, [r2, #0]
 8014eec:	e00d      	b.n	8014f0a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014eee:	683b      	ldr	r3, [r7, #0]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d106      	bne.n	8014f02 <ip_reass_dequeue_datagram+0x32>
 8014ef4:	4b0a      	ldr	r3, [pc, #40]	; (8014f20 <ip_reass_dequeue_datagram+0x50>)
 8014ef6:	f240 1245 	movw	r2, #325	; 0x145
 8014efa:	490a      	ldr	r1, [pc, #40]	; (8014f24 <ip_reass_dequeue_datagram+0x54>)
 8014efc:	480a      	ldr	r0, [pc, #40]	; (8014f28 <ip_reass_dequeue_datagram+0x58>)
 8014efe:	f001 f967 	bl	80161d0 <iprintf>
    prev->next = ipr->next;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	681a      	ldr	r2, [r3, #0]
 8014f06:	683b      	ldr	r3, [r7, #0]
 8014f08:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014f0a:	6879      	ldr	r1, [r7, #4]
 8014f0c:	2004      	movs	r0, #4
 8014f0e:	f7f7 f929 	bl	800c164 <memp_free>
}
 8014f12:	bf00      	nop
 8014f14:	3708      	adds	r7, #8
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}
 8014f1a:	bf00      	nop
 8014f1c:	20009074 	.word	0x20009074
 8014f20:	080199ac 	.word	0x080199ac
 8014f24:	08019a74 	.word	0x08019a74
 8014f28:	080199f4 	.word	0x080199f4

08014f2c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b08c      	sub	sp, #48	; 0x30
 8014f30:	af00      	add	r7, sp, #0
 8014f32:	60f8      	str	r0, [r7, #12]
 8014f34:	60b9      	str	r1, [r7, #8]
 8014f36:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014f38:	2300      	movs	r3, #0
 8014f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8014f3c:	2301      	movs	r3, #1
 8014f3e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	685b      	ldr	r3, [r3, #4]
 8014f44:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014f46:	69fb      	ldr	r3, [r7, #28]
 8014f48:	885b      	ldrh	r3, [r3, #2]
 8014f4a:	b29b      	uxth	r3, r3
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7f6 fc21 	bl	800b794 <lwip_htons>
 8014f52:	4603      	mov	r3, r0
 8014f54:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014f56:	69fb      	ldr	r3, [r7, #28]
 8014f58:	781b      	ldrb	r3, [r3, #0]
 8014f5a:	f003 030f 	and.w	r3, r3, #15
 8014f5e:	b2db      	uxtb	r3, r3
 8014f60:	009b      	lsls	r3, r3, #2
 8014f62:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014f64:	7e7b      	ldrb	r3, [r7, #25]
 8014f66:	b29b      	uxth	r3, r3
 8014f68:	8b7a      	ldrh	r2, [r7, #26]
 8014f6a:	429a      	cmp	r2, r3
 8014f6c:	d202      	bcs.n	8014f74 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f72:	e135      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014f74:	7e7b      	ldrb	r3, [r7, #25]
 8014f76:	b29b      	uxth	r3, r3
 8014f78:	8b7a      	ldrh	r2, [r7, #26]
 8014f7a:	1ad3      	subs	r3, r2, r3
 8014f7c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8014f7e:	69fb      	ldr	r3, [r7, #28]
 8014f80:	88db      	ldrh	r3, [r3, #6]
 8014f82:	b29b      	uxth	r3, r3
 8014f84:	4618      	mov	r0, r3
 8014f86:	f7f6 fc05 	bl	800b794 <lwip_htons>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014f90:	b29b      	uxth	r3, r3
 8014f92:	00db      	lsls	r3, r3, #3
 8014f94:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	685b      	ldr	r3, [r3, #4]
 8014f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f9e:	2200      	movs	r2, #0
 8014fa0:	701a      	strb	r2, [r3, #0]
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	705a      	strb	r2, [r3, #1]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	709a      	strb	r2, [r3, #2]
 8014faa:	2200      	movs	r2, #0
 8014fac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fb0:	8afa      	ldrh	r2, [r7, #22]
 8014fb2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014fb4:	8afa      	ldrh	r2, [r7, #22]
 8014fb6:	8b7b      	ldrh	r3, [r7, #26]
 8014fb8:	4413      	add	r3, r2
 8014fba:	b29a      	uxth	r2, r3
 8014fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fbe:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc2:	88db      	ldrh	r3, [r3, #6]
 8014fc4:	b29b      	uxth	r3, r3
 8014fc6:	8afa      	ldrh	r2, [r7, #22]
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	d902      	bls.n	8014fd2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014fd0:	e106      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	685b      	ldr	r3, [r3, #4]
 8014fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8014fd8:	e068      	b.n	80150ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fdc:	685b      	ldr	r3, [r3, #4]
 8014fde:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe2:	889b      	ldrh	r3, [r3, #4]
 8014fe4:	b29a      	uxth	r2, r3
 8014fe6:	693b      	ldr	r3, [r7, #16]
 8014fe8:	889b      	ldrh	r3, [r3, #4]
 8014fea:	b29b      	uxth	r3, r3
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d235      	bcs.n	801505c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ff4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d020      	beq.n	801503e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ffe:	889b      	ldrh	r3, [r3, #4]
 8015000:	b29a      	uxth	r2, r3
 8015002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015004:	88db      	ldrh	r3, [r3, #6]
 8015006:	b29b      	uxth	r3, r3
 8015008:	429a      	cmp	r2, r3
 801500a:	d307      	bcc.n	801501c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801500c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801500e:	88db      	ldrh	r3, [r3, #6]
 8015010:	b29a      	uxth	r2, r3
 8015012:	693b      	ldr	r3, [r7, #16]
 8015014:	889b      	ldrh	r3, [r3, #4]
 8015016:	b29b      	uxth	r3, r3
 8015018:	429a      	cmp	r2, r3
 801501a:	d902      	bls.n	8015022 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801501c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015020:	e0de      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015024:	68ba      	ldr	r2, [r7, #8]
 8015026:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801502a:	88db      	ldrh	r3, [r3, #6]
 801502c:	b29a      	uxth	r2, r3
 801502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015030:	889b      	ldrh	r3, [r3, #4]
 8015032:	b29b      	uxth	r3, r3
 8015034:	429a      	cmp	r2, r3
 8015036:	d03d      	beq.n	80150b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015038:	2300      	movs	r3, #0
 801503a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801503c:	e03a      	b.n	80150b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015040:	88db      	ldrh	r3, [r3, #6]
 8015042:	b29a      	uxth	r2, r3
 8015044:	693b      	ldr	r3, [r7, #16]
 8015046:	889b      	ldrh	r3, [r3, #4]
 8015048:	b29b      	uxth	r3, r3
 801504a:	429a      	cmp	r2, r3
 801504c:	d902      	bls.n	8015054 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801504e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015052:	e0c5      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	68ba      	ldr	r2, [r7, #8]
 8015058:	605a      	str	r2, [r3, #4]
      break;
 801505a:	e02b      	b.n	80150b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505e:	889b      	ldrh	r3, [r3, #4]
 8015060:	b29a      	uxth	r2, r3
 8015062:	693b      	ldr	r3, [r7, #16]
 8015064:	889b      	ldrh	r3, [r3, #4]
 8015066:	b29b      	uxth	r3, r3
 8015068:	429a      	cmp	r2, r3
 801506a:	d102      	bne.n	8015072 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801506c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015070:	e0b6      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015074:	889b      	ldrh	r3, [r3, #4]
 8015076:	b29a      	uxth	r2, r3
 8015078:	693b      	ldr	r3, [r7, #16]
 801507a:	88db      	ldrh	r3, [r3, #6]
 801507c:	b29b      	uxth	r3, r3
 801507e:	429a      	cmp	r2, r3
 8015080:	d202      	bcs.n	8015088 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015086:	e0ab      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801508a:	2b00      	cmp	r3, #0
 801508c:	d009      	beq.n	80150a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015090:	88db      	ldrh	r3, [r3, #6]
 8015092:	b29a      	uxth	r2, r3
 8015094:	693b      	ldr	r3, [r7, #16]
 8015096:	889b      	ldrh	r3, [r3, #4]
 8015098:	b29b      	uxth	r3, r3
 801509a:	429a      	cmp	r2, r3
 801509c:	d001      	beq.n	80150a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801509e:	2300      	movs	r3, #0
 80150a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80150a8:	693b      	ldr	r3, [r7, #16]
 80150aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80150ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d193      	bne.n	8014fda <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80150b2:	e000      	b.n	80150b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80150b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80150b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d12d      	bne.n	8015118 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80150bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150be:	2b00      	cmp	r3, #0
 80150c0:	d01c      	beq.n	80150fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80150c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150c4:	88db      	ldrh	r3, [r3, #6]
 80150c6:	b29a      	uxth	r2, r3
 80150c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ca:	889b      	ldrh	r3, [r3, #4]
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	429a      	cmp	r2, r3
 80150d0:	d906      	bls.n	80150e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80150d2:	4b45      	ldr	r3, [pc, #276]	; (80151e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80150d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80150d8:	4944      	ldr	r1, [pc, #272]	; (80151ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80150da:	4845      	ldr	r0, [pc, #276]	; (80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80150dc:	f001 f878 	bl	80161d0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80150e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e2:	68ba      	ldr	r2, [r7, #8]
 80150e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80150e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150e8:	88db      	ldrh	r3, [r3, #6]
 80150ea:	b29a      	uxth	r2, r3
 80150ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150ee:	889b      	ldrh	r3, [r3, #4]
 80150f0:	b29b      	uxth	r3, r3
 80150f2:	429a      	cmp	r2, r3
 80150f4:	d010      	beq.n	8015118 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80150f6:	2300      	movs	r3, #0
 80150f8:	623b      	str	r3, [r7, #32]
 80150fa:	e00d      	b.n	8015118 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	685b      	ldr	r3, [r3, #4]
 8015100:	2b00      	cmp	r3, #0
 8015102:	d006      	beq.n	8015112 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015104:	4b38      	ldr	r3, [pc, #224]	; (80151e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015106:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801510a:	493a      	ldr	r1, [pc, #232]	; (80151f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801510c:	4838      	ldr	r0, [pc, #224]	; (80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801510e:	f001 f85f 	bl	80161d0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	68ba      	ldr	r2, [r7, #8]
 8015116:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	2b00      	cmp	r3, #0
 801511c:	d105      	bne.n	801512a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	7f9b      	ldrb	r3, [r3, #30]
 8015122:	f003 0301 	and.w	r3, r3, #1
 8015126:	2b00      	cmp	r3, #0
 8015128:	d059      	beq.n	80151de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801512a:	6a3b      	ldr	r3, [r7, #32]
 801512c:	2b00      	cmp	r3, #0
 801512e:	d04f      	beq.n	80151d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	2b00      	cmp	r3, #0
 8015136:	d006      	beq.n	8015146 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	685b      	ldr	r3, [r3, #4]
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	889b      	ldrh	r3, [r3, #4]
 8015140:	b29b      	uxth	r3, r3
 8015142:	2b00      	cmp	r3, #0
 8015144:	d002      	beq.n	801514c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015146:	2300      	movs	r3, #0
 8015148:	623b      	str	r3, [r7, #32]
 801514a:	e041      	b.n	80151d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801514c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801514e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015156:	e012      	b.n	801517e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801515a:	685b      	ldr	r3, [r3, #4]
 801515c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015160:	88db      	ldrh	r3, [r3, #6]
 8015162:	b29a      	uxth	r2, r3
 8015164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015166:	889b      	ldrh	r3, [r3, #4]
 8015168:	b29b      	uxth	r3, r3
 801516a:	429a      	cmp	r2, r3
 801516c:	d002      	beq.n	8015174 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801516e:	2300      	movs	r3, #0
 8015170:	623b      	str	r3, [r7, #32]
            break;
 8015172:	e007      	b.n	8015184 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015176:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015180:	2b00      	cmp	r3, #0
 8015182:	d1e9      	bne.n	8015158 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015184:	6a3b      	ldr	r3, [r7, #32]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d022      	beq.n	80151d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	685b      	ldr	r3, [r3, #4]
 801518e:	2b00      	cmp	r3, #0
 8015190:	d106      	bne.n	80151a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015192:	4b15      	ldr	r3, [pc, #84]	; (80151e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015194:	f240 12df 	movw	r2, #479	; 0x1df
 8015198:	4917      	ldr	r1, [pc, #92]	; (80151f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801519a:	4815      	ldr	r0, [pc, #84]	; (80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801519c:	f001 f818 	bl	80161d0 <iprintf>
          LWIP_ASSERT("sanity check",
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	685b      	ldr	r3, [r3, #4]
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d106      	bne.n	80151ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80151ac:	4b0e      	ldr	r3, [pc, #56]	; (80151e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80151ae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80151b2:	4911      	ldr	r1, [pc, #68]	; (80151f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80151b4:	480e      	ldr	r0, [pc, #56]	; (80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80151b6:	f001 f80b 	bl	80161d0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80151ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d006      	beq.n	80151d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80151c2:	4b09      	ldr	r3, [pc, #36]	; (80151e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80151c4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80151c8:	490c      	ldr	r1, [pc, #48]	; (80151fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80151ca:	4809      	ldr	r0, [pc, #36]	; (80151f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80151cc:	f001 f800 	bl	80161d0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80151d0:	6a3b      	ldr	r3, [r7, #32]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	bf14      	ite	ne
 80151d6:	2301      	movne	r3, #1
 80151d8:	2300      	moveq	r3, #0
 80151da:	b2db      	uxtb	r3, r3
 80151dc:	e000      	b.n	80151e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80151de:	2300      	movs	r3, #0
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3730      	adds	r7, #48	; 0x30
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}
 80151e8:	080199ac 	.word	0x080199ac
 80151ec:	08019a90 	.word	0x08019a90
 80151f0:	080199f4 	.word	0x080199f4
 80151f4:	08019ab0 	.word	0x08019ab0
 80151f8:	08019ae8 	.word	0x08019ae8
 80151fc:	08019af8 	.word	0x08019af8

08015200 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015200:	b580      	push	{r7, lr}
 8015202:	b08e      	sub	sp, #56	; 0x38
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	685b      	ldr	r3, [r3, #4]
 801520c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015210:	781b      	ldrb	r3, [r3, #0]
 8015212:	f003 030f 	and.w	r3, r3, #15
 8015216:	b2db      	uxtb	r3, r3
 8015218:	009b      	lsls	r3, r3, #2
 801521a:	b2db      	uxtb	r3, r3
 801521c:	2b14      	cmp	r3, #20
 801521e:	f040 8171 	bne.w	8015504 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015224:	88db      	ldrh	r3, [r3, #6]
 8015226:	b29b      	uxth	r3, r3
 8015228:	4618      	mov	r0, r3
 801522a:	f7f6 fab3 	bl	800b794 <lwip_htons>
 801522e:	4603      	mov	r3, r0
 8015230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015234:	b29b      	uxth	r3, r3
 8015236:	00db      	lsls	r3, r3, #3
 8015238:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801523c:	885b      	ldrh	r3, [r3, #2]
 801523e:	b29b      	uxth	r3, r3
 8015240:	4618      	mov	r0, r3
 8015242:	f7f6 faa7 	bl	800b794 <lwip_htons>
 8015246:	4603      	mov	r3, r0
 8015248:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801524c:	781b      	ldrb	r3, [r3, #0]
 801524e:	f003 030f 	and.w	r3, r3, #15
 8015252:	b2db      	uxtb	r3, r3
 8015254:	009b      	lsls	r3, r3, #2
 8015256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801525a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801525e:	b29b      	uxth	r3, r3
 8015260:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015262:	429a      	cmp	r2, r3
 8015264:	f0c0 8150 	bcc.w	8015508 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801526c:	b29b      	uxth	r3, r3
 801526e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015270:	1ad3      	subs	r3, r2, r3
 8015272:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f7f7 fe73 	bl	800cf60 <pbuf_clen>
 801527a:	4603      	mov	r3, r0
 801527c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801527e:	4b8c      	ldr	r3, [pc, #560]	; (80154b0 <ip4_reass+0x2b0>)
 8015280:	881b      	ldrh	r3, [r3, #0]
 8015282:	461a      	mov	r2, r3
 8015284:	8c3b      	ldrh	r3, [r7, #32]
 8015286:	4413      	add	r3, r2
 8015288:	2b0a      	cmp	r3, #10
 801528a:	dd10      	ble.n	80152ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801528c:	8c3b      	ldrh	r3, [r7, #32]
 801528e:	4619      	mov	r1, r3
 8015290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015292:	f7ff fd81 	bl	8014d98 <ip_reass_remove_oldest_datagram>
 8015296:	4603      	mov	r3, r0
 8015298:	2b00      	cmp	r3, #0
 801529a:	f000 8137 	beq.w	801550c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801529e:	4b84      	ldr	r3, [pc, #528]	; (80154b0 <ip4_reass+0x2b0>)
 80152a0:	881b      	ldrh	r3, [r3, #0]
 80152a2:	461a      	mov	r2, r3
 80152a4:	8c3b      	ldrh	r3, [r7, #32]
 80152a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80152a8:	2b0a      	cmp	r3, #10
 80152aa:	f300 812f 	bgt.w	801550c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80152ae:	4b81      	ldr	r3, [pc, #516]	; (80154b4 <ip4_reass+0x2b4>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	633b      	str	r3, [r7, #48]	; 0x30
 80152b4:	e015      	b.n	80152e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80152b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b8:	695a      	ldr	r2, [r3, #20]
 80152ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152bc:	68db      	ldr	r3, [r3, #12]
 80152be:	429a      	cmp	r2, r3
 80152c0:	d10c      	bne.n	80152dc <ip4_reass+0xdc>
 80152c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152c4:	699a      	ldr	r2, [r3, #24]
 80152c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152c8:	691b      	ldr	r3, [r3, #16]
 80152ca:	429a      	cmp	r2, r3
 80152cc:	d106      	bne.n	80152dc <ip4_reass+0xdc>
 80152ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d0:	899a      	ldrh	r2, [r3, #12]
 80152d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152d4:	889b      	ldrh	r3, [r3, #4]
 80152d6:	b29b      	uxth	r3, r3
 80152d8:	429a      	cmp	r2, r3
 80152da:	d006      	beq.n	80152ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80152dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	633b      	str	r3, [r7, #48]	; 0x30
 80152e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d1e6      	bne.n	80152b6 <ip4_reass+0xb6>
 80152e8:	e000      	b.n	80152ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80152ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80152ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d109      	bne.n	8015306 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80152f2:	8c3b      	ldrh	r3, [r7, #32]
 80152f4:	4619      	mov	r1, r3
 80152f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152f8:	f7ff fdb0 	bl	8014e5c <ip_reass_enqueue_new_datagram>
 80152fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80152fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015300:	2b00      	cmp	r3, #0
 8015302:	d11c      	bne.n	801533e <ip4_reass+0x13e>
      goto nullreturn;
 8015304:	e105      	b.n	8015512 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015308:	88db      	ldrh	r3, [r3, #6]
 801530a:	b29b      	uxth	r3, r3
 801530c:	4618      	mov	r0, r3
 801530e:	f7f6 fa41 	bl	800b794 <lwip_htons>
 8015312:	4603      	mov	r3, r0
 8015314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015318:	2b00      	cmp	r3, #0
 801531a:	d110      	bne.n	801533e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801531e:	89db      	ldrh	r3, [r3, #14]
 8015320:	4618      	mov	r0, r3
 8015322:	f7f6 fa37 	bl	800b794 <lwip_htons>
 8015326:	4603      	mov	r3, r0
 8015328:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801532c:	2b00      	cmp	r3, #0
 801532e:	d006      	beq.n	801533e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015332:	3308      	adds	r3, #8
 8015334:	2214      	movs	r2, #20
 8015336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015338:	4618      	mov	r0, r3
 801533a:	f000 ff33 	bl	80161a4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801533e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015340:	88db      	ldrh	r3, [r3, #6]
 8015342:	b29b      	uxth	r3, r3
 8015344:	f003 0320 	and.w	r3, r3, #32
 8015348:	2b00      	cmp	r3, #0
 801534a:	bf0c      	ite	eq
 801534c:	2301      	moveq	r3, #1
 801534e:	2300      	movne	r3, #0
 8015350:	b2db      	uxtb	r3, r3
 8015352:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015354:	69fb      	ldr	r3, [r7, #28]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d00e      	beq.n	8015378 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801535a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801535c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801535e:	4413      	add	r3, r2
 8015360:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015362:	8b7a      	ldrh	r2, [r7, #26]
 8015364:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015366:	429a      	cmp	r2, r3
 8015368:	f0c0 80a0 	bcc.w	80154ac <ip4_reass+0x2ac>
 801536c:	8b7b      	ldrh	r3, [r7, #26]
 801536e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015372:	4293      	cmp	r3, r2
 8015374:	f200 809a 	bhi.w	80154ac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015378:	69fa      	ldr	r2, [r7, #28]
 801537a:	6879      	ldr	r1, [r7, #4]
 801537c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801537e:	f7ff fdd5 	bl	8014f2c <ip_reass_chain_frag_into_datagram_and_validate>
 8015382:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801538a:	f000 809b 	beq.w	80154c4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801538e:	4b48      	ldr	r3, [pc, #288]	; (80154b0 <ip4_reass+0x2b0>)
 8015390:	881a      	ldrh	r2, [r3, #0]
 8015392:	8c3b      	ldrh	r3, [r7, #32]
 8015394:	4413      	add	r3, r2
 8015396:	b29a      	uxth	r2, r3
 8015398:	4b45      	ldr	r3, [pc, #276]	; (80154b0 <ip4_reass+0x2b0>)
 801539a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801539c:	69fb      	ldr	r3, [r7, #28]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d00d      	beq.n	80153be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80153a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80153a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80153a6:	4413      	add	r3, r2
 80153a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80153aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ac:	8a7a      	ldrh	r2, [r7, #18]
 80153ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80153b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b2:	7f9b      	ldrb	r3, [r3, #30]
 80153b4:	f043 0301 	orr.w	r3, r3, #1
 80153b8:	b2da      	uxtb	r2, r3
 80153ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	2b01      	cmp	r3, #1
 80153c2:	d171      	bne.n	80154a8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80153c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153c6:	8b9b      	ldrh	r3, [r3, #28]
 80153c8:	3314      	adds	r3, #20
 80153ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80153cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ce:	685b      	ldr	r3, [r3, #4]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80153d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d8:	685b      	ldr	r3, [r3, #4]
 80153da:	685b      	ldr	r3, [r3, #4]
 80153dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80153de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e0:	3308      	adds	r3, #8
 80153e2:	2214      	movs	r2, #20
 80153e4:	4619      	mov	r1, r3
 80153e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153e8:	f000 fedc 	bl	80161a4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80153ec:	8a3b      	ldrh	r3, [r7, #16]
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7f6 f9d0 	bl	800b794 <lwip_htons>
 80153f4:	4603      	mov	r3, r0
 80153f6:	461a      	mov	r2, r3
 80153f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80153fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153fe:	2200      	movs	r2, #0
 8015400:	719a      	strb	r2, [r3, #6]
 8015402:	2200      	movs	r2, #0
 8015404:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015408:	2200      	movs	r2, #0
 801540a:	729a      	strb	r2, [r3, #10]
 801540c:	2200      	movs	r2, #0
 801540e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015412:	685b      	ldr	r3, [r3, #4]
 8015414:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015416:	e00d      	b.n	8015434 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801541a:	685b      	ldr	r3, [r3, #4]
 801541c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801541e:	2114      	movs	r1, #20
 8015420:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015422:	f7f7 fc8f 	bl	800cd44 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015426:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f7f7 fdd3 	bl	800cfd4 <pbuf_cat>
      r = iprh->next_pbuf;
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015436:	2b00      	cmp	r3, #0
 8015438:	d1ee      	bne.n	8015418 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801543a:	4b1e      	ldr	r3, [pc, #120]	; (80154b4 <ip4_reass+0x2b4>)
 801543c:	681b      	ldr	r3, [r3, #0]
 801543e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015440:	429a      	cmp	r2, r3
 8015442:	d102      	bne.n	801544a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015444:	2300      	movs	r3, #0
 8015446:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015448:	e010      	b.n	801546c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801544a:	4b1a      	ldr	r3, [pc, #104]	; (80154b4 <ip4_reass+0x2b4>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015450:	e007      	b.n	8015462 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015458:	429a      	cmp	r2, r3
 801545a:	d006      	beq.n	801546a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015464:	2b00      	cmp	r3, #0
 8015466:	d1f4      	bne.n	8015452 <ip4_reass+0x252>
 8015468:	e000      	b.n	801546c <ip4_reass+0x26c>
          break;
 801546a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801546c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801546e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015470:	f7ff fd2e 	bl	8014ed0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	f7f7 fd73 	bl	800cf60 <pbuf_clen>
 801547a:	4603      	mov	r3, r0
 801547c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801547e:	4b0c      	ldr	r3, [pc, #48]	; (80154b0 <ip4_reass+0x2b0>)
 8015480:	881b      	ldrh	r3, [r3, #0]
 8015482:	8c3a      	ldrh	r2, [r7, #32]
 8015484:	429a      	cmp	r2, r3
 8015486:	d906      	bls.n	8015496 <ip4_reass+0x296>
 8015488:	4b0b      	ldr	r3, [pc, #44]	; (80154b8 <ip4_reass+0x2b8>)
 801548a:	f240 229b 	movw	r2, #667	; 0x29b
 801548e:	490b      	ldr	r1, [pc, #44]	; (80154bc <ip4_reass+0x2bc>)
 8015490:	480b      	ldr	r0, [pc, #44]	; (80154c0 <ip4_reass+0x2c0>)
 8015492:	f000 fe9d 	bl	80161d0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015496:	4b06      	ldr	r3, [pc, #24]	; (80154b0 <ip4_reass+0x2b0>)
 8015498:	881a      	ldrh	r2, [r3, #0]
 801549a:	8c3b      	ldrh	r3, [r7, #32]
 801549c:	1ad3      	subs	r3, r2, r3
 801549e:	b29a      	uxth	r2, r3
 80154a0:	4b03      	ldr	r3, [pc, #12]	; (80154b0 <ip4_reass+0x2b0>)
 80154a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	e038      	b.n	801551a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80154a8:	2300      	movs	r3, #0
 80154aa:	e036      	b.n	801551a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80154ac:	bf00      	nop
 80154ae:	e00a      	b.n	80154c6 <ip4_reass+0x2c6>
 80154b0:	20009078 	.word	0x20009078
 80154b4:	20009074 	.word	0x20009074
 80154b8:	080199ac 	.word	0x080199ac
 80154bc:	08019b1c 	.word	0x08019b1c
 80154c0:	080199f4 	.word	0x080199f4
    goto nullreturn_ipr;
 80154c4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80154c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d106      	bne.n	80154da <ip4_reass+0x2da>
 80154cc:	4b15      	ldr	r3, [pc, #84]	; (8015524 <ip4_reass+0x324>)
 80154ce:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80154d2:	4915      	ldr	r1, [pc, #84]	; (8015528 <ip4_reass+0x328>)
 80154d4:	4815      	ldr	r0, [pc, #84]	; (801552c <ip4_reass+0x32c>)
 80154d6:	f000 fe7b 	bl	80161d0 <iprintf>
  if (ipr->p == NULL) {
 80154da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d116      	bne.n	8015510 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80154e2:	4b13      	ldr	r3, [pc, #76]	; (8015530 <ip4_reass+0x330>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80154e8:	429a      	cmp	r2, r3
 80154ea:	d006      	beq.n	80154fa <ip4_reass+0x2fa>
 80154ec:	4b0d      	ldr	r3, [pc, #52]	; (8015524 <ip4_reass+0x324>)
 80154ee:	f240 22ab 	movw	r2, #683	; 0x2ab
 80154f2:	4910      	ldr	r1, [pc, #64]	; (8015534 <ip4_reass+0x334>)
 80154f4:	480d      	ldr	r0, [pc, #52]	; (801552c <ip4_reass+0x32c>)
 80154f6:	f000 fe6b 	bl	80161d0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80154fa:	2100      	movs	r1, #0
 80154fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80154fe:	f7ff fce7 	bl	8014ed0 <ip_reass_dequeue_datagram>
 8015502:	e006      	b.n	8015512 <ip4_reass+0x312>
    goto nullreturn;
 8015504:	bf00      	nop
 8015506:	e004      	b.n	8015512 <ip4_reass+0x312>
    goto nullreturn;
 8015508:	bf00      	nop
 801550a:	e002      	b.n	8015512 <ip4_reass+0x312>
      goto nullreturn;
 801550c:	bf00      	nop
 801550e:	e000      	b.n	8015512 <ip4_reass+0x312>
  }

nullreturn:
 8015510:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015512:	6878      	ldr	r0, [r7, #4]
 8015514:	f7f7 fc9c 	bl	800ce50 <pbuf_free>
  return NULL;
 8015518:	2300      	movs	r3, #0
}
 801551a:	4618      	mov	r0, r3
 801551c:	3738      	adds	r7, #56	; 0x38
 801551e:	46bd      	mov	sp, r7
 8015520:	bd80      	pop	{r7, pc}
 8015522:	bf00      	nop
 8015524:	080199ac 	.word	0x080199ac
 8015528:	08019b38 	.word	0x08019b38
 801552c:	080199f4 	.word	0x080199f4
 8015530:	20009074 	.word	0x20009074
 8015534:	08019b44 	.word	0x08019b44

08015538 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801553c:	2005      	movs	r0, #5
 801553e:	f7f6 fda1 	bl	800c084 <memp_malloc>
 8015542:	4603      	mov	r3, r0
}
 8015544:	4618      	mov	r0, r3
 8015546:	bd80      	pop	{r7, pc}

08015548 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015548:	b580      	push	{r7, lr}
 801554a:	b082      	sub	sp, #8
 801554c:	af00      	add	r7, sp, #0
 801554e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d106      	bne.n	8015564 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015556:	4b07      	ldr	r3, [pc, #28]	; (8015574 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015558:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801555c:	4906      	ldr	r1, [pc, #24]	; (8015578 <ip_frag_free_pbuf_custom_ref+0x30>)
 801555e:	4807      	ldr	r0, [pc, #28]	; (801557c <ip_frag_free_pbuf_custom_ref+0x34>)
 8015560:	f000 fe36 	bl	80161d0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015564:	6879      	ldr	r1, [r7, #4]
 8015566:	2005      	movs	r0, #5
 8015568:	f7f6 fdfc 	bl	800c164 <memp_free>
}
 801556c:	bf00      	nop
 801556e:	3708      	adds	r7, #8
 8015570:	46bd      	mov	sp, r7
 8015572:	bd80      	pop	{r7, pc}
 8015574:	080199ac 	.word	0x080199ac
 8015578:	08019b64 	.word	0x08019b64
 801557c:	080199f4 	.word	0x080199f4

08015580 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b084      	sub	sp, #16
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d106      	bne.n	80155a0 <ipfrag_free_pbuf_custom+0x20>
 8015592:	4b11      	ldr	r3, [pc, #68]	; (80155d8 <ipfrag_free_pbuf_custom+0x58>)
 8015594:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015598:	4910      	ldr	r1, [pc, #64]	; (80155dc <ipfrag_free_pbuf_custom+0x5c>)
 801559a:	4811      	ldr	r0, [pc, #68]	; (80155e0 <ipfrag_free_pbuf_custom+0x60>)
 801559c:	f000 fe18 	bl	80161d0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80155a0:	68fa      	ldr	r2, [r7, #12]
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d006      	beq.n	80155b6 <ipfrag_free_pbuf_custom+0x36>
 80155a8:	4b0b      	ldr	r3, [pc, #44]	; (80155d8 <ipfrag_free_pbuf_custom+0x58>)
 80155aa:	f240 22cf 	movw	r2, #719	; 0x2cf
 80155ae:	490d      	ldr	r1, [pc, #52]	; (80155e4 <ipfrag_free_pbuf_custom+0x64>)
 80155b0:	480b      	ldr	r0, [pc, #44]	; (80155e0 <ipfrag_free_pbuf_custom+0x60>)
 80155b2:	f000 fe0d 	bl	80161d0 <iprintf>
  if (pcr->original != NULL) {
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	695b      	ldr	r3, [r3, #20]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d004      	beq.n	80155c8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	695b      	ldr	r3, [r3, #20]
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7f7 fc44 	bl	800ce50 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80155c8:	68f8      	ldr	r0, [r7, #12]
 80155ca:	f7ff ffbd 	bl	8015548 <ip_frag_free_pbuf_custom_ref>
}
 80155ce:	bf00      	nop
 80155d0:	3710      	adds	r7, #16
 80155d2:	46bd      	mov	sp, r7
 80155d4:	bd80      	pop	{r7, pc}
 80155d6:	bf00      	nop
 80155d8:	080199ac 	.word	0x080199ac
 80155dc:	08019b70 	.word	0x08019b70
 80155e0:	080199f4 	.word	0x080199f4
 80155e4:	08019b7c 	.word	0x08019b7c

080155e8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b094      	sub	sp, #80	; 0x50
 80155ec:	af02      	add	r7, sp, #8
 80155ee:	60f8      	str	r0, [r7, #12]
 80155f0:	60b9      	str	r1, [r7, #8]
 80155f2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80155f4:	2300      	movs	r3, #0
 80155f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80155fa:	68bb      	ldr	r3, [r7, #8]
 80155fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80155fe:	3b14      	subs	r3, #20
 8015600:	2b00      	cmp	r3, #0
 8015602:	da00      	bge.n	8015606 <ip4_frag+0x1e>
 8015604:	3307      	adds	r3, #7
 8015606:	10db      	asrs	r3, r3, #3
 8015608:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801560a:	2314      	movs	r3, #20
 801560c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	685b      	ldr	r3, [r3, #4]
 8015612:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015616:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	f003 030f 	and.w	r3, r3, #15
 8015620:	b2db      	uxtb	r3, r3
 8015622:	009b      	lsls	r3, r3, #2
 8015624:	b2db      	uxtb	r3, r3
 8015626:	2b14      	cmp	r3, #20
 8015628:	d002      	beq.n	8015630 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801562a:	f06f 0305 	mvn.w	r3, #5
 801562e:	e110      	b.n	8015852 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	895b      	ldrh	r3, [r3, #10]
 8015634:	2b13      	cmp	r3, #19
 8015636:	d809      	bhi.n	801564c <ip4_frag+0x64>
 8015638:	4b88      	ldr	r3, [pc, #544]	; (801585c <ip4_frag+0x274>)
 801563a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801563e:	4988      	ldr	r1, [pc, #544]	; (8015860 <ip4_frag+0x278>)
 8015640:	4888      	ldr	r0, [pc, #544]	; (8015864 <ip4_frag+0x27c>)
 8015642:	f000 fdc5 	bl	80161d0 <iprintf>
 8015646:	f06f 0305 	mvn.w	r3, #5
 801564a:	e102      	b.n	8015852 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801564c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801564e:	88db      	ldrh	r3, [r3, #6]
 8015650:	b29b      	uxth	r3, r3
 8015652:	4618      	mov	r0, r3
 8015654:	f7f6 f89e 	bl	800b794 <lwip_htons>
 8015658:	4603      	mov	r3, r0
 801565a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801565c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801565e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015662:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015666:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801566c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	891b      	ldrh	r3, [r3, #8]
 8015672:	3b14      	subs	r3, #20
 8015674:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015678:	e0e1      	b.n	801583e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801567a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801567c:	00db      	lsls	r3, r3, #3
 801567e:	b29b      	uxth	r3, r3
 8015680:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015684:	4293      	cmp	r3, r2
 8015686:	bf28      	it	cs
 8015688:	4613      	movcs	r3, r2
 801568a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801568c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015690:	2114      	movs	r1, #20
 8015692:	200e      	movs	r0, #14
 8015694:	f7f7 f8f8 	bl	800c888 <pbuf_alloc>
 8015698:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801569c:	2b00      	cmp	r3, #0
 801569e:	f000 80d5 	beq.w	801584c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80156a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a4:	895b      	ldrh	r3, [r3, #10]
 80156a6:	2b13      	cmp	r3, #19
 80156a8:	d806      	bhi.n	80156b8 <ip4_frag+0xd0>
 80156aa:	4b6c      	ldr	r3, [pc, #432]	; (801585c <ip4_frag+0x274>)
 80156ac:	f44f 7249 	mov.w	r2, #804	; 0x324
 80156b0:	496d      	ldr	r1, [pc, #436]	; (8015868 <ip4_frag+0x280>)
 80156b2:	486c      	ldr	r0, [pc, #432]	; (8015864 <ip4_frag+0x27c>)
 80156b4:	f000 fd8c 	bl	80161d0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80156b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ba:	685b      	ldr	r3, [r3, #4]
 80156bc:	2214      	movs	r2, #20
 80156be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80156c0:	4618      	mov	r0, r3
 80156c2:	f000 fd6f 	bl	80161a4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80156c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c8:	685b      	ldr	r3, [r3, #4]
 80156ca:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80156cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80156ce:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80156d2:	e064      	b.n	801579e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	895a      	ldrh	r2, [r3, #10]
 80156d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80156da:	1ad3      	subs	r3, r2, r3
 80156dc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	895b      	ldrh	r3, [r3, #10]
 80156e2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d906      	bls.n	80156f6 <ip4_frag+0x10e>
 80156e8:	4b5c      	ldr	r3, [pc, #368]	; (801585c <ip4_frag+0x274>)
 80156ea:	f240 322d 	movw	r2, #813	; 0x32d
 80156ee:	495f      	ldr	r1, [pc, #380]	; (801586c <ip4_frag+0x284>)
 80156f0:	485c      	ldr	r0, [pc, #368]	; (8015864 <ip4_frag+0x27c>)
 80156f2:	f000 fd6d 	bl	80161d0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80156f6:	8bfa      	ldrh	r2, [r7, #30]
 80156f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80156fc:	4293      	cmp	r3, r2
 80156fe:	bf28      	it	cs
 8015700:	4613      	movcs	r3, r2
 8015702:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015706:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801570a:	2b00      	cmp	r3, #0
 801570c:	d105      	bne.n	801571a <ip4_frag+0x132>
        poff = 0;
 801570e:	2300      	movs	r3, #0
 8015710:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	60fb      	str	r3, [r7, #12]
        continue;
 8015718:	e041      	b.n	801579e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801571a:	f7ff ff0d 	bl	8015538 <ip_frag_alloc_pbuf_custom_ref>
 801571e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015720:	69bb      	ldr	r3, [r7, #24]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d103      	bne.n	801572e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015726:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015728:	f7f7 fb92 	bl	800ce50 <pbuf_free>
        goto memerr;
 801572c:	e08f      	b.n	801584e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801572e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015734:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015736:	4413      	add	r3, r2
 8015738:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801573c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015740:	9201      	str	r2, [sp, #4]
 8015742:	9300      	str	r3, [sp, #0]
 8015744:	4603      	mov	r3, r0
 8015746:	2241      	movs	r2, #65	; 0x41
 8015748:	2000      	movs	r0, #0
 801574a:	f7f7 f9c7 	bl	800cadc <pbuf_alloced_custom>
 801574e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015750:	697b      	ldr	r3, [r7, #20]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d106      	bne.n	8015764 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015756:	69b8      	ldr	r0, [r7, #24]
 8015758:	f7ff fef6 	bl	8015548 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801575c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801575e:	f7f7 fb77 	bl	800ce50 <pbuf_free>
        goto memerr;
 8015762:	e074      	b.n	801584e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015764:	68f8      	ldr	r0, [r7, #12]
 8015766:	f7f7 fc13 	bl	800cf90 <pbuf_ref>
      pcr->original = p;
 801576a:	69bb      	ldr	r3, [r7, #24]
 801576c:	68fa      	ldr	r2, [r7, #12]
 801576e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015770:	69bb      	ldr	r3, [r7, #24]
 8015772:	4a3f      	ldr	r2, [pc, #252]	; (8015870 <ip4_frag+0x288>)
 8015774:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015776:	6979      	ldr	r1, [r7, #20]
 8015778:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801577a:	f7f7 fc2b 	bl	800cfd4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801577e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015782:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015786:	1ad3      	subs	r3, r2, r3
 8015788:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801578c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015790:	2b00      	cmp	r3, #0
 8015792:	d004      	beq.n	801579e <ip4_frag+0x1b6>
        poff = 0;
 8015794:	2300      	movs	r3, #0
 8015796:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801579e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d196      	bne.n	80156d4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80157a6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80157a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80157ac:	4413      	add	r3, r2
 80157ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80157b0:	68bb      	ldr	r3, [r7, #8]
 80157b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80157b4:	f1a3 0213 	sub.w	r2, r3, #19
 80157b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80157bc:	429a      	cmp	r2, r3
 80157be:	bfcc      	ite	gt
 80157c0:	2301      	movgt	r3, #1
 80157c2:	2300      	movle	r3, #0
 80157c4:	b2db      	uxtb	r3, r3
 80157c6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80157c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80157cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80157d0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80157d2:	6a3b      	ldr	r3, [r7, #32]
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	d002      	beq.n	80157de <ip4_frag+0x1f6>
 80157d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d003      	beq.n	80157e6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80157de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80157e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80157e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80157e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80157e8:	4618      	mov	r0, r3
 80157ea:	f7f5 ffd3 	bl	800b794 <lwip_htons>
 80157ee:	4603      	mov	r3, r0
 80157f0:	461a      	mov	r2, r3
 80157f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157f4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80157f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80157f8:	3314      	adds	r3, #20
 80157fa:	b29b      	uxth	r3, r3
 80157fc:	4618      	mov	r0, r3
 80157fe:	f7f5 ffc9 	bl	800b794 <lwip_htons>
 8015802:	4603      	mov	r3, r0
 8015804:	461a      	mov	r2, r3
 8015806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015808:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801580c:	2200      	movs	r2, #0
 801580e:	729a      	strb	r2, [r3, #10]
 8015810:	2200      	movs	r2, #0
 8015812:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015814:	68bb      	ldr	r3, [r7, #8]
 8015816:	695b      	ldr	r3, [r3, #20]
 8015818:	687a      	ldr	r2, [r7, #4]
 801581a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801581c:	68b8      	ldr	r0, [r7, #8]
 801581e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015820:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015822:	f7f7 fb15 	bl	800ce50 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015826:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801582a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801582c:	1ad3      	subs	r3, r2, r3
 801582e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015832:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015836:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015838:	4413      	add	r3, r2
 801583a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801583e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015842:	2b00      	cmp	r3, #0
 8015844:	f47f af19 	bne.w	801567a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015848:	2300      	movs	r3, #0
 801584a:	e002      	b.n	8015852 <ip4_frag+0x26a>
      goto memerr;
 801584c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801584e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015852:	4618      	mov	r0, r3
 8015854:	3748      	adds	r7, #72	; 0x48
 8015856:	46bd      	mov	sp, r7
 8015858:	bd80      	pop	{r7, pc}
 801585a:	bf00      	nop
 801585c:	080199ac 	.word	0x080199ac
 8015860:	08019b88 	.word	0x08019b88
 8015864:	080199f4 	.word	0x080199f4
 8015868:	08019ba4 	.word	0x08019ba4
 801586c:	08019bc4 	.word	0x08019bc4
 8015870:	08015581 	.word	0x08015581

08015874 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b086      	sub	sp, #24
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
 801587c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801587e:	230e      	movs	r3, #14
 8015880:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	895b      	ldrh	r3, [r3, #10]
 8015886:	2b0e      	cmp	r3, #14
 8015888:	d96e      	bls.n	8015968 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	7bdb      	ldrb	r3, [r3, #15]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d106      	bne.n	80158a0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015898:	3301      	adds	r3, #1
 801589a:	b2da      	uxtb	r2, r3
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80158a6:	693b      	ldr	r3, [r7, #16]
 80158a8:	7b1a      	ldrb	r2, [r3, #12]
 80158aa:	7b5b      	ldrb	r3, [r3, #13]
 80158ac:	021b      	lsls	r3, r3, #8
 80158ae:	4313      	orrs	r3, r2
 80158b0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80158b2:	693b      	ldr	r3, [r7, #16]
 80158b4:	781b      	ldrb	r3, [r3, #0]
 80158b6:	f003 0301 	and.w	r3, r3, #1
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d023      	beq.n	8015906 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80158be:	693b      	ldr	r3, [r7, #16]
 80158c0:	781b      	ldrb	r3, [r3, #0]
 80158c2:	2b01      	cmp	r3, #1
 80158c4:	d10f      	bne.n	80158e6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80158c6:	693b      	ldr	r3, [r7, #16]
 80158c8:	785b      	ldrb	r3, [r3, #1]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d11b      	bne.n	8015906 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80158d2:	2b5e      	cmp	r3, #94	; 0x5e
 80158d4:	d117      	bne.n	8015906 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	7b5b      	ldrb	r3, [r3, #13]
 80158da:	f043 0310 	orr.w	r3, r3, #16
 80158de:	b2da      	uxtb	r2, r3
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	735a      	strb	r2, [r3, #13]
 80158e4:	e00f      	b.n	8015906 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80158e6:	693b      	ldr	r3, [r7, #16]
 80158e8:	2206      	movs	r2, #6
 80158ea:	4928      	ldr	r1, [pc, #160]	; (801598c <ethernet_input+0x118>)
 80158ec:	4618      	mov	r0, r3
 80158ee:	f000 fc49 	bl	8016184 <memcmp>
 80158f2:	4603      	mov	r3, r0
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d106      	bne.n	8015906 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	7b5b      	ldrb	r3, [r3, #13]
 80158fc:	f043 0308 	orr.w	r3, r3, #8
 8015900:	b2da      	uxtb	r2, r3
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015906:	89fb      	ldrh	r3, [r7, #14]
 8015908:	2b08      	cmp	r3, #8
 801590a:	d003      	beq.n	8015914 <ethernet_input+0xa0>
 801590c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015910:	d014      	beq.n	801593c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015912:	e032      	b.n	801597a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801591a:	f003 0308 	and.w	r3, r3, #8
 801591e:	2b00      	cmp	r3, #0
 8015920:	d024      	beq.n	801596c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015922:	8afb      	ldrh	r3, [r7, #22]
 8015924:	4619      	mov	r1, r3
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f7f7 fa0c 	bl	800cd44 <pbuf_remove_header>
 801592c:	4603      	mov	r3, r0
 801592e:	2b00      	cmp	r3, #0
 8015930:	d11e      	bne.n	8015970 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015932:	6839      	ldr	r1, [r7, #0]
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f7fe ff21 	bl	801477c <ip4_input>
      break;
 801593a:	e013      	b.n	8015964 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801593c:	683b      	ldr	r3, [r7, #0]
 801593e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015942:	f003 0308 	and.w	r3, r3, #8
 8015946:	2b00      	cmp	r3, #0
 8015948:	d014      	beq.n	8015974 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801594a:	8afb      	ldrh	r3, [r7, #22]
 801594c:	4619      	mov	r1, r3
 801594e:	6878      	ldr	r0, [r7, #4]
 8015950:	f7f7 f9f8 	bl	800cd44 <pbuf_remove_header>
 8015954:	4603      	mov	r3, r0
 8015956:	2b00      	cmp	r3, #0
 8015958:	d10e      	bne.n	8015978 <ethernet_input+0x104>
        etharp_input(p, netif);
 801595a:	6839      	ldr	r1, [r7, #0]
 801595c:	6878      	ldr	r0, [r7, #4]
 801595e:	f7fe f8c1 	bl	8013ae4 <etharp_input>
      break;
 8015962:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015964:	2300      	movs	r3, #0
 8015966:	e00c      	b.n	8015982 <ethernet_input+0x10e>
    goto free_and_return;
 8015968:	bf00      	nop
 801596a:	e006      	b.n	801597a <ethernet_input+0x106>
        goto free_and_return;
 801596c:	bf00      	nop
 801596e:	e004      	b.n	801597a <ethernet_input+0x106>
        goto free_and_return;
 8015970:	bf00      	nop
 8015972:	e002      	b.n	801597a <ethernet_input+0x106>
        goto free_and_return;
 8015974:	bf00      	nop
 8015976:	e000      	b.n	801597a <ethernet_input+0x106>
        goto free_and_return;
 8015978:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	f7f7 fa68 	bl	800ce50 <pbuf_free>
  return ERR_OK;
 8015980:	2300      	movs	r3, #0
}
 8015982:	4618      	mov	r0, r3
 8015984:	3718      	adds	r7, #24
 8015986:	46bd      	mov	sp, r7
 8015988:	bd80      	pop	{r7, pc}
 801598a:	bf00      	nop
 801598c:	08019d8c 	.word	0x08019d8c

08015990 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015990:	b580      	push	{r7, lr}
 8015992:	b086      	sub	sp, #24
 8015994:	af00      	add	r7, sp, #0
 8015996:	60f8      	str	r0, [r7, #12]
 8015998:	60b9      	str	r1, [r7, #8]
 801599a:	607a      	str	r2, [r7, #4]
 801599c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801599e:	8c3b      	ldrh	r3, [r7, #32]
 80159a0:	4618      	mov	r0, r3
 80159a2:	f7f5 fef7 	bl	800b794 <lwip_htons>
 80159a6:	4603      	mov	r3, r0
 80159a8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80159aa:	210e      	movs	r1, #14
 80159ac:	68b8      	ldr	r0, [r7, #8]
 80159ae:	f7f7 f9b9 	bl	800cd24 <pbuf_add_header>
 80159b2:	4603      	mov	r3, r0
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d125      	bne.n	8015a04 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80159b8:	68bb      	ldr	r3, [r7, #8]
 80159ba:	685b      	ldr	r3, [r3, #4]
 80159bc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80159be:	693b      	ldr	r3, [r7, #16]
 80159c0:	8afa      	ldrh	r2, [r7, #22]
 80159c2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80159c4:	693b      	ldr	r3, [r7, #16]
 80159c6:	2206      	movs	r2, #6
 80159c8:	6839      	ldr	r1, [r7, #0]
 80159ca:	4618      	mov	r0, r3
 80159cc:	f000 fbea 	bl	80161a4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	3306      	adds	r3, #6
 80159d4:	2206      	movs	r2, #6
 80159d6:	6879      	ldr	r1, [r7, #4]
 80159d8:	4618      	mov	r0, r3
 80159da:	f000 fbe3 	bl	80161a4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80159e4:	2b06      	cmp	r3, #6
 80159e6:	d006      	beq.n	80159f6 <ethernet_output+0x66>
 80159e8:	4b0a      	ldr	r3, [pc, #40]	; (8015a14 <ethernet_output+0x84>)
 80159ea:	f44f 7299 	mov.w	r2, #306	; 0x132
 80159ee:	490a      	ldr	r1, [pc, #40]	; (8015a18 <ethernet_output+0x88>)
 80159f0:	480a      	ldr	r0, [pc, #40]	; (8015a1c <ethernet_output+0x8c>)
 80159f2:	f000 fbed 	bl	80161d0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	699b      	ldr	r3, [r3, #24]
 80159fa:	68b9      	ldr	r1, [r7, #8]
 80159fc:	68f8      	ldr	r0, [r7, #12]
 80159fe:	4798      	blx	r3
 8015a00:	4603      	mov	r3, r0
 8015a02:	e002      	b.n	8015a0a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015a04:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015a06:	f06f 0301 	mvn.w	r3, #1
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3718      	adds	r7, #24
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}
 8015a12:	bf00      	nop
 8015a14:	08019bd4 	.word	0x08019bd4
 8015a18:	08019c0c 	.word	0x08019c0c
 8015a1c:	08019c40 	.word	0x08019c40

08015a20 <_write>:
	return ch;
}

/**@brief used for printf from the the terminal that connected to the port of the USB redirect printf*/
int _write(int file, char *ptr, int len)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b084      	sub	sp, #16
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	60f8      	str	r0, [r7, #12]
 8015a28:	60b9      	str	r1, [r7, #8]
 8015a2a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)ptr, len, 0xFFFF);
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	b29a      	uxth	r2, r3
 8015a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a34:	68b9      	ldr	r1, [r7, #8]
 8015a36:	4804      	ldr	r0, [pc, #16]	; (8015a48 <_write+0x28>)
 8015a38:	f7f3 fad6 	bl	8008fe8 <HAL_UART_Transmit>
	return len;
 8015a3c:	687b      	ldr	r3, [r7, #4]
}
 8015a3e:	4618      	mov	r0, r3
 8015a40:	3710      	adds	r7, #16
 8015a42:	46bd      	mov	sp, r7
 8015a44:	bd80      	pop	{r7, pc}
 8015a46:	bf00      	nop
 8015a48:	20000730 	.word	0x20000730

08015a4c <_read>:

/**@brief used for scanf from the the terminal that connected to the port of the USB redirect scanf*/
int _read(int file, char *ptr, int len)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	b086      	sub	sp, #24
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	60f8      	str	r0, [r7, #12]
 8015a54:	60b9      	str	r1, [r7, #8]
 8015a56:	607a      	str	r2, [r7, #4]
	int ch=0;
 8015a58:	2300      	movs	r3, #0
 8015a5a:	617b      	str	r3, [r7, #20]
	HAL_UART_Receive(UART_DEBUG, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8015a5c:	f107 0114 	add.w	r1, r7, #20
 8015a60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a64:	2201      	movs	r2, #1
 8015a66:	4817      	ldr	r0, [pc, #92]	; (8015ac4 <_read+0x78>)
 8015a68:	f7f3 fb41 	bl	80090ee <HAL_UART_Receive>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8015a6c:	f107 0114 	add.w	r1, r7, #20
 8015a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a74:	2201      	movs	r2, #1
 8015a76:	4813      	ldr	r0, [pc, #76]	; (8015ac4 <_read+0x78>)
 8015a78:	f7f3 fab6 	bl	8008fe8 <HAL_UART_Transmit>
	if(ch==13)
 8015a7c:	697b      	ldr	r3, [r7, #20]
 8015a7e:	2b0d      	cmp	r3, #13
 8015a80:	d10a      	bne.n	8015a98 <_read+0x4c>
	{
		ch=10;
 8015a82:	230a      	movs	r3, #10
 8015a84:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8015a86:	f107 0114 	add.w	r1, r7, #20
 8015a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a8e:	2201      	movs	r2, #1
 8015a90:	480c      	ldr	r0, [pc, #48]	; (8015ac4 <_read+0x78>)
 8015a92:	f7f3 faa9 	bl	8008fe8 <HAL_UART_Transmit>
 8015a96:	e00c      	b.n	8015ab2 <_read+0x66>
	}
	else if(ch==8)
 8015a98:	697b      	ldr	r3, [r7, #20]
 8015a9a:	2b08      	cmp	r3, #8
 8015a9c:	d109      	bne.n	8015ab2 <_read+0x66>
	{
		ch=0x30;
 8015a9e:	2330      	movs	r3, #48	; 0x30
 8015aa0:	617b      	str	r3, [r7, #20]
		HAL_UART_Transmit(UART_DEBUG, (uint8_t *)&ch, 1,HAL_MAX_DELAY);
 8015aa2:	f107 0114 	add.w	r1, r7, #20
 8015aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015aaa:	2201      	movs	r2, #1
 8015aac:	4805      	ldr	r0, [pc, #20]	; (8015ac4 <_read+0x78>)
 8015aae:	f7f3 fa9b 	bl	8008fe8 <HAL_UART_Transmit>
	}

	*ptr=ch;
 8015ab2:	697b      	ldr	r3, [r7, #20]
 8015ab4:	b2da      	uxtb	r2, r3
 8015ab6:	68bb      	ldr	r3, [r7, #8]
 8015ab8:	701a      	strb	r2, [r3, #0]

	return 1;
 8015aba:	2301      	movs	r3, #1
}
 8015abc:	4618      	mov	r0, r3
 8015abe:	3718      	adds	r7, #24
 8015ac0:	46bd      	mov	sp, r7
 8015ac2:	bd80      	pop	{r7, pc}
 8015ac4:	20000730 	.word	0x20000730

08015ac8 <I2C_UUT_DMA>:
 * @param iterations			running tests number of iterations.
 * @return number of iterations will be run, each iteration if bit pattern at start of the communication
 * 		   equals to the same as in the end RETURN 0xff TEST_FAILED, otherwise  0X01 TEST_SUCCEED.
 */
uint8_t I2C_UUT_DMA(uint8_t *bit_pattern, uint8_t bit_pattern_length, uint8_t iterations)
{
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015ad4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8015ad8:	6018      	str	r0, [r3, #0]
 8015ada:	4608      	mov	r0, r1
 8015adc:	4611      	mov	r1, r2
 8015ade:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015ae2:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015ae6:	4602      	mov	r2, r0
 8015ae8:	701a      	strb	r2, [r3, #0]
 8015aea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015aee:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8015af2:	460a      	mov	r2, r1
 8015af4:	701a      	strb	r2, [r3, #0]
	/* define and declare local buffers for slave and master */
	uint8_t local_buffer_slave[MAX_I2C_SLAVE_BUFFER_SIZE] = INIT_ALL_ZERO;
 8015af6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015afa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015afe:	2200      	movs	r2, #0
 8015b00:	601a      	str	r2, [r3, #0]
 8015b02:	3304      	adds	r3, #4
 8015b04:	22fb      	movs	r2, #251	; 0xfb
 8015b06:	2100      	movs	r1, #0
 8015b08:	4618      	mov	r0, r3
 8015b0a:	f000 fb59 	bl	80161c0 <memset>
	uint8_t local_buffer_master[MAX_I2C_MASTER_BUFFER_SIZE] = INIT_ALL_ZERO;
 8015b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015b12:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8015b16:	2200      	movs	r2, #0
 8015b18:	601a      	str	r2, [r3, #0]
 8015b1a:	3304      	adds	r3, #4
 8015b1c:	22fb      	movs	r2, #251	; 0xfb
 8015b1e:	2100      	movs	r1, #0
 8015b20:	4618      	mov	r0, r3
 8015b22:	f000 fb4d 	bl	80161c0 <memset>

	/* check status of receive transmit, error detection. (maby wire disconnected) */
	HAL_StatusTypeDef status = HAL_ERROR;
 8015b26:	2301      	movs	r3, #1
 8015b28:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	while(iterations)
 8015b2c:	e076      	b.n	8015c1c <I2C_UUT_DMA+0x154>
	{
		/* Master -> Slave */
		status = HAL_I2C_Slave_Receive_DMA(I2C_SLAVE, local_buffer_slave, bit_pattern_length);
 8015b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015b32:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	b29a      	uxth	r2, r3
 8015b3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015b3e:	4619      	mov	r1, r3
 8015b40:	483d      	ldr	r0, [pc, #244]	; (8015c38 <I2C_UUT_DMA+0x170>)
 8015b42:	f7ef f943 	bl	8004dcc <HAL_I2C_Slave_Receive_DMA>
 8015b46:	4603      	mov	r3, r0
 8015b48:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015b4c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d001      	beq.n	8015b58 <I2C_UUT_DMA+0x90>
		{
			return TEST_FAILED;
 8015b54:	23ff      	movs	r3, #255	; 0xff
 8015b56:	e069      	b.n	8015c2c <I2C_UUT_DMA+0x164>
		}

		status = HAL_I2C_Master_Transmit_DMA(I2C_MASTER, I2C_SLAVE_ADDRESS, (uint8_t *)bit_pattern, bit_pattern_length);
 8015b58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015b5c:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015b60:	781b      	ldrb	r3, [r3, #0]
 8015b62:	b29b      	uxth	r3, r3
 8015b64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8015b68:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 8015b6c:	6812      	ldr	r2, [r2, #0]
 8015b6e:	210f      	movs	r1, #15
 8015b70:	4832      	ldr	r0, [pc, #200]	; (8015c3c <I2C_UUT_DMA+0x174>)
 8015b72:	f7ee fe95 	bl	80048a0 <HAL_I2C_Master_Transmit_DMA>
 8015b76:	4603      	mov	r3, r0
 8015b78:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015b7c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d001      	beq.n	8015b88 <I2C_UUT_DMA+0xc0>
		{
			return TEST_FAILED;
 8015b84:	23ff      	movs	r3, #255	; 0xff
 8015b86:	e051      	b.n	8015c2c <I2C_UUT_DMA+0x164>
		}
		/* end commands Master -> Slave */

		/* Delay between DMA transmissions **too fast, data may not be send back properly */
		I2C_HAL_DELAY_2MS;
 8015b88:	2002      	movs	r0, #2
 8015b8a:	f7ec fde7 	bl	800275c <HAL_Delay>

		/* Slave -> Master */
		status = HAL_I2C_Master_Receive_DMA(I2C_MASTER, I2C_SLAVE_ADDRESS, local_buffer_master, bit_pattern_length);
 8015b8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015b92:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015b96:	781b      	ldrb	r3, [r3, #0]
 8015b98:	b29b      	uxth	r3, r3
 8015b9a:	f107 0208 	add.w	r2, r7, #8
 8015b9e:	210f      	movs	r1, #15
 8015ba0:	4826      	ldr	r0, [pc, #152]	; (8015c3c <I2C_UUT_DMA+0x174>)
 8015ba2:	f7ee ff6d 	bl	8004a80 <HAL_I2C_Master_Receive_DMA>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015bac:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d001      	beq.n	8015bb8 <I2C_UUT_DMA+0xf0>
		{
			return TEST_FAILED;
 8015bb4:	23ff      	movs	r3, #255	; 0xff
 8015bb6:	e039      	b.n	8015c2c <I2C_UUT_DMA+0x164>
		}

		status = HAL_I2C_Slave_Transmit_DMA(I2C_SLAVE, local_buffer_slave, bit_pattern_length);
 8015bb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015bbc:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015bc0:	781b      	ldrb	r3, [r3, #0]
 8015bc2:	b29a      	uxth	r2, r3
 8015bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015bc8:	4619      	mov	r1, r3
 8015bca:	481b      	ldr	r0, [pc, #108]	; (8015c38 <I2C_UUT_DMA+0x170>)
 8015bcc:	f7ef f848 	bl	8004c60 <HAL_I2C_Slave_Transmit_DMA>
 8015bd0:	4603      	mov	r3, r0
 8015bd2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015bd6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d001      	beq.n	8015be2 <I2C_UUT_DMA+0x11a>
		{
			return TEST_FAILED;
 8015bde:	23ff      	movs	r3, #255	; 0xff
 8015be0:	e024      	b.n	8015c2c <I2C_UUT_DMA+0x164>
		}
		/* end commands Slave -> Master */

		/* Delay between DMA transmission to strcmp **too fast, data may not be send back properly */
		I2C_HAL_DELAY_2MS;
 8015be2:	2002      	movs	r0, #2
 8015be4:	f7ec fdba 	bl	800275c <HAL_Delay>

		/* compare the data results at the end of communication with data given by the functions parameters */
		if(strcmp((char*)local_buffer_master, (char*)bit_pattern)!=STRCMP_EQUALS)
 8015be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015bec:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8015bf0:	f107 0208 	add.w	r2, r7, #8
 8015bf4:	6819      	ldr	r1, [r3, #0]
 8015bf6:	4610      	mov	r0, r2
 8015bf8:	f7ea fb0a 	bl	8000210 <strcmp>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d001      	beq.n	8015c06 <I2C_UUT_DMA+0x13e>
		{
			/* test did not pass, test failed */
			return TEST_FAILED;
 8015c02:	23ff      	movs	r3, #255	; 0xff
 8015c04:	e012      	b.n	8015c2c <I2C_UUT_DMA+0x164>
		}

		--iterations;
 8015c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015c0a:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8015c0e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8015c12:	f2a2 2206 	subw	r2, r2, #518	; 0x206
 8015c16:	7812      	ldrb	r2, [r2, #0]
 8015c18:	3a01      	subs	r2, #1
 8015c1a:	701a      	strb	r2, [r3, #0]
	while(iterations)
 8015c1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015c20:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8015c24:	781b      	ldrb	r3, [r3, #0]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d181      	bne.n	8015b2e <I2C_UUT_DMA+0x66>
	}

	/* test passed successfuly*/
	return TEST_SUCCEED;
 8015c2a:	2301      	movs	r3, #1
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8015c32:	46bd      	mov	sp, r7
 8015c34:	bd80      	pop	{r7, pc}
 8015c36:	bf00      	nop
 8015c38:	200001ec 	.word	0x200001ec
 8015c3c:	20000240 	.word	0x20000240

08015c40 <UUT_main>:
 */
uint8_t test_status = INIT_TO_ZERO;

/**@brief the main function to run the tests, the life of the program*/
void UUT_main(void)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	af00      	add	r7, sp, #0

	/* ******* INIT PHASE ******* */
	UDP_Client_Init();
 8015c44:	f000 fa1a 	bl	801607c <UDP_Client_Init>
		/**
		 * @brief 	function that should be called when the Ethernet interface identify a coming packet
		 * 			because this client need to constantly receives some packets to tell it to do some tests
		 * 			its inside the while(TRUE), e.g. life loop.
		 */
		ethernetif_input(GNETIF_ADDR);
 8015c48:	481e      	ldr	r0, [pc, #120]	; (8015cc4 <UUT_main+0x84>)
 8015c4a:	f7f5 fb2f 	bl	800b2ac <ethernetif_input>
		/**@brief check connection timeouts*/
		sys_check_timeouts();
 8015c4e:	f7fc fe93 	bl	8012978 <sys_check_timeouts>
		if(udp_packet_is_received == PACKET_RECEIVED)
 8015c52:	4b1d      	ldr	r3, [pc, #116]	; (8015cc8 <UUT_main+0x88>)
 8015c54:	781b      	ldrb	r3, [r3, #0]
 8015c56:	2b01      	cmp	r3, #1
 8015c58:	d1f6      	bne.n	8015c48 <UUT_main+0x8>
		{
			test_status = (UART_DMA_UUT((uint8_t*)"ShacharIsTheKing\r\n", 18,1));
 8015c5a:	2201      	movs	r2, #1
 8015c5c:	2112      	movs	r1, #18
 8015c5e:	481b      	ldr	r0, [pc, #108]	; (8015ccc <UUT_main+0x8c>)
 8015c60:	f000 f90c 	bl	8015e7c <UART_DMA_UUT>
 8015c64:	4603      	mov	r3, r0
 8015c66:	461a      	mov	r2, r3
 8015c68:	4b19      	ldr	r3, [pc, #100]	; (8015cd0 <UUT_main+0x90>)
 8015c6a:	701a      	strb	r2, [r3, #0]
			test_status = (I2C_UUT_DMA((uint8_t*)"ShacharIsTheKing\r\n", 18,1));
 8015c6c:	2201      	movs	r2, #1
 8015c6e:	2112      	movs	r1, #18
 8015c70:	4816      	ldr	r0, [pc, #88]	; (8015ccc <UUT_main+0x8c>)
 8015c72:	f7ff ff29 	bl	8015ac8 <I2C_UUT_DMA>
 8015c76:	4603      	mov	r3, r0
 8015c78:	461a      	mov	r2, r3
 8015c7a:	4b15      	ldr	r3, [pc, #84]	; (8015cd0 <UUT_main+0x90>)
 8015c7c:	701a      	strb	r2, [r3, #0]
			test_status = (SPI_UUT_DMA((uint8_t*)"ShacharIsTheKing\r\n", 18,4));
 8015c7e:	2204      	movs	r2, #4
 8015c80:	2112      	movs	r1, #18
 8015c82:	4812      	ldr	r0, [pc, #72]	; (8015ccc <UUT_main+0x8c>)
 8015c84:	f000 f82a 	bl	8015cdc <SPI_UUT_DMA>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	4b10      	ldr	r3, [pc, #64]	; (8015cd0 <UUT_main+0x90>)
 8015c8e:	701a      	strb	r2, [r3, #0]

			test_status = TIMER_UUT(7199,9999,1);
 8015c90:	2201      	movs	r2, #1
 8015c92:	f242 710f 	movw	r1, #9999	; 0x270f
 8015c96:	f641 401f 	movw	r0, #7199	; 0x1c1f
 8015c9a:	f000 f86d 	bl	8015d78 <TIMER_UUT>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	461a      	mov	r2, r3
 8015ca2:	4b0b      	ldr	r3, [pc, #44]	; (8015cd0 <UUT_main+0x90>)
 8015ca4:	701a      	strb	r2, [r3, #0]
			buildResProtocol(*(uint32_t*)"1523\n", TEST_SUCCEED);
 8015ca6:	4b0b      	ldr	r3, [pc, #44]	; (8015cd4 <UUT_main+0x94>)
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	2101      	movs	r1, #1
 8015cac:	4618      	mov	r0, r3
 8015cae:	f000 fa31 	bl	8016114 <buildResProtocol>
			udpClient_send(&sentPacketData,sizeof(sentPacketData));
 8015cb2:	2105      	movs	r1, #5
 8015cb4:	4808      	ldr	r0, [pc, #32]	; (8015cd8 <UUT_main+0x98>)
 8015cb6:	f000 f9b9 	bl	801602c <udpClient_send>
			udp_packet_is_received = PACKET_NOT_RECEIVED;
 8015cba:	4b03      	ldr	r3, [pc, #12]	; (8015cc8 <UUT_main+0x88>)
 8015cbc:	2200      	movs	r2, #0
 8015cbe:	701a      	strb	r2, [r3, #0]
		ethernetif_input(GNETIF_ADDR);
 8015cc0:	e7c2      	b.n	8015c48 <UUT_main+0x8>
 8015cc2:	bf00      	nop
 8015cc4:	20000ed0 	.word	0x20000ed0
 8015cc8:	20009389 	.word	0x20009389
 8015ccc:	08019c68 	.word	0x08019c68
 8015cd0:	2000907a 	.word	0x2000907a
 8015cd4:	08019c7c 	.word	0x08019c7c
 8015cd8:	20009384 	.word	0x20009384

08015cdc <SPI_UUT_DMA>:

uint8_t local_master_buffer[MAX_SPI_MASTER_BUFFER_SIZE];
uint8_t local_slave_buffer[MAX_SPI_SLAVE_BUFFER_SIZE];

uint8_t SPI_UUT_DMA( uint8_t *bit_pattern,  uint8_t bit_pattern_length, uint8_t iterations)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b084      	sub	sp, #16
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
 8015ce4:	460b      	mov	r3, r1
 8015ce6:	70fb      	strb	r3, [r7, #3]
 8015ce8:	4613      	mov	r3, r2
 8015cea:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_ERROR;
 8015cec:	2301      	movs	r3, #1
 8015cee:	73fb      	strb	r3, [r7, #15]

	while(iterations)
 8015cf0:	e019      	b.n	8015d26 <SPI_UUT_DMA+0x4a>
	{
		HAL_SPI_TransmitReceive_DMA(SPI_SLAVE, local_slave_buffer, local_slave_buffer, bit_pattern_length);
 8015cf2:	78fb      	ldrb	r3, [r7, #3]
 8015cf4:	b29b      	uxth	r3, r3
 8015cf6:	4a10      	ldr	r2, [pc, #64]	; (8015d38 <SPI_UUT_DMA+0x5c>)
 8015cf8:	490f      	ldr	r1, [pc, #60]	; (8015d38 <SPI_UUT_DMA+0x5c>)
 8015cfa:	4810      	ldr	r0, [pc, #64]	; (8015d3c <SPI_UUT_DMA+0x60>)
 8015cfc:	f7f1 ffe2 	bl	8007cc4 <HAL_SPI_TransmitReceive_DMA>

		HAL_SPI_TransmitReceive_DMA(SPI_MASTER, bit_pattern, local_master_buffer, bit_pattern_length);
 8015d00:	78fb      	ldrb	r3, [r7, #3]
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	4a0e      	ldr	r2, [pc, #56]	; (8015d40 <SPI_UUT_DMA+0x64>)
 8015d06:	6879      	ldr	r1, [r7, #4]
 8015d08:	480e      	ldr	r0, [pc, #56]	; (8015d44 <SPI_UUT_DMA+0x68>)
 8015d0a:	f7f1 ffdb 	bl	8007cc4 <HAL_SPI_TransmitReceive_DMA>

		if(strcmp((char*)local_master_buffer, (char*)bit_pattern)!=STRCMP_EQUALS)
 8015d0e:	6879      	ldr	r1, [r7, #4]
 8015d10:	480b      	ldr	r0, [pc, #44]	; (8015d40 <SPI_UUT_DMA+0x64>)
 8015d12:	f7ea fa7d 	bl	8000210 <strcmp>
 8015d16:	4603      	mov	r3, r0
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d001      	beq.n	8015d20 <SPI_UUT_DMA+0x44>
		{
			return TEST_FAILED;
 8015d1c:	23ff      	movs	r3, #255	; 0xff
 8015d1e:	e006      	b.n	8015d2e <SPI_UUT_DMA+0x52>
		}

		--iterations;
 8015d20:	78bb      	ldrb	r3, [r7, #2]
 8015d22:	3b01      	subs	r3, #1
 8015d24:	70bb      	strb	r3, [r7, #2]
	while(iterations)
 8015d26:	78bb      	ldrb	r3, [r7, #2]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d1e2      	bne.n	8015cf2 <SPI_UUT_DMA+0x16>
	}

	return TEST_SUCCEED;
 8015d2c:	2301      	movs	r3, #1
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3710      	adds	r7, #16
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	2000917c 	.word	0x2000917c
 8015d3c:	20000478 	.word	0x20000478
 8015d40:	2000907c 	.word	0x2000907c
 8015d44:	20000414 	.word	0x20000414

08015d48 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief elapsed timer callback function implementation, turn on timer flag.
 * 		  which indicates the timer ends.
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8015d48:	b480      	push	{r7}
 8015d4a:	b083      	sub	sp, #12
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
	if(htim == BASIC_TIMER1_HANDLE)
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	4a06      	ldr	r2, [pc, #24]	; (8015d6c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8015d54:	4293      	cmp	r3, r2
 8015d56:	d102      	bne.n	8015d5e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_end = TIMER_END;
 8015d58:	4b05      	ldr	r3, [pc, #20]	; (8015d70 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8015d5a:	2201      	movs	r2, #1
 8015d5c:	701a      	strb	r2, [r3, #0]
	}
}
 8015d5e:	bf00      	nop
 8015d60:	370c      	adds	r7, #12
 8015d62:	46bd      	mov	sp, r7
 8015d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d68:	4770      	bx	lr
 8015d6a:	bf00      	nop
 8015d6c:	2000065c 	.word	0x2000065c
 8015d70:	2000927b 	.word	0x2000927b
 8015d74:	00000000 	.word	0x00000000

08015d78 <TIMER_UUT>:
 * @param 	period			the period value.
 * @param 	iterations		running the test number of iterations.
 * @return	running it number of iterations to if one of them fails return TEST_FAILED 0xff, otherwise TEST_SUCCEED 0x01
 */
uint8_t TIMER_UUT(uint32_t prescalar, uint32_t period, uint8_t iterations)
{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b08a      	sub	sp, #40	; 0x28
 8015d7c:	af00      	add	r7, sp, #0
 8015d7e:	60f8      	str	r0, [r7, #12]
 8015d80:	60b9      	str	r1, [r7, #8]
 8015d82:	4613      	mov	r3, r2
 8015d84:	71fb      	strb	r3, [r7, #7]
	//TIM master configurations
	TIM_MasterConfigTypeDef sMasterConfig = INIT_ALL_ZERO;
 8015d86:	f107 0314 	add.w	r3, r7, #20
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	601a      	str	r2, [r3, #0]
 8015d8e:	605a      	str	r2, [r3, #4]
 8015d90:	609a      	str	r2, [r3, #8]
	double timer_elaps_time = (double)((prescalar+PRESCALAR_ADDED_VAL)*(period+PERIOD_ADDED_VAL))/SYS_CLK_FREQ;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	3301      	adds	r3, #1
 8015d96:	68ba      	ldr	r2, [r7, #8]
 8015d98:	3201      	adds	r2, #1
 8015d9a:	fb02 f303 	mul.w	r3, r2, r3
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f7ea fbd8 	bl	8000554 <__aeabi_ui2d>
 8015da4:	a333      	add	r3, pc, #204	; (adr r3, 8015e74 <TIMER_UUT+0xfc>)
 8015da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015daa:	f7ea fd77 	bl	800089c <__aeabi_ddiv>
 8015dae:	4602      	mov	r2, r0
 8015db0:	460b      	mov	r3, r1
 8015db2:	e9c7 2308 	strd	r2, r3, [r7, #32]

	/* initialize timer with given params */
	(*BASIC_TIMER1_HANDLE).Init.Prescaler = prescalar;
 8015db6:	4a2c      	ldr	r2, [pc, #176]	; (8015e68 <TIMER_UUT+0xf0>)
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	6053      	str	r3, [r2, #4]
	(*BASIC_TIMER1_HANDLE).Init.Period = period;
 8015dbc:	4a2a      	ldr	r2, [pc, #168]	; (8015e68 <TIMER_UUT+0xf0>)
 8015dbe:	68bb      	ldr	r3, [r7, #8]
 8015dc0:	60d3      	str	r3, [r2, #12]
	(*BASIC_TIMER1_HANDLE).Instance = BASIC_TIMER1;
 8015dc2:	4b29      	ldr	r3, [pc, #164]	; (8015e68 <TIMER_UUT+0xf0>)
 8015dc4:	4a29      	ldr	r2, [pc, #164]	; (8015e6c <TIMER_UUT+0xf4>)
 8015dc6:	601a      	str	r2, [r3, #0]
	(*BASIC_TIMER1_HANDLE).Init.CounterMode = TIM_COUNTERMODE_UP;
 8015dc8:	4b27      	ldr	r3, [pc, #156]	; (8015e68 <TIMER_UUT+0xf0>)
 8015dca:	2200      	movs	r2, #0
 8015dcc:	609a      	str	r2, [r3, #8]
	(*BASIC_TIMER1_HANDLE).Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8015dce:	4b26      	ldr	r3, [pc, #152]	; (8015e68 <TIMER_UUT+0xf0>)
 8015dd0:	2280      	movs	r2, #128	; 0x80
 8015dd2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(BASIC_TIMER1_HANDLE) != HAL_OK)
 8015dd4:	4824      	ldr	r0, [pc, #144]	; (8015e68 <TIMER_UUT+0xf0>)
 8015dd6:	f7f2 fd27 	bl	8008828 <HAL_TIM_Base_Init>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d001      	beq.n	8015de4 <TIMER_UUT+0x6c>
	{
		Error_Handler();
 8015de0:	f7eb fb9e 	bl	8001520 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8015de4:	2300      	movs	r3, #0
 8015de6:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8015de8:	2300      	movs	r3, #0
 8015dea:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(BASIC_TIMER1_HANDLE, &sMasterConfig) != HAL_OK)
 8015dec:	f107 0314 	add.w	r3, r7, #20
 8015df0:	4619      	mov	r1, r3
 8015df2:	481d      	ldr	r0, [pc, #116]	; (8015e68 <TIMER_UUT+0xf0>)
 8015df4:	f7f2 fffe 	bl	8008df4 <HAL_TIMEx_MasterConfigSynchronization>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d02a      	beq.n	8015e54 <TIMER_UUT+0xdc>
	{
		Error_Handler();
 8015dfe:	f7eb fb8f 	bl	8001520 <Error_Handler>
	}


	/* test phase */
	while(iterations)
 8015e02:	e027      	b.n	8015e54 <TIMER_UUT+0xdc>
	{
		/* start timer*/
		HAL_TIM_Base_Start_IT(BASIC_TIMER1_HANDLE);
 8015e04:	4818      	ldr	r0, [pc, #96]	; (8015e68 <TIMER_UUT+0xf0>)
 8015e06:	f7f2 fd67 	bl	80088d8 <HAL_TIM_Base_Start_IT>

		/* delay for checking the elapsing time of the timer. */
		HAL_Delay(timer_elaps_time);
 8015e0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8015e0e:	f7ea fe2d 	bl	8000a6c <__aeabi_d2uiz>
 8015e12:	4603      	mov	r3, r0
 8015e14:	4618      	mov	r0, r3
 8015e16:	f7ec fca1 	bl	800275c <HAL_Delay>

		if(timer_end != TIMER_END)
 8015e1a:	4b15      	ldr	r3, [pc, #84]	; (8015e70 <TIMER_UUT+0xf8>)
 8015e1c:	781b      	ldrb	r3, [r3, #0]
 8015e1e:	2b01      	cmp	r3, #1
 8015e20:	d007      	beq.n	8015e32 <TIMER_UUT+0xba>
		{
			/* stops the timer */
			HAL_TIM_Base_Stop_IT(BASIC_TIMER1_HANDLE);
 8015e22:	4811      	ldr	r0, [pc, #68]	; (8015e68 <TIMER_UUT+0xf0>)
 8015e24:	f7f2 fdd0 	bl	80089c8 <HAL_TIM_Base_Stop_IT>

			timer_end = TIMER_NOT_END;
 8015e28:	4b11      	ldr	r3, [pc, #68]	; (8015e70 <TIMER_UUT+0xf8>)
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	701a      	strb	r2, [r3, #0]

			return TEST_FAILED;
 8015e2e:	23ff      	movs	r3, #255	; 0xff
 8015e30:	e014      	b.n	8015e5c <TIMER_UUT+0xe4>
		}

		/* stops the timer */
		HAL_TIM_Base_Stop_IT(BASIC_TIMER1_HANDLE);
 8015e32:	480d      	ldr	r0, [pc, #52]	; (8015e68 <TIMER_UUT+0xf0>)
 8015e34:	f7f2 fdc8 	bl	80089c8 <HAL_TIM_Base_Stop_IT>

//		/* delay ensuring timer stopped before started another. */
		HAL_Delay(timer_elaps_time);
 8015e38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8015e3c:	f7ea fe16 	bl	8000a6c <__aeabi_d2uiz>
 8015e40:	4603      	mov	r3, r0
 8015e42:	4618      	mov	r0, r3
 8015e44:	f7ec fc8a 	bl	800275c <HAL_Delay>

		timer_end = TIMER_NOT_END;
 8015e48:	4b09      	ldr	r3, [pc, #36]	; (8015e70 <TIMER_UUT+0xf8>)
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	701a      	strb	r2, [r3, #0]

		--iterations;
 8015e4e:	79fb      	ldrb	r3, [r7, #7]
 8015e50:	3b01      	subs	r3, #1
 8015e52:	71fb      	strb	r3, [r7, #7]
	while(iterations)
 8015e54:	79fb      	ldrb	r3, [r7, #7]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d1d4      	bne.n	8015e04 <TIMER_UUT+0x8c>
	}
	return TEST_SUCCEED;
 8015e5a:	2301      	movs	r3, #1
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3728      	adds	r7, #40	; 0x28
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}
 8015e64:	f3af 8000 	nop.w
 8015e68:	2000065c 	.word	0x2000065c
 8015e6c:	40001400 	.word	0x40001400
 8015e70:	2000927b 	.word	0x2000927b
 8015e74:	00000000 	.word	0x00000000
 8015e78:	41912a88 	.word	0x41912a88

08015e7c <UART_DMA_UUT>:
 * @param iterations			running tests number of iterations.
 * @return number of iterations will be run, each iteration if bit pattern at start of the communication
 * 		   equals to the same as in the end RETURN 0xff TEST_FAILED, otherwise  0X01 TEST_SUCCEED.
 */
uint8_t UART_DMA_UUT(uint8_t *bit_pattern, uint8_t bit_pattern_length, uint8_t iterations)
{
 8015e7c:	b580      	push	{r7, lr}
 8015e7e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8015e82:	af00      	add	r7, sp, #0
 8015e84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015e88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8015e8c:	6018      	str	r0, [r3, #0]
 8015e8e:	4608      	mov	r0, r1
 8015e90:	4611      	mov	r1, r2
 8015e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015e96:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015e9a:	4602      	mov	r2, r0
 8015e9c:	701a      	strb	r2, [r3, #0]
 8015e9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015ea2:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8015ea6:	460a      	mov	r2, r1
 8015ea8:	701a      	strb	r2, [r3, #0]
	/* define and declare local buffers for device 1 and device 0 */
	uint8_t local_buffer_dev_1[MAX_UART_DEV1_BUFFER_SIZE] = INIT_ALL_ZERO;
 8015eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015eae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8015eb2:	2200      	movs	r2, #0
 8015eb4:	601a      	str	r2, [r3, #0]
 8015eb6:	3304      	adds	r3, #4
 8015eb8:	22fb      	movs	r2, #251	; 0xfb
 8015eba:	2100      	movs	r1, #0
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f000 f97f 	bl	80161c0 <memset>
	uint8_t local_buffer_dev_0[MAX_UART_DEV0_BUFFER_SIZE] = INIT_ALL_ZERO;
 8015ec2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015ec6:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8015eca:	2200      	movs	r2, #0
 8015ecc:	601a      	str	r2, [r3, #0]
 8015ece:	3304      	adds	r3, #4
 8015ed0:	22fb      	movs	r2, #251	; 0xfb
 8015ed2:	2100      	movs	r1, #0
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	f000 f973 	bl	80161c0 <memset>

	/* check status of receive transmit, error detection. (maby wire disconnected) */
	HAL_StatusTypeDef status = HAL_ERROR;
 8015eda:	2301      	movs	r3, #1
 8015edc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

	while(iterations)
 8015ee0:	e075      	b.n	8015fce <UART_DMA_UUT+0x152>
	{
		/* DEVICE 1 -> DEVICE 0 */
		status = HAL_UART_Receive_DMA(UART_DEVICE_0, local_buffer_dev_0, bit_pattern_length);
 8015ee2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015ee6:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015eea:	781b      	ldrb	r3, [r3, #0]
 8015eec:	b29a      	uxth	r2, r3
 8015eee:	f107 0308 	add.w	r3, r7, #8
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	483c      	ldr	r0, [pc, #240]	; (8015fe8 <UART_DMA_UUT+0x16c>)
 8015ef6:	f7f3 fa3b 	bl	8009370 <HAL_UART_Receive_DMA>
 8015efa:	4603      	mov	r3, r0
 8015efc:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015f00:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d001      	beq.n	8015f0c <UART_DMA_UUT+0x90>
		{
			return TEST_FAILED;
 8015f08:	23ff      	movs	r3, #255	; 0xff
 8015f0a:	e068      	b.n	8015fde <UART_DMA_UUT+0x162>
		}

		status = HAL_UART_Transmit_DMA(UART_DEVICE_1, bit_pattern, bit_pattern_length);
 8015f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015f10:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015f14:	781b      	ldrb	r3, [r3, #0]
 8015f16:	b29a      	uxth	r2, r3
 8015f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015f1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8015f20:	6819      	ldr	r1, [r3, #0]
 8015f22:	4832      	ldr	r0, [pc, #200]	; (8015fec <UART_DMA_UUT+0x170>)
 8015f24:	f7f3 f9a8 	bl	8009278 <HAL_UART_Transmit_DMA>
 8015f28:	4603      	mov	r3, r0
 8015f2a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015f2e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d001      	beq.n	8015f3a <UART_DMA_UUT+0xbe>
		{
			return TEST_FAILED;
 8015f36:	23ff      	movs	r3, #255	; 0xff
 8015f38:	e051      	b.n	8015fde <UART_DMA_UUT+0x162>
		}
		/* end commands DEVICE 1 -> DEVICE 0 */

		/* Delay between DMA transmissions **too fast, data may be send back properly */
		UART_HAL_DELAY_1MS;
 8015f3a:	2001      	movs	r0, #1
 8015f3c:	f7ec fc0e 	bl	800275c <HAL_Delay>

		/* DEVICE 0 -> DEVICE 1 */
		status = HAL_UART_Receive_DMA(UART_DEVICE_1, local_buffer_dev_1, bit_pattern_length);
 8015f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015f44:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015f48:	781b      	ldrb	r3, [r3, #0]
 8015f4a:	b29a      	uxth	r2, r3
 8015f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8015f50:	4619      	mov	r1, r3
 8015f52:	4826      	ldr	r0, [pc, #152]	; (8015fec <UART_DMA_UUT+0x170>)
 8015f54:	f7f3 fa0c 	bl	8009370 <HAL_UART_Receive_DMA>
 8015f58:	4603      	mov	r3, r0
 8015f5a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015f5e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d001      	beq.n	8015f6a <UART_DMA_UUT+0xee>
		{
			return TEST_FAILED;
 8015f66:	23ff      	movs	r3, #255	; 0xff
 8015f68:	e039      	b.n	8015fde <UART_DMA_UUT+0x162>
		}

		status = HAL_UART_Transmit_DMA(UART_DEVICE_0, local_buffer_dev_0, bit_pattern_length);
 8015f6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015f6e:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8015f72:	781b      	ldrb	r3, [r3, #0]
 8015f74:	b29a      	uxth	r2, r3
 8015f76:	f107 0308 	add.w	r3, r7, #8
 8015f7a:	4619      	mov	r1, r3
 8015f7c:	481a      	ldr	r0, [pc, #104]	; (8015fe8 <UART_DMA_UUT+0x16c>)
 8015f7e:	f7f3 f97b 	bl	8009278 <HAL_UART_Transmit_DMA>
 8015f82:	4603      	mov	r3, r0
 8015f84:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207

		if(status != HAL_OK)
 8015f88:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d001      	beq.n	8015f94 <UART_DMA_UUT+0x118>
		{
			return TEST_FAILED;
 8015f90:	23ff      	movs	r3, #255	; 0xff
 8015f92:	e024      	b.n	8015fde <UART_DMA_UUT+0x162>
		}
		/* end commands DEVICE 0 -> DEVICE 1 */

		/* Delay between DMA transmission to strcmp **too fast, data may not be send back properly */
		UART_HAL_DELAY_1MS;
 8015f94:	2001      	movs	r0, #1
 8015f96:	f7ec fbe1 	bl	800275c <HAL_Delay>

		/* compare the data results at the end of communication with data given by the functions parameters */
		if(strcmp((char*)local_buffer_dev_1, (char*)bit_pattern)!=STRCMP_EQUALS)
 8015f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015f9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8015fa2:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8015fa6:	6819      	ldr	r1, [r3, #0]
 8015fa8:	4610      	mov	r0, r2
 8015faa:	f7ea f931 	bl	8000210 <strcmp>
 8015fae:	4603      	mov	r3, r0
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d001      	beq.n	8015fb8 <UART_DMA_UUT+0x13c>
		{
			/* test did not pass, test failed */
			return TEST_FAILED;
 8015fb4:	23ff      	movs	r3, #255	; 0xff
 8015fb6:	e012      	b.n	8015fde <UART_DMA_UUT+0x162>
		}

		--iterations;
 8015fb8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015fbc:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8015fc0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8015fc4:	f2a2 2206 	subw	r2, r2, #518	; 0x206
 8015fc8:	7812      	ldrb	r2, [r2, #0]
 8015fca:	3a01      	subs	r2, #1
 8015fcc:	701a      	strb	r2, [r3, #0]
	while(iterations)
 8015fce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8015fd2:	f2a3 2306 	subw	r3, r3, #518	; 0x206
 8015fd6:	781b      	ldrb	r3, [r3, #0]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d182      	bne.n	8015ee2 <UART_DMA_UUT+0x66>
	}

	/* test passed successfuly*/
	return TEST_SUCCEED;
 8015fdc:	2301      	movs	r3, #1
}
 8015fde:	4618      	mov	r0, r3
 8015fe0:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bd80      	pop	{r7, pc}
 8015fe8:	200007b8 	.word	0x200007b8
 8015fec:	200006a8 	.word	0x200006a8

08015ff0 <udp_receive_callback>:
* @param p		the packet buffer that was received
* @param addr	the remote IP address from which the packet was received
* @param port	the remote port from which the packet was received
*/
void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b084      	sub	sp, #16
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	60f8      	str	r0, [r7, #12]
 8015ff8:	60b9      	str	r1, [r7, #8]
 8015ffa:	607a      	str	r2, [r7, #4]
 8015ffc:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	memcpy((char*)&receivedPacketData, (char *)p->payload, p->len);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	6859      	ldr	r1, [r3, #4]
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	895b      	ldrh	r3, [r3, #10]
 8016006:	461a      	mov	r2, r3
 8016008:	4806      	ldr	r0, [pc, #24]	; (8016024 <udp_receive_callback+0x34>)
 801600a:	f000 f8cb 	bl	80161a4 <memcpy>

	udp_packet_is_received = PACKET_RECEIVED;
 801600e:	4b06      	ldr	r3, [pc, #24]	; (8016028 <udp_receive_callback+0x38>)
 8016010:	2201      	movs	r2, #1
 8016012:	701a      	strb	r2, [r3, #0]

	/* Free receive pbuf */
	pbuf_free(p);
 8016014:	6878      	ldr	r0, [r7, #4]
 8016016:	f7f6 ff1b 	bl	800ce50 <pbuf_free>
}
 801601a:	bf00      	nop
 801601c:	3710      	adds	r7, #16
 801601e:	46bd      	mov	sp, r7
 8016020:	bd80      	pop	{r7, pc}
 8016022:	bf00      	nop
 8016024:	2000927c 	.word	0x2000927c
 8016028:	20009389 	.word	0x20009389

0801602c <udpClient_send>:
 * @param [in] pdata	 - pointer to the resultProtocol structure variable (sentPacketData)
 * 		 			 	   to send to the server via UDP
 * @param [in] data_size - the size of the data to send back to the server via UDP.
 */
void udpClient_send(res_prtcl *pdata, size_t data_size)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b084      	sub	sp, #16
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
 8016034:	6039      	str	r1, [r7, #0]
  /* allocate pbuf from pool*/
  struct pbuf *txBuf = pbuf_alloc(PBUF_TRANSPORT, data_size, PBUF_RAM);
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	b29b      	uxth	r3, r3
 801603a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801603e:	4619      	mov	r1, r3
 8016040:	2036      	movs	r0, #54	; 0x36
 8016042:	f7f6 fc21 	bl	800c888 <pbuf_alloc>
 8016046:	60f8      	str	r0, [r7, #12]

  if (txBuf != NULL)
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d00f      	beq.n	801606e <udpClient_send+0x42>
  {
    /* copy data to pbuf */
    pbuf_take(txBuf, (char*)pdata, data_size);
 801604e:	683b      	ldr	r3, [r7, #0]
 8016050:	b29b      	uxth	r3, r3
 8016052:	461a      	mov	r2, r3
 8016054:	6879      	ldr	r1, [r7, #4]
 8016056:	68f8      	ldr	r0, [r7, #12]
 8016058:	f7f7 f966 	bl	800d328 <pbuf_take>

    /* send udp data */
    udp_send(my_upcb, txBuf);
 801605c:	4b06      	ldr	r3, [pc, #24]	; (8016078 <udpClient_send+0x4c>)
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	68f9      	ldr	r1, [r7, #12]
 8016062:	4618      	mov	r0, r3
 8016064:	f7fc fe8c 	bl	8012d80 <udp_send>

    /* free pbuf */
    pbuf_free(txBuf);
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f7f6 fef1 	bl	800ce50 <pbuf_free>
  }
}
 801606e:	bf00      	nop
 8016070:	3710      	adds	r7, #16
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}
 8016076:	bf00      	nop
 8016078:	2000938c 	.word	0x2000938c

0801607c <UDP_Client_Init>:
/**
 * @fn 		void UDP_Client_Init(void)
 * @brief	initialize a UDP connection
 */
void UDP_Client_Init(void)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b084      	sub	sp, #16
 8016080:	af00      	add	r7, sp, #0

	err_t err;

	/* 1. Create a new UDP control block  */
	my_upcb = udp_new();
 8016082:	f7fd f9bf 	bl	8013404 <udp_new>
 8016086:	4603      	mov	r3, r0
 8016088:	4a1c      	ldr	r2, [pc, #112]	; (80160fc <UDP_Client_Init+0x80>)
 801608a:	6013      	str	r3, [r2, #0]

	/* Bind the block to module's IP and port */
	ip_addr_t myIPaddr;
	CONVERTED_SRC_IP_ADDR(myIPaddr);
 801608c:	4b1c      	ldr	r3, [pc, #112]	; (8016100 <UDP_Client_Init+0x84>)
 801608e:	60bb      	str	r3, [r7, #8]
	udp_bind(my_upcb, &myIPaddr, SRC_PORT);
 8016090:	4b1a      	ldr	r3, [pc, #104]	; (80160fc <UDP_Client_Init+0x80>)
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	f107 0108 	add.w	r1, r7, #8
 8016098:	f64c 3220 	movw	r2, #52000	; 0xcb20
 801609c:	4618      	mov	r0, r3
 801609e:	f7fd f859 	bl	8013154 <udp_bind>


	/* configure destination IP address and port */
	ip_addr_t DestIPaddr;
	CONVERTED_DST_IP_ADDR(DestIPaddr);
 80160a2:	4b18      	ldr	r3, [pc, #96]	; (8016104 <UDP_Client_Init+0x88>)
 80160a4:	607b      	str	r3, [r7, #4]
	err= udp_connect(my_upcb, &DestIPaddr, DST_PORT);
 80160a6:	4b15      	ldr	r3, [pc, #84]	; (80160fc <UDP_Client_Init+0x80>)
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	1d39      	adds	r1, r7, #4
 80160ac:	f24e 2290 	movw	r2, #58000	; 0xe290
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7fd f8d7 	bl	8013264 <udp_connect>
 80160b6:	4603      	mov	r3, r0
 80160b8:	73fb      	strb	r3, [r7, #15]

	if (err == ERR_OK)
 80160ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d113      	bne.n	80160ea <UDP_Client_Init+0x6e>
	{
		/* 2. Send message to server */
		/* the first data to send via UDP*/
		buildResProtocol(*(uint32_t*)"Test\r", *(uint8_t*)'\n');
 80160c2:	4b11      	ldr	r3, [pc, #68]	; (8016108 <UDP_Client_Init+0x8c>)
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	220a      	movs	r2, #10
 80160c8:	7812      	ldrb	r2, [r2, #0]
 80160ca:	4611      	mov	r1, r2
 80160cc:	4618      	mov	r0, r3
 80160ce:	f000 f821 	bl	8016114 <buildResProtocol>

		udpClient_send(&sentPacketData,sizeof(sentPacketData));
 80160d2:	2105      	movs	r1, #5
 80160d4:	480d      	ldr	r0, [pc, #52]	; (801610c <UDP_Client_Init+0x90>)
 80160d6:	f7ff ffa9 	bl	801602c <udpClient_send>

		/* 3. Set a receive callback for the upcb */
		udp_recv(my_upcb, udp_receive_callback, NULL);
 80160da:	4b08      	ldr	r3, [pc, #32]	; (80160fc <UDP_Client_Init+0x80>)
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	2200      	movs	r2, #0
 80160e0:	490b      	ldr	r1, [pc, #44]	; (8016110 <UDP_Client_Init+0x94>)
 80160e2:	4618      	mov	r0, r3
 80160e4:	f7fd f92c 	bl	8013340 <udp_recv>
	}
	else
	{
		udp_remove(my_upcb);
	}
}
 80160e8:	e004      	b.n	80160f4 <UDP_Client_Init+0x78>
		udp_remove(my_upcb);
 80160ea:	4b04      	ldr	r3, [pc, #16]	; (80160fc <UDP_Client_Init+0x80>)
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	4618      	mov	r0, r3
 80160f0:	f7fd f946 	bl	8013380 <udp_remove>
}
 80160f4:	bf00      	nop
 80160f6:	3710      	adds	r7, #16
 80160f8:	46bd      	mov	sp, r7
 80160fa:	bd80      	pop	{r7, pc}
 80160fc:	2000938c 	.word	0x2000938c
 8016100:	0201a8c0 	.word	0x0201a8c0
 8016104:	0101a8c0 	.word	0x0101a8c0
 8016108:	08019c84 	.word	0x08019c84
 801610c:	20009384 	.word	0x20009384
 8016110:	08015ff1 	.word	0x08015ff1

08016114 <buildResProtocol>:
 * @brief build resultProtocol structure variable (sentPacketData) to send via UDP
 * @param [in] test_id 			- the test identifier.
 * @param [in] is_test_succeed 	- the result of the test 0x01 if the passed successfully, 0xff otherwise.
 */
void buildResProtocol(uint32_t test_id, uint8_t is_test_succeed)
{
 8016114:	b480      	push	{r7}
 8016116:	b083      	sub	sp, #12
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
 801611c:	460b      	mov	r3, r1
 801611e:	70fb      	strb	r3, [r7, #3]
	sentPacketData.testId = test_id;
 8016120:	4a05      	ldr	r2, [pc, #20]	; (8016138 <buildResProtocol+0x24>)
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	6013      	str	r3, [r2, #0]
	sentPacketData.testResult = is_test_succeed;
 8016126:	4a04      	ldr	r2, [pc, #16]	; (8016138 <buildResProtocol+0x24>)
 8016128:	78fb      	ldrb	r3, [r7, #3]
 801612a:	7113      	strb	r3, [r2, #4]
}
 801612c:	bf00      	nop
 801612e:	370c      	adds	r7, #12
 8016130:	46bd      	mov	sp, r7
 8016132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016136:	4770      	bx	lr
 8016138:	20009384 	.word	0x20009384

0801613c <__libc_init_array>:
 801613c:	b570      	push	{r4, r5, r6, lr}
 801613e:	4d0d      	ldr	r5, [pc, #52]	; (8016174 <__libc_init_array+0x38>)
 8016140:	4c0d      	ldr	r4, [pc, #52]	; (8016178 <__libc_init_array+0x3c>)
 8016142:	1b64      	subs	r4, r4, r5
 8016144:	10a4      	asrs	r4, r4, #2
 8016146:	2600      	movs	r6, #0
 8016148:	42a6      	cmp	r6, r4
 801614a:	d109      	bne.n	8016160 <__libc_init_array+0x24>
 801614c:	4d0b      	ldr	r5, [pc, #44]	; (801617c <__libc_init_array+0x40>)
 801614e:	4c0c      	ldr	r4, [pc, #48]	; (8016180 <__libc_init_array+0x44>)
 8016150:	f001 f88e 	bl	8017270 <_init>
 8016154:	1b64      	subs	r4, r4, r5
 8016156:	10a4      	asrs	r4, r4, #2
 8016158:	2600      	movs	r6, #0
 801615a:	42a6      	cmp	r6, r4
 801615c:	d105      	bne.n	801616a <__libc_init_array+0x2e>
 801615e:	bd70      	pop	{r4, r5, r6, pc}
 8016160:	f855 3b04 	ldr.w	r3, [r5], #4
 8016164:	4798      	blx	r3
 8016166:	3601      	adds	r6, #1
 8016168:	e7ee      	b.n	8016148 <__libc_init_array+0xc>
 801616a:	f855 3b04 	ldr.w	r3, [r5], #4
 801616e:	4798      	blx	r3
 8016170:	3601      	adds	r6, #1
 8016172:	e7f2      	b.n	801615a <__libc_init_array+0x1e>
 8016174:	08019eec 	.word	0x08019eec
 8016178:	08019eec 	.word	0x08019eec
 801617c:	08019eec 	.word	0x08019eec
 8016180:	08019ef0 	.word	0x08019ef0

08016184 <memcmp>:
 8016184:	b510      	push	{r4, lr}
 8016186:	3901      	subs	r1, #1
 8016188:	4402      	add	r2, r0
 801618a:	4290      	cmp	r0, r2
 801618c:	d101      	bne.n	8016192 <memcmp+0xe>
 801618e:	2000      	movs	r0, #0
 8016190:	e005      	b.n	801619e <memcmp+0x1a>
 8016192:	7803      	ldrb	r3, [r0, #0]
 8016194:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016198:	42a3      	cmp	r3, r4
 801619a:	d001      	beq.n	80161a0 <memcmp+0x1c>
 801619c:	1b18      	subs	r0, r3, r4
 801619e:	bd10      	pop	{r4, pc}
 80161a0:	3001      	adds	r0, #1
 80161a2:	e7f2      	b.n	801618a <memcmp+0x6>

080161a4 <memcpy>:
 80161a4:	440a      	add	r2, r1
 80161a6:	4291      	cmp	r1, r2
 80161a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80161ac:	d100      	bne.n	80161b0 <memcpy+0xc>
 80161ae:	4770      	bx	lr
 80161b0:	b510      	push	{r4, lr}
 80161b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80161ba:	4291      	cmp	r1, r2
 80161bc:	d1f9      	bne.n	80161b2 <memcpy+0xe>
 80161be:	bd10      	pop	{r4, pc}

080161c0 <memset>:
 80161c0:	4402      	add	r2, r0
 80161c2:	4603      	mov	r3, r0
 80161c4:	4293      	cmp	r3, r2
 80161c6:	d100      	bne.n	80161ca <memset+0xa>
 80161c8:	4770      	bx	lr
 80161ca:	f803 1b01 	strb.w	r1, [r3], #1
 80161ce:	e7f9      	b.n	80161c4 <memset+0x4>

080161d0 <iprintf>:
 80161d0:	b40f      	push	{r0, r1, r2, r3}
 80161d2:	4b0a      	ldr	r3, [pc, #40]	; (80161fc <iprintf+0x2c>)
 80161d4:	b513      	push	{r0, r1, r4, lr}
 80161d6:	681c      	ldr	r4, [r3, #0]
 80161d8:	b124      	cbz	r4, 80161e4 <iprintf+0x14>
 80161da:	69a3      	ldr	r3, [r4, #24]
 80161dc:	b913      	cbnz	r3, 80161e4 <iprintf+0x14>
 80161de:	4620      	mov	r0, r4
 80161e0:	f000 f8c2 	bl	8016368 <__sinit>
 80161e4:	ab05      	add	r3, sp, #20
 80161e6:	9a04      	ldr	r2, [sp, #16]
 80161e8:	68a1      	ldr	r1, [r4, #8]
 80161ea:	9301      	str	r3, [sp, #4]
 80161ec:	4620      	mov	r0, r4
 80161ee:	f000 fa7f 	bl	80166f0 <_vfiprintf_r>
 80161f2:	b002      	add	sp, #8
 80161f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161f8:	b004      	add	sp, #16
 80161fa:	4770      	bx	lr
 80161fc:	2000002c 	.word	0x2000002c

08016200 <rand>:
 8016200:	4b16      	ldr	r3, [pc, #88]	; (801625c <rand+0x5c>)
 8016202:	b510      	push	{r4, lr}
 8016204:	681c      	ldr	r4, [r3, #0]
 8016206:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016208:	b9b3      	cbnz	r3, 8016238 <rand+0x38>
 801620a:	2018      	movs	r0, #24
 801620c:	f000 f95e 	bl	80164cc <malloc>
 8016210:	63a0      	str	r0, [r4, #56]	; 0x38
 8016212:	b928      	cbnz	r0, 8016220 <rand+0x20>
 8016214:	4602      	mov	r2, r0
 8016216:	4b12      	ldr	r3, [pc, #72]	; (8016260 <rand+0x60>)
 8016218:	4812      	ldr	r0, [pc, #72]	; (8016264 <rand+0x64>)
 801621a:	214e      	movs	r1, #78	; 0x4e
 801621c:	f000 f82e 	bl	801627c <__assert_func>
 8016220:	4a11      	ldr	r2, [pc, #68]	; (8016268 <rand+0x68>)
 8016222:	4b12      	ldr	r3, [pc, #72]	; (801626c <rand+0x6c>)
 8016224:	e9c0 2300 	strd	r2, r3, [r0]
 8016228:	4b11      	ldr	r3, [pc, #68]	; (8016270 <rand+0x70>)
 801622a:	6083      	str	r3, [r0, #8]
 801622c:	230b      	movs	r3, #11
 801622e:	8183      	strh	r3, [r0, #12]
 8016230:	2201      	movs	r2, #1
 8016232:	2300      	movs	r3, #0
 8016234:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016238:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801623a:	4a0e      	ldr	r2, [pc, #56]	; (8016274 <rand+0x74>)
 801623c:	6920      	ldr	r0, [r4, #16]
 801623e:	6963      	ldr	r3, [r4, #20]
 8016240:	490d      	ldr	r1, [pc, #52]	; (8016278 <rand+0x78>)
 8016242:	4342      	muls	r2, r0
 8016244:	fb01 2203 	mla	r2, r1, r3, r2
 8016248:	fba0 0101 	umull	r0, r1, r0, r1
 801624c:	1c43      	adds	r3, r0, #1
 801624e:	eb42 0001 	adc.w	r0, r2, r1
 8016252:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8016256:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801625a:	bd10      	pop	{r4, pc}
 801625c:	2000002c 	.word	0x2000002c
 8016260:	08019da0 	.word	0x08019da0
 8016264:	08019db7 	.word	0x08019db7
 8016268:	abcd330e 	.word	0xabcd330e
 801626c:	e66d1234 	.word	0xe66d1234
 8016270:	0005deec 	.word	0x0005deec
 8016274:	5851f42d 	.word	0x5851f42d
 8016278:	4c957f2d 	.word	0x4c957f2d

0801627c <__assert_func>:
 801627c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801627e:	4614      	mov	r4, r2
 8016280:	461a      	mov	r2, r3
 8016282:	4b09      	ldr	r3, [pc, #36]	; (80162a8 <__assert_func+0x2c>)
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	4605      	mov	r5, r0
 8016288:	68d8      	ldr	r0, [r3, #12]
 801628a:	b14c      	cbz	r4, 80162a0 <__assert_func+0x24>
 801628c:	4b07      	ldr	r3, [pc, #28]	; (80162ac <__assert_func+0x30>)
 801628e:	9100      	str	r1, [sp, #0]
 8016290:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016294:	4906      	ldr	r1, [pc, #24]	; (80162b0 <__assert_func+0x34>)
 8016296:	462b      	mov	r3, r5
 8016298:	f000 f8e4 	bl	8016464 <fiprintf>
 801629c:	f000 fe12 	bl	8016ec4 <abort>
 80162a0:	4b04      	ldr	r3, [pc, #16]	; (80162b4 <__assert_func+0x38>)
 80162a2:	461c      	mov	r4, r3
 80162a4:	e7f3      	b.n	801628e <__assert_func+0x12>
 80162a6:	bf00      	nop
 80162a8:	2000002c 	.word	0x2000002c
 80162ac:	08019e12 	.word	0x08019e12
 80162b0:	08019e1f 	.word	0x08019e1f
 80162b4:	08019e4d 	.word	0x08019e4d

080162b8 <std>:
 80162b8:	2300      	movs	r3, #0
 80162ba:	b510      	push	{r4, lr}
 80162bc:	4604      	mov	r4, r0
 80162be:	e9c0 3300 	strd	r3, r3, [r0]
 80162c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80162c6:	6083      	str	r3, [r0, #8]
 80162c8:	8181      	strh	r1, [r0, #12]
 80162ca:	6643      	str	r3, [r0, #100]	; 0x64
 80162cc:	81c2      	strh	r2, [r0, #14]
 80162ce:	6183      	str	r3, [r0, #24]
 80162d0:	4619      	mov	r1, r3
 80162d2:	2208      	movs	r2, #8
 80162d4:	305c      	adds	r0, #92	; 0x5c
 80162d6:	f7ff ff73 	bl	80161c0 <memset>
 80162da:	4b05      	ldr	r3, [pc, #20]	; (80162f0 <std+0x38>)
 80162dc:	6263      	str	r3, [r4, #36]	; 0x24
 80162de:	4b05      	ldr	r3, [pc, #20]	; (80162f4 <std+0x3c>)
 80162e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80162e2:	4b05      	ldr	r3, [pc, #20]	; (80162f8 <std+0x40>)
 80162e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80162e6:	4b05      	ldr	r3, [pc, #20]	; (80162fc <std+0x44>)
 80162e8:	6224      	str	r4, [r4, #32]
 80162ea:	6323      	str	r3, [r4, #48]	; 0x30
 80162ec:	bd10      	pop	{r4, pc}
 80162ee:	bf00      	nop
 80162f0:	08016c99 	.word	0x08016c99
 80162f4:	08016cbb 	.word	0x08016cbb
 80162f8:	08016cf3 	.word	0x08016cf3
 80162fc:	08016d17 	.word	0x08016d17

08016300 <_cleanup_r>:
 8016300:	4901      	ldr	r1, [pc, #4]	; (8016308 <_cleanup_r+0x8>)
 8016302:	f000 b8c1 	b.w	8016488 <_fwalk_reent>
 8016306:	bf00      	nop
 8016308:	08017001 	.word	0x08017001

0801630c <__sfmoreglue>:
 801630c:	b570      	push	{r4, r5, r6, lr}
 801630e:	2268      	movs	r2, #104	; 0x68
 8016310:	1e4d      	subs	r5, r1, #1
 8016312:	4355      	muls	r5, r2
 8016314:	460e      	mov	r6, r1
 8016316:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801631a:	f000 f94b 	bl	80165b4 <_malloc_r>
 801631e:	4604      	mov	r4, r0
 8016320:	b140      	cbz	r0, 8016334 <__sfmoreglue+0x28>
 8016322:	2100      	movs	r1, #0
 8016324:	e9c0 1600 	strd	r1, r6, [r0]
 8016328:	300c      	adds	r0, #12
 801632a:	60a0      	str	r0, [r4, #8]
 801632c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016330:	f7ff ff46 	bl	80161c0 <memset>
 8016334:	4620      	mov	r0, r4
 8016336:	bd70      	pop	{r4, r5, r6, pc}

08016338 <__sfp_lock_acquire>:
 8016338:	4801      	ldr	r0, [pc, #4]	; (8016340 <__sfp_lock_acquire+0x8>)
 801633a:	f000 b8c5 	b.w	80164c8 <__retarget_lock_acquire_recursive>
 801633e:	bf00      	nop
 8016340:	20009395 	.word	0x20009395

08016344 <__sfp_lock_release>:
 8016344:	4801      	ldr	r0, [pc, #4]	; (801634c <__sfp_lock_release+0x8>)
 8016346:	f000 b8c0 	b.w	80164ca <__retarget_lock_release_recursive>
 801634a:	bf00      	nop
 801634c:	20009395 	.word	0x20009395

08016350 <__sinit_lock_acquire>:
 8016350:	4801      	ldr	r0, [pc, #4]	; (8016358 <__sinit_lock_acquire+0x8>)
 8016352:	f000 b8b9 	b.w	80164c8 <__retarget_lock_acquire_recursive>
 8016356:	bf00      	nop
 8016358:	20009396 	.word	0x20009396

0801635c <__sinit_lock_release>:
 801635c:	4801      	ldr	r0, [pc, #4]	; (8016364 <__sinit_lock_release+0x8>)
 801635e:	f000 b8b4 	b.w	80164ca <__retarget_lock_release_recursive>
 8016362:	bf00      	nop
 8016364:	20009396 	.word	0x20009396

08016368 <__sinit>:
 8016368:	b510      	push	{r4, lr}
 801636a:	4604      	mov	r4, r0
 801636c:	f7ff fff0 	bl	8016350 <__sinit_lock_acquire>
 8016370:	69a3      	ldr	r3, [r4, #24]
 8016372:	b11b      	cbz	r3, 801637c <__sinit+0x14>
 8016374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016378:	f7ff bff0 	b.w	801635c <__sinit_lock_release>
 801637c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016380:	6523      	str	r3, [r4, #80]	; 0x50
 8016382:	4b13      	ldr	r3, [pc, #76]	; (80163d0 <__sinit+0x68>)
 8016384:	4a13      	ldr	r2, [pc, #76]	; (80163d4 <__sinit+0x6c>)
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	62a2      	str	r2, [r4, #40]	; 0x28
 801638a:	42a3      	cmp	r3, r4
 801638c:	bf04      	itt	eq
 801638e:	2301      	moveq	r3, #1
 8016390:	61a3      	streq	r3, [r4, #24]
 8016392:	4620      	mov	r0, r4
 8016394:	f000 f820 	bl	80163d8 <__sfp>
 8016398:	6060      	str	r0, [r4, #4]
 801639a:	4620      	mov	r0, r4
 801639c:	f000 f81c 	bl	80163d8 <__sfp>
 80163a0:	60a0      	str	r0, [r4, #8]
 80163a2:	4620      	mov	r0, r4
 80163a4:	f000 f818 	bl	80163d8 <__sfp>
 80163a8:	2200      	movs	r2, #0
 80163aa:	60e0      	str	r0, [r4, #12]
 80163ac:	2104      	movs	r1, #4
 80163ae:	6860      	ldr	r0, [r4, #4]
 80163b0:	f7ff ff82 	bl	80162b8 <std>
 80163b4:	68a0      	ldr	r0, [r4, #8]
 80163b6:	2201      	movs	r2, #1
 80163b8:	2109      	movs	r1, #9
 80163ba:	f7ff ff7d 	bl	80162b8 <std>
 80163be:	68e0      	ldr	r0, [r4, #12]
 80163c0:	2202      	movs	r2, #2
 80163c2:	2112      	movs	r1, #18
 80163c4:	f7ff ff78 	bl	80162b8 <std>
 80163c8:	2301      	movs	r3, #1
 80163ca:	61a3      	str	r3, [r4, #24]
 80163cc:	e7d2      	b.n	8016374 <__sinit+0xc>
 80163ce:	bf00      	nop
 80163d0:	08019d9c 	.word	0x08019d9c
 80163d4:	08016301 	.word	0x08016301

080163d8 <__sfp>:
 80163d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163da:	4607      	mov	r7, r0
 80163dc:	f7ff ffac 	bl	8016338 <__sfp_lock_acquire>
 80163e0:	4b1e      	ldr	r3, [pc, #120]	; (801645c <__sfp+0x84>)
 80163e2:	681e      	ldr	r6, [r3, #0]
 80163e4:	69b3      	ldr	r3, [r6, #24]
 80163e6:	b913      	cbnz	r3, 80163ee <__sfp+0x16>
 80163e8:	4630      	mov	r0, r6
 80163ea:	f7ff ffbd 	bl	8016368 <__sinit>
 80163ee:	3648      	adds	r6, #72	; 0x48
 80163f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80163f4:	3b01      	subs	r3, #1
 80163f6:	d503      	bpl.n	8016400 <__sfp+0x28>
 80163f8:	6833      	ldr	r3, [r6, #0]
 80163fa:	b30b      	cbz	r3, 8016440 <__sfp+0x68>
 80163fc:	6836      	ldr	r6, [r6, #0]
 80163fe:	e7f7      	b.n	80163f0 <__sfp+0x18>
 8016400:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016404:	b9d5      	cbnz	r5, 801643c <__sfp+0x64>
 8016406:	4b16      	ldr	r3, [pc, #88]	; (8016460 <__sfp+0x88>)
 8016408:	60e3      	str	r3, [r4, #12]
 801640a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801640e:	6665      	str	r5, [r4, #100]	; 0x64
 8016410:	f000 f859 	bl	80164c6 <__retarget_lock_init_recursive>
 8016414:	f7ff ff96 	bl	8016344 <__sfp_lock_release>
 8016418:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801641c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016420:	6025      	str	r5, [r4, #0]
 8016422:	61a5      	str	r5, [r4, #24]
 8016424:	2208      	movs	r2, #8
 8016426:	4629      	mov	r1, r5
 8016428:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801642c:	f7ff fec8 	bl	80161c0 <memset>
 8016430:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016434:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016438:	4620      	mov	r0, r4
 801643a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801643c:	3468      	adds	r4, #104	; 0x68
 801643e:	e7d9      	b.n	80163f4 <__sfp+0x1c>
 8016440:	2104      	movs	r1, #4
 8016442:	4638      	mov	r0, r7
 8016444:	f7ff ff62 	bl	801630c <__sfmoreglue>
 8016448:	4604      	mov	r4, r0
 801644a:	6030      	str	r0, [r6, #0]
 801644c:	2800      	cmp	r0, #0
 801644e:	d1d5      	bne.n	80163fc <__sfp+0x24>
 8016450:	f7ff ff78 	bl	8016344 <__sfp_lock_release>
 8016454:	230c      	movs	r3, #12
 8016456:	603b      	str	r3, [r7, #0]
 8016458:	e7ee      	b.n	8016438 <__sfp+0x60>
 801645a:	bf00      	nop
 801645c:	08019d9c 	.word	0x08019d9c
 8016460:	ffff0001 	.word	0xffff0001

08016464 <fiprintf>:
 8016464:	b40e      	push	{r1, r2, r3}
 8016466:	b503      	push	{r0, r1, lr}
 8016468:	4601      	mov	r1, r0
 801646a:	ab03      	add	r3, sp, #12
 801646c:	4805      	ldr	r0, [pc, #20]	; (8016484 <fiprintf+0x20>)
 801646e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016472:	6800      	ldr	r0, [r0, #0]
 8016474:	9301      	str	r3, [sp, #4]
 8016476:	f000 f93b 	bl	80166f0 <_vfiprintf_r>
 801647a:	b002      	add	sp, #8
 801647c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016480:	b003      	add	sp, #12
 8016482:	4770      	bx	lr
 8016484:	2000002c 	.word	0x2000002c

08016488 <_fwalk_reent>:
 8016488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801648c:	4606      	mov	r6, r0
 801648e:	4688      	mov	r8, r1
 8016490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016494:	2700      	movs	r7, #0
 8016496:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801649a:	f1b9 0901 	subs.w	r9, r9, #1
 801649e:	d505      	bpl.n	80164ac <_fwalk_reent+0x24>
 80164a0:	6824      	ldr	r4, [r4, #0]
 80164a2:	2c00      	cmp	r4, #0
 80164a4:	d1f7      	bne.n	8016496 <_fwalk_reent+0xe>
 80164a6:	4638      	mov	r0, r7
 80164a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164ac:	89ab      	ldrh	r3, [r5, #12]
 80164ae:	2b01      	cmp	r3, #1
 80164b0:	d907      	bls.n	80164c2 <_fwalk_reent+0x3a>
 80164b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80164b6:	3301      	adds	r3, #1
 80164b8:	d003      	beq.n	80164c2 <_fwalk_reent+0x3a>
 80164ba:	4629      	mov	r1, r5
 80164bc:	4630      	mov	r0, r6
 80164be:	47c0      	blx	r8
 80164c0:	4307      	orrs	r7, r0
 80164c2:	3568      	adds	r5, #104	; 0x68
 80164c4:	e7e9      	b.n	801649a <_fwalk_reent+0x12>

080164c6 <__retarget_lock_init_recursive>:
 80164c6:	4770      	bx	lr

080164c8 <__retarget_lock_acquire_recursive>:
 80164c8:	4770      	bx	lr

080164ca <__retarget_lock_release_recursive>:
 80164ca:	4770      	bx	lr

080164cc <malloc>:
 80164cc:	4b02      	ldr	r3, [pc, #8]	; (80164d8 <malloc+0xc>)
 80164ce:	4601      	mov	r1, r0
 80164d0:	6818      	ldr	r0, [r3, #0]
 80164d2:	f000 b86f 	b.w	80165b4 <_malloc_r>
 80164d6:	bf00      	nop
 80164d8:	2000002c 	.word	0x2000002c

080164dc <_free_r>:
 80164dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164de:	2900      	cmp	r1, #0
 80164e0:	d044      	beq.n	801656c <_free_r+0x90>
 80164e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80164e6:	9001      	str	r0, [sp, #4]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	f1a1 0404 	sub.w	r4, r1, #4
 80164ee:	bfb8      	it	lt
 80164f0:	18e4      	addlt	r4, r4, r3
 80164f2:	f000 fe39 	bl	8017168 <__malloc_lock>
 80164f6:	4a1e      	ldr	r2, [pc, #120]	; (8016570 <_free_r+0x94>)
 80164f8:	9801      	ldr	r0, [sp, #4]
 80164fa:	6813      	ldr	r3, [r2, #0]
 80164fc:	b933      	cbnz	r3, 801650c <_free_r+0x30>
 80164fe:	6063      	str	r3, [r4, #4]
 8016500:	6014      	str	r4, [r2, #0]
 8016502:	b003      	add	sp, #12
 8016504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016508:	f000 be34 	b.w	8017174 <__malloc_unlock>
 801650c:	42a3      	cmp	r3, r4
 801650e:	d908      	bls.n	8016522 <_free_r+0x46>
 8016510:	6825      	ldr	r5, [r4, #0]
 8016512:	1961      	adds	r1, r4, r5
 8016514:	428b      	cmp	r3, r1
 8016516:	bf01      	itttt	eq
 8016518:	6819      	ldreq	r1, [r3, #0]
 801651a:	685b      	ldreq	r3, [r3, #4]
 801651c:	1949      	addeq	r1, r1, r5
 801651e:	6021      	streq	r1, [r4, #0]
 8016520:	e7ed      	b.n	80164fe <_free_r+0x22>
 8016522:	461a      	mov	r2, r3
 8016524:	685b      	ldr	r3, [r3, #4]
 8016526:	b10b      	cbz	r3, 801652c <_free_r+0x50>
 8016528:	42a3      	cmp	r3, r4
 801652a:	d9fa      	bls.n	8016522 <_free_r+0x46>
 801652c:	6811      	ldr	r1, [r2, #0]
 801652e:	1855      	adds	r5, r2, r1
 8016530:	42a5      	cmp	r5, r4
 8016532:	d10b      	bne.n	801654c <_free_r+0x70>
 8016534:	6824      	ldr	r4, [r4, #0]
 8016536:	4421      	add	r1, r4
 8016538:	1854      	adds	r4, r2, r1
 801653a:	42a3      	cmp	r3, r4
 801653c:	6011      	str	r1, [r2, #0]
 801653e:	d1e0      	bne.n	8016502 <_free_r+0x26>
 8016540:	681c      	ldr	r4, [r3, #0]
 8016542:	685b      	ldr	r3, [r3, #4]
 8016544:	6053      	str	r3, [r2, #4]
 8016546:	4421      	add	r1, r4
 8016548:	6011      	str	r1, [r2, #0]
 801654a:	e7da      	b.n	8016502 <_free_r+0x26>
 801654c:	d902      	bls.n	8016554 <_free_r+0x78>
 801654e:	230c      	movs	r3, #12
 8016550:	6003      	str	r3, [r0, #0]
 8016552:	e7d6      	b.n	8016502 <_free_r+0x26>
 8016554:	6825      	ldr	r5, [r4, #0]
 8016556:	1961      	adds	r1, r4, r5
 8016558:	428b      	cmp	r3, r1
 801655a:	bf04      	itt	eq
 801655c:	6819      	ldreq	r1, [r3, #0]
 801655e:	685b      	ldreq	r3, [r3, #4]
 8016560:	6063      	str	r3, [r4, #4]
 8016562:	bf04      	itt	eq
 8016564:	1949      	addeq	r1, r1, r5
 8016566:	6021      	streq	r1, [r4, #0]
 8016568:	6054      	str	r4, [r2, #4]
 801656a:	e7ca      	b.n	8016502 <_free_r+0x26>
 801656c:	b003      	add	sp, #12
 801656e:	bd30      	pop	{r4, r5, pc}
 8016570:	20009398 	.word	0x20009398

08016574 <sbrk_aligned>:
 8016574:	b570      	push	{r4, r5, r6, lr}
 8016576:	4e0e      	ldr	r6, [pc, #56]	; (80165b0 <sbrk_aligned+0x3c>)
 8016578:	460c      	mov	r4, r1
 801657a:	6831      	ldr	r1, [r6, #0]
 801657c:	4605      	mov	r5, r0
 801657e:	b911      	cbnz	r1, 8016586 <sbrk_aligned+0x12>
 8016580:	f000 fb7a 	bl	8016c78 <_sbrk_r>
 8016584:	6030      	str	r0, [r6, #0]
 8016586:	4621      	mov	r1, r4
 8016588:	4628      	mov	r0, r5
 801658a:	f000 fb75 	bl	8016c78 <_sbrk_r>
 801658e:	1c43      	adds	r3, r0, #1
 8016590:	d00a      	beq.n	80165a8 <sbrk_aligned+0x34>
 8016592:	1cc4      	adds	r4, r0, #3
 8016594:	f024 0403 	bic.w	r4, r4, #3
 8016598:	42a0      	cmp	r0, r4
 801659a:	d007      	beq.n	80165ac <sbrk_aligned+0x38>
 801659c:	1a21      	subs	r1, r4, r0
 801659e:	4628      	mov	r0, r5
 80165a0:	f000 fb6a 	bl	8016c78 <_sbrk_r>
 80165a4:	3001      	adds	r0, #1
 80165a6:	d101      	bne.n	80165ac <sbrk_aligned+0x38>
 80165a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80165ac:	4620      	mov	r0, r4
 80165ae:	bd70      	pop	{r4, r5, r6, pc}
 80165b0:	2000939c 	.word	0x2000939c

080165b4 <_malloc_r>:
 80165b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165b8:	1ccd      	adds	r5, r1, #3
 80165ba:	f025 0503 	bic.w	r5, r5, #3
 80165be:	3508      	adds	r5, #8
 80165c0:	2d0c      	cmp	r5, #12
 80165c2:	bf38      	it	cc
 80165c4:	250c      	movcc	r5, #12
 80165c6:	2d00      	cmp	r5, #0
 80165c8:	4607      	mov	r7, r0
 80165ca:	db01      	blt.n	80165d0 <_malloc_r+0x1c>
 80165cc:	42a9      	cmp	r1, r5
 80165ce:	d905      	bls.n	80165dc <_malloc_r+0x28>
 80165d0:	230c      	movs	r3, #12
 80165d2:	603b      	str	r3, [r7, #0]
 80165d4:	2600      	movs	r6, #0
 80165d6:	4630      	mov	r0, r6
 80165d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165dc:	4e2e      	ldr	r6, [pc, #184]	; (8016698 <_malloc_r+0xe4>)
 80165de:	f000 fdc3 	bl	8017168 <__malloc_lock>
 80165e2:	6833      	ldr	r3, [r6, #0]
 80165e4:	461c      	mov	r4, r3
 80165e6:	bb34      	cbnz	r4, 8016636 <_malloc_r+0x82>
 80165e8:	4629      	mov	r1, r5
 80165ea:	4638      	mov	r0, r7
 80165ec:	f7ff ffc2 	bl	8016574 <sbrk_aligned>
 80165f0:	1c43      	adds	r3, r0, #1
 80165f2:	4604      	mov	r4, r0
 80165f4:	d14d      	bne.n	8016692 <_malloc_r+0xde>
 80165f6:	6834      	ldr	r4, [r6, #0]
 80165f8:	4626      	mov	r6, r4
 80165fa:	2e00      	cmp	r6, #0
 80165fc:	d140      	bne.n	8016680 <_malloc_r+0xcc>
 80165fe:	6823      	ldr	r3, [r4, #0]
 8016600:	4631      	mov	r1, r6
 8016602:	4638      	mov	r0, r7
 8016604:	eb04 0803 	add.w	r8, r4, r3
 8016608:	f000 fb36 	bl	8016c78 <_sbrk_r>
 801660c:	4580      	cmp	r8, r0
 801660e:	d13a      	bne.n	8016686 <_malloc_r+0xd2>
 8016610:	6821      	ldr	r1, [r4, #0]
 8016612:	3503      	adds	r5, #3
 8016614:	1a6d      	subs	r5, r5, r1
 8016616:	f025 0503 	bic.w	r5, r5, #3
 801661a:	3508      	adds	r5, #8
 801661c:	2d0c      	cmp	r5, #12
 801661e:	bf38      	it	cc
 8016620:	250c      	movcc	r5, #12
 8016622:	4629      	mov	r1, r5
 8016624:	4638      	mov	r0, r7
 8016626:	f7ff ffa5 	bl	8016574 <sbrk_aligned>
 801662a:	3001      	adds	r0, #1
 801662c:	d02b      	beq.n	8016686 <_malloc_r+0xd2>
 801662e:	6823      	ldr	r3, [r4, #0]
 8016630:	442b      	add	r3, r5
 8016632:	6023      	str	r3, [r4, #0]
 8016634:	e00e      	b.n	8016654 <_malloc_r+0xa0>
 8016636:	6822      	ldr	r2, [r4, #0]
 8016638:	1b52      	subs	r2, r2, r5
 801663a:	d41e      	bmi.n	801667a <_malloc_r+0xc6>
 801663c:	2a0b      	cmp	r2, #11
 801663e:	d916      	bls.n	801666e <_malloc_r+0xba>
 8016640:	1961      	adds	r1, r4, r5
 8016642:	42a3      	cmp	r3, r4
 8016644:	6025      	str	r5, [r4, #0]
 8016646:	bf18      	it	ne
 8016648:	6059      	strne	r1, [r3, #4]
 801664a:	6863      	ldr	r3, [r4, #4]
 801664c:	bf08      	it	eq
 801664e:	6031      	streq	r1, [r6, #0]
 8016650:	5162      	str	r2, [r4, r5]
 8016652:	604b      	str	r3, [r1, #4]
 8016654:	4638      	mov	r0, r7
 8016656:	f104 060b 	add.w	r6, r4, #11
 801665a:	f000 fd8b 	bl	8017174 <__malloc_unlock>
 801665e:	f026 0607 	bic.w	r6, r6, #7
 8016662:	1d23      	adds	r3, r4, #4
 8016664:	1af2      	subs	r2, r6, r3
 8016666:	d0b6      	beq.n	80165d6 <_malloc_r+0x22>
 8016668:	1b9b      	subs	r3, r3, r6
 801666a:	50a3      	str	r3, [r4, r2]
 801666c:	e7b3      	b.n	80165d6 <_malloc_r+0x22>
 801666e:	6862      	ldr	r2, [r4, #4]
 8016670:	42a3      	cmp	r3, r4
 8016672:	bf0c      	ite	eq
 8016674:	6032      	streq	r2, [r6, #0]
 8016676:	605a      	strne	r2, [r3, #4]
 8016678:	e7ec      	b.n	8016654 <_malloc_r+0xa0>
 801667a:	4623      	mov	r3, r4
 801667c:	6864      	ldr	r4, [r4, #4]
 801667e:	e7b2      	b.n	80165e6 <_malloc_r+0x32>
 8016680:	4634      	mov	r4, r6
 8016682:	6876      	ldr	r6, [r6, #4]
 8016684:	e7b9      	b.n	80165fa <_malloc_r+0x46>
 8016686:	230c      	movs	r3, #12
 8016688:	603b      	str	r3, [r7, #0]
 801668a:	4638      	mov	r0, r7
 801668c:	f000 fd72 	bl	8017174 <__malloc_unlock>
 8016690:	e7a1      	b.n	80165d6 <_malloc_r+0x22>
 8016692:	6025      	str	r5, [r4, #0]
 8016694:	e7de      	b.n	8016654 <_malloc_r+0xa0>
 8016696:	bf00      	nop
 8016698:	20009398 	.word	0x20009398

0801669c <__sfputc_r>:
 801669c:	6893      	ldr	r3, [r2, #8]
 801669e:	3b01      	subs	r3, #1
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	b410      	push	{r4}
 80166a4:	6093      	str	r3, [r2, #8]
 80166a6:	da08      	bge.n	80166ba <__sfputc_r+0x1e>
 80166a8:	6994      	ldr	r4, [r2, #24]
 80166aa:	42a3      	cmp	r3, r4
 80166ac:	db01      	blt.n	80166b2 <__sfputc_r+0x16>
 80166ae:	290a      	cmp	r1, #10
 80166b0:	d103      	bne.n	80166ba <__sfputc_r+0x1e>
 80166b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166b6:	f000 bb33 	b.w	8016d20 <__swbuf_r>
 80166ba:	6813      	ldr	r3, [r2, #0]
 80166bc:	1c58      	adds	r0, r3, #1
 80166be:	6010      	str	r0, [r2, #0]
 80166c0:	7019      	strb	r1, [r3, #0]
 80166c2:	4608      	mov	r0, r1
 80166c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166c8:	4770      	bx	lr

080166ca <__sfputs_r>:
 80166ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166cc:	4606      	mov	r6, r0
 80166ce:	460f      	mov	r7, r1
 80166d0:	4614      	mov	r4, r2
 80166d2:	18d5      	adds	r5, r2, r3
 80166d4:	42ac      	cmp	r4, r5
 80166d6:	d101      	bne.n	80166dc <__sfputs_r+0x12>
 80166d8:	2000      	movs	r0, #0
 80166da:	e007      	b.n	80166ec <__sfputs_r+0x22>
 80166dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166e0:	463a      	mov	r2, r7
 80166e2:	4630      	mov	r0, r6
 80166e4:	f7ff ffda 	bl	801669c <__sfputc_r>
 80166e8:	1c43      	adds	r3, r0, #1
 80166ea:	d1f3      	bne.n	80166d4 <__sfputs_r+0xa>
 80166ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080166f0 <_vfiprintf_r>:
 80166f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166f4:	460d      	mov	r5, r1
 80166f6:	b09d      	sub	sp, #116	; 0x74
 80166f8:	4614      	mov	r4, r2
 80166fa:	4698      	mov	r8, r3
 80166fc:	4606      	mov	r6, r0
 80166fe:	b118      	cbz	r0, 8016708 <_vfiprintf_r+0x18>
 8016700:	6983      	ldr	r3, [r0, #24]
 8016702:	b90b      	cbnz	r3, 8016708 <_vfiprintf_r+0x18>
 8016704:	f7ff fe30 	bl	8016368 <__sinit>
 8016708:	4b89      	ldr	r3, [pc, #548]	; (8016930 <_vfiprintf_r+0x240>)
 801670a:	429d      	cmp	r5, r3
 801670c:	d11b      	bne.n	8016746 <_vfiprintf_r+0x56>
 801670e:	6875      	ldr	r5, [r6, #4]
 8016710:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016712:	07d9      	lsls	r1, r3, #31
 8016714:	d405      	bmi.n	8016722 <_vfiprintf_r+0x32>
 8016716:	89ab      	ldrh	r3, [r5, #12]
 8016718:	059a      	lsls	r2, r3, #22
 801671a:	d402      	bmi.n	8016722 <_vfiprintf_r+0x32>
 801671c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801671e:	f7ff fed3 	bl	80164c8 <__retarget_lock_acquire_recursive>
 8016722:	89ab      	ldrh	r3, [r5, #12]
 8016724:	071b      	lsls	r3, r3, #28
 8016726:	d501      	bpl.n	801672c <_vfiprintf_r+0x3c>
 8016728:	692b      	ldr	r3, [r5, #16]
 801672a:	b9eb      	cbnz	r3, 8016768 <_vfiprintf_r+0x78>
 801672c:	4629      	mov	r1, r5
 801672e:	4630      	mov	r0, r6
 8016730:	f000 fb5a 	bl	8016de8 <__swsetup_r>
 8016734:	b1c0      	cbz	r0, 8016768 <_vfiprintf_r+0x78>
 8016736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016738:	07dc      	lsls	r4, r3, #31
 801673a:	d50e      	bpl.n	801675a <_vfiprintf_r+0x6a>
 801673c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016740:	b01d      	add	sp, #116	; 0x74
 8016742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016746:	4b7b      	ldr	r3, [pc, #492]	; (8016934 <_vfiprintf_r+0x244>)
 8016748:	429d      	cmp	r5, r3
 801674a:	d101      	bne.n	8016750 <_vfiprintf_r+0x60>
 801674c:	68b5      	ldr	r5, [r6, #8]
 801674e:	e7df      	b.n	8016710 <_vfiprintf_r+0x20>
 8016750:	4b79      	ldr	r3, [pc, #484]	; (8016938 <_vfiprintf_r+0x248>)
 8016752:	429d      	cmp	r5, r3
 8016754:	bf08      	it	eq
 8016756:	68f5      	ldreq	r5, [r6, #12]
 8016758:	e7da      	b.n	8016710 <_vfiprintf_r+0x20>
 801675a:	89ab      	ldrh	r3, [r5, #12]
 801675c:	0598      	lsls	r0, r3, #22
 801675e:	d4ed      	bmi.n	801673c <_vfiprintf_r+0x4c>
 8016760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016762:	f7ff feb2 	bl	80164ca <__retarget_lock_release_recursive>
 8016766:	e7e9      	b.n	801673c <_vfiprintf_r+0x4c>
 8016768:	2300      	movs	r3, #0
 801676a:	9309      	str	r3, [sp, #36]	; 0x24
 801676c:	2320      	movs	r3, #32
 801676e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016772:	f8cd 800c 	str.w	r8, [sp, #12]
 8016776:	2330      	movs	r3, #48	; 0x30
 8016778:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801693c <_vfiprintf_r+0x24c>
 801677c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016780:	f04f 0901 	mov.w	r9, #1
 8016784:	4623      	mov	r3, r4
 8016786:	469a      	mov	sl, r3
 8016788:	f813 2b01 	ldrb.w	r2, [r3], #1
 801678c:	b10a      	cbz	r2, 8016792 <_vfiprintf_r+0xa2>
 801678e:	2a25      	cmp	r2, #37	; 0x25
 8016790:	d1f9      	bne.n	8016786 <_vfiprintf_r+0x96>
 8016792:	ebba 0b04 	subs.w	fp, sl, r4
 8016796:	d00b      	beq.n	80167b0 <_vfiprintf_r+0xc0>
 8016798:	465b      	mov	r3, fp
 801679a:	4622      	mov	r2, r4
 801679c:	4629      	mov	r1, r5
 801679e:	4630      	mov	r0, r6
 80167a0:	f7ff ff93 	bl	80166ca <__sfputs_r>
 80167a4:	3001      	adds	r0, #1
 80167a6:	f000 80aa 	beq.w	80168fe <_vfiprintf_r+0x20e>
 80167aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80167ac:	445a      	add	r2, fp
 80167ae:	9209      	str	r2, [sp, #36]	; 0x24
 80167b0:	f89a 3000 	ldrb.w	r3, [sl]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	f000 80a2 	beq.w	80168fe <_vfiprintf_r+0x20e>
 80167ba:	2300      	movs	r3, #0
 80167bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80167c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80167c4:	f10a 0a01 	add.w	sl, sl, #1
 80167c8:	9304      	str	r3, [sp, #16]
 80167ca:	9307      	str	r3, [sp, #28]
 80167cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80167d0:	931a      	str	r3, [sp, #104]	; 0x68
 80167d2:	4654      	mov	r4, sl
 80167d4:	2205      	movs	r2, #5
 80167d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167da:	4858      	ldr	r0, [pc, #352]	; (801693c <_vfiprintf_r+0x24c>)
 80167dc:	f7e9 fd28 	bl	8000230 <memchr>
 80167e0:	9a04      	ldr	r2, [sp, #16]
 80167e2:	b9d8      	cbnz	r0, 801681c <_vfiprintf_r+0x12c>
 80167e4:	06d1      	lsls	r1, r2, #27
 80167e6:	bf44      	itt	mi
 80167e8:	2320      	movmi	r3, #32
 80167ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167ee:	0713      	lsls	r3, r2, #28
 80167f0:	bf44      	itt	mi
 80167f2:	232b      	movmi	r3, #43	; 0x2b
 80167f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80167f8:	f89a 3000 	ldrb.w	r3, [sl]
 80167fc:	2b2a      	cmp	r3, #42	; 0x2a
 80167fe:	d015      	beq.n	801682c <_vfiprintf_r+0x13c>
 8016800:	9a07      	ldr	r2, [sp, #28]
 8016802:	4654      	mov	r4, sl
 8016804:	2000      	movs	r0, #0
 8016806:	f04f 0c0a 	mov.w	ip, #10
 801680a:	4621      	mov	r1, r4
 801680c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016810:	3b30      	subs	r3, #48	; 0x30
 8016812:	2b09      	cmp	r3, #9
 8016814:	d94e      	bls.n	80168b4 <_vfiprintf_r+0x1c4>
 8016816:	b1b0      	cbz	r0, 8016846 <_vfiprintf_r+0x156>
 8016818:	9207      	str	r2, [sp, #28]
 801681a:	e014      	b.n	8016846 <_vfiprintf_r+0x156>
 801681c:	eba0 0308 	sub.w	r3, r0, r8
 8016820:	fa09 f303 	lsl.w	r3, r9, r3
 8016824:	4313      	orrs	r3, r2
 8016826:	9304      	str	r3, [sp, #16]
 8016828:	46a2      	mov	sl, r4
 801682a:	e7d2      	b.n	80167d2 <_vfiprintf_r+0xe2>
 801682c:	9b03      	ldr	r3, [sp, #12]
 801682e:	1d19      	adds	r1, r3, #4
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	9103      	str	r1, [sp, #12]
 8016834:	2b00      	cmp	r3, #0
 8016836:	bfbb      	ittet	lt
 8016838:	425b      	neglt	r3, r3
 801683a:	f042 0202 	orrlt.w	r2, r2, #2
 801683e:	9307      	strge	r3, [sp, #28]
 8016840:	9307      	strlt	r3, [sp, #28]
 8016842:	bfb8      	it	lt
 8016844:	9204      	strlt	r2, [sp, #16]
 8016846:	7823      	ldrb	r3, [r4, #0]
 8016848:	2b2e      	cmp	r3, #46	; 0x2e
 801684a:	d10c      	bne.n	8016866 <_vfiprintf_r+0x176>
 801684c:	7863      	ldrb	r3, [r4, #1]
 801684e:	2b2a      	cmp	r3, #42	; 0x2a
 8016850:	d135      	bne.n	80168be <_vfiprintf_r+0x1ce>
 8016852:	9b03      	ldr	r3, [sp, #12]
 8016854:	1d1a      	adds	r2, r3, #4
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	9203      	str	r2, [sp, #12]
 801685a:	2b00      	cmp	r3, #0
 801685c:	bfb8      	it	lt
 801685e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016862:	3402      	adds	r4, #2
 8016864:	9305      	str	r3, [sp, #20]
 8016866:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801694c <_vfiprintf_r+0x25c>
 801686a:	7821      	ldrb	r1, [r4, #0]
 801686c:	2203      	movs	r2, #3
 801686e:	4650      	mov	r0, sl
 8016870:	f7e9 fcde 	bl	8000230 <memchr>
 8016874:	b140      	cbz	r0, 8016888 <_vfiprintf_r+0x198>
 8016876:	2340      	movs	r3, #64	; 0x40
 8016878:	eba0 000a 	sub.w	r0, r0, sl
 801687c:	fa03 f000 	lsl.w	r0, r3, r0
 8016880:	9b04      	ldr	r3, [sp, #16]
 8016882:	4303      	orrs	r3, r0
 8016884:	3401      	adds	r4, #1
 8016886:	9304      	str	r3, [sp, #16]
 8016888:	f814 1b01 	ldrb.w	r1, [r4], #1
 801688c:	482c      	ldr	r0, [pc, #176]	; (8016940 <_vfiprintf_r+0x250>)
 801688e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016892:	2206      	movs	r2, #6
 8016894:	f7e9 fccc 	bl	8000230 <memchr>
 8016898:	2800      	cmp	r0, #0
 801689a:	d03f      	beq.n	801691c <_vfiprintf_r+0x22c>
 801689c:	4b29      	ldr	r3, [pc, #164]	; (8016944 <_vfiprintf_r+0x254>)
 801689e:	bb1b      	cbnz	r3, 80168e8 <_vfiprintf_r+0x1f8>
 80168a0:	9b03      	ldr	r3, [sp, #12]
 80168a2:	3307      	adds	r3, #7
 80168a4:	f023 0307 	bic.w	r3, r3, #7
 80168a8:	3308      	adds	r3, #8
 80168aa:	9303      	str	r3, [sp, #12]
 80168ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168ae:	443b      	add	r3, r7
 80168b0:	9309      	str	r3, [sp, #36]	; 0x24
 80168b2:	e767      	b.n	8016784 <_vfiprintf_r+0x94>
 80168b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80168b8:	460c      	mov	r4, r1
 80168ba:	2001      	movs	r0, #1
 80168bc:	e7a5      	b.n	801680a <_vfiprintf_r+0x11a>
 80168be:	2300      	movs	r3, #0
 80168c0:	3401      	adds	r4, #1
 80168c2:	9305      	str	r3, [sp, #20]
 80168c4:	4619      	mov	r1, r3
 80168c6:	f04f 0c0a 	mov.w	ip, #10
 80168ca:	4620      	mov	r0, r4
 80168cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80168d0:	3a30      	subs	r2, #48	; 0x30
 80168d2:	2a09      	cmp	r2, #9
 80168d4:	d903      	bls.n	80168de <_vfiprintf_r+0x1ee>
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d0c5      	beq.n	8016866 <_vfiprintf_r+0x176>
 80168da:	9105      	str	r1, [sp, #20]
 80168dc:	e7c3      	b.n	8016866 <_vfiprintf_r+0x176>
 80168de:	fb0c 2101 	mla	r1, ip, r1, r2
 80168e2:	4604      	mov	r4, r0
 80168e4:	2301      	movs	r3, #1
 80168e6:	e7f0      	b.n	80168ca <_vfiprintf_r+0x1da>
 80168e8:	ab03      	add	r3, sp, #12
 80168ea:	9300      	str	r3, [sp, #0]
 80168ec:	462a      	mov	r2, r5
 80168ee:	4b16      	ldr	r3, [pc, #88]	; (8016948 <_vfiprintf_r+0x258>)
 80168f0:	a904      	add	r1, sp, #16
 80168f2:	4630      	mov	r0, r6
 80168f4:	f3af 8000 	nop.w
 80168f8:	4607      	mov	r7, r0
 80168fa:	1c78      	adds	r0, r7, #1
 80168fc:	d1d6      	bne.n	80168ac <_vfiprintf_r+0x1bc>
 80168fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016900:	07d9      	lsls	r1, r3, #31
 8016902:	d405      	bmi.n	8016910 <_vfiprintf_r+0x220>
 8016904:	89ab      	ldrh	r3, [r5, #12]
 8016906:	059a      	lsls	r2, r3, #22
 8016908:	d402      	bmi.n	8016910 <_vfiprintf_r+0x220>
 801690a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801690c:	f7ff fddd 	bl	80164ca <__retarget_lock_release_recursive>
 8016910:	89ab      	ldrh	r3, [r5, #12]
 8016912:	065b      	lsls	r3, r3, #25
 8016914:	f53f af12 	bmi.w	801673c <_vfiprintf_r+0x4c>
 8016918:	9809      	ldr	r0, [sp, #36]	; 0x24
 801691a:	e711      	b.n	8016740 <_vfiprintf_r+0x50>
 801691c:	ab03      	add	r3, sp, #12
 801691e:	9300      	str	r3, [sp, #0]
 8016920:	462a      	mov	r2, r5
 8016922:	4b09      	ldr	r3, [pc, #36]	; (8016948 <_vfiprintf_r+0x258>)
 8016924:	a904      	add	r1, sp, #16
 8016926:	4630      	mov	r0, r6
 8016928:	f000 f880 	bl	8016a2c <_printf_i>
 801692c:	e7e4      	b.n	80168f8 <_vfiprintf_r+0x208>
 801692e:	bf00      	nop
 8016930:	08019e70 	.word	0x08019e70
 8016934:	08019e90 	.word	0x08019e90
 8016938:	08019e50 	.word	0x08019e50
 801693c:	08019eb0 	.word	0x08019eb0
 8016940:	08019eba 	.word	0x08019eba
 8016944:	00000000 	.word	0x00000000
 8016948:	080166cb 	.word	0x080166cb
 801694c:	08019eb6 	.word	0x08019eb6

08016950 <_printf_common>:
 8016950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016954:	4616      	mov	r6, r2
 8016956:	4699      	mov	r9, r3
 8016958:	688a      	ldr	r2, [r1, #8]
 801695a:	690b      	ldr	r3, [r1, #16]
 801695c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016960:	4293      	cmp	r3, r2
 8016962:	bfb8      	it	lt
 8016964:	4613      	movlt	r3, r2
 8016966:	6033      	str	r3, [r6, #0]
 8016968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801696c:	4607      	mov	r7, r0
 801696e:	460c      	mov	r4, r1
 8016970:	b10a      	cbz	r2, 8016976 <_printf_common+0x26>
 8016972:	3301      	adds	r3, #1
 8016974:	6033      	str	r3, [r6, #0]
 8016976:	6823      	ldr	r3, [r4, #0]
 8016978:	0699      	lsls	r1, r3, #26
 801697a:	bf42      	ittt	mi
 801697c:	6833      	ldrmi	r3, [r6, #0]
 801697e:	3302      	addmi	r3, #2
 8016980:	6033      	strmi	r3, [r6, #0]
 8016982:	6825      	ldr	r5, [r4, #0]
 8016984:	f015 0506 	ands.w	r5, r5, #6
 8016988:	d106      	bne.n	8016998 <_printf_common+0x48>
 801698a:	f104 0a19 	add.w	sl, r4, #25
 801698e:	68e3      	ldr	r3, [r4, #12]
 8016990:	6832      	ldr	r2, [r6, #0]
 8016992:	1a9b      	subs	r3, r3, r2
 8016994:	42ab      	cmp	r3, r5
 8016996:	dc26      	bgt.n	80169e6 <_printf_common+0x96>
 8016998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801699c:	1e13      	subs	r3, r2, #0
 801699e:	6822      	ldr	r2, [r4, #0]
 80169a0:	bf18      	it	ne
 80169a2:	2301      	movne	r3, #1
 80169a4:	0692      	lsls	r2, r2, #26
 80169a6:	d42b      	bmi.n	8016a00 <_printf_common+0xb0>
 80169a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80169ac:	4649      	mov	r1, r9
 80169ae:	4638      	mov	r0, r7
 80169b0:	47c0      	blx	r8
 80169b2:	3001      	adds	r0, #1
 80169b4:	d01e      	beq.n	80169f4 <_printf_common+0xa4>
 80169b6:	6823      	ldr	r3, [r4, #0]
 80169b8:	68e5      	ldr	r5, [r4, #12]
 80169ba:	6832      	ldr	r2, [r6, #0]
 80169bc:	f003 0306 	and.w	r3, r3, #6
 80169c0:	2b04      	cmp	r3, #4
 80169c2:	bf08      	it	eq
 80169c4:	1aad      	subeq	r5, r5, r2
 80169c6:	68a3      	ldr	r3, [r4, #8]
 80169c8:	6922      	ldr	r2, [r4, #16]
 80169ca:	bf0c      	ite	eq
 80169cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80169d0:	2500      	movne	r5, #0
 80169d2:	4293      	cmp	r3, r2
 80169d4:	bfc4      	itt	gt
 80169d6:	1a9b      	subgt	r3, r3, r2
 80169d8:	18ed      	addgt	r5, r5, r3
 80169da:	2600      	movs	r6, #0
 80169dc:	341a      	adds	r4, #26
 80169de:	42b5      	cmp	r5, r6
 80169e0:	d11a      	bne.n	8016a18 <_printf_common+0xc8>
 80169e2:	2000      	movs	r0, #0
 80169e4:	e008      	b.n	80169f8 <_printf_common+0xa8>
 80169e6:	2301      	movs	r3, #1
 80169e8:	4652      	mov	r2, sl
 80169ea:	4649      	mov	r1, r9
 80169ec:	4638      	mov	r0, r7
 80169ee:	47c0      	blx	r8
 80169f0:	3001      	adds	r0, #1
 80169f2:	d103      	bne.n	80169fc <_printf_common+0xac>
 80169f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80169f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169fc:	3501      	adds	r5, #1
 80169fe:	e7c6      	b.n	801698e <_printf_common+0x3e>
 8016a00:	18e1      	adds	r1, r4, r3
 8016a02:	1c5a      	adds	r2, r3, #1
 8016a04:	2030      	movs	r0, #48	; 0x30
 8016a06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016a0a:	4422      	add	r2, r4
 8016a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016a10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016a14:	3302      	adds	r3, #2
 8016a16:	e7c7      	b.n	80169a8 <_printf_common+0x58>
 8016a18:	2301      	movs	r3, #1
 8016a1a:	4622      	mov	r2, r4
 8016a1c:	4649      	mov	r1, r9
 8016a1e:	4638      	mov	r0, r7
 8016a20:	47c0      	blx	r8
 8016a22:	3001      	adds	r0, #1
 8016a24:	d0e6      	beq.n	80169f4 <_printf_common+0xa4>
 8016a26:	3601      	adds	r6, #1
 8016a28:	e7d9      	b.n	80169de <_printf_common+0x8e>
	...

08016a2c <_printf_i>:
 8016a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016a30:	7e0f      	ldrb	r7, [r1, #24]
 8016a32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016a34:	2f78      	cmp	r7, #120	; 0x78
 8016a36:	4691      	mov	r9, r2
 8016a38:	4680      	mov	r8, r0
 8016a3a:	460c      	mov	r4, r1
 8016a3c:	469a      	mov	sl, r3
 8016a3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8016a42:	d807      	bhi.n	8016a54 <_printf_i+0x28>
 8016a44:	2f62      	cmp	r7, #98	; 0x62
 8016a46:	d80a      	bhi.n	8016a5e <_printf_i+0x32>
 8016a48:	2f00      	cmp	r7, #0
 8016a4a:	f000 80d8 	beq.w	8016bfe <_printf_i+0x1d2>
 8016a4e:	2f58      	cmp	r7, #88	; 0x58
 8016a50:	f000 80a3 	beq.w	8016b9a <_printf_i+0x16e>
 8016a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016a5c:	e03a      	b.n	8016ad4 <_printf_i+0xa8>
 8016a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016a62:	2b15      	cmp	r3, #21
 8016a64:	d8f6      	bhi.n	8016a54 <_printf_i+0x28>
 8016a66:	a101      	add	r1, pc, #4	; (adr r1, 8016a6c <_printf_i+0x40>)
 8016a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016a6c:	08016ac5 	.word	0x08016ac5
 8016a70:	08016ad9 	.word	0x08016ad9
 8016a74:	08016a55 	.word	0x08016a55
 8016a78:	08016a55 	.word	0x08016a55
 8016a7c:	08016a55 	.word	0x08016a55
 8016a80:	08016a55 	.word	0x08016a55
 8016a84:	08016ad9 	.word	0x08016ad9
 8016a88:	08016a55 	.word	0x08016a55
 8016a8c:	08016a55 	.word	0x08016a55
 8016a90:	08016a55 	.word	0x08016a55
 8016a94:	08016a55 	.word	0x08016a55
 8016a98:	08016be5 	.word	0x08016be5
 8016a9c:	08016b09 	.word	0x08016b09
 8016aa0:	08016bc7 	.word	0x08016bc7
 8016aa4:	08016a55 	.word	0x08016a55
 8016aa8:	08016a55 	.word	0x08016a55
 8016aac:	08016c07 	.word	0x08016c07
 8016ab0:	08016a55 	.word	0x08016a55
 8016ab4:	08016b09 	.word	0x08016b09
 8016ab8:	08016a55 	.word	0x08016a55
 8016abc:	08016a55 	.word	0x08016a55
 8016ac0:	08016bcf 	.word	0x08016bcf
 8016ac4:	682b      	ldr	r3, [r5, #0]
 8016ac6:	1d1a      	adds	r2, r3, #4
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	602a      	str	r2, [r5, #0]
 8016acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016ad4:	2301      	movs	r3, #1
 8016ad6:	e0a3      	b.n	8016c20 <_printf_i+0x1f4>
 8016ad8:	6820      	ldr	r0, [r4, #0]
 8016ada:	6829      	ldr	r1, [r5, #0]
 8016adc:	0606      	lsls	r6, r0, #24
 8016ade:	f101 0304 	add.w	r3, r1, #4
 8016ae2:	d50a      	bpl.n	8016afa <_printf_i+0xce>
 8016ae4:	680e      	ldr	r6, [r1, #0]
 8016ae6:	602b      	str	r3, [r5, #0]
 8016ae8:	2e00      	cmp	r6, #0
 8016aea:	da03      	bge.n	8016af4 <_printf_i+0xc8>
 8016aec:	232d      	movs	r3, #45	; 0x2d
 8016aee:	4276      	negs	r6, r6
 8016af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016af4:	485e      	ldr	r0, [pc, #376]	; (8016c70 <_printf_i+0x244>)
 8016af6:	230a      	movs	r3, #10
 8016af8:	e019      	b.n	8016b2e <_printf_i+0x102>
 8016afa:	680e      	ldr	r6, [r1, #0]
 8016afc:	602b      	str	r3, [r5, #0]
 8016afe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016b02:	bf18      	it	ne
 8016b04:	b236      	sxthne	r6, r6
 8016b06:	e7ef      	b.n	8016ae8 <_printf_i+0xbc>
 8016b08:	682b      	ldr	r3, [r5, #0]
 8016b0a:	6820      	ldr	r0, [r4, #0]
 8016b0c:	1d19      	adds	r1, r3, #4
 8016b0e:	6029      	str	r1, [r5, #0]
 8016b10:	0601      	lsls	r1, r0, #24
 8016b12:	d501      	bpl.n	8016b18 <_printf_i+0xec>
 8016b14:	681e      	ldr	r6, [r3, #0]
 8016b16:	e002      	b.n	8016b1e <_printf_i+0xf2>
 8016b18:	0646      	lsls	r6, r0, #25
 8016b1a:	d5fb      	bpl.n	8016b14 <_printf_i+0xe8>
 8016b1c:	881e      	ldrh	r6, [r3, #0]
 8016b1e:	4854      	ldr	r0, [pc, #336]	; (8016c70 <_printf_i+0x244>)
 8016b20:	2f6f      	cmp	r7, #111	; 0x6f
 8016b22:	bf0c      	ite	eq
 8016b24:	2308      	moveq	r3, #8
 8016b26:	230a      	movne	r3, #10
 8016b28:	2100      	movs	r1, #0
 8016b2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016b2e:	6865      	ldr	r5, [r4, #4]
 8016b30:	60a5      	str	r5, [r4, #8]
 8016b32:	2d00      	cmp	r5, #0
 8016b34:	bfa2      	ittt	ge
 8016b36:	6821      	ldrge	r1, [r4, #0]
 8016b38:	f021 0104 	bicge.w	r1, r1, #4
 8016b3c:	6021      	strge	r1, [r4, #0]
 8016b3e:	b90e      	cbnz	r6, 8016b44 <_printf_i+0x118>
 8016b40:	2d00      	cmp	r5, #0
 8016b42:	d04d      	beq.n	8016be0 <_printf_i+0x1b4>
 8016b44:	4615      	mov	r5, r2
 8016b46:	fbb6 f1f3 	udiv	r1, r6, r3
 8016b4a:	fb03 6711 	mls	r7, r3, r1, r6
 8016b4e:	5dc7      	ldrb	r7, [r0, r7]
 8016b50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016b54:	4637      	mov	r7, r6
 8016b56:	42bb      	cmp	r3, r7
 8016b58:	460e      	mov	r6, r1
 8016b5a:	d9f4      	bls.n	8016b46 <_printf_i+0x11a>
 8016b5c:	2b08      	cmp	r3, #8
 8016b5e:	d10b      	bne.n	8016b78 <_printf_i+0x14c>
 8016b60:	6823      	ldr	r3, [r4, #0]
 8016b62:	07de      	lsls	r6, r3, #31
 8016b64:	d508      	bpl.n	8016b78 <_printf_i+0x14c>
 8016b66:	6923      	ldr	r3, [r4, #16]
 8016b68:	6861      	ldr	r1, [r4, #4]
 8016b6a:	4299      	cmp	r1, r3
 8016b6c:	bfde      	ittt	le
 8016b6e:	2330      	movle	r3, #48	; 0x30
 8016b70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8016b74:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8016b78:	1b52      	subs	r2, r2, r5
 8016b7a:	6122      	str	r2, [r4, #16]
 8016b7c:	f8cd a000 	str.w	sl, [sp]
 8016b80:	464b      	mov	r3, r9
 8016b82:	aa03      	add	r2, sp, #12
 8016b84:	4621      	mov	r1, r4
 8016b86:	4640      	mov	r0, r8
 8016b88:	f7ff fee2 	bl	8016950 <_printf_common>
 8016b8c:	3001      	adds	r0, #1
 8016b8e:	d14c      	bne.n	8016c2a <_printf_i+0x1fe>
 8016b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b94:	b004      	add	sp, #16
 8016b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b9a:	4835      	ldr	r0, [pc, #212]	; (8016c70 <_printf_i+0x244>)
 8016b9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8016ba0:	6829      	ldr	r1, [r5, #0]
 8016ba2:	6823      	ldr	r3, [r4, #0]
 8016ba4:	f851 6b04 	ldr.w	r6, [r1], #4
 8016ba8:	6029      	str	r1, [r5, #0]
 8016baa:	061d      	lsls	r5, r3, #24
 8016bac:	d514      	bpl.n	8016bd8 <_printf_i+0x1ac>
 8016bae:	07df      	lsls	r7, r3, #31
 8016bb0:	bf44      	itt	mi
 8016bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8016bb6:	6023      	strmi	r3, [r4, #0]
 8016bb8:	b91e      	cbnz	r6, 8016bc2 <_printf_i+0x196>
 8016bba:	6823      	ldr	r3, [r4, #0]
 8016bbc:	f023 0320 	bic.w	r3, r3, #32
 8016bc0:	6023      	str	r3, [r4, #0]
 8016bc2:	2310      	movs	r3, #16
 8016bc4:	e7b0      	b.n	8016b28 <_printf_i+0xfc>
 8016bc6:	6823      	ldr	r3, [r4, #0]
 8016bc8:	f043 0320 	orr.w	r3, r3, #32
 8016bcc:	6023      	str	r3, [r4, #0]
 8016bce:	2378      	movs	r3, #120	; 0x78
 8016bd0:	4828      	ldr	r0, [pc, #160]	; (8016c74 <_printf_i+0x248>)
 8016bd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016bd6:	e7e3      	b.n	8016ba0 <_printf_i+0x174>
 8016bd8:	0659      	lsls	r1, r3, #25
 8016bda:	bf48      	it	mi
 8016bdc:	b2b6      	uxthmi	r6, r6
 8016bde:	e7e6      	b.n	8016bae <_printf_i+0x182>
 8016be0:	4615      	mov	r5, r2
 8016be2:	e7bb      	b.n	8016b5c <_printf_i+0x130>
 8016be4:	682b      	ldr	r3, [r5, #0]
 8016be6:	6826      	ldr	r6, [r4, #0]
 8016be8:	6961      	ldr	r1, [r4, #20]
 8016bea:	1d18      	adds	r0, r3, #4
 8016bec:	6028      	str	r0, [r5, #0]
 8016bee:	0635      	lsls	r5, r6, #24
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	d501      	bpl.n	8016bf8 <_printf_i+0x1cc>
 8016bf4:	6019      	str	r1, [r3, #0]
 8016bf6:	e002      	b.n	8016bfe <_printf_i+0x1d2>
 8016bf8:	0670      	lsls	r0, r6, #25
 8016bfa:	d5fb      	bpl.n	8016bf4 <_printf_i+0x1c8>
 8016bfc:	8019      	strh	r1, [r3, #0]
 8016bfe:	2300      	movs	r3, #0
 8016c00:	6123      	str	r3, [r4, #16]
 8016c02:	4615      	mov	r5, r2
 8016c04:	e7ba      	b.n	8016b7c <_printf_i+0x150>
 8016c06:	682b      	ldr	r3, [r5, #0]
 8016c08:	1d1a      	adds	r2, r3, #4
 8016c0a:	602a      	str	r2, [r5, #0]
 8016c0c:	681d      	ldr	r5, [r3, #0]
 8016c0e:	6862      	ldr	r2, [r4, #4]
 8016c10:	2100      	movs	r1, #0
 8016c12:	4628      	mov	r0, r5
 8016c14:	f7e9 fb0c 	bl	8000230 <memchr>
 8016c18:	b108      	cbz	r0, 8016c1e <_printf_i+0x1f2>
 8016c1a:	1b40      	subs	r0, r0, r5
 8016c1c:	6060      	str	r0, [r4, #4]
 8016c1e:	6863      	ldr	r3, [r4, #4]
 8016c20:	6123      	str	r3, [r4, #16]
 8016c22:	2300      	movs	r3, #0
 8016c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016c28:	e7a8      	b.n	8016b7c <_printf_i+0x150>
 8016c2a:	6923      	ldr	r3, [r4, #16]
 8016c2c:	462a      	mov	r2, r5
 8016c2e:	4649      	mov	r1, r9
 8016c30:	4640      	mov	r0, r8
 8016c32:	47d0      	blx	sl
 8016c34:	3001      	adds	r0, #1
 8016c36:	d0ab      	beq.n	8016b90 <_printf_i+0x164>
 8016c38:	6823      	ldr	r3, [r4, #0]
 8016c3a:	079b      	lsls	r3, r3, #30
 8016c3c:	d413      	bmi.n	8016c66 <_printf_i+0x23a>
 8016c3e:	68e0      	ldr	r0, [r4, #12]
 8016c40:	9b03      	ldr	r3, [sp, #12]
 8016c42:	4298      	cmp	r0, r3
 8016c44:	bfb8      	it	lt
 8016c46:	4618      	movlt	r0, r3
 8016c48:	e7a4      	b.n	8016b94 <_printf_i+0x168>
 8016c4a:	2301      	movs	r3, #1
 8016c4c:	4632      	mov	r2, r6
 8016c4e:	4649      	mov	r1, r9
 8016c50:	4640      	mov	r0, r8
 8016c52:	47d0      	blx	sl
 8016c54:	3001      	adds	r0, #1
 8016c56:	d09b      	beq.n	8016b90 <_printf_i+0x164>
 8016c58:	3501      	adds	r5, #1
 8016c5a:	68e3      	ldr	r3, [r4, #12]
 8016c5c:	9903      	ldr	r1, [sp, #12]
 8016c5e:	1a5b      	subs	r3, r3, r1
 8016c60:	42ab      	cmp	r3, r5
 8016c62:	dcf2      	bgt.n	8016c4a <_printf_i+0x21e>
 8016c64:	e7eb      	b.n	8016c3e <_printf_i+0x212>
 8016c66:	2500      	movs	r5, #0
 8016c68:	f104 0619 	add.w	r6, r4, #25
 8016c6c:	e7f5      	b.n	8016c5a <_printf_i+0x22e>
 8016c6e:	bf00      	nop
 8016c70:	08019ec1 	.word	0x08019ec1
 8016c74:	08019ed2 	.word	0x08019ed2

08016c78 <_sbrk_r>:
 8016c78:	b538      	push	{r3, r4, r5, lr}
 8016c7a:	4d06      	ldr	r5, [pc, #24]	; (8016c94 <_sbrk_r+0x1c>)
 8016c7c:	2300      	movs	r3, #0
 8016c7e:	4604      	mov	r4, r0
 8016c80:	4608      	mov	r0, r1
 8016c82:	602b      	str	r3, [r5, #0]
 8016c84:	f7eb fb38 	bl	80022f8 <_sbrk>
 8016c88:	1c43      	adds	r3, r0, #1
 8016c8a:	d102      	bne.n	8016c92 <_sbrk_r+0x1a>
 8016c8c:	682b      	ldr	r3, [r5, #0]
 8016c8e:	b103      	cbz	r3, 8016c92 <_sbrk_r+0x1a>
 8016c90:	6023      	str	r3, [r4, #0]
 8016c92:	bd38      	pop	{r3, r4, r5, pc}
 8016c94:	20009390 	.word	0x20009390

08016c98 <__sread>:
 8016c98:	b510      	push	{r4, lr}
 8016c9a:	460c      	mov	r4, r1
 8016c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ca0:	f000 fa6e 	bl	8017180 <_read_r>
 8016ca4:	2800      	cmp	r0, #0
 8016ca6:	bfab      	itete	ge
 8016ca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016caa:	89a3      	ldrhlt	r3, [r4, #12]
 8016cac:	181b      	addge	r3, r3, r0
 8016cae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016cb2:	bfac      	ite	ge
 8016cb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8016cb6:	81a3      	strhlt	r3, [r4, #12]
 8016cb8:	bd10      	pop	{r4, pc}

08016cba <__swrite>:
 8016cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cbe:	461f      	mov	r7, r3
 8016cc0:	898b      	ldrh	r3, [r1, #12]
 8016cc2:	05db      	lsls	r3, r3, #23
 8016cc4:	4605      	mov	r5, r0
 8016cc6:	460c      	mov	r4, r1
 8016cc8:	4616      	mov	r6, r2
 8016cca:	d505      	bpl.n	8016cd8 <__swrite+0x1e>
 8016ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cd0:	2302      	movs	r3, #2
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	f000 f9d0 	bl	8017078 <_lseek_r>
 8016cd8:	89a3      	ldrh	r3, [r4, #12]
 8016cda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016cde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016ce2:	81a3      	strh	r3, [r4, #12]
 8016ce4:	4632      	mov	r2, r6
 8016ce6:	463b      	mov	r3, r7
 8016ce8:	4628      	mov	r0, r5
 8016cea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016cee:	f000 b869 	b.w	8016dc4 <_write_r>

08016cf2 <__sseek>:
 8016cf2:	b510      	push	{r4, lr}
 8016cf4:	460c      	mov	r4, r1
 8016cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016cfa:	f000 f9bd 	bl	8017078 <_lseek_r>
 8016cfe:	1c43      	adds	r3, r0, #1
 8016d00:	89a3      	ldrh	r3, [r4, #12]
 8016d02:	bf15      	itete	ne
 8016d04:	6560      	strne	r0, [r4, #84]	; 0x54
 8016d06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016d0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016d0e:	81a3      	strheq	r3, [r4, #12]
 8016d10:	bf18      	it	ne
 8016d12:	81a3      	strhne	r3, [r4, #12]
 8016d14:	bd10      	pop	{r4, pc}

08016d16 <__sclose>:
 8016d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016d1a:	f000 b8db 	b.w	8016ed4 <_close_r>
	...

08016d20 <__swbuf_r>:
 8016d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d22:	460e      	mov	r6, r1
 8016d24:	4614      	mov	r4, r2
 8016d26:	4605      	mov	r5, r0
 8016d28:	b118      	cbz	r0, 8016d32 <__swbuf_r+0x12>
 8016d2a:	6983      	ldr	r3, [r0, #24]
 8016d2c:	b90b      	cbnz	r3, 8016d32 <__swbuf_r+0x12>
 8016d2e:	f7ff fb1b 	bl	8016368 <__sinit>
 8016d32:	4b21      	ldr	r3, [pc, #132]	; (8016db8 <__swbuf_r+0x98>)
 8016d34:	429c      	cmp	r4, r3
 8016d36:	d12b      	bne.n	8016d90 <__swbuf_r+0x70>
 8016d38:	686c      	ldr	r4, [r5, #4]
 8016d3a:	69a3      	ldr	r3, [r4, #24]
 8016d3c:	60a3      	str	r3, [r4, #8]
 8016d3e:	89a3      	ldrh	r3, [r4, #12]
 8016d40:	071a      	lsls	r2, r3, #28
 8016d42:	d52f      	bpl.n	8016da4 <__swbuf_r+0x84>
 8016d44:	6923      	ldr	r3, [r4, #16]
 8016d46:	b36b      	cbz	r3, 8016da4 <__swbuf_r+0x84>
 8016d48:	6923      	ldr	r3, [r4, #16]
 8016d4a:	6820      	ldr	r0, [r4, #0]
 8016d4c:	1ac0      	subs	r0, r0, r3
 8016d4e:	6963      	ldr	r3, [r4, #20]
 8016d50:	b2f6      	uxtb	r6, r6
 8016d52:	4283      	cmp	r3, r0
 8016d54:	4637      	mov	r7, r6
 8016d56:	dc04      	bgt.n	8016d62 <__swbuf_r+0x42>
 8016d58:	4621      	mov	r1, r4
 8016d5a:	4628      	mov	r0, r5
 8016d5c:	f000 f950 	bl	8017000 <_fflush_r>
 8016d60:	bb30      	cbnz	r0, 8016db0 <__swbuf_r+0x90>
 8016d62:	68a3      	ldr	r3, [r4, #8]
 8016d64:	3b01      	subs	r3, #1
 8016d66:	60a3      	str	r3, [r4, #8]
 8016d68:	6823      	ldr	r3, [r4, #0]
 8016d6a:	1c5a      	adds	r2, r3, #1
 8016d6c:	6022      	str	r2, [r4, #0]
 8016d6e:	701e      	strb	r6, [r3, #0]
 8016d70:	6963      	ldr	r3, [r4, #20]
 8016d72:	3001      	adds	r0, #1
 8016d74:	4283      	cmp	r3, r0
 8016d76:	d004      	beq.n	8016d82 <__swbuf_r+0x62>
 8016d78:	89a3      	ldrh	r3, [r4, #12]
 8016d7a:	07db      	lsls	r3, r3, #31
 8016d7c:	d506      	bpl.n	8016d8c <__swbuf_r+0x6c>
 8016d7e:	2e0a      	cmp	r6, #10
 8016d80:	d104      	bne.n	8016d8c <__swbuf_r+0x6c>
 8016d82:	4621      	mov	r1, r4
 8016d84:	4628      	mov	r0, r5
 8016d86:	f000 f93b 	bl	8017000 <_fflush_r>
 8016d8a:	b988      	cbnz	r0, 8016db0 <__swbuf_r+0x90>
 8016d8c:	4638      	mov	r0, r7
 8016d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016d90:	4b0a      	ldr	r3, [pc, #40]	; (8016dbc <__swbuf_r+0x9c>)
 8016d92:	429c      	cmp	r4, r3
 8016d94:	d101      	bne.n	8016d9a <__swbuf_r+0x7a>
 8016d96:	68ac      	ldr	r4, [r5, #8]
 8016d98:	e7cf      	b.n	8016d3a <__swbuf_r+0x1a>
 8016d9a:	4b09      	ldr	r3, [pc, #36]	; (8016dc0 <__swbuf_r+0xa0>)
 8016d9c:	429c      	cmp	r4, r3
 8016d9e:	bf08      	it	eq
 8016da0:	68ec      	ldreq	r4, [r5, #12]
 8016da2:	e7ca      	b.n	8016d3a <__swbuf_r+0x1a>
 8016da4:	4621      	mov	r1, r4
 8016da6:	4628      	mov	r0, r5
 8016da8:	f000 f81e 	bl	8016de8 <__swsetup_r>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	d0cb      	beq.n	8016d48 <__swbuf_r+0x28>
 8016db0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016db4:	e7ea      	b.n	8016d8c <__swbuf_r+0x6c>
 8016db6:	bf00      	nop
 8016db8:	08019e70 	.word	0x08019e70
 8016dbc:	08019e90 	.word	0x08019e90
 8016dc0:	08019e50 	.word	0x08019e50

08016dc4 <_write_r>:
 8016dc4:	b538      	push	{r3, r4, r5, lr}
 8016dc6:	4d07      	ldr	r5, [pc, #28]	; (8016de4 <_write_r+0x20>)
 8016dc8:	4604      	mov	r4, r0
 8016dca:	4608      	mov	r0, r1
 8016dcc:	4611      	mov	r1, r2
 8016dce:	2200      	movs	r2, #0
 8016dd0:	602a      	str	r2, [r5, #0]
 8016dd2:	461a      	mov	r2, r3
 8016dd4:	f7fe fe24 	bl	8015a20 <_write>
 8016dd8:	1c43      	adds	r3, r0, #1
 8016dda:	d102      	bne.n	8016de2 <_write_r+0x1e>
 8016ddc:	682b      	ldr	r3, [r5, #0]
 8016dde:	b103      	cbz	r3, 8016de2 <_write_r+0x1e>
 8016de0:	6023      	str	r3, [r4, #0]
 8016de2:	bd38      	pop	{r3, r4, r5, pc}
 8016de4:	20009390 	.word	0x20009390

08016de8 <__swsetup_r>:
 8016de8:	4b32      	ldr	r3, [pc, #200]	; (8016eb4 <__swsetup_r+0xcc>)
 8016dea:	b570      	push	{r4, r5, r6, lr}
 8016dec:	681d      	ldr	r5, [r3, #0]
 8016dee:	4606      	mov	r6, r0
 8016df0:	460c      	mov	r4, r1
 8016df2:	b125      	cbz	r5, 8016dfe <__swsetup_r+0x16>
 8016df4:	69ab      	ldr	r3, [r5, #24]
 8016df6:	b913      	cbnz	r3, 8016dfe <__swsetup_r+0x16>
 8016df8:	4628      	mov	r0, r5
 8016dfa:	f7ff fab5 	bl	8016368 <__sinit>
 8016dfe:	4b2e      	ldr	r3, [pc, #184]	; (8016eb8 <__swsetup_r+0xd0>)
 8016e00:	429c      	cmp	r4, r3
 8016e02:	d10f      	bne.n	8016e24 <__swsetup_r+0x3c>
 8016e04:	686c      	ldr	r4, [r5, #4]
 8016e06:	89a3      	ldrh	r3, [r4, #12]
 8016e08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e0c:	0719      	lsls	r1, r3, #28
 8016e0e:	d42c      	bmi.n	8016e6a <__swsetup_r+0x82>
 8016e10:	06dd      	lsls	r5, r3, #27
 8016e12:	d411      	bmi.n	8016e38 <__swsetup_r+0x50>
 8016e14:	2309      	movs	r3, #9
 8016e16:	6033      	str	r3, [r6, #0]
 8016e18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016e1c:	81a3      	strh	r3, [r4, #12]
 8016e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016e22:	e03e      	b.n	8016ea2 <__swsetup_r+0xba>
 8016e24:	4b25      	ldr	r3, [pc, #148]	; (8016ebc <__swsetup_r+0xd4>)
 8016e26:	429c      	cmp	r4, r3
 8016e28:	d101      	bne.n	8016e2e <__swsetup_r+0x46>
 8016e2a:	68ac      	ldr	r4, [r5, #8]
 8016e2c:	e7eb      	b.n	8016e06 <__swsetup_r+0x1e>
 8016e2e:	4b24      	ldr	r3, [pc, #144]	; (8016ec0 <__swsetup_r+0xd8>)
 8016e30:	429c      	cmp	r4, r3
 8016e32:	bf08      	it	eq
 8016e34:	68ec      	ldreq	r4, [r5, #12]
 8016e36:	e7e6      	b.n	8016e06 <__swsetup_r+0x1e>
 8016e38:	0758      	lsls	r0, r3, #29
 8016e3a:	d512      	bpl.n	8016e62 <__swsetup_r+0x7a>
 8016e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e3e:	b141      	cbz	r1, 8016e52 <__swsetup_r+0x6a>
 8016e40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e44:	4299      	cmp	r1, r3
 8016e46:	d002      	beq.n	8016e4e <__swsetup_r+0x66>
 8016e48:	4630      	mov	r0, r6
 8016e4a:	f7ff fb47 	bl	80164dc <_free_r>
 8016e4e:	2300      	movs	r3, #0
 8016e50:	6363      	str	r3, [r4, #52]	; 0x34
 8016e52:	89a3      	ldrh	r3, [r4, #12]
 8016e54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016e58:	81a3      	strh	r3, [r4, #12]
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	6063      	str	r3, [r4, #4]
 8016e5e:	6923      	ldr	r3, [r4, #16]
 8016e60:	6023      	str	r3, [r4, #0]
 8016e62:	89a3      	ldrh	r3, [r4, #12]
 8016e64:	f043 0308 	orr.w	r3, r3, #8
 8016e68:	81a3      	strh	r3, [r4, #12]
 8016e6a:	6923      	ldr	r3, [r4, #16]
 8016e6c:	b94b      	cbnz	r3, 8016e82 <__swsetup_r+0x9a>
 8016e6e:	89a3      	ldrh	r3, [r4, #12]
 8016e70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e78:	d003      	beq.n	8016e82 <__swsetup_r+0x9a>
 8016e7a:	4621      	mov	r1, r4
 8016e7c:	4630      	mov	r0, r6
 8016e7e:	f000 f933 	bl	80170e8 <__smakebuf_r>
 8016e82:	89a0      	ldrh	r0, [r4, #12]
 8016e84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016e88:	f010 0301 	ands.w	r3, r0, #1
 8016e8c:	d00a      	beq.n	8016ea4 <__swsetup_r+0xbc>
 8016e8e:	2300      	movs	r3, #0
 8016e90:	60a3      	str	r3, [r4, #8]
 8016e92:	6963      	ldr	r3, [r4, #20]
 8016e94:	425b      	negs	r3, r3
 8016e96:	61a3      	str	r3, [r4, #24]
 8016e98:	6923      	ldr	r3, [r4, #16]
 8016e9a:	b943      	cbnz	r3, 8016eae <__swsetup_r+0xc6>
 8016e9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016ea0:	d1ba      	bne.n	8016e18 <__swsetup_r+0x30>
 8016ea2:	bd70      	pop	{r4, r5, r6, pc}
 8016ea4:	0781      	lsls	r1, r0, #30
 8016ea6:	bf58      	it	pl
 8016ea8:	6963      	ldrpl	r3, [r4, #20]
 8016eaa:	60a3      	str	r3, [r4, #8]
 8016eac:	e7f4      	b.n	8016e98 <__swsetup_r+0xb0>
 8016eae:	2000      	movs	r0, #0
 8016eb0:	e7f7      	b.n	8016ea2 <__swsetup_r+0xba>
 8016eb2:	bf00      	nop
 8016eb4:	2000002c 	.word	0x2000002c
 8016eb8:	08019e70 	.word	0x08019e70
 8016ebc:	08019e90 	.word	0x08019e90
 8016ec0:	08019e50 	.word	0x08019e50

08016ec4 <abort>:
 8016ec4:	b508      	push	{r3, lr}
 8016ec6:	2006      	movs	r0, #6
 8016ec8:	f000 f994 	bl	80171f4 <raise>
 8016ecc:	2001      	movs	r0, #1
 8016ece:	f7eb f9d5 	bl	800227c <_exit>
	...

08016ed4 <_close_r>:
 8016ed4:	b538      	push	{r3, r4, r5, lr}
 8016ed6:	4d06      	ldr	r5, [pc, #24]	; (8016ef0 <_close_r+0x1c>)
 8016ed8:	2300      	movs	r3, #0
 8016eda:	4604      	mov	r4, r0
 8016edc:	4608      	mov	r0, r1
 8016ede:	602b      	str	r3, [r5, #0]
 8016ee0:	f7eb f9d6 	bl	8002290 <_close>
 8016ee4:	1c43      	adds	r3, r0, #1
 8016ee6:	d102      	bne.n	8016eee <_close_r+0x1a>
 8016ee8:	682b      	ldr	r3, [r5, #0]
 8016eea:	b103      	cbz	r3, 8016eee <_close_r+0x1a>
 8016eec:	6023      	str	r3, [r4, #0]
 8016eee:	bd38      	pop	{r3, r4, r5, pc}
 8016ef0:	20009390 	.word	0x20009390

08016ef4 <__sflush_r>:
 8016ef4:	898a      	ldrh	r2, [r1, #12]
 8016ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016efa:	4605      	mov	r5, r0
 8016efc:	0710      	lsls	r0, r2, #28
 8016efe:	460c      	mov	r4, r1
 8016f00:	d458      	bmi.n	8016fb4 <__sflush_r+0xc0>
 8016f02:	684b      	ldr	r3, [r1, #4]
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	dc05      	bgt.n	8016f14 <__sflush_r+0x20>
 8016f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	dc02      	bgt.n	8016f14 <__sflush_r+0x20>
 8016f0e:	2000      	movs	r0, #0
 8016f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f16:	2e00      	cmp	r6, #0
 8016f18:	d0f9      	beq.n	8016f0e <__sflush_r+0x1a>
 8016f1a:	2300      	movs	r3, #0
 8016f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016f20:	682f      	ldr	r7, [r5, #0]
 8016f22:	602b      	str	r3, [r5, #0]
 8016f24:	d032      	beq.n	8016f8c <__sflush_r+0x98>
 8016f26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016f28:	89a3      	ldrh	r3, [r4, #12]
 8016f2a:	075a      	lsls	r2, r3, #29
 8016f2c:	d505      	bpl.n	8016f3a <__sflush_r+0x46>
 8016f2e:	6863      	ldr	r3, [r4, #4]
 8016f30:	1ac0      	subs	r0, r0, r3
 8016f32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016f34:	b10b      	cbz	r3, 8016f3a <__sflush_r+0x46>
 8016f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f38:	1ac0      	subs	r0, r0, r3
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	4602      	mov	r2, r0
 8016f3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016f40:	6a21      	ldr	r1, [r4, #32]
 8016f42:	4628      	mov	r0, r5
 8016f44:	47b0      	blx	r6
 8016f46:	1c43      	adds	r3, r0, #1
 8016f48:	89a3      	ldrh	r3, [r4, #12]
 8016f4a:	d106      	bne.n	8016f5a <__sflush_r+0x66>
 8016f4c:	6829      	ldr	r1, [r5, #0]
 8016f4e:	291d      	cmp	r1, #29
 8016f50:	d82c      	bhi.n	8016fac <__sflush_r+0xb8>
 8016f52:	4a2a      	ldr	r2, [pc, #168]	; (8016ffc <__sflush_r+0x108>)
 8016f54:	40ca      	lsrs	r2, r1
 8016f56:	07d6      	lsls	r6, r2, #31
 8016f58:	d528      	bpl.n	8016fac <__sflush_r+0xb8>
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	6062      	str	r2, [r4, #4]
 8016f5e:	04d9      	lsls	r1, r3, #19
 8016f60:	6922      	ldr	r2, [r4, #16]
 8016f62:	6022      	str	r2, [r4, #0]
 8016f64:	d504      	bpl.n	8016f70 <__sflush_r+0x7c>
 8016f66:	1c42      	adds	r2, r0, #1
 8016f68:	d101      	bne.n	8016f6e <__sflush_r+0x7a>
 8016f6a:	682b      	ldr	r3, [r5, #0]
 8016f6c:	b903      	cbnz	r3, 8016f70 <__sflush_r+0x7c>
 8016f6e:	6560      	str	r0, [r4, #84]	; 0x54
 8016f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016f72:	602f      	str	r7, [r5, #0]
 8016f74:	2900      	cmp	r1, #0
 8016f76:	d0ca      	beq.n	8016f0e <__sflush_r+0x1a>
 8016f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f7c:	4299      	cmp	r1, r3
 8016f7e:	d002      	beq.n	8016f86 <__sflush_r+0x92>
 8016f80:	4628      	mov	r0, r5
 8016f82:	f7ff faab 	bl	80164dc <_free_r>
 8016f86:	2000      	movs	r0, #0
 8016f88:	6360      	str	r0, [r4, #52]	; 0x34
 8016f8a:	e7c1      	b.n	8016f10 <__sflush_r+0x1c>
 8016f8c:	6a21      	ldr	r1, [r4, #32]
 8016f8e:	2301      	movs	r3, #1
 8016f90:	4628      	mov	r0, r5
 8016f92:	47b0      	blx	r6
 8016f94:	1c41      	adds	r1, r0, #1
 8016f96:	d1c7      	bne.n	8016f28 <__sflush_r+0x34>
 8016f98:	682b      	ldr	r3, [r5, #0]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d0c4      	beq.n	8016f28 <__sflush_r+0x34>
 8016f9e:	2b1d      	cmp	r3, #29
 8016fa0:	d001      	beq.n	8016fa6 <__sflush_r+0xb2>
 8016fa2:	2b16      	cmp	r3, #22
 8016fa4:	d101      	bne.n	8016faa <__sflush_r+0xb6>
 8016fa6:	602f      	str	r7, [r5, #0]
 8016fa8:	e7b1      	b.n	8016f0e <__sflush_r+0x1a>
 8016faa:	89a3      	ldrh	r3, [r4, #12]
 8016fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fb0:	81a3      	strh	r3, [r4, #12]
 8016fb2:	e7ad      	b.n	8016f10 <__sflush_r+0x1c>
 8016fb4:	690f      	ldr	r7, [r1, #16]
 8016fb6:	2f00      	cmp	r7, #0
 8016fb8:	d0a9      	beq.n	8016f0e <__sflush_r+0x1a>
 8016fba:	0793      	lsls	r3, r2, #30
 8016fbc:	680e      	ldr	r6, [r1, #0]
 8016fbe:	bf08      	it	eq
 8016fc0:	694b      	ldreq	r3, [r1, #20]
 8016fc2:	600f      	str	r7, [r1, #0]
 8016fc4:	bf18      	it	ne
 8016fc6:	2300      	movne	r3, #0
 8016fc8:	eba6 0807 	sub.w	r8, r6, r7
 8016fcc:	608b      	str	r3, [r1, #8]
 8016fce:	f1b8 0f00 	cmp.w	r8, #0
 8016fd2:	dd9c      	ble.n	8016f0e <__sflush_r+0x1a>
 8016fd4:	6a21      	ldr	r1, [r4, #32]
 8016fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016fd8:	4643      	mov	r3, r8
 8016fda:	463a      	mov	r2, r7
 8016fdc:	4628      	mov	r0, r5
 8016fde:	47b0      	blx	r6
 8016fe0:	2800      	cmp	r0, #0
 8016fe2:	dc06      	bgt.n	8016ff2 <__sflush_r+0xfe>
 8016fe4:	89a3      	ldrh	r3, [r4, #12]
 8016fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016fea:	81a3      	strh	r3, [r4, #12]
 8016fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ff0:	e78e      	b.n	8016f10 <__sflush_r+0x1c>
 8016ff2:	4407      	add	r7, r0
 8016ff4:	eba8 0800 	sub.w	r8, r8, r0
 8016ff8:	e7e9      	b.n	8016fce <__sflush_r+0xda>
 8016ffa:	bf00      	nop
 8016ffc:	20400001 	.word	0x20400001

08017000 <_fflush_r>:
 8017000:	b538      	push	{r3, r4, r5, lr}
 8017002:	690b      	ldr	r3, [r1, #16]
 8017004:	4605      	mov	r5, r0
 8017006:	460c      	mov	r4, r1
 8017008:	b913      	cbnz	r3, 8017010 <_fflush_r+0x10>
 801700a:	2500      	movs	r5, #0
 801700c:	4628      	mov	r0, r5
 801700e:	bd38      	pop	{r3, r4, r5, pc}
 8017010:	b118      	cbz	r0, 801701a <_fflush_r+0x1a>
 8017012:	6983      	ldr	r3, [r0, #24]
 8017014:	b90b      	cbnz	r3, 801701a <_fflush_r+0x1a>
 8017016:	f7ff f9a7 	bl	8016368 <__sinit>
 801701a:	4b14      	ldr	r3, [pc, #80]	; (801706c <_fflush_r+0x6c>)
 801701c:	429c      	cmp	r4, r3
 801701e:	d11b      	bne.n	8017058 <_fflush_r+0x58>
 8017020:	686c      	ldr	r4, [r5, #4]
 8017022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d0ef      	beq.n	801700a <_fflush_r+0xa>
 801702a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801702c:	07d0      	lsls	r0, r2, #31
 801702e:	d404      	bmi.n	801703a <_fflush_r+0x3a>
 8017030:	0599      	lsls	r1, r3, #22
 8017032:	d402      	bmi.n	801703a <_fflush_r+0x3a>
 8017034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017036:	f7ff fa47 	bl	80164c8 <__retarget_lock_acquire_recursive>
 801703a:	4628      	mov	r0, r5
 801703c:	4621      	mov	r1, r4
 801703e:	f7ff ff59 	bl	8016ef4 <__sflush_r>
 8017042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017044:	07da      	lsls	r2, r3, #31
 8017046:	4605      	mov	r5, r0
 8017048:	d4e0      	bmi.n	801700c <_fflush_r+0xc>
 801704a:	89a3      	ldrh	r3, [r4, #12]
 801704c:	059b      	lsls	r3, r3, #22
 801704e:	d4dd      	bmi.n	801700c <_fflush_r+0xc>
 8017050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017052:	f7ff fa3a 	bl	80164ca <__retarget_lock_release_recursive>
 8017056:	e7d9      	b.n	801700c <_fflush_r+0xc>
 8017058:	4b05      	ldr	r3, [pc, #20]	; (8017070 <_fflush_r+0x70>)
 801705a:	429c      	cmp	r4, r3
 801705c:	d101      	bne.n	8017062 <_fflush_r+0x62>
 801705e:	68ac      	ldr	r4, [r5, #8]
 8017060:	e7df      	b.n	8017022 <_fflush_r+0x22>
 8017062:	4b04      	ldr	r3, [pc, #16]	; (8017074 <_fflush_r+0x74>)
 8017064:	429c      	cmp	r4, r3
 8017066:	bf08      	it	eq
 8017068:	68ec      	ldreq	r4, [r5, #12]
 801706a:	e7da      	b.n	8017022 <_fflush_r+0x22>
 801706c:	08019e70 	.word	0x08019e70
 8017070:	08019e90 	.word	0x08019e90
 8017074:	08019e50 	.word	0x08019e50

08017078 <_lseek_r>:
 8017078:	b538      	push	{r3, r4, r5, lr}
 801707a:	4d07      	ldr	r5, [pc, #28]	; (8017098 <_lseek_r+0x20>)
 801707c:	4604      	mov	r4, r0
 801707e:	4608      	mov	r0, r1
 8017080:	4611      	mov	r1, r2
 8017082:	2200      	movs	r2, #0
 8017084:	602a      	str	r2, [r5, #0]
 8017086:	461a      	mov	r2, r3
 8017088:	f7eb f929 	bl	80022de <_lseek>
 801708c:	1c43      	adds	r3, r0, #1
 801708e:	d102      	bne.n	8017096 <_lseek_r+0x1e>
 8017090:	682b      	ldr	r3, [r5, #0]
 8017092:	b103      	cbz	r3, 8017096 <_lseek_r+0x1e>
 8017094:	6023      	str	r3, [r4, #0]
 8017096:	bd38      	pop	{r3, r4, r5, pc}
 8017098:	20009390 	.word	0x20009390

0801709c <__swhatbuf_r>:
 801709c:	b570      	push	{r4, r5, r6, lr}
 801709e:	460e      	mov	r6, r1
 80170a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80170a4:	2900      	cmp	r1, #0
 80170a6:	b096      	sub	sp, #88	; 0x58
 80170a8:	4614      	mov	r4, r2
 80170aa:	461d      	mov	r5, r3
 80170ac:	da08      	bge.n	80170c0 <__swhatbuf_r+0x24>
 80170ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80170b2:	2200      	movs	r2, #0
 80170b4:	602a      	str	r2, [r5, #0]
 80170b6:	061a      	lsls	r2, r3, #24
 80170b8:	d410      	bmi.n	80170dc <__swhatbuf_r+0x40>
 80170ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80170be:	e00e      	b.n	80170de <__swhatbuf_r+0x42>
 80170c0:	466a      	mov	r2, sp
 80170c2:	f000 f8b3 	bl	801722c <_fstat_r>
 80170c6:	2800      	cmp	r0, #0
 80170c8:	dbf1      	blt.n	80170ae <__swhatbuf_r+0x12>
 80170ca:	9a01      	ldr	r2, [sp, #4]
 80170cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80170d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80170d4:	425a      	negs	r2, r3
 80170d6:	415a      	adcs	r2, r3
 80170d8:	602a      	str	r2, [r5, #0]
 80170da:	e7ee      	b.n	80170ba <__swhatbuf_r+0x1e>
 80170dc:	2340      	movs	r3, #64	; 0x40
 80170de:	2000      	movs	r0, #0
 80170e0:	6023      	str	r3, [r4, #0]
 80170e2:	b016      	add	sp, #88	; 0x58
 80170e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080170e8 <__smakebuf_r>:
 80170e8:	898b      	ldrh	r3, [r1, #12]
 80170ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80170ec:	079d      	lsls	r5, r3, #30
 80170ee:	4606      	mov	r6, r0
 80170f0:	460c      	mov	r4, r1
 80170f2:	d507      	bpl.n	8017104 <__smakebuf_r+0x1c>
 80170f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80170f8:	6023      	str	r3, [r4, #0]
 80170fa:	6123      	str	r3, [r4, #16]
 80170fc:	2301      	movs	r3, #1
 80170fe:	6163      	str	r3, [r4, #20]
 8017100:	b002      	add	sp, #8
 8017102:	bd70      	pop	{r4, r5, r6, pc}
 8017104:	ab01      	add	r3, sp, #4
 8017106:	466a      	mov	r2, sp
 8017108:	f7ff ffc8 	bl	801709c <__swhatbuf_r>
 801710c:	9900      	ldr	r1, [sp, #0]
 801710e:	4605      	mov	r5, r0
 8017110:	4630      	mov	r0, r6
 8017112:	f7ff fa4f 	bl	80165b4 <_malloc_r>
 8017116:	b948      	cbnz	r0, 801712c <__smakebuf_r+0x44>
 8017118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801711c:	059a      	lsls	r2, r3, #22
 801711e:	d4ef      	bmi.n	8017100 <__smakebuf_r+0x18>
 8017120:	f023 0303 	bic.w	r3, r3, #3
 8017124:	f043 0302 	orr.w	r3, r3, #2
 8017128:	81a3      	strh	r3, [r4, #12]
 801712a:	e7e3      	b.n	80170f4 <__smakebuf_r+0xc>
 801712c:	4b0d      	ldr	r3, [pc, #52]	; (8017164 <__smakebuf_r+0x7c>)
 801712e:	62b3      	str	r3, [r6, #40]	; 0x28
 8017130:	89a3      	ldrh	r3, [r4, #12]
 8017132:	6020      	str	r0, [r4, #0]
 8017134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017138:	81a3      	strh	r3, [r4, #12]
 801713a:	9b00      	ldr	r3, [sp, #0]
 801713c:	6163      	str	r3, [r4, #20]
 801713e:	9b01      	ldr	r3, [sp, #4]
 8017140:	6120      	str	r0, [r4, #16]
 8017142:	b15b      	cbz	r3, 801715c <__smakebuf_r+0x74>
 8017144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017148:	4630      	mov	r0, r6
 801714a:	f000 f881 	bl	8017250 <_isatty_r>
 801714e:	b128      	cbz	r0, 801715c <__smakebuf_r+0x74>
 8017150:	89a3      	ldrh	r3, [r4, #12]
 8017152:	f023 0303 	bic.w	r3, r3, #3
 8017156:	f043 0301 	orr.w	r3, r3, #1
 801715a:	81a3      	strh	r3, [r4, #12]
 801715c:	89a0      	ldrh	r0, [r4, #12]
 801715e:	4305      	orrs	r5, r0
 8017160:	81a5      	strh	r5, [r4, #12]
 8017162:	e7cd      	b.n	8017100 <__smakebuf_r+0x18>
 8017164:	08016301 	.word	0x08016301

08017168 <__malloc_lock>:
 8017168:	4801      	ldr	r0, [pc, #4]	; (8017170 <__malloc_lock+0x8>)
 801716a:	f7ff b9ad 	b.w	80164c8 <__retarget_lock_acquire_recursive>
 801716e:	bf00      	nop
 8017170:	20009394 	.word	0x20009394

08017174 <__malloc_unlock>:
 8017174:	4801      	ldr	r0, [pc, #4]	; (801717c <__malloc_unlock+0x8>)
 8017176:	f7ff b9a8 	b.w	80164ca <__retarget_lock_release_recursive>
 801717a:	bf00      	nop
 801717c:	20009394 	.word	0x20009394

08017180 <_read_r>:
 8017180:	b538      	push	{r3, r4, r5, lr}
 8017182:	4d07      	ldr	r5, [pc, #28]	; (80171a0 <_read_r+0x20>)
 8017184:	4604      	mov	r4, r0
 8017186:	4608      	mov	r0, r1
 8017188:	4611      	mov	r1, r2
 801718a:	2200      	movs	r2, #0
 801718c:	602a      	str	r2, [r5, #0]
 801718e:	461a      	mov	r2, r3
 8017190:	f7fe fc5c 	bl	8015a4c <_read>
 8017194:	1c43      	adds	r3, r0, #1
 8017196:	d102      	bne.n	801719e <_read_r+0x1e>
 8017198:	682b      	ldr	r3, [r5, #0]
 801719a:	b103      	cbz	r3, 801719e <_read_r+0x1e>
 801719c:	6023      	str	r3, [r4, #0]
 801719e:	bd38      	pop	{r3, r4, r5, pc}
 80171a0:	20009390 	.word	0x20009390

080171a4 <_raise_r>:
 80171a4:	291f      	cmp	r1, #31
 80171a6:	b538      	push	{r3, r4, r5, lr}
 80171a8:	4604      	mov	r4, r0
 80171aa:	460d      	mov	r5, r1
 80171ac:	d904      	bls.n	80171b8 <_raise_r+0x14>
 80171ae:	2316      	movs	r3, #22
 80171b0:	6003      	str	r3, [r0, #0]
 80171b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80171b6:	bd38      	pop	{r3, r4, r5, pc}
 80171b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80171ba:	b112      	cbz	r2, 80171c2 <_raise_r+0x1e>
 80171bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80171c0:	b94b      	cbnz	r3, 80171d6 <_raise_r+0x32>
 80171c2:	4620      	mov	r0, r4
 80171c4:	f000 f830 	bl	8017228 <_getpid_r>
 80171c8:	462a      	mov	r2, r5
 80171ca:	4601      	mov	r1, r0
 80171cc:	4620      	mov	r0, r4
 80171ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80171d2:	f000 b817 	b.w	8017204 <_kill_r>
 80171d6:	2b01      	cmp	r3, #1
 80171d8:	d00a      	beq.n	80171f0 <_raise_r+0x4c>
 80171da:	1c59      	adds	r1, r3, #1
 80171dc:	d103      	bne.n	80171e6 <_raise_r+0x42>
 80171de:	2316      	movs	r3, #22
 80171e0:	6003      	str	r3, [r0, #0]
 80171e2:	2001      	movs	r0, #1
 80171e4:	e7e7      	b.n	80171b6 <_raise_r+0x12>
 80171e6:	2400      	movs	r4, #0
 80171e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80171ec:	4628      	mov	r0, r5
 80171ee:	4798      	blx	r3
 80171f0:	2000      	movs	r0, #0
 80171f2:	e7e0      	b.n	80171b6 <_raise_r+0x12>

080171f4 <raise>:
 80171f4:	4b02      	ldr	r3, [pc, #8]	; (8017200 <raise+0xc>)
 80171f6:	4601      	mov	r1, r0
 80171f8:	6818      	ldr	r0, [r3, #0]
 80171fa:	f7ff bfd3 	b.w	80171a4 <_raise_r>
 80171fe:	bf00      	nop
 8017200:	2000002c 	.word	0x2000002c

08017204 <_kill_r>:
 8017204:	b538      	push	{r3, r4, r5, lr}
 8017206:	4d07      	ldr	r5, [pc, #28]	; (8017224 <_kill_r+0x20>)
 8017208:	2300      	movs	r3, #0
 801720a:	4604      	mov	r4, r0
 801720c:	4608      	mov	r0, r1
 801720e:	4611      	mov	r1, r2
 8017210:	602b      	str	r3, [r5, #0]
 8017212:	f7eb f821 	bl	8002258 <_kill>
 8017216:	1c43      	adds	r3, r0, #1
 8017218:	d102      	bne.n	8017220 <_kill_r+0x1c>
 801721a:	682b      	ldr	r3, [r5, #0]
 801721c:	b103      	cbz	r3, 8017220 <_kill_r+0x1c>
 801721e:	6023      	str	r3, [r4, #0]
 8017220:	bd38      	pop	{r3, r4, r5, pc}
 8017222:	bf00      	nop
 8017224:	20009390 	.word	0x20009390

08017228 <_getpid_r>:
 8017228:	f7eb b80e 	b.w	8002248 <_getpid>

0801722c <_fstat_r>:
 801722c:	b538      	push	{r3, r4, r5, lr}
 801722e:	4d07      	ldr	r5, [pc, #28]	; (801724c <_fstat_r+0x20>)
 8017230:	2300      	movs	r3, #0
 8017232:	4604      	mov	r4, r0
 8017234:	4608      	mov	r0, r1
 8017236:	4611      	mov	r1, r2
 8017238:	602b      	str	r3, [r5, #0]
 801723a:	f7eb f835 	bl	80022a8 <_fstat>
 801723e:	1c43      	adds	r3, r0, #1
 8017240:	d102      	bne.n	8017248 <_fstat_r+0x1c>
 8017242:	682b      	ldr	r3, [r5, #0]
 8017244:	b103      	cbz	r3, 8017248 <_fstat_r+0x1c>
 8017246:	6023      	str	r3, [r4, #0]
 8017248:	bd38      	pop	{r3, r4, r5, pc}
 801724a:	bf00      	nop
 801724c:	20009390 	.word	0x20009390

08017250 <_isatty_r>:
 8017250:	b538      	push	{r3, r4, r5, lr}
 8017252:	4d06      	ldr	r5, [pc, #24]	; (801726c <_isatty_r+0x1c>)
 8017254:	2300      	movs	r3, #0
 8017256:	4604      	mov	r4, r0
 8017258:	4608      	mov	r0, r1
 801725a:	602b      	str	r3, [r5, #0]
 801725c:	f7eb f834 	bl	80022c8 <_isatty>
 8017260:	1c43      	adds	r3, r0, #1
 8017262:	d102      	bne.n	801726a <_isatty_r+0x1a>
 8017264:	682b      	ldr	r3, [r5, #0]
 8017266:	b103      	cbz	r3, 801726a <_isatty_r+0x1a>
 8017268:	6023      	str	r3, [r4, #0]
 801726a:	bd38      	pop	{r3, r4, r5, pc}
 801726c:	20009390 	.word	0x20009390

08017270 <_init>:
 8017270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017272:	bf00      	nop
 8017274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017276:	bc08      	pop	{r3}
 8017278:	469e      	mov	lr, r3
 801727a:	4770      	bx	lr

0801727c <_fini>:
 801727c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801727e:	bf00      	nop
 8017280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017282:	bc08      	pop	{r3}
 8017284:	469e      	mov	lr, r3
 8017286:	4770      	bx	lr
